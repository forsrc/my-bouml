format 222
"dgc" // jdk1.8::java::rmi::dgc
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/rmi/dgc/"
  java_package "java.rmi.dgc"
  classview 175618 "dgc"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1010050 "DGC"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The DGC abstraction is used for the server side of the distributed
garbage collection algorithm. This interface contains the two
methods: dirty and clean. A dirty call is made when a remote
reference is unmarshaled in a client (the client is indicated by
its VMID). A corresponding clean call is made when no more
references to the remote reference exist in the client. A failed
dirty call must schedule a strong clean call so that the call's
sequence number can be retained in order to detect future calls
received out of order by the distributed garbage collector.

A reference to a remote object is leased for a period of time by
the client holding the reference. The lease period starts when the
dirty call is received. It is the client's responsibility to renew
the leases, by making additional dirty calls, on the remote
references it holds before such leases expire. If the client does
not renew the lease before it expires, the distributed garbage
collector assumes that the remote object is no longer referenced by
that client.

@author Ann Wollrath
"
      classrelation 3330690 // <generalisation>
	relation 3330690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3330690 // <generalisation>
	  b parent class_ref 207106 // Remote
      end

      operation 7895682 "dirty"
	public return_type class_ref 1010178 // Lease
	nparams 3
	  param inout name "ids" type class_ref 1010306 // ObjID
	multiplicity "[]"
	  param in name "sequenceNum" explicit_type "long"
	  param inout name "lease" type class_ref 1010178 // Lease
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The dirty call requests leases for the remote object references
associated with the object identifiers contained in the array
'ids'. The 'lease' contains a client's unique VM identifier (VMID)
and a requested lease period. For each remote object exported
in the local VM, the garbage collector maintains a reference
list-a list of clients that hold references to it. If the lease
is granted, the garbage collector adds the client's VMID to the
reference list for each remote object indicated in 'ids'. The
'sequenceNum' parameter is a sequence number that is used to
detect and discard late calls to the garbage collector. The
sequence number should always increase for each subsequent call
to the garbage collector.

Some clients are unable to generate a VMID, since a VMID is a
universally unique identifier that contains a host address
which some clients are unable to obtain due to security
restrictions. In this case, a client can use a VMID of null,
and the distributed garbage collector will assign a VMID for
the client.

The dirty call returns a Lease object that contains the VMID
used and the lease period granted for the remote references (a
server may decide to grant a smaller lease period than the
client requests). A client must use the VMID the garbage
collector uses in order to make corresponding clean calls when
the client drops remote object references.

A client VM need only make one initial dirty call for each
remote reference referenced in the VM (even if it has multiple
references to the same remote object). The client must also
make a dirty call to renew leases on remote references before
such leases expire. When the client no longer has any
references to a specific remote object, it must schedule a
clean call for the object ID associated with the reference.

@param ids IDs of objects to mark as referenced by calling client
@param sequenceNum sequence number
@param lease requested lease
@return granted lease
@throws RemoteException if dirty call fails
"
      end

      operation 7895810 "clean"
	public explicit_return_type "void"
	nparams 4
	  param inout name "ids" type class_ref 1010306 // ObjID
	multiplicity "[]"
	  param in name "sequenceNum" explicit_type "long"
	  param inout name "vmid" type class_ref 1010434 // VMID
	  param inout name "strong" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The clean call removes the 'vmid' from the reference list of
each remote object indicated in 'id's.  The sequence number is
used to detect late clean calls.  If the argument 'strong' is
true, then the clean call is a result of a failed dirty call,
thus the sequence number for the client 'vmid' needs to be
remembered.

@param ids IDs of objects to mark as unreferenced by calling client
@param sequenceNum sequence number
@param vmid client VMID
@param strong make 'strong' clean call
@throws RemoteException if clean call fails
"
      end
    end

    class 1010178 "Lease"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A lease contains a unique VM identifier and a lease duration. A
Lease object is used to request and grant leases to remote object
references.
"
      classrelation 3330818 // <realization>
	relation 3330818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3330818 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3330946 // vmid (<unidirectional association>)
	relation 3330946 --->
	  a role_name "vmid" private
	    comment "
@serial Virtual Machine ID with which this Lease is associated.
@see #getVMID

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3330946 // vmid (<unidirectional association>)
	  b parent class_ref 1010434 // VMID
      end

      attribute 1836290 "value"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Duration of this lease.
@see #getValue

"
      end

      attribute 1836418 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5713411624328831948L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with JDK 1.1.x version of class 
"
      end

      operation 7895938 "Lease"
	public explicit_return_type ""
	nparams 2
	  param inout name "id" type class_ref 1010434 // VMID
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a lease with a specific VMID and lease duration. The
vmid may be null.
@param id VMID associated with this lease
@param duration lease duration
"
      end

      operation 7896066 "getVMID"
	public return_type class_ref 1010434 // VMID
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the client VMID associated with the lease.
@return client VMID
"
      end

      operation 7896194 "getValue"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lease duration.
@return lease duration
"
      end
    end

    class 1010434 "VMID"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A VMID is a identifier that is unique across all Java virtual
machines.  VMIDs are used by the distributed garbage collector
to identify client VMs.

@author      Ann Wollrath
@author      Peter Jones
"
      classrelation 3331074 // <realization>
	relation 3331074 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3331074 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1836546 "randomBytes"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Array of bytes uniquely identifying this host 
"
      end

      attribute 1836674 "addr"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial array of bytes uniquely identifying host created on

"
      end

      classrelation 3331202 // uid (<unidirectional association>)
	relation 3331202 --->
	  a role_name "uid" private
	    comment "
@serial unique identifier with respect to host created on

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3331202 // uid (<unidirectional association>)
	  b parent class_ref 1009794 // UID
      end

      attribute 1836802 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -538642295484486218L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " indicate compatibility with JDK 1.1.x version of class 
"
      end

      extra_member 166914 "initialization"
	
	cpp "" ""
	java "  static {
        // Generate 8 bytes of random data.
        SecureRandom secureRandom = new SecureRandom();
        byte bytes[] = new byte[8];
        secureRandom.nextBytes(bytes);
        randomBytes = bytes;
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7896322 "VMID"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new VMID.  Each new VMID returned from this constructor
is unique for all Java virtual machines under the following
conditions: a) the conditions for uniqueness for objects of
the class <code>java.rmi.server.UID</code> are satisfied, and b) an
address can be obtained for this host that is unique and constant
for the lifetime of this object.
"
      end

      operation 7896450 "isUnique"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Return true if an accurate address can be determined for this
host.  If false, reliable VMID cannot be generated from this host
@return true if host address can be determined, false otherwise
@deprecated
"
      end

      operation 7896578 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compute hash code for this VMID.
"
      end

      operation 7896706 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare this VMID to another, and return true if they are the
same identifier.
"
      end

      operation 7896834 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return string representation of this VMID.
"
      end
    end
  end

  deploymentview 169090 "dgc"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 745986 "DGC"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.*;
import java.rmi.server.ObjID;
${definition}"
      associated_elems
	class_ref 1010050 // DGC
      end
      comment "Copyright (c) 1996, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 746114 "Lease"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1010178 // Lease
      end
      comment "Copyright (c) 1996, 1998, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 746242 "VMID"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.server.UID;
import java.security.SecureRandom;
${definition}"
      associated_elems
	class_ref 1010434 // VMID
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
