class LongWrappingSpliterator
!!!9598338.java!!!	LongWrappingSpliterator(inout ph : PipelineHelper, inout supplier : Supplier, inout parallel : boolean)
            super(ph, supplier, parallel);
!!!9598466.java!!!	LongWrappingSpliterator(inout ph : PipelineHelper, inout spliterator : Spliterator, inout parallel : boolean)
            super(ph, spliterator, parallel);
!!!9598594.java!!!	wrap(inout s : Spliterator) : StreamSpliterators::AbstractWrappingSpliterator
            return new LongWrappingSpliterator<>(ph, s, isParallel);
!!!9598722.java!!!	initPartialTraversalState() : void
            SpinedBuffer.OfLong b = new SpinedBuffer.OfLong();
            buffer = b;
            bufferSink = ph.wrapSink((Sink.OfLong) b::accept);
            pusher = () -> spliterator.tryAdvance(bufferSink);
!!!9598850.java!!!	trySplit() : Spliterator::OfLong
            return (Spliterator.OfLong) super.trySplit();
!!!9598978.java!!!	tryAdvance(inout consumer : LongConsumer) : boolean
            Objects.requireNonNull(consumer);
            boolean hasNext = doAdvance();
            if (hasNext)
                consumer.accept(buffer.get(nextToConsume));
            return hasNext;
!!!9599106.java!!!	forEachRemaining(inout consumer : LongConsumer) : void
            if (buffer == null && !finished) {
                Objects.requireNonNull(consumer);
                init();

                ph.wrapAndCopyInto((Sink.OfLong) consumer::accept, spliterator);
                finished = true;
            }
            else {
                do { } while (tryAdvance(consumer));
            }
