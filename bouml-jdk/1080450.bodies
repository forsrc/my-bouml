class DoubleSummaryStatistics
!!!8772738.java!!!	accept(in value : double) : void
        ++count;
        simpleSum += value;
        sumWithCompensation(value);
        min = Math.min(min, value);
        max = Math.max(max, value);
!!!8772866.java!!!	combine(inout other : DoubleSummaryStatistics) : void
        count += other.count;
        simpleSum += other.simpleSum;
        sumWithCompensation(other.sum);
        sumWithCompensation(other.sumCompensation);
        min = Math.min(min, other.min);
        max = Math.max(max, other.max);
!!!8772994.java!!!	sumWithCompensation(in value : double) : void
        double tmp = value - sumCompensation;
        double velvel = sum + tmp; // Little wolf of rounding error
        sumCompensation = (velvel - sum) - tmp;
        sum = velvel;
!!!8773122.java!!!	getCount() : long
        return count;
!!!8773250.java!!!	getSum() : double
        // Better error bounds to add both terms as the final sum
        double tmp =  sum + sumCompensation;
        if (Double.isNaN(tmp) && Double.isInfinite(simpleSum))
            // If the compensated sum is spuriously NaN from
            // accumulating one or more same-signed infinite values,
            // return the correctly-signed infinity stored in
            // simpleSum.
            return simpleSum;
        else
            return tmp;
!!!8773378.java!!!	getMin() : double
        return min;
!!!8773506.java!!!	getMax() : double
        return max;
!!!8773634.java!!!	getAverage() : double
        return getCount() > 0 ? getSum() / getCount() : 0.0d;
!!!8773762.java!!!	toString() : String
        return String.format(
            "%s{count=%d, sum=%f, min=%f, average=%f, max=%f}",
            this.getClass().getSimpleName(),
            getCount(),
            getSum(),
            getMin(),
            getAverage(),
            getMax());
