class CallSite
!!!7167490.java!!!	CallSite(inout type : MethodType)
        target = makeUninitializedCallSite(type);
!!!7167618.java!!!	CallSite(inout target : MethodHandle)
        target.type();  // null check
        this.target = target;
!!!7167746.java!!!	CallSite(inout targetType : MethodType, inout createTargetHook : MethodHandle)
        this(targetType);
        ConstantCallSite selfCCS = (ConstantCallSite) this;
        MethodHandle boundTarget = (MethodHandle) createTargetHook.invokeWithArguments(selfCCS);
        checkTargetChange(this.target, boundTarget);
        this.target = boundTarget;
!!!7167874.java!!!	type() : MethodType
        // warning:  do not call getTarget here, because CCS.getTarget can throw IllegalStateException
        return target.type();
!!!7168258.java!!!	checkTargetChange(inout oldTarget : MethodHandle, inout newTarget : MethodHandle) : void
        MethodType oldType = oldTarget.type();
        MethodType newType = newTarget.type();  // null check!
        if (!newType.equals(oldType))
            throw wrongTargetType(newTarget, oldType);
!!!7168386.java!!!	wrongTargetType(inout target : MethodHandle, inout type : MethodType) : WrongMethodTypeException
        return new WrongMethodTypeException(String.valueOf(target)+" should be of type "+type);
!!!7168642.java!!!	makeDynamicInvoker() : MethodHandle
        MethodHandle getTarget = GET_TARGET.bindArgumentL(0, this);
        MethodHandle invoker = MethodHandles.exactInvoker(this.type());
        return MethodHandles.foldArguments(invoker, getTarget);
!!!7168770.java!!!	uninitializedCallSite(inout  : Object...ignore) : Object
        throw new IllegalStateException("uninitialized call site");
!!!7168898.java!!!	makeUninitializedCallSite(inout targetType : MethodType) : MethodHandle
        MethodType basicType = targetType.basicType();
        MethodHandle invoker = basicType.form().cachedMethodHandle(MethodTypeForm.MH_UNINIT_CS);
        if (invoker == null) {
            invoker = THROW_UCS.asType(basicType);
            invoker = basicType.form().setCachedMethodHandle(MethodTypeForm.MH_UNINIT_CS, invoker);
        }
        // unchecked view is OK since no values will be received or returned
        return invoker.viewAsType(targetType, false);
!!!7169026.java!!!	setTargetNormal(inout newTarget : MethodHandle) : void
        MethodHandleNatives.setCallSiteTargetNormal(this, newTarget);
!!!7169154.java!!!	getTargetVolatile() : MethodHandle
        return (MethodHandle) UNSAFE.getObjectVolatile(this, TARGET_OFFSET);
!!!7169282.java!!!	setTargetVolatile(inout newTarget : MethodHandle) : void
        MethodHandleNatives.setCallSiteTargetVolatile(this, newTarget);
!!!7169410.java!!!	makeSite(inout bootstrapMethod : MethodHandle, inout name : String, inout type : MethodType, inout info : Object, inout callerClass : Class) : CallSite
        MethodHandles.Lookup caller = IMPL_LOOKUP.in(callerClass);
        CallSite site;
        try {
            Object binding;
            info = maybeReBox(info);
            if (info == null) {
                binding = bootstrapMethod.invoke(caller, name, type);
            } else if (!info.getClass().isArray()) {
                binding = bootstrapMethod.invoke(caller, name, type, info);
            } else {
                Object[] argv = (Object[]) info;
                maybeReBoxElements(argv);
                switch (argv.length) {
                case 0:
                    binding = bootstrapMethod.invoke(caller, name, type);
                    break;
                case 1:
                    binding = bootstrapMethod.invoke(caller, name, type,
                                                     argv[0]);
                    break;
                case 2:
                    binding = bootstrapMethod.invoke(caller, name, type,
                                                     argv[0], argv[1]);
                    break;
                case 3:
                    binding = bootstrapMethod.invoke(caller, name, type,
                                                     argv[0], argv[1], argv[2]);
                    break;
                case 4:
                    binding = bootstrapMethod.invoke(caller, name, type,
                                                     argv[0], argv[1], argv[2], argv[3]);
                    break;
                case 5:
                    binding = bootstrapMethod.invoke(caller, name, type,
                                                     argv[0], argv[1], argv[2], argv[3], argv[4]);
                    break;
                case 6:
                    binding = bootstrapMethod.invoke(caller, name, type,
                                                     argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
                    break;
                default:
                    final int NON_SPREAD_ARG_COUNT = 3;  // (caller, name, type)
                    if (NON_SPREAD_ARG_COUNT + argv.length > MethodType.MAX_MH_ARITY)
                        throw new BootstrapMethodError("too many bootstrap method arguments");
                    MethodType bsmType = bootstrapMethod.type();
                    MethodType invocationType = MethodType.genericMethodType(NON_SPREAD_ARG_COUNT + argv.length);
                    MethodHandle typedBSM = bootstrapMethod.asType(invocationType);
                    MethodHandle spreader = invocationType.invokers().spreadInvoker(NON_SPREAD_ARG_COUNT);
                    binding = spreader.invokeExact(typedBSM, (Object)caller, (Object)name, (Object)type, argv);
                }
            }
            //System.out.println("BSM for "+name+type+" => "+binding);
            if (binding instanceof CallSite) {
                site = (CallSite) binding;
            }  else {
                throw new ClassCastException("bootstrap method failed to produce a CallSite");
            }
            if (!site.getTarget().type().equals(type))
                throw wrongTargetType(site.getTarget(), type);
        } catch (Throwable ex) {
            BootstrapMethodError bex;
            if (ex instanceof BootstrapMethodError)
                bex = (BootstrapMethodError) ex;
            else
                bex = new BootstrapMethodError("call site initialization exception", ex);
            throw bex;
        }
        return site;
!!!7169538.java!!!	maybeReBox(inout x : Object) : Object
        if (x instanceof Integer) {
            int xi = (int) x;
            if (xi == (byte) xi)
                x = xi;  // must rebox; see JLS 5.1.7
        }
        return x;
!!!7169666.java!!!	maybeReBoxElements(inout xa : Object [[]]) : void
        for (int i = 0; i < xa.length; i++) {
            xa[i] = maybeReBox(xa[i]);
        }
