class StringEnvironment
!!!7069186.java!!!	toString(inout v : ProcessEnvironment::Value) : String
            return v == null ? null : v.toString();
!!!7069314.java!!!	StringEnvironment(inout m : Map)
this.m = m;
!!!7069442.java!!!	size() : int
return m.size();
!!!7069570.java!!!	isEmpty() : boolean
return m.isEmpty();
!!!7069698.java!!!	clear() : void
       m.clear();
!!!7069826.java!!!	containsKey(inout key : Object) : boolean
            return m.containsKey(Variable.valueOfQueryOnly(key));
!!!7069954.java!!!	containsValue(inout value : Object) : boolean
            return m.containsValue(Value.valueOfQueryOnly(value));
!!!7070082.java!!!	get(inout key : Object) : String
            return toString(m.get(Variable.valueOfQueryOnly(key)));
!!!7070210.java!!!	put(inout key : String, inout value : String) : String
            return toString(m.put(Variable.valueOf(key),
                                  Value.valueOf(value)));
!!!7070338.java!!!	remove(inout key : Object) : String
            return toString(m.remove(Variable.valueOfQueryOnly(key)));
!!!7070466.java!!!	keySet() : Set
            return new StringKeySet(m.keySet());
!!!7070594.java!!!	entrySet() : Set
            return new StringEntrySet(m.entrySet());
!!!7070722.java!!!	values() : Collection
            return new StringValues(m.values());
!!!7070850.java!!!	toEnvironmentBlock(inout envc : int [[]]) : byte
            int count = m.size() * 2; // For added '=' and NUL
            for (Map.Entry<Variable,Value> entry : m.entrySet()) {
                count += entry.getKey().getBytes().length;
                count += entry.getValue().getBytes().length;
            }

            byte[] block = new byte[count];

            int i = 0;
            for (Map.Entry<Variable,Value> entry : m.entrySet()) {
                byte[] key   = entry.getKey  ().getBytes();
                byte[] value = entry.getValue().getBytes();
                System.arraycopy(key, 0, block, i, key.length);
                i+=key.length;
                block[i++] = (byte) '=';
                System.arraycopy(value, 0, block, i, value.length);
                i+=value.length + 1;
                // No need to write NUL byte explicitly
                //block[i++] = (byte) '\u0000';
            }
            envc[0] = m.size();
            return block;
