class XMLChar
!!!5109890.java!!!	isSupplemental(in c : int) : boolean
        return (c >= 0x10000 && c <= 0x10FFFF);
!!!5110018.java!!!	supplemental(in h : char, in l : char) : int
        return (h - 0xD800) * 0x400 + (l - 0xDC00) + 0x10000;
!!!5110146.java!!!	highSurrogate(in c : int) : char
        return (char) (((c - 0x00010000) >> 10) + 0xD800);
!!!5110274.java!!!	lowSurrogate(in c : int) : char
        return (char) (((c - 0x00010000) & 0x3FF) + 0xDC00);
!!!5110402.java!!!	isHighSurrogate(in c : int) : boolean
        return (0xD800 <= c && c <= 0xDBFF);
!!!5110530.java!!!	isLowSurrogate(in c : int) : boolean
        return (0xDC00 <= c && c <= 0xDFFF);
!!!5110658.java!!!	isValid(in c : int) : boolean
        return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) ||
               (0x10000 <= c && c <= 0x10FFFF);
!!!5110786.java!!!	isInvalid(in c : int) : boolean
        return !isValid(c);
!!!5110914.java!!!	isContent(in c : int) : boolean
        return (c < 0x10000 && (CHARS[c] & MASK_CONTENT) != 0) ||
               (0x10000 <= c && c <= 0x10FFFF);
!!!5111042.java!!!	isMarkup(in c : int) : boolean
        return c == '<' || c == '&' || c == '%';
!!!5111170.java!!!	isSpace(in c : int) : boolean
        return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;
!!!5111298.java!!!	isNameStart(in c : int) : boolean
        return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;
!!!5111426.java!!!	isName(in c : int) : boolean
        return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;
!!!5111554.java!!!	isNCNameStart(in c : int) : boolean
        return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;
!!!5111682.java!!!	isNCName(in c : int) : boolean
        return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;
!!!5111810.java!!!	isPubid(in c : int) : boolean
        return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;
!!!5111938.java!!!	isValidName(inout name : String) : boolean
        final int length = name.length();
        if (length == 0) {
            return false;
        }
        char ch = name.charAt(0);
        if (!isNameStart(ch)) {
            return false;
        }
        for (int i = 1; i < length; ++i) {
            ch = name.charAt(i);
            if (!isName(ch)) {
                return false;
            }
        }
        return true;
!!!5112066.java!!!	isValidNCName(inout ncName : String) : boolean
        final int length = ncName.length();
        if (length == 0) {
            return false;
        }
        char ch = ncName.charAt(0);
        if (!isNCNameStart(ch)) {
            return false;
        }
        for (int i = 1; i < length; ++i) {
            ch = ncName.charAt(i);
            if (!isNCName(ch)) {
                return false;
            }
        }
        return true;
!!!5112194.java!!!	isValidNmtoken(inout nmtoken : String) : boolean
        final int length = nmtoken.length();
        if (length == 0) {
            return false;
        }
        for (int i = 0; i < length; ++i) {
            char ch = nmtoken.charAt(i);
            if (!isName(ch)) {
                return false;
            }
        }
        return true;
!!!5112322.java!!!	isValidIANAEncoding(inout ianaEncoding : String) : boolean
        if (ianaEncoding != null) {
            int length = ianaEncoding.length();
            if (length > 0) {
                char c = ianaEncoding.charAt(0);
                if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {
                    for (int i = 1; i < length; i++) {
                        c = ianaEncoding.charAt(i);
                        if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') &&
                            (c < '0' || c > '9') && c != '.' && c != '_' &&
                            c != '-') {
                            return false;
                        }
                    }
                    return true;
                }
            }
        }
        return false;
!!!5112450.java!!!	isValidJavaEncoding(inout javaEncoding : String) : boolean
        if (javaEncoding != null) {
            int length = javaEncoding.length();
            if (length > 0) {
                for (int i = 1; i < length; i++) {
                    char c = javaEncoding.charAt(i);
                    if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') &&
                        (c < '0' || c > '9') && c != '.' && c != '_' &&
                        c != '-') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
!!!5112578.java!!!	trim(inout value : String) : String
        int start;
        int end;
        final int lengthMinusOne = value.length() - 1;
        for (start = 0; start <= lengthMinusOne; ++start) {
            if (!isSpace(value.charAt(start))) {
                break;
            }
        }
        for (end = lengthMinusOne; end >= start; --end) {
            if (!isSpace(value.charAt(end))) {
                break;
            }
        }
        if (start == 0 && end == lengthMinusOne) {
            return value;
        }
        if (start > lengthMinusOne) {
            return "";
        }
        return value.substring(start, end + 1);
