class Instant
!!!8334210.java!!!	now() : Instant
        return Clock.systemUTC().instant();
!!!8334338.java!!!	now(inout clock : Clock) : Instant
        Objects.requireNonNull(clock, "clock");
        return clock.instant();
!!!8334466.java!!!	ofEpochSecond(in epochSecond : long) : Instant
        return create(epochSecond, 0);
!!!8334594.java!!!	ofEpochSecond(in epochSecond : long, in nanoAdjustment : long) : Instant
        long secs = Math.addExact(epochSecond, Math.floorDiv(nanoAdjustment, NANOS_PER_SECOND));
        int nos = (int)Math.floorMod(nanoAdjustment, NANOS_PER_SECOND);
        return create(secs, nos);
!!!8334722.java!!!	ofEpochMilli(in epochMilli : long) : Instant
        long secs = Math.floorDiv(epochMilli, 1000);
        int mos = (int)Math.floorMod(epochMilli, 1000);
        return create(secs, mos * 1000_000);
!!!8334850.java!!!	from(inout temporal : TemporalAccessor) : Instant
        if (temporal instanceof Instant) {
            return (Instant) temporal;
        }
        Objects.requireNonNull(temporal, "temporal");
        try {
            long instantSecs = temporal.getLong(INSTANT_SECONDS);
            int nanoOfSecond = temporal.get(NANO_OF_SECOND);
            return Instant.ofEpochSecond(instantSecs, nanoOfSecond);
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain Instant from TemporalAccessor: " +
                    temporal + " of type " + temporal.getClass().getName(), ex);
        }
!!!8334978.java!!!	parse(in text : CharSequence) : Instant
        return DateTimeFormatter.ISO_INSTANT.parse(text, Instant::from);
!!!8335106.java!!!	create(in seconds : long, in nanoOfSecond : int) : Instant
        if ((seconds | nanoOfSecond) == 0) {
            return EPOCH;
        }
        if (seconds < MIN_SECOND || seconds > MAX_SECOND) {
            throw new DateTimeException("Instant exceeds minimum or maximum instant");
        }
        return new Instant(seconds, nanoOfSecond);
!!!8335234.java!!!	Instant(in epochSecond : long, in nanos : int)
        super();
        this.seconds = epochSecond;
        this.nanos = nanos;
!!!8335362.java!!!	isSupported(inout field : TemporalField) : boolean
        if (field instanceof ChronoField) {
            return field == INSTANT_SECONDS || field == NANO_OF_SECOND || field == MICRO_OF_SECOND || field == MILLI_OF_SECOND;
        }
        return field != null && field.isSupportedBy(this);
!!!8335490.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        if (unit instanceof ChronoUnit) {
            return unit.isTimeBased() || unit == DAYS;
        }
        return unit != null && unit.isSupportedBy(this);
!!!8335618.java!!!	range(inout field : TemporalField) : ValueRange
        return Temporal.super.range(field);
!!!8335746.java!!!	get(inout field : TemporalField) : int
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case NANO_OF_SECOND: return nanos;
                case MICRO_OF_SECOND: return nanos / 1000;
                case MILLI_OF_SECOND: return nanos / 1000_000;
                case INSTANT_SECONDS: INSTANT_SECONDS.checkValidIntValue(seconds);
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return range(field).checkValidIntValue(field.getFrom(this), field);
!!!8335874.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case NANO_OF_SECOND: return nanos;
                case MICRO_OF_SECOND: return nanos / 1000;
                case MILLI_OF_SECOND: return nanos / 1000_000;
                case INSTANT_SECONDS: return seconds;
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return field.getFrom(this);
!!!8336002.java!!!	getEpochSecond() : long
        return seconds;
!!!8336130.java!!!	getNano() : int
        return nanos;
!!!8336258.java!!!	with(inout adjuster : TemporalAdjuster) : Instant
        return (Instant) adjuster.adjustInto(this);
!!!8336386.java!!!	with(inout field : TemporalField, in newValue : long) : Instant
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            f.checkValidValue(newValue);
            switch (f) {
                case MILLI_OF_SECOND: {
                    int nval = (int) newValue * 1000_000;
                    return (nval != nanos ? create(seconds, nval) : this);
                }
                case MICRO_OF_SECOND: {
                    int nval = (int) newValue * 1000;
                    return (nval != nanos ? create(seconds, nval) : this);
                }
                case NANO_OF_SECOND: return (newValue != nanos ? create(seconds, (int) newValue) : this);
                case INSTANT_SECONDS: return (newValue != seconds ? create(newValue, nanos) : this);
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return field.adjustInto(this, newValue);
!!!8336514.java!!!	truncatedTo(inout unit : TemporalUnit) : Instant
        if (unit == ChronoUnit.NANOS) {
            return this;
        }
        Duration unitDur = unit.getDuration();
        if (unitDur.getSeconds() > LocalTime.SECONDS_PER_DAY) {
            throw new UnsupportedTemporalTypeException("Unit is too large to be used for truncation");
        }
        long dur = unitDur.toNanos();
        if ((LocalTime.NANOS_PER_DAY % dur) != 0) {
            throw new UnsupportedTemporalTypeException("Unit must divide into a standard day without remainder");
        }
        long nod = (seconds % LocalTime.SECONDS_PER_DAY) * LocalTime.NANOS_PER_SECOND + nanos;
        long result = (nod / dur) * dur;
        return plusNanos(result - nod);
!!!8336642.java!!!	plus(inout amountToAdd : TemporalAmount) : Instant
        return (Instant) amountToAdd.addTo(this);
!!!8336770.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : Instant
        if (unit instanceof ChronoUnit) {
            switch ((ChronoUnit) unit) {
                case NANOS: return plusNanos(amountToAdd);
                case MICROS: return plus(amountToAdd / 1000_000, (amountToAdd % 1000_000) * 1000);
                case MILLIS: return plusMillis(amountToAdd);
                case SECONDS: return plusSeconds(amountToAdd);
                case MINUTES: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_MINUTE));
                case HOURS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_HOUR));
                case HALF_DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY / 2));
                case DAYS: return plusSeconds(Math.multiplyExact(amountToAdd, SECONDS_PER_DAY));
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return unit.addTo(this, amountToAdd);
!!!8336898.java!!!	plusSeconds(in secondsToAdd : long) : Instant
        return plus(secondsToAdd, 0);
!!!8337026.java!!!	plusMillis(in millisToAdd : long) : Instant
        return plus(millisToAdd / 1000, (millisToAdd % 1000) * 1000_000);
!!!8337154.java!!!	plusNanos(in nanosToAdd : long) : Instant
        return plus(0, nanosToAdd);
!!!8337282.java!!!	plus(in secondsToAdd : long, in nanosToAdd : long) : Instant
        if ((secondsToAdd | nanosToAdd) == 0) {
            return this;
        }
        long epochSec = Math.addExact(seconds, secondsToAdd);
        epochSec = Math.addExact(epochSec, nanosToAdd / NANOS_PER_SECOND);
        nanosToAdd = nanosToAdd % NANOS_PER_SECOND;
        long nanoAdjustment = nanos + nanosToAdd;  // safe int+NANOS_PER_SECOND
        return ofEpochSecond(epochSec, nanoAdjustment);
!!!8337410.java!!!	minus(inout amountToSubtract : TemporalAmount) : Instant
        return (Instant) amountToSubtract.subtractFrom(this);
!!!8337538.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : Instant
        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));
!!!8337666.java!!!	minusSeconds(in secondsToSubtract : long) : Instant
        if (secondsToSubtract == Long.MIN_VALUE) {
            return plusSeconds(Long.MAX_VALUE).plusSeconds(1);
        }
        return plusSeconds(-secondsToSubtract);
!!!8337794.java!!!	minusMillis(in millisToSubtract : long) : Instant
        if (millisToSubtract == Long.MIN_VALUE) {
            return plusMillis(Long.MAX_VALUE).plusMillis(1);
        }
        return plusMillis(-millisToSubtract);
!!!8337922.java!!!	minusNanos(in nanosToSubtract : long) : Instant
        if (nanosToSubtract == Long.MIN_VALUE) {
            return plusNanos(Long.MAX_VALUE).plusNanos(1);
        }
        return plusNanos(-nanosToSubtract);
!!!8338050.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.precision()) {
            return (R) NANOS;
        }
        // inline TemporalAccessor.super.query(query) as an optimization
        if (query == TemporalQueries.chronology() || query == TemporalQueries.zoneId() ||
                query == TemporalQueries.zone() || query == TemporalQueries.offset() ||
                query == TemporalQueries.localDate() || query == TemporalQueries.localTime()) {
            return null;
        }
        return query.queryFrom(this);
!!!8338178.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        return temporal.with(INSTANT_SECONDS, seconds).with(NANO_OF_SECOND, nanos);
!!!8338306.java!!!	until(inout endExclusive : Temporal, inout unit : TemporalUnit) : long
        Instant end = Instant.from(endExclusive);
        if (unit instanceof ChronoUnit) {
            ChronoUnit f = (ChronoUnit) unit;
            switch (f) {
                case NANOS: return nanosUntil(end);
                case MICROS: return nanosUntil(end) / 1000;
                case MILLIS: return Math.subtractExact(end.toEpochMilli(), toEpochMilli());
                case SECONDS: return secondsUntil(end);
                case MINUTES: return secondsUntil(end) / SECONDS_PER_MINUTE;
                case HOURS: return secondsUntil(end) / SECONDS_PER_HOUR;
                case HALF_DAYS: return secondsUntil(end) / (12 * SECONDS_PER_HOUR);
                case DAYS: return secondsUntil(end) / (SECONDS_PER_DAY);
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return unit.between(this, end);
!!!8338434.java!!!	nanosUntil(inout end : Instant) : long
        long secsDiff = Math.subtractExact(end.seconds, seconds);
        long totalNanos = Math.multiplyExact(secsDiff, NANOS_PER_SECOND);
        return Math.addExact(totalNanos, end.nanos - nanos);
!!!8338562.java!!!	secondsUntil(inout end : Instant) : long
        long secsDiff = Math.subtractExact(end.seconds, seconds);
        long nanosDiff = end.nanos - nanos;
        if (secsDiff > 0 && nanosDiff < 0) {
            secsDiff--;
        } else if (secsDiff < 0 && nanosDiff > 0) {
            secsDiff++;
        }
        return secsDiff;
!!!8338690.java!!!	atOffset(inout offset : ZoneOffset) : OffsetDateTime
        return OffsetDateTime.ofInstant(this, offset);
!!!8338818.java!!!	atZone(inout zone : ZoneId) : ZonedDateTime
        return ZonedDateTime.ofInstant(this, zone);
!!!8338946.java!!!	toEpochMilli() : long
        if (seconds < 0 && nanos > 0) {
            long millis = Math.multiplyExact(seconds+1, 1000);
            long adjustment = nanos / 1000_000 - 1000;
            return Math.addExact(millis, adjustment);
        } else {
            long millis = Math.multiplyExact(seconds, 1000);
            return Math.addExact(millis, nanos / 1000_000);
        }
!!!8339074.java!!!	compareTo(inout otherInstant : Instant) : int
        int cmp = Long.compare(seconds, otherInstant.seconds);
        if (cmp != 0) {
            return cmp;
        }
        return nanos - otherInstant.nanos;
!!!8339202.java!!!	isAfter(inout otherInstant : Instant) : boolean
        return compareTo(otherInstant) > 0;
!!!8339330.java!!!	isBefore(inout otherInstant : Instant) : boolean
        return compareTo(otherInstant) < 0;
!!!8339458.java!!!	equals(inout otherInstant : Object) : boolean
        if (this == otherInstant) {
            return true;
        }
        if (otherInstant instanceof Instant) {
            Instant other = (Instant) otherInstant;
            return this.seconds == other.seconds &&
                   this.nanos == other.nanos;
        }
        return false;
!!!8339586.java!!!	hashCode() : int
        return ((int) (seconds ^ (seconds >>> 32))) + 51 * nanos;
!!!8339714.java!!!	toString() : String
        return DateTimeFormatter.ISO_INSTANT.format(this);
!!!8339842.java!!!	writeReplace() : Object
        return new Ser(Ser.INSTANT_TYPE, this);
!!!8339970.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8340098.java!!!	writeExternal(inout out : DataOutput) : void
        out.writeLong(seconds);
        out.writeInt(nanos);
!!!8340226.java!!!	readExternal(inout in : DataInput) : Instant
        long seconds = in.readLong();
        int nanos = in.readInt();
        return Instant.ofEpochSecond(seconds, nanos);
