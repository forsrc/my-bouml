class IntStream
!!!9520258.java!!!	builder() : IntStream::Builder
        return new Streams.IntStreamBuilderImpl();
!!!9520386.java!!!	empty() : IntStream
        return StreamSupport.intStream(Spliterators.emptyIntSpliterator(), false);
!!!9520514.java!!!	of(in t : int) : IntStream
        return StreamSupport.intStream(new Streams.IntStreamBuilderImpl(t), false);
!!!9520642.java!!!	of(inout  : int...values) : IntStream
        return Arrays.stream(values);
!!!9520770.java!!!	iterate(in seed : int, in f : IntUnaryOperator) : IntStream
        Objects.requireNonNull(f);
        final PrimitiveIterator.OfInt iterator = new PrimitiveIterator.OfInt() {
            int t = seed;

            @Override
            public boolean hasNext() {
                return true;
            }

            @Override
            public int nextInt() {
                int v = t;
                t = f.applyAsInt(t);
                return v;
            }
        };
        return StreamSupport.intStream(Spliterators.spliteratorUnknownSize(
                iterator,
                Spliterator.ORDERED | Spliterator.IMMUTABLE | Spliterator.NONNULL), false);
!!!9520898.java!!!	generate(inout s : IntSupplier) : IntStream
        Objects.requireNonNull(s);
        return StreamSupport.intStream(
                new StreamSpliterators.InfiniteSupplyingSpliterator.OfInt(Long.MAX_VALUE, s), false);
!!!9521026.java!!!	range(in startInclusive : int, in endExclusive : int) : IntStream
        if (startInclusive >= endExclusive) {
            return empty();
        } else {
            return StreamSupport.intStream(
                    new Streams.RangeIntSpliterator(startInclusive, endExclusive, false), false);
        }
!!!9521154.java!!!	rangeClosed(in startInclusive : int, in endInclusive : int) : IntStream
        if (startInclusive > endInclusive) {
            return empty();
        } else {
            return StreamSupport.intStream(
                    new Streams.RangeIntSpliterator(startInclusive, endInclusive, true), false);
        }
!!!9521282.java!!!	concat(inout a : IntStream, inout b : IntStream) : IntStream
        Objects.requireNonNull(a);
        Objects.requireNonNull(b);

        Spliterator.OfInt split = new Streams.ConcatSpliterator.OfInt(
                a.spliterator(), b.spliterator());
        IntStream stream = StreamSupport.intStream(split, a.isParallel() || b.isParallel());
        return stream.onClose(Streams.composedClose(a, b));
