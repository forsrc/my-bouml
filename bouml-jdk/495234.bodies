class JmxMBeanServer
!!!2961794.java!!!	JmxMBeanServer(inout domain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate)
        this(domain,outer,delegate,null,false);
!!!2961922.java!!!	JmxMBeanServer(inout domain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate, inout interceptors : boolean)
        this(domain,outer,delegate,null,false);
!!!2962050.java!!!	JmxMBeanServer(inout domain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate, inout instantiator : MBeanInstantiator, inout interceptors : boolean)
                   this(domain,outer,delegate,instantiator,interceptors,true);
!!!2962178.java!!!	JmxMBeanServer(inout domain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate, inout instantiator : MBeanInstantiator, inout interceptors : boolean, inout fairLock : boolean)

        if (instantiator == null) {
            final ModifiableClassLoaderRepository
                clr = new ClassLoaderRepositorySupport();
            instantiator = new MBeanInstantiator(clr);
        }

        final MBeanInstantiator fInstantiator = instantiator;
        this.secureClr = new
            SecureClassLoaderRepository(AccessController.doPrivileged(new PrivilegedAction<ClassLoaderRepository>() {
                @Override
                public ClassLoaderRepository run() {
                    return fInstantiator.getClassLoaderRepository();
                }
            })
        );
        if (delegate == null)
            delegate = new MBeanServerDelegateImpl();
        if (outer == null)
            outer = this;

        this.instantiator = instantiator;
        this.mBeanServerDelegateObject = delegate;
        this.outerShell   = outer;

        final Repository repository = new Repository(domain);
        this.mbsInterceptor =
            new DefaultMBeanServerInterceptor(outer, delegate, instantiator,
                                              repository);
        this.interceptorsEnabled = interceptors;
        initialize();
!!!2962306.java!!!	interceptorsEnabled() : boolean
        return interceptorsEnabled;
!!!2962434.java!!!	getMBeanInstantiator() : MBeanInstantiator
        if (interceptorsEnabled) return instantiator;
        else throw new UnsupportedOperationException(
                       "MBeanServerInterceptors are disabled.");
!!!2962562.java!!!	createMBean(inout className : String, inout name : ObjectName) : ObjectInstance

        return mbsInterceptor.createMBean(className,
                                          cloneObjectName(name),
                                          (Object[]) null,
                                          (String[]) null);
!!!2962690.java!!!	createMBean(inout className : String, inout name : ObjectName, inout loaderName : ObjectName) : ObjectInstance

        return mbsInterceptor.createMBean(className,
                                          cloneObjectName(name),
                                          loaderName,
                                          (Object[]) null,
                                          (String[]) null);
!!!2962818.java!!!	createMBean(inout className : String, inout name : ObjectName, inout params : Object [[]], inout signature : String [[]]) : ObjectInstance

        return mbsInterceptor.createMBean(className, cloneObjectName(name),
                                          params, signature);
!!!2962946.java!!!	createMBean(inout className : String, inout name : ObjectName, inout loaderName : ObjectName, inout params : Object [[]], inout signature : String [[]]) : ObjectInstance

        return mbsInterceptor.createMBean(className, cloneObjectName(name),
                                          loaderName, params, signature);
!!!2963074.java!!!	registerMBean(inout object : Object, inout name : ObjectName) : ObjectInstance

        return mbsInterceptor.registerMBean(object, cloneObjectName(name));
!!!2963202.java!!!	unregisterMBean(inout name : ObjectName) : void
        mbsInterceptor.unregisterMBean(cloneObjectName(name));
!!!2963330.java!!!	getObjectInstance(inout name : ObjectName) : ObjectInstance

        return mbsInterceptor.getObjectInstance(cloneObjectName(name));
!!!2963458.java!!!	queryMBeans(inout name : ObjectName, inout query : QueryExp) : Set

        return mbsInterceptor.queryMBeans(cloneObjectName(name), query);
!!!2963586.java!!!	queryNames(inout name : ObjectName, inout query : QueryExp) : Set

        return mbsInterceptor.queryNames(cloneObjectName(name), query);
!!!2963714.java!!!	isRegistered(inout name : ObjectName) : boolean

        return mbsInterceptor.isRegistered(name);
!!!2963842.java!!!	getMBeanCount() : Integer

        return mbsInterceptor.getMBeanCount();
!!!2963970.java!!!	getAttribute(inout name : ObjectName, inout attribute : String) : Object

        return mbsInterceptor.getAttribute(cloneObjectName(name), attribute);
!!!2964098.java!!!	getAttributes(inout name : ObjectName, inout attributes : String [[]]) : AttributeList

        return mbsInterceptor.getAttributes(cloneObjectName(name), attributes);

!!!2964226.java!!!	setAttribute(inout name : ObjectName, inout attribute : Attribute) : void

        mbsInterceptor.setAttribute(cloneObjectName(name),
                                    cloneAttribute(attribute));
!!!2964354.java!!!	setAttributes(inout name : ObjectName, inout attributes : AttributeList) : AttributeList

        return mbsInterceptor.setAttributes(cloneObjectName(name),
                                            cloneAttributeList(attributes));
!!!2964482.java!!!	invoke(inout name : ObjectName, inout operationName : String, inout params : Object [[]], inout signature : String [[]]) : Object
        return mbsInterceptor.invoke(cloneObjectName(name), operationName,
                                     params, signature);
!!!2964610.java!!!	getDefaultDomain() : String
        return mbsInterceptor.getDefaultDomain();
!!!2964738.java!!!	getDomains() : String
        return mbsInterceptor.getDomains();
!!!2964866.java!!!	addNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void

        mbsInterceptor.addNotificationListener(cloneObjectName(name), listener,
                                               filter, handback);
!!!2964994.java!!!	addNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void

        mbsInterceptor.addNotificationListener(cloneObjectName(name), listener,
                                               filter, handback);
!!!2965122.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener) : void

        mbsInterceptor.removeNotificationListener(cloneObjectName(name),
                                                  listener);
!!!2965250.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void

        mbsInterceptor.removeNotificationListener(cloneObjectName(name),
                                                  listener, filter, handback);
!!!2965378.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName) : void

        mbsInterceptor.removeNotificationListener(cloneObjectName(name),
                                                  listener);
!!!2965506.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void

        mbsInterceptor.removeNotificationListener(cloneObjectName(name),
                                                  listener, filter, handback);
!!!2965634.java!!!	getMBeanInfo(inout name : ObjectName) : MBeanInfo

        return mbsInterceptor.getMBeanInfo(cloneObjectName(name));
!!!2965762.java!!!	instantiate(inout className : String) : Object

        /* Permission check */
        checkMBeanPermission(className, null, null, "instantiate");

        return instantiator.instantiate(className);
!!!2965890.java!!!	instantiate(inout className : String, inout loaderName : ObjectName) : Object

        /* Permission check */
        checkMBeanPermission(className, null, null, "instantiate");

        ClassLoader myLoader = outerShell.getClass().getClassLoader();
        return instantiator.instantiate(className, loaderName, myLoader);
!!!2966018.java!!!	instantiate(inout className : String, inout params : Object [[]], inout signature : String [[]]) : Object

        /* Permission check */
        checkMBeanPermission(className, null, null, "instantiate");

        ClassLoader myLoader = outerShell.getClass().getClassLoader();
        return instantiator.instantiate(className, params, signature,
                                        myLoader);
!!!2966146.java!!!	instantiate(inout className : String, inout loaderName : ObjectName, inout params : Object [[]], inout signature : String [[]]) : Object

        /* Permission check */
        checkMBeanPermission(className, null, null, "instantiate");

        ClassLoader myLoader = outerShell.getClass().getClassLoader();
        return instantiator.instantiate(className,loaderName,params,signature,
                                        myLoader);
!!!2966274.java!!!	isInstanceOf(inout name : ObjectName, inout className : String) : boolean

        return mbsInterceptor.isInstanceOf(cloneObjectName(name), className);
!!!2966402.java!!!	deserialize(inout name : ObjectName, inout data : byte [[]]) : ObjectInputStream

        /* Permission check */
        // This call requires MBeanPermission 'getClassLoaderFor'
        final ClassLoader loader = getClassLoaderFor(name);

        return instantiator.deserialize(loader, data);
!!!2966530.java!!!	deserialize(inout className : String, inout data : byte [[]]) : ObjectInputStream

        if (className == null) {
            throw new  RuntimeOperationsException(
                                        new IllegalArgumentException(),
                                        "Null className passed in parameter");
        }

        /* Permission check */
        // This call requires MBeanPermission 'getClassLoaderRepository'
        final ClassLoaderRepository clr = getClassLoaderRepository();

        Class<?> theClass;
        try {
            if (clr == null) throw new ClassNotFoundException(className);
            theClass = clr.loadClass(className);
        } catch (ClassNotFoundException e) {
            throw new ReflectionException(e,
                                          "The given class could not be " +
                                          "loaded by the default loader " +
                                          "repository");
        }

        return instantiator.deserialize(theClass.getClassLoader(), data);
!!!2966658.java!!!	deserialize(inout className : String, inout loaderName : ObjectName, inout data : byte [[]]) : ObjectInputStream

        // Clone ObjectName
        //
        loaderName = cloneObjectName(loaderName);

        /* Permission check */
        // Make this call just to force the 'getClassLoader'
        // permission check
        try {
            getClassLoader(loaderName);
        } catch (SecurityException e) {
            throw e;
        } catch (Exception e) {
        }

        ClassLoader myLoader = outerShell.getClass().getClassLoader();
        return instantiator.deserialize(className, loaderName, data, myLoader);
!!!2966786.java!!!	initialize() : void
        if (instantiator == null) throw new
            IllegalStateException("instantiator must not be null.");

        // Registers the MBeanServer identification MBean
        try {
            AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {
                public Object run() throws Exception {
                    mbsInterceptor.registerMBean(
                            mBeanServerDelegateObject,
                            MBeanServerDelegate.DELEGATE_NAME);
                    return null;
                }
            });
        } catch (SecurityException e) {
            if (MBEANSERVER_LOGGER.isLoggable(Level.FINEST)) {
                MBEANSERVER_LOGGER.logp(Level.FINEST,
                        JmxMBeanServer.class.getName(), "initialize",
                        "Unexpected security exception occurred", e);
            }
            throw e;
        } catch (Exception e) {
            if (MBEANSERVER_LOGGER.isLoggable(Level.FINEST)) {
                MBEANSERVER_LOGGER.logp(Level.FINEST,
                        JmxMBeanServer.class.getName(), "initialize",
                        "Unexpected exception occurred", e);
            }
            throw new
                IllegalStateException("Can't register delegate.",e);
        }


        /* Add my class loader to the repository
           This can be null if my class loader is the bootstrap
           class loader.  The ClassLoaderRepository knows how
           to handle that case.  */
        ClassLoader myLoader = outerShell.getClass().getClassLoader();
        final ModifiableClassLoaderRepository loaders = AccessController.doPrivileged(new PrivilegedAction<ModifiableClassLoaderRepository>() {

            @Override
            public ModifiableClassLoaderRepository run() {
                return instantiator.getClassLoaderRepository();
            }
        });

        if (loaders != null) {
            loaders.addClassLoader(myLoader);

            /* Add the system class loader, so that if the MBean server is
               loaded by the bootstrap class loader we can still load
               MBeans from the classpath using
               createMBean(className, objectName).

               If this class (JmxMBeanServer) was not loaded by the
               system class loader or a parent of it, then the caller
               must have RuntimePermission("getClassLoader") for the
               getSystemClassLoader() call to succeed.  If the caller
               does not have that permission, any call to
               Class.getClassLoader() will fail.  Since there are lots
               of those in JMX, we better throw the exception now.

               This permission question is irrelevant when JMX is part
               of J2SE (as of 1.5). */
            ClassLoader systemLoader = ClassLoader.getSystemClassLoader();
            if (systemLoader != myLoader)
                loaders.addClassLoader(systemLoader);
        }
!!!2966914.java!!!	getMBeanServerInterceptor() : MBeanServer
        if (interceptorsEnabled) return mbsInterceptor;
        else throw new UnsupportedOperationException(
                       "MBeanServerInterceptors are disabled.");
!!!2967042.java!!!	setMBeanServerInterceptor(inout interceptor : MBeanServer) : void
        if (!interceptorsEnabled) throw new UnsupportedOperationException(
                       "MBeanServerInterceptors are disabled.");
        if (interceptor == null) throw new
            IllegalArgumentException("MBeanServerInterceptor is null");
        mbsInterceptor = interceptor;
!!!2967170.java!!!	getClassLoaderFor(inout mbeanName : ObjectName) : ClassLoader
        return mbsInterceptor.getClassLoaderFor(cloneObjectName(mbeanName));
!!!2967298.java!!!	getClassLoader(inout loaderName : ObjectName) : ClassLoader
        return mbsInterceptor.getClassLoader(cloneObjectName(loaderName));
!!!2967426.java!!!	getClassLoaderRepository() : ClassLoaderRepository
        /* Permission check */
        checkMBeanPermission(null, null, null, "getClassLoaderRepository");
        return secureClr;
!!!2967554.java!!!	getMBeanServerDelegate() : MBeanServerDelegate
        if (!interceptorsEnabled) throw new UnsupportedOperationException(
                       "MBeanServerInterceptors are disabled.");
        return mBeanServerDelegateObject;
!!!2967682.java!!!	newMBeanServerDelegate() : MBeanServerDelegate
        return new MBeanServerDelegateImpl();
!!!2967810.java!!!	newMBeanServer(inout defaultDomain : String, inout outer : MBeanServer, inout delegate : MBeanServerDelegate, inout interceptors : boolean) : MBeanServer
        // Determine whether to use fair locking for the repository.
        // Default is true.
        final boolean fairLock = DEFAULT_FAIR_LOCK_POLICY;

        checkNewMBeanServerPermission();

        // This constructor happens to disregard the value of the interceptors
        // flag - that is, it always uses the default value - false.
        // This is admitedly a bug, but we chose not to fix it for now
        // since we would rather not have anybody depending on the Sun private
        // interceptor APIs - which is most probably going to be removed and
        // replaced by a public (javax) feature in the future.
        //
        return new JmxMBeanServer(defaultDomain,outer,delegate,null,
                                  interceptors,fairLock);
!!!2967938.java!!!	cloneObjectName(inout name : ObjectName) : ObjectName
        if (name != null) {
            return ObjectName.getInstance(name);
        }
        return name;
!!!2968066.java!!!	cloneAttribute(inout attribute : Attribute) : Attribute
        if (attribute != null) {
            if (!attribute.getClass().equals(Attribute.class)) {
                return new Attribute(attribute.getName(), attribute.getValue());
            }
        }
        return attribute;
!!!2968194.java!!!	cloneAttributeList(inout list : AttributeList) : AttributeList
        if (list != null) {
            List<Attribute> alist = list.asList();
            if (!list.getClass().equals(AttributeList.class)) {
                // Create new attribute list
                //
                AttributeList newList = new AttributeList(alist.size());

                // Iterate through list and replace non JMX attributes
                //
                for (Attribute attribute : alist)
                    newList.add(cloneAttribute(attribute));
                return newList;
            } else {
                // Iterate through list and replace non JMX attributes
                //
                for (int i = 0; i < alist.size(); i++) {
                    Attribute attribute = alist.get(i);
                    if (!attribute.getClass().equals(Attribute.class)) {
                        list.set(i, cloneAttribute(attribute));
                    }
                }
                return list;
            }
        }
        return list;
!!!2968322.java!!!	checkMBeanPermission(inout classname : String, inout member : String, inout objectName : ObjectName, inout actions : String) : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            Permission perm = new MBeanPermission(classname,
                                                  member,
                                                  objectName,
                                                  actions);
            sm.checkPermission(perm);
        }
!!!2968450.java!!!	checkNewMBeanServerPermission() : void
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            Permission perm = new MBeanServerPermission("newMBeanServer");
            sm.checkPermission(perm);
        }
