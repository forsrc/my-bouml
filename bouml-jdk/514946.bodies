class SnmpEngineId
!!!3076738.java!!!	SnmpEngineId(inout hexString : String)
        engineId = SnmpTools.ascii2binary(hexString);
        this.hexString = hexString.toLowerCase();
!!!3076866.java!!!	SnmpEngineId(inout bin : byte [[]])
        engineId = bin;
        hexString = SnmpTools.binary2ascii(bin).toLowerCase();
!!!3076994.java!!!	getReadableId() : String
        return humanString;
!!!3077122.java!!!	toString() : String
        return hexString;
!!!3077250.java!!!	getBytes() : byte
        return engineId;
!!!3077378.java!!!	setStringValue(inout val : String) : void
        humanString = val;
!!!3077506.java!!!	validateId(inout str : String) : void
        byte[] arr = SnmpTools.ascii2binary(str);
        validateId(arr);
!!!3077634.java!!!	validateId(inout arr : byte [[]]) : void

        if(arr.length < 5) throw new IllegalArgumentException("Id size lower than 5 bytes.");
        if(arr.length > 32) throw new IllegalArgumentException("Id size greater than 32 bytes.");

        //octet strings with very first bit = 0 and length != 12 octets
        if( ((arr[0] & 0x80) == 0) && arr.length != 12)
            throw new IllegalArgumentException("Very first bit = 0 and length != 12 octets");

        byte[] zeroedArrays = new byte[arr.length];
        if(Arrays.equals(zeroedArrays, arr)) throw new IllegalArgumentException("Zeroed Id.");
        byte[] FFArrays = new byte[arr.length];
        Arrays.fill(FFArrays, (byte)0xFF);
        if(Arrays.equals(FFArrays, arr)) throw new IllegalArgumentException("0xFF Id.");

!!!3077762.java!!!	createEngineId(inout arr : byte [[]]) : SnmpEngineId
        if( (arr == null) || arr.length == 0) return null;
        validateId(arr);
        return new SnmpEngineId(arr);
!!!3077890.java!!!	createEngineId() : SnmpEngineId
        byte[] address = null;
        byte[] engineid = new byte[13];
        int iana = 42;
        long mask = 0xFF;
        long time = System.currentTimeMillis();

        engineid[0] = (byte) ( (iana & 0xFF000000) >> 24 );
        engineid[0] |= 0x80;
        engineid[1] = (byte) ( (iana & 0x00FF0000) >> 16 );
        engineid[2] = (byte) ( (iana & 0x0000FF00) >> 8 );
        engineid[3] = (byte) (iana & 0x000000FF);
        engineid[4] = 0x05;

        engineid[5] =  (byte) ( (time & (mask << 56)) >>> 56 );
        engineid[6] =  (byte) ( (time & (mask << 48) ) >>> 48 );
        engineid[7] =  (byte) ( (time & (mask << 40) ) >>> 40 );
        engineid[8] =  (byte) ( (time & (mask << 32) ) >>> 32 );
        engineid[9] =  (byte) ( (time & (mask << 24) ) >>> 24 );
        engineid[10] = (byte) ( (time & (mask << 16) ) >>> 16 );
        engineid[11] = (byte) ( (time & (mask << 8) ) >>> 8 );
        engineid[12] = (byte) (time & mask);

        return new SnmpEngineId(engineid);
!!!3078018.java!!!	toOid() : SnmpOid
        long[] oid = new long[engineId.length + 1];
        oid[0] = engineId.length;
        for(int i = 1; i <= engineId.length; i++)
            oid[i] = (long) (engineId[i-1] & 0xFF);
        return new SnmpOid(oid);
!!!3078146.java!!!	createEngineId(inout str : String) : SnmpEngineId
        return createEngineId(str, null);
!!!3078274.java!!!	createEngineId(inout str : String, inout separator : String) : SnmpEngineId
        if(str == null) return null;

        if(str.startsWith("0x") || str.startsWith("0X")) {
            validateId(str);
            return new SnmpEngineId(str);
        }
        separator = separator == null ? ":" : separator;
        StringTokenizer token = new StringTokenizer(str,
                                                    separator,
                                                    true);

        String address = null;
        String port = null;
        String iana = null;
        int objPort = 161;
        int objIana = 42;
        InetAddress objAddress = null;
        SnmpEngineId eng = null;
        try {
            //Deal with address
            try {
                address = token.nextToken();
            }catch(NoSuchElementException e) {
                throw new IllegalArgumentException("Passed string is invalid : ["+str+"]");
            }
            if(!address.equals(separator)) {
                objAddress = InetAddress.getByName(address);
                try {
                    token.nextToken();
                }catch(NoSuchElementException e) {
                    //No need to go further, no port.
                    eng = SnmpEngineId.createEngineId(objAddress,
                                                      objPort,
                                                      objIana);
                    eng.setStringValue(str);
                    return eng;
                }
            }
            else
                objAddress = InetAddress.getLocalHost();

            //Deal with port
            try {
                port = token.nextToken();
            }catch(NoSuchElementException e) {
                //No need to go further, no port.
                eng = SnmpEngineId.createEngineId(objAddress,
                                                  objPort,
                                                  objIana);
                eng.setStringValue(str);
                return eng;
            }

            if(!port.equals(separator)) {
                objPort = Integer.parseInt(port);
                try {
                    token.nextToken();
                }catch(NoSuchElementException e) {
                    //No need to go further, no iana.
                    eng = SnmpEngineId.createEngineId(objAddress,
                                                      objPort,
                                                      objIana);
                    eng.setStringValue(str);
                    return eng;
                }
            }

            //Deal with iana
            try {
                iana = token.nextToken();
            }catch(NoSuchElementException e) {
                //No need to go further, no port.
                eng = SnmpEngineId.createEngineId(objAddress,
                                                  objPort,
                                                  objIana);
                eng.setStringValue(str);
                return eng;
            }

            if(!iana.equals(separator))
                objIana = Integer.parseInt(iana);

            eng = SnmpEngineId.createEngineId(objAddress,
                                              objPort,
                                              objIana);
            eng.setStringValue(str);

            return eng;

        } catch(Exception e) {
            throw new IllegalArgumentException("Passed string is invalid : ["+str+"]. Check that the used separator ["+ separator + "] is compatible with IPv6 address format.");
        }

!!!3078402.java!!!	createEngineId(in port : int) : SnmpEngineId
        int suniana = 42;
        InetAddress address = null;
        address = InetAddress.getLocalHost();
        return createEngineId(address, port, suniana);
!!!3078530.java!!!	createEngineId(inout address : InetAddress, in port : int) : SnmpEngineId
        int suniana = 42;
        if(address == null)
            throw new IllegalArgumentException("InetAddress is null.");
        return createEngineId(address, port, suniana);
!!!3078658.java!!!	createEngineId(in port : int, in iana : int) : SnmpEngineId
        InetAddress address = null;
        address = InetAddress.getLocalHost();
        return createEngineId(address, port, iana);
!!!3078786.java!!!	createEngineId(inout addr : InetAddress, in port : int, in iana : int) : SnmpEngineId
        if(addr == null) throw new IllegalArgumentException("InetAddress is null.");
        byte[] address = addr.getAddress();
        byte[] engineid = new byte[9 + address.length];
        engineid[0] = (byte) ( (iana & 0xFF000000) >> 24 );
        engineid[0] |= 0x80;
        engineid[1] = (byte) ( (iana & 0x00FF0000) >> 16 );
        engineid[2] = (byte) ( (iana & 0x0000FF00) >> 8 );

engineid[3] = (byte) (iana & 0x000000FF);
        engineid[4] = 0x05;

        if(address.length == 4)
            engineid[4] = 0x01;

        if(address.length == 16)
            engineid[4] = 0x02;

        for(int i = 0; i < address.length; i++) {
            engineid[i + 5] = address[i];
        }

        engineid[5 + address.length] = (byte)  ( (port & 0xFF000000) >> 24 );
        engineid[6 + address.length] = (byte) ( (port & 0x00FF0000) >> 16 );
        engineid[7 + address.length] = (byte) ( (port & 0x0000FF00) >> 8 );
        engineid[8 + address.length] = (byte) (  port & 0x000000FF );

        return new SnmpEngineId(engineid);
!!!3078914.java!!!	createEngineId(in iana : int, inout addr : InetAddress) : SnmpEngineId
        if(addr == null) throw new IllegalArgumentException("InetAddress is null.");
        byte[] address = addr.getAddress();
        byte[] engineid = new byte[5 + address.length];
        engineid[0] = (byte) ( (iana & 0xFF000000) >> 24 );
        engineid[0] |= 0x80;
        engineid[1] = (byte) ( (iana & 0x00FF0000) >> 16 );
        engineid[2] = (byte) ( (iana & 0x0000FF00) >> 8 );

        engineid[3] = (byte) (iana & 0x000000FF);
        if(address.length == 4)
            engineid[4] = 0x01;

        if(address.length == 16)
            engineid[4] = 0x02;

        for(int i = 0; i < address.length; i++) {
            engineid[i + 5] = address[i];
        }

        return new SnmpEngineId(engineid);
!!!3079042.java!!!	createEngineId(inout addr : InetAddress) : SnmpEngineId
        return createEngineId(42, addr);
!!!3079170.java!!!	equals(inout a : Object) : boolean
        if(!(a instanceof SnmpEngineId) ) return false;
        return hexString.equals(((SnmpEngineId) a).toString());
!!!3079298.java!!!	hashCode() : int
        return hexString.hashCode();
