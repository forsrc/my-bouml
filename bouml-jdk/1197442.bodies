class CompositeDataInvocationHandler
!!!9875330.java!!!	CompositeDataInvocationHandler(inout compositeData : CompositeData)
        this(compositeData, null);
!!!9875458.java!!!	CompositeDataInvocationHandler(inout compositeData : CompositeData, inout lookup : MXBeanLookup)
        if (compositeData == null)
            throw new IllegalArgumentException("compositeData");
        this.compositeData = compositeData;
        this.lookup = lookup;
!!!9875586.java!!!	getCompositeData() : CompositeData
        assert compositeData != null;
        return compositeData;
!!!9875714.java!!!	invoke(inout proxy : Object, inout method : Method, inout args : Object [[]]) : Object
        final String methodName = method.getName();

        // Handle the methods from java.lang.Object
        if (method.getDeclaringClass() == Object.class) {
            if (methodName.equals("toString") && args == null)
                return "Proxy[" + compositeData + "]";
            else if (methodName.equals("hashCode") && args == null)
                return compositeData.hashCode() + 0x43444948;
            else if (methodName.equals("equals") && args.length == 1
                && method.getParameterTypes()[0] == Object.class)
                return equals(proxy, args[0]);
            else {
                /* Either someone is calling invoke by hand, or
                   it is a non-final method from Object overriden
                   by the generated Proxy.  At the time of writing,
                   the only non-final methods in Object that are not
                   handled above are finalize and clone, and these
                   are not overridden in generated proxies.  */
                // this plain Method.invoke is called only if the declaring class
                // is Object and so it's safe.
                return method.invoke(this, args);
            }
        }

        String propertyName = DefaultMXBeanMappingFactory.propertyName(method);
        if (propertyName == null) {
            throw new IllegalArgumentException("Method is not getter: " +
                                               method.getName());
        }
        Object openValue;
        if (compositeData.containsKey(propertyName))
            openValue = compositeData.get(propertyName);
        else {
            String decap = DefaultMXBeanMappingFactory.decapitalize(propertyName);
            if (compositeData.containsKey(decap))
                openValue = compositeData.get(decap);
            else {
                final String msg =
                    "No CompositeData item " + propertyName +
                    (decap.equals(propertyName) ? "" : " or " + decap) +
                    " to match " + methodName;
                throw new IllegalArgumentException(msg);
            }
        }
        MXBeanMapping mapping =
            MXBeanMappingFactory.DEFAULT.mappingForType(method.getGenericReturnType(),
                                   MXBeanMappingFactory.DEFAULT);
        return mapping.fromOpenValue(openValue);
!!!9875842.java!!!	equals(inout proxy : Object, inout other : Object) : boolean
        if (other == null)
            return false;

        final Class<?> proxyClass = proxy.getClass();
        final Class<?> otherClass = other.getClass();
        if (proxyClass != otherClass)
            return false;
        InvocationHandler otherih = Proxy.getInvocationHandler(other);
        if (!(otherih instanceof CompositeDataInvocationHandler))
            return false;
        CompositeDataInvocationHandler othercdih =
            (CompositeDataInvocationHandler) otherih;
        return compositeData.equals(othercdih.compositeData);
