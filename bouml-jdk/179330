format 222
"model" // jdk1.8::javax::lang::model
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/lang/model/"
  java_package "javax.lang.model"
  package_ref 179458 // element

  package_ref 179842 // type

  classview 172930 "model"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 852994 "SourceVersion"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Source versions of the Java&trade; programming language.

See the appropriate edition of
<cite>The Java&trade; Language Specification</cite>
for information about a particular source version.

<p>Note that additional source version constants will be added to
model future releases of the language.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      attribute 2252162 "RELEASE_0"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Summary of language evolution
1.1: nested classes
1.2: strictfp
1.3: no changes
1.4: assert
1.5: annotations, generics, autoboxing, var-args...
1.6: no changes
1.7: diamond syntax, try-with-resources, etc.
1.8: lambda expressions and default methods


The original version.

The language described in
<cite>The Java&trade; Language Specification, First Edition</cite>.

"
      end

      attribute 2252290 "RELEASE_1"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version recognized by the Java Platform 1.1.

The language is {@code RELEASE_0} augmented with nested classes as described in the 1.1 update to
<cite>The Java&trade; Language Specification, First Edition</cite>.

"
      end

      attribute 2252418 "RELEASE_2"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version recognized by the Java 2 Platform, Standard Edition,
v 1.2.

The language described in
<cite>The Java&trade; Language Specification,
Second Edition</cite>, which includes the {@code
strictfp} modifier.

"
      end

      attribute 2252546 "RELEASE_3"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version recognized by the Java 2 Platform, Standard Edition,
v 1.3.

No major changes from {@code RELEASE_2}.

"
      end

      attribute 2252674 "RELEASE_4"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version recognized by the Java 2 Platform, Standard Edition,
v 1.4.

Added a simple assertion facility.

"
      end

      attribute 2252802 "RELEASE_5"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version recognized by the Java 2 Platform, Standard
Edition 5.0.

The language described in
<cite>The Java&trade; Language Specification,
Third Edition</cite>.  First release to support
generics, annotations, autoboxing, var-args, enhanced {@code
for} loop, and hexadecimal floating-point literals.

"
      end

      attribute 2252930 "RELEASE_6"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version recognized by the Java Platform, Standard Edition
6.

No major changes from {@code RELEASE_5}.

"
      end

      attribute 2253058 "RELEASE_7"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version recognized by the Java Platform, Standard Edition
7.

Additions in this release include, diamond syntax for
constructors, {@code try}-with-resources, strings in switch,
binary literals, and multi-catch.
@since 1.7

"
      end

      attribute 2253186 "RELEASE_8"
	public type class_ref 852994 // SourceVersion
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The version recognized by the Java Platform, Standard Edition
8.

Additions in this release include lambda expressions and default methods.
@since 1.8
"
      end

      operation 9695874 "latest"
	class_operation public return_type class_ref 852994 // SourceVersion
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Note that when adding constants for newer releases, the
 behavior of latest() and latestSupported() must be updated too.

Returns the latest source version that can be modeled.

@return the latest source version that can be modeled
"
      end

      classrelation 3769986 // latestSupported (<unidirectional association>)
	relation 3769986 --->
	  a role_name "latestSupported" init_value " getLatestSupported()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3769986 // latestSupported (<unidirectional association>)
	  b parent class_ref 852994 // SourceVersion
      end

      operation 9696002 "getLatestSupported"
	class_operation private return_type class_ref 852994 // SourceVersion
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9696130 "latestSupported"
	class_operation public return_type class_ref 852994 // SourceVersion
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the latest source version fully supported by the
current execution environment.  {@code RELEASE_5} or later must
be returned.

@return the latest source version that is fully supported
"
      end

      operation 9696258 "isIdentifier"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether or not {@code name} is a syntactically valid
identifier (simple name) or keyword in the latest source
version.  The method returns {@code true} if the name consists
of an initial character for which {@link
Character#isJavaIdentifierStart(int)} returns {@code true},
followed only by characters for which {@link
Character#isJavaIdentifierPart(int)} returns {@code true}.
This pattern matches regular identifiers, keywords, and the
literals {@code \"true\"}, {@code \"false\"}, and {@code \"null\"}.
The method returns {@code false} for all other strings.

@param name the string to check
@return {@code true} if this string is a
syntactically valid identifier or keyword, {@code false}
otherwise.
"
      end

      operation 9696386 "isName"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether or not {@code name} is a syntactically valid
 qualified name in the latest source version.  Unlike {@link
 #isIdentifier isIdentifier}, this method returns {@code false}
 for keywords and literals.

@param name the string to check
@return {@code true} if this string is a
syntactically valid name, {@code false} otherwise.
@jls 6.2 Names and Identifiers
"
      end

      classrelation 3770114 // keywords (<unidirectional association>)
	relation 3770114 --->
	  a role_name "keywords" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3770114 // keywords (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      extra_member 179458 "initialization"
	
	cpp "" ""
	java "  static {
        Set<String> s = new HashSet<String>();
        String [] kws = {
            \"abstract\", \"continue\",     \"for\",          \"new\",          \"switch\",
            \"assert\",   \"default\",      \"if\",           \"package\",      \"synchronized\",
            \"boolean\",  \"do\",           \"goto\",         \"private\",      \"this\",
            \"break\",    \"double\",       \"implements\",   \"protected\",    \"throw\",
            \"byte\",     \"else\",         \"import\",       \"public\",       \"throws\",
            \"case\",     \"enum\",         \"instanceof\",   \"return\",       \"transient\",
            \"catch\",    \"extends\",      \"int\",          \"short\",        \"try\",
            \"char\",     \"final\",        \"interface\",    \"static\",       \"void\",
            \"class\",    \"finally\",      \"long\",         \"strictfp\",     \"volatile\",
            \"const\",    \"float\",        \"native\",       \"super\",        \"while\",
            // literals
            \"null\",     \"true\",         \"false\"
        };
        for(String kw : kws)
            s.add(kw);
        keywords = Collections.unmodifiableSet(s);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9696514 "isKeyword"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether or not {@code s} is a keyword or literal in the
 latest source version.

@param s the string to check
@return {@code true} if {@code s} is a keyword or literal, {@code false} otherwise.
"
      end
    end

    class 1179266 "AnnotatedConstruct"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a construct that can be annotated.

A construct is either an {@linkplain
javax.lang.model.element.Element element} or a {@linkplain
javax.lang.model.type.TypeMirror type}.  Annotations on an element
are on a <em>declaration</em>, whereas annotations on a type are on
a specific <em>use</em> of a type name.

The terms <em>directly present</em>, <em>present</em>,
<em>indirectly present</em>, and <em>associated </em> are used
throughout this interface to describe precisely which annotations
are returned by the methods defined herein.

<p>In the definitions below, an annotation <i>A</i> has an
annotation type <i>AT</i>. If <i>AT</i> is a repeatable annotation
type, the type of the containing annotation is <i>ATC</i>.

<p>Annotation <i>A</i> is <em>directly present</em> on a construct
<i>C</i> if either:

<ul>

<li><i>A</i> is explicitly or implicitly declared as applying to
the source code representation of <i>C</i>.

<p>Typically, if exactly one annotation of type <i>AT</i> appears in
the source code of representation of <i>C</i>, then <i>A</i> is
explicitly declared as applying to <i>C</i>.

If there are multiple annotations of type <i>AT</i> present on
<i>C</i>, then if <i>AT</i> is repeatable annotation type, an
annotation of type <i>ATC</i> is implicitly declared on <i>C</i>.

<li> A representation of <i>A</i> appears in the executable output
for <i>C</i>, such as the {@code RuntimeVisibleAnnotations} or
{@code RuntimeVisibleParameterAnnotations} attributes of a class
file.

</ul>

<p>An annotation <i>A</i> is <em>present</em> on a
construct <i>C</i> if either:
<ul>

<li><i>A</i> is directly present on <i>C</i>.

<li>No annotation of type <i>AT</i> is directly present on
<i>C</i>, and <i>C</i> is a class and <i>AT</i> is inheritable
and <i>A</i> is present on the superclass of <i>C</i>.

</ul>

An annotation <i>A</i> is <em>indirectly present</em> on a construct
<i>C</i> if both:

<ul>

<li><i>AT</i> is a repeatable annotation type with a containing
annotation type <i>ATC</i>.

<li>An annotation of type <i>ATC</i> is directly present on
<i>C</i> and <i>A</i> is an annotation included in the result of
calling the {@code value} method of the directly present annotation
of type <i>ATC</i>.

</ul>

An annotation <i>A</i> is <em>associated</em> with a construct
<i>C</i> if either:

<ul>

<li> <i>A</i> is directly or indirectly present on <i>C</i>.

<li> No annotation of type <i>AT</i> is directly or indirectly
present on <i>C</i>, and <i>C</i> is a class, and <i>AT</i> is
inheritable, and <i>A</i> is associated with the superclass of
<i>C</i>.

</ul>

@since 1.8
@jls 9.6 Annotation Types
@jls 9.6.3.3 @Inherited
"
      operation 9695490 "getAnnotationMirrors"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends AnnotationMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the annotations that are <em>directly present</em> on
this construct.

@return the annotations <em>directly present</em> on this
construct; an empty list if there are none
"
      end

      operation 9695618 "getAnnotation"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationType" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type} ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this construct's annotation of the specified type if
such an annotation is <em>present</em>, else {@code null}.

<p> The annotation returned by this method could contain an element
whose value is of type {@code Class}.
This value cannot be returned directly:  information necessary to
locate and load a class (such as the class loader to use) is
not available, and the class might not be loadable at all.
Attempting to read a {@code Class} object by invoking the relevant
method on the returned annotation
will result in a {@link MirroredTypeException},
from which the corresponding {@link TypeMirror} may be extracted.
Similarly, attempting to read a {@code Class[]}-valued element
will result in a {@link MirroredTypesException}.

<blockquote>
<i>Note:</i> This method is unlike others in this and related
interfaces.  It operates on runtime reflective information &mdash;
representations of annotation types currently loaded into the
VM &mdash; rather than on the representations defined by and used
throughout these interfaces.  Consequently, calling methods on
the returned annotation object can throw many of the exceptions
that can be thrown when calling methods on an annotation object
returned by core reflection.  This method is intended for
callers that are written to operate on a known, fixed set of
annotation types.
</blockquote>

@param <A>  the annotation type
@param annotationType  the {@code Class} object corresponding to
         the annotation type
@return this construct's annotation for the specified
annotation type if present, else {@code null}

@see #getAnnotationMirrors()
@see java.lang.reflect.AnnotatedElement#getAnnotation
@see EnumConstantNotPresentException
@see AnnotationTypeMismatchException
@see IncompleteAnnotationException
@see MirroredTypeException
@see MirroredTypesException
@jls 9.6.1 Annotation Type Elements
"
      end

      operation 9695746 "getAnnotationsByType"
	public explicit_return_type "A"
	nparams 1
	  param inout name "annotationType" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A extends Annotation> ${type}[] ${name}${(}${t0}<A> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns annotations that are <em>associated</em> with this construct.

If there are no annotations associated with this construct, the
return value is an array of length 0.

The order of annotations which are directly or indirectly
present on a construct <i>C</i> is computed as if indirectly present
annotations on <i>C</i> are directly present on <i>C</i> in place of their
container annotation, in the order in which they appear in the
value element of the container annotation.

The difference between this method and {@link #getAnnotation(Class)}
is that this method detects if its argument is a <em>repeatable
annotation type</em>, and if so, attempts to find one or more
annotations of that type by \"looking through\" a container annotation.

<p> The annotations returned by this method could contain an element
whose value is of type {@code Class}.
This value cannot be returned directly:  information necessary to
locate and load a class (such as the class loader to use) is
not available, and the class might not be loadable at all.
Attempting to read a {@code Class} object by invoking the relevant
method on the returned annotation
will result in a {@link MirroredTypeException},
from which the corresponding {@link TypeMirror} may be extracted.
Similarly, attempting to read a {@code Class[]}-valued element
will result in a {@link MirroredTypesException}.

<blockquote>
<i>Note:</i> This method is unlike others in this and related
interfaces.  It operates on runtime reflective information &mdash;
representations of annotation types currently loaded into the
VM &mdash; rather than on the representations defined by and used
throughout these interfaces.  Consequently, calling methods on
the returned annotation object can throw many of the exceptions
that can be thrown when calling methods on an annotation object
returned by core reflection.  This method is intended for
callers that are written to operate on a known, fixed set of
annotation types.
</blockquote>

@param <A>  the annotation type
@param annotationType  the {@code Class} object corresponding to
         the annotation type
@return this construct's annotations for the specified annotation
        type if present on this construct, else an empty array

@see #getAnnotationMirrors()
@see #getAnnotation(Class)
@see java.lang.reflect.AnnotatedElement#getAnnotationsByType(Class)
@see EnumConstantNotPresentException
@see AnnotationTypeMismatchException
@see IncompleteAnnotationException
@see MirroredTypeException
@see MirroredTypesException
@jls 9.6 Annotation Types
@jls 9.6.1 Annotation Type Elements
"
      end
    end

    class 1179394 "UnknownEntityException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Superclass of exceptions which indicate that an unknown kind of
entity was encountered.  This situation can occur if the language
evolves and new kinds of constructs are introduced.  Subclasses of
this exception may be thrown by visitors to indicate that the
visitor was created for a prior version of the language.

<p>A common superclass for those exceptions allows a single catch
block to have code handling them uniformly.

@author Joseph D. Darcy
@see javax.lang.model.element.UnknownElementException
@see javax.lang.model.element.UnknownAnnotationValueException
@see javax.lang.model.type.UnknownTypeException
@since 1.7
"
      classrelation 3770242 // <generalisation>
	relation 3770242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3770242 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 2253314 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 269L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9696642 "UnknownEntityException"
	protected explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code UnknownEntityException} with the specified
detail message.

@param message the detail message
"
      end
    end
  end

  package_ref 180354 // util

  deploymentview 172290 "model"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 840450 "AnnotatedConstruct"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import java.util.List;
import javax.lang.model.element.*;
import javax.lang.model.type.*;
${definition}"
      associated_elems
	class_ref 1179266 // AnnotatedConstruct
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 840578 "SourceVersion"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;
${definition}"
      associated_elems
	class_ref 852994 // SourceVersion
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 840706 "UnknownEntityException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1179394 // UnknownEntityException
      end
      comment "Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
