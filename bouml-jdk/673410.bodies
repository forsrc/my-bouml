class XMLStreamFilterImpl
!!!4412930.java!!!	XMLStreamFilterImpl(inout reader : XMLStreamReader, inout filter : StreamFilter)
        fStreamReader = reader;
        this.fStreamFilter = filter;

        //this is debatable to initiate at an acceptable event,
        //but it's neccessary in order to pass the TCK and yet avoid skipping element
        try {
            if (fStreamFilter.accept(fStreamReader)) {
                fEventAccepted = true;
            } else {
                findNextEvent();
            }
        }catch(XMLStreamException xs){
            System.err.println("Error while creating a stream Filter"+xs);
        }
!!!4413058.java!!!	setStreamFilter(inout sf : StreamFilter) : void
        this.fStreamFilter = sf;
!!!4413186.java!!!	next() : int
        if (fStreamAdvancedByHasNext && fEventAccepted) {
            fStreamAdvancedByHasNext = false;
            return fCurrentEvent;
        }
        int event = findNextEvent();
        if (event != -1) {
            return event;
        }

        throw new IllegalStateException("The stream reader has reached the end of the document, or there are no more "+
                                    " items to return");
!!!4413314.java!!!	nextTag() : int
        if (fStreamAdvancedByHasNext && fEventAccepted &&
                (fCurrentEvent == XMLEvent.START_ELEMENT || fCurrentEvent == XMLEvent.START_ELEMENT)) {
            fStreamAdvancedByHasNext = false;
            return fCurrentEvent;
        }

        int event = findNextTag();
        if (event != -1) {
            return event;
        }
        throw new IllegalStateException("The stream reader has reached the end of the document, or there are no more "+
                                    " items to return");
!!!4413442.java!!!	hasNext() : boolean
        if (fStreamReader.hasNext()) {
            if (!fEventAccepted) {
                if ((fCurrentEvent = findNextEvent()) == -1) {
                    return false;
                } else {
                    fStreamAdvancedByHasNext = true;
                }
            }
            return true;
        }
        return false;
!!!4413570.java!!!	findNextEvent() : int
        fStreamAdvancedByHasNext = false;
        while(fStreamReader.hasNext()){
            fCurrentEvent = fStreamReader.next();
            if(fStreamFilter.accept(fStreamReader)){
                fEventAccepted = true;
                return fCurrentEvent;
            }
        }
        //although it seems that IllegalStateException should be thrown when next() is called
        //on a stream that has no more items, we have to assume END_DOCUMENT is always accepted
        //in order to pass the TCK
        if (fCurrentEvent == XMLEvent.END_DOCUMENT)
            return fCurrentEvent;
        else
            return -1;
!!!4413698.java!!!	findNextTag() : int
        fStreamAdvancedByHasNext = false;
        while(fStreamReader.hasNext()){
            fCurrentEvent = fStreamReader.nextTag();
            if(fStreamFilter.accept(fStreamReader)){
                fEventAccepted = true;
                return fCurrentEvent;
            }
        }
        if (fCurrentEvent == XMLEvent.END_DOCUMENT)
            return fCurrentEvent;
        else
            return -1;
!!!4413826.java!!!	close() : void
        fStreamReader.close();
!!!4413954.java!!!	getAttributeCount() : int
        return fStreamReader.getAttributeCount();
!!!4414082.java!!!	getAttributeName(in index : int) : QName
        return fStreamReader.getAttributeName(index);
!!!4414210.java!!!	getAttributeNamespace(in index : int) : String
        return fStreamReader.getAttributeNamespace(index);
!!!4414338.java!!!	getAttributePrefix(in index : int) : String
        return fStreamReader.getAttributePrefix(index);
!!!4414466.java!!!	getAttributeType(in index : int) : String
        return fStreamReader.getAttributeType(index);
!!!4414594.java!!!	getAttributeValue(in index : int) : String
        return fStreamReader.getAttributeValue(index);
!!!4414722.java!!!	getAttributeValue(inout namespaceURI : String, inout localName : String) : String
        return fStreamReader.getAttributeValue(namespaceURI,localName);
!!!4414850.java!!!	getCharacterEncodingScheme() : String
        return fStreamReader.getCharacterEncodingScheme();
!!!4414978.java!!!	getElementText() : String
        return fStreamReader.getElementText();
!!!4415106.java!!!	getEncoding() : String
        return fStreamReader.getEncoding();
!!!4415234.java!!!	getEventType() : int
        return fStreamReader.getEventType();
!!!4415362.java!!!	getLocalName() : String
        return fStreamReader.getLocalName();
!!!4415490.java!!!	getLocation() : Location
        return fStreamReader.getLocation();
!!!4415618.java!!!	getName() : QName
        return fStreamReader.getName();
!!!4415746.java!!!	getNamespaceContext() : NamespaceContext
        return fStreamReader.getNamespaceContext();
!!!4415874.java!!!	getNamespaceCount() : int
        return fStreamReader.getNamespaceCount();
!!!4416002.java!!!	getNamespacePrefix(in index : int) : String
        return fStreamReader.getNamespacePrefix(index);
!!!4416130.java!!!	getNamespaceURI() : String
        return fStreamReader.getNamespaceURI();
!!!4416258.java!!!	getNamespaceURI(in index : int) : String
        return fStreamReader.getNamespaceURI(index);
!!!4416386.java!!!	getNamespaceURI(inout prefix : String) : String
        return fStreamReader.getNamespaceURI(prefix);
!!!4416514.java!!!	getPIData() : String
        return fStreamReader.getPIData();
!!!4416642.java!!!	getPITarget() : String
        return fStreamReader.getPITarget();
!!!4416770.java!!!	getPrefix() : String
        return fStreamReader.getPrefix();
!!!4416898.java!!!	getProperty(inout name : String) : Object
        return fStreamReader.getProperty(name);
!!!4417026.java!!!	getText() : String
        return fStreamReader.getText();
!!!4417154.java!!!	getTextCharacters() : char
        return fStreamReader.getTextCharacters();
!!!4417282.java!!!	getTextCharacters(in sourceStart : int, inout target : char [[]], in targetStart : int, in length : int) : int
        return fStreamReader.getTextCharacters(sourceStart, target,targetStart,length);
!!!4417410.java!!!	getTextLength() : int
        return fStreamReader.getTextLength();
!!!4417538.java!!!	getTextStart() : int
        return fStreamReader.getTextStart();
!!!4417666.java!!!	getVersion() : String
        return fStreamReader.getVersion();
!!!4417794.java!!!	hasName() : boolean
        return fStreamReader.hasName();
!!!4417922.java!!!	hasText() : boolean
        return fStreamReader.hasText();
!!!4418050.java!!!	isAttributeSpecified(in index : int) : boolean
        return fStreamReader.isAttributeSpecified(index);
!!!4418178.java!!!	isCharacters() : boolean
        return fStreamReader.isCharacters();
!!!4418306.java!!!	isEndElement() : boolean
        return fStreamReader.isEndElement();
!!!4418434.java!!!	isStandalone() : boolean
        return fStreamReader.isStandalone();
!!!4418562.java!!!	isStartElement() : boolean
        return fStreamReader.isStartElement();
!!!4418690.java!!!	isWhiteSpace() : boolean
        return fStreamReader.isWhiteSpace();
!!!4418818.java!!!	require(in type : int, inout namespaceURI : String, inout localName : String) : void
        fStreamReader.require(type,namespaceURI,localName);
!!!4418946.java!!!	standaloneSet() : boolean
        return fStreamReader.standaloneSet();
!!!4419074.java!!!	getAttributeLocalName(in index : int) : String
        return fStreamReader.getAttributeLocalName(index);
