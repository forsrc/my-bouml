format 222
"http" // jdk1.8::javax::xml::ws::spi::http
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/xml/ws/spi/http/"
  java_package "javax.xml.ws.spi.http"
  classview 182786 "http"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1434754 "HttpContext"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "HttpContext represents a mapping between the root URI path of a web
service to a {@link HttpHandler} which is invoked to handle requests
destined for that path on the associated container.
<p>
Container provides the implementation for this and it matches
web service requests to corresponding HttpContext objects.

@author Jitendra Kotamraju
@since JAX-WS 2.2
"
      classrelation 4813186 // handler (<unidirectional association>)
	relation 4813186 --->
	  a role_name "handler" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4813186 // handler (<unidirectional association>)
	  b parent class_ref 1440514 // HttpHandler
      end

      operation 12158850 "setHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 1440514 // HttpHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "JAX-WS runtime sets its handler during
{@link Endpoint#publish(HttpContext)} to handle
HTTP requests for this context. Container or its extensions
use this handler to process the requests.

@param handler the handler to set for this context
"
      end

      operation 12158978 "getPath"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path for this context. This path uniquely identifies
an endpoint inside an application and the path is relative to
application's context path. Container should give this
path based on how it matches request URIs to this HttpContext object.

<p>
For servlet container, this is typically a url-pattern for an endpoint.

<p>
Endpoint's address for this context can be computed as follows:
<pre>
 HttpExchange exch = ...;
 String endpointAddress =
     exch.getScheme() + \"://\"
     + exch.getLocalAddress().getHostName()
     + \":\" + exch.getLocalAddress().getPort()
     + exch.getContextPath() + getPath();
</pre>

@return this context's path
"
      end

      operation 12159106 "getAttribute"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an attribute value for container's configuration
and other data that can be used by jax-ws runtime.

@param name attribute name
@return attribute value
"
      end

      operation 12159234 "getAttributeNames"
	abstract public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all attribute names for container's configuration
and other data that can be used by jax-ws runtime.

@return set of all attribute names
"
      end
    end

    class 1440514 "HttpHandler"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A handler which is invoked to process HTTP requests.
<p>
JAX-WS runtime provides the implementation for this and sets
it using {@link HttpContext#setHandler(HttpHandler)} during
{@link Endpoint#publish(HttpContext) }

@author Jitendra Kotamraju
@since JAX-WS 2.2
"
      operation 12162178 "handle"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "exchange" type class_ref 1440642 // HttpExchange
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles a given request and generates an appropriate response.
See {@link HttpExchange} for a description of the steps
involved in handling an exchange. Container invokes this method
when it receives an incoming request.

@param exchange the exchange containing the request from the
     client and used to send the response
@throws IOException when an I/O error happens during request
     handling
"
      end
    end

    class 1440642 "HttpExchange"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class encapsulates a HTTP request received and a
response to be generated in one exchange. It provides methods
for examining the request from the client, and for building and
sending the response.
<p>
A <code>HttpExchange</code> must be closed to free or reuse
underlying resources. The effect of failing to close an exchange
is undefined.

@author Jitendra Kotamraju
@since JAX-WS 2.2
"
      classrelation 4813314 // REQUEST_CIPHER_SUITE (<unidirectional association>)
	relation 4813314 --->
	  a role_name "REQUEST_CIPHER_SUITE" init_value "
            \"javax.xml.ws.spi.http.request.cipher.suite\"" class_relation const_relation public
	    comment "
Standard property: cipher suite value when the request is received
over HTTPS
<p>Type: String

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4813314 // REQUEST_CIPHER_SUITE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4813442 // REQUEST_KEY_SIZE (<unidirectional association>)
	relation 4813442 --->
	  a role_name "REQUEST_KEY_SIZE" init_value "
            \"javax.xml.ws.spi.http.request.key.size\"" class_relation const_relation public
	    comment "
Standard property: bit size of the algorithm when the request is
received over HTTPS
<p>Type: Integer

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4813442 // REQUEST_KEY_SIZE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4813570 // REQUEST_X509CERTIFICATE (<unidirectional association>)
	relation 4813570 --->
	  a role_name "REQUEST_X509CERTIFICATE" init_value "
            \"javax.xml.ws.spi.http.request.cert.X509Certificate\"" class_relation const_relation public
	    comment "
Standard property: A SSL certificate, if any, associated with the request

<p>Type: java.security.cert.X509Certificate[]
The order of this array is defined as being in ascending order of trust.
The first certificate in the chain is the one set by the client, the next
is the one used to authenticate the first, and so on.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4813570 // REQUEST_X509CERTIFICATE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12159362 "getRequestHeaders"
	abstract public return_type class_ref 130178 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, List<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable Map containing the HTTP headers that were
included with this request. The keys in this Map will be the header
names, while the values will be a List of Strings containing each value
that was included (either for a header that was listed several times,
or one that accepts a comma-delimited list of values on a single line).
In either of these cases, the values for the header name will be
presented in the order that they were included in the request.
<p>
The keys in Map are case-insensitive.

@return an immutable Map which can be used to access request headers
"
      end

      operation 12159490 "getRequestHeader"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the specified request header. If the request
did not include a header of the specified name, this method returns
null. If there are multiple headers with the same name, this method
returns the first header in the request. The header name is
case-insensitive. This is a convienence method to get a header
(instead of using the {@link #getRequestHeaders}).

@param name the name of the request header
@return returns the value of the requested header,
        or null if the request does not have a header of that name
"
      end

      operation 12159618 "getResponseHeaders"
	abstract public return_type class_ref 130178 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, List<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a mutable Map into which the HTTP response headers can be stored
and which will be transmitted as part of this response. The keys in the
Map will be the header names, while the values must be a List of Strings
containing each value that should be included multiple times
(in the order that they should be included).
<p>
The keys in Map are case-insensitive.

@return a mutable Map which can be used to set response headers.
"
      end

      operation 12159746 "addResponseHeader"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a response header with the given name and value. This method
allows a response header to have multiple values. This is a
convenience method to add a response header(instead of using the
{@link #getResponseHeaders()}).

@param name the name of the header
@param value the additional header value. If it contains octet string,
       it should be encoded according to
       RFC 2047 (http://www.ietf.org/rfc/rfc2047.txt)

@see #getResponseHeaders
"
      end

      operation 12159874 "getRequestURI"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the part of the request's URI from the protocol
name up to the query string in the first line of the HTTP request.
Container doesn't decode this string.

@return the request URI
"
      end

      operation 12160002 "getContextPath"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the context path of all the endpoints in an application.
This path is the portion of the request URI that indicates the
context of the request. The context path always comes first in a
request URI. The path starts with a \"/\" character but does not
end with a \"/\" character. If this method returns \"\", the request
is for default context. The container does not decode this string.

<p>
Context path is used in computing the endpoint address. See
{@link HttpContext#getPath}

@return context path of all the endpoints in an application
@see HttpContext#getPath
"
      end

      operation 12160130 "getRequestMethod"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the HTTP request method

@return the request method
"
      end

      operation 12160258 "getHttpContext"
	abstract public return_type class_ref 1434754 // HttpContext
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link HttpContext} for this exchange.
Container matches the request with the associated Endpoint's HttpContext

@return the HttpContext for this exchange
"
      end

      operation 12160386 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This must be called to end an exchange. Container takes care of
closing request and response streams. This must be called so that
the container can free or reuse underlying resources.

@throws IOException if any i/o error
"
      end

      operation 12160514 "getRequestBody"
	abstract public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream from which the request body can be read.
Multiple calls to this method will return the same stream.

@return the stream from which the request body can be read.
@throws IOException if any i/o error during request processing
"
      end

      operation 12160642 "getResponseBody"
	abstract public return_type class_ref 151298 // OutputStream
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream to which the response body must be
written. {@link #setStatus}) must be called prior to calling
this method. Multiple calls to this method (for the same exchange)
will return the same stream.

@return the stream to which the response body is written
@throws IOException if any i/o error during response processing
"
      end

      operation 12160770 "setStatus"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "status" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the HTTP status code for the response.

<p>
This method must be called prior to calling {@link #getResponseBody}.

@param status the response code to send
@see #getResponseBody
"
      end

      operation 12160898 "getRemoteAddress"
	abstract public return_type class_ref 247938 // InetSocketAddress
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unresolved address of the remote entity invoking
this request.

@return the InetSocketAddress of the caller
"
      end

      operation 12161026 "getLocalAddress"
	abstract public return_type class_ref 247938 // InetSocketAddress
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unresolved local address on which the request was received.

@return the InetSocketAddress of the local interface
"
      end

      operation 12161154 "getProtocol"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the protocol string from the request in the form
<i>protocol/majorVersion.minorVersion</i>. For example,
\"HTTP/1.1\"

@return the protocol string from the request
"
      end

      operation 12161282 "getScheme"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the scheme used to make this request,
for example: http, or https.

@return name of the scheme used to make this request
"
      end

      operation 12161410 "getPathInfo"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the extra path information that follows the web service
path but precedes the query string in the request URI and will start
with a \"/\" character.

<p>
This can be used for {@link MessageContext#PATH_INFO}

@return decoded extra path information of web service.
        It is the path that comes
        after the web service path but before the query string in the
        request URI
        <tt>null</tt> if there is no extra path in the request URI
"
      end

      operation 12161538 "getQueryString"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the query string that is contained in the request URI
after the path.

<p>
This can be used for {@link MessageContext#QUERY_STRING}

@return undecoded query string of request URI, or
        <tt>null</tt> if the request URI doesn't have one
"
      end

      operation 12161666 "getAttribute"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an attribute that is associated with this
<code>HttpExchange</code>. JAX-WS handlers and endpoints may then
access the attribute via {@link MessageContext}.
<p>
Servlet containers must expose {@link MessageContext#SERVLET_CONTEXT},
{@link MessageContext#SERVLET_REQUEST}, and
{@link MessageContext#SERVLET_RESPONSE}
as attributes.

<p>If the request has been received by the container using HTTPS, the
following information must be exposed as attributes. These attributes
are {@link #REQUEST_CIPHER_SUITE}, and {@link #REQUEST_KEY_SIZE}.
If there is a SSL certificate associated with the request, it must
be exposed using {@link #REQUEST_X509CERTIFICATE}

@param name attribute name
@return the attribute value, or <tt>null</tt> if the attribute doesn't
        exist
"
      end

      operation 12161794 "getAttributeNames"
	abstract public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gives all the attribute names that are associated with
this <code>HttpExchange</code>.

@return set of all attribute names
@see #getAttribute(String)
"
      end

      operation 12161922 "getUserPrincipal"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link Principal} that represents the authenticated
user for this <code>HttpExchange</code>.

@return Principal for an authenticated user, or
        <tt>null</tt> if not authenticated
"
      end

      operation 12162050 "isUserInRole"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "role" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether an authenticated user is included in the specified
logical \"role\".

@param role specifies the name of the role
@return <tt>true</tt> if the user making this request belongs to a
        given role
"
      end
    end
  end

  deploymentview 180098 "http"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1031810 "HttpContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.ws.Endpoint;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1434754 // HttpContext
      end
      comment "Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1031938 "HttpExchange"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.ws.handler.MessageContext;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.security.Principal;
${definition}"
      associated_elems
	class_ref 1440642 // HttpExchange
      end
      comment "Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1032066 "HttpHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.ws.Endpoint;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1440514 // HttpHandler
      end
      comment "Copyright (c) 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
