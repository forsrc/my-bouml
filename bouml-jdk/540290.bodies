class VersionHelper12
!!!3314050.java!!!	loadClass(inout className : String) : Class
        return loadClass(className, getContextClassLoader());
!!!3314178.java!!!	loadClass(inout className : String, inout cl : ClassLoader) : Class
        Class<?> cls = Class.forName(className, true, cl);
        return cls;
!!!3314306.java!!!	loadClass(inout className : String, inout codebase : String) : Class

        ClassLoader parent = getContextClassLoader();
        ClassLoader cl =
                 URLClassLoader.newInstance(getUrlArray(codebase), parent);

        return loadClass(className, cl);
!!!3314434.java!!!	getJndiProperty(in i : int) : String
        return AccessController.doPrivileged(
            new PrivilegedAction<String>() {
                public String run() {
                    try {
                        return System.getProperty(PROPS[i]);
                    } catch (SecurityException e) {
                        return null;
                    }
                }
            }
        );
!!!3314562.java!!!	getJndiProperties() : String
        Properties sysProps = AccessController.doPrivileged(
            new PrivilegedAction<Properties>() {
                public Properties run() {
                    try {
                        return System.getProperties();
                    } catch (SecurityException e) {
                        return null;
                    }
                }
            }
        );
        if (sysProps == null) {
            return null;
        }
        String[] jProps = new String[PROPS.length];
        for (int i = 0; i < PROPS.length; i++) {
            jProps[i] = sysProps.getProperty(PROPS[i]);
        }
        return jProps;
!!!3314690.java!!!	getResourceAsStream(in c : Class, in name : String) : InputStream
        return AccessController.doPrivileged(
            new PrivilegedAction<InputStream>() {
                public InputStream run() {
                    return c.getResourceAsStream(name);
                }
            }
        );
!!!3314818.java!!!	getJavaHomeLibStream(in filename : String) : InputStream
        return AccessController.doPrivileged(
            new PrivilegedAction<InputStream>() {
                public InputStream run() {
                    try {
                        String javahome = System.getProperty("java.home");
                        if (javahome == null) {
                            return null;
                        }
                        String pathname = javahome + java.io.File.separator +
                            "lib" + java.io.File.separator + filename;
                        return new java.io.FileInputStream(pathname);
                    } catch (Exception e) {
                        return null;
                    }
                }
            }
        );
!!!3314946.java!!!	getResources(in cl : ClassLoader, in name : String) : NamingEnumeration
        Enumeration<URL> urls;
        try {
            urls = AccessController.doPrivileged(
                new PrivilegedExceptionAction<Enumeration<URL>>() {
                    public Enumeration<URL> run() throws IOException {
                        return (cl == null)
                            ? ClassLoader.getSystemResources(name)
                            : cl.getResources(name);
                    }
                }
            );
        } catch (PrivilegedActionException e) {
            throw (IOException)e.getException();
        }
        return new InputStreamEnumeration(urls);
!!!3315074.java!!!	getContextClassLoader() : ClassLoader

        return AccessController.doPrivileged(
            new PrivilegedAction<ClassLoader>() {
                public ClassLoader run() {
                    ClassLoader loader =
                            Thread.currentThread().getContextClassLoader();
                    if (loader == null) {
                        // Don't use bootstrap class loader directly!
                        loader = ClassLoader.getSystemClassLoader();
                    }

                    return loader;
                }
            }
        );
