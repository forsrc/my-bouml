class ZoneRulesProvider
!!!8572162.java!!!	getAvailableZoneIds() : Set
        return new HashSet<>(ZONES.keySet());
!!!8572290.java!!!	getRules(inout zoneId : String, inout forCaching : boolean) : ZoneRules
        Objects.requireNonNull(zoneId, "zoneId");
        return getProvider(zoneId).provideRules(zoneId, forCaching);
!!!8572418.java!!!	getVersions(inout zoneId : String) : NavigableMap
        Objects.requireNonNull(zoneId, "zoneId");
        return getProvider(zoneId).provideVersions(zoneId);
!!!8572546.java!!!	getProvider(inout zoneId : String) : ZoneRulesProvider
        ZoneRulesProvider provider = ZONES.get(zoneId);
        if (provider == null) {
            if (ZONES.isEmpty()) {
                throw new ZoneRulesException("No time-zone data files registered");
            }
            throw new ZoneRulesException("Unknown time-zone ID: " + zoneId);
        }
        return provider;
!!!8572674.java!!!	registerProvider(inout provider : ZoneRulesProvider) : void
        Objects.requireNonNull(provider, "provider");
        registerProvider0(provider);
        PROVIDERS.add(provider);
!!!8572802.java!!!	registerProvider0(inout provider : ZoneRulesProvider) : void
        for (String zoneId : provider.provideZoneIds()) {
            Objects.requireNonNull(zoneId, "zoneId");
            ZoneRulesProvider old = ZONES.putIfAbsent(zoneId, provider);
            if (old != null) {
                throw new ZoneRulesException(
                    "Unable to register zone as one already registered with that ID: " + zoneId +
                    ", currently loading from provider: " + provider);
            }
        }
!!!8572930.java!!!	refresh() : boolean
        boolean changed = false;
        for (ZoneRulesProvider provider : PROVIDERS) {
            changed |= provider.provideRefresh();
        }
        return changed;
!!!8573570.java!!!	provideRefresh() : boolean
        return false;
