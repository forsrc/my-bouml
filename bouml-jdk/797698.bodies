class ObjectPool
!!!5684866.java!!!	ObjectPool(inout type : Class)
    objectType = type;
    freeStack = new ArrayList();
!!!5684994.java!!!	ObjectPool(inout className : String)
    try
    {
      objectType = ObjectFactory.findProviderClass(className, true);
    }
    catch(ClassNotFoundException cnfe)
    {
      throw new WrappedRuntimeException(cnfe);
    }
    freeStack = new ArrayList();
!!!5685122.java!!!	ObjectPool(inout type : Class, in size : int)
    objectType = type;
    freeStack = new ArrayList(size);
!!!5685250.java!!!	ObjectPool()
    objectType = null;
    freeStack = new ArrayList();
!!!5685378.java!!!	getInstanceIfFree() : Object

    // Check if the pool is empty.
    if (!freeStack.isEmpty())
    {

      // Remove object from end of free pool.
      Object result = freeStack.remove(freeStack.size() - 1);
      return result;
    }

    return null;
!!!5685506.java!!!	getInstance() : Object

    // Check if the pool is empty.
    if (freeStack.isEmpty())
    {

      // Create a new object if so.
      try
      {
        return objectType.newInstance();
      }
      catch (InstantiationException ex){}
      catch (IllegalAccessException ex){}

      // Throw unchecked exception for error in pool configuration.
      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_EXCEPTION_CREATING_POOL, null)); //"exception creating new instance for pool");
    }
    else
    {

      // Remove object from end of free pool.
      Object result = freeStack.remove(freeStack.size() - 1);
      return result;
    }
!!!5685634.java!!!	freeInstance(inout obj : Object) : void

    // Make sure the object is of the correct type.
    // Remove safety.  -sb
    // if (objectType.isInstance(obj))
    // {
    freeStack.add(obj);
    // }
    // else
    // {
    //  throw new IllegalArgumentException("argument type invalid for pool");
    // }
