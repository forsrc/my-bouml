class Inet6Address
!!!7493634.java!!!	Inet6Address()
        super();
        holder.init(null, IPv6);
        holder6 = new Inet6AddressHolder();
!!!7493762.java!!!	Inet6Address(inout hostName : String, inout addr : byte [[]], in scope_id : int)
        holder.init(hostName, IPv6);
        holder6 = new Inet6AddressHolder();
        holder6.init(addr, scope_id);
!!!7493890.java!!!	Inet6Address(inout hostName : String, inout addr : byte [[]])
        holder6 = new Inet6AddressHolder();
        try {
            initif (hostName, addr, null);
        } catch (UnknownHostException e) {} /* cant happen if ifname is null */
!!!7494018.java!!!	Inet6Address(inout hostName : String, inout addr : byte [[]], inout nif : NetworkInterface)
        holder6 = new Inet6AddressHolder();
        initif (hostName, addr, nif);
!!!7494146.java!!!	Inet6Address(inout hostName : String, inout addr : byte [[]], inout ifname : String)
        holder6 = new Inet6AddressHolder();
        initstr (hostName, addr, ifname);
!!!7494274.java!!!	getByAddress(inout host : String, inout addr : byte [[]], inout nif : NetworkInterface) : Inet6Address
        if (host != null && host.length() > 0 && host.charAt(0) == '[') {
            if (host.charAt(host.length()-1) == ']') {
                host = host.substring(1, host.length() -1);
            }
        }
        if (addr != null) {
            if (addr.length == Inet6Address.INADDRSZ) {
                return new Inet6Address(host, addr, nif);
            }
        }
        throw new UnknownHostException("addr is of illegal length");
!!!7494402.java!!!	getByAddress(inout host : String, inout addr : byte [[]], in scope_id : int) : Inet6Address
        if (host != null && host.length() > 0 && host.charAt(0) == '[') {
            if (host.charAt(host.length()-1) == ']') {
                host = host.substring(1, host.length() -1);
            }
        }
        if (addr != null) {
            if (addr.length == Inet6Address.INADDRSZ) {
                return new Inet6Address(host, addr, scope_id);
            }
        }
        throw new UnknownHostException("addr is of illegal length");
!!!7494530.java!!!	initstr(inout hostName : String, inout addr : byte [[]], inout ifname : String) : void
        try {
            NetworkInterface nif = NetworkInterface.getByName (ifname);
            if (nif == null) {
                throw new UnknownHostException ("no such interface " + ifname);
            }
            initif (hostName, addr, nif);
        } catch (SocketException e) {
            throw new UnknownHostException ("SocketException thrown" + ifname);
        }
!!!7494658.java!!!	initif(inout hostName : String, inout addr : byte [[]], inout nif : NetworkInterface) : void
        int family = -1;
        holder6.init(addr, nif);

        if (addr.length == INADDRSZ) { // normal IPv6 address
            family = IPv6;
        }
        holder.init(hostName, family);
!!!7494786.java!!!	isDifferentLocalAddressType(inout thisAddr : byte [[]], inout otherAddr : byte [[]]) : boolean

        if (Inet6Address.isLinkLocalAddress(thisAddr) &&
                !Inet6Address.isLinkLocalAddress(otherAddr)) {
            return false;
        }
        if (Inet6Address.isSiteLocalAddress(thisAddr) &&
                !Inet6Address.isSiteLocalAddress(otherAddr)) {
            return false;
        }
        return true;
!!!7494914.java!!!	deriveNumericScope(inout thisAddr : byte [[]], inout ifc : NetworkInterface) : int
        Enumeration<InetAddress> addresses = ifc.getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress addr = addresses.nextElement();
            if (!(addr instanceof Inet6Address)) {
                continue;
            }
            Inet6Address ia6_addr = (Inet6Address)addr;
            /* check if site or link local prefixes match */
            if (!isDifferentLocalAddressType(thisAddr, ia6_addr.getAddress())){
                /* type not the same, so carry on searching */
                continue;
            }
            /* found a matching address - return its scope_id */
            return ia6_addr.getScopeId();
        }
        throw new UnknownHostException ("no scope_id found");
!!!7495042.java!!!	deriveNumericScope(inout ifname : String) : int
        Enumeration<NetworkInterface> en;
        try {
            en = NetworkInterface.getNetworkInterfaces();
        } catch (SocketException e) {
            throw new UnknownHostException ("could not enumerate local network interfaces");
        }
        while (en.hasMoreElements()) {
            NetworkInterface ifc = en.nextElement();
            if (ifc.getName().equals (ifname)) {
                return deriveNumericScope(holder6.ipaddress, ifc);
            }
        }
        throw new UnknownHostException ("No matching address found for interface : " +ifname);
!!!7495170.java!!!	readObject(inout s : ObjectInputStream) : void
        NetworkInterface scope_ifname = null;

        if (getClass().getClassLoader() != null) {
            throw new SecurityException ("invalid address type");
        }

        ObjectInputStream.GetField gf = s.readFields();
        byte[] ipaddress = (byte[])gf.get("ipaddress", null);
        int scope_id = (int)gf.get("scope_id", -1);
        boolean scope_id_set = (boolean)gf.get("scope_id_set", false);
        boolean scope_ifname_set = (boolean)gf.get("scope_ifname_set", false);
        String ifname = (String)gf.get("ifname", null);

        if (ifname != null && !"".equals (ifname)) {
            try {
                scope_ifname = NetworkInterface.getByName(ifname);
                if (scope_ifname == null) {
                    /* the interface does not exist on this system, so we clear
                     * the scope information completely */
                    scope_id_set = false;
                    scope_ifname_set = false;
                    scope_id = 0;
                } else {
                    scope_ifname_set = true;
                    try {
                        scope_id = deriveNumericScope (ipaddress, scope_ifname);
                    } catch (UnknownHostException e) {
                        // typically should not happen, but it may be that
                        // the machine being used for deserialization has
                        // the same interface name but without IPv6 configured.
                    }
                }
            } catch (SocketException e) {}
        }

        /* if ifname was not supplied, then the numeric info is used */

        ipaddress = ipaddress.clone();

        // Check that our invariants are satisfied
        if (ipaddress.length != INADDRSZ) {
            throw new InvalidObjectException("invalid address length: "+
                                             ipaddress.length);
        }

        if (holder.getFamily() != IPv6) {
            throw new InvalidObjectException("invalid address family type");
        }

        Inet6AddressHolder h = new Inet6AddressHolder(
            ipaddress, scope_id, scope_id_set, scope_ifname, scope_ifname_set
        );

        UNSAFE.putObject(this, FIELDS_OFFSET, h);
!!!7495298.java!!!	writeObject(inout s : ObjectOutputStream) : void
            String ifname = null;

        if (holder6.scope_ifname != null) {
            ifname = holder6.scope_ifname.getName();
            holder6.scope_ifname_set = true;
        }
        ObjectOutputStream.PutField pfields = s.putFields();
        pfields.put("ipaddress", holder6.ipaddress);
        pfields.put("scope_id", holder6.scope_id);
        pfields.put("scope_id_set", holder6.scope_id_set);
        pfields.put("scope_ifname_set", holder6.scope_ifname_set);
        pfields.put("ifname", ifname);
        s.writeFields();
!!!7495426.java!!!	isMulticastAddress() : boolean
        return holder6.isMulticastAddress();
!!!7495554.java!!!	isAnyLocalAddress() : boolean
        return holder6.isAnyLocalAddress();
!!!7495682.java!!!	isLoopbackAddress() : boolean
        return holder6.isLoopbackAddress();
!!!7495810.java!!!	isLinkLocalAddress() : boolean
        return holder6.isLinkLocalAddress();
!!!7495938.java!!!	isLinkLocalAddress(inout ipaddress : byte [[]]) : boolean
        return ((ipaddress[0] & 0xff) == 0xfe
                && (ipaddress[1] & 0xc0) == 0x80);
!!!7496066.java!!!	isSiteLocalAddress() : boolean
        return holder6.isSiteLocalAddress();
!!!7496194.java!!!	isSiteLocalAddress(inout ipaddress : byte [[]]) : boolean
        return ((ipaddress[0] & 0xff) == 0xfe
                && (ipaddress[1] & 0xc0) == 0xc0);
!!!7496322.java!!!	isMCGlobal() : boolean
        return holder6.isMCGlobal();
!!!7496450.java!!!	isMCNodeLocal() : boolean
        return holder6.isMCNodeLocal();
!!!7496578.java!!!	isMCLinkLocal() : boolean
        return holder6.isMCLinkLocal();
!!!7496706.java!!!	isMCSiteLocal() : boolean
        return holder6.isMCSiteLocal();
!!!7496834.java!!!	isMCOrgLocal() : boolean
        return holder6.isMCOrgLocal();
!!!7496962.java!!!	getAddress() : byte
        return holder6.ipaddress.clone();
!!!7497090.java!!!	getScopeId() : int
        return holder6.scope_id;
!!!7497218.java!!!	getScopedInterface() : NetworkInterface
        return holder6.scope_ifname;
!!!7497346.java!!!	getHostAddress() : String
        return holder6.getHostAddress();
!!!7497474.java!!!	hashCode() : int
        return holder6.hashCode();
!!!7497602.java!!!	equals(inout obj : Object) : boolean
        if (obj == null || !(obj instanceof Inet6Address))
            return false;

        Inet6Address inetAddr = (Inet6Address)obj;

        return holder6.equals(inetAddr.holder6);
!!!7497730.java!!!	isIPv4CompatibleAddress() : boolean
        return holder6.isIPv4CompatibleAddress();
!!!7497858.java!!!	numericToTextFormat(inout src : byte [[]]) : String
        StringBuilder sb = new StringBuilder(39);
        for (int i = 0; i < (INADDRSZ / INT16SZ); i++) {
            sb.append(Integer.toHexString(((src[i<<1]<<8) & 0xff00)
                                          | (src[(i<<1)+1] & 0xff)));
            if (i < (INADDRSZ / INT16SZ) -1 ) {
               sb.append(":");
            }
        }
        return sb.toString();
