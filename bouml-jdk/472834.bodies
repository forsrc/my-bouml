class JFormattedTextField
!!!10615298.java!!!	JFormattedTextField()
        super();
        enableEvents(AWTEvent.FOCUS_EVENT_MASK);
        setFocusLostBehavior(COMMIT_OR_REVERT);
!!!10615426.java!!!	JFormattedTextField(inout value : Object)
        this();
        setValue(value);
!!!10615554.java!!!	JFormattedTextField(inout format : Format)
        this();
        setFormatterFactory(getDefaultFormatterFactory(format));
!!!10615682.java!!!	JFormattedTextField(inout formatter : JFormattedTextField::AbstractFormatter)
        this(new DefaultFormatterFactory(formatter));
!!!10615810.java!!!	JFormattedTextField(inout factory : JFormattedTextField::AbstractFormatterFactory)
        this();
        setFormatterFactory(factory);
!!!10615938.java!!!	JFormattedTextField(inout factory : JFormattedTextField::AbstractFormatterFactory, inout currentValue : Object)
        this(currentValue);
        setFormatterFactory(factory);
!!!10616066.java!!!	setFocusLostBehavior(in behavior : int) : void
        if (behavior != COMMIT && behavior != COMMIT_OR_REVERT &&
            behavior != PERSIST && behavior != REVERT) {
            throw new IllegalArgumentException("setFocusLostBehavior must be one of: JFormattedTextField.COMMIT, JFormattedTextField.COMMIT_OR_REVERT, JFormattedTextField.PERSIST or JFormattedTextField.REVERT");
        }
        focusLostBehavior = behavior;
!!!10616194.java!!!	getFocusLostBehavior() : int
        return focusLostBehavior;
!!!10616322.java!!!	setFormatterFactory(inout tf : JFormattedTextField::AbstractFormatterFactory) : void
        AbstractFormatterFactory oldFactory = factory;

        factory = tf;
        firePropertyChange("formatterFactory", oldFactory, tf);
        setValue(getValue(), true, false);
!!!10616450.java!!!	getFormatterFactory() : JFormattedTextField::AbstractFormatterFactory
        return factory;
!!!10616578.java!!!	setFormatter(inout format : JFormattedTextField::AbstractFormatter) : void
        AbstractFormatter oldFormat = this.format;

        if (oldFormat != null) {
            oldFormat.uninstall();
        }
        setEditValid(true);
        this.format = format;
        if (format != null) {
            format.install(this);
        }
        setEdited(false);
        firePropertyChange("textFormatter", oldFormat, format);
!!!10616706.java!!!	getFormatter() : JFormattedTextField::AbstractFormatter
        return format;
!!!10616834.java!!!	setValue(inout value : Object) : void
        if (value != null && getFormatterFactory() == null) {
            setFormatterFactory(getDefaultFormatterFactory(value));
        }
        setValue(value, true, true);
!!!10616962.java!!!	getValue() : Object
        return value;
!!!10617090.java!!!	commitEdit() : void
        AbstractFormatter format = getFormatter();

        if (format != null) {
            setValue(format.stringToValue(getText()), false, true);
        }
!!!10617218.java!!!	setEditValid(inout isValid : boolean) : void
        if (isValid != editValid) {
            editValid = isValid;
            firePropertyChange("editValid", Boolean.valueOf(!isValid),
                               Boolean.valueOf(isValid));
        }
!!!10617346.java!!!	isEditValid() : boolean
        return editValid;
!!!10617474.java!!!	invalidEdit() : void
        UIManager.getLookAndFeel().provideErrorFeedback(JFormattedTextField.this);
!!!10617602.java!!!	processInputMethodEvent(inout e : InputMethodEvent) : void
        AttributedCharacterIterator text = e.getText();
        int commitCount = e.getCommittedCharacterCount();

        // Keep track of the composed text
        if (text != null) {
            int begin = text.getBeginIndex();
            int end = text.getEndIndex();
            composedTextExists = ((end - begin) > commitCount);
        } else {
            composedTextExists = false;
        }

        super.processInputMethodEvent(e);
!!!10617730.java!!!	processFocusEvent(inout e : FocusEvent) : void
        super.processFocusEvent(e);

        // ignore temporary focus event
        if (e.isTemporary()) {
            return;
        }

        if (isEdited() && e.getID() == FocusEvent.FOCUS_LOST) {
            InputContext ic = getInputContext();
            if (focusLostHandler == null) {
                focusLostHandler = new FocusLostHandler();
            }

            // if there is a composed text, process it first
            if ((ic != null) && composedTextExists) {
                ic.endComposition();
                EventQueue.invokeLater(focusLostHandler);
            } else {
                focusLostHandler.run();
            }
        }
        else if (!isEdited()) {
            // reformat
            setValue(getValue(), true, true);
        }
!!!10617986.java!!!	getActions() : Action
        return TextAction.augmentList(super.getActions(), defaultActions);
!!!10618114.java!!!	getUIClassID() : String
        return uiClassID;
!!!10618242.java!!!	setDocument(inout doc : Document) : void
        if (documentListener != null && getDocument() != null) {
            getDocument().removeDocumentListener(documentListener);
        }
        super.setDocument(doc);
        if (documentListener == null) {
            documentListener = new DocumentHandler();
        }
        doc.addDocumentListener(documentListener);
!!!10618370.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!10618498.java!!!	setFormatterActions(inout actions : Action [[]]) : void
        if (actions == null) {
            if (textFormatterActionMap != null) {
                textFormatterActionMap.clear();
            }
        }
        else {
            if (textFormatterActionMap == null) {
                ActionMap map = getActionMap();

                textFormatterActionMap = new ActionMap();
                while (map != null) {
                    ActionMap parent = map.getParent();

                    if (parent instanceof UIResource || parent == null) {
                        map.setParent(textFormatterActionMap);
                        textFormatterActionMap.setParent(parent);
                        break;
                    }
                    map = parent;
                }
            }
            for (int counter = actions.length - 1; counter >= 0;
                 counter--) {
                Object key = actions[counter].getValue(Action.NAME);

                if (key != null) {
                    textFormatterActionMap.put(key, actions[counter]);
                }
            }
        }
!!!10618626.java!!!	setValue(inout value : Object, inout createFormat : boolean, inout firePC : boolean) : void
        Object oldValue = this.value;

        this.value = value;

        if (createFormat) {
            AbstractFormatterFactory factory = getFormatterFactory();
            AbstractFormatter atf;

            if (factory != null) {
                atf = factory.getFormatter(this);
            }
            else {
                atf = null;
            }
            setFormatter(atf);
        }
        else {
            // Assumed to be valid
            setEditValid(true);
        }

        setEdited(false);

        if (firePC) {
            firePropertyChange("value", oldValue, value);
        }
!!!10618754.java!!!	setEdited(inout edited : boolean) : void
        this.edited = edited;
!!!10618882.java!!!	isEdited() : boolean
        return edited;
!!!10619010.java!!!	getDefaultFormatterFactory(inout type : Object) : JFormattedTextField::AbstractFormatterFactory
        if (type instanceof DateFormat) {
            return new DefaultFormatterFactory(new DateFormatter
                                               ((DateFormat)type));
        }
        if (type instanceof NumberFormat) {
            return new DefaultFormatterFactory(new NumberFormatter(
                                               (NumberFormat)type));
        }
        if (type instanceof Format) {
            return new DefaultFormatterFactory(new InternationalFormatter(
                                               (Format)type));
        }
        if (type instanceof Date) {
            return new DefaultFormatterFactory(new DateFormatter());
        }
        if (type instanceof Number) {
            AbstractFormatter displayFormatter = new NumberFormatter();
            ((NumberFormatter)displayFormatter).setValueClass(type.getClass());
            AbstractFormatter editFormatter = new NumberFormatter(
                                  new DecimalFormat("#.#"));
            ((NumberFormatter)editFormatter).setValueClass(type.getClass());

            return new DefaultFormatterFactory(displayFormatter,
                                               displayFormatter,editFormatter);
        }
        return new DefaultFormatterFactory(new DefaultFormatter());
