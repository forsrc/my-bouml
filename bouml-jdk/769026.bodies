class KeyResolver
!!!5411970.java!!!	KeyResolver(inout keyResolverSpi : KeyResolverSpi)
        resolverSpi = keyResolverSpi;
!!!5412098.java!!!	length() : int
        return resolverVector.size();
!!!5412226.java!!!	getX509Certificate(inout element : Element, inout baseURI : String, inout storage : StorageResolver) : X509Certificate
        for (KeyResolver resolver : resolverVector) {
            if (resolver == null) {
                Object exArgs[] = {
                                   (((element != null)
                                       && (element.getNodeType() == Node.ELEMENT_NODE))
                                       ? element.getTagName() : "null")
                };

                throw new KeyResolverException("utils.resolver.noClass", exArgs);
            }
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "check resolvability by class " + resolver.getClass());
            }

            X509Certificate cert = resolver.resolveX509Certificate(element, baseURI, storage);
            if (cert != null) {
                return cert;
            }
        }

        Object exArgs[] = {
                           (((element != null) && (element.getNodeType() == Node.ELEMENT_NODE))
                           ? element.getTagName() : "null")
                          };

        throw new KeyResolverException("utils.resolver.noClass", exArgs);
!!!5412354.java!!!	getPublicKey(inout element : Element, inout baseURI : String, inout storage : StorageResolver) : PublicKey
        for (KeyResolver resolver : resolverVector) {
            if (resolver == null) {
                Object exArgs[] = {
                                   (((element != null)
                                       && (element.getNodeType() == Node.ELEMENT_NODE))
                                       ? element.getTagName() : "null")
                };

                throw new KeyResolverException("utils.resolver.noClass", exArgs);
            }
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "check resolvability by class " + resolver.getClass());
            }

            PublicKey cert = resolver.resolvePublicKey(element, baseURI, storage);
            if (cert != null) {
                return cert;
            }
        }

        Object exArgs[] = {
                           (((element != null) && (element.getNodeType() == Node.ELEMENT_NODE))
                           ? element.getTagName() : "null")
                          };

        throw new KeyResolverException("utils.resolver.noClass", exArgs);
!!!5412482.java!!!	register(inout className : String, inout globalResolver : boolean) : void
        JavaUtils.checkRegisterPermission();
        KeyResolverSpi keyResolverSpi =
            (KeyResolverSpi) Class.forName(className).newInstance();
        keyResolverSpi.setGlobalResolver(globalResolver);
        register(keyResolverSpi, false);
!!!5412610.java!!!	registerAtStart(inout className : String, inout globalResolver : boolean) : void
        JavaUtils.checkRegisterPermission();
        KeyResolverSpi keyResolverSpi = null;
        Exception ex = null;
        try {
            keyResolverSpi = (KeyResolverSpi) Class.forName(className).newInstance();
        } catch (ClassNotFoundException e) {
            ex = e;
        } catch (IllegalAccessException e) {
            ex = e;
        } catch (InstantiationException e) {
            ex = e;
        }

        if (ex != null) {
            throw (IllegalArgumentException) new
            IllegalArgumentException("Invalid KeyResolver class name").initCause(ex);
        }
        keyResolverSpi.setGlobalResolver(globalResolver);
        register(keyResolverSpi, true);
!!!5412738.java!!!	register(inout keyResolverSpi : KeyResolverSpi, inout start : boolean) : void
        JavaUtils.checkRegisterPermission();
        KeyResolver resolver = new KeyResolver(keyResolverSpi);
        if (start) {
            resolverVector.add(0, resolver);
        } else {
            resolverVector.add(resolver);
        }
!!!5412866.java!!!	registerClassNames(inout classNames : List) : void
        JavaUtils.checkRegisterPermission();
        List<KeyResolver> keyResolverList = new ArrayList<KeyResolver>(classNames.size());
        for (String className : classNames) {
            KeyResolverSpi keyResolverSpi =
                (KeyResolverSpi) Class.forName(className).newInstance();
            keyResolverSpi.setGlobalResolver(false);
            keyResolverList.add(new KeyResolver(keyResolverSpi));
        }
        resolverVector.addAll(keyResolverList);
!!!5412994.java!!!	registerDefaultResolvers() : void

        List<KeyResolver> keyResolverList = new ArrayList<KeyResolver>();
        keyResolverList.add(new KeyResolver(new RSAKeyValueResolver()));
        keyResolverList.add(new KeyResolver(new DSAKeyValueResolver()));
        keyResolverList.add(new KeyResolver(new X509CertificateResolver()));
        keyResolverList.add(new KeyResolver(new X509SKIResolver()));
        keyResolverList.add(new KeyResolver(new RetrievalMethodResolver()));
        keyResolverList.add(new KeyResolver(new X509SubjectNameResolver()));
        keyResolverList.add(new KeyResolver(new X509IssuerSerialResolver()));
        keyResolverList.add(new KeyResolver(new DEREncodedKeyValueResolver()));
        keyResolverList.add(new KeyResolver(new KeyInfoReferenceResolver()));
        keyResolverList.add(new KeyResolver(new X509DigestResolver()));

        resolverVector.addAll(keyResolverList);
!!!5413122.java!!!	resolvePublicKey(inout element : Element, inout baseURI : String, inout storage : StorageResolver) : PublicKey
        return resolverSpi.engineLookupAndResolvePublicKey(element, baseURI, storage);
!!!5413250.java!!!	resolveX509Certificate(inout element : Element, inout baseURI : String, inout storage : StorageResolver) : X509Certificate
        return resolverSpi.engineLookupResolveX509Certificate(element, baseURI, storage);
!!!5413378.java!!!	resolveSecretKey(inout element : Element, inout baseURI : String, inout storage : StorageResolver) : SecretKey
        return resolverSpi.engineLookupAndResolveSecretKey(element, baseURI, storage);
!!!5413506.java!!!	setProperty(inout key : String, inout value : String) : void
        resolverSpi.engineSetProperty(key, value);
!!!5413634.java!!!	getProperty(inout key : String) : String
        return resolverSpi.engineGetProperty(key);
!!!5413762.java!!!	understandsProperty(inout propertyToTest : String) : boolean
        return resolverSpi.understandsProperty(propertyToTest);
!!!5413890.java!!!	resolverClassName() : String
        return resolverSpi.getClass().getName();
!!!5414530.java!!!	iterator() : Iterator
        return new ResolverIterator(resolverVector);
