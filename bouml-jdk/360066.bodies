class JTextField
!!!2548738.java!!!	JTextField()
        this(null, null, 0);
!!!2548866.java!!!	JTextField(inout text : String)
        this(null, text, 0);
!!!2548994.java!!!	JTextField(in columns : int)
        this(null, null, columns);
!!!2549122.java!!!	JTextField(inout text : String, in columns : int)
        this(null, text, columns);
!!!2549250.java!!!	JTextField(inout doc : Document, inout text : String, in columns : int)
        if (columns < 0) {
            throw new IllegalArgumentException("columns less than zero.");
        }
        visibility = new DefaultBoundedRangeModel();
        visibility.addChangeListener(new ScrollRepainter());
        this.columns = columns;
        if (doc == null) {
            doc = createDefaultModel();
        }
        setDocument(doc);
        if (text != null) {
            setText(text);
        }
!!!2549378.java!!!	getUIClassID() : String
        return uiClassID;
!!!2549506.java!!!	setDocument(inout doc : Document) : void
        if (doc != null) {
            doc.putProperty("filterNewlines", Boolean.TRUE);
        }
        super.setDocument(doc);
!!!2549634.java!!!	isValidateRoot() : boolean
        return !(SwingUtilities.getUnwrappedParent(this) instanceof JViewport);
!!!2549762.java!!!	getHorizontalAlignment() : int
        return horizontalAlignment;
!!!2549890.java!!!	setHorizontalAlignment(in alignment : int) : void
        if (alignment == horizontalAlignment) return;
        int oldValue = horizontalAlignment;
        if ((alignment == LEFT) || (alignment == CENTER) ||
            (alignment == RIGHT)|| (alignment == LEADING) ||
            (alignment == TRAILING)) {
            horizontalAlignment = alignment;
        } else {
            throw new IllegalArgumentException("horizontalAlignment");
        }
        firePropertyChange("horizontalAlignment", oldValue, horizontalAlignment);
        invalidate();
        repaint();
!!!2550018.java!!!	createDefaultModel() : Document
        return new PlainDocument();
!!!2550146.java!!!	getColumns() : int
        return columns;
!!!2550274.java!!!	setColumns(in columns : int) : void
        int oldVal = this.columns;
        if (columns < 0) {
            throw new IllegalArgumentException("columns less than zero.");
        }
        if (columns != oldVal) {
            this.columns = columns;
            invalidate();
        }
!!!2550402.java!!!	getColumnWidth() : int
        if (columnWidth == 0) {
            FontMetrics metrics = getFontMetrics(getFont());
            columnWidth = metrics.charWidth('m');
        }
        return columnWidth;
!!!2550530.java!!!	getPreferredSize() : Dimension
        Dimension size = super.getPreferredSize();
        if (columns != 0) {
            Insets insets = getInsets();
            size.width = columns * getColumnWidth() +
                insets.left + insets.right;
        }
        return size;
!!!2550658.java!!!	setFont(inout f : Font) : void
        super.setFont(f);
        columnWidth = 0;
!!!2550786.java!!!	addActionListener(inout l : ActionListener) : void
        listenerList.add(ActionListener.class, l);
!!!2550914.java!!!	removeActionListener(inout l : ActionListener) : void
        if ((l != null) && (getAction() == l)) {
            setAction(null);
        } else {
            listenerList.remove(ActionListener.class, l);
        }
!!!2551042.java!!!	getActionListeners() : ActionListener
        return listenerList.getListeners(ActionListener.class);
!!!2551170.java!!!	fireActionPerformed() : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        int modifiers = 0;
        AWTEvent currentEvent = EventQueue.getCurrentEvent();
        if (currentEvent instanceof InputEvent) {
            modifiers = ((InputEvent)currentEvent).getModifiers();
        } else if (currentEvent instanceof ActionEvent) {
            modifiers = ((ActionEvent)currentEvent).getModifiers();
        }
        ActionEvent e =
            new ActionEvent(this, ActionEvent.ACTION_PERFORMED,
                            (command != null) ? command : getText(),
                            EventQueue.getMostRecentEventTime(), modifiers);

        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ActionListener.class) {
                ((ActionListener)listeners[i+1]).actionPerformed(e);
            }
        }
!!!2551298.java!!!	setActionCommand(inout command : String) : void
        this.command = command;
!!!2551426.java!!!	setAction(inout a : Action) : void
        Action oldValue = getAction();
        if (action==null || !action.equals(a)) {
            action = a;
            if (oldValue!=null) {
                removeActionListener(oldValue);
                oldValue.removePropertyChangeListener(actionPropertyChangeListener);
                actionPropertyChangeListener = null;
            }
            configurePropertiesFromAction(action);
            if (action!=null) {
                // Don't add if it is already a listener
                if (!isListener(ActionListener.class, action)) {
                    addActionListener(action);
                }
                // Reverse linkage:
                actionPropertyChangeListener = createActionPropertyChangeListener(action);
                action.addPropertyChangeListener(actionPropertyChangeListener);
            }
            firePropertyChange("action", oldValue, action);
        }
!!!2551554.java!!!	isListener(inout c : Class, inout a : ActionListener) : boolean
        boolean isListener = false;
        Object[] listeners = listenerList.getListenerList();
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==c && listeners[i+1]==a) {
                    isListener=true;
            }
        }
        return isListener;
!!!2551682.java!!!	getAction() : Action
        return action;
!!!2551810.java!!!	configurePropertiesFromAction(inout a : Action) : void
        AbstractAction.setEnabledFromAction(this, a);
        AbstractAction.setToolTipTextFromAction(this, a);
        setActionCommandFromAction(a);
!!!2551938.java!!!	actionPropertyChanged(inout action : Action, inout propertyName : String) : void
        if (propertyName == Action.ACTION_COMMAND_KEY) {
            setActionCommandFromAction(action);
        } else if (propertyName == "enabled") {
            AbstractAction.setEnabledFromAction(this, action);
        } else if (propertyName == Action.SHORT_DESCRIPTION) {
            AbstractAction.setToolTipTextFromAction(this, action);
        }
!!!2552066.java!!!	setActionCommandFromAction(inout action : Action) : void
        setActionCommand((action == null) ? null :
                         (String)action.getValue(Action.ACTION_COMMAND_KEY));
!!!2552194.java!!!	createActionPropertyChangeListener(inout a : Action) : PropertyChangeListener
        return new TextFieldActionPropertyChangeListener(this, a);
!!!2552578.java!!!	getActions() : Action
        return TextAction.augmentList(super.getActions(), defaultActions);
!!!2552706.java!!!	postActionEvent() : void
        fireActionPerformed();
!!!2552834.java!!!	getHorizontalVisibility() : BoundedRangeModel
        return visibility;
!!!2552962.java!!!	getScrollOffset() : int
        return visibility.getValue();
!!!2553090.java!!!	setScrollOffset(in scrollOffset : int) : void
        visibility.setValue(scrollOffset);
!!!2553218.java!!!	scrollRectToVisible(inout r : Rectangle) : void
        // convert to coordinate system of the bounded range
        Insets i = getInsets();
        int x0 = r.x + visibility.getValue() - i.left;
        int x1 = x0 + r.width;
        if (x0 < visibility.getValue()) {
            // Scroll to the left
            visibility.setValue(x0);
        } else if(x1 > visibility.getValue() + visibility.getExtent()) {
            // Scroll to the right
            visibility.setValue(x1 - visibility.getExtent());
        }
!!!2553346.java!!!	hasActionListener() : boolean
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==ActionListener.class) {
                return true;
            }
        }
        return false;
!!!2553986.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!2554114.java!!!	paramString() : String
        String horizontalAlignmentString;
        if (horizontalAlignment == LEFT) {
            horizontalAlignmentString = "LEFT";
        } else if (horizontalAlignment == CENTER) {
            horizontalAlignmentString = "CENTER";
        } else if (horizontalAlignment == RIGHT) {
            horizontalAlignmentString = "RIGHT";
        } else if (horizontalAlignment == LEADING) {
            horizontalAlignmentString = "LEADING";
        } else if (horizontalAlignment == TRAILING) {
            horizontalAlignmentString = "TRAILING";
        } else horizontalAlignmentString = "";
        String commandString = (command != null ?
                                command : "");

        return super.paramString() +
        ",columns=" + columns +
        ",columnWidth=" + columnWidth +
        ",command=" + commandString +
        ",horizontalAlignment=" + horizontalAlignmentString;
!!!2554242.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJTextField();
        }
        return accessibleContext;
