class MBeanServerAccessController
!!!3039490.java!!!	getMBeanServer() : MBeanServer
        return mbs;
!!!3039618.java!!!	setMBeanServer(inout mbs : MBeanServer) : void
        if (mbs == null)
            throw new IllegalArgumentException("Null MBeanServer");
        if (this.mbs != null)
            throw new IllegalArgumentException("MBeanServer object already " +
                                               "initialized");
        this.mbs = mbs;
!!!3040002.java!!!	checkCreate(inout className : String) : void
        checkWrite();
!!!3040130.java!!!	checkUnregister(inout name : ObjectName) : void
        checkWrite();
!!!3040258.java!!!	addNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void
        checkRead();
        getMBeanServer().addNotificationListener(name, listener,
                                                 filter, handback);
!!!3040386.java!!!	addNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void
        checkRead();
        getMBeanServer().addNotificationListener(name, listener,
                                                 filter, handback);
!!!3040514.java!!!	createMBean(inout className : String, inout name : ObjectName) : ObjectInstance
        checkCreate(className);
        SecurityManager sm = System.getSecurityManager();
        if (sm == null) {
            Object object = getMBeanServer().instantiate(className);
            checkClassLoader(object);
            return getMBeanServer().registerMBean(object, name);
        } else {
            return getMBeanServer().createMBean(className, name);
        }
!!!3040642.java!!!	createMBean(inout className : String, inout name : ObjectName, inout params : Object [[]], inout signature : String [[]]) : ObjectInstance
        checkCreate(className);
        SecurityManager sm = System.getSecurityManager();
        if (sm == null) {
            Object object = getMBeanServer().instantiate(className,
                                                         params,
                                                         signature);
            checkClassLoader(object);
            return getMBeanServer().registerMBean(object, name);
        } else {
            return getMBeanServer().createMBean(className, name,
                                                params, signature);
        }
!!!3040770.java!!!	createMBean(inout className : String, inout name : ObjectName, inout loaderName : ObjectName) : ObjectInstance
        checkCreate(className);
        SecurityManager sm = System.getSecurityManager();
        if (sm == null) {
            Object object = getMBeanServer().instantiate(className,
                                                         loaderName);
            checkClassLoader(object);
            return getMBeanServer().registerMBean(object, name);
        } else {
            return getMBeanServer().createMBean(className, name, loaderName);
        }
!!!3040898.java!!!	createMBean(inout className : String, inout name : ObjectName, inout loaderName : ObjectName, inout params : Object [[]], inout signature : String [[]]) : ObjectInstance
        checkCreate(className);
        SecurityManager sm = System.getSecurityManager();
        if (sm == null) {
            Object object = getMBeanServer().instantiate(className,
                                                         loaderName,
                                                         params,
                                                         signature);
            checkClassLoader(object);
            return getMBeanServer().registerMBean(object, name);
        } else {
            return getMBeanServer().createMBean(className, name, loaderName,
                                                params, signature);
        }
!!!3041026.java!!!	deserialize(inout name : ObjectName, inout data : byte [[]]) : ObjectInputStream
        checkRead();
        return getMBeanServer().deserialize(name, data);
!!!3041154.java!!!	deserialize(inout className : String, inout data : byte [[]]) : ObjectInputStream
        checkRead();
        return getMBeanServer().deserialize(className, data);
!!!3041282.java!!!	deserialize(inout className : String, inout loaderName : ObjectName, inout data : byte [[]]) : ObjectInputStream
        checkRead();
        return getMBeanServer().deserialize(className, loaderName, data);
!!!3041410.java!!!	getAttribute(inout name : ObjectName, inout attribute : String) : Object
        checkRead();
        return getMBeanServer().getAttribute(name, attribute);
!!!3041538.java!!!	getAttributes(inout name : ObjectName, inout attributes : String [[]]) : AttributeList
        checkRead();
        return getMBeanServer().getAttributes(name, attributes);
!!!3041666.java!!!	getClassLoader(inout loaderName : ObjectName) : ClassLoader
        checkRead();
        return getMBeanServer().getClassLoader(loaderName);
!!!3041794.java!!!	getClassLoaderFor(inout mbeanName : ObjectName) : ClassLoader
        checkRead();
        return getMBeanServer().getClassLoaderFor(mbeanName);
!!!3041922.java!!!	getClassLoaderRepository() : ClassLoaderRepository
        checkRead();
        return getMBeanServer().getClassLoaderRepository();
!!!3042050.java!!!	getDefaultDomain() : String
        checkRead();
        return getMBeanServer().getDefaultDomain();
!!!3042178.java!!!	getDomains() : String
        checkRead();
        return getMBeanServer().getDomains();
!!!3042306.java!!!	getMBeanCount() : Integer
        checkRead();
        return getMBeanServer().getMBeanCount();
!!!3042434.java!!!	getMBeanInfo(inout name : ObjectName) : MBeanInfo
        checkRead();
        return getMBeanServer().getMBeanInfo(name);
!!!3042562.java!!!	getObjectInstance(inout name : ObjectName) : ObjectInstance
        checkRead();
        return getMBeanServer().getObjectInstance(name);
!!!3042690.java!!!	instantiate(inout className : String) : Object
        checkCreate(className);
        return getMBeanServer().instantiate(className);
!!!3042818.java!!!	instantiate(inout className : String, inout params : Object [[]], inout signature : String [[]]) : Object
        checkCreate(className);
        return getMBeanServer().instantiate(className, params, signature);
!!!3042946.java!!!	instantiate(inout className : String, inout loaderName : ObjectName) : Object
        checkCreate(className);
        return getMBeanServer().instantiate(className, loaderName);
!!!3043074.java!!!	instantiate(inout className : String, inout loaderName : ObjectName, inout params : Object [[]], inout signature : String [[]]) : Object
        checkCreate(className);
        return getMBeanServer().instantiate(className, loaderName,
                                            params, signature);
!!!3043202.java!!!	invoke(inout name : ObjectName, inout operationName : String, inout params : Object [[]], inout signature : String [[]]) : Object
        checkWrite();
        checkMLetMethods(name, operationName);
        return getMBeanServer().invoke(name, operationName, params, signature);
!!!3043330.java!!!	isInstanceOf(inout name : ObjectName, inout className : String) : boolean
        checkRead();
        return getMBeanServer().isInstanceOf(name, className);
!!!3043458.java!!!	isRegistered(inout name : ObjectName) : boolean
        checkRead();
        return getMBeanServer().isRegistered(name);
!!!3043586.java!!!	queryMBeans(inout name : ObjectName, inout query : QueryExp) : Set
        checkRead();
        return getMBeanServer().queryMBeans(name, query);
!!!3043714.java!!!	queryNames(inout name : ObjectName, inout query : QueryExp) : Set
        checkRead();
        return getMBeanServer().queryNames(name, query);
!!!3043842.java!!!	registerMBean(inout object : Object, inout name : ObjectName) : ObjectInstance
        checkWrite();
        return getMBeanServer().registerMBean(object, name);
!!!3043970.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener) : void
        checkRead();
        getMBeanServer().removeNotificationListener(name, listener);
!!!3044098.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : NotificationListener, inout filter : NotificationFilter, inout handback : Object) : void
        checkRead();
        getMBeanServer().removeNotificationListener(name, listener,
                                                    filter, handback);
!!!3044226.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName) : void
        checkRead();
        getMBeanServer().removeNotificationListener(name, listener);
!!!3044354.java!!!	removeNotificationListener(inout name : ObjectName, inout listener : ObjectName, inout filter : NotificationFilter, inout handback : Object) : void
        checkRead();
        getMBeanServer().removeNotificationListener(name, listener,
                                                    filter, handback);
!!!3044482.java!!!	setAttribute(inout name : ObjectName, inout attribute : Attribute) : void
        checkWrite();
        getMBeanServer().setAttribute(name, attribute);
!!!3044610.java!!!	setAttributes(inout name : ObjectName, inout attributes : AttributeList) : AttributeList
        checkWrite();
        return getMBeanServer().setAttributes(name, attributes);
!!!3044738.java!!!	unregisterMBean(inout name : ObjectName) : void
        checkUnregister(name);
        getMBeanServer().unregisterMBean(name);
!!!3044866.java!!!	checkClassLoader(inout object : Object) : void
        if (object instanceof ClassLoader)
            throw new SecurityException("Access denied! Creating an " +
                                        "MBean that is a ClassLoader " +
                                        "is forbidden unless a security " +
                                        "manager is installed.");
!!!3044994.java!!!	checkMLetMethods(inout name : ObjectName, inout operation : String) : void
        // Check if security manager installed
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            return;
        }
        // Check for addURL and getMBeansFromURL methods
        if (!operation.equals("addURL") &&
                !operation.equals("getMBeansFromURL")) {
            return;
        }
        // Check if MBean is instance of MLet
        if (!getMBeanServer().isInstanceOf(name,
                "javax.management.loading.MLet")) {
            return;
        }
        // Throw security exception
        if (operation.equals("addURL")) { // addURL
            throw new SecurityException("Access denied! MLet method addURL " +
                    "cannot be invoked unless a security manager is installed.");
        } else { // getMBeansFromURL
            // Whether or not calling getMBeansFromURL is allowed is controlled
            // by the value of the "jmx.remote.x.mlet.allow.getMBeansFromURL"
            // system property. If the value of this property is true, calling
            // the MLet's getMBeansFromURL method is allowed. The default value
            // for this property is false.
            final String propName = "jmx.remote.x.mlet.allow.getMBeansFromURL";
            GetPropertyAction propAction = new GetPropertyAction(propName);
            String propValue = AccessController.doPrivileged(propAction);
            boolean allowGetMBeansFromURL = "true".equalsIgnoreCase(propValue);
            if (!allowGetMBeansFromURL) {
                throw new SecurityException("Access denied! MLet method " +
                        "getMBeansFromURL cannot be invoked unless a " +
                        "security manager is installed or the system property " +
                        "-Djmx.remote.x.mlet.allow.getMBeansFromURL=true " +
                        "is specified.");
            }
        }
