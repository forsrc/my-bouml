class Platform
!!!7139714.java!!!	Platform(inout launchMechanisms : UNIXProcess::LaunchMechanism)
            this.defaultLaunchMechanism = launchMechanisms[0];
            this.validLaunchMechanisms =
                EnumSet.copyOf(Arrays.asList(launchMechanisms));
!!!7139842.java!!!	helperPath(inout javahome : String, inout osArch : String) : String
            switch (this) {
                case SOLARIS:
                    if (osArch.equals("x86")) { osArch = "i386"; }
                    else if (osArch.equals("x86_64")) { osArch = "amd64"; }
                    // fall through...
                case LINUX:
                case AIX:
                    return javahome + "/lib/" + osArch + "/jspawnhelper";

                case BSD:
                    return javahome + "/lib/jspawnhelper";

                default:
                    throw new AssertionError("Unsupported platform: " + this);
            }
!!!7139970.java!!!	helperPath() : String
            return AccessController.doPrivileged(
                (PrivilegedAction<String>) () ->
                    helperPath(System.getProperty("java.home"),
                               System.getProperty("os.arch"))
            );
!!!7140098.java!!!	launchMechanism() : UNIXProcess::LaunchMechanism
            return AccessController.doPrivileged(
                (PrivilegedAction<LaunchMechanism>) () -> {
                    String s = System.getProperty(
                        "jdk.lang.Process.launchMechanism");
                    LaunchMechanism lm;
                    if (s == null) {
                        lm = defaultLaunchMechanism;
                        s = lm.name().toLowerCase(Locale.ENGLISH);
                    } else {
                        try {
                            lm = LaunchMechanism.valueOf(
                                s.toUpperCase(Locale.ENGLISH));
                        } catch (IllegalArgumentException e) {
                            lm = null;
                        }
                    }
                    if (lm == null || !validLaunchMechanisms.contains(lm)) {
                        throw new Error(
                            s + " is not a supported " +
                            "process launch mechanism on this platform."
                        );
                    }
                    return lm;
                }
            );
!!!7140226.java!!!	get() : UNIXProcess::Platform
            String osName = AccessController.doPrivileged(
                (PrivilegedAction<String>) () -> System.getProperty("os.name")
            );

            if (osName.equals("Linux")) { return LINUX; }
            if (osName.contains("OS X")) { return BSD; }
            if (osName.equals("SunOS")) { return SOLARIS; }
            if (osName.equals("AIX")) { return AIX; }

            throw new Error(osName + " is not a supported OS platform.");
