class SocketOrChannelAcceptorImpl
!!!698498.java!!!	SocketOrChannelAcceptorImpl(inout orb : ORB)
        this.orb = orb;
        wrapper = ORBUtilSystemException.get( orb,
            CORBALogDomains.RPC_TRANSPORT ) ;

        setWork(this);
        initialized = false;

        // BEGIN Legacy support.
        this.hostname = orb.getORBData().getORBServerHost();
        this.name = LegacyServerSocketEndPointInfo.NO_NAME;
        this.locatorPort = -1;
        // END Legacy support.
!!!698626.java!!!	SocketOrChannelAcceptorImpl(inout orb : ORB, in port : int)
        this(orb);
        this.port = port;
!!!698754.java!!!	SocketOrChannelAcceptorImpl(inout orb : ORB, in port : int, inout name : String, inout type : String)
        this(orb, port);
        this.name = name;
        this.type = type;
!!!698882.java!!!	initialize() : boolean
        if (initialized) {
            return false;
        }
        if (orb.transportDebugFlag) {
            dprint(".initialize: " + this);
        }
        InetSocketAddress inetSocketAddress = null;
        try {
            if (orb.getORBData().getListenOnAllInterfaces().equals(ORBConstants.LISTEN_ON_ALL_INTERFACES)) {
                inetSocketAddress = new InetSocketAddress(port);
            } else {
                String host = orb.getORBData().getORBServerHost();
                inetSocketAddress = new InetSocketAddress(host, port);
            }
            serverSocket = orb.getORBData().getSocketFactory()
                .createServerSocket(type, inetSocketAddress);
            internalInitialize();
        } catch (Throwable t) {
            throw wrapper.createListenerFailed( t, Integer.toString(port) ) ;
        }
        initialized = true;
        return true;
!!!699010.java!!!	internalInitialize() : void
        // Determine the listening port (for the IOR).
        // This is important when using emphemeral ports (i.e.,
        // when the port value to the constructor is 0).

        port = serverSocket.getLocalPort();

        // Register with transport (also sets up monitoring).

        orb.getCorbaTransportManager().getInboundConnectionCache(this);

        // Finish configuation.

        serverSocketChannel = serverSocket.getChannel();

        if (serverSocketChannel != null) {
            setUseSelectThreadToWait(
                orb.getORBData().acceptorSocketUseSelectThreadToWait());
            serverSocketChannel.configureBlocking(
                ! orb.getORBData().acceptorSocketUseSelectThreadToWait());
        } else {
            // Configure to use listener and reader threads.
            setUseSelectThreadToWait(false);
        }
        setUseWorkerThreadForEvent(
            orb.getORBData().acceptorSocketUseWorkerThreadForEvent());

!!!699138.java!!!	initialized() : boolean
        return initialized;
!!!699266.java!!!	getConnectionCacheType() : String
        return this.getClass().toString();
!!!699394.java!!!	setConnectionCache(inout connectionCache : InboundConnectionCache) : void
        this.connectionCache = connectionCache;
!!!699522.java!!!	getConnectionCache() : InboundConnectionCache
        return connectionCache;
!!!699650.java!!!	shouldRegisterAcceptEvent() : boolean
        return true;
!!!699778.java!!!	accept() : void
        try {
            SocketChannel socketChannel = null;
            Socket socket = null;
            if (serverSocketChannel == null) {
                socket = serverSocket.accept();
            } else {
                socketChannel = serverSocketChannel.accept();
                socket = socketChannel.socket();
            }
            orb.getORBData().getSocketFactory()
                .setAcceptedSocketOptions(this, serverSocket, socket);
            if (orb.transportDebugFlag) {
                dprint(".accept: " +
                       (serverSocketChannel == null
                        ? serverSocket.toString()
                        : serverSocketChannel.toString()));
            }

            CorbaConnection connection =
                new SocketOrChannelConnectionImpl(orb, this, socket);
            if (orb.transportDebugFlag) {
                dprint(".accept: new: " + connection);
            }

            // NOTE: The connection MUST be put in the cache BEFORE being
            // registered with the selector.  Otherwise if the bytes
            // are read on the connection it will attempt a time stamp
            // but the cache will be null, resulting in NPE.

            // A connection needs to be timestamped before putting to the cache.
            // Otherwise the newly created connection (with 0 timestamp) could be
            // incorrectly reclaimed by concurrent reclaim() call OR if there
            // will be no events on this connection then it could be reclaimed
            // by upcoming reclaim() call.
            getConnectionCache().stampTime(connection);
            getConnectionCache().put(this, connection);

            if (connection.shouldRegisterServerReadEvent()) {
                Selector selector = orb.getTransportManager().getSelector(0);
                if (selector != null) {
                    if (orb.transportDebugFlag) {
                        dprint(".accept: registerForEvent: " + connection);
                    }
                    selector.registerForEvent(connection.getEventHandler());
                }
            }

            getConnectionCache().reclaim();

        } catch (IOException e) {
            if (orb.transportDebugFlag) {
                dprint(".accept:", e);
            }
            Selector selector = orb.getTransportManager().getSelector(0);
            if (selector != null) {
                selector.unregisterForEvent(this);
                // REVISIT - need to close - recreate - then register new one.
                selector.registerForEvent(this);
                // NOTE: if register cycling we do not want to shut down ORB
                // since local beans will still work.  Instead one will see
                // a growing log file to alert admin of problem.
            }
        }
!!!699906.java!!!	close() : void
        try {
            if (orb.transportDebugFlag) {
                dprint(".close->:");
            }
            Selector selector = orb.getTransportManager().getSelector(0);
            if (selector != null) {
                selector.unregisterForEvent(this);
            }
            if (serverSocketChannel != null) {
                serverSocketChannel.close();
            }
            if (serverSocket != null) {
                serverSocket.close();
            }
        } catch (IOException e) {
            if (orb.transportDebugFlag) {
                dprint(".close:", e);
            }
        } finally {
            if (orb.transportDebugFlag) {
                dprint(".close<-:");
            }
        }
!!!700034.java!!!	getEventHandler() : EventHandler
        return this;
!!!700162.java!!!	getObjectAdapterId() : String
        return null;
!!!700290.java!!!	getObjectAdapterManagerId() : String
        return null;
!!!700418.java!!!	addToIORTemplate(inout iorTemplate : IORTemplate, inout policies : Policies, inout codebase : String) : void
        Iterator iterator = iorTemplate.iteratorById(
            org.omg.IOP.TAG_INTERNET_IOP.value);

        String hostname = orb.getORBData().getORBServerHost();

        if (iterator.hasNext()) {
            // REVISIT - how does this play with legacy ORBD port exchange?
            IIOPAddress iiopAddress =
                IIOPFactories.makeIIOPAddress(orb, hostname, port);
            AlternateIIOPAddressComponent iiopAddressComponent =
                IIOPFactories.makeAlternateIIOPAddressComponent(iiopAddress);

            while (iterator.hasNext()) {
                TaggedProfileTemplate taggedProfileTemplate =
                    (TaggedProfileTemplate) iterator.next();
                taggedProfileTemplate.add(iiopAddressComponent);
            }
        } else {
            GIOPVersion version = orb.getORBData().getGIOPVersion();
            int templatePort;
            if (policies.forceZeroPort()) {
                templatePort = 0;
            } else if (policies.isTransient()) {
                templatePort = port;
            } else {
                templatePort = orb.getLegacyServerSocketManager()
                   .legacyGetPersistentServerPort(SocketInfo.IIOP_CLEAR_TEXT);
            }
            IIOPAddress addr =
                IIOPFactories.makeIIOPAddress(orb, hostname, templatePort);
            IIOPProfileTemplate iiopProfile =
                IIOPFactories.makeIIOPProfileTemplate(orb, version, addr);
            if (version.supportsIORIIOPProfileComponents()) {
                iiopProfile.add(IIOPFactories.makeCodeSetsComponent(orb));
                iiopProfile.add(IIOPFactories.makeMaxStreamFormatVersionComponent());
                RequestPartitioningPolicy rpPolicy = (RequestPartitioningPolicy)
                    policies.get_effective_policy(
                                      ORBConstants.REQUEST_PARTITIONING_POLICY);
                if (rpPolicy != null) {
                    iiopProfile.add(
                         IIOPFactories.makeRequestPartitioningComponent(
                             rpPolicy.getValue()));
                }
                if (codebase != null && codebase != "") {
                    iiopProfile.add(IIOPFactories. makeJavaCodebaseComponent(codebase));
                }
                if (orb.getORBData().isJavaSerializationEnabled()) {
                    iiopProfile.add(
                           IIOPFactories.makeJavaSerializationComponent());
                }
            }
            iorTemplate.add(iiopProfile);
        }
!!!700546.java!!!	getMonitoringName() : String
        return "AcceptedConnections";
!!!700674.java!!!	getChannel() : SelectableChannel
        return serverSocketChannel;
!!!700802.java!!!	getInterestOps() : int
        return SelectionKey.OP_ACCEPT;
!!!700930.java!!!	getAcceptor() : Acceptor
        return this;
!!!701058.java!!!	getConnection() : Connection
        throw new RuntimeException("Should not happen.");
!!!701186.java!!!	doWork() : void
        try {
            if (orb.transportDebugFlag) {
                dprint(".doWork->: " + this);
            }
            if (selectionKey.isAcceptable()) {
                        accept();
            } else {
                if (orb.transportDebugFlag) {
                    dprint(".doWork: ! selectionKey.isAcceptable: " + this);
                }
            }
        } catch (SecurityException se) {
            if (orb.transportDebugFlag) {
                dprint(".doWork: ignoring SecurityException: "
                       + se
                       + " " + this);
            }
            String permissionStr = ORBUtility.getClassSecurityInfo(getClass());
            wrapper.securityExceptionInAccept(se, permissionStr);
        } catch (Exception ex) {
            if (orb.transportDebugFlag) {
                dprint(".doWork: ignoring Exception: "
                       + ex
                       + " " + this);
            }
            wrapper.exceptionInAccept(ex);
        } catch (Throwable t) {
            if (orb.transportDebugFlag) {
                dprint(".doWork: ignoring Throwable: "
                       + t
                       + " " + this);
            }
        } finally {

            // IMPORTANT: To avoid bug (4953599), we force the
            // Thread that does the NIO select to also do the
            // enable/disable of Ops using SelectionKey.interestOps().
            // Otherwise, the SelectionKey.interestOps() may block
            // indefinitely.
            // NOTE: If "acceptorSocketUseWorkerThreadForEvent" is
            // set to to false in ParserTable.java, then this method,
            // doWork(), will get executed by the same thread
            // (SelectorThread) that does the NIO select.
            // If "acceptorSocketUseWorkerThreadForEvent" is set
            // to true, a WorkerThread will execute this method,
            // doWork(). Hence, the registering of the enabling of
            // the SelectionKey's interestOps is done here instead
            // of calling SelectionKey.interestOps(<interest op>).

            Selector selector = orb.getTransportManager().getSelector(0);
            if (selector != null) {
                selector.registerInterestOps(this);
            }

            if (orb.transportDebugFlag) {
                dprint(".doWork<-:" + this);
            }
        }
!!!701314.java!!!	setEnqueueTime(in timeInMillis : long) : void
        enqueueTime = timeInMillis;
!!!701442.java!!!	getEnqueueTime() : long
        return enqueueTime;
!!!701570.java!!!	createMessageMediator(inout broker : Broker, inout connection : Connection) : MessageMediator
        // REVISIT - no factoring so cheat to avoid code dup right now.
        // REVISIT **** COUPLING !!!!
        ContactInfo contactInfo = new SocketOrChannelContactInfoImpl();
        return contactInfo.createMessageMediator(broker, connection);
!!!701698.java!!!	finishCreatingMessageMediator(inout broker : Broker, inout connection : Connection, inout messageMediator : MessageMediator) : MessageMediator
        // REVISIT - no factoring so cheat to avoid code dup right now.
        // REVISIT **** COUPLING !!!!
        ContactInfo contactInfo = new SocketOrChannelContactInfoImpl();
        return contactInfo.finishCreatingMessageMediator(broker,
                                          connection, messageMediator);
!!!701826.java!!!	createInputObject(inout broker : Broker, inout messageMediator : MessageMediator) : InputObject
        CorbaMessageMediator corbaMessageMediator = (CorbaMessageMediator)
            messageMediator;
        return new CDRInputObject((ORB)broker,
                                  (CorbaConnection)messageMediator.getConnection(),
                                  corbaMessageMediator.getDispatchBuffer(),
                                  corbaMessageMediator.getDispatchHeader());
!!!701954.java!!!	createOutputObject(inout broker : Broker, inout messageMediator : MessageMediator) : OutputObject
        CorbaMessageMediator corbaMessageMediator = (CorbaMessageMediator)
            messageMediator;
        return sun.corba.OutputStreamFactory.newCDROutputObject((ORB) broker,
                       corbaMessageMediator, corbaMessageMediator.getReplyHeader(),
                       corbaMessageMediator.getStreamFormatVersion());
!!!702082.java!!!	getServerSocket() : ServerSocket
        return serverSocket;
!!!702210.java!!!	toString() : String
        String sock;
        if (serverSocketChannel == null) {
            if (serverSocket == null) {
                sock = "(not initialized)";
            } else {
                sock = serverSocket.toString();
            }
        } else {
            sock = serverSocketChannel.toString();
        }

        return
            toStringName() +
            "["
            + sock + " "
            + type + " "
            + shouldUseSelectThreadToWait() + " "
            + shouldUseWorkerThreadForEvent()
            + "]" ;
!!!702338.java!!!	toStringName() : String
        return "SocketOrChannelAcceptorImpl";
!!!702466.java!!!	dprint(inout msg : String) : void
        ORBUtility.dprint(toStringName(), msg);
!!!702594.java!!!	dprint(inout msg : String, inout t : Throwable) : void
        dprint(msg);
        t.printStackTrace(System.out);
!!!702722.java!!!	getType() : String
        return type;
!!!702850.java!!!	getHostName() : String
        return hostname;
!!!702978.java!!!	getHost() : String
        return hostname;
!!!703106.java!!!	getPort() : int
        return port;
!!!703234.java!!!	getLocatorPort() : int
        return locatorPort;
!!!703362.java!!!	setLocatorPort(in port : int) : void
        locatorPort = port;
!!!703490.java!!!	getName() : String
        // Kluge alert:
        // Work and Legacy both define getName.
        // Try to make this behave best for most cases.
        String result =
            name.equals(LegacyServerSocketEndPointInfo.NO_NAME) ?
            this.toString() : name;
        return result;
