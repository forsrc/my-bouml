class CacheKey
!!!7368834.java!!!	valueOf(inout key : K, inout refQueue : ReferenceQueue) : Object
            return key == null
                   // null key means we can't weakly reference it,
                   // so we use a NULL_KEY singleton as cache key
                   ? NULL_KEY
                   // non-null key requires wrapping with a WeakReference
                   : new CacheKey<>(key, refQueue);
!!!7368962.java!!!	CacheKey(inout key : K, inout refQueue : ReferenceQueue)
            super(key, refQueue);
            this.hash = System.identityHashCode(key);  // compare by identity
!!!7369090.java!!!	hashCode() : int
            return hash;
!!!7369218.java!!!	equals(inout obj : Object) : boolean
            K key;
            return obj == this ||
                   obj != null &&
                   obj.getClass() == this.getClass() &&
                   // cleared CacheKey is only equal to itself
                   (key = this.get()) != null &&
                   // compare key by identity
                   key == ((CacheKey<K>) obj).get();
!!!7369346.java!!!	expungeFrom(inout map : ConcurrentMap, inout reverseMap : ConcurrentMap) : void
            // removing just by key is always safe here because after a CacheKey
            // is cleared and enqueue-ed it is only equal to itself
            // (see equals method)...
            ConcurrentMap<?, ?> valuesMap = map.remove(this);
            // remove also from reverseMap if needed
            if (valuesMap != null) {
                for (Object cacheValue : valuesMap.values()) {
                    reverseMap.remove(cacheValue);
                }
            }
