class SWITCH
!!!3595522.java!!!	SWITCH(inout match : int [[]], inout targets : InstructionHandle [[]], inout target : InstructionHandle, in max_gap : int)
    this.match   = (int[])match.clone();
    this.targets = (InstructionHandle[])targets.clone();

    if((match_length = match.length) < 2) // (almost) empty switch, or just default
      instruction = new TABLESWITCH(match, targets, target);
    else {
      sort(0, match_length - 1);

      if(matchIsOrdered(max_gap)) {
        fillup(max_gap, target);

        instruction = new TABLESWITCH(this.match, this.targets, target);
      }
      else
        instruction = new LOOKUPSWITCH(this.match, this.targets, target);
    }
!!!3595650.java!!!	SWITCH(inout match : int [[]], inout targets : InstructionHandle [[]], inout target : InstructionHandle)
    this(match, targets, target, 1);
!!!3595778.java!!!	fillup(in max_gap : int, inout target : InstructionHandle) : void
    int                 max_size = match_length + match_length * max_gap;
    int[]               m_vec    = new int[max_size];
    InstructionHandle[] t_vec    = new InstructionHandle[max_size];
    int                 count    = 1;

    m_vec[0] = match[0];
    t_vec[0] = targets[0];

    for(int i=1; i < match_length; i++) {
      int prev = match[i-1];
      int gap  = match[i] - prev;

      for(int j=1; j < gap; j++) {
        m_vec[count] = prev + j;
        t_vec[count] = target;
        count++;
      }

      m_vec[count] = match[i];
      t_vec[count] = targets[i];
      count++;
    }

    match   = new int[count];
    targets = new InstructionHandle[count];

    System.arraycopy(m_vec, 0, match, 0, count);
    System.arraycopy(t_vec, 0, targets, 0, count);
!!!3595906.java!!!	sort(in l : int, in r : int) : void
    int i = l, j = r;
    int h, m = match[(l + r) / 2];
    InstructionHandle h2;

    do {
      while(match[i] < m) i++;
      while(m < match[j]) j--;

      if(i <= j) {
        h=match[i]; match[i]=match[j]; match[j]=h; // Swap elements
        h2=targets[i]; targets[i]=targets[j]; targets[j]=h2; // Swap instructions, too
        i++; j--;
      }
    } while(i <= j);

    if(l < j) sort(l, j);
    if(i < r) sort(i, r);
!!!3596034.java!!!	matchIsOrdered(in max_gap : int) : boolean
    for(int i=1; i < match_length; i++)
      if(match[i] - match[i-1] > max_gap)
        return false;

    return true;
!!!3596162.java!!!	getInstructionList() : InstructionList
    return new InstructionList(instruction);
!!!3596290.java!!!	getInstruction() : Instruction
    return instruction;
