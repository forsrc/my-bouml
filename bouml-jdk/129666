format 222
"security" // jdk1.8::java::security
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/security/"
  java_package "java.security"
  classview 128514 "security"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 129154 "AccessControlContext"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An AccessControlContext is used to make system resource access decisions
based on the context it encapsulates.

<p>More specifically, it encapsulates a context and
has a single method, {@code checkPermission},
that is equivalent to the {@code checkPermission} method
in the AccessController class, with one difference: The AccessControlContext
{@code checkPermission} method makes access decisions based on the
context it encapsulates,
rather than that of the current execution thread.

<p>Thus, the purpose of AccessControlContext is for those situations where
a security check that should be made within a given context
actually needs to be done from within a
<i>different</i> context (for example, from within a worker thread).

<p> An AccessControlContext is created by calling the
{@code AccessController.getContext} method.
The {@code getContext} method takes a \"snapshot\"
of the current calling context, and places
it in an AccessControlContext object, which it returns. A sample call is
the following:

<pre>
  AccessControlContext acc = AccessController.getContext()
</pre>

<p>
Code within a different context can subsequently call the
{@code checkPermission} method on the
previously-saved AccessControlContext object. A sample call is the
following:

<pre>
  acc.checkPermission(permission)
</pre>

@see AccessController

@author Roland Schemers
"
      classrelation 3336194 // context (<unidirectional association>)
	relation 3336194 --->
	  a role_name "context" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3336194 // context (<unidirectional association>)
	  b parent class_ref 319618 // ProtectionDomain
      end

      attribute 1840386 "isPrivileged"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " isPrivileged and isAuthorized are referenced by the VM - do not remove
 or change their names
"
      end

      attribute 1840514 "isAuthorized"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3336322 // privilegedContext (<unidirectional association>)
	relation 3336322 --->
	  a role_name "privilegedContext" private
	    comment " Note: This field is directly used by the virtual machine
 native codes. Don't touch it.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3336322 // privilegedContext (<unidirectional association>)
	  b parent class_ref 129154 // AccessControlContext
      end

      classrelation 3336450 // combiner (<unidirectional association>)
	relation 3336450 --->
	  a role_name "combiner" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3336450 // combiner (<unidirectional association>)
	  b parent class_ref 510338 // DomainCombiner
      end

      classrelation 3336578 // permissions (<unidirectional association>)
	relation 3336578 --->
	  a role_name "permissions" multiplicity "[]" private
	    comment " limited privilege scope
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3336578 // permissions (<unidirectional association>)
	  b parent class_ref 257538 // Permission
      end

      classrelation 3336706 // parent (<unidirectional association>)
	relation 3336706 --->
	  a role_name "parent" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3336706 // parent (<unidirectional association>)
	  b parent class_ref 129154 // AccessControlContext
      end

      attribute 1840642 "isWrapped"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1840770 "isLimited"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " is constrained by limited privilege scope?
"
      end

      classrelation 3336834 // limitedContext (<unidirectional association>)
	relation 3336834 --->
	  a role_name "limitedContext" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3336834 // limitedContext (<unidirectional association>)
	  b parent class_ref 319618 // ProtectionDomain
      end

      attribute 1840898 "debugInit"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1841026 "debug"
	class_attribute private explicit_type "Debug"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7911298 "getDebug"
	class_operation package explicit_return_type "Debug"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7911426 "AccessControlContext"
	public explicit_return_type ""
	nparams 1
	  param inout name "context" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an AccessControlContext with the given array of ProtectionDomains.
Context must not be null. Duplicate domains will be removed from the
context.

@param context the ProtectionDomains associated with this context.
The non-duplicate domains are copied from the array. Subsequent
changes to the array will not affect this AccessControlContext.
@throws NullPointerException if {@code context} is {@code null}
"
      end

      operation 7911554 "AccessControlContext"
	public explicit_return_type ""
	nparams 2
	  param inout name "acc" type class_ref 129154 // AccessControlContext
	  param inout name "combiner" type class_ref 510338 // DomainCombiner
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@code AccessControlContext} with the given
{@code AccessControlContext} and {@code DomainCombiner}.
This constructor associates the provided
{@code DomainCombiner} with the provided
{@code AccessControlContext}.

<p>

@param acc the {@code AccessControlContext} associated
         with the provided {@code DomainCombiner}.

@param combiner the {@code DomainCombiner} to be associated
         with the provided {@code AccessControlContext}.

@exception NullPointerException if the provided
         {@code context} is {@code null}.

@exception SecurityException if a security manager is installed and the
         caller does not have the \"createAccessControlContext\"
         {@link SecurityPermission}
@since 1.3
"
      end

      operation 7911682 "AccessControlContext"
	package explicit_return_type ""
	nparams 3
	  param inout name "acc" type class_ref 129154 // AccessControlContext
	  param inout name "combiner" type class_ref 510338 // DomainCombiner
	  param inout name "preauthorized" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package private to allow calls from ProtectionDomain without performing
the security check for {@linkplain SecurityConstants.CREATE_ACC_PERMISSION}
permission
"
      end

      operation 7911810 "AccessControlContext"
	package explicit_return_type ""
	nparams 5
	  param inout name "caller" type class_ref 319618 // ProtectionDomain
	  param inout name "combiner" type class_ref 510338 // DomainCombiner
	  param inout name "parent" type class_ref 129154 // AccessControlContext
	  param inout name "context" type class_ref 129154 // AccessControlContext
	  param inout name "perms" type class_ref 257538 // Permission
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package private for AccessController

This \"argument wrapper\" context will be passed as the actual context
parameter on an internal doPrivileged() call used in the implementation.
"
      end

      operation 7911938 "AccessControlContext"
	package explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	  param inout name "isPrivileged" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package private constructor for AccessController.getContext()
"
      end

      operation 7912066 "AccessControlContext"
	package explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	  param inout name "privilegedContext" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for JavaSecurityAccess.doIntersectionPrivilege()
"
      end

      operation 7912194 "getContext"
	package return_type class_ref 319618 // ProtectionDomain
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this context's context.
"
      end

      operation 7912322 "isPrivileged"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this context is privileged.
"
      end

      operation 7912450 "getAssignedCombiner"
	package return_type class_ref 510338 // DomainCombiner
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "get the assigned combiner from the privileged or inherited context
"
      end

      operation 7912578 "getDomainCombiner"
	public return_type class_ref 510338 // DomainCombiner
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the {@code DomainCombiner} associated with this
{@code AccessControlContext}.

<p>

@return the {@code DomainCombiner} associated with this
         {@code AccessControlContext}, or {@code null}
         if there is none.

@exception SecurityException if a security manager is installed and
         the caller does not have the \"getDomainCombiner\"
         {@link SecurityPermission}
@since 1.3
"
      end

      operation 7912706 "getCombiner"
	package return_type class_ref 510338 // DomainCombiner
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package private for AccessController
"
      end

      operation 7912834 "isAuthorized"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7912962 "checkPermission"
	public explicit_return_type "void"
	nparams 1
	  param inout name "perm" type class_ref 257538 // Permission
	nexceptions 1
	  exception class_ref 1012994 // AccessControlException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the access request indicated by the
specified permission should be allowed or denied, based on
the security policy currently in effect, and the context in
this object. The request is allowed only if every ProtectionDomain
in the context implies the permission. Otherwise the request is
denied.

<p>
This method quietly returns if the access request
is permitted, or throws a suitable AccessControlException otherwise.

@param perm the requested permission.

@exception AccessControlException if the specified permission
is not permitted, based on the current security policy and the
context encapsulated by this object.
@exception NullPointerException if the permission to check for is null.
"
      end

      operation 7913090 "checkPermission2"
	private explicit_return_type "void"
	nparams 1
	  param inout name "perm" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check the domains associated with the limited privilege scope.
"
      end

      operation 7913218 "optimize"
	package return_type class_ref 129154 // AccessControlContext
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Take the stack-based context (this) and combine it with the
privileged or inherited context, if need be. Any limited
privilege scope is flagged regardless of whether the assigned
context comes from an immediately enclosing limited doPrivileged().
The limited privilege scope can indirectly flow from the inherited
parent thread or an assigned context previously captured by getContext().
"
      end

      operation 7913346 "combine"
	class_operation private return_type class_ref 319618 // ProtectionDomain
	nparams 2
	  param inout name "current" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	  param inout name "assigned" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combine the current (stack) and assigned domains.
"
      end

      operation 7913474 "calculateFields"
	private explicit_return_type "void"
	nparams 3
	  param inout name "assigned" type class_ref 129154 // AccessControlContext
	  param inout name "parent" type class_ref 129154 // AccessControlContext
	  param inout name "permissions" type class_ref 257538 // Permission
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculate the additional domains that could potentially be reached via
limited privilege scope. Mark the context as being subject to limited
privilege scope unless the reachable domains (if any) are already
contained in this domain context (in which case any limited
privilege scope checking would be redundant).
"
      end

      operation 7913602 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two AccessControlContext objects for equality.
Checks that <i>obj</i> is
an AccessControlContext and has the same set of ProtectionDomains
as this context.
<P>
@param obj the object we are testing for equality with this object.
@return true if <i>obj</i> is an AccessControlContext, and has the
same set of ProtectionDomains as this context, false otherwise.
"
      end

      operation 7913730 "equalContext"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare for equality based on state that is free of limited
privilege complications.
"
      end

      operation 7913858 "equalPDs"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "a" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	  param inout name "b" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7913986 "equalLimitedContext"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare for equality based on state that is captured during a
call to AccessController.getContext() when a limited privilege
scope is in effect.
"
      end

      operation 7914114 "getNextPC"
	class_operation private return_type class_ref 129154 // AccessControlContext
	nparams 1
	  param inout name "acc" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Follow the privilegedContext link making our best effort to skip
through any wrapper contexts.
"
      end

      operation 7914242 "containsAllPDs"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "thisContext" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	  param inout name "thatContext" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7914370 "containsAllLimits"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 129154 // AccessControlContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7914498 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this context. The hash code
is computed by exclusive or-ing the hash code of all the protection
domains in the context together.

@return a hash code value for this context.
"
      end
    end

    class 189826 "PrivilegedActionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown by
{@code doPrivileged(PrivilegedExceptionAction)} and
{@code doPrivileged(PrivilegedExceptionAction,
AccessControlContext context)} to indicate
that the action being performed threw a checked exception.  The exception
thrown by the action can be obtained by calling the
{@code getException} method.  In effect, an
{@code PrivilegedActionException} is a \"wrapper\"
for an exception thrown by a privileged action.

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"exception thrown
by the privileged computation\" that is provided at construction time and
accessed via the {@link #getException()} method is now known as the
<i>cause</i>, and may be accessed via the {@link Throwable#getCause()}
method, as well as the aforementioned \"legacy method.\"

@see PrivilegedExceptionAction
@see AccessController#doPrivileged(PrivilegedExceptionAction)
@see AccessController#doPrivileged(PrivilegedExceptionAction,AccessControlContext)
"
      classrelation 3359234 // <generalisation>
	relation 3359234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3359234 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1852546 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4724086851538908602L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from JDK 1.2.2 for interoperability
"
      end

      classrelation 3359362 // exception (<unidirectional association>)
	relation 3359362 --->
	  a role_name "exception" private
	    comment "
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3359362 // exception (<unidirectional association>)
	  b parent class_ref 132226 // Exception
      end

      operation 7985666 "PrivilegedActionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "exception" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new PrivilegedActionException &quot;wrapping&quot;
the specific Exception.

@param exception The exception thrown
"
      end

      operation 7985794 "getException"
	public return_type class_ref 132226 // Exception
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception thrown by the privileged computation that
resulted in this {@code PrivilegedActionException}.

<p>This method predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@return the exception thrown by the privileged computation that
        resulted in this {@code PrivilegedActionException}.
@see PrivilegedExceptionAction
@see AccessController#doPrivileged(PrivilegedExceptionAction)
@see AccessController#doPrivileged(PrivilegedExceptionAction,
                                           AccessControlContext)
"
      end

      operation 7985922 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception (the exception thrown by
the privileged computation that resulted in this
{@code PrivilegedActionException}).

@return  the cause of this exception.
@since   1.4
"
      end

      operation 7986050 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 250114 "PrivilegedAction"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A computation to be performed with privileges enabled.  The computation is
performed by invoking {@code AccessController.doPrivileged} on the
{@code PrivilegedAction} object.  This interface is used only for
computations that do not throw checked exceptions; computations that
throw checked exceptions must use {@code PrivilegedExceptionAction}
instead.

@see AccessController
@see AccessController#doPrivileged(PrivilegedAction)
@see PrivilegedExceptionAction
"
      operation 1246850 "run"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the computation.  This method will be called by
{@code AccessController.doPrivileged} after enabling privileges.

@return a class-dependent value that may represent the results of the
        computation. Each class that implements
        {@code PrivilegedAction}
        should document what (if anything) this value represents.
@see AccessController#doPrivileged(PrivilegedAction)
@see AccessController#doPrivileged(PrivilegedAction,
                                    AccessControlContext)
"
      end
    end

    class 257410 "BasicPermission"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The BasicPermission class extends the Permission class, and
can be used as the base class for permissions that want to
follow the same naming convention as BasicPermission.
<P>
The name for a BasicPermission is the name of the given permission
(for example, \"exit\",
\"setFactory\", \"print.queueJob\", etc). The naming
convention follows the  hierarchical property naming convention.
An asterisk may appear by itself, or if immediately preceded by a \".\"
may appear at the end of the name, to signify a wildcard match.
For example, \"*\" and \"java.*\" signify a wildcard match, while \"*java\", \"a*b\",
and \"java*\" do not.
<P>
The action string (inherited from Permission) is unused.
Thus, BasicPermission is commonly used as the base class for
\"named\" permissions
(ones that contain a name but no actions list; you either have the
named permission or you don't.)
Subclasses may implement actions on top of BasicPermission,
if desired.
<p>
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager

@author Marianne Mueller
@author Roland Schemers
"
      classrelation 369794 // <generalisation>
	relation 369794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 369794 // <generalisation>
	  b parent class_ref 257538 // Permission
      end

      classrelation 369922 // <realization>
	relation 369922 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 369922 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 310914 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6279438298436773498L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 311042 "wildcard"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " does this permission have a wildcard at the end?
"
      end

      classrelation 370050 // path (<unidirectional association>)
	relation 370050 --->
	  a role_name "path" private
	    comment " the name without the wildcard on the end
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 370050 // path (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 311170 "exitVM"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " is this permission the old-style exitVM permission (pre JDK 1.6)?
"
      end

      operation 1303042 "init"
	private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "initialize a BasicPermission object. Common to all constructors.
"
      end

      operation 1303170 "BasicPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new BasicPermission with the specified name.
Name is the symbolic name of the permission, such as
\"setFactory\",
\"print.queueJob\", or \"topLevelWindow\", etc.

@param name the name of the BasicPermission.

@throws NullPointerException if {@code name} is {@code null}.
@throws IllegalArgumentException if {@code name} is empty.
"
      end

      operation 1303298 "BasicPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new BasicPermission object with the specified name.
The name is the symbolic name of the BasicPermission, and the
actions String is currently unused.

@param name the name of the BasicPermission.
@param actions ignored.

@throws NullPointerException if {@code name} is {@code null}.
@throws IllegalArgumentException if {@code name} is empty.
"
      end

      operation 1303426 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified permission is \"implied\" by
this object.
<P>
More specifically, this method returns true if:
<ul>
<li> <i>p</i>'s class is the same as this object's class, and
<li> <i>p</i>'s name equals or (in the case of wildcards)
     is implied by this object's
     name. For example, \"a.b.*\" implies \"a.b.c\".
</ul>

@param p the permission to check against.

@return true if the passed permission is equal to or
implied by this permission, false otherwise.
"
      end

      operation 1303554 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two BasicPermission objects for equality.
Checks that <i>obj</i>'s class is the same as this object's class
and has the same name as this object.
<P>
@param obj the object we are testing for equality with this object.
@return true if <i>obj</i>'s class is the same as this object's class
 and has the same name as this BasicPermission object, false otherwise.
"
      end

      operation 1303682 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object.
The hash code used is the hash code of the name, that is,
{@code getName().hashCode()}, where {@code getName} is
from the Permission superclass.

@return a hash code value for this object.
"
      end

      operation 1303810 "getActions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical string representation of the actions,
which currently is the empty string \"\", since there are no actions for
a BasicPermission.

@return the empty string \"\".
"
      end

      operation 1303938 "newPermissionCollection"
	public return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new PermissionCollection object for storing BasicPermission
objects.

<p>BasicPermission objects must be stored in a manner that allows them
to be inserted in any order, but that also enables the
PermissionCollection {@code implies} method
to be implemented in an efficient (and consistent) manner.

@return a new PermissionCollection object suitable for
storing BasicPermissions.
"
      end

      operation 1304066 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the BasicPermission from
a stream.
"
      end

      operation 1304194 "getCanonicalName"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical name of this BasicPermission.
All internal invocations of getName should invoke this method, so
that the pre-JDK 1.6 \"exitVM\" and current \"exitVM.*\" permission are
equivalent in equals/hashCode methods.

@return the canonical name of this BasicPermission.
"
      end
    end

    class 257538 "Permission"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class for representing access to a system resource.
All permissions have a name (whose interpretation depends on the subclass),
as well as abstract functions for defining the semantics of the
particular Permission subclass.

<p>Most Permission objects also include an \"actions\" list that tells the actions
that are permitted for the object.  For example,
for a {@code java.io.FilePermission} object, the permission name is
the pathname of a file (or directory), and the actions list
(such as \"read, write\") specifies which actions are granted for the
specified file (or for files in the specified directory).
The actions list is optional for Permission objects, such as
{@code java.lang.RuntimePermission},
that don't need such a list; you either have the named permission (such
as \"system.exit\") or you don't.

<p>An important method that must be implemented by each subclass is
the {@code implies} method to compare Permissions. Basically,
\"permission p1 implies permission p2\" means that
if one is granted permission p1, one is naturally granted permission p2.
Thus, this is not an equality test, but rather more of a
subset test.

<P> Permission objects are similar to String objects in that they
are immutable once they have been created. Subclasses should not
provide methods that can change the state of a permission
once it has been created.

@see Permissions
@see PermissionCollection


@author Marianne Mueller
@author Roland Schemers
"
      classrelation 369410 // <realization>
	relation 369410 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 369410 // <realization>
	  b parent class_ref 257666 // Guard
      end

      classrelation 369538 // <realization>
	relation 369538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 369538 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 310786 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5636570222231596674L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 369666 // name (<unidirectional association>)
	relation 369666 --->
	  a role_name "name" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 369666 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 1301890 "Permission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a permission with the specified name.

@param name name of the Permission object being created.

"
      end

      operation 1302018 "checkGuard"
	public explicit_return_type "void"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements the guard interface for a permission. The
{@code SecurityManager.checkPermission} method is called,
passing this permission object as the permission to check.
Returns silently if access is granted. Otherwise, throws
a SecurityException.

@param object the object being guarded (currently ignored).

@throws SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow access.

@see Guard
@see GuardedObject
@see SecurityManager#checkPermission

"
      end

      operation 1302146 "implies"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified permission's actions are \"implied by\"
this object's actions.
<P>
This must be implemented by subclasses of Permission, as they are the
only ones that can impose semantics on a Permission object.

<p>The {@code implies} method is used by the AccessController to determine
whether or not a requested permission is implied by another permission that
is known to be valid in the current execution context.

@param permission the permission to check against.

@return true if the specified permission is implied by this object,
false if not.
"
      end

      operation 1302274 "equals"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two Permission objects for equality.
<P>
Do not use the {@code equals} method for making access control
decisions; use the {@code implies} method.

@param obj the object we are testing for equality with this object.

@return true if both Permission objects are equivalent.
"
      end

      operation 1302402 "hashCode"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this Permission object.
<P>
The required {@code hashCode} behavior for Permission Objects is
the following:
<ul>
<li>Whenever it is invoked on the same Permission object more than
    once during an execution of a Java application, the
    {@code hashCode} method
    must consistently return the same integer. This integer need not
    remain consistent from one execution of an application to another
    execution of the same application.
<li>If two Permission objects are equal according to the
    {@code equals}
    method, then calling the {@code hashCode} method on each of the
    two Permission objects must produce the same integer result.
</ul>

@return a hash code value for this object.
"
      end

      operation 1302530 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this Permission.
For example, in the case of a {@code java.io.FilePermission},
the name will be a pathname.

@return the name of this Permission.

"
      end

      operation 1302658 "getActions"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actions as a String. This is abstract
so subclasses can defer creating a String representation until
one is needed. Subclasses should always return actions in what they
consider to be their
canonical form. For example, two FilePermission objects created via
the following:

<pre>
  perm1 = new FilePermission(p1,\"read,write\");
  perm2 = new FilePermission(p2,\"write,read\");
</pre>

both return
\"read,write\" when the {@code getActions} method is invoked.

@return the actions of this Permission.

"
      end

      operation 1302786 "newPermissionCollection"
	public return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an empty PermissionCollection for a given Permission object, or null if
one is not defined. Subclasses of class Permission should
override this if they need to store their permissions in a particular
PermissionCollection object in order to provide the correct semantics
when the {@code PermissionCollection.implies} method is called.
If null is returned,
then the caller of this method is free to store permissions of this
type in any PermissionCollection they choose (one that uses a Hashtable,
one that uses a Vector, etc).

@return a new PermissionCollection object for this type of Permission, or
null if one is not defined.
"
      end

      operation 1302914 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this Permission.  The convention is to
specify the class name, the permission name, and the actions in
the following format: '(\"ClassName\" \"name\" \"actions\")', or
'(\"ClassName\" \"name\")' if actions list is null or empty.

@return information about this Permission.
"
      end
    end

    class 257666 "Guard"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p> This interface represents a guard, which is an object that is used
to protect access to another object.

<p>This interface contains a single method, {@code checkGuard},
with a single {@code object} argument. {@code checkGuard} is
invoked (by the GuardedObject {@code getObject} method)
to determine whether or not to allow access to the object.

@see GuardedObject

@author Roland Schemers
@author Li Gong
"
      operation 1301762 "checkGuard"
	public explicit_return_type "void"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not to allow access to the guarded object
{@code object}. Returns silently if access is allowed.
Otherwise, throws a SecurityException.

@param object the object being protected by the guard.

@exception SecurityException if access is denied.

"
      end
    end

    class 257794 "PermissionCollection"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class representing a collection of Permission objects.

<p>With a PermissionCollection, you can:
<UL>
<LI> add a permission to the collection using the {@code add} method.
<LI> check to see if a particular permission is implied in the
     collection, using the {@code implies} method.
<LI> enumerate all the permissions, using the {@code elements} method.
</UL>

<p>When it is desirable to group together a number of Permission objects
of the same type, the {@code newPermissionCollection} method on that
particular type of Permission object should first be called. The default
behavior (from the Permission class) is to simply return null.
Subclasses of class Permission override the method if they need to store
their permissions in a particular PermissionCollection object in order
to provide the correct semantics when the
{@code PermissionCollection.implies} method is called.
If a non-null value is returned, that PermissionCollection must be used.
If null is returned, then the caller of {@code newPermissionCollection}
is free to store permissions of the
given type in any PermissionCollection they choose
(one that uses a Hashtable, one that uses a Vector, etc).

<p>The PermissionCollection returned by the
{@code Permission.newPermissionCollection}
method is a homogeneous collection, which stores only Permission objects
for a given Permission type.  A PermissionCollection may also be
heterogeneous.  For example, Permissions is a PermissionCollection
subclass that represents a collection of PermissionCollections.
That is, its members are each a homogeneous PermissionCollection.
For example, a Permissions object might have a FilePermissionCollection
for all the FilePermission objects, a SocketPermissionCollection for all the
SocketPermission objects, and so on. Its {@code add} method adds a
permission to the appropriate collection.

<p>Whenever a permission is added to a heterogeneous PermissionCollection
such as Permissions, and the PermissionCollection doesn't yet contain a
PermissionCollection of the specified permission's type, the
PermissionCollection should call
the {@code newPermissionCollection} method on the permission's class
to see if it requires a special PermissionCollection. If
{@code newPermissionCollection}
returns null, the PermissionCollection
is free to store the permission in any type of PermissionCollection it
desires (one using a Hashtable, one using a Vector, etc.). For example,
the Permissions object uses a default PermissionCollection implementation
that stores the permission objects in a Hashtable.

<p> Subclass implementations of PermissionCollection should assume
that they may be called simultaneously from multiple threads,
and therefore should be synchronized properly.  Furthermore,
Enumerations returned via the {@code elements} method are
not <em>fail-fast</em>.  Modifications to a collection should not be
performed while enumerating over that collection.

@see Permission
@see Permissions


@author Roland Schemers
"
      classrelation 370178 // <realization>
	relation 370178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 370178 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 311298 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6727011328946861783L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 311426 "readOnly"
	volatile private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " when set, add will throw an exception.
"
      end

      operation 1304322 "add"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission object to the current collection of permission objects.

@param permission the Permission object to add.

@exception SecurityException -  if this PermissionCollection object
                                has been marked readonly
@exception IllegalArgumentException - if this PermissionCollection
               object is a homogeneous collection and the permission
               is not of the correct type.
"
      end

      operation 1304450 "implies"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to see if the specified permission is implied by
the collection of Permission objects held in this PermissionCollection.

@param permission the Permission object to compare.

@return true if \"permission\" is implied by the  permissions in
the collection, false if not.
"
      end

      operation 1304578 "elements"
	abstract public return_type class_ref 185986 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the Permission objects in the collection.

@return an enumeration of all the Permissions.
"
      end

      operation 1304706 "setReadOnly"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks this PermissionCollection object as \"readonly\". After
a PermissionCollection object
is marked as readonly, no new Permission objects can be added to it
using {@code add}.
"
      end

      operation 1304834 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this PermissionCollection object is marked as readonly.
If it is readonly, no new Permission objects can be added to it
using {@code add}.

<p>By default, the object is <i>not</i> readonly. It can be set to
readonly by a call to {@code setReadOnly}.

@return true if this PermissionCollection object is marked as readonly,
false otherwise.
"
      end

      operation 1304962 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this PermissionCollection object,
providing information about all the permissions it contains.
The format is:
<pre>
super.toString() (
  // enumerate all the Permission
  // objects and call toString() on them,
  // one per line..
)</pre>

{@code super.toString} is a call to the {@code toString}
method of this
object's superclass, which is Object. The result is
this PermissionCollection's type name followed by this object's
hashcode, thus enabling clients to differentiate different
PermissionCollections object, even if they contain the same permissions.

@return information about this PermissionCollection object,
        as described above.

"
      end
    end

    class 257922 "BasicPermissionCollection"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A BasicPermissionCollection stores a collection
of BasicPermission permissions. BasicPermission objects
must be stored in a manner that allows them to be inserted in any
order, but enable the implies function to evaluate the implies
method in an efficient (and consistent) manner.

A BasicPermissionCollection handles comparing a permission like \"a.b.c.d.e\"
with a Permission such as \"a.b.*\", or \"*\".

@see java.security.Permission
@see java.security.Permissions


@author Roland Schemers

@serial include
"
      classrelation 370306 // <generalisation>
	relation 370306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 370306 // <generalisation>
	  b parent class_ref 257794 // PermissionCollection
      end

      classrelation 370434 // <realization>
	relation 370434 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 370434 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 311554 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 739301742472979399L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 370562 // perms (<unidirectional association>)
	relation 370562 --->
	  a role_name "perms" private
	    comment "
Key is name, value is permission. All permission objects in
collection must be of the same type.
Not serialized; see serialization section at end of class.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Permission> ${name}${value};
"
	    classrelation_ref 370562 // perms (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 311682 "all_allowed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is set to {@code true} if this BasicPermissionCollection
contains a BasicPermission with '*' as its permission name.

@see #serialPersistentFields

"
      end

      classrelation 370690 // permClass (<unidirectional association>)
	relation 370690 --->
	  a role_name "permClass" private
	    comment "
The class to which all BasicPermissions in this
BasicPermissionCollection belongs.

@see #serialPersistentFields

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 370690 // permClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 1305090 "BasicPermissionCollection"
	public explicit_return_type ""
	nparams 1
	  param inout name "clazz" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an empty BasicPermissionCollection object.

"
      end

      operation 1305218 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission to the BasicPermissions. The key for the hash is
permission.path.

@param permission the Permission object to add.

@exception IllegalArgumentException - if the permission is not a
                                      BasicPermission, or if
                                      the permission is not of the
                                      same Class as the other
                                      permissions in this collection.

@exception SecurityException - if this BasicPermissionCollection object
                               has been marked readonly
"
      end

      operation 1305346 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and see if this set of permissions implies the permissions
expressed in \"permission\".

@param permission the Permission object to compare

@return true if \"permission\" is a proper subset of a permission in
the set, false if not.
"
      end

      operation 1305474 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the BasicPermission objects in the
container.

@return an enumeration of all the BasicPermission objects.
"
      end

      classrelation 370818 // serialPersistentFields (<unidirectional association>)
	relation 370818 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"permissions\", Hashtable.class),
        new ObjectStreamField(\"all_allowed\", Boolean.TYPE),
        new ObjectStreamField(\"permClass\", Class.class),
    }" class_relation const_relation private
	    comment " Need to maintain serialization interoperability with earlier releases,
 which had the serializable field:

 @serial the Hashtable is indexed by the BasicPermission name

 private Hashtable permissions;

@serialField permissions java.util.Hashtable
   The BasicPermissions in this BasicPermissionCollection.
   All BasicPermissions in the collection must belong to the same class.
   The Hashtable is indexed by the BasicPermission name; the value
   of the Hashtable entry is the permission.
@serialField all_allowed boolean
  This is set to {@code true} if this BasicPermissionCollection
  contains a BasicPermission with '*' as its permission name.
@serialField permClass java.lang.Class
  The class to which all BasicPermissions in this
  BasicPermissionCollection belongs.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 370818 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 1305602 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData Default fields.


Writes the contents of the perms field out as a Hashtable for
serialization compatibility with earlier releases. all_allowed
and permClass unchanged.
"
      end

      operation 1305730 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the
BasicPermissionCollection from a stream.
"
      end
    end

    class 319618 "ProtectionDomain"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
<p>
This ProtectionDomain class encapsulates the characteristics of a domain,
which encloses a set of classes whose instances are granted a set
of permissions when being executed on behalf of a given set of Principals.
<p>
A static set of permissions can be bound to a ProtectionDomain when it is
constructed; such permissions are granted to the domain regardless of the
Policy in force. However, to support dynamic security policies, a
ProtectionDomain can also be constructed such that it is dynamically
mapped to a set of permissions by the current Policy whenever a permission
is checked.
<p>

@author Li Gong
@author Roland Schemers
@author Gary Ellison
"
      class 1022082 "Key"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 1022722 "JavaSecurityAccessImpl"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7986178 "JavaSecurityAccessImpl"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7986306 "doIntersectionPrivilege"
	  public explicit_return_type "T"
	  nparams 3
	    param inout name "action" type class_ref 250114 // PrivilegedAction
	    param in name "stack" type class_ref 129154 // AccessControlContext
	    param in name "context" type class_ref 129154 // AccessControlContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7986434 "doIntersectionPrivilege"
	  public explicit_return_type "T"
	  nparams 2
	    param inout name "action" type class_ref 250114 // PrivilegedAction
	    param inout name "context" type class_ref 129154 // AccessControlContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7986562 "getCombinedACC"
	  class_operation private return_type class_ref 129154 // AccessControlContext
	  nparams 2
	    param inout name "context" type class_ref 129154 // AccessControlContext
	    param inout name "stack" type class_ref 129154 // AccessControlContext
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      extra_member 167298 "initialization"
	
	cpp "" ""
	java "  static {
        // Set up JavaSecurityAccess in SharedSecrets
        SharedSecrets.setJavaSecurityAccess(new JavaSecurityAccessImpl());
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3359618 // codesource (<unidirectional association>)
	relation 3359618 --->
	  a role_name "codesource" private
	    comment " CodeSource 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3359618 // codesource (<unidirectional association>)
	  b parent class_ref 319874 // CodeSource
      end

      classrelation 3359746 // classloader (<unidirectional association>)
	relation 3359746 --->
	  a role_name "classloader" private
	    comment " ClassLoader the protection domain was consed from 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3359746 // classloader (<unidirectional association>)
	  b parent class_ref 129026 // ClassLoader
      end

      classrelation 3359874 // principals (<unidirectional association>)
	relation 3359874 --->
	  a role_name "principals" multiplicity "[]" private
	    comment " Principals running-as within this protection domain 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3359874 // principals (<unidirectional association>)
	  b parent class_ref 510594 // Principal
      end

      classrelation 3360002 // permissions (<unidirectional association>)
	relation 3360002 --->
	  a role_name "permissions" private
	    comment " the rights this protection domain is granted 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3360002 // permissions (<unidirectional association>)
	  b parent class_ref 257794 // PermissionCollection
      end

      attribute 1852674 "hasAllPerm"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " if the permissions object has AllPermission 
"
      end

      attribute 1852802 "staticPermissions"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the PermissionCollection is static (pre 1.4 constructor)
or dynamic (via a policy refresh) 
"
      end

      classrelation 3360130 // key (<unidirectional association>)
	relation 3360130 --->
	  a role_name "key" init_value " new Key()" const_relation package
	    comment "
An object used as a key when the ProtectionDomain is stored in a Map.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3360130 // key (<unidirectional association>)
	  b parent class_ref 1022082 // Key
      end

      attribute 1852930 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value " Debug.getInstance(\"domain\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7986690 "ProtectionDomain"
	public explicit_return_type ""
	nparams 2
	  param inout name "codesource" type class_ref 319874 // CodeSource
	  param inout name "permissions" type class_ref 257794 // PermissionCollection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ProtectionDomain with the given CodeSource and
Permissions. If the permissions object is not null, then
 {@code setReadOnly())} will be called on the passed in
Permissions object. The only permissions granted to this domain
are the ones specified; the current Policy will not be consulted.

@param codesource the codesource associated with this domain
@param permissions the permissions granted to this domain
"
      end

      operation 7986818 "ProtectionDomain"
	public explicit_return_type ""
	nparams 4
	  param inout name "codesource" type class_ref 319874 // CodeSource
	  param inout name "permissions" type class_ref 257794 // PermissionCollection
	  param inout name "classloader" type class_ref 129026 // ClassLoader
	  param inout name "principals" type class_ref 510594 // Principal
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ProtectionDomain qualified by the given CodeSource,
Permissions, ClassLoader and array of Principals. If the
permissions object is not null, then {@code setReadOnly()}
will be called on the passed in Permissions object.
The permissions granted to this domain are dynamic; they include
both the static permissions passed to this constructor, and any
permissions granted to this domain by the current Policy at the
time a permission is checked.
<p>
This constructor is typically used by
{@link SecureClassLoader ClassLoaders}
and {@link DomainCombiner DomainCombiners} which delegate to
{@code Policy} to actively associate the permissions granted to
this domain. This constructor affords the
Policy provider the opportunity to augment the supplied
PermissionCollection to reflect policy changes.
<p>

@param codesource the CodeSource associated with this domain
@param permissions the permissions granted to this domain
@param classloader the ClassLoader associated with this domain
@param principals the array of Principals associated with this
domain. The contents of the array are copied to protect against
subsequent modification.
@see Policy#refresh
@see Policy#getPermissions(ProtectionDomain)
@since 1.4
"
      end

      operation 7986946 "getCodeSource"
	public return_type class_ref 319874 // CodeSource
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the CodeSource of this domain.
@return the CodeSource of this domain which may be null.
@since 1.2
"
      end

      operation 7987074 "getClassLoader"
	public return_type class_ref 129026 // ClassLoader
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ClassLoader of this domain.
@return the ClassLoader of this domain which may be null.

@since 1.4
"
      end

      operation 7987202 "getPrincipals"
	public return_type class_ref 510594 // Principal
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of principals for this domain.
@return a non-null array of principals for this domain.
Returns a new array each time this method is called.

@since 1.4
"
      end

      operation 7987330 "getPermissions"
	public return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the static permissions granted to this domain.

@return the static set of permissions for this domain which may be null.
@see Policy#refresh
@see Policy#getPermissions(ProtectionDomain)
"
      end

      operation 7987458 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and see if this ProtectionDomain implies the permissions
expressed in the Permission object.
<p>
The set of permissions evaluated is a function of whether the
ProtectionDomain was constructed with a static set of permissions
or it was bound to a dynamically mapped set of permissions.
<p>
If the ProtectionDomain was constructed to a
{@link #ProtectionDomain(CodeSource, PermissionCollection)
statically bound} PermissionCollection then the permission will
only be checked against the PermissionCollection supplied at
construction.
<p>
However, if the ProtectionDomain was constructed with
the constructor variant which supports
{@link #ProtectionDomain(CodeSource, PermissionCollection,
ClassLoader, java.security.Principal[]) dynamically binding}
permissions, then the permission will be checked against the
combination of the PermissionCollection supplied at construction and
the current Policy binding.
<p>

@param permission the Permission object to check.

@return true if \"permission\" is implicit to this ProtectionDomain.
"
      end

      operation 7987586 "impliesCreateAccessControlContext"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " called by the VM -- do not remove"
      end

      operation 7987714 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Convert a ProtectionDomain to a String.
"
      end

      operation 7987842 "seeAllp"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true (merge policy permissions) in the following cases:

. SecurityManager is null

. SecurityManager is not null,
         debug is not null,
         SecurityManager impelmentation is in bootclasspath,
         Policy implementation is in bootclasspath
         (the bootclasspath restrictions avoid recursion)

. SecurityManager is not null,
         debug is null,
         caller has Policy.getPolicy permission
"
      end

      operation 7987970 "mergePermissions"
	private return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 167426 "initialization"
	
	cpp "" ""
	java "  static {
        SharedSecrets.setJavaSecurityProtectionDomainAccess(
            new JavaSecurityProtectionDomainAccess() {
                @Override
                public ProtectionDomainCache getProtectionDomainCache() {
                    return new PDCache();
                }

                @Override
                public boolean getStaticPermissionsField(ProtectionDomain pd) {
                    return pd.staticPermissions;
                }
            });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 1022978 "PDCache"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3360386 // pdMap (<unidirectional association>)
	  relation 3360386 --->
	    a role_name "pdMap" init_value " new ConcurrentHashMap<>()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakProtectionDomainKey,
                                        SoftReference<PermissionCollection>> ${name}${value};
"
	      classrelation_ref 3360386 // pdMap (<unidirectional association>)
	    b parent class_ref 319362 // ConcurrentHashMap
	end

	classrelation 3360514 // queue (<unidirectional association>)
	  relation 3360514 --->
	    a role_name "queue" init_value " new ReferenceQueue<>()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Key> ${name}${value};
"
	      classrelation_ref 3360514 // queue (<unidirectional association>)
	    b parent class_ref 130946 // ReferenceQueue
	end

	operation 7988098 "put"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "pd" type class_ref 319618 // ProtectionDomain
	    param inout name "pc" type class_ref 257794 // PermissionCollection
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7988226 "get"
	  public return_type class_ref 257794 // PermissionCollection
	  nparams 1
	    param inout name "pd" type class_ref 319618 // ProtectionDomain
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7988354 "processQueue"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "queue" type class_ref 130946 // ReferenceQueue
	    param inout name "pdMap" type class_ref 319362 // ConcurrentHashMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Key> ${p0}, ${t1}<? extends
                                         WeakReference<Key>, ?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes weak keys from the map that have been enqueued
on the reference queue and are no longer in use.
"
	end
      end

      class 1023234 "WeakProtectionDomainKey"
	visibility private 
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3360642 // <realization>
	  relation 3360642 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3360642 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	attribute 1853058 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Saved value of the referent's identity hash code, to maintain
a consistent hash code after the referent has been cleared

"
	end

	classrelation 3360770 // NULL_KEY (<unidirectional association>)
	  relation 3360770 --->
	    a role_name "NULL_KEY" init_value " new Key()" class_relation const_relation private
	      comment "
A key representing a null ProtectionDomain.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3360770 // NULL_KEY (<unidirectional association>)
	    b parent class_ref 1022082 // Key
	end

	operation 7988482 "WeakProtectionDomainKey"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "pd" type class_ref 319618 // ProtectionDomain
	    param inout name "rq" type class_ref 130946 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Key> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a new WeakProtectionDomain with the specified domain and
registered with a queue.
"
	end

	operation 7988610 "WeakProtectionDomainKey"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "pd" type class_ref 319618 // ProtectionDomain
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7988738 "WeakProtectionDomainKey"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "key" type class_ref 1022082 // Key
	    param inout name "rq" type class_ref 130946 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Key> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7988866 "WeakProtectionDomainKey"
	  private explicit_return_type ""
	  nparams 1
	    param inout name "key" type class_ref 1022082 // Key
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7988994 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Returns the identity hash code of the original referent.
"
	end

	operation 7989122 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Returns true if the given object is an identical
WeakProtectionDomainKey instance, or, if this object's referent
has not been cleared and the given object is another
WeakProtectionDomainKey instance with an identical non-null
referent as this one.
"
	end
      end
    end

    class 319874 "CodeSource"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
<p>This class extends the concept of a codebase to
encapsulate not only the location (URL) but also the certificate chains
that were used to verify signed code originating from that location.

@author Li Gong
@author Roland Schemers
"
      classrelation 3343362 // <realization>
	relation 3343362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3343362 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1844482 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4977541819976013951L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3343490 // location (<unidirectional association>)
	relation 3343490 --->
	  a role_name "location" private
	    comment "
The code location.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3343490 // location (<unidirectional association>)
	  b parent class_ref 243458 // URL
      end

      classrelation 3343618 // signers (<unidirectional association>)
	relation 3343618 --->
	  a role_name "signers" multiplicity "[]" init_value " null" private
	    comment "
The code signers.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3343618 // signers (<unidirectional association>)
	  b parent class_ref 1015554 // CodeSigner
      end

      classrelation 3343746 // certs (<unidirectional association>)
	relation 3343746 --->
	  a role_name "certs" multiplicity "[]" init_value " null" private
	    comment "
The code signers. Certificate chains are concatenated.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3343746 // certs (<unidirectional association>)
	  b parent class_ref 319490 // Certificate
      end

      classrelation 3343874 // sp (<unidirectional association>)
	relation 3343874 --->
	  a role_name "sp" private
	    comment " cached SocketPermission used for matchLocation
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3343874 // sp (<unidirectional association>)
	  b parent class_ref 970882 // SocketPermission
      end

      classrelation 3344002 // factory (<unidirectional association>)
	relation 3344002 --->
	  a role_name "factory" init_value " null" private
	    comment " for generating cert paths
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3344002 // factory (<unidirectional association>)
	  b parent class_ref 1015810 // CertificateFactory
      end

      operation 7941378 "CodeSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "url" type class_ref 243458 // URL
	  param inout name "certs" type class_ref 319490 // Certificate
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CodeSource and associates it with the specified
location and set of certificates.

@param url the location (URL).

@param certs the certificate(s). It may be null. The contents of the
array are copied to protect against subsequent modification.
"
      end

      operation 7941506 "CodeSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "url" type class_ref 243458 // URL
	  param inout name "signers" type class_ref 1015554 // CodeSigner
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CodeSource and associates it with the specified
location and set of code signers.

@param url the location (URL).
@param signers the code signers. It may be null. The contents of the
array are copied to protect against subsequent modification.

@since 1.5
"
      end

      operation 7941634 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hash code value for this object.

@return a hash code value for this object.
"
      end

      operation 7941762 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Tests for equality between the specified object and this
object. Two CodeSource objects are considered equal if their
locations are of identical value and if their signer certificate
chains are of identical value. It is not required that
the certificate chains be in the same order.

@param obj the object to test for equality with this object.

@return true if the objects are considered equal, false otherwise.
"
      end

      operation 7941890 "getLocation"
	public return_type class_ref 243458 // URL
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the location associated with this CodeSource.

@return the location (URL).
"
      end

      operation 7942018 "getCertificates"
	public return_type class_ref 319490 // Certificate
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificates associated with this CodeSource.
<p>
If this CodeSource object was created using the
{@link #CodeSource(URL url, CodeSigner[] signers)}
constructor then its certificate chains are extracted and used to
create an array of Certificate objects. Each signer certificate is
followed by its supporting certificate chain (which may be empty).
Each signer certificate and its supporting certificate chain is ordered
bottom-to-top (i.e., with the signer certificate first and the (root)
certificate authority last).

@return A copy of the certificates array, or null if there is none.
"
      end

      operation 7942146 "getCodeSigners"
	public return_type class_ref 1015554 // CodeSigner
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the code signers associated with this CodeSource.
<p>
If this CodeSource object was created using the
{@link #CodeSource(URL url, java.security.cert.Certificate[] certs)}
constructor then its certificate chains are extracted and used to
create an array of CodeSigner objects. Note that only X.509 certificates
are examined - all other certificate types are ignored.

@return A copy of the code signer array, or null if there is none.

@since 1.5
"
      end

      operation 7942274 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "codesource" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this CodeSource object \"implies\" the specified CodeSource.
<p>
More specifically, this method makes the following checks.
If any fail, it returns false. If they all succeed, it returns true.
<ul>
<li> <i>codesource</i> must not be null.
<li> If this object's certificates are not null, then all
of this object's certificates must be present in <i>codesource</i>'s
certificates.
<li> If this object's location (getLocation()) is not null, then the
following checks are made against this object's location and
<i>codesource</i>'s:
  <ul>
    <li>  <i>codesource</i>'s location must not be null.

    <li>  If this object's location
          equals <i>codesource</i>'s location, then return true.

    <li>  This object's protocol (getLocation().getProtocol()) must be
          equal to <i>codesource</i>'s protocol, ignoring case.

    <li>  If this object's host (getLocation().getHost()) is not null,
          then the SocketPermission
          constructed with this object's host must imply the
          SocketPermission constructed with <i>codesource</i>'s host.

    <li>  If this object's port (getLocation().getPort()) is not
          equal to -1 (that is, if a port is specified), it must equal
          <i>codesource</i>'s port or default port
          (codesource.getLocation().getDefaultPort()).

    <li>  If this object's file (getLocation().getFile()) doesn't equal
          <i>codesource</i>'s file, then the following checks are made:
          If this object's file ends with \"/-\",
          then <i>codesource</i>'s file must start with this object's
          file (exclusive the trailing \"-\").
          If this object's file ends with a \"/*\",
          then <i>codesource</i>'s file must start with this object's
          file and must not have any further \"/\" separators.
          If this object's file doesn't end with a \"/\",
          then <i>codesource</i>'s file must match this object's
          file with a '/' appended.

    <li>  If this object's reference (getLocation().getRef()) is
          not null, it must equal <i>codesource</i>'s reference.

  </ul>
</ul>
<p>
For example, the codesource objects with the following locations
and null certificates all imply
the codesource with the location \"http://java.sun.com/classes/foo.jar\"
and null certificates:
<pre>
    http:
    http://*.sun.com/classes/*
    http://java.sun.com/classes/-
    http://java.sun.com/classes/foo.jar
</pre>

Note that if this CodeSource has a null location and a null
certificate chain, then it implies every other CodeSource.

@param codesource CodeSource to compare against.

@return true if the specified codesource is implied by this codesource,
false if not.
"
      end

      operation 7942402 "matchCerts"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "that" type class_ref 319874 // CodeSource
	  param inout name "strict" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if all the certs in this
CodeSource are also in <i>that</i>.

@param that the CodeSource to check against.
@param strict If true then a strict equality match is performed.
              Otherwise a subset match is performed.
"
      end

      operation 7942530 "matchLocation"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if two CodeSource's have the \"same\" location.

@param that CodeSource to compare against
"
      end

      operation 7942658 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string describing this CodeSource, telling its
URL and certificates.

@return information about this CodeSource.
"
      end

      operation 7942786 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "oos" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes this object out to a stream (i.e., serializes it).

@serialData An initial {@code URL} is followed by an
{@code int} indicating the number of certificates to follow
(a value of \"zero\" denotes that there are no certificates associated
with this object).
Each certificate is written out starting with a {@code String}
denoting the certificate type, followed by an
{@code int} specifying the length of the certificate encoding,
followed by the certificate encoding itself which is written out as an
array of bytes. Finally, if any code signers are present then the array
of code signers is serialized and written out too.
"
      end

      operation 7942914 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restores this object from a stream (i.e., deserializes it).
"
      end

      operation 7943042 "convertCertArrayToSignerArray"
	private return_type class_ref 1015554 // CodeSigner
	nparams 1
	  param inout name "certs" type class_ref 319490 // Certificate
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert an array of certificates to an array of code signers.
The array of certificates is a concatenation of certificate chains
where the initial certificate in each chain is the end-entity cert.

@return An array of code signers or null if none are generated.
"
      end
    end

    class 320514 "PrivilegedExceptionAction"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A computation to be performed with privileges enabled, that throws one or
more checked exceptions.  The computation is performed by invoking
{@code AccessController.doPrivileged} on the
{@code PrivilegedExceptionAction} object.  This interface is
used only for computations that throw checked exceptions;
computations that do not throw
checked exceptions should use {@code PrivilegedAction} instead.

@see AccessController
@see AccessController#doPrivileged(PrivilegedExceptionAction)
@see AccessController#doPrivileged(PrivilegedExceptionAction,
                                             AccessControlContext)
@see PrivilegedAction
"
      operation 1730178 "run"
	cpp_inline public explicit_return_type "T"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the computation.  This method will be called by
{@code AccessController.doPrivileged} after enabling privileges.

@return a class-dependent value that may represent the results of the
        computation.  Each class that implements
        {@code PrivilegedExceptionAction} should document what
        (if anything) this value represents.
@throws Exception an exceptional condition has occurred.  Each class
        that implements {@code PrivilegedExceptionAction} should
        document the exceptions that its run method can throw.
@see AccessController#doPrivileged(PrivilegedExceptionAction)
@see AccessController#doPrivileged(PrivilegedExceptionAction,AccessControlContext)
"
      end
    end

    class 509314 "NoSuchAlgorithmException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when a particular cryptographic algorithm is
requested but is not available in the environment.

@author Benjamin Renaud
"
      classrelation 3355266 // <generalisation>
	relation 3355266 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3355266 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1851138 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7443947487218346562L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7976834 "NoSuchAlgorithmException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NoSuchAlgorithmException with no detail
message. A detail message is a String that describes this
particular exception.
"
      end

      operation 7976962 "NoSuchAlgorithmException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NoSuchAlgorithmException with the specified
detail message. A detail message is a String that describes
this particular exception, which may, for example, specify which
algorithm is not available.

@param msg the detail message.
"
      end

      operation 7977090 "NoSuchAlgorithmException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code NoSuchAlgorithmException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7977218 "NoSuchAlgorithmException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code NoSuchAlgorithmException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 509442 "NoSuchProviderException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown when a particular security provider is
requested but is not available in the environment.

@author Benjamin Renaud
"
      classrelation 3355394 // <generalisation>
	relation 3355394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3355394 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1851266 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8488111756688534474L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7977346 "NoSuchProviderException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NoSuchProviderException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 7977474 "NoSuchProviderException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a NoSuchProviderException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param msg the detail message.
"
      end
    end

    class 509570 "Provider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a \"provider\" for the
Java Security API, where a provider implements some or all parts of
Java Security. Services that a provider may implement include:

<ul>

<li>Algorithms (such as DSA, RSA, MD5 or SHA-1).

<li>Key generation, conversion, and management facilities (such as for
algorithm-specific keys).

</ul>

<p>Each provider has a name and a version number, and is configured
in each runtime it is installed in.

<p>See <a href =
\"../../../technotes/guides/security/crypto/CryptoSpec.html#Provider\">The Provider Class</a>
in the \"Java Cryptography Architecture API Specification &amp; Reference\"
for information about how a particular type of provider, the
cryptographic service provider, works and is installed. However,
please note that a provider can be used to implement any security
service in Java that uses a pluggable architecture with a choice
of implementations that fit underneath.

<p>Some provider implementations may encounter unrecoverable internal
errors during their operation, for example a failure to communicate with a
security token. A {@link ProviderException} should be used to indicate
such errors.

<p>The service type {@code Provider} is reserved for use by the
security framework. Services of this type cannot be added, removed,
or modified by applications.
The following attributes are automatically placed in each Provider object:
<table cellspacing=4>
<caption><b>Attributes Automatically Placed in a Provider Object</b></caption>
<tr><th>Name</th><th>Value</th>
<tr><td>{@code Provider.id name}</td>
   <td>{@code String.valueOf(provider.getName())}</td>
<tr><td>{@code Provider.id version}</td>
    <td>{@code String.valueOf(provider.getVersion())}</td>
<tr><td>{@code Provider.id info}</td>
<td>{@code String.valueOf(provider.getInfo())}</td>
<tr><td>{@code Provider.id className}</td>
    <td>{@code provider.getClass().getName()}</td>
</table>

@author Benjamin Renaud
@author Andreas Sterbenz
"
      classrelation 3338882 // <generalisation>
	relation 3338882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3338882 // <generalisation>
	  b parent class_ref 240130 // Properties
      end

      attribute 1842818 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -4298000515446427739L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Declare serialVersionUID to be compatible with JDK1.1
"
      end

      attribute 1842946 "debug"
	class_attribute const_attribute private explicit_type "sun.security.util.Debug"
	init_value "
        sun.security.util.Debug.getInstance
        (\"provider\", \"Provider\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3339010 // name (<unidirectional association>)
	relation 3339010 --->
	  a role_name "name" private
	    comment "
The provider name.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3339010 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3339138 // info (<unidirectional association>)
	relation 3339138 --->
	  a role_name "info" private
	    comment "
A description of the provider and its services.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3339138 // info (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1843074 "version"
	private explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The provider version number.

@serial

"
      end

      classrelation 3339266 // entrySet (<unidirectional association>)
	relation 3339266 --->
	  a role_name "entrySet" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<Object,Object>> ${name}${value};
"
	    classrelation_ref 3339266 // entrySet (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      attribute 1843202 "entrySetCallCount"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1843330 "initialized"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7927682 "Provider"
	protected explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param in name "version" explicit_type "double"
	  param inout name "info" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a provider with the specified name, version number,
and information.

@param name the provider name.

@param version the provider version number.

@param info a description of the provider and its services.
"
      end

      operation 7927810 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this provider.

@return the name of this provider.
"
      end

      operation 7927938 "getVersion"
	public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the version number for this provider.

@return the version number for this provider.
"
      end

      operation 7928066 "getInfo"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a human-readable description of the provider and its
services.  This may return an HTML page, with relevant links.

@return a description of the provider and its services.
"
      end

      operation 7928194 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string with the name and the version number
of this provider.

@return the string with the name and the version number
for this provider.
"
      end

      operation 7928322 "clear"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "override the following methods to ensure that provider
information can only be changed if the caller has the appropriate
permissions.


Clears this provider so that it no longer contains the properties
used to look up facilities implemented by the provider.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the string {@code \"clearProviderProperties.\"+name}
(where {@code name} is the provider name) to see if it's ok to clear
this provider.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to clear this provider

@since 1.2
"
      end

      operation 7928450 "load"
	public explicit_return_type "void"
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads a property list (key and element pairs) from the input stream.

@param inStream   the input stream.
@exception  IOException  if an error occurred when reading from the
              input stream.
@see java.util.Properties#load
"
      end

      operation 7928578 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 130178 // Map
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Copies all of the mappings from the specified Map to this provider.
These mappings will replace any properties that this provider had
for any of the keys currently in the specified Map.

@since 1.2
"
      end

      operation 7928706 "entrySet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<Object,Object>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an unmodifiable Set view of the property entries contained
in this Provider.

@see   java.util.Map.Entry
@since 1.2
"
      end

      operation 7928834 "keySet"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an unmodifiable Set view of the property keys contained in
this provider.

@since 1.2
"
      end

      operation 7928962 "values"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns an unmodifiable Collection view of the property values
contained in this provider.

@since 1.2
"
      end

      operation 7929090 "put"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets the {@code key} property to have the specified
{@code value}.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the string {@code \"putProviderProperty.\"+name},
where {@code name} is the provider name, to see if it's ok to set this
provider's property values.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values.

@since 1.2
"
      end

      operation 7929218 "putIfAbsent"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "If the specified key is not already associated with a value (or is mapped
to {@code null}) associates it with the given value and returns
{@code null}, else returns the current value.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the string {@code \"putProviderProperty.\"+name},
where {@code name} is the provider name, to see if it's ok to set this
provider's property values.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values.

@since 1.8
"
      end

      operation 7929346 "remove"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Removes the {@code key} property (and its corresponding
{@code value}).

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the string {@code \"removeProviderProperty.\"+name},
where {@code name} is the provider name, to see if it's ok to remove this
provider's properties.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to remove this provider's properties.

@since 1.2
"
      end

      operation 7929474 "remove"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Removes the entry for the specified key only if it is currently
mapped to the specified value.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the string {@code \"removeProviderProperty.\"+name},
where {@code name} is the provider name, to see if it's ok to remove this
provider's properties.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to remove this provider's properties.

@since 1.8
"
      end

      operation 7929602 "replace"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "oldValue" type class_ref 129538 // Object
	  param inout name "newValue" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Replaces the entry for the specified key only if currently
mapped to the specified value.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the string {@code \"putProviderProperty.\"+name},
where {@code name} is the provider name, to see if it's ok to set this
provider's property values.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values.

@since 1.8
"
      end

      operation 7929730 "replace"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Replaces the entry for the specified key only if it is
currently mapped to some value.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the string {@code \"putProviderProperty.\"+name},
where {@code name} is the provider name, to see if it's ok to set this
provider's property values.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values.

@since 1.8
"
      end

      operation 7929858 "replaceAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "function" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Object, ? super Object, ? extends Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Replaces each entry's value with the result of invoking the given
function on that entry, in the order entries are returned by an entry
set iterator, until all entries have been processed or the function
throws an exception.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the string {@code \"putProviderProperty.\"+name},
where {@code name} is the provider name, to see if it's ok to set this
provider's property values.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values.

@since 1.8
"
      end

      operation 7929986 "compute"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super Object, ? super Object, ? extends Object> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Attempts to compute a mapping for the specified key and its
current mapped value (or {@code null} if there is no current
mapping).

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the strings {@code \"putProviderProperty.\"+name}
and {@code \"removeProviderProperty.\"+name}, where {@code name} is the
provider name, to see if it's ok to set this provider's property values
and remove this provider's properties.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values or remove properties.

@since 1.8
"
      end

      operation 7930114 "computeIfAbsent"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "mappingFunction" type class_ref 192770 // Function
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super Object, ? extends Object> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "If the specified key is not already associated with a value (or
is mapped to {@code null}), attempts to compute its value using
the given mapping function and enters it into this map unless
{@code null}.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the strings {@code \"putProviderProperty.\"+name}
and {@code \"removeProviderProperty.\"+name}, where {@code name} is the
provider name, to see if it's ok to set this provider's property values
and remove this provider's properties.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values and remove properties.

@since 1.8
"
      end

      operation 7930242 "computeIfPresent"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super Object, ? super Object, ? extends Object> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "If the value for the specified key is present and non-null, attempts to
compute a new mapping given the key and its current mapped value.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the strings {@code \"putProviderProperty.\"+name}
and {@code \"removeProviderProperty.\"+name}, where {@code name} is the
provider name, to see if it's ok to set this provider's property values
and remove this provider's properties.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values or remove properties.

@since 1.8
"
      end

      operation 7930370 "merge"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? super Object, ? super Object, ? extends Object> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "If the specified key is not already associated with a value or is
associated with null, associates it with the given value. Otherwise,
replaces the value with the results of the given remapping function,
or removes if the result is null. This method may be of use when
combining multiple mapped values for a key.

<p>If a security manager is enabled, its {@code checkSecurityAccess}
method is called with the strings {@code \"putProviderProperty.\"+name}
and {@code \"removeProviderProperty.\"+name}, where {@code name} is the
provider name, to see if it's ok to set this provider's property values
and remove this provider's properties.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to set property values or remove properties.

@since 1.8
"
      end

      operation 7930498 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " let javadoc show doc from superclass"
      end

      operation 7930626 "getOrDefault"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "defaultValue" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@since 1.8
"
      end

      operation 7930754 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Object, ? super Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@since 1.8
"
      end

      operation 7930882 "keys"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " let javadoc show doc from superclass"
      end

      operation 7931010 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " let javadoc show doc from superclass"
      end

      operation 7931138 "getProperty"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " let javadoc show doc from superclass"
      end

      operation 7931266 "checkInitialized"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7931394 "check"
	private explicit_return_type "void"
	nparams 1
	  param inout name "directive" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1843458 "legacyChanged"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " legacy properties changed since last call to any services method?
"
      end

      attribute 1843586 "servicesChanged"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " serviceMap changed since last call to getServices()
"
      end

      classrelation 3339394 // legacyStrings (<unidirectional association>)
	relation 3339394 --->
	  a role_name "legacyStrings" private
	    comment " Map<String,String>
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,String> ${name}${value};
"
	    classrelation_ref 3339394 // legacyStrings (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      class 1014914 "ServiceKey"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3339906 // type (<unidirectional association>)
	  relation 3339906 --->
	    a role_name "type" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3339906 // type (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3340034 // algorithm (<unidirectional association>)
	  relation 3340034 --->
	    a role_name "algorithm" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3340034 // algorithm (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3340162 // originalAlgorithm (<unidirectional association>)
	  relation 3340162 --->
	    a role_name "originalAlgorithm" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3340162 // originalAlgorithm (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 7933570 "ServiceKey"
	  private explicit_return_type ""
	  nparams 3
	    param inout name "type" type class_ref 128130 // String
	    param inout name "algorithm" type class_ref 128130 // String
	    param inout name "intern" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7933698 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7933826 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7933954 "matches"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "type" type class_ref 128130 // String
	    param inout name "algorithm" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3339522 // serviceMap (<unidirectional association>)
	relation 3339522 --->
	  a role_name "serviceMap" private
	    comment " Map<ServiceKey,Service>
 used for services added via putService(), initialized on demand
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ServiceKey,Service> ${name}${value};
"
	    classrelation_ref 3339522 // serviceMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3339650 // legacyMap (<unidirectional association>)
	relation 3339650 --->
	  a role_name "legacyMap" private
	    comment " Map<ServiceKey,Service>
 used for services added via legacy methods, init on demand
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ServiceKey,Service> ${name}${value};
"
	    classrelation_ref 3339650 // legacyMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      class 1015042 "Service"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3341442 // type (<unidirectional association>)
	  relation 3341442 --->
	    a role_name "type" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3341442 // type (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3341570 // algorithm (<unidirectional association>)
	  relation 3341570 --->
	    a role_name "algorithm" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3341570 // algorithm (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3341698 // className (<unidirectional association>)
	  relation 3341698 --->
	    a role_name "className" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3341698 // className (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3341826 // provider (<unidirectional association>)
	  relation 3341826 --->
	    a role_name "provider" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3341826 // provider (<unidirectional association>)
	    b parent class_ref 509570 // Provider
	end

	classrelation 3341954 // aliases (<unidirectional association>)
	  relation 3341954 --->
	    a role_name "aliases" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	      classrelation_ref 3341954 // aliases (<unidirectional association>)
	    b parent class_ref 175362 // List
	end

	classrelation 3342082 // attributes (<unidirectional association>)
	  relation 3342082 --->
	    a role_name "attributes" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<UString,String> ${name}${value};
"
	      classrelation_ref 3342082 // attributes (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	classrelation 3342210 // classRef (<unidirectional association>)
	  relation 3342210 --->
	    a role_name "classRef" volatile private
	      comment " Reference to the cached implementation Class object
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 3342210 // classRef (<unidirectional association>)
	    b parent class_ref 131458 // Reference
	end

	classrelation 3342338 // hasKeyAttributes (<unidirectional association>)
	  relation 3342338 --->
	    a role_name "hasKeyAttributes" volatile private
	      comment " flag indicating whether this service has its attributes for
 supportedKeyFormats or supportedKeyClasses set
 if null, the values have not been initialized
 if TRUE, at least one of supportedFormats/Classes is non null
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3342338 // hasKeyAttributes (<unidirectional association>)
	    b parent class_ref 315010 // Boolean
	end

	classrelation 3342466 // supportedFormats (<unidirectional association>)
	  relation 3342466 --->
	    a role_name "supportedFormats" multiplicity "[]" private
	      comment " supported encoding formats
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3342466 // supportedFormats (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3342594 // supportedClasses (<unidirectional association>)
	  relation 3342594 --->
	    a role_name "supportedClasses" multiplicity "[]" private
	      comment " names of the supported key (super) classes
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3342594 // supportedClasses (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	attribute 1843970 "registered"
	  private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " whether this service has been registered with the Provider
"
	end

	classrelation 3342722 // CLASS0 (<unidirectional association>)
	  relation 3342722 --->
	    a role_name "CLASS0" multiplicity "[]" init_value " new Class<?>[0]" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	      classrelation_ref 3342722 // CLASS0 (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 7936514 "Service"
	  private explicit_return_type ""
	  nparams 1
	    param inout name "provider" type class_ref 509570 // Provider
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " this constructor and these methods are used for parsing
 the legacy string properties."
	end

	operation 7936642 "isValid"
	  private explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7936770 "addAlias"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "alias" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7936898 "addAttribute"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "type" type class_ref 128130 // String
	    param inout name "value" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7937026 "Service"
	  public explicit_return_type ""
	  nparams 6
	    param inout name "provider" type class_ref 509570 // Provider
	    param inout name "type" type class_ref 128130 // String
	    param inout name "algorithm" type class_ref 128130 // String
	    param inout name "className" type class_ref 128130 // String
	    param inout name "aliases" type class_ref 175362 // List
	    param inout name "attributes" type class_ref 130178 // Map
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<String> ${p4}, ${t5}<String,String> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new service.

@param provider the provider that offers this service
@param type the type of this service
@param algorithm the algorithm name
@param className the name of the class implementing this service
@param aliases List of aliases or null if algorithm has no aliases
@param attributes Map of attributes or null if this implementation
                  has no attributes

@throws NullPointerException if provider, type, algorithm, or
className is null
"
	end

	operation 7937154 "getType"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the type of this service. For example, {@code MessageDigest}.

@return the type of this service
"
	end

	operation 7937282 "getAlgorithm"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the name of the algorithm of this service. For example,
{@code SHA-1}.

@return the algorithm of this service
"
	end

	operation 7937410 "getProvider"
	  public return_type class_ref 509570 // Provider
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the Provider of this service.

@return the Provider of this service
"
	end

	operation 7937538 "getClassName"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the name of the class implementing this service.

@return the name of the class implementing this service
"
	end

	operation 7937666 "getAliases"
	  private return_type class_ref 175362 // List
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " internal only"
	end

	operation 7937794 "getAttribute"
	  public return_type class_ref 128130 // String
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return the value of the specified attribute or null if this
attribute is not set for this Service.

@param name the name of the requested attribute

@return the value of the specified attribute or null if the
        attribute is not present

@throws NullPointerException if name is null
"
	end

	operation 7937922 "newInstance"
	  public return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "constructorParameter" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 509314 // NoSuchAlgorithmException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return a new instance of the implementation described by this
service. The security provider framework uses this method to
construct implementations. Applications will typically not need
to call it.

<p>The default implementation uses reflection to invoke the
standard constructor for this type of service.
Security providers can override this method to implement
instantiation in a different way.
For details and the values of constructorParameter that are
valid for the various types of services see the
<a href=\"../../../technotes/guides/security/crypto/CryptoSpec.html\">
Java Cryptography Architecture API Specification &amp;
Reference</a>.

@param constructorParameter the value to pass to the constructor,
or null if this type of service does not use a constructorParameter.

@return a new implementation of this service

@throws InvalidParameterException if the value of
constructorParameter is invalid for this type of service.
@throws NoSuchAlgorithmException if instantiation failed for
any other reason.
"
	end

	operation 7938050 "getImplClass"
	  private return_type class_ref 130818 // Class
	  nparams 0
	  nexceptions 1
	    exception class_ref 509314 // NoSuchAlgorithmException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " return the implementation Class object for this service"
	end

	operation 7938178 "newInstanceGeneric"
	  private return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "constructorParameter" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 132226 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Generic code path for unknown engine types. Call the
no-args constructor if constructorParameter is null, otherwise
use the first matching constructor.
"
	end

	operation 7938306 "supportsParameter"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "parameter" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Test whether this Service can use the specified parameter.
Returns false if this service cannot use the parameter. Returns
true if this service can use the parameter, if a fast test is
infeasible, or if the status is unknown.

<p>The security provider framework uses this method with
some types of services to quickly exclude non-matching
implementations for consideration.
Applications will typically not need to call it.

<p>For details and the values of parameter that are valid for the
various types of services see the top of this class and the
<a href=\"../../../technotes/guides/security/crypto/CryptoSpec.html\">
Java Cryptography Architecture API Specification &amp;
Reference</a>.
Security providers can override it to implement their own test.

@param parameter the parameter to test

@return false if this this service cannot use the specified
parameter; true if it can possibly use the parameter

@throws InvalidParameterException if the value of parameter is
invalid for this type of service or if this method cannot be
used with this type of service
"
	end

	operation 7938434 "hasKeyAttributes"
	  private explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return whether this service has its Supported* properties for
keys defined. Parses the attributes if not yet initialized.
"
	end

	operation 7938562 "getKeyClass"
	  private return_type class_ref 130818 // Class
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " get the key class object of the specified name"
	end

	operation 7938690 "supportsKeyFormat"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" type class_ref 753026 // Key
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7938818 "supportsKeyClass"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" type class_ref 753026 // Key
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7938946 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return a String representation of this service.

@return a String representation of this service.
"
	end
      end

      classrelation 3339778 // serviceSet (<unidirectional association>)
	relation 3339778 --->
	  a role_name "serviceSet" private
	    comment " Set<Service>
 Unmodifiable set of all services. Initialized on demand.
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Service> ${name}${value};
"
	    classrelation_ref 3339778 // serviceSet (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 7931522 "putId"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " register the id attributes for this provider
 this is to ensure that equals() and hashCode() do not incorrectly
 report to different provider objects as the same"
      end

      operation 7931650 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7931778 "checkLegacy"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7931906 "implPutAll"
	private explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified Map to this provider.
Internal method to be called AFTER the security check has been
performed.
"
      end

      operation 7932034 "implRemove"
	private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7932162 "implRemove"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7932290 "implReplace"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "oldValue" type class_ref 129538 // Object
	  param inout name "newValue" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7932418 "implReplace"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7932546 "implReplaceAll"
	private explicit_return_type "void"
	nparams 1
	  param inout name "function" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Object, ? super Object, ? extends Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7932674 "implMerge"
	private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? super Object, ? super Object, ? extends Object> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7932802 "implCompute"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super Object, ? super Object, ? extends Object> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7932930 "implComputeIfAbsent"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "mappingFunction" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super Object, ? extends Object> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7933058 "implComputeIfPresent"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "remappingFunction" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? super Object, ? super Object, ? extends Object> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7933186 "implPut"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7933314 "implPutIfAbsent"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "key" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7933442 "implClear"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7934082 "ensureLegacyParsed"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure all the legacy String properties are fully parsed into
service objects.
"
      end

      operation 7934210 "removeInvalidServices"
	private explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<ServiceKey,Service> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all invalid services from the Map. Invalid services can only
occur if the legacy properties are inconsistent or incomplete.
"
      end

      operation 7934338 "getTypeAndAlgorithm"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3340290 // ALIAS_PREFIX (<unidirectional association>)
	relation 3340290 --->
	  a role_name "ALIAS_PREFIX" init_value " \"Alg.Alias.\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3340290 // ALIAS_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3340418 // ALIAS_PREFIX_LOWER (<unidirectional association>)
	relation 3340418 --->
	  a role_name "ALIAS_PREFIX_LOWER" init_value " \"alg.alias.\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3340418 // ALIAS_PREFIX_LOWER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1843714 "ALIAS_LENGTH"
	class_attribute const_attribute private explicit_type "int"
	init_value " ALIAS_PREFIX.length()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7934466 "parseLegacyPut"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7934594 "getService"
	public return_type class_ref 1015042 // Service
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the service describing this Provider's implementation of the
specified type of this algorithm or alias. If no such
implementation exists, this method returns null. If there are two
matching services, one added to this provider using
{@link #putService putService()} and one added via {@link #put put()},
the service added via {@link #putService putService()} is returned.

@param type the type of {@link Service service} requested
(for example, {@code MessageDigest})
@param algorithm the case insensitive algorithm name (or alternate
alias) of the service requested (for example, {@code SHA-1})

@return the service describing this Provider's matching service
or null if no such service exists

@throws NullPointerException if type or algorithm is null

@since 1.5
"
      end

      classrelation 3340546 // previousKey (<unidirectional association>)
	relation 3340546 --->
	  a role_name "previousKey" init_value "
                                            new ServiceKey(\"\", \"\", false)" class_relation volatile private
	    comment " ServiceKey from previous getService() call
 by re-using it if possible we avoid allocating a new object
 and the toUpperCase() call.
 re-use will occur e.g. as the framework traverses the provider
 list and queries each provider with the same values until it finds
 a matching service
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3340546 // previousKey (<unidirectional association>)
	  b parent class_ref 1014914 // ServiceKey
      end

      operation 7934722 "getServices"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Service> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an unmodifiable Set of all services supported by
this Provider.

@return an unmodifiable Set of all services supported by
this Provider

@since 1.5
"
      end

      operation 7934850 "putService"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 1015042 // Service
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a service. If a service of the same type with the same algorithm
name exists and it was added using {@link #putService putService()},
it is replaced by the new service.
This method also places information about this service
in the provider's Hashtable values in the format described in the
<a href=\"../../../technotes/guides/security/crypto/CryptoSpec.html\">
Java Cryptography Architecture API Specification &amp; Reference </a>.

<p>Also, if there is a security manager, its
{@code checkSecurityAccess} method is called with the string
{@code \"putProviderProperty.\"+name}, where {@code name} is
the provider name, to see if it's ok to set this provider's property
values. If the default implementation of {@code checkSecurityAccess}
is used (that is, that method is not overriden), then this results in
a call to the security manager's {@code checkPermission} method with
a {@code SecurityPermission(\"putProviderProperty.\"+name)}
permission.

@param s the Service to add

@throws SecurityException
     if a security manager exists and its {@link
     java.lang.SecurityManager#checkSecurityAccess} method denies
     access to set property values.
@throws NullPointerException if s is null

@since 1.5
"
      end

      operation 7934978 "putPropertyStrings"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 1015042 // Service
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put the string properties for this Service in this Provider's
Hashtable.
"
      end

      operation 7935106 "removePropertyStrings"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 1015042 // Service
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the string properties for this Service from this Provider's
Hashtable.
"
      end

      operation 7935234 "removeService"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 1015042 // Service
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a service previously added using
{@link #putService putService()}. The specified service is removed from
this provider. It will no longer be returned by
{@link #getService getService()} and its information will be removed
from this provider's Hashtable.

<p>Also, if there is a security manager, its
{@code checkSecurityAccess} method is called with the string
{@code \"removeProviderProperty.\"+name}, where {@code name} is
the provider name, to see if it's ok to remove this provider's
properties. If the default implementation of
{@code checkSecurityAccess} is used (that is, that method is not
overriden), then this results in a call to the security manager's
{@code checkPermission} method with a
{@code SecurityPermission(\"removeProviderProperty.\"+name)}
permission.

@param s the Service to be removed

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method denies
         access to remove this provider's properties.
@throws NullPointerException if s is null

@since 1.5
"
      end

      operation 7935362 "implRemoveService"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 1015042 // Service
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1015170 "UString"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3340674 // string (<unidirectional association>)
	  relation 3340674 --->
	    a role_name "string" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3340674 // string (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3340802 // lowerString (<unidirectional association>)
	  relation 3340802 --->
	    a role_name "lowerString" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3340802 // lowerString (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 7935490 "UString"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "s" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7935618 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7935746 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7935874 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1015298 "EngineDescription"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3340930 // name (<unidirectional association>)
	  relation 3340930 --->
	    a role_name "name" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3340930 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1843842 "supportsParameter"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3341058 // constructorParameterClassName (<unidirectional association>)
	  relation 3341058 --->
	    a role_name "constructorParameterClassName" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3341058 // constructorParameterClassName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3341186 // constructorParameterClass (<unidirectional association>)
	  relation 3341186 --->
	    a role_name "constructorParameterClass" volatile private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3341186 // constructorParameterClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 7936002 "EngineDescription"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "name" type class_ref 128130 // String
	    param inout name "sp" explicit_type "boolean"
	    param inout name "paramName" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7936130 "getConstructorParameterClass"
	  package return_type class_ref 130818 // Class
	  nparams 0
	  nexceptions 1
	    exception class_ref 169730 // ClassNotFoundException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3341314 // knownEngines (<unidirectional association>)
	relation 3341314 --->
	  a role_name "knownEngines" class_relation const_relation private
	    comment " built in knowledge of the engine types shipped as part of the JDK
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,EngineDescription> ${name}${value};
"
	    classrelation_ref 3341314 // knownEngines (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 7936258 "addEngine"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "sp" explicit_type "boolean"
	  param inout name "paramName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 167170 "initialization"
	
	cpp "" ""
	java "  static {
        knownEngines = new HashMap<String,EngineDescription>();
        // JCA
        addEngine(\"AlgorithmParameterGenerator\",        false, null);
        addEngine(\"AlgorithmParameters\",                false, null);
        addEngine(\"KeyFactory\",                         false, null);
        addEngine(\"KeyPairGenerator\",                   false, null);
        addEngine(\"KeyStore\",                           false, null);
        addEngine(\"MessageDigest\",                      false, null);
        addEngine(\"SecureRandom\",                       false, null);
        addEngine(\"Signature\",                          true,  null);
        addEngine(\"CertificateFactory\",                 false, null);
        addEngine(\"CertPathBuilder\",                    false, null);
        addEngine(\"CertPathValidator\",                  false, null);
        addEngine(\"CertStore\",                          false,
                            \"java.security.cert.CertStoreParameters\");
        // JCE
        addEngine(\"Cipher\",                             true,  null);
        addEngine(\"ExemptionMechanism\",                 false, null);
        addEngine(\"Mac\",                                true,  null);
        addEngine(\"KeyAgreement\",                       true,  null);
        addEngine(\"KeyGenerator\",                       false, null);
        addEngine(\"SecretKeyFactory\",                   false, null);
        // JSSE
        addEngine(\"KeyManagerFactory\",                  false, null);
        addEngine(\"SSLContext\",                         false, null);
        addEngine(\"TrustManagerFactory\",                false, null);
        // JGSS
        addEngine(\"GssApiMechanism\",                    false, null);
        // SASL
        addEngine(\"SaslClientFactory\",                  false, null);
        addEngine(\"SaslServerFactory\",                  false, null);
        // POLICY
        addEngine(\"Policy\",                             false,
                            \"java.security.Policy$Parameters\");
        // CONFIGURATION
        addEngine(\"Configuration\",                      false,
                            \"javax.security.auth.login.Configuration$Parameters\");
        // XML DSig
        addEngine(\"XMLSignatureFactory\",                false, null);
        addEngine(\"KeyInfoFactory\",                     false, null);
        addEngine(\"TransformService\",                   false, null);
        // Smart Card I/O
        addEngine(\"TerminalFactory\",                    false,
                            \"java.lang.Object\");
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7936386 "getEngineName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " get the \"standard\" (mixed-case) engine name for arbitary case engine name
 if there is no known engine by that name, return s"
      end
    end

    class 510338 "DomainCombiner"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code DomainCombiner} provides a means to dynamically
update the ProtectionDomains associated with the current
{@code AccessControlContext}.

<p> A {@code DomainCombiner} is passed as a parameter to the
appropriate constructor for {@code AccessControlContext}.
The newly constructed context is then passed to the
{@code AccessController.doPrivileged(..., context)} method
to bind the provided context (and associated {@code DomainCombiner})
with the current execution Thread.  Subsequent calls to
{@code AccessController.getContext} or
{@code AccessController.checkPermission}
cause the {@code DomainCombiner.combine} to get invoked.

<p> The combine method takes two arguments.  The first argument represents
an array of ProtectionDomains from the current execution Thread,
since the most recent call to {@code AccessController.doPrivileged}.
If no call to doPrivileged was made, then the first argument will contain
all the ProtectionDomains from the current execution Thread.
The second argument represents an array of inherited ProtectionDomains,
which may be {@code null}.  ProtectionDomains may be inherited
from a parent Thread, or from a privileged context.  If no call to
doPrivileged was made, then the second argument will contain the
ProtectionDomains inherited from the parent Thread.  If one or more calls
to doPrivileged were made, and the most recent call was to
doPrivileged(action, context), then the second argument will contain the
ProtectionDomains from the privileged context.  If the most recent call
was to doPrivileged(action), then there is no privileged context,
and the second argument will be {@code null}.

<p> The {@code combine} method investigates the two input arrays
of ProtectionDomains and returns a single array containing the updated
ProtectionDomains.  In the simplest case, the {@code combine}
method merges the two stacks into one.  In more complex cases,
the {@code combine} method returns a modified
stack of ProtectionDomains.  The modification may have added new
ProtectionDomains, removed certain ProtectionDomains, or simply
updated existing ProtectionDomains.  Re-ordering and other optimizations
to the ProtectionDomains are also permitted.  Typically the
{@code combine} method bases its updates on the information
encapsulated in the {@code DomainCombiner}.

<p> After the {@code AccessController.getContext} method
receives the combined stack of ProtectionDomains back from
the {@code DomainCombiner}, it returns a new
AccessControlContext that has both the combined ProtectionDomains
as well as the {@code DomainCombiner}.

@see AccessController
@see AccessControlContext
@since 1.3
"
      operation 3037314 "combine"
	public return_type class_ref 319618 // ProtectionDomain
	nparams 2
	  param inout name "currentDomains" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	  param inout name "assignedDomains" type class_ref 319618 // ProtectionDomain
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modify or update the provided ProtectionDomains.
ProtectionDomains may be added to or removed from the given
ProtectionDomains.  The ProtectionDomains may be re-ordered.
Individual ProtectionDomains may be modified (with a new
set of Permissions, for example).

<p>

@param currentDomains the ProtectionDomains associated with the
         current execution Thread, up to the most recent
         privileged {@code ProtectionDomain}.
         The ProtectionDomains are are listed in order of execution,
         with the most recently executing {@code ProtectionDomain}
         residing at the beginning of the array. This parameter may
         be {@code null} if the current execution Thread
         has no associated ProtectionDomains.<p>

@param assignedDomains an array of inherited ProtectionDomains.
         ProtectionDomains may be inherited from a parent Thread,
         or from a privileged {@code AccessControlContext}.
         This parameter may be {@code null}
         if there are no inherited ProtectionDomains.

@return a new array consisting of the updated ProtectionDomains,
         or {@code null}.
"
      end
    end

    class 510594 "Principal"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents the abstract notion of a principal, which
can be used to represent any entity, such as an individual, a
corporation, and a login id.

@see java.security.cert.X509Certificate

@author Li Gong
"
      operation 3264258 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "another" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this principal to the specified object.  Returns true
if the object passed in matches the principal represented by
the implementation of this interface.

@param another principal to compare with.

@return true if the principal passed in is the same as that
encapsulated by this principal, and false otherwise.
"
      end

      operation 3264386 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this principal.

@return a string representation of this principal.
"
      end

      operation 3264514 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this principal.

@return a hashcode for this principal.
"
      end

      operation 3264642 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this principal.

@return the name of this principal.
"
      end

      operation 3264770 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "subject" type class_ref 503042 // Subject
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified subject is implied by this principal.

<p>The default implementation of this method returns true if
{@code subject} is non-null and contains at least one principal that
is equal to this principal.

<p>Subclasses may override this with a different implementation, if
necessary.

@param subject the {@code Subject}
@return true if {@code subject} is non-null and is
             implied by this principal, or false otherwise.
@since 1.8
"
      end
    end

    class 752386 "MessageDigest"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This MessageDigest class provides applications the functionality of a
message digest algorithm, such as SHA-1 or SHA-256.
Message digests are secure one-way hash functions that take arbitrary-sized
data and output a fixed-length hash value.

<p>A MessageDigest object starts out initialized. The data is
processed through it using the {@link #update(byte) update}
methods. At any point {@link #reset() reset} can be called
to reset the digest. Once all the data to be updated has been
updated, one of the {@link #digest() digest} methods should
be called to complete the hash computation.

<p>The {@code digest} method can be called once for a given number
of updates. After {@code digest} has been called, the MessageDigest
object is reset to its initialized state.

<p>Implementations are free to implement the Cloneable interface.
Client applications can test cloneability by attempting cloning
and catching the CloneNotSupportedException:

<pre>{@code
MessageDigest md = MessageDigest.getInstance(\"SHA\");

try {
    md.update(toChapter1);
    MessageDigest tc1 = md.clone();
    byte[] toChapter1Digest = tc1.digest();
    md.update(toChapter2);
    ...etc.
} catch (CloneNotSupportedException cnse) {
    throw new DigestException(\"couldn't make digest of partial content\");
}
}</pre>

<p>Note that if a given implementation is not cloneable, it is
still possible to compute intermediate digests by instantiating
several instances, if the number of digests is known in advance.

<p>Note that this class is abstract and extends from
{@code MessageDigestSpi} for historical reasons.
Application developers should only take notice of the methods defined in
this {@code MessageDigest} class; all the methods in
the superclass are intended for cryptographic service providers who wish to
supply their own implementations of message digest algorithms.

<p> Every implementation of the Java platform is required to support
the following standard {@code MessageDigest} algorithms:
<ul>
<li>{@code MD5}</li>
<li>{@code SHA-1}</li>
<li>{@code SHA-256}</li>
</ul>
These algorithms are described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest\">
MessageDigest section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other algorithms are supported.

@author Benjamin Renaud

@see DigestInputStream
@see DigestOutputStream
"
      classrelation 3354626 // <generalisation>
	relation 3354626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3354626 // <generalisation>
	  b parent class_ref 1020930 // MessageDigestSpi
      end

      attribute 1850498 "pdebug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "
                        Debug.getInstance(\"provider\", \"Provider\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1850626 "skipDebug"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        Debug.isOn(\"engine=\") && !Debug.isOn(\"messagedigest\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3354754 // algorithm (<unidirectional association>)
	relation 3354754 --->
	  a role_name "algorithm" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3354754 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1850754 "INITIAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The state of this digest
"
      end

      attribute 1850882 "IN_PROGRESS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1851010 "state"
	private explicit_type "int"
	init_value " INITIAL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3354882 // provider (<unidirectional association>)
	relation 3354882 --->
	  a role_name "provider" private
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3354882 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      operation 7973378 "MessageDigest"
	protected explicit_return_type ""
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a message digest with the specified algorithm name.

@param algorithm the standard name of the digest algorithm.
See the MessageDigest section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.
"
      end

      operation 7973506 "getInstance"
	class_operation public return_type class_ref 752386 // MessageDigest
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a MessageDigest object that implements the specified digest
algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new MessageDigest object encapsulating the
MessageDigestSpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the algorithm requested.
See the MessageDigest section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return a Message Digest object that implements the specified algorithm.

@exception NoSuchAlgorithmException if no Provider supports a
         MessageDigestSpi implementation for the
         specified algorithm.

@see Provider
"
      end

      operation 7973634 "getInstance"
	class_operation public return_type class_ref 752386 // MessageDigest
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a MessageDigest object that implements the specified digest
algorithm.

<p> A new MessageDigest object encapsulating the
MessageDigestSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the algorithm requested.
See the MessageDigest section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the name of the provider.

@return a MessageDigest object that implements the specified algorithm.

@exception NoSuchAlgorithmException if a MessageDigestSpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see Provider
"
      end

      operation 7973762 "getInstance"
	class_operation public return_type class_ref 752386 // MessageDigest
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a MessageDigest object that implements the specified digest
algorithm.

<p> A new MessageDigest object encapsulating the
MessageDigestSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param algorithm the name of the algorithm requested.
See the MessageDigest section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the provider.

@return a MessageDigest object that implements the specified algorithm.

@exception NoSuchAlgorithmException if a MessageDigestSpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the specified provider is null.

@see Provider

@since 1.4
"
      end

      operation 7973890 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this message digest object.

@return the provider of this message digest object
"
      end

      operation 7974018 "update"
	public explicit_return_type "void"
	nparams 1
	  param in name "input" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the digest using the specified byte.

@param input the byte with which to update the digest.
"
      end

      operation 7974146 "update"
	public explicit_return_type "void"
	nparams 3
	  param inout name "input" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the digest using the specified array of bytes, starting
at the specified offset.

@param input the array of bytes.

@param offset the offset to start from in the array of bytes.

@param len the number of bytes to use, starting at
{@code offset}.
"
      end

      operation 7974274 "update"
	public explicit_return_type "void"
	nparams 1
	  param inout name "input" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the digest using the specified array of bytes.

@param input the array of bytes.
"
      end

      operation 7974402 "update"
	public explicit_return_type "void"
	nparams 1
	  param inout name "input" type class_ref 149890 // ByteBuffer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Update the digest using the specified ByteBuffer. The digest is
updated using the {@code input.remaining()} bytes starting
at {@code input.position()}.
Upon return, the buffer's position will be equal to its limit;
its limit will not have changed.

@param input the ByteBuffer
@since 1.5
"
      end

      operation 7974530 "digest"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes the hash computation by performing final operations
such as padding. The digest is reset after this call is made.

@return the array of bytes for the resulting hash value.
"
      end

      operation 7974658 "digest"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 752642 // DigestException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes the hash computation by performing final operations
such as padding. The digest is reset after this call is made.

@param buf output buffer for the computed digest

@param offset offset into the output buffer to begin storing the digest

@param len number of bytes within buf allotted for the digest

@return the number of bytes placed into {@code buf}

@exception DigestException if an error occurs.
"
      end

      operation 7974786 "digest"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "input" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a final update on the digest using the specified array
of bytes, then completes the digest computation. That is, this
method first calls {@link #update(byte[]) update(input)},
passing the <i>input</i> array to the {@code update} method,
then calls {@link #digest() digest()}.

@param input the input to be updated before the digest is
completed.

@return the array of bytes for the resulting hash value.
"
      end

      operation 7974914 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this message digest object.
"
      end

      operation 7975042 "isEqual"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "digesta" explicit_type "byte"
	multiplicity "[]"
	  param inout name "digestb" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares two digests for equality. Does a simple byte compare.

@param digesta one of the digests to compare.

@param digestb the other digest to compare.

@return true if the digests are equal, false otherwise.
"
      end

      operation 7975170 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the digest for further use.
"
      end

      operation 7975298 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string that identifies the algorithm, independent of
implementation details. The name should be a standard
Java Security name (such as \"SHA\", \"MD5\", and so on).
See the MessageDigest section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#MessageDigest\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return the name of the algorithm
"
      end

      operation 7975426 "getDigestLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the digest in bytes, or 0 if this operation is
not supported by the provider and the implementation is not cloneable.

@return the digest length in bytes, or 0 if this operation is not
supported by the provider and the implementation is not cloneable.

@since 1.2
"
      end

      operation 7975554 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 129794 // CloneNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone if the implementation is cloneable.

@return a clone if the implementation is cloneable.

@exception CloneNotSupportedException if this is called on an
implementation that does not support {@code Cloneable}.
"
      end

      class 1021058 "Delegate"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3355010 // <generalisation>
	  relation 3355010 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3355010 // <generalisation>
	    b parent class_ref 752386 // MessageDigest
	end

	classrelation 3355138 // digestSpi (<unidirectional association>)
	  relation 3355138 --->
	    a role_name "digestSpi" private
	      comment " The provider implementation (delegate)
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3355138 // digestSpi (<unidirectional association>)
	    b parent class_ref 1020930 // MessageDigestSpi
	end

	operation 7975682 "Delegate"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "digestSpi" type class_ref 1020930 // MessageDigestSpi
	    param inout name "algorithm" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " constructor"
	end

	operation 7975810 "clone"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  nexceptions 1
	    exception class_ref 129794 // CloneNotSupportedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a clone if the delegate is cloneable.

@return a clone if the delegate is cloneable.

@exception CloneNotSupportedException if this is called on a
delegate that does not support {@code Cloneable}.
"
	end

	operation 7975938 "engineGetDigestLength"
	  protected explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7976066 "engineUpdate"
	  protected explicit_return_type "void"
	  nparams 1
	    param in name "input" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7976194 "engineUpdate"
	  protected explicit_return_type "void"
	  nparams 3
	    param inout name "input" explicit_type "byte"
	  multiplicity "[]"
	    param in name "offset" explicit_type "int"
	    param in name "len" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7976322 "engineUpdate"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "input" type class_ref 149890 // ByteBuffer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7976450 "engineDigest"
	  protected explicit_return_type "byte"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7976578 "engineDigest"
	  protected explicit_return_type "int"
	  nparams 3
	    param inout name "buf" explicit_type "byte"
	  multiplicity "[]"
	    param in name "offset" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 752642 // DigestException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7976706 "engineReset"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 752642 "DigestException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the generic Message Digest exception.

@author Benjamin Renaud
"
      classrelation 3344258 // <generalisation>
	relation 3344258 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3344258 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1846018 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5821450303093652515L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7943682 "DigestException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a DigestException with no detail message.  (A
detail message is a String that describes this particular
exception.)
"
      end

      operation 7943810 "DigestException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a DigestException with the specified detail
message.  (A detail message is a String that describes this
particular exception.)

@param msg the detail message.
"
      end

      operation 7943938 "DigestException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code DigestException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7944066 "DigestException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code DigestException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 753026 "Key"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Key interface is the top-level interface for all keys. It
defines the functionality shared by all key objects. All keys
have three characteristics:

<UL>

<LI>An Algorithm

<P>This is the key algorithm for that key. The key algorithm is usually
an encryption or asymmetric operation algorithm (such as DSA or
RSA), which will work with those algorithms and with related
algorithms (such as MD5 with RSA, SHA-1 with RSA, Raw DSA, etc.)
The name of the algorithm of a key is obtained using the
{@link #getAlgorithm() getAlgorithm} method.

<LI>An Encoded Form

<P>This is an external encoded form for the key used when a standard
representation of the key is needed outside the Java Virtual Machine,
as when transmitting the key to some other party. The key
is encoded according to a standard format (such as
X.509 {@code SubjectPublicKeyInfo} or PKCS#8), and
is returned using the {@link #getEncoded() getEncoded} method.
Note: The syntax of the ASN.1 type {@code SubjectPublicKeyInfo}
is defined as follows:

<pre>
SubjectPublicKeyInfo ::= SEQUENCE {
  algorithm AlgorithmIdentifier,
  subjectPublicKey BIT STRING }

AlgorithmIdentifier ::= SEQUENCE {
  algorithm OBJECT IDENTIFIER,
  parameters ANY DEFINED BY algorithm OPTIONAL }
</pre>

For more information, see
<a href=\"http://www.ietf.org/rfc/rfc3280.txt\">RFC 3280:
Internet X.509 Public Key Infrastructure Certificate and CRL Profile</a>.

<LI>A Format

<P>This is the name of the format of the encoded key. It is returned
by the {@link #getFormat() getFormat} method.

</UL>

Keys are generally obtained through key generators, certificates,
or various Identity classes used to manage keys.
Keys may also be obtained from key specifications (transparent
representations of the underlying key material) through the use of a key
factory (see {@link KeyFactory}).

<p> A Key should use KeyRep as its serialized representation.
Note that a serialized Key may contain sensitive information
which should not be exposed in untrusted environments.  See the
<a href=\"../../../platform/serialization/spec/security.html\">
Security Appendix</a>
of the Serialization Specification for more information.

@see PublicKey
@see PrivateKey
@see KeyPair
@see KeyPairGenerator
@see KeyFactory
@see KeyRep
@see java.security.spec.KeySpec
@see Identity
@see Signer

@author Benjamin Renaud
"
      classrelation 3347330 // <generalisation>
	relation 3347330 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3347330 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1847298 "serialVersionUID"
	class_attribute const_attribute public explicit_type "long"
	init_value " 6603384152749567654L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Declare serialVersionUID to be compatible with JDK1.1

The class fingerprint that is set to indicate
serialization compatibility with a previous
version of the class.

"
      end

      operation 7953410 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the standard algorithm name for this key. For
example, \"DSA\" would indicate that this key is a DSA key.
See Appendix A in the <a href=
\"../../../technotes/guides/security/crypto/CryptoSpec.html#AppA\">
Java Cryptography Architecture API Specification &amp; Reference </a>
for information about standard algorithm names.

@return the name of the algorithm associated with this key.
"
      end

      operation 7953538 "getFormat"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the primary encoding format of this key,
or null if this key does not support encoding.
The primary encoding format is
named in terms of the appropriate ASN.1 data format, if an
ASN.1 specification for this key exists.
For example, the name of the ASN.1 data format for public
keys is <I>SubjectPublicKeyInfo</I>, as
defined by the X.509 standard; in this case, the returned format is
{@code \"X.509\"}. Similarly,
the name of the ASN.1 data format for private keys is
<I>PrivateKeyInfo</I>,
as defined by the PKCS #8 standard; in this case, the returned format is
{@code \"PKCS#8\"}.

@return the primary encoding format of the key.
"
      end

      operation 7953666 "getEncoded"
	public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the key in its primary encoding format, or null
if this key does not support encoding.

@return the encoded key, or null if the key does not support
encoding.
"
      end
    end

    class 753154 "SecureRandom"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class provides a cryptographically strong random number
generator (RNG).

<p>A cryptographically strong random number
minimally complies with the statistical random number generator tests
specified in <a href=\"http://csrc.nist.gov/cryptval/140-2.htm\">
<i>FIPS 140-2, Security Requirements for Cryptographic Modules</i></a>,
section 4.9.1.
Additionally, SecureRandom must produce non-deterministic output.
Therefore any seed material passed to a SecureRandom object must be
unpredictable, and all SecureRandom output sequences must be
cryptographically strong, as described in
<a href=\"http://www.ietf.org/rfc/rfc1750.txt\">
<i>RFC 1750: Randomness Recommendations for Security</i></a>.

<p>A caller obtains a SecureRandom instance via the
no-argument constructor or one of the {@code getInstance} methods:

<pre>
     SecureRandom random = new SecureRandom();
</pre>

<p> Many SecureRandom implementations are in the form of a pseudo-random
number generator (PRNG), which means they use a deterministic algorithm
to produce a pseudo-random sequence from a true random seed.
Other implementations may produce true random numbers,
and yet others may use a combination of both techniques.

<p> Typical callers of SecureRandom invoke the following methods
to retrieve random bytes:

<pre>
     SecureRandom random = new SecureRandom();
     byte bytes[] = new byte[20];
     random.nextBytes(bytes);
</pre>

<p> Callers may also invoke the {@code generateSeed} method
to generate a given number of seed bytes (to seed other random number
generators, for example):
<pre>
     byte seed[] = random.generateSeed(20);
</pre>

Note: Depending on the implementation, the {@code generateSeed} and
{@code nextBytes} methods may block as entropy is being gathered,
for example, if they need to read from /dev/random on various Unix-like
operating systems.

@see java.security.SecureRandomSpi
@see java.util.Random

@author Benjamin Renaud
@author Josh Bloch
"
      classrelation 3362818 // <generalisation>
	relation 3362818 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3362818 // <generalisation>
	  b parent class_ref 934914 // Random
      end

      attribute 1856130 "pdebug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "
                        Debug.getInstance(\"provider\", \"Provider\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1856258 "skipDebug"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        Debug.isOn(\"engine=\") && !Debug.isOn(\"securerandom\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3362946 // provider (<unidirectional association>)
	relation 3362946 --->
	  a role_name "provider" init_value " null" private
	    comment "
The provider.

@serial
@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3362946 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3363074 // secureRandomSpi (<unidirectional association>)
	relation 3363074 --->
	  a role_name "secureRandomSpi" init_value " null" private
	    comment "
The provider implementation.

@serial
@since 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3363074 // secureRandomSpi (<unidirectional association>)
	  b parent class_ref 1024130 // SecureRandomSpi
      end

      classrelation 3363202 // algorithm (<unidirectional association>)
	relation 3363202 --->
	  a role_name "algorithm" private
	    comment "
The algorithm name of null if unknown.

@serial
@since 1.5

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3363202 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3363330 // seedGenerator (<unidirectional association>)
	relation 3363330 --->
	  a role_name "seedGenerator" init_value " null" class_relation volatile private
	    comment " Seed Generator
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3363330 // seedGenerator (<unidirectional association>)
	  b parent class_ref 753154 // SecureRandom
      end

      operation 7996162 "SecureRandom"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a secure random number generator (RNG) implementing the
default random number algorithm.

<p> This constructor traverses the list of registered security Providers,
starting with the most preferred Provider.
A new SecureRandom object encapsulating the
SecureRandomSpi implementation from the first
Provider that supports a SecureRandom (RNG) algorithm is returned.
If none of the Providers support a RNG algorithm,
then an implementation-specific default is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

<p> See the SecureRandom section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard RNG algorithm names.

<p> The returned SecureRandom object has not been seeded.  To seed the
returned object, call the {@code setSeed} method.
If {@code setSeed} is not called, the first call to
{@code nextBytes} will force the SecureRandom object to seed itself.
This self-seeding will not occur if {@code setSeed} was
previously called.
"
      end

      operation 7996290 "SecureRandom"
	public explicit_return_type ""
	nparams 1
	  param inout name "seed" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a secure random number generator (RNG) implementing the
default random number algorithm.
The SecureRandom instance is seeded with the specified seed bytes.

<p> This constructor traverses the list of registered security Providers,
starting with the most preferred Provider.
A new SecureRandom object encapsulating the
SecureRandomSpi implementation from the first
Provider that supports a SecureRandom (RNG) algorithm is returned.
If none of the Providers support a RNG algorithm,
then an implementation-specific default is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

<p> See the SecureRandom section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard RNG algorithm names.

@param seed the seed.
"
      end

      operation 7996418 "getDefaultPRNG"
	private explicit_return_type "void"
	nparams 2
	  param inout name "setSeed" explicit_type "boolean"
	  param inout name "seed" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7996546 "SecureRandom"
	protected explicit_return_type ""
	nparams 2
	  param inout name "secureRandomSpi" type class_ref 1024130 // SecureRandomSpi
	  param inout name "provider" type class_ref 509570 // Provider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a SecureRandom object.

@param secureRandomSpi the SecureRandom implementation.
@param provider the provider.
"
      end

      operation 7996674 "SecureRandom"
	private explicit_return_type ""
	nparams 3
	  param inout name "secureRandomSpi" type class_ref 1024130 // SecureRandomSpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7996802 "getInstance"
	class_operation public return_type class_ref 753154 // SecureRandom
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a SecureRandom object that implements the specified
Random Number Generator (RNG) algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new SecureRandom object encapsulating the
SecureRandomSpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

<p> The returned SecureRandom object has not been seeded.  To seed the
returned object, call the {@code setSeed} method.
If {@code setSeed} is not called, the first call to
{@code nextBytes} will force the SecureRandom object to seed itself.
This self-seeding will not occur if {@code setSeed} was
previously called.

@param algorithm the name of the RNG algorithm.
See the SecureRandom section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard RNG algorithm names.

@return the new SecureRandom object.

@exception NoSuchAlgorithmException if no Provider supports a
         SecureRandomSpi implementation for the
         specified algorithm.

@see Provider

@since 1.2
"
      end

      operation 7996930 "getInstance"
	class_operation public return_type class_ref 753154 // SecureRandom
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a SecureRandom object that implements the specified
Random Number Generator (RNG) algorithm.

<p> A new SecureRandom object encapsulating the
SecureRandomSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

<p> The returned SecureRandom object has not been seeded.  To seed the
returned object, call the {@code setSeed} method.
If {@code setSeed} is not called, the first call to
{@code nextBytes} will force the SecureRandom object to seed itself.
This self-seeding will not occur if {@code setSeed} was
previously called.

@param algorithm the name of the RNG algorithm.
See the SecureRandom section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard RNG algorithm names.

@param provider the name of the provider.

@return the new SecureRandom object.

@exception NoSuchAlgorithmException if a SecureRandomSpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see Provider

@since 1.2
"
      end

      operation 7997058 "getInstance"
	class_operation public return_type class_ref 753154 // SecureRandom
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a SecureRandom object that implements the specified
Random Number Generator (RNG) algorithm.

<p> A new SecureRandom object encapsulating the
SecureRandomSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

<p> The returned SecureRandom object has not been seeded.  To seed the
returned object, call the {@code setSeed} method.
If {@code setSeed} is not called, the first call to
{@code nextBytes} will force the SecureRandom object to seed itself.
This self-seeding will not occur if {@code setSeed} was
previously called.

@param algorithm the name of the RNG algorithm.
See the SecureRandom section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#SecureRandom\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard RNG algorithm names.

@param provider the provider.

@return the new SecureRandom object.

@exception NoSuchAlgorithmException if a SecureRandomSpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the specified provider is null.

@see Provider

@since 1.4
"
      end

      operation 7997186 "getSecureRandomSpi"
	package return_type class_ref 1024130 // SecureRandomSpi
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the SecureRandomSpi of this SecureRandom object.
"
      end

      operation 7997314 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this SecureRandom object.

@return the provider of this SecureRandom object.
"
      end

      operation 7997442 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the algorithm implemented by this SecureRandom
object.

@return the name of the algorithm or {@code unknown}
         if the algorithm name cannot be determined.
@since 1.5
"
      end

      operation 7997570 "setSeed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "seed" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reseeds this random object. The given seed supplements, rather than
replaces, the existing seed. Thus, repeated calls are guaranteed
never to reduce randomness.

@param seed the seed.

@see #getSeed
"
      end

      operation 7997698 "setSeed"
	public explicit_return_type "void"
	nparams 1
	  param in name "seed" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reseeds this random object, using the eight bytes contained
in the given {@code long seed}. The given seed supplements,
rather than replaces, the existing seed. Thus, repeated calls
are guaranteed never to reduce randomness.

<p>This method is defined for compatibility with
{@code java.util.Random}.

@param seed the seed.

@see #getSeed
"
      end

      operation 7997826 "nextBytes"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bytes" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Generates a user-specified number of random bytes.

<p> If a call to {@code setSeed} had not occurred previously,
the first call to this method forces this SecureRandom object
to seed itself.  This self-seeding will not occur if
{@code setSeed} was previously called.

@param bytes the array to be filled in with random bytes.
"
      end

      operation 7997954 "next"
	protected explicit_return_type "int"
	nparams 1
	  param in name "numBits" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Generates an integer containing the user-specified number of
pseudo-random bits (right justified, with leading zeros).  This
method overrides a {@code java.util.Random} method, and serves
to provide a source of random bits to all of the methods inherited
from that class (for example, {@code nextInt},
{@code nextLong}, and {@code nextFloat}).

@param numBits number of pseudo-random bits to be generated, where
{@code 0 <= numBits <= 32}.

@return an {@code int} containing the user-specified number
of pseudo-random bits (right justified, with leading zeros).
"
      end

      operation 7998082 "getSeed"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param in name "numBytes" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the given number of seed bytes, computed using the seed
generation algorithm that this class uses to seed itself.  This
call may be used to seed other random number generators.

<p>This method is only included for backwards compatibility.
The caller is encouraged to use one of the alternative
{@code getInstance} methods to obtain a SecureRandom object, and
then call the {@code generateSeed} method to obtain seed bytes
from that object.

@param numBytes the number of seed bytes to generate.

@return the seed bytes.

@see #setSeed
"
      end

      operation 7998210 "generateSeed"
	public explicit_return_type "byte"
	nparams 1
	  param in name "numBytes" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the given number of seed bytes, computed using the seed
generation algorithm that this class uses to seed itself.  This
call may be used to seed other random number generators.

@param numBytes the number of seed bytes to generate.

@return the seed bytes.
"
      end

      operation 7998338 "longToByteArray"
	class_operation private explicit_return_type "byte"
	nparams 1
	  param in name "l" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helper function to convert a long into a byte array (least significant
byte first).
"
      end

      operation 7998466 "getPrngAlgorithm"
	class_operation private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a default PRNG algorithm by looking through all registered
providers. Returns the first PRNG algorithm of the first provider that
has registered a SecureRandom implementation, or null if none of the
registered providers supplies a SecureRandom implementation.
"
      end

      class 1024258 "StrongPatternHolder"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3363458 // pattern (<unidirectional association>)
	  relation 3363458 --->
	    a role_name "pattern" init_value "
            Pattern.compile(
                \"\\\\s*([\\\\S&&[^:,]]*)(\\\\:([\\\\S&&[^,]]*))?\\\\s*(\\\\,(.*))?\")" class_relation private
	      comment "
Entries are alg:prov separated by ,
Allow for prepended/appended whitespace between entries.

Capture groups:
    1 - alg
    2 - :prov (optional)
    3 - prov (optional)
    4 - ,nextEntry (optional)
    5 - nextEntry (optional)

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3363458 // pattern (<unidirectional association>)
	    b parent class_ref 417154 // Pattern
	end
      end

      operation 7998594 "getInstanceStrong"
	class_operation public return_type class_ref 753154 // SecureRandom
	nparams 0
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code SecureRandom} object that was selected by using
the algorithms/providers specified in the {@code
securerandom.strongAlgorithms} {@link Security} property.
<p>
Some situations require strong random values, such as when
creating high-value/long-lived secrets like RSA public/private
keys.  To help guide applications in selecting a suitable strong
{@code SecureRandom} implementation, Java distributions
include a list of known strong {@code SecureRandom}
implementations in the {@code securerandom.strongAlgorithms}
Security property.
<p>
Every implementation of the Java platform is required to
support at least one strong {@code SecureRandom} implementation.

@return a strong {@code SecureRandom} implementation as indicated
by the {@code securerandom.strongAlgorithms} Security property

@throws NoSuchAlgorithmException if no algorithm is available

@see Security#getProperty(String)

@since 1.8
"
      end

      attribute 1856386 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4940670005562187L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Declare serialVersionUID to be compatible with JDK1.1
"
      end

      attribute 1856514 "state"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Retain unused values serialized from JDK1.1

@serial

"
      end

      classrelation 3363586 // digest (<unidirectional association>)
	relation 3363586 --->
	  a role_name "digest" init_value " null" private
	    comment "
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3363586 // digest (<unidirectional association>)
	  b parent class_ref 752386 // MessageDigest
      end

      attribute 1856642 "randomBytes"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

We know that the MessageDigest class does not implement
java.io.Serializable.  However, since this field is no longer
used, it will always be NULL and won't affect the serialization
of the SecureRandom class itself.

"
      end

      attribute 1856770 "randomBytesUsed"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end

      attribute 1856898 "counter"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial

"
      end
    end

    class 754562 "Signature"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Signature class is used to provide applications the functionality
of a digital signature algorithm. Digital signatures are used for
authentication and integrity assurance of digital data.

<p> The signature algorithm can be, among others, the NIST standard
DSA, using DSA and SHA-1. The DSA algorithm using the
SHA-1 message digest algorithm can be specified as {@code SHA1withDSA}.
In the case of RSA, there are multiple choices for the message digest
algorithm, so the signing algorithm could be specified as, for example,
{@code MD2withRSA}, {@code MD5withRSA}, or {@code SHA1withRSA}.
The algorithm name must be specified, as there is no default.

<p> A Signature object can be used to generate and verify digital
signatures.

<p> There are three phases to the use of a Signature object for
either signing data or verifying a signature:<ol>

<li>Initialization, with either

    <ul>

    <li>a public key, which initializes the signature for
    verification (see {@link #initVerify(PublicKey) initVerify}), or

    <li>a private key (and optionally a Secure Random Number Generator),
    which initializes the signature for signing
    (see {@link #initSign(PrivateKey)}
    and {@link #initSign(PrivateKey, SecureRandom)}).

    </ul>

<li>Updating

<p>Depending on the type of initialization, this will update the
bytes to be signed or verified. See the
{@link #update(byte) update} methods.

<li>Signing or Verifying a signature on all updated bytes. See the
{@link #sign() sign} methods and the {@link #verify(byte[]) verify}
method.

</ol>

<p>Note that this class is abstract and extends from
{@code SignatureSpi} for historical reasons.
Application developers should only take notice of the methods defined in
this {@code Signature} class; all the methods in
the superclass are intended for cryptographic service providers who wish to
supply their own implementations of digital signature algorithms.

<p> Every implementation of the Java platform is required to support the
following standard {@code Signature} algorithms:
<ul>
<li>{@code SHA1withDSA}</li>
<li>{@code SHA1withRSA}</li>
<li>{@code SHA256withRSA}</li>
</ul>
These algorithms are described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\">
Signature section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other algorithms are supported.

@author Benjamin Renaud

"
      classrelation 3364610 // <generalisation>
	relation 3364610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3364610 // <generalisation>
	  b parent class_ref 1024642 // SignatureSpi
      end

      attribute 1857410 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "
                        Debug.getInstance(\"jca\", \"Signature\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1857538 "pdebug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "
                        Debug.getInstance(\"provider\", \"Provider\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1857666 "skipDebug"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        Debug.isOn(\"engine=\") && !Debug.isOn(\"signature\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3364738 // algorithm (<unidirectional association>)
	relation 3364738 --->
	  a role_name "algorithm" private
	    comment "
The algorithm for this signature object.
This value is used to map an OID to the particular algorithm.
The mapping is done in AlgorithmObject.algOID(String algorithm)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3364738 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3364866 // provider (<unidirectional association>)
	relation 3364866 --->
	  a role_name "provider" package
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3364866 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      attribute 1857794 "UNINITIALIZED"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Possible {@link #state} value, signifying that
this signature object has not yet been initialized.

"
      end

      attribute 1857922 "SIGN"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Possible {@link #state} value, signifying that
this signature object has been initialized for signing.

"
      end

      attribute 1858050 "VERIFY"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Possible {@link #state} value, signifying that
this signature object has been initialized for verification.

"
      end

      attribute 1858178 "state"
	protected explicit_type "int"
	init_value " UNINITIALIZED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Current state of this signature object.

"
      end

      operation 8005250 "Signature"
	protected explicit_return_type ""
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a Signature object for the specified algorithm.

@param algorithm the standard string name of the algorithm.
See the Signature section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.
"
      end

      classrelation 3364994 // RSA_SIGNATURE (<unidirectional association>)
	relation 3364994 --->
	  a role_name "RSA_SIGNATURE" init_value " \"NONEwithRSA\"" class_relation const_relation private
	    comment " name of the special signature alg
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3364994 // RSA_SIGNATURE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3365122 // RSA_CIPHER (<unidirectional association>)
	relation 3365122 --->
	  a role_name "RSA_CIPHER" init_value " \"RSA/ECB/PKCS1Padding\"" class_relation const_relation private
	    comment " name of the equivalent cipher alg
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3365122 // RSA_CIPHER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3365250 // rsaIds (<unidirectional association>)
	relation 3365250 --->
	  a role_name "rsaIds" init_value " Arrays.asList(
        new ServiceId[] {
            new ServiceId(\"Signature\", \"NONEwithRSA\"),
            new ServiceId(\"Cipher\", \"RSA/ECB/PKCS1Padding\"),
            new ServiceId(\"Cipher\", \"RSA/ECB\"),
            new ServiceId(\"Cipher\", \"RSA//PKCS1Padding\"),
            new ServiceId(\"Cipher\", \"RSA\"),
        }
    )" class_relation const_relation private
	    comment " all the services we need to lookup for compatibility with Cipher
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ServiceId> ${name}${value};
"
	    classrelation_ref 3365250 // rsaIds (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 8005378 "getInstance"
	class_operation public return_type class_ref 754562 // Signature
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Signature object that implements the specified signature
algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new Signature object encapsulating the
SignatureSpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the standard name of the algorithm requested.
See the Signature section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return the new Signature object.

@exception NoSuchAlgorithmException if no Provider supports a
         Signature implementation for the
         specified algorithm.

@see Provider
"
      end

      operation 8005506 "getInstance"
	class_operation private return_type class_ref 754562 // Signature
	nparams 2
	  param inout name "instance" explicit_type "Instance"
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3365378 // signatureInfo (<unidirectional association>)
	relation 3365378 --->
	  a role_name "signatureInfo" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Boolean> ${name}${value};
"
	    classrelation_ref 3365378 // signatureInfo (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 167810 "initialization"
	
	cpp "" ""
	java "  static {
        signatureInfo = new ConcurrentHashMap<String,Boolean>();
        Boolean TRUE = Boolean.TRUE;
        // pre-initialize with values for our SignatureSpi implementations
        signatureInfo.put(\"sun.security.provider.DSA$RawDSA\", TRUE);
        signatureInfo.put(\"sun.security.provider.DSA$SHA1withDSA\", TRUE);
        signatureInfo.put(\"sun.security.rsa.RSASignature$MD2withRSA\", TRUE);
        signatureInfo.put(\"sun.security.rsa.RSASignature$MD5withRSA\", TRUE);
        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA1withRSA\", TRUE);
        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA256withRSA\", TRUE);
        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA384withRSA\", TRUE);
        signatureInfo.put(\"sun.security.rsa.RSASignature$SHA512withRSA\", TRUE);
        signatureInfo.put(\"com.sun.net.ssl.internal.ssl.RSASignature\", TRUE);
        signatureInfo.put(\"sun.security.pkcs11.P11Signature\", TRUE);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 8005634 "isSpi"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 1015042 // Service
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8005762 "getInstance"
	class_operation public return_type class_ref 754562 // Signature
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Signature object that implements the specified signature
algorithm.

<p> A new Signature object encapsulating the
SignatureSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the algorithm requested.
See the Signature section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the name of the provider.

@return the new Signature object.

@exception NoSuchAlgorithmException if a SignatureSpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see Provider
"
      end

      operation 8005890 "getInstance"
	class_operation public return_type class_ref 754562 // Signature
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Signature object that implements the specified
signature algorithm.

<p> A new Signature object encapsulating the
SignatureSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param algorithm the name of the algorithm requested.
See the Signature section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#Signature\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the provider.

@return the new Signature object.

@exception NoSuchAlgorithmException if a SignatureSpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the provider is null.

@see Provider

@since 1.4
"
      end

      operation 8006018 "getInstanceRSA"
	class_operation private return_type class_ref 754562 // Signature
	nparams 1
	  param inout name "p" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " return an implementation for NONEwithRSA, which is a special case
 because of the Cipher.RSA/ECB/PKCS1Padding compatibility wrapper"
      end

      operation 8006146 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this signature object.

@return the provider of this signature object
"
      end

      operation 8006274 "chooseFirstProvider"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8006402 "initVerify"
	public explicit_return_type "void"
	nparams 1
	  param inout name "publicKey" type class_ref 765826 // PublicKey
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this object for verification. If this method is called
again with a different argument, it negates the effect
of this call.

@param publicKey the public key of the identity whose signature is
going to be verified.

@exception InvalidKeyException if the key is invalid.
"
      end

      operation 8006530 "initVerify"
	public explicit_return_type "void"
	nparams 1
	  param inout name "certificate" type class_ref 833154 // Certificate
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this object for verification, using the public key from
the given certificate.
<p>If the certificate is of type X.509 and has a <i>key usage</i>
extension field marked as critical, and the value of the <i>key usage</i>
extension field implies that the public key in
the certificate and its corresponding private key are not
supposed to be used for digital signatures, an
{@code InvalidKeyException} is thrown.

@param certificate the certificate of the identity whose signature is
going to be verified.

@exception InvalidKeyException  if the public key in the certificate
is not encoded properly or does not include required  parameter
information or cannot be used for digital signature purposes.
@since 1.3
"
      end

      operation 8006658 "initSign"
	public explicit_return_type "void"
	nparams 1
	  param inout name "privateKey" type class_ref 767362 // PrivateKey
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize this object for signing. If this method is called
again with a different argument, it negates the effect
of this call.

@param privateKey the private key of the identity whose signature
is going to be generated.

@exception InvalidKeyException if the key is invalid.
"
      end

      operation 8006786 "initSign"
	public explicit_return_type "void"
	nparams 2
	  param inout name "privateKey" type class_ref 767362 // PrivateKey
	  param inout name "random" type class_ref 753154 // SecureRandom
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize this object for signing. If this method is called
again with a different argument, it negates the effect
of this call.

@param privateKey the private key of the identity whose signature
is going to be generated.

@param random the source of randomness for this signature.

@exception InvalidKeyException if the key is invalid.
"
      end

      operation 8006914 "sign"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signature bytes of all the data updated.
The format of the signature depends on the underlying
signature scheme.

<p>A call to this method resets this signature object to the state
it was in when previously initialized for signing via a
call to {@code initSign(PrivateKey)}. That is, the object is
reset and available to generate another signature from the same
signer, if desired, via new calls to {@code update} and
{@code sign}.

@return the signature bytes of the signing operation's result.

@exception SignatureException if this signature object is not
initialized properly or if this signature algorithm is unable to
process the input data provided.
"
      end

      operation 8007042 "sign"
	public explicit_return_type "int"
	nparams 3
	  param inout name "outbuf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes the signature operation and stores the resulting signature
bytes in the provided buffer {@code outbuf}, starting at
{@code offset}.
The format of the signature depends on the underlying
signature scheme.

<p>This signature object is reset to its initial state (the state it
was in after a call to one of the {@code initSign} methods) and
can be reused to generate further signatures with the same private key.

@param outbuf buffer for the signature result.

@param offset offset into {@code outbuf} where the signature is
stored.

@param len number of bytes within {@code outbuf} allotted for the
signature.

@return the number of bytes placed into {@code outbuf}.

@exception SignatureException if this signature object is not
initialized properly, if this signature algorithm is unable to
process the input data provided, or if {@code len} is less
than the actual signature length.

@since 1.2
"
      end

      operation 8007170 "verify"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "signature" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies the passed-in signature.

<p>A call to this method resets this signature object to the state
it was in when previously initialized for verification via a
call to {@code initVerify(PublicKey)}. That is, the object is
reset and available to verify another signature from the identity
whose public key was specified in the call to {@code initVerify}.

@param signature the signature bytes to be verified.

@return true if the signature was verified, false if not.

@exception SignatureException if this signature object is not
initialized properly, the passed-in signature is improperly
encoded or of the wrong type, if this signature algorithm is unable to
process the input data provided, etc.
"
      end

      operation 8007298 "verify"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "signature" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies the passed-in signature in the specified array
of bytes, starting at the specified offset.

<p>A call to this method resets this signature object to the state
it was in when previously initialized for verification via a
call to {@code initVerify(PublicKey)}. That is, the object is
reset and available to verify another signature from the identity
whose public key was specified in the call to {@code initVerify}.


@param signature the signature bytes to be verified.
@param offset the offset to start from in the array of bytes.
@param length the number of bytes to use, starting at offset.

@return true if the signature was verified, false if not.

@exception SignatureException if this signature object is not
initialized properly, the passed-in signature is improperly
encoded or of the wrong type, if this signature algorithm is unable to
process the input data provided, etc.
@exception IllegalArgumentException if the {@code signature}
byte array is null, or the {@code offset} or {@code length}
is less than 0, or the sum of the {@code offset} and
{@code length} is greater than the length of the
{@code signature} byte array.
@since 1.4
"
      end

      operation 8007426 "update"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the data to be signed or verified by a byte.

@param b the byte to use for the update.

@exception SignatureException if this signature object is not
initialized properly.
"
      end

      operation 8007554 "update"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the data to be signed or verified, using the specified
array of bytes.

@param data the byte array to use for the update.

@exception SignatureException if this signature object is not
initialized properly.
"
      end

      operation 8007682 "update"
	public explicit_return_type "void"
	nparams 3
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the data to be signed or verified, using the specified
array of bytes, starting at the specified offset.

@param data the array of bytes.
@param off the offset to start from in the array of bytes.
@param len the number of bytes to use, starting at offset.

@exception SignatureException if this signature object is not
initialized properly.
"
      end

      operation 8007810 "update"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 149890 // ByteBuffer
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the data to be signed or verified using the specified
ByteBuffer. Processes the {@code data.remaining()} bytes
starting at at {@code data.position()}.
Upon return, the buffer's position will be equal to its limit;
its limit will not have changed.

@param data the ByteBuffer

@exception SignatureException if this signature object is not
initialized properly.
@since 1.5
"
      end

      operation 8007938 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the algorithm for this signature object.

@return the name of the algorithm for this signature object.
"
      end

      operation 8008066 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this signature object,
providing information that includes the state of the object
and the name of the algorithm used.

@return a string representation of this signature object.
"
      end

      operation 8008194 "setParameter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "param" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1017474 // InvalidParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the specified algorithm parameter to the specified value.
This method supplies a general-purpose mechanism through
which it is possible to set the various parameters of this object.
A parameter may be any settable parameter for the algorithm, such as
a parameter size, or a source of random bits for signature generation
(if appropriate), or an indication of whether or not to perform
a specific but optional computation. A uniform algorithm-specific
naming scheme for each parameter is desirable but left unspecified
at this time.

@param param the string identifier of the parameter.
@param value the parameter value.

@exception InvalidParameterException if {@code param} is an
invalid parameter for this signature algorithm engine,
the parameter is already set
and cannot be set again, a security exception occurs, and so on.

@see #getParameter

@deprecated Use
{@link #setParameter(java.security.spec.AlgorithmParameterSpec)
setParameter}.
"
      end

      operation 8008322 "setParameter"
	public explicit_return_type "void"
	nparams 1
	  param inout name "params" type class_ref 753282 // AlgorithmParameterSpec
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this signature engine with the specified parameter set.

@param params the parameters

@exception InvalidAlgorithmParameterException if the given parameters
are inappropriate for this signature engine

@see #getParameters
"
      end

      operation 8008450 "getParameters"
	public return_type class_ref 1013378 // AlgorithmParameters
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters used with this signature object.

<p>The returned parameters may be the same that were used to initialize
this signature, or may contain a combination of default and randomly
generated parameter values used by the underlying signature
implementation if this signature requires algorithm parameters but
was not initialized with any.

@return the parameters used with this signature, or null if this
signature does not use any parameters.

@see #setParameter(AlgorithmParameterSpec)
@since 1.4
"
      end

      operation 8008578 "getParameter"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "param" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1017474 // InvalidParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Gets the value of the specified algorithm parameter. This method
supplies a general-purpose mechanism through which it is possible to
get the various parameters of this object. A parameter may be any
settable parameter for the algorithm, such as a parameter size, or
a source of random bits for signature generation (if appropriate),
or an indication of whether or not to perform a specific but optional
computation. A uniform algorithm-specific naming scheme for each
parameter is desirable but left unspecified at this time.

@param param the string name of the parameter.

@return the object that represents the parameter value, or null if
there is none.

@exception InvalidParameterException if {@code param} is an invalid
parameter for this engine, or another exception occurs while
trying to get this parameter.

@see #setParameter(String, Object)

@deprecated
"
      end

      operation 8008706 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 129794 // CloneNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone if the implementation is cloneable.

@return a clone if the implementation is cloneable.

@exception CloneNotSupportedException if this is called
on an implementation that does not support {@code Cloneable}.
"
      end

      class 1024898 "Delegate"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3365506 // <generalisation>
	  relation 3365506 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3365506 // <generalisation>
	    b parent class_ref 754562 // Signature
	end

	classrelation 3365634 // sigSpi (<unidirectional association>)
	  relation 3365634 --->
	    a role_name "sigSpi" private
	      comment " The provider implementation (delegate)
 filled in once the provider is selected
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3365634 // sigSpi (<unidirectional association>)
	    b parent class_ref 1024642 // SignatureSpi
	end

	classrelation 3365762 // lock (<unidirectional association>)
	  relation 3365762 --->
	    a role_name "lock" const_relation private
	      comment " lock for mutex during provider selection
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3365762 // lock (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3365890 // firstService (<unidirectional association>)
	  relation 3365890 --->
	    a role_name "firstService" private
	      comment " next service to try in provider selection
 null once provider is selected
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3365890 // firstService (<unidirectional association>)
	    b parent class_ref 1015042 // Service
	end

	classrelation 3366018 // serviceIterator (<unidirectional association>)
	  relation 3366018 --->
	    a role_name "serviceIterator" private
	      comment " remaining services to try in provider selection
 null once provider is selected
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Service> ${name}${value};
"
	      classrelation_ref 3366018 // serviceIterator (<unidirectional association>)
	    b parent class_ref 132994 // Iterator
	end

	operation 8008834 "Delegate"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "sigSpi" type class_ref 1024642 // SignatureSpi
	    param inout name "algorithm" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " constructor"
	end

	operation 8008962 "Delegate"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "service" type class_ref 1015042 // Service
	    param inout name "iterator" type class_ref 132994 // Iterator
	    param inout name "algorithm" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Service> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " used with delayed provider selection"
	end

	operation 8009090 "clone"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  nexceptions 1
	    exception class_ref 129794 // CloneNotSupportedException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a clone if the delegate is cloneable.

@return a clone if the delegate is cloneable.

@exception CloneNotSupportedException if this is called on a
delegate that does not support {@code Cloneable}.
"
	end

	operation 8009218 "newInstance"
	  class_operation private return_type class_ref 1024642 // SignatureSpi
	  nparams 1
	    param inout name "s" type class_ref 1015042 // Service
	  nexceptions 1
	    exception class_ref 509314 // NoSuchAlgorithmException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1858306 "warnCount"
	  class_attribute private explicit_type "int"
	  init_value " 10"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " max number of debug warnings to print from chooseFirstProvider()
"
	end

	operation 8009346 "chooseFirstProvider"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Choose the Spi from the first provider available. Used if
delayed provider selection is not possible because initSign()/
initVerify() is not the first method called.
"
	end

	operation 8009474 "chooseProvider"
	  private explicit_return_type "void"
	  nparams 3
	    param in name "type" explicit_type "int"
	    param inout name "key" type class_ref 753026 // Key
	    param inout name "random" type class_ref 753154 // SecureRandom
	  nexceptions 1
	    exception class_ref 1017346 // InvalidKeyException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1858434 "I_PUB"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1858562 "I_PRIV"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1858690 "I_PRIV_SR"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8009602 "init"
	  private explicit_return_type "void"
	  nparams 4
	    param inout name "spi" type class_ref 1024642 // SignatureSpi
	    param in name "type" explicit_type "int"
	    param inout name "key" type class_ref 753026 // Key
	    param inout name "random" type class_ref 753154 // SecureRandom
	  nexceptions 1
	    exception class_ref 1017346 // InvalidKeyException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8009730 "engineInitVerify"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "publicKey" type class_ref 765826 // PublicKey
	  nexceptions 1
	    exception class_ref 1017346 // InvalidKeyException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8009858 "engineInitSign"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "privateKey" type class_ref 767362 // PrivateKey
	  nexceptions 1
	    exception class_ref 1017346 // InvalidKeyException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8009986 "engineInitSign"
	  protected explicit_return_type "void"
	  nparams 2
	    param inout name "privateKey" type class_ref 767362 // PrivateKey
	    param inout name "sr" type class_ref 753154 // SecureRandom
	  nexceptions 1
	    exception class_ref 1017346 // InvalidKeyException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8010114 "engineUpdate"
	  protected explicit_return_type "void"
	  nparams 1
	    param in name "b" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8010242 "engineUpdate"
	  protected explicit_return_type "void"
	  nparams 3
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8010370 "engineUpdate"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "data" type class_ref 149890 // ByteBuffer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8010498 "engineSign"
	  protected explicit_return_type "byte"
	  nparams 0
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8010626 "engineSign"
	  protected explicit_return_type "int"
	  nparams 3
	    param inout name "outbuf" explicit_type "byte"
	  multiplicity "[]"
	    param in name "offset" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8010754 "engineVerify"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param inout name "sigBytes" explicit_type "byte"
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8010882 "engineVerify"
	  protected explicit_return_type "boolean"
	  nparams 3
	    param inout name "sigBytes" explicit_type "byte"
	  multiplicity "[]"
	    param in name "offset" explicit_type "int"
	    param in name "length" explicit_type "int"
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8011010 "engineSetParameter"
	  protected explicit_return_type "void"
	  nparams 2
	    param inout name "param" type class_ref 128130 // String
	    param inout name "value" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 1017474 // InvalidParameterException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8011138 "engineSetParameter"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "params" type class_ref 753282 // AlgorithmParameterSpec
	  nexceptions 1
	    exception class_ref 1013762 // InvalidAlgorithmParameterException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8011266 "engineGetParameter"
	  protected return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "param" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 1017474 // InvalidParameterException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8011394 "engineGetParameters"
	  protected return_type class_ref 1013378 // AlgorithmParameters
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1025026 "CipherAdapter"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"deprecation\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3366146 // <generalisation>
	  relation 3366146 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3366146 // <generalisation>
	    b parent class_ref 1024642 // SignatureSpi
	end

	attribute 1858818 "cipher"
	  const_attribute private explicit_type "Cipher"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3366274 // data (<unidirectional association>)
	  relation 3366274 --->
	    a role_name "data" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3366274 // data (<unidirectional association>)
	    b parent class_ref 173698 // ByteArrayOutputStream
	end

	operation 8011522 "CipherAdapter"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "cipher" explicit_type "Cipher"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8011650 "engineInitVerify"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "publicKey" type class_ref 765826 // PublicKey
	  nexceptions 1
	    exception class_ref 1017346 // InvalidKeyException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8011778 "engineInitSign"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "privateKey" type class_ref 767362 // PrivateKey
	  nexceptions 1
	    exception class_ref 1017346 // InvalidKeyException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8011906 "engineInitSign"
	  protected explicit_return_type "void"
	  nparams 2
	    param inout name "privateKey" type class_ref 767362 // PrivateKey
	    param inout name "random" type class_ref 753154 // SecureRandom
	  nexceptions 1
	    exception class_ref 1017346 // InvalidKeyException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8012034 "engineUpdate"
	  protected explicit_return_type "void"
	  nparams 1
	    param in name "b" explicit_type "byte"
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8012162 "engineUpdate"
	  protected explicit_return_type "void"
	  nparams 3
	    param inout name "b" explicit_type "byte"
	  multiplicity "[]"
	    param in name "off" explicit_type "int"
	    param in name "len" explicit_type "int"
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8012290 "engineSign"
	  protected explicit_return_type "byte"
	  nparams 0
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8012418 "engineVerify"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param inout name "sigBytes" explicit_type "byte"
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 1024770 // SignatureException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8012546 "engineSetParameter"
	  protected explicit_return_type "void"
	  nparams 2
	    param inout name "param" type class_ref 128130 // String
	    param inout name "value" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 1017474 // InvalidParameterException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8012674 "engineGetParameter"
	  protected return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "param" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 1017474 // InvalidParameterException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 765826 "PublicKey"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A public key. This interface contains no methods or constants.
It merely serves to group (and provide type safety for) all public key
interfaces.

Note: The specialized public key interfaces extend this interface.
See, for example, the DSAPublicKey interface in
{@code java.security.interfaces}.

@see Key
@see PrivateKey
@see Certificate
@see Signature#initVerify
@see java.security.interfaces.DSAPublicKey
@see java.security.interfaces.RSAPublicKey

"
      classrelation 3361026 // <generalisation>
	relation 3361026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3361026 // <generalisation>
	  b parent class_ref 753026 // Key
      end

      attribute 1853314 "serialVersionUID"
	class_attribute const_attribute public explicit_type "long"
	init_value " 7187392471159151072L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Declare serialVersionUID to be compatible with JDK1.1

The class fingerprint that is set to indicate serialization
compatibility with a previous version of the class.

"
      end
    end

    class 767362 "PrivateKey"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A private key.
The purpose of this interface is to group (and provide type safety
for) all private key interfaces.
<p>
Note: The specialized private key interfaces extend this interface.
See, for example, the {@code DSAPrivateKey} interface in
{@link java.security.interfaces}.
<p>
Implementations should override the default {@code destroy} and
{@code isDestroyed} methods from the
{@link javax.security.auth.Destroyable} interface to enable
sensitive key information to be destroyed, cleared, or in the case
where such information is immutable, unreferenced.
Finally, since {@code PrivateKey} is {@code Serializable}, implementations
should also override
{@link java.io.ObjectOutputStream#writeObject(java.lang.Object)}
to prevent keys that have been destroyed from being serialized.

@see Key
@see PublicKey
@see Certificate
@see Signature#initVerify
@see java.security.interfaces.DSAPrivateKey
@see java.security.interfaces.RSAPrivateKey
@see java.security.interfaces.RSAPrivateCrtKey

@author Benjamin Renaud
@author Josh Bloch
"
      classrelation 3358978 // <generalisation>
	relation 3358978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3358978 // <generalisation>
	  b parent class_ref 753026 // Key
      end

      classrelation 3359106 // <generalisation>
	relation 3359106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3359106 // <generalisation>
	  b parent class_ref 1019266 // Destroyable
      end

      attribute 1852418 "serialVersionUID"
	class_attribute const_attribute public explicit_type "long"
	init_value " 6034044314589513430L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Declare serialVersionUID to be compatible with JDK1.1

The class fingerprint that is set to indicate serialization
compatibility with a previous version of the class.

"
      end
    end

    class 769922 "KeyStore"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a storage facility for cryptographic
keys and certificates.

<p> A {@code KeyStore} manages different types of entries.
Each type of entry implements the {@code KeyStore.Entry} interface.
Three basic {@code KeyStore.Entry} implementations are provided:

<ul>
<li><b>KeyStore.PrivateKeyEntry</b>
<p> This type of entry holds a cryptographic {@code PrivateKey},
which is optionally stored in a protected format to prevent
unauthorized access.  It is also accompanied by a certificate chain
for the corresponding public key.

<p> Private keys and certificate chains are used by a given entity for
self-authentication. Applications for this authentication include software
distribution organizations which sign JAR files as part of releasing
and/or licensing software.

<li><b>KeyStore.SecretKeyEntry</b>
<p> This type of entry holds a cryptographic {@code SecretKey},
which is optionally stored in a protected format to prevent
unauthorized access.

<li><b>KeyStore.TrustedCertificateEntry</b>
<p> This type of entry contains a single public key {@code Certificate}
belonging to another party. It is called a <i>trusted certificate</i>
because the keystore owner trusts that the public key in the certificate
indeed belongs to the identity identified by the <i>subject</i> (owner)
of the certificate.

<p>This type of entry can be used to authenticate other parties.
</ul>

<p> Each entry in a keystore is identified by an \"alias\" string. In the
case of private keys and their associated certificate chains, these strings
distinguish among the different ways in which the entity may authenticate
itself. For example, the entity may authenticate itself using different
certificate authorities, or using different public key algorithms.

<p> Whether aliases are case sensitive is implementation dependent. In order
to avoid problems, it is recommended not to use aliases in a KeyStore that
only differ in case.

<p> Whether keystores are persistent, and the mechanisms used by the
keystore if it is persistent, are not specified here. This allows
use of a variety of techniques for protecting sensitive (e.g., private or
secret) keys. Smart cards or other integrated cryptographic engines
(SafeKeyper) are one option, and simpler mechanisms such as files may also
be used (in a variety of formats).

<p> Typical ways to request a KeyStore object include
relying on the default type and providing a specific keystore type.

<ul>
<li>To rely on the default type:
<pre>
   KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());
</pre>
The system will return a keystore implementation for the default type.

<li>To provide a specific keystore type:
<pre>
     KeyStore ks = KeyStore.getInstance(\"JKS\");
</pre>
The system will return the most preferred implementation of the
specified keystore type available in the environment. <p>
</ul>

<p> Before a keystore can be accessed, it must be
{@link #load(java.io.InputStream, char[]) loaded}.
<pre>
   KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());

   // get user password and file input stream
   char[] password = getPassword();

   try (FileInputStream fis = new FileInputStream(\"keyStoreName\")) {
       ks.load(fis, password);
   }
</pre>

To create an empty keystore using the above {@code load} method,
pass {@code null} as the {@code InputStream} argument.

<p> Once the keystore has been loaded, it is possible
to read existing entries from the keystore, or to write new entries
into the keystore:
<pre>
   KeyStore.ProtectionParameter protParam =
       new KeyStore.PasswordProtection(password);

   // get my private key
   KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry)
       ks.getEntry(\"privateKeyAlias\", protParam);
   PrivateKey myPrivateKey = pkEntry.getPrivateKey();

   // save my secret key
   javax.crypto.SecretKey mySecretKey;
   KeyStore.SecretKeyEntry skEntry =
       new KeyStore.SecretKeyEntry(mySecretKey);
   ks.setEntry(\"secretKeyAlias\", skEntry, protParam);

   // store away the keystore
   try (FileOutputStream fos = new FileOutputStream(\"newKeyStoreName\")) {
       ks.store(fos, password);
   }
</pre>

Note that although the same password may be used to
load the keystore, to protect the private key entry,
to protect the secret key entry, and to store the keystore
(as is shown in the sample code above),
different passwords or other protection parameters
may also be used.

<p> Every implementation of the Java platform is required to support
the following standard {@code KeyStore} type:
<ul>
<li>{@code PKCS12}</li>
</ul>
This type is described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore\">
KeyStore section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other types are supported.

@author Jan Luehe

@see java.security.PrivateKey
@see javax.crypto.SecretKey
@see java.security.cert.Certificate

@since 1.2
"
      class 1016706 "ProtectionParameter"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      attribute 1849346 "pdebug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "
                        Debug.getInstance(\"provider\", \"Provider\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1849474 "skipDebug"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        Debug.isOn(\"engine=\") && !Debug.isOn(\"keystore\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3350658 // KEYSTORE_TYPE (<unidirectional association>)
	relation 3350658 --->
	  a role_name "KEYSTORE_TYPE" init_value " \"keystore.type\"" class_relation const_relation private
	    comment "
Constant to lookup in the Security properties file to determine
the default keystore type.
In the Security properties file, the default keystore type is given as:
<pre>
keystore.type=jks
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3350658 // KEYSTORE_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3350786 // type (<unidirectional association>)
	relation 3350786 --->
	  a role_name "type" private
	    comment " The keystore type
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3350786 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3350914 // provider (<unidirectional association>)
	relation 3350914 --->
	  a role_name "provider" private
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3350914 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3351042 // keyStoreSpi (<unidirectional association>)
	relation 3351042 --->
	  a role_name "keyStoreSpi" private
	    comment " The provider implementation
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3351042 // keyStoreSpi (<unidirectional association>)
	  b parent class_ref 1018882 // KeyStoreSpi
      end

      attribute 1849602 "initialized"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Has this keystore been initialized (loaded)?
"
      end

      class 1019010 "LoadStoreParameter"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7960066 "getProtectionParameter"
	  public return_type class_ref 1016706 // ProtectionParameter
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the parameter used to protect keystore data.

@return the parameter used to protect keystore data, or null
"
	end
      end

      class 1019138 "PasswordProtection"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3351170 // <realization>
	  relation 3351170 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3351170 // <realization>
	    b parent class_ref 1016706 // ProtectionParameter
	end

	classrelation 3351298 // <realization>
	  relation 3351298 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3351298 // <realization>
	    b parent class_ref 1019266 // Destroyable
	end

	attribute 1849730 "password"
	  const_attribute private explicit_type "char"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3351426 // protectionAlgorithm (<unidirectional association>)
	  relation 3351426 --->
	    a role_name "protectionAlgorithm" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3351426 // protectionAlgorithm (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3351554 // protectionParameters (<unidirectional association>)
	  relation 3351554 --->
	    a role_name "protectionParameters" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3351554 // protectionParameters (<unidirectional association>)
	    b parent class_ref 753282 // AlgorithmParameterSpec
	end

	attribute 1849858 "destroyed"
	  volatile private explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7960450 "PasswordProtection"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "password" explicit_type "char"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a password parameter.

<p> The specified {@code password} is cloned before it is stored
in the new {@code PasswordProtection} object.

@param password the password, which may be {@code null}
"
	end

	operation 7960578 "PasswordProtection"
	  public explicit_return_type ""
	  nparams 3
	    param inout name "password" explicit_type "char"
	  multiplicity "[]"
	    param inout name "protectionAlgorithm" type class_ref 128130 // String
	    param inout name "protectionParameters" type class_ref 753282 // AlgorithmParameterSpec
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a password parameter and specifies the protection algorithm
and associated parameters to use when encrypting a keystore entry.
<p>
The specified {@code password} is cloned before it is stored in the
new {@code PasswordProtection} object.

@param password the password, which may be {@code null}
@param protectionAlgorithm the encryption algorithm name, for
    example, {@code PBEWithHmacSHA256AndAES_256}.
    See the Cipher section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#Cipher\">
Java Cryptography Architecture Standard Algorithm Name
Documentation</a>
    for information about standard encryption algorithm names.
@param protectionParameters the encryption algorithm parameter
    specification, which may be {@code null}
@exception NullPointerException if {@code protectionAlgorithm} is
    {@code null}

@since 1.8
"
	end

	operation 7960706 "getProtectionAlgorithm"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the name of the protection algorithm.
If none was set then the keystore provider will use its default
protection algorithm. The name of the default protection algorithm
for a given keystore type is set using the
{@code 'keystore.<type>.keyProtectionAlgorithm'} security property.
For example, the
{@code keystore.PKCS12.keyProtectionAlgorithm} property stores the
name of the default key protection algorithm used for PKCS12
keystores. If the security property is not set, an
implementation-specific algorithm will be used.

@return the algorithm name, or {@code null} if none was set

@since 1.8
"
	end

	operation 7960834 "getProtectionParameters"
	  public return_type class_ref 753282 // AlgorithmParameterSpec
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the parameters supplied for the protection algorithm.

@return the algorithm parameter specification, or {@code  null},
    if none was set

@since 1.8
"
	end

	operation 7960962 "getPassword"
	  public explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the password.

<p>Note that this method returns a reference to the password.
If a clone of the array is created it is the caller's
responsibility to zero out the password information
after it is no longer needed.

@see #destroy()
@return the password, which may be {@code null}
@exception IllegalStateException if the password has
             been cleared (destroyed)
"
	end

	operation 7961090 "destroy"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 1019394 // DestroyFailedException
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Clears the password.

@exception DestroyFailedException if this method was unable
     to clear the password
"
	end

	operation 7961218 "isDestroyed"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Determines if password has been cleared.

@return true if the password has been cleared, false otherwise
"
	end
      end

      class 1019522 "CallbackHandlerProtection"
	visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3351682 // <realization>
	  relation 3351682 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3351682 // <realization>
	    b parent class_ref 1016706 // ProtectionParameter
	end

	classrelation 3351810 // handler (<unidirectional association>)
	  relation 3351810 --->
	    a role_name "handler" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3351810 // handler (<unidirectional association>)
	    b parent class_ref 507778 // CallbackHandler
	end

	operation 7961346 "CallbackHandlerProtection"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "handler" type class_ref 507778 // CallbackHandler
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new CallbackHandlerProtection from a
CallbackHandler.

@param handler the CallbackHandler
@exception NullPointerException if handler is null
"
	end

	operation 7961474 "getCallbackHandler"
	  public return_type class_ref 507778 // CallbackHandler
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the CallbackHandler.

@return the CallbackHandler.
"
	end
      end

      class 1019650 "Entry"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	class 1019778 "Attribute"
	  visibility public stereotype "interface"
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  operation 7961730 "getName"
	    public return_type class_ref 128130 // String
	    nparams 0
	    
	    java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Returns the attribute's name.

@return the attribute name
"
	  end

	  operation 7961858 "getValue"
	    public return_type class_ref 128130 // String
	    nparams 0
	    
	    java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Returns the attribute's value.
Multi-valued attributes encode their values as a single string.

@return the attribute value
"
	  end
	end

	operation 7961602 "getAttributes"
	  public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Retrieves the attributes associated with an entry.
<p>
The default implementation returns an empty {@code Set}.

@return an unmodifiable {@code Set} of attributes, possibly empty

@since 1.8
"
	end
      end

      class 1019906 "PrivateKeyEntry"
	visibility public 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3351938 // <realization>
	  relation 3351938 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3351938 // <realization>
	    b parent class_ref 1019650 // Entry
	end

	classrelation 3352066 // privKey (<unidirectional association>)
	  relation 3352066 --->
	    a role_name "privKey" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3352066 // privKey (<unidirectional association>)
	    b parent class_ref 767362 // PrivateKey
	end

	classrelation 3352194 // chain (<unidirectional association>)
	  relation 3352194 --->
	    a role_name "chain" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3352194 // chain (<unidirectional association>)
	    b parent class_ref 833154 // Certificate
	end

	classrelation 3352322 // attributes (<unidirectional association>)
	  relation 3352322 --->
	    a role_name "attributes" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Attribute> ${name}${value};
"
	      classrelation_ref 3352322 // attributes (<unidirectional association>)
	    b parent class_ref 192258 // Set
	end

	operation 7961986 "PrivateKeyEntry"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "privateKey" type class_ref 767362 // PrivateKey
	    param inout name "chain" type class_ref 833154 // Certificate
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a {@code PrivateKeyEntry} with a
{@code PrivateKey} and corresponding certificate chain.

<p> The specified {@code chain} is cloned before it is stored
in the new {@code PrivateKeyEntry} object.

@param privateKey the {@code PrivateKey}
@param chain an array of {@code Certificate}s
     representing the certificate chain.
     The chain must be ordered and contain a
     {@code Certificate} at index 0
     corresponding to the private key.

@exception NullPointerException if
     {@code privateKey} or {@code chain}
     is {@code null}
@exception IllegalArgumentException if the specified chain has a
     length of 0, if the specified chain does not contain
     {@code Certificate}s of the same type,
     or if the {@code PrivateKey} algorithm
     does not match the algorithm of the {@code PublicKey}
     in the end entity {@code Certificate} (at index 0)
"
	end

	operation 7962114 "PrivateKeyEntry"
	  public explicit_return_type ""
	  nparams 3
	    param inout name "privateKey" type class_ref 767362 // PrivateKey
	    param inout name "chain" type class_ref 833154 // Certificate
	  multiplicity "[]"
	    param inout name "attributes" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}<Attribute> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a {@code PrivateKeyEntry} with a {@code PrivateKey} and
corresponding certificate chain and associated entry attributes.

<p> The specified {@code chain} and {@code attributes} are cloned
before they are stored in the new {@code PrivateKeyEntry} object.

@param privateKey the {@code PrivateKey}
@param chain an array of {@code Certificate}s
     representing the certificate chain.
     The chain must be ordered and contain a
     {@code Certificate} at index 0
     corresponding to the private key.
@param attributes the attributes

@exception NullPointerException if {@code privateKey}, {@code chain}
     or {@code attributes} is {@code null}
@exception IllegalArgumentException if the specified chain has a
     length of 0, if the specified chain does not contain
     {@code Certificate}s of the same type,
     or if the {@code PrivateKey} algorithm
     does not match the algorithm of the {@code PublicKey}
     in the end entity {@code Certificate} (at index 0)

@since 1.8
"
	end

	operation 7962242 "getPrivateKey"
	  public return_type class_ref 767362 // PrivateKey
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the {@code PrivateKey} from this entry.

@return the {@code PrivateKey} from this entry
"
	end

	operation 7962370 "getCertificateChain"
	  public return_type class_ref 833154 // Certificate
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the {@code Certificate} chain from this entry.

<p> The stored chain is cloned before being returned.

@return an array of {@code Certificate}s corresponding
     to the certificate chain for the public key.
     If the certificates are of type X.509,
     the runtime type of the returned array is
     {@code X509Certificate[]}.
"
	end

	operation 7962498 "getCertificate"
	  public return_type class_ref 833154 // Certificate
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the end entity {@code Certificate}
from the certificate chain in this entry.

@return the end entity {@code Certificate} (at index 0)
     from the certificate chain in this entry.
     If the certificate is of type X.509,
     the runtime type of the returned certificate is
     {@code X509Certificate}.
"
	end

	operation 7962626 "getAttributes"
	  public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Retrieves the attributes associated with an entry.
<p>

@return an unmodifiable {@code Set} of attributes, possibly empty

@since 1.8
"
	end

	operation 7962754 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a string representation of this PrivateKeyEntry.
@return a string representation of this PrivateKeyEntry.
"
	end
      end

      class 1020034 "SecretKeyEntry"
	visibility public 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3352450 // <realization>
	  relation 3352450 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3352450 // <realization>
	    b parent class_ref 1019650 // Entry
	end

	attribute 1849986 "sKey"
	  const_attribute private explicit_type "SecretKey"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3352578 // attributes (<unidirectional association>)
	  relation 3352578 --->
	    a role_name "attributes" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Attribute> ${name}${value};
"
	      classrelation_ref 3352578 // attributes (<unidirectional association>)
	    b parent class_ref 192258 // Set
	end

	operation 7962882 "SecretKeyEntry"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "secretKey" explicit_type "SecretKey"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a {@code SecretKeyEntry} with a
{@code SecretKey}.

@param secretKey the {@code SecretKey}

@exception NullPointerException if {@code secretKey}
     is {@code null}
"
	end

	operation 7963010 "SecretKeyEntry"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "secretKey" explicit_type "SecretKey"
	    param inout name "attributes" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Attribute> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a {@code SecretKeyEntry} with a {@code SecretKey} and
associated entry attributes.

<p> The specified {@code attributes} is cloned before it is stored
in the new {@code SecretKeyEntry} object.

@param secretKey the {@code SecretKey}
@param attributes the attributes

@exception NullPointerException if {@code secretKey} or
    {@code attributes} is {@code null}

@since 1.8
"
	end

	operation 7963138 "getSecretKey"
	  public explicit_return_type "SecretKey"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the {@code SecretKey} from this entry.

@return the {@code SecretKey} from this entry
"
	end

	operation 7963266 "getAttributes"
	  public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Retrieves the attributes associated with an entry.
<p>

@return an unmodifiable {@code Set} of attributes, possibly empty

@since 1.8
"
	end

	operation 7963394 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a string representation of this SecretKeyEntry.
@return a string representation of this SecretKeyEntry.
"
	end
      end

      class 1020162 "TrustedCertificateEntry"
	visibility public 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3352706 // <realization>
	  relation 3352706 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3352706 // <realization>
	    b parent class_ref 1019650 // Entry
	end

	classrelation 3352834 // cert (<unidirectional association>)
	  relation 3352834 --->
	    a role_name "cert" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3352834 // cert (<unidirectional association>)
	    b parent class_ref 833154 // Certificate
	end

	classrelation 3352962 // attributes (<unidirectional association>)
	  relation 3352962 --->
	    a role_name "attributes" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Attribute> ${name}${value};
"
	      classrelation_ref 3352962 // attributes (<unidirectional association>)
	    b parent class_ref 192258 // Set
	end

	operation 7963522 "TrustedCertificateEntry"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "trustedCert" type class_ref 833154 // Certificate
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a {@code TrustedCertificateEntry} with a
trusted {@code Certificate}.

@param trustedCert the trusted {@code Certificate}

@exception NullPointerException if
     {@code trustedCert} is {@code null}
"
	end

	operation 7963650 "TrustedCertificateEntry"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "trustedCert" type class_ref 833154 // Certificate
	    param inout name "attributes" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Attribute> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a {@code TrustedCertificateEntry} with a
trusted {@code Certificate} and associated entry attributes.

<p> The specified {@code attributes} is cloned before it is stored
in the new {@code TrustedCertificateEntry} object.

@param trustedCert the trusted {@code Certificate}
@param attributes the attributes

@exception NullPointerException if {@code trustedCert} or
    {@code attributes} is {@code null}

@since 1.8
"
	end

	operation 7963778 "getTrustedCertificate"
	  public return_type class_ref 833154 // Certificate
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the trusted {@code Certficate} from this entry.

@return the trusted {@code Certificate} from this entry
"
	end

	operation 7963906 "getAttributes"
	  public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Attribute> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Retrieves the attributes associated with an entry.
<p>

@return an unmodifiable {@code Set} of attributes, possibly empty

@since 1.8
"
	end

	operation 7964034 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a string representation of this TrustedCertificateEntry.
@return a string representation of this TrustedCertificateEntry.
"
	end
      end

      operation 7964162 "KeyStore"
	protected explicit_return_type ""
	nparams 3
	  param inout name "keyStoreSpi" type class_ref 1018882 // KeyStoreSpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "type" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a KeyStore object of the given type, and encapsulates the given
provider implementation (SPI object) in it.

@param keyStoreSpi the provider implementation.
@param provider the provider.
@param type the keystore type.
"
      end

      operation 7964290 "getInstance"
	class_operation public return_type class_ref 769922 // KeyStore
	nparams 1
	  param inout name "type" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a keystore object of the specified type.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new KeyStore object encapsulating the
KeyStoreSpi implementation from the first
Provider that supports the specified type is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param type the type of keystore.
See the KeyStore section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard keystore types.

@return a keystore object of the specified type.

@exception KeyStoreException if no Provider supports a
         KeyStoreSpi implementation for the
         specified type.

@see Provider
"
      end

      operation 7964418 "getInstance"
	class_operation public return_type class_ref 769922 // KeyStore
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 770050 // KeyStoreException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a keystore object of the specified type.

<p> A new KeyStore object encapsulating the
KeyStoreSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param type the type of keystore.
See the KeyStore section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard keystore types.

@param provider the name of the provider.

@return a keystore object of the specified type.

@exception KeyStoreException if a KeyStoreSpi
         implementation for the specified type is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see Provider
"
      end

      operation 7964546 "getInstance"
	class_operation public return_type class_ref 769922 // KeyStore
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a keystore object of the specified type.

<p> A new KeyStore object encapsulating the
KeyStoreSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param type the type of keystore.
See the KeyStore section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyStore\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard keystore types.

@param provider the provider.

@return a keystore object of the specified type.

@exception KeyStoreException if KeyStoreSpi
         implementation for the specified type is not available
         from the specified Provider object.

@exception IllegalArgumentException if the specified provider is null.

@see Provider

@since 1.4
"
      end

      operation 7964674 "getDefaultType"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default keystore type as specified by the
{@code keystore.type} security property, or the string
{@literal \"jks\"} (acronym for {@literal \"Java keystore\"})
if no such property exists.

<p>The default keystore type can be used by applications that do not
want to use a hard-coded keystore type when calling one of the
{@code getInstance} methods, and want to provide a default keystore
type in case a user does not specify its own.

<p>The default keystore type can be changed by setting the value of the
{@code keystore.type} security property to the desired keystore type.

@return the default keystore type as specified by the
{@code keystore.type} security property, or the string {@literal \"jks\"}
if no such property exists.
@see java.security.Security security properties
"
      end

      operation 7964802 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this keystore.

@return the provider of this keystore.
"
      end

      operation 7964930 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this keystore.

@return the type of this keystore.
"
      end

      operation 7965058 "getKey"
	public return_type class_ref 753026 // Key
	nparams 2
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 770050 // KeyStoreException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1020290 // UnrecoverableKeyException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the key associated with the given alias, using the given
password to recover it.  The key must have been associated with
the alias by a call to {@code setKeyEntry},
or by a call to {@code setEntry} with a
{@code PrivateKeyEntry} or {@code SecretKeyEntry}.

@param alias the alias name
@param password the password for recovering the key

@return the requested key, or null if the given alias does not exist
or does not identify a key-related entry.

@exception KeyStoreException if the keystore has not been initialized
(loaded).
@exception NoSuchAlgorithmException if the algorithm for recovering the
key cannot be found
@exception UnrecoverableKeyException if the key cannot be recovered
(e.g., the given password is wrong).
"
      end

      operation 7965186 "getCertificateChain"
	public return_type class_ref 833154 // Certificate
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificate chain associated with the given alias.
The certificate chain must have been associated with the alias
by a call to {@code setKeyEntry},
or by a call to {@code setEntry} with a
{@code PrivateKeyEntry}.

@param alias the alias name

@return the certificate chain (ordered with the user's certificate first
followed by zero or more certificate authorities), or null if the given alias
does not exist or does not contain a certificate chain

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7965314 "getCertificate"
	public return_type class_ref 833154 // Certificate
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificate associated with the given alias.

<p> If the given alias name identifies an entry
created by a call to {@code setCertificateEntry},
or created by a call to {@code setEntry} with a
{@code TrustedCertificateEntry},
then the trusted certificate contained in that entry is returned.

<p> If the given alias name identifies an entry
created by a call to {@code setKeyEntry},
or created by a call to {@code setEntry} with a
{@code PrivateKeyEntry},
then the first element of the certificate chain in that entry
is returned.

@param alias the alias name

@return the certificate, or null if the given alias does not exist or
does not contain a certificate.

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7965442 "getCreationDate"
	public return_type class_ref 521474 // Date
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the creation date of the entry identified by the given alias.

@param alias the alias name

@return the creation date of this entry, or null if the given alias does
not exist

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7965570 "setKeyEntry"
	public explicit_return_type "void"
	nparams 4
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "key" type class_ref 753026 // Key
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	  param inout name "chain" type class_ref 833154 // Certificate
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the given key to the given alias, protecting it with the given
password.

<p>If the given key is of type {@code java.security.PrivateKey},
it must be accompanied by a certificate chain certifying the
corresponding public key.

<p>If the given alias already exists, the keystore information
associated with it is overridden by the given key (and possibly
certificate chain).

@param alias the alias name
@param key the key to be associated with the alias
@param password the password to protect the key
@param chain the certificate chain for the corresponding public
key (only required if the given key is of type
{@code java.security.PrivateKey}).

@exception KeyStoreException if the keystore has not been initialized
(loaded), the given key cannot be protected, or this operation fails
for some other reason
"
      end

      operation 7965698 "setKeyEntry"
	public explicit_return_type "void"
	nparams 3
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "key" explicit_type "byte"
	multiplicity "[]"
	  param inout name "chain" type class_ref 833154 // Certificate
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the given key (that has already been protected) to the given
alias.

<p>If the protected key is of type
{@code java.security.PrivateKey}, it must be accompanied by a
certificate chain certifying the corresponding public key. If the
underlying keystore implementation is of type {@code jks},
{@code key} must be encoded as an
{@code EncryptedPrivateKeyInfo} as defined in the PKCS #8 standard.

<p>If the given alias already exists, the keystore information
associated with it is overridden by the given key (and possibly
certificate chain).

@param alias the alias name
@param key the key (in protected format) to be associated with the alias
@param chain the certificate chain for the corresponding public
         key (only useful if the protected key is of type
         {@code java.security.PrivateKey}).

@exception KeyStoreException if the keystore has not been initialized
(loaded), or if this operation fails for some other reason.
"
      end

      operation 7965826 "setCertificateEntry"
	public explicit_return_type "void"
	nparams 2
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "cert" type class_ref 833154 // Certificate
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the given trusted certificate to the given alias.

<p> If the given alias identifies an existing entry
created by a call to {@code setCertificateEntry},
or created by a call to {@code setEntry} with a
{@code TrustedCertificateEntry},
the trusted certificate in the existing entry
is overridden by the given certificate.

@param alias the alias name
@param cert the certificate

@exception KeyStoreException if the keystore has not been initialized,
or the given alias already exists and does not identify an
entry containing a trusted certificate,
or this operation fails for some other reason.
"
      end

      operation 7965954 "deleteEntry"
	public explicit_return_type "void"
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the entry identified by the given alias from this keystore.

@param alias the alias name

@exception KeyStoreException if the keystore has not been initialized,
or if the entry cannot be removed.
"
      end

      operation 7966082 "aliases"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lists all the alias names of this keystore.

@return enumeration of the alias names

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7966210 "containsAlias"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the given alias exists in this keystore.

@param alias the alias name

@return true if the alias exists, false otherwise

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7966338 "size"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of entries in this keystore.

@return the number of entries in this keystore

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7966466 "isKeyEntry"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the entry identified by the given alias
was created by a call to {@code setKeyEntry},
or created by a call to {@code setEntry} with a
{@code PrivateKeyEntry} or a {@code SecretKeyEntry}.

@param alias the alias for the keystore entry to be checked

@return true if the entry identified by the given alias is a
key-related entry, false otherwise.

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7966594 "isCertificateEntry"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the entry identified by the given alias
was created by a call to {@code setCertificateEntry},
or created by a call to {@code setEntry} with a
{@code TrustedCertificateEntry}.

@param alias the alias for the keystore entry to be checked

@return true if the entry identified by the given alias contains a
trusted certificate, false otherwise.

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7966722 "getCertificateAlias"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cert" type class_ref 833154 // Certificate
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the (alias) name of the first keystore entry whose certificate
matches the given certificate.

<p> This method attempts to match the given certificate with each
keystore entry. If the entry being considered was
created by a call to {@code setCertificateEntry},
or created by a call to {@code setEntry} with a
{@code TrustedCertificateEntry},
then the given certificate is compared to that entry's certificate.

<p> If the entry being considered was
created by a call to {@code setKeyEntry},
or created by a call to {@code setEntry} with a
{@code PrivateKeyEntry},
then the given certificate is compared to the first
element of that entry's certificate chain.

@param cert the certificate to match with.

@return the alias name of the first entry with a matching certificate,
or null if no such entry exists in this keystore.

@exception KeyStoreException if the keystore has not been initialized
(loaded).
"
      end

      operation 7966850 "store"
	public explicit_return_type "void"
	nparams 2
	  param inout name "stream" type class_ref 151298 // OutputStream
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	nexceptions 4
	  exception class_ref 770050 // KeyStoreException
	  exception class_ref 146818 // IOException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores this keystore to the given output stream, and protects its
integrity with the given password.

@param stream the output stream to which this keystore is written.
@param password the password to generate the keystore integrity check

@exception KeyStoreException if the keystore has not been initialized
(loaded).
@exception IOException if there was an I/O problem with data
@exception NoSuchAlgorithmException if the appropriate data integrity
algorithm could not be found
@exception CertificateException if any of the certificates included in
the keystore data could not be stored
"
      end

      operation 7966978 "store"
	public explicit_return_type "void"
	nparams 1
	  param inout name "param" type class_ref 1019010 // LoadStoreParameter
	nexceptions 4
	  exception class_ref 770050 // KeyStoreException
	  exception class_ref 146818 // IOException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores this keystore using the given {@code LoadStoreParameter}.

@param param the {@code LoadStoreParameter}
         that specifies how to store the keystore,
         which may be {@code null}

@exception IllegalArgumentException if the given
         {@code LoadStoreParameter}
         input is not recognized
@exception KeyStoreException if the keystore has not been initialized
         (loaded)
@exception IOException if there was an I/O problem with data
@exception NoSuchAlgorithmException if the appropriate data integrity
         algorithm could not be found
@exception CertificateException if any of the certificates included in
         the keystore data could not be stored

@since 1.5
"
      end

      operation 7967106 "load"
	public explicit_return_type "void"
	nparams 2
	  param inout name "stream" type class_ref 146434 // InputStream
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads this KeyStore from the given input stream.

<p>A password may be given to unlock the keystore
(e.g. the keystore resides on a hardware token device),
or to check the integrity of the keystore data.
If a password is not given for integrity checking,
then integrity checking is not performed.

<p>In order to create an empty keystore, or if the keystore cannot
be initialized from a stream, pass {@code null}
as the {@code stream} argument.

<p> Note that if this keystore has already been loaded, it is
reinitialized and loaded again from the given input stream.

@param stream the input stream from which the keystore is loaded,
or {@code null}
@param password the password used to check the integrity of
the keystore, the password used to unlock the keystore,
or {@code null}

@exception IOException if there is an I/O or format problem with the
keystore data, if a password is required but not given,
or if the given password was incorrect. If the error is due to a
wrong password, the {@link Throwable#getCause cause} of the
{@code IOException} should be an
{@code UnrecoverableKeyException}
@exception NoSuchAlgorithmException if the algorithm used to check
the integrity of the keystore cannot be found
@exception CertificateException if any of the certificates in the
keystore could not be loaded
"
      end

      operation 7967234 "load"
	public explicit_return_type "void"
	nparams 1
	  param inout name "param" type class_ref 1019010 // LoadStoreParameter
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads this keystore using the given {@code LoadStoreParameter}.

<p> Note that if this KeyStore has already been loaded, it is
reinitialized and loaded again from the given parameter.

@param param the {@code LoadStoreParameter}
         that specifies how to load the keystore,
         which may be {@code null}

@exception IllegalArgumentException if the given
         {@code LoadStoreParameter}
         input is not recognized
@exception IOException if there is an I/O or format problem with the
         keystore data. If the error is due to an incorrect
        {@code ProtectionParameter} (e.g. wrong password)
        the {@link Throwable#getCause cause} of the
        {@code IOException} should be an
        {@code UnrecoverableKeyException}
@exception NoSuchAlgorithmException if the algorithm used to check
         the integrity of the keystore cannot be found
@exception CertificateException if any of the certificates in the
         keystore could not be loaded

@since 1.5
"
      end

      operation 7967362 "getEntry"
	public return_type class_ref 1019650 // Entry
	nparams 2
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "protParam" type class_ref 1016706 // ProtectionParameter
	nexceptions 3
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1020418 // UnrecoverableEntryException
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a keystore {@code Entry} for the specified alias
with the specified protection parameter.

@param alias get the keystore {@code Entry} for this alias
@param protParam the {@code ProtectionParameter}
         used to protect the {@code Entry},
         which may be {@code null}

@return the keystore {@code Entry} for the specified alias,
         or {@code null} if there is no such entry

@exception NullPointerException if
         {@code alias} is {@code null}
@exception NoSuchAlgorithmException if the algorithm for recovering the
         entry cannot be found
@exception UnrecoverableEntryException if the specified
         {@code protParam} were insufficient or invalid
@exception UnrecoverableKeyException if the entry is a
         {@code PrivateKeyEntry} or {@code SecretKeyEntry}
         and the specified {@code protParam} does not contain
         the information needed to recover the key (e.g. wrong password)
@exception KeyStoreException if the keystore has not been initialized
         (loaded).
@see #setEntry(String, KeyStore.Entry, KeyStore.ProtectionParameter)

@since 1.5
"
      end

      operation 7967490 "setEntry"
	public explicit_return_type "void"
	nparams 3
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "entry" type class_ref 1019650 // Entry
	  param inout name "protParam" type class_ref 1016706 // ProtectionParameter
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves a keystore {@code Entry} under the specified alias.
The protection parameter is used to protect the
{@code Entry}.

<p> If an entry already exists for the specified alias,
it is overridden.

@param alias save the keystore {@code Entry} under this alias
@param entry the {@code Entry} to save
@param protParam the {@code ProtectionParameter}
         used to protect the {@code Entry},
         which may be {@code null}

@exception NullPointerException if
         {@code alias} or {@code entry}
         is {@code null}
@exception KeyStoreException if the keystore has not been initialized
         (loaded), or if this operation fails for some other reason

@see #getEntry(String, KeyStore.ProtectionParameter)

@since 1.5
"
      end

      operation 7967618 "entryInstanceOf"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "entryClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends KeyStore.Entry> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the keystore {@code Entry} for the specified
{@code alias} is an instance or subclass of the specified
{@code entryClass}.

@param alias the alias name
@param entryClass the entry class

@return true if the keystore {@code Entry} for the specified
         {@code alias} is an instance or subclass of the
         specified {@code entryClass}, false otherwise

@exception NullPointerException if
         {@code alias} or {@code entryClass}
         is {@code null}
@exception KeyStoreException if the keystore has not been
         initialized (loaded)

@since 1.5
"
      end

      class 1020546 "Builder"
	abstract visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1850114 "MAX_CALLBACK_TRIES"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " maximum times to try the callbackhandler if the password is wrong
"
	end

	operation 7967746 "Builder"
	  protected explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new Builder.
"
	end

	operation 7967874 "getKeyStore"
	  abstract public return_type class_ref 769922 // KeyStore
	  nparams 0
	  nexceptions 1
	    exception class_ref 770050 // KeyStoreException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the KeyStore described by this object.

@return the {@code KeyStore} described by this object
@exception KeyStoreException if an error occurred during the
  operation, for example if the KeyStore could not be
  instantiated or loaded
"
	end

	operation 7968002 "getProtectionParameter"
	  abstract public return_type class_ref 1016706 // ProtectionParameter
	  nparams 1
	    param inout name "alias" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 770050 // KeyStoreException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the ProtectionParameters that should be used to obtain
the {@link KeyStore.Entry Entry} with the given alias.
The {@code getKeyStore} method must be invoked before this
method may be called.

@return the ProtectionParameters that should be used to obtain
  the {@link KeyStore.Entry Entry} with the given alias.
@param alias the alias of the KeyStore entry
@throws NullPointerException if alias is null
@throws KeyStoreException if an error occurred during the
  operation
@throws IllegalStateException if the getKeyStore method has
  not been invoked prior to calling this method
"
	end

	operation 7968130 "newInstance"
	  class_operation public return_type class_ref 1020546 // Builder
	  nparams 2
	    param in name "keyStore" type class_ref 769922 // KeyStore
	    param in name "protectionParameter" type class_ref 1016706 // ProtectionParameter
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new Builder that encapsulates the given KeyStore.
The {@linkplain #getKeyStore} method of the returned object
will return {@code keyStore}, the {@linkplain
#getProtectionParameter getProtectionParameter()} method will
return {@code protectionParameters}.

<p> This is useful if an existing KeyStore object needs to be
used with Builder-based APIs.

@return a new Builder object
@param keyStore the KeyStore to be encapsulated
@param protectionParameter the ProtectionParameter used to
  protect the KeyStore entries
@throws NullPointerException if keyStore or
  protectionParameters is null
@throws IllegalArgumentException if the keyStore has not been
  initialized
"
	end

	operation 7968258 "newInstance"
	  class_operation public return_type class_ref 1020546 // Builder
	  nparams 4
	    param inout name "type" type class_ref 128130 // String
	    param inout name "provider" type class_ref 509570 // Provider
	    param inout name "file" type class_ref 131970 // File
	    param inout name "protection" type class_ref 1016706 // ProtectionParameter
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new Builder object.

<p>The first call to the {@link #getKeyStore} method on the returned
builder will create a KeyStore of type {@code type} and call
its {@link KeyStore#load load()} method.
The {@code inputStream} argument is constructed from
{@code file}.
If {@code protection} is a
{@code PasswordProtection}, the password is obtained by
calling the {@code getPassword} method.
Otherwise, if {@code protection} is a
{@code CallbackHandlerProtection}, the password is obtained
by invoking the CallbackHandler.

<p>Subsequent calls to {@link #getKeyStore} return the same object
as the initial call. If the initial call to failed with a
KeyStoreException, subsequent calls also throw a
KeyStoreException.

<p>The KeyStore is instantiated from {@code provider} if
non-null. Otherwise, all installed providers are searched.

<p>Calls to {@link #getProtectionParameter getProtectionParameter()}
will return a {@link KeyStore.PasswordProtection PasswordProtection}
object encapsulating the password that was used to invoke the
{@code load} method.

<p><em>Note</em> that the {@link #getKeyStore} method is executed
within the {@link AccessControlContext} of the code invoking this
method.

@return a new Builder object
@param type the type of KeyStore to be constructed
@param provider the provider from which the KeyStore is to
  be instantiated (or null)
@param file the File that contains the KeyStore data
@param protection the ProtectionParameter securing the KeyStore data
@throws NullPointerException if type, file or protection is null
@throws IllegalArgumentException if protection is not an instance
  of either PasswordProtection or CallbackHandlerProtection; or
  if file does not exist or does not refer to a normal file
"
	end

	class 1020674 "FileBuilder"
	  visibility private 
	  cpp_decl ""
	  final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3353090 // <generalisation>
	    relation 3353090 ---|>
	      a public
		java "${type}"
		classrelation_ref 3353090 // <generalisation>
	      b parent class_ref 1020546 // Builder
	  end

	  classrelation 3353218 // type (<unidirectional association>)
	    relation 3353218 --->
	      a role_name "type" const_relation private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3353218 // type (<unidirectional association>)
	      b parent class_ref 128130 // String
	  end

	  classrelation 3353346 // provider (<unidirectional association>)
	    relation 3353346 --->
	      a role_name "provider" const_relation private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3353346 // provider (<unidirectional association>)
	      b parent class_ref 509570 // Provider
	  end

	  classrelation 3353474 // file (<unidirectional association>)
	    relation 3353474 --->
	      a role_name "file" const_relation private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3353474 // file (<unidirectional association>)
	      b parent class_ref 131970 // File
	  end

	  classrelation 3353602 // protection (<unidirectional association>)
	    relation 3353602 --->
	      a role_name "protection" private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3353602 // protection (<unidirectional association>)
	      b parent class_ref 1016706 // ProtectionParameter
	  end

	  classrelation 3353730 // keyProtection (<unidirectional association>)
	    relation 3353730 --->
	      a role_name "keyProtection" private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3353730 // keyProtection (<unidirectional association>)
	      b parent class_ref 1016706 // ProtectionParameter
	  end

	  classrelation 3353858 // context (<unidirectional association>)
	    relation 3353858 --->
	      a role_name "context" const_relation private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3353858 // context (<unidirectional association>)
	      b parent class_ref 129154 // AccessControlContext
	  end

	  classrelation 3353986 // keyStore (<unidirectional association>)
	    relation 3353986 --->
	      a role_name "keyStore" private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3353986 // keyStore (<unidirectional association>)
	      b parent class_ref 769922 // KeyStore
	  end

	  classrelation 3354114 // oldException (<unidirectional association>)
	    relation 3354114 --->
	      a role_name "oldException" private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 3354114 // oldException (<unidirectional association>)
	      b parent class_ref 129922 // Throwable
	  end

	  operation 7968386 "FileBuilder"
	    package explicit_return_type ""
	    nparams 5
	      param inout name "type" type class_ref 128130 // String
	      param inout name "provider" type class_ref 509570 // Provider
	      param inout name "file" type class_ref 131970 // File
	      param inout name "protection" type class_ref 1016706 // ProtectionParameter
	      param inout name "context" type class_ref 129154 // AccessControlContext
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 7968514 "getKeyStore"
	    public return_type class_ref 769922 // KeyStore
	    nparams 0
	    nexceptions 1
	      exception class_ref 770050 // KeyStoreException
	    
	    preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 7968642 "getProtectionParameter"
	    public return_type class_ref 1016706 // ProtectionParameter
	    nparams 1
	      param inout name "alias" type class_ref 128130 // String
	    
	    preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	operation 7968770 "newInstance"
	  class_operation public return_type class_ref 1020546 // Builder
	  nparams 3
	    param in name "type" type class_ref 128130 // String
	    param in name "provider" type class_ref 509570 // Provider
	    param in name "protection" type class_ref 1016706 // ProtectionParameter
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new Builder object.

<p>Each call to the {@link #getKeyStore} method on the returned
builder will return a new KeyStore object of type {@code type}.
Its {@link KeyStore#load(KeyStore.LoadStoreParameter) load()}
method is invoked using a
{@code LoadStoreParameter} that encapsulates
{@code protection}.

<p>The KeyStore is instantiated from {@code provider} if
non-null. Otherwise, all installed providers are searched.

<p>Calls to {@link #getProtectionParameter getProtectionParameter()}
will return {@code protection}.

<p><em>Note</em> that the {@link #getKeyStore} method is executed
within the {@link AccessControlContext} of the code invoking this
method.

@return a new Builder object
@param type the type of KeyStore to be constructed
@param provider the provider from which the KeyStore is to
  be instantiated (or null)
@param protection the ProtectionParameter securing the Keystore
@throws NullPointerException if type or protection is null
"
	end
      end

      class 1020802 "SimpleLoadStoreParameter"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3354242 // <realization>
	  relation 3354242 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3354242 // <realization>
	    b parent class_ref 1019010 // LoadStoreParameter
	end

	classrelation 3354370 // protection (<unidirectional association>)
	  relation 3354370 --->
	    a role_name "protection" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3354370 // protection (<unidirectional association>)
	    b parent class_ref 1016706 // ProtectionParameter
	end

	operation 7968898 "SimpleLoadStoreParameter"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "protection" type class_ref 1016706 // ProtectionParameter
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7969026 "getProtectionParameter"
	  public return_type class_ref 1016706 // ProtectionParameter
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 770050 "KeyStoreException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the generic KeyStore exception.

@author Jan Luehe


@since 1.2
"
      classrelation 3354498 // <generalisation>
	relation 3354498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3354498 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1850242 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1119353179322377262L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7969154 "KeyStoreException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a KeyStoreException with no detail message.  (A
detail message is a String that describes this particular
exception.)
"
      end

      operation 7969282 "KeyStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a KeyStoreException with the specified detail
message.  (A detail message is a String that describes this
particular exception.)

@param msg the detail message.
"
      end

      operation 7969410 "KeyStoreException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code KeyStoreException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7969538 "KeyStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code KeyStoreException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 781442 "SecurityPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is for security permissions.
A SecurityPermission contains a name (also referred to as a \"target name\")
but no actions list; you either have the named permission
or you don't.
<P>
The target name is the name of a security configuration parameter (see below).
Currently the SecurityPermission object is used to guard access
to the Policy, Security, Provider, Signer, and Identity
objects.
<P>
The following table lists all the possible SecurityPermission target names,
and for each provides a description of what the permission allows
and a discussion of the risks of granting code the permission.

<table border=1 cellpadding=5 summary=\"target name,what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>createAccessControlContext</td>
  <td>Creation of an AccessControlContext</td>
  <td>This allows someone to instantiate an AccessControlContext
with a {@code DomainCombiner}.  Extreme care must be taken when
granting this permission. Malicious code could create a DomainCombiner
that augments the set of permissions granted to code, and even grant the
code {@link java.security.AllPermission}.</td>
</tr>

<tr>
  <td>getDomainCombiner</td>
  <td>Retrieval of an AccessControlContext's DomainCombiner</td>
  <td>This allows someone to retrieve an AccessControlContext's
{@code DomainCombiner}.  Since DomainCombiners may contain
sensitive information, this could potentially lead to a privacy leak.</td>
</tr>

<tr>
  <td>getPolicy</td>
  <td>Retrieval of the system-wide security policy (specifically, of the
currently-installed Policy object)</td>
  <td>This allows someone to query the policy via the
{@code getPermissions} call,
which discloses which permissions would be granted to a given CodeSource.
While revealing the policy does not compromise the security of
the system, it does provide malicious code with additional information
which it may use to better aim an attack. It is wise
not to divulge more information than necessary.</td>
</tr>

<tr>
  <td>setPolicy</td>
  <td>Setting of the system-wide security policy (specifically,
the Policy object)</td>
  <td>Granting this permission is extremely dangerous, as malicious
code may grant itself all the necessary permissions it needs
to successfully mount an attack on the system.</td>
</tr>

<tr>
  <td>createPolicy.{policy type}</td>
  <td>Getting an instance of a Policy implementation from a provider</td>
  <td>Granting this permission enables code to obtain a Policy object.
Malicious code may query the Policy object to determine what permissions
have been granted to code other than itself. </td>
</tr>

<tr>
  <td>getProperty.{key}</td>
  <td>Retrieval of the security property with the specified key</td>
  <td>Depending on the particular key for which access has
been granted, the code may have access to the list of security
providers, as well as the location of the system-wide and user
security policies.  while revealing this information does not
compromise the security of the system, it does provide malicious
code with additional information which it may use to better aim
an attack.
</td>
</tr>

<tr>
  <td>setProperty.{key}</td>
  <td>Setting of the security property with the specified key</td>
  <td>This could include setting a security provider or defining
the location of the system-wide security policy.  Malicious
code that has permission to set a new security provider may
set a rogue provider that steals confidential information such
as cryptographic private keys. In addition, malicious code with
permission to set the location of the system-wide security policy
may point it to a security policy that grants the attacker
all the necessary permissions it requires to successfully mount
an attack on the system.
</td>
</tr>

<tr>
  <td>insertProvider</td>
  <td>Addition of a new provider</td>
  <td>This would allow somebody to introduce a possibly
malicious provider (e.g., one that discloses the private keys passed
to it) as the highest-priority provider. This would be possible
because the Security object (which manages the installed providers)
currently does not check the integrity or authenticity of a provider
before attaching it. The \"insertProvider\" permission subsumes the
\"insertProvider.{provider name}\" permission (see the section below for
more information).
</td>
</tr>

<tr>
  <td>removeProvider.{provider name}</td>
  <td>Removal of the specified provider</td>
  <td>This may change the behavior or disable execution of other
parts of the program. If a provider subsequently requested by the
program has been removed, execution may fail. Also, if the removed
provider is not explicitly requested by the rest of the program, but
it would normally be the provider chosen when a cryptography service
is requested (due to its previous order in the list of providers),
a different provider will be chosen instead, or no suitable provider
will be found, thereby resulting in program failure.</td>
</tr>

<tr>
  <td>clearProviderProperties.{provider name}</td>
  <td>\"Clearing\" of a Provider so that it no longer contains the properties
used to look up services implemented by the provider</td>
  <td>This disables the lookup of services implemented by the provider.
This may thus change the behavior or disable execution of other
parts of the program that would normally utilize the Provider, as
described under the \"removeProvider.{provider name}\" permission.</td>
</tr>

<tr>
  <td>putProviderProperty.{provider name}</td>
  <td>Setting of properties for the specified Provider</td>
  <td>The provider properties each specify the name and location
of a particular service implemented by the provider. By granting
this permission, you let code replace the service specification
with another one, thereby specifying a different implementation.</td>
</tr>

<tr>
  <td>removeProviderProperty.{provider name}</td>
  <td>Removal of properties from the specified Provider</td>
  <td>This disables the lookup of services implemented by the
provider. They are no longer accessible due to removal of the properties
specifying their names and locations. This
may change the behavior or disable execution of other
parts of the program that would normally utilize the Provider, as
described under the \"removeProvider.{provider name}\" permission.</td>
</tr>

</table>

<P>
The following permissions have been superseded by newer permissions or are
associated with classes that have been deprecated: {@link Identity},
{@link IdentityScope}, {@link Signer}. Use of them is discouraged. See the
applicable classes for more information.

<table border=1 cellpadding=5 summary=\"target name,what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>insertProvider.{provider name}</td>
  <td>Addition of a new provider, with the specified name</td>
  <td>Use of this permission is discouraged from further use because it is
possible to circumvent the name restrictions by overriding the
{@link java.security.Provider#getName} method. Also, there is an equivalent
level of risk associated with granting code permission to insert a provider
with a specific name, or any name it chooses. Users should use the
\"insertProvider\" permission instead.
<p>This would allow somebody to introduce a possibly
malicious provider (e.g., one that discloses the private keys passed
to it) as the highest-priority provider. This would be possible
because the Security object (which manages the installed providers)
currently does not check the integrity or authenticity of a provider
before attaching it.</td>
</tr>

<tr>
  <td>setSystemScope</td>
  <td>Setting of the system identity scope</td>
  <td>This would allow an attacker to configure the system identity scope with
certificates that should not be trusted, thereby granting applet or
application code signed with those certificates privileges that
would have been denied by the system's original identity scope.</td>
</tr>

<tr>
  <td>setIdentityPublicKey</td>
  <td>Setting of the public key for an Identity</td>
  <td>If the identity is marked as \"trusted\", this allows an attacker to
introduce a different public key (e.g., its own) that is not trusted
by the system's identity scope, thereby granting applet or
application code signed with that public key privileges that
would have been denied otherwise.</td>
</tr>

<tr>
  <td>setIdentityInfo</td>
  <td>Setting of a general information string for an Identity</td>
  <td>This allows attackers to set the general description for
an identity.  This may trick applications into using a different
identity than intended or may prevent applications from finding a
particular identity.</td>
</tr>

<tr>
  <td>addIdentityCertificate</td>
  <td>Addition of a certificate for an Identity</td>
  <td>This allows attackers to set a certificate for
an identity's public key.  This is dangerous because it affects
the trust relationship across the system. This public key suddenly
becomes trusted to a wider audience than it otherwise would be.</td>
</tr>

<tr>
  <td>removeIdentityCertificate</td>
  <td>Removal of a certificate for an Identity</td>
  <td>This allows attackers to remove a certificate for
an identity's public key. This is dangerous because it affects
the trust relationship across the system. This public key suddenly
becomes considered less trustworthy than it otherwise would be.</td>
</tr>

<tr>
 <td>printIdentity</td>
 <td>Viewing the name of a principal
and optionally the scope in which it is used, and whether
or not it is considered \"trusted\" in that scope</td>
 <td>The scope that is printed out may be a filename, in which case
it may convey local system information. For example, here's a sample
printout of an identity named \"carol\", who is
marked not trusted in the user's identity database:<br>
  carol[/home/luehe/identitydb.obj][not trusted]</td>
</tr>

<tr>
  <td>getSignerPrivateKey</td>
  <td>Retrieval of a Signer's private key</td>
  <td>It is very dangerous to allow access to a private key; private
keys are supposed to be kept secret. Otherwise, code can use the
private key to sign various files and claim the signature came from
the Signer.</td>
</tr>

<tr>
  <td>setSignerKeyPair</td>
  <td>Setting of the key pair (public key and private key) for a Signer</td>
  <td>This would allow an attacker to replace somebody else's (the \"target's\")
keypair with a possibly weaker keypair (e.g., a keypair of a smaller
keysize).  This also would allow the attacker to listen in on encrypted
communication between the target and its peers. The target's peers
might wrap an encryption session key under the target's \"new\" public
key, which would allow the attacker (who possesses the corresponding
private key) to unwrap the session key and decipher the communication
data encrypted under that session key.</td>
</tr>

</table>

@see java.security.BasicPermission
@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager


@author Marianne Mueller
@author Roland Schemers
"
      classrelation 3364354 // <generalisation>
	relation 3364354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3364354 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 1857282 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5236109936224050470L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8003074 "SecurityPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SecurityPermission with the specified name.
The name is the symbolic name of the SecurityPermission. An asterisk
may appear at the end of the name, following a \".\", or by itself, to
signify a wildcard match.

@param name the name of the SecurityPermission

@throws NullPointerException if {@code name} is {@code null}.
@throws IllegalArgumentException if {@code name} is empty.
"
      end

      operation 8003202 "SecurityPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SecurityPermission object with the specified name.
The name is the symbolic name of the SecurityPermission, and the
actions String is currently unused and should be null.

@param name the name of the SecurityPermission
@param actions should be null.

@throws NullPointerException if {@code name} is {@code null}.
@throws IllegalArgumentException if {@code name} is empty.
"
      end
    end

    class 833154 "Certificate"
      abstract visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>This is an interface of abstract methods for managing a
variety of identity certificates.
An identity certificate is a guarantee by a principal that
a public key is that of another principal.  (A principal represents
an entity such as an individual user, a group, or a corporation.)

<p>In particular, this interface is intended to be a common
abstraction for constructs that have different formats but
important common uses.  For example, different types of
certificates, such as X.509 certificates and PGP certificates,
share general certificate functionality (the need to encode and
decode certificates) and some types of information, such as a
public key, the principal whose key it is, and the guarantor
guaranteeing that the public key is that of the specified
principal. So an implementation of X.509 certificates and an
implementation of PGP certificates can both utilize the Certificate
interface, even though their formats and additional types and
amounts of information stored are different.

<p><b>Important</b>: This interface is useful for cataloging and
grouping objects sharing certain common uses. It does not have any
semantics of its own. In particular, a Certificate object does not
make any statement as to the <i>validity</i> of the binding. It is
the duty of the application implementing this interface to verify
the certificate and satisfy itself of its validity.

@author Benjamin Renaud
@deprecated A new certificate handling package is created in the Java platform.
            This Certificate interface is entirely deprecated and
            is here to allow for a smooth transition to the new
            package.
@see java.security.cert.Certificate
"
      operation 7939586 "getGuarantor"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the guarantor of the certificate, that is, the principal
guaranteeing that the public key associated with this certificate
is that of the principal associated with this certificate. For X.509
certificates, the guarantor will typically be a Certificate Authority
(such as the United States Postal Service or Verisign, Inc.).

@return the guarantor which guaranteed the principal-key
binding.
"
      end

      operation 7939714 "getPrincipal"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the principal of the principal-key pair being guaranteed by
the guarantor.

@return the principal to which this certificate is bound.
"
      end

      operation 7939842 "getPublicKey"
	abstract public return_type class_ref 765826 // PublicKey
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the key of the principal-key pair being guaranteed by
the guarantor.

@return the public key that this certificate certifies belongs
to a particular principal.
"
      end

      operation 7939970 "encode"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 151298 // OutputStream
	nexceptions 2
	  exception class_ref 1015426 // KeyException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes the certificate to an output stream in a format that can
be decoded by the {@code decode} method.

@param stream the output stream to which to encode the
certificate.

@exception KeyException if the certificate is not
properly initialized, or data is missing, etc.

@exception IOException if a stream exception occurs while
trying to output the encoded certificate to the output stream.

@see #decode
@see #getFormat
"
      end

      operation 7940098 "decode"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 1015426 // KeyException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a certificate from an input stream. The format should be
that returned by {@code getFormat} and produced by
{@code encode}.

@param stream the input stream from which to fetch the data
being decoded.

@exception KeyException if the certificate is not properly initialized,
or data is missing, etc.

@exception IOException if an exception occurs while trying to input
the encoded certificate from the input stream.

@see #encode
@see #getFormat
"
      end

      operation 7940226 "getFormat"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the coding format. This is used as a hint to find
an appropriate parser. It could be \"X.509\", \"PGP\", etc. This is
the format produced and understood by the {@code encode}
and {@code decode} methods.

@return the name of the coding format.
"
      end

      operation 7940354 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "detailed" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string that represents the contents of the certificate.

@param detailed whether or not to give detailed information
about the certificate

@return a string representing the contents of the certificate
"
      end
    end

    class 972930 "SecureClassLoader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class extends ClassLoader with additional support for defining
classes with an associated code source and permissions which are
retrieved by the system policy by default.

@author  Li Gong
@author  Roland Schemers
"
      classrelation 3267842 // <generalisation>
	relation 3267842 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3267842 // <generalisation>
	  b parent class_ref 129026 // ClassLoader
      end

      attribute 1793922 "initialized"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If initialization succeed this is set to true and security checks will
succeed. Otherwise the object is not initialized and the object is
useless.

"
      end

      classrelation 3267970 // pdcache (<unidirectional association>)
	relation 3267970 --->
	  a role_name "pdcache" init_value "
                        new HashMap<>(11)" const_relation private
	    comment " HashMap that maps CodeSource to ProtectionDomain
 @GuardedBy(\"pdcache\")
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<CodeSource, ProtectionDomain> ${name}${value};
"
	    classrelation_ref 3267970 // pdcache (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      attribute 1794050 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value " Debug.getInstance(\"scl\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 166018 "initialization"
	
	cpp "" ""
	java "  static {
        ClassLoader.registerAsParallelCapable();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7565442 "SecureClassLoader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "parent" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SecureClassLoader using the specified parent
class loader for delegation.

<p>If there is a security manager, this method first
calls the security manager's {@code checkCreateClassLoader}
method  to ensure creation of a class loader is allowed.
<p>
@param parent the parent ClassLoader
@exception  SecurityException  if a security manager exists and its
            {@code checkCreateClassLoader} method doesn't allow
            creation of a class loader.
@see SecurityManager#checkCreateClassLoader
"
      end

      operation 7565570 "SecureClassLoader"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SecureClassLoader using the default parent class
loader for delegation.

<p>If there is a security manager, this method first
calls the security manager's {@code checkCreateClassLoader}
method  to ensure creation of a class loader is allowed.

@exception  SecurityException  if a security manager exists and its
            {@code checkCreateClassLoader} method doesn't allow
            creation of a class loader.
@see SecurityManager#checkCreateClassLoader
"
      end

      operation 7565698 "defineClass"
	protected return_type class_ref 130818 // Class
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "cs" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an array of bytes into an instance of class Class,
with an optional CodeSource. Before the
class can be used it must be resolved.
<p>
If a non-null CodeSource is supplied a ProtectionDomain is
constructed and associated with the class being defined.
<p>
@param      name the expected name of the class, or {@code null}
                 if not known, using '.' and not '/' as the separator
                 and without a trailing \".class\" suffix.
@param      b    the bytes that make up the class data. The bytes in
            positions {@code off} through {@code off+len-1}
            should have the format of a valid class file as defined by
            <cite>The Java&trade; Virtual Machine Specification</cite>.
@param      off  the start offset in {@code b} of the class data
@param      len  the length of the class data
@param      cs   the associated CodeSource, or {@code null} if none
@return the {@code Class} object created from the data,
        and optional CodeSource.
@exception  ClassFormatError if the data did not contain a valid class
@exception  IndexOutOfBoundsException if either {@code off} or
            {@code len} is negative, or if
            {@code off+len} is greater than {@code b.length}.

@exception  SecurityException if an attempt is made to add this class
            to a package that contains classes that were signed by
            a different set of certificates than this class, or if
            the class name begins with \"java.\".
"
      end

      operation 7565826 "defineClass"
	protected return_type class_ref 130818 // Class
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "b" type class_ref 149890 // ByteBuffer
	  param inout name "cs" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a {@link java.nio.ByteBuffer ByteBuffer}
into an instance of class {@code Class}, with an optional CodeSource.
Before the class can be used it must be resolved.
<p>
If a non-null CodeSource is supplied a ProtectionDomain is
constructed and associated with the class being defined.
<p>
@param      name the expected name of the class, or {@code null}
                 if not known, using '.' and not '/' as the separator
                 and without a trailing \".class\" suffix.
@param      b    the bytes that make up the class data.  The bytes from positions
                 {@code b.position()} through {@code b.position() + b.limit() -1}
                 should have the format of a valid class file as defined by
                 <cite>The Java&trade; Virtual Machine Specification</cite>.
@param      cs   the associated CodeSource, or {@code null} if none
@return the {@code Class} object created from the data,
        and optional CodeSource.
@exception  ClassFormatError if the data did not contain a valid class
@exception  SecurityException if an attempt is made to add this class
            to a package that contains classes that were signed by
            a different set of certificates than this class, or if
            the class name begins with \"java.\".

@since  1.5
"
      end

      operation 7565954 "getPermissions"
	protected return_type class_ref 257794 // PermissionCollection
	nparams 1
	  param inout name "codesource" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the permissions for the given CodeSource object.
<p>
This method is invoked by the defineClass method which takes
a CodeSource as an argument when it is constructing the
ProtectionDomain for the class being defined.
<p>
@param codesource the codesource.

@return the permissions granted to the codesource.

"
      end

      operation 7566082 "getProtectionDomain"
	private return_type class_ref 319618 // ProtectionDomain
	nparams 1
	  param inout name "cs" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returned cached ProtectionDomain for the specified CodeSource.
"
      end

      operation 7566210 "check"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check to make sure the class loader has been initialized.
"
      end
    end

    class 1012994 "AccessControlException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p> This exception is thrown by the AccessController to indicate
that a requested access (to a critical system resource such as the
file system or the network) is denied.

<p> The reason to deny access can vary.  For example, the requested
permission might be of an incorrect type,  contain an invalid
value, or request access that is not allowed according to the
security policy.  Such information should be given whenever
possible at the time the exception is thrown.

@author Li Gong
@author Roland Schemers
"
      classrelation 3336962 // <generalisation>
	relation 3336962 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3336962 // <generalisation>
	  b parent class_ref 171138 // SecurityException
      end

      attribute 1841154 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5138225684096988535L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3337090 // perm (<unidirectional association>)
	relation 3337090 --->
	  a role_name "perm" private
	    comment " the permission that caused the exception to be thrown.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3337090 // perm (<unidirectional association>)
	  b parent class_ref 257538 // Permission
      end

      operation 7914626 "AccessControlException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code AccessControlException} with the
specified, detailed message.

@param   s   the detail message.
"
      end

      operation 7914754 "AccessControlException"
	public explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code AccessControlException} with the
specified, detailed message, and the requested permission that caused
the exception.

@param   s   the detail message.
@param   p   the permission that caused the exception.
"
      end

      operation 7914882 "getPermission"
	public return_type class_ref 257538 // Permission
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Permission object associated with this exception, or
null if there was no corresponding Permission object.

@return the Permission object.
"
      end
    end

    class 1013122 "AccessController"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p> The AccessController class is used for access control operations
and decisions.

<p> More specifically, the AccessController class is used for
three purposes:

<ul>
<li> to decide whether an access to a critical system
resource is to be allowed or denied, based on the security policy
currently in effect,
<li>to mark code as being \"privileged\", thus affecting subsequent
access determinations, and
<li>to obtain a \"snapshot\" of the current calling context so
access-control decisions from a different context can be made with
respect to the saved context. </ul>

<p> The {@link #checkPermission(Permission) checkPermission} method
determines whether the access request indicated by a specified
permission should be granted or denied. A sample call appears
below. In this example, {@code checkPermission} will determine
whether or not to grant \"read\" access to the file named \"testFile\" in
the \"/temp\" directory.

<pre>

FilePermission perm = new FilePermission(\"/temp/testFile\", \"read\");
AccessController.checkPermission(perm);

</pre>

<p> If a requested access is allowed,
{@code checkPermission} returns quietly. If denied, an
AccessControlException is
thrown. AccessControlException can also be thrown if the requested
permission is of an incorrect type or contains an invalid value.
Such information is given whenever possible.

Suppose the current thread traversed m callers, in the order of caller 1
to caller 2 to caller m. Then caller m invoked the
{@code checkPermission} method.
The {@code checkPermission} method determines whether access
is granted or denied based on the following algorithm:

 <pre> {@code
for (int i = m; i > 0; i--) {

    if (caller i's domain does not have the permission)
        throw AccessControlException

    else if (caller i is marked as privileged) {
        if (a context was specified in the call to doPrivileged)
            context.checkPermission(permission)
        if (limited permissions were specified in the call to doPrivileged) {
            for (each limited permission) {
                if (the limited permission implies the requested permission)
                    return;
            }
        } else
            return;
    }
}

// Next, check the context inherited when the thread was created.
// Whenever a new thread is created, the AccessControlContext at
// that time is stored and associated with the new thread, as the
// \"inherited\" context.

inheritedContext.checkPermission(permission);
}</pre>

<p> A caller can be marked as being \"privileged\"
(see {@link #doPrivileged(PrivilegedAction) doPrivileged} and below).
When making access control decisions, the {@code checkPermission}
method stops checking if it reaches a caller that
was marked as \"privileged\" via a {@code doPrivileged}
call without a context argument (see below for information about a
context argument). If that caller's domain has the
specified permission and at least one limiting permission argument (if any)
implies the requested permission, no further checking is done and
{@code checkPermission}
returns quietly, indicating that the requested access is allowed.
If that domain does not have the specified permission, an exception
is thrown, as usual. If the caller's domain had the specified permission
but it was not implied by any limiting permission arguments given in the call
to {@code doPrivileged} then the permission checking continues
until there are no more callers or another {@code doPrivileged}
call matches the requested permission and returns normally.

<p> The normal use of the \"privileged\" feature is as follows. If you
don't need to return a value from within the \"privileged\" block, do
the following:

 <pre> {@code
somemethod() {
    ...normal code here...
    AccessController.doPrivileged(new PrivilegedAction<Void>() {
        public Void run() {
            // privileged code goes here, for example:
            System.loadLibrary(\"awt\");
            return null; // nothing to return
        }
    });
    ...normal code here...
}}</pre>

<p>
PrivilegedAction is an interface with a single method, named
{@code run}.
The above example shows creation of an implementation
of that interface; a concrete implementation of the
{@code run} method is supplied.
When the call to {@code doPrivileged} is made, an
instance of the PrivilegedAction implementation is passed
to it. The {@code doPrivileged} method calls the
{@code run} method from the PrivilegedAction
implementation after enabling privileges, and returns the
{@code run} method's return value as the
{@code doPrivileged} return value (which is
ignored in this example).

<p> If you need to return a value, you can do something like the following:

 <pre> {@code
somemethod() {
    ...normal code here...
    String user = AccessController.doPrivileged(
        new PrivilegedAction<String>() {
        public String run() {
            return System.getProperty(\"user.name\");
            }
        });
    ...normal code here...
}}</pre>

<p>If the action performed in your {@code run} method could
throw a \"checked\" exception (those listed in the {@code throws} clause
of a method), then you need to use the
{@code PrivilegedExceptionAction} interface instead of the
{@code PrivilegedAction} interface:

 <pre> {@code
somemethod() throws FileNotFoundException {
    ...normal code here...
    try {
        FileInputStream fis = AccessController.doPrivileged(
        new PrivilegedExceptionAction<FileInputStream>() {
            public FileInputStream run() throws FileNotFoundException {
                return new FileInputStream(\"someFile\");
            }
        });
    } catch (PrivilegedActionException e) {
        // e.getException() should be an instance of FileNotFoundException,
        // as only \"checked\" exceptions will be \"wrapped\" in a
        // PrivilegedActionException.
        throw (FileNotFoundException) e.getException();
    }
    ...normal code here...
 }}</pre>

<p> Be *very* careful in your use of the \"privileged\" construct, and
always remember to make the privileged code section as small as possible.
You can pass {@code Permission} arguments to further limit the
scope of the \"privilege\" (see below).


<p> Note that {@code checkPermission} always performs security checks
within the context of the currently executing thread.
Sometimes a security check that should be made within a given context
will actually need to be done from within a
<i>different</i> context (for example, from within a worker thread).
The {@link #getContext() getContext} method and
AccessControlContext class are provided
for this situation. The {@code getContext} method takes a \"snapshot\"
of the current calling context, and places
it in an AccessControlContext object, which it returns. A sample call is
the following:

<pre>

AccessControlContext acc = AccessController.getContext()

</pre>

<p>
AccessControlContext itself has a {@code checkPermission} method
that makes access decisions based on the context <i>it</i> encapsulates,
rather than that of the current execution thread.
Code within a different context can thus call that method on the
previously-saved AccessControlContext object. A sample call is the
following:

<pre>

acc.checkPermission(permission)

</pre>

<p> There are also times where you don't know a priori which permissions
to check the context against. In these cases you can use the
doPrivileged method that takes a context. You can also limit the scope
of the privileged code by passing additional {@code Permission}
parameters.

 <pre> {@code
somemethod() {
    AccessController.doPrivileged(new PrivilegedAction<Object>() {
        public Object run() {
            // Code goes here. Any permission checks within this
            // run method will require that the intersection of the
            // caller's protection domain and the snapshot's
            // context have the desired permission. If a requested
            // permission is not implied by the limiting FilePermission
            // argument then checking of the thread continues beyond the
            // caller of doPrivileged.
        }
    }, acc, new FilePermission(\"/temp/*\", read));
    ...normal code here...
}}</pre>
<p> Passing a limiting {@code Permission} argument of an instance of
{@code AllPermission} is equivalent to calling the equivalent
{@code doPrivileged} method without limiting {@code Permission}
arguments. Passing a zero length array of {@code Permission} disables
the code privileges so that checking always continues beyond the caller of
that {@code doPrivileged} method.

@see AccessControlContext

@author Li Gong
@author Roland Schemers
"
      operation 7915010 "AccessController"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Don't allow anyone to instantiate an AccessController
"
      end

      operation 7915138 "doPrivileged"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "action" type class_ref 250114 // PrivilegedAction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native <T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws};
s"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedAction} with privileges
enabled. The action is performed with <i>all</i> of the permissions
possessed by the caller's protection domain.

<p> If the action's {@code run} method throws an (unchecked)
exception, it will propagate through this method.

<p> Note that any DomainCombiner associated with the current
AccessControlContext will be ignored while the action is performed.

@param <T> the type of the value returned by the PrivilegedAction's
                 {@code run} method.

@param action the action to be performed.

@return the value returned by the action's {@code run} method.

@exception NullPointerException if the action is {@code null}

@see #doPrivileged(PrivilegedAction,AccessControlContext)
@see #doPrivileged(PrivilegedExceptionAction)
@see #doPrivilegedWithCombiner(PrivilegedAction)
@see java.security.DomainCombiner
"
      end

      operation 7915266 "doPrivilegedWithCombiner"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "action" type class_ref 250114 // PrivilegedAction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedAction} with privileges
enabled. The action is performed with <i>all</i> of the permissions
possessed by the caller's protection domain.

<p> If the action's {@code run} method throws an (unchecked)
exception, it will propagate through this method.

<p> This method preserves the current AccessControlContext's
DomainCombiner (which may be null) while the action is performed.

@param <T> the type of the value returned by the PrivilegedAction's
                 {@code run} method.

@param action the action to be performed.

@return the value returned by the action's {@code run} method.

@exception NullPointerException if the action is {@code null}

@see #doPrivileged(PrivilegedAction)
@see java.security.DomainCombiner

@since 1.6
"
      end

      operation 7915394 "doPrivileged"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "action" type class_ref 250114 // PrivilegedAction
	  param inout name "context" type class_ref 129154 // AccessControlContext
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native <T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws};
s"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedAction} with privileges
enabled and restricted by the specified {@code AccessControlContext}.
The action is performed with the intersection of the permissions
possessed by the caller's protection domain, and those possessed
by the domains represented by the specified {@code AccessControlContext}.
<p>
If the action's {@code run} method throws an (unchecked) exception,
it will propagate through this method.
<p>
If a security manager is installed and the specified
{@code AccessControlContext} was not created by system code and the
caller's {@code ProtectionDomain} has not been granted the
{@literal \"createAccessControlContext\"}
{@link java.security.SecurityPermission}, then the action is performed
with no permissions.

@param <T> the type of the value returned by the PrivilegedAction's
                 {@code run} method.
@param action the action to be performed.
@param context an <i>access control context</i>
               representing the restriction to be applied to the
               caller's domain's privileges before performing
               the specified action.  If the context is
               {@code null}, then no additional restriction is applied.

@return the value returned by the action's {@code run} method.

@exception NullPointerException if the action is {@code null}

@see #doPrivileged(PrivilegedAction)
@see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)
"
      end

      operation 7915522 "doPrivileged"
	class_operation public explicit_return_type "T"
	nparams 3
	  param inout name "action" type class_ref 250114 // PrivilegedAction
	  param inout name "context" type class_ref 129154 // AccessControlContext
	  param inout name "" explicit_type "Permission...perms"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedAction} with privileges
enabled and restricted by the specified
{@code AccessControlContext} and with a privilege scope limited
by specified {@code Permission} arguments.

The action is performed with the intersection of the permissions
possessed by the caller's protection domain, and those possessed
by the domains represented by the specified
{@code AccessControlContext}.
<p>
If the action's {@code run} method throws an (unchecked) exception,
it will propagate through this method.
<p>
If a security manager is installed and the specified
{@code AccessControlContext} was not created by system code and the
caller's {@code ProtectionDomain} has not been granted the
{@literal \"createAccessControlContext\"}
{@link java.security.SecurityPermission}, then the action is performed
with no permissions.

@param <T> the type of the value returned by the PrivilegedAction's
                 {@code run} method.
@param action the action to be performed.
@param context an <i>access control context</i>
               representing the restriction to be applied to the
               caller's domain's privileges before performing
               the specified action.  If the context is
               {@code null},
               then no additional restriction is applied.
@param perms the {@code Permission} arguments which limit the
             scope of the caller's privileges. The number of arguments
             is variable.

@return the value returned by the action's {@code run} method.

@throws NullPointerException if action or perms or any element of
        perms is {@code null}

@see #doPrivileged(PrivilegedAction)
@see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)

@since 1.8
"
      end

      operation 7915650 "doPrivilegedWithCombiner"
	class_operation public explicit_return_type "T"
	nparams 3
	  param inout name "action" type class_ref 250114 // PrivilegedAction
	  param inout name "context" type class_ref 129154 // AccessControlContext
	  param inout name "" explicit_type "Permission...perms"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedAction} with privileges
enabled and restricted by the specified
{@code AccessControlContext} and with a privilege scope limited
by specified {@code Permission} arguments.

The action is performed with the intersection of the permissions
possessed by the caller's protection domain, and those possessed
by the domains represented by the specified
{@code AccessControlContext}.
<p>
If the action's {@code run} method throws an (unchecked) exception,
it will propagate through this method.

<p> This method preserves the current AccessControlContext's
DomainCombiner (which may be null) while the action is performed.
<p>
If a security manager is installed and the specified
{@code AccessControlContext} was not created by system code and the
caller's {@code ProtectionDomain} has not been granted the
{@literal \"createAccessControlContext\"}
{@link java.security.SecurityPermission}, then the action is performed
with no permissions.

@param <T> the type of the value returned by the PrivilegedAction's
                 {@code run} method.
@param action the action to be performed.
@param context an <i>access control context</i>
               representing the restriction to be applied to the
               caller's domain's privileges before performing
               the specified action.  If the context is
               {@code null},
               then no additional restriction is applied.
@param perms the {@code Permission} arguments which limit the
             scope of the caller's privileges. The number of arguments
             is variable.

@return the value returned by the action's {@code run} method.

@throws NullPointerException if action or perms or any element of
        perms is {@code null}

@see #doPrivileged(PrivilegedAction)
@see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)
@see java.security.DomainCombiner

@since 1.8
"
      end

      operation 7915778 "doPrivileged"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "action" type class_ref 320514 // PrivilegedExceptionAction
	nexceptions 1
	  exception class_ref 189826 // PrivilegedActionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native <T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws};
s"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedExceptionAction} with
privileges enabled.  The action is performed with <i>all</i> of the
permissions possessed by the caller's protection domain.

<p> If the action's {@code run} method throws an <i>unchecked</i>
exception, it will propagate through this method.

<p> Note that any DomainCombiner associated with the current
AccessControlContext will be ignored while the action is performed.

@param <T> the type of the value returned by the
                 PrivilegedExceptionAction's {@code run} method.

@param action the action to be performed

@return the value returned by the action's {@code run} method

@exception PrivilegedActionException if the specified action's
        {@code run} method threw a <i>checked</i> exception
@exception NullPointerException if the action is {@code null}

@see #doPrivileged(PrivilegedAction)
@see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)
@see #doPrivilegedWithCombiner(PrivilegedExceptionAction)
@see java.security.DomainCombiner
"
      end

      operation 7915906 "doPrivilegedWithCombiner"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "action" type class_ref 320514 // PrivilegedExceptionAction
	nexceptions 1
	  exception class_ref 189826 // PrivilegedActionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedExceptionAction} with
privileges enabled.  The action is performed with <i>all</i> of the
permissions possessed by the caller's protection domain.

<p> If the action's {@code run} method throws an <i>unchecked</i>
exception, it will propagate through this method.

<p> This method preserves the current AccessControlContext's
DomainCombiner (which may be null) while the action is performed.

@param <T> the type of the value returned by the
                 PrivilegedExceptionAction's {@code run} method.

@param action the action to be performed.

@return the value returned by the action's {@code run} method

@exception PrivilegedActionException if the specified action's
        {@code run} method threw a <i>checked</i> exception
@exception NullPointerException if the action is {@code null}

@see #doPrivileged(PrivilegedAction)
@see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)
@see java.security.DomainCombiner

@since 1.6
"
      end

      operation 7916034 "preserveCombiner"
	class_operation private return_type class_ref 129154 // AccessControlContext
	nparams 2
	  param inout name "combiner" type class_ref 510338 // DomainCombiner
	  param inout name "caller" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "preserve the combiner across the doPrivileged call
"
      end

      operation 7916162 "createWrapper"
	class_operation private return_type class_ref 129154 // AccessControlContext
	nparams 5
	  param inout name "combiner" type class_ref 510338 // DomainCombiner
	  param inout name "caller" type class_ref 130818 // Class
	  param inout name "parent" type class_ref 129154 // AccessControlContext
	  param inout name "context" type class_ref 129154 // AccessControlContext
	  param inout name "perms" type class_ref 257538 // Permission
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a wrapper to contain the limited privilege scope data.
"
      end

      operation 7916290 "getCallerPD"
	class_operation private return_type class_ref 319618 // ProtectionDomain
	nparams 1
	  param in name "caller" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7916418 "doPrivileged"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "action" type class_ref 320514 // PrivilegedExceptionAction
	  param inout name "context" type class_ref 129154 // AccessControlContext
	nexceptions 1
	  exception class_ref 189826 // PrivilegedActionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native <T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws};
s"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedExceptionAction} with
privileges enabled and restricted by the specified
{@code AccessControlContext}.  The action is performed with the
intersection of the permissions possessed by the caller's
protection domain, and those possessed by the domains represented by the
specified {@code AccessControlContext}.
<p>
If the action's {@code run} method throws an <i>unchecked</i>
exception, it will propagate through this method.
<p>
If a security manager is installed and the specified
{@code AccessControlContext} was not created by system code and the
caller's {@code ProtectionDomain} has not been granted the
{@literal \"createAccessControlContext\"}
{@link java.security.SecurityPermission}, then the action is performed
with no permissions.

@param <T> the type of the value returned by the
                 PrivilegedExceptionAction's {@code run} method.
@param action the action to be performed
@param context an <i>access control context</i>
               representing the restriction to be applied to the
               caller's domain's privileges before performing
               the specified action.  If the context is
               {@code null}, then no additional restriction is applied.

@return the value returned by the action's {@code run} method

@exception PrivilegedActionException if the specified action's
        {@code run} method threw a <i>checked</i> exception
@exception NullPointerException if the action is {@code null}

@see #doPrivileged(PrivilegedAction)
@see #doPrivileged(PrivilegedAction,AccessControlContext)
"
      end

      operation 7916546 "doPrivileged"
	class_operation public explicit_return_type "T"
	nparams 3
	  param inout name "action" type class_ref 320514 // PrivilegedExceptionAction
	  param inout name "context" type class_ref 129154 // AccessControlContext
	  param inout name "" explicit_type "Permission...perms"
	nexceptions 1
	  exception class_ref 189826 // PrivilegedActionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedExceptionAction} with
privileges enabled and restricted by the specified
{@code AccessControlContext} and with a privilege scope limited by
specified {@code Permission} arguments.

The action is performed with the intersection of the permissions
possessed by the caller's protection domain, and those possessed
by the domains represented by the specified
{@code AccessControlContext}.
<p>
If the action's {@code run} method throws an (unchecked) exception,
it will propagate through this method.
<p>
If a security manager is installed and the specified
{@code AccessControlContext} was not created by system code and the
caller's {@code ProtectionDomain} has not been granted the
{@literal \"createAccessControlContext\"}
{@link java.security.SecurityPermission}, then the action is performed
with no permissions.

@param <T> the type of the value returned by the
                 PrivilegedExceptionAction's {@code run} method.
@param action the action to be performed.
@param context an <i>access control context</i>
               representing the restriction to be applied to the
               caller's domain's privileges before performing
               the specified action.  If the context is
               {@code null},
               then no additional restriction is applied.
@param perms the {@code Permission} arguments which limit the
             scope of the caller's privileges. The number of arguments
             is variable.

@return the value returned by the action's {@code run} method.

@throws PrivilegedActionException if the specified action's
        {@code run} method threw a <i>checked</i> exception
@throws NullPointerException if action or perms or any element of
        perms is {@code null}

@see #doPrivileged(PrivilegedAction)
@see #doPrivileged(PrivilegedAction,AccessControlContext)

@since 1.8
"
      end

      operation 7916674 "doPrivilegedWithCombiner"
	class_operation public explicit_return_type "T"
	nparams 3
	  param inout name "action" type class_ref 320514 // PrivilegedExceptionAction
	  param inout name "context" type class_ref 129154 // AccessControlContext
	  param inout name "" explicit_type "Permission...perms"
	nexceptions 1
	  exception class_ref 189826 // PrivilegedActionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Performs the specified {@code PrivilegedExceptionAction} with
privileges enabled and restricted by the specified
{@code AccessControlContext} and with a privilege scope limited by
specified {@code Permission} arguments.

The action is performed with the intersection of the permissions
possessed by the caller's protection domain, and those possessed
by the domains represented by the specified
{@code AccessControlContext}.
<p>
If the action's {@code run} method throws an (unchecked) exception,
it will propagate through this method.

<p> This method preserves the current AccessControlContext's
DomainCombiner (which may be null) while the action is performed.
<p>
If a security manager is installed and the specified
{@code AccessControlContext} was not created by system code and the
caller's {@code ProtectionDomain} has not been granted the
{@literal \"createAccessControlContext\"}
{@link java.security.SecurityPermission}, then the action is performed
with no permissions.

@param <T> the type of the value returned by the
                 PrivilegedExceptionAction's {@code run} method.
@param action the action to be performed.
@param context an <i>access control context</i>
               representing the restriction to be applied to the
               caller's domain's privileges before performing
               the specified action.  If the context is
               {@code null},
               then no additional restriction is applied.
@param perms the {@code Permission} arguments which limit the
             scope of the caller's privileges. The number of arguments
             is variable.

@return the value returned by the action's {@code run} method.

@throws PrivilegedActionException if the specified action's
        {@code run} method threw a <i>checked</i> exception
@throws NullPointerException if action or perms or any element of
        perms is {@code null}

@see #doPrivileged(PrivilegedAction)
@see #doPrivileged(PrivilegedAction,AccessControlContext)
@see java.security.DomainCombiner

@since 1.8
"
      end

      operation 7916802 "getStackAccessControlContext"
	class_operation private return_type class_ref 129154 // AccessControlContext
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Returns the AccessControl context. i.e., it gets
the protection domains of all the callers on the stack,
starting at the first class with a non-null
ProtectionDomain.

@return the access control context based on the current stack or
        null if there was only privileged system code.
"
      end

      operation 7916930 "getInheritedAccessControlContext"
	class_operation package return_type class_ref 129154 // AccessControlContext
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
	comment "Returns the \"inherited\" AccessControl context. This is the context
that existed when the thread was created. Package private so
AccessControlContext can use it.
"
      end

      operation 7917058 "getContext"
	class_operation public return_type class_ref 129154 // AccessControlContext
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method takes a \"snapshot\" of the current calling context, which
includes the current Thread's inherited AccessControlContext and any
limited privilege scope, and places it in an AccessControlContext object.
This context may then be checked at a later point, possibly in another thread.

@see AccessControlContext

@return the AccessControlContext based on the current context.
"
      end

      operation 7917186 "checkPermission"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "perm" type class_ref 257538 // Permission
	nexceptions 1
	  exception class_ref 1012994 // AccessControlException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the access request indicated by the
specified permission should be allowed or denied, based on
the current AccessControlContext and security policy.
This method quietly returns if the access request
is permitted, or throws an AccessControlException otherwise. The
getPermission method of the AccessControlException returns the
{@code perm} Permission object instance.

@param perm the requested permission.

@exception AccessControlException if the specified permission
           is not permitted, based on the current security policy.
@exception NullPointerException if the specified permission
           is {@code null} and is checked based on the
           security policy currently in effect.
"
      end
    end

    class 1013250 "AlgorithmConstraints"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface specifies constraints for cryptographic algorithms,
keys (key sizes), and other algorithm parameters.
<p>
{@code AlgorithmConstraints} objects are immutable.  An implementation
of this interface should not provide methods that can change the state
of an instance once it has been created.
<p>
Note that {@code AlgorithmConstraints} can be used to represent the
restrictions described by the security properties
{@code jdk.certpath.disabledAlgorithms} and
{@code jdk.tls.disabledAlgorithms}, or could be used by a
concrete {@code PKIXCertPathChecker} to check whether a specified
certificate in the certification path contains the required algorithm
constraints.

@see javax.net.ssl.SSLParameters#getAlgorithmConstraints
@see javax.net.ssl.SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)

@since 1.7
"
      operation 7917314 "permits"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "primitives" type class_ref 192258 // Set
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "parameters" type class_ref 1013378 // AlgorithmParameters
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<CryptoPrimitive> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether an algorithm is granted permission for the
specified cryptographic primitives.

@param primitives a set of cryptographic primitives
@param algorithm the algorithm name
@param parameters the algorithm parameters, or null if no additional
    parameters

@return true if the algorithm is permitted and can be used for all
    of the specified cryptographic primitives

@throws IllegalArgumentException if primitives or algorithm is null
    or empty
"
      end

      operation 7917442 "permits"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "primitives" type class_ref 192258 // Set
	  param inout name "key" type class_ref 753026 // Key
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<CryptoPrimitive> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether a key is granted permission for the specified
cryptographic primitives.
<p>
This method is usually used to check key size and key usage.

@param primitives a set of cryptographic primitives
@param key the key

@return true if the key can be used for all of the specified
    cryptographic primitives

@throws IllegalArgumentException if primitives is null or empty,
    or the key is null
"
      end

      operation 7917570 "permits"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "primitives" type class_ref 192258 // Set
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "key" type class_ref 753026 // Key
	  param inout name "parameters" type class_ref 1013378 // AlgorithmParameters
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<CryptoPrimitive> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether an algorithm and the corresponding key are granted
permission for the specified cryptographic primitives.

@param primitives a set of cryptographic primitives
@param algorithm the algorithm name
@param key the key
@param parameters the algorithm parameters, or null if no additional
    parameters

@return true if the key and the algorithm can be used for all of the
    specified cryptographic primitives

@throws IllegalArgumentException if primitives or algorithm is null
    or empty, or the key is null
"
      end
    end

    class 1013378 "AlgorithmParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used as an opaque representation of cryptographic parameters.

<p>An {@code AlgorithmParameters} object for managing the parameters
for a particular algorithm can be obtained by
calling one of the {@code getInstance} factory methods
(static methods that return instances of a given class).

<p>Once an {@code AlgorithmParameters} object is obtained, it must be
initialized via a call to {@code init}, using an appropriate parameter
specification or parameter encoding.

<p>A transparent parameter specification is obtained from an
{@code AlgorithmParameters} object via a call to
{@code getParameterSpec}, and a byte encoding of the parameters is
obtained via a call to {@code getEncoded}.

<p> Every implementation of the Java platform is required to support the
following standard {@code AlgorithmParameters} algorithms:
<ul>
<li>{@code AES}</li>
<li>{@code DES}</li>
<li>{@code DESede}</li>
<li>{@code DiffieHellman}</li>
<li>{@code DSA}</li>
</ul>
These algorithms are described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameters\">
AlgorithmParameters section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other algorithms are supported.

@author Jan Luehe


@see java.security.spec.AlgorithmParameterSpec
@see java.security.spec.DSAParameterSpec
@see KeyPairGenerator

@since 1.2
"
      classrelation 3337602 // provider (<unidirectional association>)
	relation 3337602 --->
	  a role_name "provider" private
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3337602 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3337730 // paramSpi (<unidirectional association>)
	relation 3337730 --->
	  a role_name "paramSpi" private
	    comment " The provider implementation (delegate)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3337730 // paramSpi (<unidirectional association>)
	  b parent class_ref 1013890 // AlgorithmParametersSpi
      end

      classrelation 3337858 // algorithm (<unidirectional association>)
	relation 3337858 --->
	  a role_name "algorithm" private
	    comment " The algorithm
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3337858 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1841282 "initialized"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Has this object been initialized?
"
      end

      operation 7919490 "AlgorithmParameters"
	protected explicit_return_type ""
	nparams 3
	  param inout name "paramSpi" type class_ref 1013890 // AlgorithmParametersSpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AlgorithmParameters object.

@param paramSpi the delegate
@param provider the provider
@param algorithm the algorithm
"
      end

      operation 7919618 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the algorithm associated with this parameter object.

@return the algorithm name.
"
      end

      operation 7919746 "getInstance"
	class_operation public return_type class_ref 1013378 // AlgorithmParameters
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter object for the specified algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new AlgorithmParameters object encapsulating the
AlgorithmParametersSpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

<p> The returned parameter object must be initialized via a call to
{@code init}, using an appropriate parameter specification or
parameter encoding.

@param algorithm the name of the algorithm requested.
See the AlgorithmParameters section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameters\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return the new parameter object.

@exception NoSuchAlgorithmException if no Provider supports an
         AlgorithmParametersSpi implementation for the
         specified algorithm.

@see Provider
"
      end

      operation 7919874 "getInstance"
	class_operation public return_type class_ref 1013378 // AlgorithmParameters
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter object for the specified algorithm.

<p> A new AlgorithmParameters object encapsulating the
AlgorithmParametersSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

<p>The returned parameter object must be initialized via a call to
{@code init}, using an appropriate parameter specification or
parameter encoding.

@param algorithm the name of the algorithm requested.
See the AlgorithmParameters section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameters\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the name of the provider.

@return the new parameter object.

@exception NoSuchAlgorithmException if an AlgorithmParametersSpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see Provider
"
      end

      operation 7920002 "getInstance"
	class_operation public return_type class_ref 1013378 // AlgorithmParameters
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parameter object for the specified algorithm.

<p> A new AlgorithmParameters object encapsulating the
AlgorithmParametersSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

<p>The returned parameter object must be initialized via a call to
{@code init}, using an appropriate parameter specification or
parameter encoding.

@param algorithm the name of the algorithm requested.
See the AlgorithmParameters section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameters\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the name of the provider.

@return the new parameter object.

@exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the provider is null.

@see Provider

@since 1.4
"
      end

      operation 7920130 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this parameter object.

@return the provider of this parameter object
"
      end

      operation 7920258 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "paramSpec" type class_ref 753282 // AlgorithmParameterSpec
	nexceptions 1
	  exception class_ref 1014018 // InvalidParameterSpecException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this parameter object using the parameters
specified in {@code paramSpec}.

@param paramSpec the parameter specification.

@exception InvalidParameterSpecException if the given parameter
specification is inappropriate for the initialization of this parameter
object, or if this parameter object has already been initialized.
"
      end

      operation 7920386 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "params" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Imports the specified parameters and decodes them according to the
primary decoding format for parameters. The primary decoding
format for parameters is ASN.1, if an ASN.1 specification for this type
of parameters exists.

@param params the encoded parameters.

@exception IOException on decoding errors, or if this parameter object
has already been initialized.
"
      end

      operation 7920514 "init"
	public explicit_return_type "void"
	nparams 2
	  param inout name "params" explicit_type "byte"
	multiplicity "[]"
	  param inout name "format" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Imports the parameters from {@code params} and decodes them
according to the specified decoding scheme.
If {@code format} is null, the
primary decoding format for parameters is used. The primary decoding
format is ASN.1, if an ASN.1 specification for these parameters
exists.

@param params the encoded parameters.

@param format the name of the decoding scheme.

@exception IOException on decoding errors, or if this parameter object
has already been initialized.
"
      end

      operation 7920642 "getParameterSpec"
	public explicit_return_type "T"
	nparams 1
	  param inout name "paramSpec" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1014018 // InvalidParameterSpecException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends AlgorithmParameterSpec> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (transparent) specification of this parameter object.
{@code paramSpec} identifies the specification class in which
the parameters should be returned. It could, for example, be
{@code DSAParameterSpec.class}, to indicate that the
parameters should be returned in an instance of the
{@code DSAParameterSpec} class.

@param <T> the type of the parameter specification to be returrned
@param paramSpec the specification class in which
the parameters should be returned.

@return the parameter specification.

@exception InvalidParameterSpecException if the requested parameter
specification is inappropriate for this parameter object, or if this
parameter object has not been initialized.
"
      end

      operation 7920770 "getEncoded"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters in their primary encoding format.
The primary encoding format for parameters is ASN.1, if an ASN.1
specification for this type of parameters exists.

@return the parameters encoded using their primary encoding format.

@exception IOException on encoding errors, or if this parameter object
has not been initialized.
"
      end

      operation 7920898 "getEncoded"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "format" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters encoded in the specified scheme.
If {@code format} is null, the
primary encoding format for parameters is used. The primary encoding
format is ASN.1, if an ASN.1 specification for these parameters
exists.

@param format the name of the encoding format.

@return the parameters encoded using the specified encoding scheme.

@exception IOException on encoding errors, or if this parameter object
has not been initialized.
"
      end

      operation 7921026 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters, or null if this
parameter object has not been initialized.
"
      end
    end

    class 1013506 "AlgorithmParameterGenerator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code AlgorithmParameterGenerator} class is used to generate a
set of
parameters to be used with a certain algorithm. Parameter generators
are constructed using the {@code getInstance} factory methods
(static methods that return instances of a given class).

<P>The object that will generate the parameters can be initialized
in two different ways: in an algorithm-independent manner, or in an
algorithm-specific manner:

<ul>
<li>The algorithm-independent approach uses the fact that all parameter
generators share the concept of a \"size\" and a
source of randomness. The measure of size is universally shared
by all algorithm parameters, though it is interpreted differently
for different algorithms. For example, in the case of parameters for
the <i>DSA</i> algorithm, \"size\" corresponds to the size
of the prime modulus (in bits).
When using this approach, algorithm-specific parameter generation
values - if any - default to some standard values, unless they can be
derived from the specified size.

<li>The other approach initializes a parameter generator object
using algorithm-specific semantics, which are represented by a set of
algorithm-specific parameter generation values. To generate
Diffie-Hellman system parameters, for example, the parameter generation
values usually
consist of the size of the prime modulus and the size of the
random exponent, both specified in number of bits.
</ul>

<P>In case the client does not explicitly initialize the
AlgorithmParameterGenerator
(via a call to an {@code init} method), each provider must supply (and
document) a default initialization. For example, the Sun provider uses a
default modulus prime size of 1024 bits for the generation of DSA
parameters.

<p> Every implementation of the Java platform is required to support the
following standard {@code AlgorithmParameterGenerator} algorithms and
keysizes in parentheses:
<ul>
<li>{@code DiffieHellman} (1024)</li>
<li>{@code DSA} (1024)</li>
</ul>
These algorithms are described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator\">
AlgorithmParameterGenerator section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other algorithms are supported.

@author Jan Luehe


@see AlgorithmParameters
@see java.security.spec.AlgorithmParameterSpec

@since 1.2
"
      classrelation 3337218 // provider (<unidirectional association>)
	relation 3337218 --->
	  a role_name "provider" private
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3337218 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3337346 // paramGenSpi (<unidirectional association>)
	relation 3337346 --->
	  a role_name "paramGenSpi" private
	    comment " The provider implementation (delegate)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3337346 // paramGenSpi (<unidirectional association>)
	  b parent class_ref 1013634 // AlgorithmParameterGeneratorSpi
      end

      classrelation 3337474 // algorithm (<unidirectional association>)
	relation 3337474 --->
	  a role_name "algorithm" private
	    comment " The algorithm
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3337474 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7917698 "AlgorithmParameterGenerator"
	protected explicit_return_type ""
	nparams 3
	  param inout name "paramGenSpi" type class_ref 1013634 // AlgorithmParameterGeneratorSpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an AlgorithmParameterGenerator object.

@param paramGenSpi the delegate
@param provider the provider
@param algorithm the algorithm
"
      end

      operation 7917826 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the standard name of the algorithm this parameter
generator is associated with.

@return the string name of the algorithm.
"
      end

      operation 7917954 "getInstance"
	class_operation public return_type class_ref 1013506 // AlgorithmParameterGenerator
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an AlgorithmParameterGenerator object for generating
a set of parameters to be used with the specified algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new AlgorithmParameterGenerator object encapsulating the
AlgorithmParameterGeneratorSpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the algorithm this
parameter generator is associated with.
See the AlgorithmParameterGenerator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return the new AlgorithmParameterGenerator object.

@exception NoSuchAlgorithmException if no Provider supports an
         AlgorithmParameterGeneratorSpi implementation for the
         specified algorithm.

@see Provider
"
      end

      operation 7918082 "getInstance"
	class_operation public return_type class_ref 1013506 // AlgorithmParameterGenerator
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an AlgorithmParameterGenerator object for generating
a set of parameters to be used with the specified algorithm.

<p> A new AlgorithmParameterGenerator object encapsulating the
AlgorithmParameterGeneratorSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the algorithm this
parameter generator is associated with.
See the AlgorithmParameterGenerator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the string name of the Provider.

@return the new AlgorithmParameterGenerator object.

@exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see Provider
"
      end

      operation 7918210 "getInstance"
	class_operation public return_type class_ref 1013506 // AlgorithmParameterGenerator
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an AlgorithmParameterGenerator object for generating
a set of parameters to be used with the specified algorithm.

<p> A new AlgorithmParameterGenerator object encapsulating the
AlgorithmParameterGeneratorSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param algorithm the string name of the algorithm this
parameter generator is associated with.
See the AlgorithmParameterGenerator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#AlgorithmParameterGenerator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the Provider object.

@return the new AlgorithmParameterGenerator object.

@exception NoSuchAlgorithmException if an AlgorithmParameterGeneratorSpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the specified provider is null.

@see Provider

@since 1.4
"
      end

      operation 7918338 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this algorithm parameter generator object.

@return the provider of this algorithm parameter generator object
"
      end

      operation 7918466 "init"
	public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this parameter generator for a certain size.
To create the parameters, the {@code SecureRandom}
implementation of the highest-priority installed provider is used as
the source of randomness.
(If none of the installed providers supply an implementation of
{@code SecureRandom}, a system-provided source of randomness is
used.)

@param size the size (number of bits).
"
      end

      operation 7918594 "init"
	public explicit_return_type "void"
	nparams 2
	  param in name "size" explicit_type "int"
	  param inout name "random" type class_ref 753154 // SecureRandom
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this parameter generator for a certain size and source
of randomness.

@param size the size (number of bits).
@param random the source of randomness.
"
      end

      operation 7918722 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "genParamSpec" type class_ref 753282 // AlgorithmParameterSpec
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this parameter generator with a set of algorithm-specific
parameter generation values.
To generate the parameters, the {@code SecureRandom}
implementation of the highest-priority installed provider is used as
the source of randomness.
(If none of the installed providers supply an implementation of
{@code SecureRandom}, a system-provided source of randomness is
used.)

@param genParamSpec the set of algorithm-specific parameter generation values.

@exception InvalidAlgorithmParameterException if the given parameter
generation values are inappropriate for this parameter generator.
"
      end

      operation 7918850 "init"
	public explicit_return_type "void"
	nparams 2
	  param inout name "genParamSpec" type class_ref 753282 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 753154 // SecureRandom
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this parameter generator with a set of algorithm-specific
parameter generation values.

@param genParamSpec the set of algorithm-specific parameter generation values.
@param random the source of randomness.

@exception InvalidAlgorithmParameterException if the given parameter
generation values are inappropriate for this parameter generator.
"
      end

      operation 7918978 "generateParameters"
	public return_type class_ref 1013378 // AlgorithmParameters
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the parameters.

@return the new AlgorithmParameters object.
"
      end
    end

    class 1013634 "AlgorithmParameterGeneratorSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code AlgorithmParameterGenerator} class, which
is used to generate a set of parameters to be used with a certain algorithm.

<p> All the abstract methods in this class must be implemented by each
cryptographic service provider who wishes to supply the implementation
of a parameter generator for a particular algorithm.

<p> In case the client does not explicitly initialize the
AlgorithmParameterGenerator (via a call to an {@code engineInit}
method), each provider must supply (and document) a default initialization.
For example, the Sun provider uses a default modulus prime size of 1024
bits for the generation of DSA parameters.

@author Jan Luehe


@see AlgorithmParameterGenerator
@see AlgorithmParameters
@see java.security.spec.AlgorithmParameterSpec

@since 1.2
"
      operation 7919106 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param in name "size" explicit_type "int"
	  param inout name "random" type class_ref 753154 // SecureRandom
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this parameter generator for a certain size
and source of randomness.

@param size the size (number of bits).
@param random the source of randomness.
"
      end

      operation 7919234 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "genParamSpec" type class_ref 753282 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 753154 // SecureRandom
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this parameter generator with a set of
algorithm-specific parameter generation values.

@param genParamSpec the set of algorithm-specific parameter generation values.
@param random the source of randomness.

@exception InvalidAlgorithmParameterException if the given parameter
generation values are inappropriate for this parameter generator.
"
      end

      operation 7919362 "engineGenerateParameters"
	abstract protected return_type class_ref 1013378 // AlgorithmParameters
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the parameters.

@return the new AlgorithmParameters object.
"
      end
    end

    class 1013762 "InvalidAlgorithmParameterException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the exception for invalid or inappropriate algorithm parameters.

@author Jan Luehe


@see AlgorithmParameters
@see java.security.spec.AlgorithmParameterSpec

@since 1.2
"
      classrelation 3346818 // <generalisation>
	relation 3346818 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3346818 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1846786 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2864672297499471472L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7951618 "InvalidAlgorithmParameterException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidAlgorithmParameterException with no detail
message.
A detail message is a String that describes this particular
exception.
"
      end

      operation 7951746 "InvalidAlgorithmParameterException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidAlgorithmParameterException with the specified
detail message.
A detail message is a String that describes this
particular exception.

@param msg the detail message.
"
      end

      operation 7951874 "InvalidAlgorithmParameterException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code InvalidAlgorithmParameterException} with the
specified detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7952002 "InvalidAlgorithmParameterException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code InvalidAlgorithmParameterException} with the
specified cause and a detail message of
{@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1013890 "AlgorithmParametersSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code AlgorithmParameters} class, which is used to manage
algorithm parameters.

<p> All the abstract methods in this class must be implemented by each
cryptographic service provider who wishes to supply parameter management
for a particular algorithm.

@author Jan Luehe


@see AlgorithmParameters
@see java.security.spec.AlgorithmParameterSpec
@see java.security.spec.DSAParameterSpec

@since 1.2
"
      operation 7921154 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "paramSpec" type class_ref 753282 // AlgorithmParameterSpec
	nexceptions 1
	  exception class_ref 1014018 // InvalidParameterSpecException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this parameters object using the parameters
specified in {@code paramSpec}.

@param paramSpec the parameter specification.

@exception InvalidParameterSpecException if the given parameter
specification is inappropriate for the initialization of this parameter
object.
"
      end

      operation 7921282 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "params" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Imports the specified parameters and decodes them
according to the primary decoding format for parameters.
The primary decoding format for parameters is ASN.1, if an ASN.1
specification for this type of parameters exists.

@param params the encoded parameters.

@exception IOException on decoding errors
"
      end

      operation 7921410 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "params" explicit_type "byte"
	multiplicity "[]"
	  param inout name "format" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Imports the parameters from {@code params} and
decodes them according to the specified decoding format.
If {@code format} is null, the
primary decoding format for parameters is used. The primary decoding
format is ASN.1, if an ASN.1 specification for these parameters
exists.

@param params the encoded parameters.

@param format the name of the decoding format.

@exception IOException on decoding errors
"
      end

      operation 7921538 "engineGetParameterSpec"
	abstract protected explicit_return_type "T"
	nparams 1
	  param inout name "paramSpec" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1014018 // InvalidParameterSpecException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends AlgorithmParameterSpec> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (transparent) specification of this parameters
object.
{@code paramSpec} identifies the specification class in which
the parameters should be returned. It could, for example, be
{@code DSAParameterSpec.class}, to indicate that the
parameters should be returned in an instance of the
{@code DSAParameterSpec} class.

@param <T> the type of the parameter specification to be returned

@param paramSpec the specification class in which
the parameters should be returned.

@return the parameter specification.

@exception InvalidParameterSpecException if the requested parameter
specification is inappropriate for this parameter object.
"
      end

      operation 7921666 "engineGetEncoded"
	abstract protected explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters in their primary encoding format.
The primary encoding format for parameters is ASN.1, if an ASN.1
specification for this type of parameters exists.

@return the parameters encoded using their primary encoding format.

@exception IOException on encoding errors.
"
      end

      operation 7921794 "engineGetEncoded"
	abstract protected explicit_return_type "byte"
	nparams 1
	  param inout name "format" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters encoded in the specified format.
If {@code format} is null, the
primary encoding format for parameters is used. The primary encoding
format is ASN.1, if an ASN.1 specification for these parameters
exists.

@param format the name of the encoding format.

@return the parameters encoded using the specified encoding scheme.

@exception IOException on encoding errors.
"
      end

      operation 7921922 "engineToString"
	abstract protected return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters.
"
      end
    end

    class 1014146 "AllPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The AllPermission is a permission that implies all other permissions.
<p>
<b>Note:</b> Granting AllPermission should be done with extreme care,
as it implies all other permissions. Thus, it grants code the ability
to run with security
disabled.  Extreme caution should be taken before granting such
a permission to code.  This permission should be used only during testing,
or in extremely rare cases where an application or applet is
completely trusted and adding the necessary permissions to the policy
is prohibitively cumbersome.

@see java.security.Permission
@see java.security.AccessController
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.lang.SecurityManager


@author Roland Schemers

@serial exclude
"
      classrelation 3337986 // <generalisation>
	relation 3337986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3337986 // <generalisation>
	  b parent class_ref 257538 // Permission
      end

      attribute 1841410 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2916474571451318075L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7922050 "AllPermission"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AllPermission object.
"
      end

      operation 7922178 "AllPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AllPermission object. This
constructor exists for use by the {@code Policy} object
to instantiate new Permission objects.

@param name ignored
@param actions ignored.
"
      end

      operation 7922306 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified permission is \"implied\" by
this object. This method always returns true.

@param p the permission to check against.

@return return
"
      end

      operation 7922434 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two AllPermission objects for equality. Two AllPermission
objects are always equal.

@param obj the object we are testing for equality with this object.
@return true if <i>obj</i> is an AllPermission, false otherwise.
"
      end

      operation 7922562 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object.

@return a hash code value for this object.
"
      end

      operation 7922690 "getActions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical string representation of the actions.

@return the actions.
"
      end

      operation 7922818 "newPermissionCollection"
	public return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new PermissionCollection object for storing AllPermission
objects.
<p>

@return a new PermissionCollection object suitable for
storing AllPermissions.
"
      end
    end

    class 1014274 "AllPermissionCollection"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A AllPermissionCollection stores a collection
of AllPermission permissions. AllPermission objects
must be stored in a manner that allows them to be inserted in any
order, but enable the implies function to evaluate the implies
method in an efficient (and consistent) manner.

@see java.security.Permission
@see java.security.Permissions


@author Roland Schemers

@serial include
"
      classrelation 3338114 // <generalisation>
	relation 3338114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3338114 // <generalisation>
	  b parent class_ref 257794 // PermissionCollection
      end

      classrelation 3338242 // <realization>
	relation 3338242 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3338242 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1841538 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4023755556366636806L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from JDK 1.2.2 for interoperability
"
      end

      attribute 1841666 "all_allowed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if any all permissions have been added"
      end

      operation 7922946 "AllPermissionCollection"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an empty AllPermissions object.

"
      end

      operation 7923074 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission to the AllPermissions. The key for the hash is
permission.path.

@param permission the Permission object to add.

@exception IllegalArgumentException - if the permission is not a
                                      AllPermission

@exception SecurityException - if this AllPermissionCollection object
                               has been marked readonly
"
      end

      operation 7923202 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and see if this set of permissions implies the permissions
expressed in \"permission\".

@param permission the Permission object to compare

@return always returns true.
"
      end

      operation 7923330 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the AllPermission objects in the
container.

@return an enumeration of all the AllPermission objects.
"
      end
    end

    class 1014402 "AuthProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines login and logout methods for a provider.

<p> While callers may invoke {@code login} directly,
the provider may also invoke {@code login} on behalf of callers
if it determines that a login must be performed
prior to certain operations.

@since 1.5
"
      classrelation 3342850 // <generalisation>
	relation 3342850 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3342850 // <generalisation>
	  b parent class_ref 509570 // Provider
      end

      attribute 1844098 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4197859053084546461L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7939074 "AuthProvider"
	protected explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param in name "version" explicit_type "double"
	  param inout name "info" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a provider with the specified name, version number,
and information.

@param name the provider name.
@param version the provider version number.
@param info a description of the provider and its services.
"
      end

      operation 7939202 "login"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "subject" type class_ref 503042 // Subject
	  param inout name "handler" type class_ref 507778 // CallbackHandler
	nexceptions 1
	  exception class_ref 507906 // LoginException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log in to this provider.

<p> The provider relies on a {@code CallbackHandler}
to obtain authentication information from the caller
(a PIN, for example).  If the caller passes a {@code null}
handler to this method, the provider uses the handler set in the
{@code setCallbackHandler} method.
If no handler was set in that method, the provider queries the
<i>auth.login.defaultCallbackHandler</i> security property
for the fully qualified class name of a default handler implementation.
If the security property is not set,
the provider is assumed to have alternative means
for obtaining authentication information.

@param subject the {@code Subject} which may contain
         principals/credentials used for authentication,
         or may be populated with additional principals/credentials
         after successful authentication has completed.
         This parameter may be {@code null}.
@param handler the {@code CallbackHandler} used by
         this provider to obtain authentication information
         from the caller, which may be {@code null}

@exception LoginException if the login operation fails
@exception SecurityException if the caller does not pass a
 security check for
 {@code SecurityPermission(\"authProvider.name\")},
 where {@code name} is the value returned by
 this provider's {@code getName} method
"
      end

      operation 7939330 "logout"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 507906 // LoginException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Log out from this provider.

@exception LoginException if the logout operation fails
@exception SecurityException if the caller does not pass a
 security check for
 {@code SecurityPermission(\"authProvider.name\")},
 where {@code name} is the value returned by
 this provider's {@code getName} method
"
      end

      operation 7939458 "setCallbackHandler"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 507778 // CallbackHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set a {@code CallbackHandler}.

<p> The provider uses this handler if one is not passed to the
{@code login} method.  The provider also uses this handler
if it invokes {@code login} on behalf of callers.
In either case if a handler is not set via this method,
the provider queries the
<i>auth.login.defaultCallbackHandler</i> security property
for the fully qualified class name of a default handler implementation.
If the security property is not set,
the provider is assumed to have alternative means
for obtaining authentication information.

@param handler a {@code CallbackHandler} for obtaining
         authentication information, which may be {@code null}

@exception SecurityException if the caller does not pass a
 security check for
 {@code SecurityPermission(\"authProvider.name\")},
 where {@code name} is the value returned by
 this provider's {@code getName} method
"
      end
    end

    class 1015426 "KeyException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the basic key exception.

@see Key
@see InvalidKeyException
@see KeyManagementException

@author Benjamin Renaud
"
      classrelation 3346946 // <generalisation>
	relation 3346946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3346946 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1846914 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7483676942812432108L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7952130 "KeyException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a KeyException with no detail message. A detail
message is a String that describes this particular exception.
"
      end

      operation 7952258 "KeyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a KeyException with the specified detail message.
A detail message is a String that describes this particular
exception.

@param msg the detail message.
"
      end

      operation 7952386 "KeyException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code KeyException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7952514 "KeyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code KeyException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1015554 "CodeSigner"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class encapsulates information about a code signer.
It is immutable.

@since 1.5
@author Vincent Ryan
"
      classrelation 3342978 // <realization>
	relation 3342978 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3342978 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1844226 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6819288105193937581L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3343106 // signerCertPath (<unidirectional association>)
	relation 3343106 --->
	  a role_name "signerCertPath" private
	    comment "
The signer's certificate path.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3343106 // signerCertPath (<unidirectional association>)
	  b parent class_ref 833282 // CertPath
      end

      classrelation 3343234 // timestamp (<unidirectional association>)
	relation 3343234 --->
	  a role_name "timestamp" private
	    comment "
The signature timestamp.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3343234 // timestamp (<unidirectional association>)
	  b parent class_ref 1015682 // Timestamp
      end

      attribute 1844354 "myhash"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Hash code for this code signer.

"
      end

      operation 7940482 "CodeSigner"
	public explicit_return_type ""
	nparams 2
	  param inout name "signerCertPath" type class_ref 833282 // CertPath
	  param inout name "timestamp" type class_ref 1015682 // Timestamp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CodeSigner object.

@param signerCertPath The signer's certificate path.
                      It must not be {@code null}.
@param timestamp A signature timestamp.
                 If {@code null} then no timestamp was generated
                 for the signature.
@throws NullPointerException if {@code signerCertPath} is
                             {@code null}.
"
      end

      operation 7940610 "getSignerCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signer's certificate path.

@return A certificate path.
"
      end

      operation 7940738 "getTimestamp"
	public return_type class_ref 1015682 // Timestamp
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signature timestamp.

@return The timestamp or {@code null} if none is present.
"
      end

      operation 7940866 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this code signer.
The hash code is generated using the signer's certificate path and the
timestamp, if present.

@return a hash code value for this code signer.
"
      end

      operation 7940994 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests for equality between the specified object and this
code signer. Two code signers are considered equal if their
signer certificate paths are equal and if their timestamps are equal,
if present in both.

@param obj the object to test for equality with this object.

@return true if the objects are considered equal, false otherwise.
"
      end

      operation 7941122 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this code signer.

@return A string comprising the signer's certificate and a timestamp,
        if present.
"
      end

      operation 7941250 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Explicitly reset hash code value to -1"
      end
    end

    class 1015682 "Timestamp"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class encapsulates information about a signed timestamp.
It is immutable.
It includes the timestamp's date and time as well as information about the
Timestamping Authority (TSA) which generated and signed the timestamp.

@since 1.5
@author Vincent Ryan
"
      classrelation 3367042 // <realization>
	relation 3367042 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3367042 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1859586 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5502683707821851294L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3367170 // timestamp (<unidirectional association>)
	relation 3367170 --->
	  a role_name "timestamp" private
	    comment "
The timestamp's date and time

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3367170 // timestamp (<unidirectional association>)
	  b parent class_ref 521474 // Date
      end

      classrelation 3367298 // signerCertPath (<unidirectional association>)
	relation 3367298 --->
	  a role_name "signerCertPath" private
	    comment "
The TSA's certificate path.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3367298 // signerCertPath (<unidirectional association>)
	  b parent class_ref 833282 // CertPath
      end

      attribute 1859714 "myhash"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Hash code for this timestamp.

"
      end

      operation 8015234 "Timestamp"
	public explicit_return_type ""
	nparams 2
	  param inout name "timestamp" type class_ref 521474 // Date
	  param inout name "signerCertPath" type class_ref 833282 // CertPath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a Timestamp.

@param timestamp is the timestamp's date and time. It must not be null.
@param signerCertPath is the TSA's certificate path. It must not be null.
@throws NullPointerException if timestamp or signerCertPath is null.
"
      end

      operation 8015362 "getTimestamp"
	public return_type class_ref 521474 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the date and time when the timestamp was generated.

@return The timestamp's date and time.
"
      end

      operation 8015490 "getSignerCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificate path for the Timestamping Authority.

@return The TSA's certificate path.
"
      end

      operation 8015618 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this timestamp.
The hash code is generated using the date and time of the timestamp
and the TSA's certificate path.

@return a hash code value for this timestamp.
"
      end

      operation 8015746 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests for equality between the specified object and this
timestamp. Two timestamps are considered equal if the date and time of
their timestamp's and their signer's certificate paths are equal.

@param obj the object to test for equality with this timestamp.

@return true if the timestamp are considered equal, false otherwise.
"
      end

      operation 8015874 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this timestamp.

@return A string comprising the date and time of the timestamp and
        its signer's certificate.
"
      end

      operation 8016002 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Explicitly reset hash code value to -1"
      end
    end

    class 1015938 "CryptoPrimitive"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An enumeration of cryptographic primitives.

@since 1.7
"
      attribute 1844610 "MESSAGE_DIGEST"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Hash function

"
      end

      attribute 1844738 "SECURE_RANDOM"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Cryptographic random number generator

"
      end

      attribute 1844866 "BLOCK_CIPHER"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Symmetric primitive: block cipher

"
      end

      attribute 1844994 "STREAM_CIPHER"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Symmetric primitive: stream cipher

"
      end

      attribute 1845122 "MAC"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Symmetric primitive: message authentication code

"
      end

      attribute 1845250 "KEY_WRAP"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Symmetric primitive: key wrap

"
      end

      attribute 1845378 "PUBLIC_KEY_ENCRYPTION"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Asymmetric primitive: public key encryption

"
      end

      attribute 1845506 "SIGNATURE"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Asymmetric primitive: signature scheme

"
      end

      attribute 1845634 "KEY_ENCAPSULATION"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Asymmetric primitive: key encapsulation mechanism

"
      end

      attribute 1845762 "KEY_AGREEMENT"
	public type class_ref 1015938 // CryptoPrimitive
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Asymmetric primitive: key agreement and key distribution
"
      end
    end

    class 1016066 "GeneralSecurityException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code GeneralSecurityException} class is a generic
security exception class that provides type safety for all the
security-related exception classes that extend from it.

@author Jan Luehe
"
      classrelation 3344130 // <generalisation>
	relation 3344130 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3344130 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1845890 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 894798122053539237L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7943170 "GeneralSecurityException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a GeneralSecurityException with no detail message.
"
      end

      operation 7943298 "GeneralSecurityException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a GeneralSecurityException with the specified detail
message.
A detail message is a String that describes this particular
exception.

@param msg the detail message.
"
      end

      operation 7943426 "GeneralSecurityException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code GeneralSecurityException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7943554 "GeneralSecurityException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code GeneralSecurityException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1016194 "DigestInputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A transparent stream that updates the associated message digest using
the bits going through the stream.

<p>To complete the message digest computation, call one of the
{@code digest} methods on the associated message
digest after your calls to one of this digest input stream's
{@link #read() read} methods.

<p>It is possible to turn this stream on or off (see
{@link #on(boolean) on}). When it is on, a call to one of the
{@code read} methods
results in an update on the message digest.  But when it is off,
the message digest is not updated. The default is for the stream
to be on.

<p>Note that digest objects can compute only one digest (see
{@link MessageDigest}),
so that in order to compute intermediate digests, a caller should
retain a handle onto the digest object, and clone it for each
digest to be computed, leaving the orginal digest untouched.

@see MessageDigest

@see DigestOutputStream

@author Benjamin Renaud
"
      classrelation 3344386 // <generalisation>
	relation 3344386 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3344386 // <generalisation>
	  b parent class_ref 577922 // FilterInputStream
      end

      attribute 1846146 "on"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " NOTE: This should be made a generic UpdaterInputStream 
 Are we on or off? 
"
      end

      classrelation 3344514 // digest (<unidirectional association>)
	relation 3344514 --->
	  a role_name "digest" protected
	    comment "
The message digest associated with this stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3344514 // digest (<unidirectional association>)
	  b parent class_ref 752386 // MessageDigest
      end

      operation 7944194 "DigestInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "stream" type class_ref 146434 // InputStream
	  param inout name "digest" type class_ref 752386 // MessageDigest
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a digest input stream, using the specified input stream
and message digest.

@param stream the input stream.

@param digest the message digest to associate with this stream.
"
      end

      operation 7944322 "getMessageDigest"
	public return_type class_ref 752386 // MessageDigest
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the message digest associated with this stream.

@return the message digest associated with this stream.
@see #setMessageDigest(java.security.MessageDigest)
"
      end

      operation 7944450 "setMessageDigest"
	public explicit_return_type "void"
	nparams 1
	  param inout name "digest" type class_ref 752386 // MessageDigest
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified message digest with this stream.

@param digest the message digest to be associated with this stream.
@see #getMessageDigest()
"
      end

      operation 7944578 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a byte, and updates the message digest (if the digest
function is on).  That is, this method reads a byte from the
input stream, blocking until the byte is actually read. If the
digest function is on (see {@link #on(boolean) on}), this method
will then call {@code update} on the message digest associated
with this stream, passing it the byte read.

@return the byte read.

@exception IOException if an I/O error occurs.

@see MessageDigest#update(byte)
"
      end

      operation 7944706 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads into a byte array, and updates the message digest (if the
digest function is on).  That is, this method reads up to
{@code len} bytes from the input stream into the array
{@code b}, starting at offset {@code off}. This method
blocks until the data is actually
read. If the digest function is on (see
{@link #on(boolean) on}), this method will then call {@code update}
on the message digest associated with this stream, passing it
the data.

@param b the array into which the data is read.

@param off the starting offset into {@code b} of where the
data should be placed.

@param len the maximum number of bytes to be read from the input
stream into b, starting at offset {@code off}.

@return  the actual number of bytes read. This is less than
{@code len} if the end of the stream is reached prior to
reading {@code len} bytes. -1 is returned if no bytes were
read because the end of the stream had already been reached when
the call was made.

@exception IOException if an I/O error occurs.

@see MessageDigest#update(byte[], int, int)
"
      end

      operation 7944834 "on"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Turns the digest function on or off. The default is on.  When
it is on, a call to one of the {@code read} methods results in an
update on the message digest.  But when it is off, the message
digest is not updated.

@param on true to turn the digest function on, false to turn
it off.
"
      end

      operation 7944962 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string representation of this digest input stream and
its associated message digest object.
"
      end
    end

    class 1016322 "DigestOutputStream"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A transparent stream that updates the associated message digest using
the bits going through the stream.

<p>To complete the message digest computation, call one of the
{@code digest} methods on the associated message
digest after your calls to one of this digest output stream's
{@link #write(int) write} methods.

<p>It is possible to turn this stream on or off (see
{@link #on(boolean) on}). When it is on, a call to one of the
{@code write} methods results in
an update on the message digest.  But when it is off, the message
digest is not updated. The default is for the stream to be on.

@see MessageDigest
@see DigestInputStream

@author Benjamin Renaud
"
      classrelation 3344642 // <generalisation>
	relation 3344642 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3344642 // <generalisation>
	  b parent class_ref 921730 // FilterOutputStream
      end

      attribute 1846274 "on"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3344770 // digest (<unidirectional association>)
	relation 3344770 --->
	  a role_name "digest" protected
	    comment "
The message digest associated with this stream.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3344770 // digest (<unidirectional association>)
	  b parent class_ref 752386 // MessageDigest
      end

      operation 7945090 "DigestOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "stream" type class_ref 151298 // OutputStream
	  param inout name "digest" type class_ref 752386 // MessageDigest
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a digest output stream, using the specified output stream
and message digest.

@param stream the output stream.

@param digest the message digest to associate with this stream.
"
      end

      operation 7945218 "getMessageDigest"
	public return_type class_ref 752386 // MessageDigest
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the message digest associated with this stream.

@return the message digest associated with this stream.
@see #setMessageDigest(java.security.MessageDigest)
"
      end

      operation 7945346 "setMessageDigest"
	public explicit_return_type "void"
	nparams 1
	  param inout name "digest" type class_ref 752386 // MessageDigest
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified message digest with this stream.

@param digest the message digest to be associated with this stream.
@see #getMessageDigest()
"
      end

      operation 7945474 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the message digest (if the digest function is on) using
the specified byte, and in any case writes the byte
to the output stream. That is, if the digest function is on
(see {@link #on(boolean) on}), this method calls
{@code update} on the message digest associated with this
stream, passing it the byte {@code b}. This method then
writes the byte to the output stream, blocking until the byte
is actually written.

@param b the byte to be used for updating and writing to the
output stream.

@exception IOException if an I/O error occurs.

@see MessageDigest#update(byte)
"
      end

      operation 7945602 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the message digest (if the digest function is on) using
the specified subarray, and in any case writes the subarray to
the output stream. That is, if the digest function is on (see
{@link #on(boolean) on}), this method calls {@code update}
on the message digest associated with this stream, passing it
the subarray specifications. This method then writes the subarray
bytes to the output stream, blocking until the bytes are actually
written.

@param b the array containing the subarray to be used for updating
and writing to the output stream.

@param off the offset into {@code b} of the first byte to
be updated and written.

@param len the number of bytes of data to be updated and written
from {@code b}, starting at offset {@code off}.

@exception IOException if an I/O error occurs.

@see MessageDigest#update(byte[], int, int)
"
      end

      operation 7945730 "on"
	public explicit_return_type "void"
	nparams 1
	  param inout name "on" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Turns the digest function on or off. The default is on.  When
it is on, a call to one of the {@code write} methods results in an
update on the message digest.  But when it is off, the message
digest is not updated.

@param on true to turn the digest function on, false to turn it
off.
"
      end

      operation 7945858 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prints a string representation of this digest output stream and
its associated message digest object.
"
      end
    end

    class 1016450 "DomainLoadStoreParameter"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Configuration data that specifies the keystores in a keystore domain.
A keystore domain is a collection of keystores that are presented as a
single logical keystore. The configuration data is used during
{@code KeyStore}
{@link KeyStore#load(KeyStore.LoadStoreParameter) load} and
{@link KeyStore#store(KeyStore.LoadStoreParameter) store} operations.
<p>
The following syntax is supported for configuration data:
<pre>{@code
    domain <domainName> [<property> ...] {
        keystore <keystoreName> [<property> ...] ;
        ...
    };
    ...
}</pre>
where {@code domainName} and {@code keystoreName} are identifiers
and {@code property} is a key/value pairing. The key and value are
separated by an 'equals' symbol and the value is enclosed in double
quotes. A property value may be either a printable string or a binary
string of colon-separated pairs of hexadecimal digits. Multi-valued
properties are represented as a comma-separated list of values,
enclosed in square brackets.
See {@link Arrays#toString(java.lang.Object[])}.
<p>
To ensure that keystore entries are uniquely identified, each
entry's alias is prefixed by its {@code keystoreName} followed
by the entry name separator and each {@code keystoreName} must be
unique within its domain. Entry name prefixes are omitted when
storing a keystore.
<p>
Properties are context-sensitive: properties that apply to
all the keystores in a domain are located in the domain clause,
and properties that apply only to a specific keystore are located
in that keystore's clause.
Unless otherwise specified, a property in a keystore clause overrides
a property of the same name in the domain clause. All property names
are case-insensitive. The following properties are supported:
<dl>
<dt> {@code keystoreType=\"<type>\"} </dt>
    <dd> The keystore type. </dd>
<dt> {@code keystoreURI=\"<url>\"} </dt>
    <dd> The keystore location. </dd>
<dt> {@code keystoreProviderName=\"<name>\"} </dt>
    <dd> The name of the keystore's JCE provider. </dd>
<dt> {@code keystorePasswordEnv=\"<environment-variable>\"} </dt>
    <dd> The environment variable that stores a keystore password.
         Alternatively, passwords may be supplied to the constructor
         method in a {@code Map<String, ProtectionParameter>}. </dd>
<dt> {@code entryNameSeparator=\"<separator>\"} </dt>
    <dd> The separator between a keystore name prefix and an entry name.
         When specified, it applies to all the entries in a domain.
         Its default value is a space. </dd>
</dl>
<p>
For example, configuration data for a simple keystore domain
comprising three keystores is shown below:
<pre>

domain app1 {
    keystore app1-truststore
        keystoreURI=\"file:///app1/etc/truststore.jks\";

    keystore system-truststore
        keystoreURI=\"${java.home}/lib/security/cacerts\";

    keystore app1-keystore
        keystoreType=\"PKCS12\"
        keystoreURI=\"file:///app1/etc/keystore.p12\";
};

</pre>
@since 1.8
"
      classrelation 3345026 // configuration (<unidirectional association>)
	relation 3345026 --->
	  a role_name "configuration" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3345026 // configuration (<unidirectional association>)
	  b parent class_ref 783874 // URI
      end

      classrelation 3345154 // protectionParams (<unidirectional association>)
	relation 3345154 --->
	  a role_name "protectionParams" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,ProtectionParameter> ${name}${value};
"
	    classrelation_ref 3345154 // protectionParams (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 7945986 "DomainLoadStoreParameter"
	public explicit_return_type ""
	nparams 2
	  param inout name "configuration" type class_ref 783874 // URI
	  param inout name "protectionParams" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<String,ProtectionParameter> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a DomainLoadStoreParameter for a keystore domain with
the parameters used to protect keystore data.

@param configuration identifier for the domain configuration data.
    The name of the target domain should be specified in the
    {@code java.net.URI} fragment component when it is necessary
    to distinguish between several domain configurations at the
    same location.

@param protectionParams the map from keystore name to the parameter
    used to protect keystore data.
    A {@code java.util.Collections.EMPTY_MAP} should be used
    when protection parameters are not required or when they have
    been specified by properties in the domain configuration data.
    It is cloned to prevent subsequent modification.

@exception NullPointerException if {@code configuration} or
    {@code protectionParams} is {@code null}
"
      end

      operation 7946114 "getConfiguration"
	public return_type class_ref 783874 // URI
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the identifier for the domain configuration data.

@return the identifier for the configuration data
"
      end

      operation 7946242 "getProtectionParams"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,ProtectionParameter> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the keystore protection parameters for keystores in this
domain.

@return an unmodifiable map of keystore names to protection
    parameters
"
      end

      operation 7946370 "getProtectionParameter"
	public return_type class_ref 1016706 // ProtectionParameter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the keystore protection parameters for this domain.
Keystore domains do not support a protection parameter.

@return always returns {@code null}
"
      end
    end

    class 1016834 "GuardedObject"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A GuardedObject is an object that is used to protect access to
another object.

<p>A GuardedObject encapsulates a target object and a Guard object,
such that access to the target object is possible
only if the Guard object allows it.
Once an object is encapsulated by a GuardedObject,
access to that object is controlled by the {@code getObject}
method, which invokes the
{@code checkGuard} method on the Guard object that is
guarding access. If access is not allowed,
an exception is thrown.

@see Guard
@see Permission

@author Roland Schemers
@author Li Gong
"
      classrelation 3345282 // <realization>
	relation 3345282 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3345282 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1846402 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5240450096227834308L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3345410 // object (<unidirectional association>)
	relation 3345410 --->
	  a role_name "object" private
	    comment " the object we are guarding"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3345410 // object (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3345538 // guard (<unidirectional association>)
	relation 3345538 --->
	  a role_name "guard" private
	    comment " the guard"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3345538 // guard (<unidirectional association>)
	  b parent class_ref 257666 // Guard
      end

      operation 7946498 "GuardedObject"
	public explicit_return_type ""
	nparams 2
	  param inout name "object" type class_ref 129538 // Object
	  param inout name "guard" type class_ref 257666 // Guard
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a GuardedObject using the specified object and guard.
If the Guard object is null, then no restrictions will
be placed on who can access the object.

@param object the object to be guarded.

@param guard the Guard object that guards access to the object.
"
      end

      operation 7946626 "getObject"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the guarded object, or throws an exception if access
to the guarded object is denied by the guard.

@return the guarded object.

@exception SecurityException if access to the guarded object is
denied.
"
      end

      operation 7946754 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "oos" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes this object out to a stream (i.e., serializes it).
We check the guard if there is one.
"
      end
    end

    class 1016962 "Identity"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>This class represents identities: real-world objects such as people,
companies or organizations whose identities can be authenticated using
their public keys. Identities may also be more abstract (or concrete)
constructs, such as daemon threads or smart cards.

<p>All Identity objects have a name and a public key. Names are
immutable. Identities may also be scoped. That is, if an Identity is
specified to have a particular scope, then the name and public
key of the Identity are unique within that scope.

<p>An Identity also has a set of certificates (all certifying its own
public key). The Principal names specified in these certificates need
not be the same, only the key.

<p>An Identity can be subclassed, to include postal and email addresses,
telephone numbers, images of faces and logos, and so on.

@see IdentityScope
@see Signer
@see Principal

@author Benjamin Renaud
@deprecated This class is no longer used. Its functionality has been
replaced by {@code java.security.KeyStore}, the
{@code java.security.cert} package, and
{@code java.security.Principal}.
"
      classrelation 3345666 // <realization>
	relation 3345666 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3345666 // <realization>
	  b parent class_ref 510594 // Principal
      end

      classrelation 3345794 // <realization>
	relation 3345794 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3345794 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1846530 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3609922007826600659L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " use serialVersionUID from JDK 1.1.x for interoperability 
"
      end

      classrelation 3345922 // name (<unidirectional association>)
	relation 3345922 --->
	  a role_name "name" private
	    comment "
The name for this identity.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3345922 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3346050 // publicKey (<unidirectional association>)
	relation 3346050 --->
	  a role_name "publicKey" private
	    comment "
The public key for this identity.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3346050 // publicKey (<unidirectional association>)
	  b parent class_ref 765826 // PublicKey
      end

      classrelation 3346178 // info (<unidirectional association>)
	relation 3346178 --->
	  a role_name "info" init_value " \"No further information available.\"" package
	    comment "
Generic, descriptive information about the identity.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3346178 // info (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3346306 // scope (<unidirectional association>)
	relation 3346306 --->
	  a role_name "scope" package
	    comment "
The scope of the identity.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3346306 // scope (<unidirectional association>)
	  b parent class_ref 1017090 // IdentityScope
      end

      classrelation 3346434 // certificates (<unidirectional association>)
	relation 3346434 --->
	  a role_name "certificates" package
	    comment "
The certificates for this identity.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Certificate> ${name}${value};
"
	    classrelation_ref 3346434 // certificates (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 7946882 "Identity"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for serialization only.
"
      end

      operation 7947010 "Identity"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "scope" type class_ref 1017090 // IdentityScope
	nexceptions 1
	  exception class_ref 1017218 // KeyManagementException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an identity with the specified name and scope.

@param name the identity name.
@param scope the scope of the identity.

@exception KeyManagementException if there is already an identity
with the same name in the scope.
"
      end

      operation 7947138 "Identity"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an identity with the specified name and no scope.

@param name the identity name.
"
      end

      operation 7947266 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this identity's name.

@return the name of this identity.
"
      end

      operation 7947394 "getScope"
	public return_type class_ref 1017090 // IdentityScope
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this identity's scope.

@return the scope of this identity.
"
      end

      operation 7947522 "getPublicKey"
	public return_type class_ref 765826 // PublicKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this identity's public key.

@return the public key for this identity.

@see #setPublicKey
"
      end

      operation 7947650 "setPublicKey"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 765826 // PublicKey
	nexceptions 1
	  exception class_ref 1017218 // KeyManagementException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this identity's public key. The old key and all of this
identity's certificates are removed by this operation.

<p>First, if there is a security manager, its {@code checkSecurityAccess}
method is called with {@code \"setIdentityPublicKey\"}
as its argument to see if it's ok to set the public key.

@param key the public key for this identity.

@exception KeyManagementException if another identity in the
identity's scope has the same public key, or if another exception occurs.

@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
setting the public key.

@see #getPublicKey
@see SecurityManager#checkSecurityAccess

 Should we throw an exception if this is already set? "
      end

      operation 7947778 "setInfo"
	public explicit_return_type "void"
	nparams 1
	  param inout name "info" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies a general information string for this identity.

<p>First, if there is a security manager, its {@code checkSecurityAccess}
method is called with {@code \"setIdentityInfo\"}
as its argument to see if it's ok to specify the information string.

@param info the information string.

@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
setting the information string.

@see #getInfo
@see SecurityManager#checkSecurityAccess
"
      end

      operation 7947906 "getInfo"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns general information previously specified for this identity.

@return general information about this identity.

@see #setInfo
"
      end

      operation 7948034 "addCertificate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "certificate" type class_ref 833154 // Certificate
	nexceptions 1
	  exception class_ref 1017218 // KeyManagementException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a certificate for this identity. If the identity has a public
key, the public key in the certificate must be the same, and if
the identity does not have a public key, the identity's
public key is set to be that specified in the certificate.

<p>First, if there is a security manager, its {@code checkSecurityAccess}
method is called with {@code \"addIdentityCertificate\"}
as its argument to see if it's ok to add a certificate.

@param certificate the certificate to be added.

@exception KeyManagementException if the certificate is not valid,
if the public key in the certificate being added conflicts with
this identity's public key, or if another exception occurs.

@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
adding a certificate.

@see SecurityManager#checkSecurityAccess
"
      end

      operation 7948162 "keyEquals"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "aKey" type class_ref 765826 // PublicKey
	  param inout name "anotherKey" type class_ref 765826 // PublicKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7948290 "removeCertificate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "certificate" type class_ref 833154 // Certificate
	nexceptions 1
	  exception class_ref 1017218 // KeyManagementException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a certificate from this identity.

<p>First, if there is a security manager, its {@code checkSecurityAccess}
method is called with {@code \"removeIdentityCertificate\"}
as its argument to see if it's ok to remove a certificate.

@param certificate the certificate to be removed.

@exception KeyManagementException if the certificate is
missing, or if another exception occurs.

@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
removing a certificate.

@see SecurityManager#checkSecurityAccess
"
      end

      operation 7948418 "certificates"
	public return_type class_ref 833154 // Certificate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of all the certificates for this identity.

@return a copy of all the certificates for this identity.
"
      end

      operation 7948546 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "identity" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests for equality between the specified object and this identity.
This first tests to see if the entities actually refer to the same
object, in which case it returns true. Next, it checks to see if
the entities have the same name and the same scope. If they do,
the method returns true. Otherwise, it calls
{@link #identityEquals(Identity) identityEquals}, which subclasses should
override.

@param identity the object to test for equality with this identity.

@return true if the objects are considered equal, false otherwise.

@see #identityEquals
"
      end

      operation 7948674 "identityEquals"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "identity" type class_ref 1016962 // Identity
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests for equality between the specified identity and this identity.
This method should be overriden by subclasses to test for equality.
The default behavior is to return true if the names and public keys
are equal.

@param identity the identity to test for equality with this identity.

@return true if the identities are considered equal, false
otherwise.

@see #equals
"
      end

      operation 7948802 "fullName"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a parsable name for identity: identityName.scopeName
"
      end

      operation 7948930 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a short string describing this identity, telling its
name and its scope (if any).

<p>First, if there is a security manager, its {@code checkSecurityAccess}
method is called with {@code \"printIdentity\"}
as its argument to see if it's ok to return the string.

@return information about this identity, such as its name and the
name of its scope (if any).

@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
returning a string describing this identity.

@see SecurityManager#checkSecurityAccess
"
      end

      operation 7949058 "toString"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "detailed" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this identity, with
optionally more details than that provided by the
{@code toString} method without any arguments.

<p>First, if there is a security manager, its {@code checkSecurityAccess}
method is called with {@code \"printIdentity\"}
as its argument to see if it's ok to return the string.

@param detailed whether or not to provide detailed information.

@return information about this identity. If {@code detailed}
is true, then this method returns more information than that
provided by the {@code toString} method without any arguments.

@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
returning a string describing this identity.

@see #toString
@see SecurityManager#checkSecurityAccess
"
      end

      operation 7949186 "printKeys"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7949314 "printCertificates"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7949442 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this identity.

@return a hashcode for this identity.
"
      end

      operation 7949570 "check"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "directive" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1017090 "IdentityScope"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>This class represents a scope for identities. It is an Identity
itself, and therefore has a name and can have a scope. It can also
optionally have a public key and associated certificates.

<p>An IdentityScope can contain Identity objects of all kinds, including
Signers. All types of Identity objects can be retrieved, added, and
removed using the same methods. Note that it is possible, and in fact
expected, that different types of identity scopes will
apply different policies for their various operations on the
various types of Identities.

<p>There is a one-to-one mapping between keys and identities, and
there can only be one copy of one key per scope. For example, suppose
<b>Acme Software, Inc</b> is a software publisher known to a user.
Suppose it is an Identity, that is, it has a public key, and a set of
associated certificates. It is named in the scope using the name
\"Acme Software\". No other named Identity in the scope has the same
public  key. Of course, none has the same name as well.

@see Identity
@see Signer
@see Principal
@see Key

@author Benjamin Renaud

@deprecated This class is no longer used. Its functionality has been
replaced by {@code java.security.KeyStore}, the
{@code java.security.cert} package, and
{@code java.security.Principal}.
"
      classrelation 3346562 // <generalisation>
	relation 3346562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3346562 // <generalisation>
	  b parent class_ref 1016962 // Identity
      end

      attribute 1846658 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2337346281189773310L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3346690 // scope (<unidirectional association>)
	relation 3346690 --->
	  a role_name "scope" class_relation private
	    comment " The system's scope 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3346690 // scope (<unidirectional association>)
	  b parent class_ref 1017090 // IdentityScope
      end

      operation 7949698 "initializeSystemScope"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " initialize the system scope"
      end

      operation 7949826 "IdentityScope"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This constructor is used for serialization only and should not
be used by subclasses.
"
      end

      operation 7949954 "IdentityScope"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new identity scope with the specified name.

@param name the scope name.
"
      end

      operation 7950082 "IdentityScope"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "scope" type class_ref 1017090 // IdentityScope
	nexceptions 1
	  exception class_ref 1017218 // KeyManagementException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new identity scope with the specified name and scope.

@param name the scope name.
@param scope the scope for the new identity scope.

@exception KeyManagementException if there is already an identity
with the same name in the scope.
"
      end

      operation 7950210 "getSystemScope"
	class_operation public return_type class_ref 1017090 // IdentityScope
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system's identity scope.

@return the system's identity scope, or {@code null} if none has been
        set.

@see #setSystemScope
"
      end

      operation 7950338 "setSystemScope"
	class_operation protected explicit_return_type "void"
	nparams 1
	  param inout name "scope" type class_ref 1017090 // IdentityScope
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the system's identity scope.

<p>First, if there is a security manager, its
{@code checkSecurityAccess}
method is called with {@code \"setSystemScope\"}
as its argument to see if it's ok to set the identity scope.

@param scope the scope to set.

@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
setting the identity scope.

@see #getSystemScope
@see SecurityManager#checkSecurityAccess
"
      end

      operation 7950466 "size"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of identities within this identity scope.

@return the number of identities within this identity scope.
"
      end

      operation 7950594 "getIdentity"
	abstract public return_type class_ref 1016962 // Identity
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the identity in this scope with the specified name (if any).

@param name the name of the identity to be retrieved.

@return the identity named {@code name}, or null if there are
no identities named {@code name} in this scope.
"
      end

      operation 7950722 "getIdentity"
	public return_type class_ref 1016962 // Identity
	nparams 1
	  param inout name "principal" type class_ref 510594 // Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the identity whose name is the same as that of the
specified principal. (Note: Identity implements Principal.)

@param principal the principal corresponding to the identity
to be retrieved.

@return the identity whose name is the same as that of the
principal, or null if there are no identities of the same name
in this scope.
"
      end

      operation 7950850 "getIdentity"
	abstract public return_type class_ref 1016962 // Identity
	nparams 1
	  param inout name "key" type class_ref 765826 // PublicKey
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the identity with the specified public key.

@param key the public key for the identity to be returned.

@return the identity with the given key, or null if there are
no identities in this scope with that key.
"
      end

      operation 7950978 "addIdentity"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "identity" type class_ref 1016962 // Identity
	nexceptions 1
	  exception class_ref 1017218 // KeyManagementException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an identity to this identity scope.

@param identity the identity to be added.

@exception KeyManagementException if the identity is not
valid, a name conflict occurs, another identity has the same
public key as the identity being added, or another exception
occurs. "
      end

      operation 7951106 "removeIdentity"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "identity" type class_ref 1016962 // Identity
	nexceptions 1
	  exception class_ref 1017218 // KeyManagementException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an identity from this identity scope.

@param identity the identity to be removed.

@exception KeyManagementException if the identity is missing,
or another exception occurs.
"
      end

      operation 7951234 "identities"
	abstract public return_type class_ref 185986 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Identity> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all identities in this identity scope.

@return an enumeration of all identities in this identity scope.
"
      end

      operation 7951362 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this identity scope, including
its name, its scope name, and the number of identities in this
identity scope.

@return a string representation of this identity scope.
"
      end

      operation 7951490 "check"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "directive" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1017218 "KeyManagementException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the general key management exception for all operations
dealing with key management. Examples of subclasses of
KeyManagementException that developers might create for
giving more detailed information could include:

<ul>
<li>KeyIDConflictException
<li>KeyAuthorizationFailureException
<li>ExpiredKeyException
</ul>

@author Benjamin Renaud

@see Key
@see KeyException
"
      classrelation 3348098 // <generalisation>
	relation 3348098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3348098 // <generalisation>
	  b parent class_ref 1015426 // KeyException
      end

      attribute 1847554 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 947674216157062695L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7955842 "KeyManagementException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a KeyManagementException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 7955970 "KeyManagementException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a KeyManagementException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param msg the detail message.
"
      end

      operation 7956098 "KeyManagementException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code KeyManagementException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7956226 "KeyManagementException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code KeyManagementException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1017346 "InvalidKeyException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the exception for invalid Keys (invalid encoding, wrong
length, uninitialized, etc).

@author Benjamin Renaud
"
      classrelation 3347074 // <generalisation>
	relation 3347074 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3347074 // <generalisation>
	  b parent class_ref 1015426 // KeyException
      end

      attribute 1847042 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5698479920593359816L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7952642 "InvalidKeyException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidKeyException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 7952770 "InvalidKeyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidKeyException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param msg the detail message.
"
      end

      operation 7952898 "InvalidKeyException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code InvalidKeyException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7953026 "InvalidKeyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code InvalidKeyException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1017474 "InvalidParameterException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception, designed for use by the JCA/JCE engine classes,
is thrown when an invalid parameter is passed
to a method.

@author Benjamin Renaud
"
      classrelation 3347202 // <generalisation>
	relation 3347202 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3347202 // <generalisation>
	  b parent class_ref 187778 // IllegalArgumentException
      end

      attribute 1847170 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -857968536935667808L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7953154 "InvalidParameterException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidParameterException with no detail message.
A detail message is a String that describes this particular
exception.
"
      end

      operation 7953282 "InvalidParameterException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an InvalidParameterException with the specified
detail message.  A detail message is a String that describes
this particular exception.

@param msg the detail message.
"
      end
    end

    class 1017602 "KeyFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Key factories are used to convert <I>keys</I> (opaque
cryptographic keys of type {@code Key}) into <I>key specifications</I>
(transparent representations of the underlying key material), and vice
versa.

<P> Key factories are bi-directional. That is, they allow you to build an
opaque key object from a given key specification (key material), or to
retrieve the underlying key material of a key object in a suitable format.

<P> Multiple compatible key specifications may exist for the same key.
For example, a DSA public key may be specified using
{@code DSAPublicKeySpec} or
{@code X509EncodedKeySpec}. A key factory can be used to translate
between compatible key specifications.

<P> The following is an example of how to use a key factory in order to
instantiate a DSA public key from its encoding.
Assume Alice has received a digital signature from Bob.
Bob also sent her his public key (in encoded format) to verify
his signature. Alice then performs the following actions:

<pre>
X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(bobEncodedPubKey);
KeyFactory keyFactory = KeyFactory.getInstance(\"DSA\");
PublicKey bobPubKey = keyFactory.generatePublic(bobPubKeySpec);
Signature sig = Signature.getInstance(\"DSA\");
sig.initVerify(bobPubKey);
sig.update(data);
sig.verify(signature);
</pre>

<p> Every implementation of the Java platform is required to support the
following standard {@code KeyFactory} algorithms:
<ul>
<li>{@code DiffieHellman}</li>
<li>{@code DSA}</li>
<li>{@code RSA}</li>
</ul>
These algorithms are described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory\">
KeyFactory section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other algorithms are supported.

@author Jan Luehe

@see Key
@see PublicKey
@see PrivateKey
@see java.security.spec.KeySpec
@see java.security.spec.DSAPublicKeySpec
@see java.security.spec.X509EncodedKeySpec

@since 1.2
"
      attribute 1847426 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "
                        Debug.getInstance(\"jca\", \"KeyFactory\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3347458 // algorithm (<unidirectional association>)
	relation 3347458 --->
	  a role_name "algorithm" const_relation private
	    comment " The algorithm associated with this key factory
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3347458 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3347586 // provider (<unidirectional association>)
	relation 3347586 --->
	  a role_name "provider" private
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3347586 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3347714 // spi (<unidirectional association>)
	relation 3347714 --->
	  a role_name "spi" volatile private
	    comment " The provider implementation (delegate)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3347714 // spi (<unidirectional association>)
	  b parent class_ref 1017730 // KeyFactorySpi
      end

      classrelation 3347842 // lock (<unidirectional association>)
	relation 3347842 --->
	  a role_name "lock" init_value " new Object()" const_relation private
	    comment " lock for mutex during provider selection
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3347842 // lock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 3347970 // serviceIterator (<unidirectional association>)
	relation 3347970 --->
	  a role_name "serviceIterator" private
	    comment " remaining services to try in provider selection
 null once provider is selected
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Service> ${name}${value};
"
	    classrelation_ref 3347970 // serviceIterator (<unidirectional association>)
	  b parent class_ref 132994 // Iterator
      end

      operation 7953794 "KeyFactory"
	protected explicit_return_type ""
	nparams 3
	  param inout name "keyFacSpi" type class_ref 1017730 // KeyFactorySpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a KeyFactory object.

@param keyFacSpi the delegate
@param provider the provider
@param algorithm the name of the algorithm
to associate with this {@code KeyFactory}
"
      end

      operation 7953922 "KeyFactory"
	private explicit_return_type ""
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7954050 "getInstance"
	class_operation public return_type class_ref 1017602 // KeyFactory
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a KeyFactory object that converts
public/private keys of the specified algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new KeyFactory object encapsulating the
KeyFactorySpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the requested key algorithm.
See the KeyFactory section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return the new KeyFactory object.

@exception NoSuchAlgorithmException if no Provider supports a
         KeyFactorySpi implementation for the
         specified algorithm.

@see Provider
"
      end

      operation 7954178 "getInstance"
	class_operation public return_type class_ref 1017602 // KeyFactory
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a KeyFactory object that converts
public/private keys of the specified algorithm.

<p> A new KeyFactory object encapsulating the
KeyFactorySpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the requested key algorithm.
See the KeyFactory section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the name of the provider.

@return the new KeyFactory object.

@exception NoSuchAlgorithmException if a KeyFactorySpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see Provider
"
      end

      operation 7954306 "getInstance"
	class_operation public return_type class_ref 1017602 // KeyFactory
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a KeyFactory object that converts
public/private keys of the specified algorithm.

<p> A new KeyFactory object encapsulating the
KeyFactorySpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param algorithm the name of the requested key algorithm.
See the KeyFactory section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyFactory\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the provider.

@return the new KeyFactory object.

@exception NoSuchAlgorithmException if a KeyFactorySpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the specified provider is null.

@see Provider

@since 1.4
"
      end

      operation 7954434 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this key factory object.

@return the provider of this key factory object
"
      end

      operation 7954562 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the algorithm
associated with this {@code KeyFactory}.

@return the name of the algorithm associated with this
{@code KeyFactory}
"
      end

      operation 7954690 "nextSpi"
	private return_type class_ref 1017730 // KeyFactorySpi
	nparams 1
	  param inout name "oldSpi" type class_ref 1017730 // KeyFactorySpi
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Update the active KeyFactorySpi of this class and return the next
implementation for failover. If no more implemenations are
available, this method returns null. However, the active spi of
this class is never set to null.
"
      end

      operation 7954818 "generatePublic"
	public return_type class_ref 765826 // PublicKey
	nparams 1
	  param inout name "keySpec" type class_ref 1017858 // KeySpec
	nexceptions 1
	  exception class_ref 1017986 // InvalidKeySpecException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a public key object from the provided key specification
(key material).

@param keySpec the specification (key material) of the public key.

@return the public key.

@exception InvalidKeySpecException if the given key specification
is inappropriate for this key factory to produce a public key.
"
      end

      operation 7954946 "generatePrivate"
	public return_type class_ref 767362 // PrivateKey
	nparams 1
	  param inout name "keySpec" type class_ref 1017858 // KeySpec
	nexceptions 1
	  exception class_ref 1017986 // InvalidKeySpecException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a private key object from the provided key specification
(key material).

@param keySpec the specification (key material) of the private key.

@return the private key.

@exception InvalidKeySpecException if the given key specification
is inappropriate for this key factory to produce a private key.
"
      end

      operation 7955074 "getKeySpec"
	public explicit_return_type "T"
	nparams 2
	  param inout name "key" type class_ref 753026 // Key
	  param inout name "keySpec" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1017986 // InvalidKeySpecException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends KeySpec> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a specification (key material) of the given key object.
{@code keySpec} identifies the specification class in which
the key material should be returned. It could, for example, be
{@code DSAPublicKeySpec.class}, to indicate that the
key material should be returned in an instance of the
{@code DSAPublicKeySpec} class.

@param <T> the type of the key specification to be returned

@param key the key.

@param keySpec the specification class in which
the key material should be returned.

@return the underlying key specification (key material) in an instance
of the requested specification class.

@exception InvalidKeySpecException if the requested key specification is
inappropriate for the given key, or the given key cannot be processed
(e.g., the given key has an unrecognized algorithm or format).
"
      end

      operation 7955202 "translateKey"
	public return_type class_ref 753026 // Key
	nparams 1
	  param inout name "key" type class_ref 753026 // Key
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a key object, whose provider may be unknown or potentially
untrusted, into a corresponding key object of this key factory.

@param key the key whose provider is unknown or untrusted.

@return the translated key.

@exception InvalidKeyException if the given key cannot be processed
by this key factory.
"
      end
    end

    class 1017730 "KeyFactorySpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code KeyFactory} class.
All the abstract methods in this class must be implemented by each
cryptographic service provider who wishes to supply the implementation
of a key factory for a particular algorithm.

<P> Key factories are used to convert <I>keys</I> (opaque
cryptographic keys of type {@code Key}) into <I>key specifications</I>
(transparent representations of the underlying key material), and vice
versa.

<P> Key factories are bi-directional. That is, they allow you to build an
opaque key object from a given key specification (key material), or to
retrieve the underlying key material of a key object in a suitable format.

<P> Multiple compatible key specifications may exist for the same key.
For example, a DSA public key may be specified using
{@code DSAPublicKeySpec} or
{@code X509EncodedKeySpec}. A key factory can be used to translate
between compatible key specifications.

<P> A provider should document all the key specifications supported by its
key factory.

@author Jan Luehe


@see KeyFactory
@see Key
@see PublicKey
@see PrivateKey
@see java.security.spec.KeySpec
@see java.security.spec.DSAPublicKeySpec
@see java.security.spec.X509EncodedKeySpec

@since 1.2
"
      operation 7955330 "engineGeneratePublic"
	abstract protected return_type class_ref 765826 // PublicKey
	nparams 1
	  param inout name "keySpec" type class_ref 1017858 // KeySpec
	nexceptions 1
	  exception class_ref 1017986 // InvalidKeySpecException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a public key object from the provided key
specification (key material).

@param keySpec the specification (key material) of the public key.

@return the public key.

@exception InvalidKeySpecException if the given key specification
is inappropriate for this key factory to produce a public key.
"
      end

      operation 7955458 "engineGeneratePrivate"
	abstract protected return_type class_ref 767362 // PrivateKey
	nparams 1
	  param inout name "keySpec" type class_ref 1017858 // KeySpec
	nexceptions 1
	  exception class_ref 1017986 // InvalidKeySpecException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a private key object from the provided key
specification (key material).

@param keySpec the specification (key material) of the private key.

@return the private key.

@exception InvalidKeySpecException if the given key specification
is inappropriate for this key factory to produce a private key.
"
      end

      operation 7955586 "engineGetKeySpec"
	abstract protected explicit_return_type "T"
	nparams 2
	  param inout name "key" type class_ref 753026 // Key
	  param inout name "keySpec" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 1017986 // InvalidKeySpecException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends KeySpec> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a specification (key material) of the given key
object.
{@code keySpec} identifies the specification class in which
the key material should be returned. It could, for example, be
{@code DSAPublicKeySpec.class}, to indicate that the
key material should be returned in an instance of the
{@code DSAPublicKeySpec} class.

@param <T> the type of the key specification to be returned

@param key the key.

@param keySpec the specification class in which
the key material should be returned.

@return the underlying key specification (key material) in an instance
of the requested specification class.

@exception InvalidKeySpecException if the requested key specification is
inappropriate for the given key, or the given key cannot be dealt with
(e.g., the given key has an unrecognized format).
"
      end

      operation 7955714 "engineTranslateKey"
	abstract protected return_type class_ref 753026 // Key
	nparams 1
	  param inout name "key" type class_ref 753026 // Key
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a key object, whose provider may be unknown or
potentially untrusted, into a corresponding key object of this key
factory.

@param key the key whose provider is unknown or untrusted.

@return the translated key.

@exception InvalidKeyException if the given key cannot be processed
by this key factory.
"
      end
    end

    class 1018114 "KeyPair"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is a simple holder for a key pair (a public key and a
private key). It does not enforce any security, and, when initialized,
should be treated like a PrivateKey.

@see PublicKey
@see PrivateKey

@author Benjamin Renaud
"
      classrelation 3348226 // <realization>
	relation 3348226 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3348226 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1847682 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7565189502268009837L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3348354 // privateKey (<unidirectional association>)
	relation 3348354 --->
	  a role_name "privateKey" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3348354 // privateKey (<unidirectional association>)
	  b parent class_ref 767362 // PrivateKey
      end

      classrelation 3348482 // publicKey (<unidirectional association>)
	relation 3348482 --->
	  a role_name "publicKey" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3348482 // publicKey (<unidirectional association>)
	  b parent class_ref 765826 // PublicKey
      end

      operation 7956354 "KeyPair"
	public explicit_return_type ""
	nparams 2
	  param inout name "publicKey" type class_ref 765826 // PublicKey
	  param inout name "privateKey" type class_ref 767362 // PrivateKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a key pair from the given public key and private key.

<p>Note that this constructor only stores references to the public
and private key components in the generated key pair. This is safe,
because {@code Key} objects are immutable.

@param publicKey the public key.

@param privateKey the private key.
"
      end

      operation 7956482 "getPublic"
	public return_type class_ref 765826 // PublicKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the public key component of this key pair.

@return a reference to the public key.
"
      end

      operation 7956610 "getPrivate"
	public return_type class_ref 767362 // PrivateKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the private key component of this key pair.

@return a reference to the private key.
"
      end
    end

    class 1018242 "KeyPairGenerator"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The KeyPairGenerator class is used to generate pairs of
public and private keys. Key pair generators are constructed using the
{@code getInstance} factory methods (static methods that
return instances of a given class).

<p>A Key pair generator for a particular algorithm creates a public/private
key pair that can be used with this algorithm. It also associates
algorithm-specific parameters with each of the generated keys.

<p>There are two ways to generate a key pair: in an algorithm-independent
manner, and in an algorithm-specific manner.
The only difference between the two is the initialization of the object:

<ul>
<li><b>Algorithm-Independent Initialization</b>
<p>All key pair generators share the concepts of a keysize and a
source of randomness. The keysize is interpreted differently for different
algorithms (e.g., in the case of the <i>DSA</i> algorithm, the keysize
corresponds to the length of the modulus).
There is an
{@link #initialize(int, java.security.SecureRandom) initialize}
method in this KeyPairGenerator class that takes these two universally
shared types of arguments. There is also one that takes just a
{@code keysize} argument, and uses the {@code SecureRandom}
implementation of the highest-priority installed provider as the source
of randomness. (If none of the installed providers supply an implementation
of {@code SecureRandom}, a system-provided source of randomness is
used.)

<p>Since no other parameters are specified when you call the above
algorithm-independent {@code initialize} methods, it is up to the
provider what to do about the algorithm-specific parameters (if any) to be
associated with each of the keys.

<p>If the algorithm is the <i>DSA</i> algorithm, and the keysize (modulus
size) is 512, 768, or 1024, then the <i>Sun</i> provider uses a set of
precomputed values for the {@code p}, {@code q}, and
{@code g} parameters. If the modulus size is not one of the above
values, the <i>Sun</i> provider creates a new set of parameters. Other
providers might have precomputed parameter sets for more than just the
three modulus sizes mentioned above. Still others might not have a list of
precomputed parameters at all and instead always create new parameter sets.

<li><b>Algorithm-Specific Initialization</b>
<p>For situations where a set of algorithm-specific parameters already
exists (e.g., so-called <i>community parameters</i> in DSA), there are two
{@link #initialize(java.security.spec.AlgorithmParameterSpec)
initialize} methods that have an {@code AlgorithmParameterSpec}
argument. One also has a {@code SecureRandom} argument, while the
the other uses the {@code SecureRandom}
implementation of the highest-priority installed provider as the source
of randomness. (If none of the installed providers supply an implementation
of {@code SecureRandom}, a system-provided source of randomness is
used.)
</ul>

<p>In case the client does not explicitly initialize the KeyPairGenerator
(via a call to an {@code initialize} method), each provider must
supply (and document) a default initialization.
For example, the <i>Sun</i> provider uses a default modulus size (keysize)
of 1024 bits.

<p>Note that this class is abstract and extends from
{@code KeyPairGeneratorSpi} for historical reasons.
Application developers should only take notice of the methods defined in
this {@code KeyPairGenerator} class; all the methods in
the superclass are intended for cryptographic service providers who wish to
supply their own implementations of key pair generators.

<p> Every implementation of the Java platform is required to support the
following standard {@code KeyPairGenerator} algorithms and keysizes in
parentheses:
<ul>
<li>{@code DiffieHellman} (1024)</li>
<li>{@code DSA} (1024)</li>
<li>{@code RSA} (1024, 2048)</li>
</ul>
These algorithms are described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\">
KeyPairGenerator section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other algorithms are supported.

@author Benjamin Renaud

@see java.security.spec.AlgorithmParameterSpec
"
      classrelation 3348610 // <generalisation>
	relation 3348610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3348610 // <generalisation>
	  b parent class_ref 1018370 // KeyPairGeneratorSpi
      end

      attribute 1847810 "pdebug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "
                        Debug.getInstance(\"provider\", \"Provider\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1847938 "skipDebug"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        Debug.isOn(\"engine=\") && !Debug.isOn(\"keypairgenerator\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3348738 // algorithm (<unidirectional association>)
	relation 3348738 --->
	  a role_name "algorithm" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3348738 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3348866 // provider (<unidirectional association>)
	relation 3348866 --->
	  a role_name "provider" package
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3348866 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      operation 7957122 "KeyPairGenerator"
	protected explicit_return_type ""
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a KeyPairGenerator object for the specified algorithm.

@param algorithm the standard string name of the algorithm.
See the KeyPairGenerator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.
"
      end

      operation 7957250 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the standard name of the algorithm for this key pair generator.
See the KeyPairGenerator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return the standard string name of the algorithm.
"
      end

      operation 7957378 "getInstance"
	class_operation private return_type class_ref 1018242 // KeyPairGenerator
	nparams 2
	  param inout name "instance" explicit_type "Instance"
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7957506 "getInstance"
	class_operation public return_type class_ref 1018242 // KeyPairGenerator
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a KeyPairGenerator object that generates public/private
key pairs for the specified algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new KeyPairGenerator object encapsulating the
KeyPairGeneratorSpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the standard string name of the algorithm.
See the KeyPairGenerator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return the new KeyPairGenerator object.

@exception NoSuchAlgorithmException if no Provider supports a
         KeyPairGeneratorSpi implementation for the
         specified algorithm.

@see Provider
"
      end

      operation 7957634 "getInstance"
	class_operation public return_type class_ref 1018242 // KeyPairGenerator
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a KeyPairGenerator object that generates public/private
key pairs for the specified algorithm.

<p> A new KeyPairGenerator object encapsulating the
KeyPairGeneratorSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the standard string name of the algorithm.
See the KeyPairGenerator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the string name of the provider.

@return the new KeyPairGenerator object.

@exception NoSuchAlgorithmException if a KeyPairGeneratorSpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see Provider
"
      end

      operation 7957762 "getInstance"
	class_operation public return_type class_ref 1018242 // KeyPairGenerator
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a KeyPairGenerator object that generates public/private
key pairs for the specified algorithm.

<p> A new KeyPairGenerator object encapsulating the
KeyPairGeneratorSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param algorithm the standard string name of the algorithm.
See the KeyPairGenerator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#KeyPairGenerator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the provider.

@return the new KeyPairGenerator object.

@exception NoSuchAlgorithmException if a KeyPairGeneratorSpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the specified provider is null.

@see Provider

@since 1.4
"
      end

      operation 7957890 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this key pair generator object.

@return the provider of this key pair generator object
"
      end

      operation 7958018 "disableFailover"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7958146 "initialize"
	public explicit_return_type "void"
	nparams 1
	  param in name "keysize" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the key pair generator for a certain keysize using
a default parameter set and the {@code SecureRandom}
implementation of the highest-priority installed provider as the source
of randomness.
(If none of the installed providers supply an implementation of
{@code SecureRandom}, a system-provided source of randomness is
used.)

@param keysize the keysize. This is an
algorithm-specific metric, such as modulus length, specified in
number of bits.

@exception InvalidParameterException if the {@code keysize} is not
supported by this KeyPairGenerator object.
"
      end

      operation 7958274 "initialize"
	public explicit_return_type "void"
	nparams 2
	  param in name "keysize" explicit_type "int"
	  param inout name "random" type class_ref 753154 // SecureRandom
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the key pair generator for a certain keysize with
the given source of randomness (and a default parameter set).

@param keysize the keysize. This is an
algorithm-specific metric, such as modulus length, specified in
number of bits.
@param random the source of randomness.

@exception InvalidParameterException if the {@code keysize} is not
supported by this KeyPairGenerator object.

@since 1.2
"
      end

      operation 7958402 "initialize"
	public explicit_return_type "void"
	nparams 1
	  param inout name "params" type class_ref 753282 // AlgorithmParameterSpec
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the key pair generator using the specified parameter
set and the {@code SecureRandom}
implementation of the highest-priority installed provider as the source
of randomness.
(If none of the installed providers supply an implementation of
{@code SecureRandom}, a system-provided source of randomness is
used.).

<p>This concrete method has been added to this previously-defined
abstract class.
This method calls the KeyPairGeneratorSpi
{@link KeyPairGeneratorSpi#initialize(
java.security.spec.AlgorithmParameterSpec,
java.security.SecureRandom) initialize} method,
passing it {@code params} and a source of randomness (obtained
from the highest-priority installed provider or system-provided if none
of the installed providers supply one).
That {@code initialize} method always throws an
UnsupportedOperationException if it is not overridden by the provider.

@param params the parameter set used to generate the keys.

@exception InvalidAlgorithmParameterException if the given parameters
are inappropriate for this key pair generator.

@since 1.2
"
      end

      operation 7958530 "initialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "params" type class_ref 753282 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 753154 // SecureRandom
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the key pair generator with the given parameter
set and source of randomness.

<p>This concrete method has been added to this previously-defined
abstract class.
This method calls the KeyPairGeneratorSpi {@link
KeyPairGeneratorSpi#initialize(
java.security.spec.AlgorithmParameterSpec,
java.security.SecureRandom) initialize} method,
passing it {@code params} and {@code random}.
That {@code initialize}
method always throws an
UnsupportedOperationException if it is not overridden by the provider.

@param params the parameter set used to generate the keys.
@param random the source of randomness.

@exception InvalidAlgorithmParameterException if the given parameters
are inappropriate for this key pair generator.

@since 1.2
"
      end

      operation 7958658 "genKeyPair"
	public return_type class_ref 1018114 // KeyPair
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a key pair.

<p>If this KeyPairGenerator has not been initialized explicitly,
provider-specific defaults will be used for the size and other
(algorithm-specific) values of the generated keys.

<p>This will generate a new key pair every time it is called.

<p>This method is functionally equivalent to
{@link #generateKeyPair() generateKeyPair}.

@return the generated key pair

@since 1.2
"
      end

      operation 7958786 "generateKeyPair"
	public return_type class_ref 1018114 // KeyPair
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a key pair.

<p>If this KeyPairGenerator has not been initialized explicitly,
provider-specific defaults will be used for the size and other
(algorithm-specific) values of the generated keys.

<p>This will generate a new key pair every time it is called.

<p>This method is functionally equivalent to
{@link #genKeyPair() genKeyPair}.

@return the generated key pair
"
      end

      class 1018498 "Delegate"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3348994 // <generalisation>
	  relation 3348994 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3348994 // <generalisation>
	    b parent class_ref 1018242 // KeyPairGenerator
	end

	classrelation 3349122 // spi (<unidirectional association>)
	  relation 3349122 --->
	    a role_name "spi" volatile private
	      comment " The provider implementation (delegate)
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3349122 // spi (<unidirectional association>)
	    b parent class_ref 1018370 // KeyPairGeneratorSpi
	end

	classrelation 3349250 // lock (<unidirectional association>)
	  relation 3349250 --->
	    a role_name "lock" init_value " new Object()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3349250 // lock (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3349378 // serviceIterator (<unidirectional association>)
	  relation 3349378 --->
	    a role_name "serviceIterator" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Service> ${name}${value};
"
	      classrelation_ref 3349378 // serviceIterator (<unidirectional association>)
	    b parent class_ref 132994 // Iterator
	end

	attribute 1848066 "I_NONE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1848194 "I_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1848322 "I_PARAMS"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1848450 "initType"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1848578 "initKeySize"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3349506 // initParams (<unidirectional association>)
	  relation 3349506 --->
	    a role_name "initParams" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3349506 // initParams (<unidirectional association>)
	    b parent class_ref 753282 // AlgorithmParameterSpec
	end

	classrelation 3349634 // initRandom (<unidirectional association>)
	  relation 3349634 --->
	    a role_name "initRandom" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3349634 // initRandom (<unidirectional association>)
	    b parent class_ref 753154 // SecureRandom
	end

	operation 7958914 "Delegate"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "spi" type class_ref 1018370 // KeyPairGeneratorSpi
	    param inout name "algorithm" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " constructor"
	end

	operation 7959042 "Delegate"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "instance" explicit_type "Instance"
	    param inout name "serviceIterator" type class_ref 132994 // Iterator
	    param inout name "algorithm" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Service> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7959170 "nextSpi"
	  private return_type class_ref 1018370 // KeyPairGeneratorSpi
	  nparams 2
	    param inout name "oldSpi" type class_ref 1018370 // KeyPairGeneratorSpi
	    param inout name "reinit" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Update the active spi of this class and return the next
implementation for failover. If no more implemenations are
available, this method returns null. However, the active spi of
this class is never set to null.
"
	end

	operation 7959298 "disableFailover"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7959426 "initialize"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "keysize" explicit_type "int"
	    param inout name "random" type class_ref 753154 // SecureRandom
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " engine method"
	end

	operation 7959554 "initialize"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "params" type class_ref 753282 // AlgorithmParameterSpec
	    param inout name "random" type class_ref 753154 // SecureRandom
	  nexceptions 1
	    exception class_ref 1013762 // InvalidAlgorithmParameterException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " engine method"
	end

	operation 7959682 "generateKeyPair"
	  public return_type class_ref 1018114 // KeyPair
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " engine method"
	end
      end
    end

    class 1018370 "KeyPairGeneratorSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p> This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code KeyPairGenerator} class, which is used to generate
pairs of public and private keys.

<p> All the abstract methods in this class must be implemented by each
cryptographic service provider who wishes to supply the implementation
of a key pair generator for a particular algorithm.

<p> In case the client does not explicitly initialize the KeyPairGenerator
(via a call to an {@code initialize} method), each provider must
supply (and document) a default initialization.
For example, the <i>Sun</i> provider uses a default modulus size (keysize)
of 1024 bits.

@author Benjamin Renaud


@see KeyPairGenerator
@see java.security.spec.AlgorithmParameterSpec
"
      operation 7956738 "initialize"
	abstract public explicit_return_type "void"
	nparams 2
	  param in name "keysize" explicit_type "int"
	  param inout name "random" type class_ref 753154 // SecureRandom
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the key pair generator for a certain keysize, using
the default parameter set.

@param keysize the keysize. This is an
algorithm-specific metric, such as modulus length, specified in
number of bits.

@param random the source of randomness for this generator.

@exception InvalidParameterException if the {@code keysize} is not
supported by this KeyPairGeneratorSpi object.
"
      end

      operation 7956866 "initialize"
	public explicit_return_type "void"
	nparams 2
	  param inout name "params" type class_ref 753282 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 753154 // SecureRandom
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the key pair generator using the specified parameter
set and user-provided source of randomness.

<p>This concrete method has been added to this previously-defined
abstract class. (For backwards compatibility, it cannot be abstract.)
It may be overridden by a provider to initialize the key pair
generator. Such an override
is expected to throw an InvalidAlgorithmParameterException if
a parameter is inappropriate for this key pair generator.
If this method is not overridden, it always throws an
UnsupportedOperationException.

@param params the parameter set used to generate the keys.

@param random the source of randomness for this generator.

@exception InvalidAlgorithmParameterException if the given parameters
are inappropriate for this key pair generator.

@since 1.2
"
      end

      operation 7956994 "generateKeyPair"
	abstract public return_type class_ref 1018114 // KeyPair
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a key pair. Unless an initialization method is called
using a KeyPairGenerator interface, algorithm-specific defaults
will be used. This will generate a new key pair every time it
is called.

@return the newly generated {@code KeyPair}
"
      end
    end

    class 1018626 "KeyRep"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Standardized representation for serialized Key objects.

<p>

Note that a serialized Key may contain sensitive information
which should not be exposed in untrusted environments.  See the
<a href=\"../../../platform/serialization/spec/security.html\">
Security Appendix</a>
of the Serialization Specification for more information.

@see Key
@see KeyFactory
@see javax.crypto.spec.SecretKeySpec
@see java.security.spec.X509EncodedKeySpec
@see java.security.spec.PKCS8EncodedKeySpec

@since 1.5
"
      classrelation 3349762 // <realization>
	relation 3349762 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3349762 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1848706 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4757683898830641853L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 1018754 "Type"
	visibility public stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1848834 "SECRET"
	  public type class_ref 1018754 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Type for secret keys. 
"
	end

	attribute 1848962 "PUBLIC"
	  public type class_ref 1018754 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Type for public keys. 
"
	end

	attribute 1849090 "PRIVATE"
	  public type class_ref 1018754 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Type for private keys. 
"
	end
      end

      classrelation 3349890 // PKCS8 (<unidirectional association>)
	relation 3349890 --->
	  a role_name "PKCS8" init_value " \"PKCS#8\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3349890 // PKCS8 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3350018 // X509 (<unidirectional association>)
	relation 3350018 --->
	  a role_name "X509" init_value " \"X.509\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3350018 // X509 (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3350146 // RAW (<unidirectional association>)
	relation 3350146 --->
	  a role_name "RAW" init_value " \"RAW\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3350146 // RAW (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3350274 // type (<unidirectional association>)
	relation 3350274 --->
	  a role_name "type" private
	    comment "
Either one of Type.SECRET, Type.PUBLIC, or Type.PRIVATE

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3350274 // type (<unidirectional association>)
	  b parent class_ref 1018754 // Type
      end

      classrelation 3350402 // algorithm (<unidirectional association>)
	relation 3350402 --->
	  a role_name "algorithm" private
	    comment "
The Key algorithm

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3350402 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3350530 // format (<unidirectional association>)
	relation 3350530 --->
	  a role_name "format" private
	    comment "
The Key encoding format

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3350530 // format (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1849218 "encoded"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The encoded Key bytes

@serial

"
      end

      operation 7959810 "KeyRep"
	public explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 1018754 // Type
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "format" type class_ref 128130 // String
	  param inout name "encoded" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct the alternate Key class.

<p>

@param type either one of Type.SECRET, Type.PUBLIC, or Type.PRIVATE
@param algorithm the algorithm returned from
         {@code Key.getAlgorithm()}
@param format the encoding format returned from
         {@code Key.getFormat()}
@param encoded the encoded bytes returned from
         {@code Key.getEncoded()}

@exception NullPointerException
         if type is {@code null},
         if algorithm is {@code null},
         if format is {@code null},
         or if encoded is {@code null}
"
      end

      operation 7959938 "readResolve"
	protected return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolve the Key object.

<p> This method supports three Type/format combinations:
<ul>
<li> Type.SECRET/\"RAW\" - returns a SecretKeySpec object
constructed using encoded key bytes and algorithm
<li> Type.PUBLIC/\"X.509\" - gets a KeyFactory instance for
the key algorithm, constructs an X509EncodedKeySpec with the
encoded key bytes, and generates a public key from the spec
<li> Type.PRIVATE/\"PKCS#8\" - gets a KeyFactory instance for
the key algorithm, constructs a PKCS8EncodedKeySpec with the
encoded key bytes, and generates a private key from the spec
</ul>

<p>

@return the resolved Key object

@exception ObjectStreamException if the Type/format
 combination is unrecognized, if the algorithm, key format, or
 encoded key bytes are unrecognized/invalid, of if the
 resolution of the key fails for any reason
"
      end
    end

    class 1018882 "KeyStoreSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code KeyStore} class.
All the abstract methods in this class must be implemented by each
cryptographic service provider who wishes to supply the implementation
of a keystore for a particular keystore type.

@author Jan Luehe


@see KeyStore

@since 1.2
"
      operation 7969666 "engineGetKey"
	abstract public return_type class_ref 753026 // Key
	nparams 2
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1020290 // UnrecoverableKeyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the key associated with the given alias, using the given
password to recover it.  The key must have been associated with
the alias by a call to {@code setKeyEntry},
or by a call to {@code setEntry} with a
{@code PrivateKeyEntry} or {@code SecretKeyEntry}.

@param alias the alias name
@param password the password for recovering the key

@return the requested key, or null if the given alias does not exist
or does not identify a key-related entry.

@exception NoSuchAlgorithmException if the algorithm for recovering the
key cannot be found
@exception UnrecoverableKeyException if the key cannot be recovered
(e.g., the given password is wrong).
"
      end

      operation 7969794 "engineGetCertificateChain"
	abstract public return_type class_ref 833154 // Certificate
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificate chain associated with the given alias.
The certificate chain must have been associated with the alias
by a call to {@code setKeyEntry},
or by a call to {@code setEntry} with a
{@code PrivateKeyEntry}.

@param alias the alias name

@return the certificate chain (ordered with the user's certificate first
and the root certificate authority last), or null if the given alias
does not exist or does not contain a certificate chain
"
      end

      operation 7969922 "engineGetCertificate"
	abstract public return_type class_ref 833154 // Certificate
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificate associated with the given alias.

<p> If the given alias name identifies an entry
created by a call to {@code setCertificateEntry},
or created by a call to {@code setEntry} with a
{@code TrustedCertificateEntry},
then the trusted certificate contained in that entry is returned.

<p> If the given alias name identifies an entry
created by a call to {@code setKeyEntry},
or created by a call to {@code setEntry} with a
{@code PrivateKeyEntry},
then the first element of the certificate chain in that entry
(if a chain exists) is returned.

@param alias the alias name

@return the certificate, or null if the given alias does not exist or
does not contain a certificate.
"
      end

      operation 7970050 "engineGetCreationDate"
	abstract public return_type class_ref 521474 // Date
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the creation date of the entry identified by the given alias.

@param alias the alias name

@return the creation date of this entry, or null if the given alias does
not exist
"
      end

      operation 7970178 "engineSetKeyEntry"
	abstract public explicit_return_type "void"
	nparams 4
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "key" type class_ref 753026 // Key
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	  param inout name "chain" type class_ref 833154 // Certificate
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the given key to the given alias, protecting it with the given
password.

<p>If the given key is of type {@code java.security.PrivateKey},
it must be accompanied by a certificate chain certifying the
corresponding public key.

<p>If the given alias already exists, the keystore information
associated with it is overridden by the given key (and possibly
certificate chain).

@param alias the alias name
@param key the key to be associated with the alias
@param password the password to protect the key
@param chain the certificate chain for the corresponding public
key (only required if the given key is of type
{@code java.security.PrivateKey}).

@exception KeyStoreException if the given key cannot be protected, or
this operation fails for some other reason
"
      end

      operation 7970306 "engineSetKeyEntry"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "key" explicit_type "byte"
	multiplicity "[]"
	  param inout name "chain" type class_ref 833154 // Certificate
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the given key (that has already been protected) to the given
alias.

<p>If the protected key is of type
{@code java.security.PrivateKey},
it must be accompanied by a certificate chain certifying the
corresponding public key.

<p>If the given alias already exists, the keystore information
associated with it is overridden by the given key (and possibly
certificate chain).

@param alias the alias name
@param key the key (in protected format) to be associated with the alias
@param chain the certificate chain for the corresponding public
key (only useful if the protected key is of type
{@code java.security.PrivateKey}).

@exception KeyStoreException if this operation fails.
"
      end

      operation 7970434 "engineSetCertificateEntry"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "cert" type class_ref 833154 // Certificate
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Assigns the given certificate to the given alias.

<p> If the given alias identifies an existing entry
created by a call to {@code setCertificateEntry},
or created by a call to {@code setEntry} with a
{@code TrustedCertificateEntry},
the trusted certificate in the existing entry
is overridden by the given certificate.

@param alias the alias name
@param cert the certificate

@exception KeyStoreException if the given alias already exists and does
not identify an entry containing a trusted certificate,
or this operation fails for some other reason.
"
      end

      operation 7970562 "engineDeleteEntry"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes the entry identified by the given alias from this keystore.

@param alias the alias name

@exception KeyStoreException if the entry cannot be removed.
"
      end

      operation 7970690 "engineAliases"
	abstract public return_type class_ref 185986 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lists all the alias names of this keystore.

@return enumeration of the alias names
"
      end

      operation 7970818 "engineContainsAlias"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the given alias exists in this keystore.

@param alias the alias name

@return true if the alias exists, false otherwise
"
      end

      operation 7970946 "engineSize"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of entries in this keystore.

@return the number of entries in this keystore
"
      end

      operation 7971074 "engineIsKeyEntry"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the entry identified by the given alias
was created by a call to {@code setKeyEntry},
or created by a call to {@code setEntry} with a
{@code PrivateKeyEntry} or a {@code SecretKeyEntry}.

@param alias the alias for the keystore entry to be checked

@return true if the entry identified by the given alias is a
key-related, false otherwise.
"
      end

      operation 7971202 "engineIsCertificateEntry"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "alias" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the entry identified by the given alias
was created by a call to {@code setCertificateEntry},
or created by a call to {@code setEntry} with a
{@code TrustedCertificateEntry}.

@param alias the alias for the keystore entry to be checked

@return true if the entry identified by the given alias contains a
trusted certificate, false otherwise.
"
      end

      operation 7971330 "engineGetCertificateAlias"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "cert" type class_ref 833154 // Certificate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the (alias) name of the first keystore entry whose certificate
matches the given certificate.

<p>This method attempts to match the given certificate with each
keystore entry. If the entry being considered was
created by a call to {@code setCertificateEntry},
or created by a call to {@code setEntry} with a
{@code TrustedCertificateEntry},
then the given certificate is compared to that entry's certificate.

<p> If the entry being considered was
created by a call to {@code setKeyEntry},
or created by a call to {@code setEntry} with a
{@code PrivateKeyEntry},
then the given certificate is compared to the first
element of that entry's certificate chain.

@param cert the certificate to match with.

@return the alias name of the first entry with matching certificate,
or null if no such entry exists in this keystore.
"
      end

      operation 7971458 "engineStore"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "stream" type class_ref 151298 // OutputStream
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 770306 // CertificateException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores this keystore to the given output stream, and protects its
integrity with the given password.

@param stream the output stream to which this keystore is written.
@param password the password to generate the keystore integrity check

@exception IOException if there was an I/O problem with data
@exception NoSuchAlgorithmException if the appropriate data integrity
algorithm could not be found
@exception CertificateException if any of the certificates included in
the keystore data could not be stored
"
      end

      operation 7971586 "engineStore"
	public explicit_return_type "void"
	nparams 1
	  param inout name "param" type class_ref 1019010 // LoadStoreParameter
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores this keystore using the given
{@code KeyStore.LoadStoreParmeter}.

@param param the {@code KeyStore.LoadStoreParmeter}
         that specifies how to store the keystore,
         which may be {@code null}

@exception IllegalArgumentException if the given
         {@code KeyStore.LoadStoreParmeter}
         input is not recognized
@exception IOException if there was an I/O problem with data
@exception NoSuchAlgorithmException if the appropriate data integrity
         algorithm could not be found
@exception CertificateException if any of the certificates included in
         the keystore data could not be stored

@since 1.5
"
      end

      operation 7971714 "engineLoad"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "stream" type class_ref 146434 // InputStream
	  param inout name "password" explicit_type "char"
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 770306 // CertificateException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the keystore from the given input stream.

<p>A password may be given to unlock the keystore
(e.g. the keystore resides on a hardware token device),
or to check the integrity of the keystore data.
If a password is not given for integrity checking,
then integrity checking is not performed.

@param stream the input stream from which the keystore is loaded,
or {@code null}
@param password the password used to check the integrity of
the keystore, the password used to unlock the keystore,
or {@code null}

@exception IOException if there is an I/O or format problem with the
keystore data, if a password is required but not given,
or if the given password was incorrect. If the error is due to a
wrong password, the {@link Throwable#getCause cause} of the
{@code IOException} should be an
{@code UnrecoverableKeyException}
@exception NoSuchAlgorithmException if the algorithm used to check
the integrity of the keystore cannot be found
@exception CertificateException if any of the certificates in the
keystore could not be loaded
"
      end

      operation 7971842 "engineLoad"
	public explicit_return_type "void"
	nparams 1
	  param inout name "param" type class_ref 1019010 // LoadStoreParameter
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the keystore using the given
{@code KeyStore.LoadStoreParameter}.

<p> Note that if this KeyStore has already been loaded, it is
reinitialized and loaded again from the given parameter.

@param param the {@code KeyStore.LoadStoreParameter}
         that specifies how to load the keystore,
         which may be {@code null}

@exception IllegalArgumentException if the given
         {@code KeyStore.LoadStoreParameter}
         input is not recognized
@exception IOException if there is an I/O or format problem with the
         keystore data. If the error is due to an incorrect
        {@code ProtectionParameter} (e.g. wrong password)
        the {@link Throwable#getCause cause} of the
        {@code IOException} should be an
        {@code UnrecoverableKeyException}
@exception NoSuchAlgorithmException if the algorithm used to check
         the integrity of the keystore cannot be found
@exception CertificateException if any of the certificates in the
         keystore could not be loaded

@since 1.5
"
      end

      operation 7971970 "engineGetEntry"
	public return_type class_ref 1019650 // Entry
	nparams 2
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "protParam" type class_ref 1016706 // ProtectionParameter
	nexceptions 3
	  exception class_ref 770050 // KeyStoreException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1020418 // UnrecoverableEntryException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a {@code KeyStore.Entry} for the specified alias
with the specified protection parameter.

@param alias get the {@code KeyStore.Entry} for this alias
@param protParam the {@code ProtectionParameter}
         used to protect the {@code Entry},
         which may be {@code null}

@return the {@code KeyStore.Entry} for the specified alias,
         or {@code null} if there is no such entry

@exception KeyStoreException if the operation failed
@exception NoSuchAlgorithmException if the algorithm for recovering the
         entry cannot be found
@exception UnrecoverableEntryException if the specified
         {@code protParam} were insufficient or invalid
@exception UnrecoverableKeyException if the entry is a
         {@code PrivateKeyEntry} or {@code SecretKeyEntry}
         and the specified {@code protParam} does not contain
         the information needed to recover the key (e.g. wrong password)

@since 1.5
"
      end

      operation 7972098 "engineSetEntry"
	public explicit_return_type "void"
	nparams 3
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "entry" type class_ref 1019650 // Entry
	  param inout name "protParam" type class_ref 1016706 // ProtectionParameter
	nexceptions 1
	  exception class_ref 770050 // KeyStoreException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves a {@code KeyStore.Entry} under the specified alias.
The specified protection parameter is used to protect the
{@code Entry}.

<p> If an entry already exists for the specified alias,
it is overridden.

@param alias save the {@code KeyStore.Entry} under this alias
@param entry the {@code Entry} to save
@param protParam the {@code ProtectionParameter}
         used to protect the {@code Entry},
         which may be {@code null}

@exception KeyStoreException if this operation fails

@since 1.5
"
      end

      operation 7972226 "engineEntryInstanceOf"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "alias" type class_ref 128130 // String
	  param inout name "entryClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends KeyStore.Entry> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the keystore {@code Entry} for the specified
{@code alias} is an instance or subclass of the specified
{@code entryClass}.

@param alias the alias name
@param entryClass the entry class

@return true if the keystore {@code Entry} for the specified
         {@code alias} is an instance or subclass of the
         specified {@code entryClass}, false otherwise

@since 1.5
"
      end
    end

    class 1020290 "UnrecoverableKeyException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown if a key in the keystore cannot be recovered.


@since 1.2
"
      classrelation 3367554 // <generalisation>
	relation 3367554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3367554 // <generalisation>
	  b parent class_ref 1020418 // UnrecoverableEntryException
      end

      attribute 1859970 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7275063078190151277L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8016386 "UnrecoverableKeyException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnrecoverableKeyException with no detail message.
"
      end

      operation 8016514 "UnrecoverableKeyException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnrecoverableKeyException with the specified detail
message, which provides more information about why this exception
has been thrown.

@param msg the detail message.
"
      end
    end

    class 1020418 "UnrecoverableEntryException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is thrown if an entry in the keystore cannot be recovered.


@since 1.5
"
      classrelation 3367426 // <generalisation>
	relation 3367426 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3367426 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1859842 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4527142945246286535L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8016130 "UnrecoverableEntryException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnrecoverableEntryException with no detail message.
"
      end

      operation 8016258 "UnrecoverableEntryException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an UnrecoverableEntryException with the specified detail
message, which provides more information about why this exception
has been thrown.

@param msg the detail message.
"
      end
    end

    class 1020930 "MessageDigestSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code MessageDigest} class, which provides the functionality
of a message digest algorithm, such as MD5 or SHA. Message digests are
secure one-way hash functions that take arbitrary-sized data and output a
fixed-length hash value.

<p> All the abstract methods in this class must be implemented by a
cryptographic service provider who wishes to supply the implementation
of a particular message digest algorithm.

<p> Implementations are free to implement the Cloneable interface.

@author Benjamin Renaud


@see MessageDigest
"
      attribute 1850370 "tempArray"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for re-use in engineUpdate(ByteBuffer input)
"
      end

      operation 7972354 "engineGetDigestLength"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the digest length in bytes.

<p>This concrete method has been added to this previously-defined
abstract class. (For backwards compatibility, it cannot be abstract.)

<p>The default behavior is to return 0.

<p>This method may be overridden by a provider to return the digest
length.

@return the digest length in bytes.

@since 1.2
"
      end

      operation 7972482 "engineUpdate"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "input" explicit_type "byte"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the digest using the specified byte.

@param input the byte to use for the update.
"
      end

      operation 7972610 "engineUpdate"
	abstract protected explicit_return_type "void"
	nparams 3
	  param inout name "input" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the digest using the specified array of bytes,
starting at the specified offset.

@param input the array of bytes to use for the update.

@param offset the offset to start from in the array of bytes.

@param len the number of bytes to use, starting at
{@code offset}.
"
      end

      operation 7972738 "engineUpdate"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "input" type class_ref 149890 // ByteBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Update the digest using the specified ByteBuffer. The digest is
updated using the {@code input.remaining()} bytes starting
at {@code input.position()}.
Upon return, the buffer's position will be equal to its limit;
its limit will not have changed.

@param input the ByteBuffer
@since 1.5
"
      end

      operation 7972866 "engineDigest"
	abstract protected explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes the hash computation by performing final
operations such as padding. Once {@code engineDigest} has
been called, the engine should be reset (see
{@link #engineReset() engineReset}).
Resetting is the responsibility of the
engine implementor.

@return the array of bytes for the resulting hash value.
"
      end

      operation 7972994 "engineDigest"
	protected explicit_return_type "int"
	nparams 3
	  param inout name "buf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 752642 // DigestException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes the hash computation by performing final
operations such as padding. Once {@code engineDigest} has
been called, the engine should be reset (see
{@link #engineReset() engineReset}).
Resetting is the responsibility of the
engine implementor.

This method should be abstract, but we leave it concrete for
binary compatibility.  Knowledgeable providers should override this
method.

@param buf the output buffer in which to store the digest

@param offset offset to start from in the output buffer

@param len number of bytes within buf allotted for the digest.
Both this default implementation and the SUN provider do not
return partial digests.  The presence of this parameter is solely
for consistency in our API's.  If the value of this parameter is less
than the actual digest length, the method will throw a DigestException.
This parameter is ignored if its value is greater than or equal to
the actual digest length.

@return the length of the digest stored in the output buffer.

@exception DigestException if an error occurs.

@since 1.2
"
      end

      operation 7973122 "engineReset"
	abstract protected explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the digest for further use.
"
      end

      operation 7973250 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 129794 // CloneNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone if the implementation is cloneable.

@return a clone if the implementation is cloneable.

@exception CloneNotSupportedException if this is called on an
implementation that does not support {@code Cloneable}.
"
      end
    end

    class 1021186 "Permissions"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a heterogeneous collection of Permissions. That is,
it contains different types of Permission objects, organized into
PermissionCollections. For example, if any
{@code java.io.FilePermission} objects are added to an instance of
this class, they are all stored in a single
PermissionCollection. It is the PermissionCollection returned by a call to
the {@code newPermissionCollection} method in the FilePermission class.
Similarly, any {@code java.lang.RuntimePermission} objects are
stored in the PermissionCollection returned by a call to the
{@code newPermissionCollection} method in the
RuntimePermission class. Thus, this class represents a collection of
PermissionCollections.

<p>When the {@code add} method is called to add a Permission, the
Permission is stored in the appropriate PermissionCollection. If no such
collection exists yet, the Permission object's class is determined and the
{@code newPermissionCollection} method is called on that class to create
the PermissionCollection and add it to the Permissions object. If
{@code newPermissionCollection} returns null, then a default
PermissionCollection that uses a hashtable will be created and used. Each
hashtable entry stores a Permission object as both the key and the value.

<p> Enumerations returned via the {@code elements} method are
not <em>fail-fast</em>.  Modifications to a collection should not be
performed while enumerating over that collection.

@see Permission
@see PermissionCollection
@see AllPermission


@author Marianne Mueller
@author Roland Schemers

@serial exclude
"
      classrelation 3355522 // <generalisation>
	relation 3355522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3355522 // <generalisation>
	  b parent class_ref 257794 // PermissionCollection
      end

      classrelation 3355650 // <realization>
	relation 3355650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3355650 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3355778 // permsMap (<unidirectional association>)
	relation 3355778 --->
	  a role_name "permsMap" private
	    comment "
Key is permissions Class, value is PermissionCollection for that class.
Not serialized; see serialization section at end of class.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>, PermissionCollection> ${name}${value};
"
	    classrelation_ref 3355778 // permsMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 1851394 "hasUnresolved"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " optimization. keep track of whether unresolved permissions need to be
 checked
"
      end

      classrelation 3355906 // allPermission (<unidirectional association>)
	relation 3355906 --->
	  a role_name "allPermission" package
	    comment " optimization. keep track of the AllPermission collection
 - package private for ProtectionDomain optimization
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3355906 // allPermission (<unidirectional association>)
	  b parent class_ref 257794 // PermissionCollection
      end

      operation 7977602 "Permissions"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Permissions object containing no PermissionCollections.
"
      end

      operation 7977730 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission object to the PermissionCollection for the class the
permission belongs to. For example, if <i>permission</i> is a
FilePermission, it is added to the FilePermissionCollection stored
in this Permissions object.

This method creates
a new PermissionCollection object (and adds the permission to it)
if an appropriate collection does not yet exist. <p>

@param permission the Permission object to add.

@exception SecurityException if this Permissions object is
marked as readonly.

@see PermissionCollection#isReadOnly()
"
      end

      operation 7977858 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to see if this object's PermissionCollection for permissions of
the specified permission's class implies the permissions
expressed in the <i>permission</i> object. Returns true if the
combination of permissions in the appropriate PermissionCollection
(e.g., a FilePermissionCollection for a FilePermission) together
imply the specified permission.

<p>For example, suppose there is a FilePermissionCollection in this
Permissions object, and it contains one FilePermission that specifies
\"read\" access for  all files in all subdirectories of the \"/tmp\"
directory, and another FilePermission that specifies \"write\" access
for all files in the \"/tmp/scratch/foo\" directory.
Then if the {@code implies} method
is called with a permission specifying both \"read\" and \"write\" access
to files in the \"/tmp/scratch/foo\" directory, {@code true} is
returned.

<p>Additionally, if this PermissionCollection contains the
AllPermission, this method will always return true.
<p>
@param permission the Permission object to check.

@return true if \"permission\" is implied by the permissions in the
PermissionCollection it
belongs to, false if not.
"
      end

      operation 7977986 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the Permission objects in all the
PermissionCollections in this Permissions object.

@return an enumeration of all the Permissions.
"
      end

      operation 7978114 "getPermissionCollection"
	private return_type class_ref 257794 // PermissionCollection
	nparams 2
	  param inout name "p" type class_ref 257538 // Permission
	  param inout name "createEmpty" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the PermissionCollection in this Permissions object for
permissions whose type is the same as that of <i>p</i>.
For example, if <i>p</i> is a FilePermission,
the FilePermissionCollection
stored in this Permissions object will be returned.

If createEmpty is true,
this method creates a new PermissionCollection object for the specified
type of permission objects if one does not yet exist.
To do so, it first calls the {@code newPermissionCollection} method
on <i>p</i>.  Subclasses of class Permission
override that method if they need to store their permissions in a
particular PermissionCollection object in order to provide the
correct semantics when the {@code PermissionCollection.implies}
method is called.
If the call returns a PermissionCollection, that collection is stored
in this Permissions object. If the call returns null and createEmpty
is true, then
this method instantiates and stores a default PermissionCollection
that uses a hashtable to store its permission objects.

createEmpty is ignored when creating empty PermissionCollection
for unresolved permissions because of the overhead of determining the
PermissionCollection to use.

createEmpty should be set to false when this method is invoked from
implies() because it incurs the additional overhead of creating and
adding an empty PermissionCollection that will just return false.
It should be set to true when invoked from add().
"
      end

      operation 7978242 "getUnresolvedPermissions"
	private return_type class_ref 257794 // PermissionCollection
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves any unresolved permissions of type p.

@param p the type of unresolved permission to resolve

@return PermissionCollection containing the unresolved permissions,
 or null if there were no unresolved permissions of type p.

"
      end

      attribute 1851522 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4858622370623524688L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3356034 // serialPersistentFields (<unidirectional association>)
	relation 3356034 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"perms\", Hashtable.class),
        new ObjectStreamField(\"allPermission\", PermissionCollection.class),
    }" class_relation const_relation private
	    comment " Need to maintain serialization interoperability with earlier releases,
 which had the serializable field:
 private Hashtable perms;

@serialField perms java.util.Hashtable
    A table of the Permission classes and PermissionCollections.
@serialField allPermission java.security.PermissionCollection

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3356034 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 7978370 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData Default fields.


Writes the contents of the permsMap field out as a Hashtable for
serialization compatibility with earlier releases. allPermission
unchanged.
"
      end

      operation 7978498 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Hashtable of Class/PermissionCollections and saves them in the
permsMap field. Reads in allPermission.
"
      end
    end

    class 1021314 "PermissionsEnumerator"
      visibility package 
      nactuals 1
      actual class class_ref 185986 // Enumeration
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 3356162 // <realization>
	relation 3356162 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3356162 // <realization>
	  b parent class_ref 185986 // Enumeration
      end

      classrelation 3356290 // perms (<unidirectional association>)
	relation 3356290 --->
	  a role_name "perms" private
	    comment " all the perms
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PermissionCollection> ${name}${value};
"
	    classrelation_ref 3356290 // perms (<unidirectional association>)
	  b parent class_ref 132994 // Iterator
      end

      classrelation 3356418 // permset (<unidirectional association>)
	relation 3356418 --->
	  a role_name "permset" private
	    comment " the current set
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Permission> ${name}${value};
"
	    classrelation_ref 3356418 // permset (<unidirectional association>)
	  b parent class_ref 185986 // Enumeration
      end

      operation 7978626 "PermissionsEnumerator"
	package explicit_return_type ""
	nparams 1
	  param inout name "e" type class_ref 132994 // Iterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<PermissionCollection> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7978754 "hasMoreElements"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " No need to synchronize; caller should sync on object as required"
      end

      operation 7978882 "nextElement"
	public return_type class_ref 257538 // Permission
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " No need to synchronize; caller should sync on object as required"
      end

      operation 7979010 "getNextEnumWithMore"
	private return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1021442 "PermissionsHash"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A PermissionsHash stores a homogeneous set of permissions in a hashtable.

@see Permission
@see Permissions


@author Roland Schemers

@serial include
"
      classrelation 3356546 // <generalisation>
	relation 3356546 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3356546 // <generalisation>
	  b parent class_ref 257794 // PermissionCollection
      end

      classrelation 3356674 // <realization>
	relation 3356674 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3356674 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3356802 // permsMap (<unidirectional association>)
	relation 3356802 --->
	  a role_name "permsMap" private
	    comment "
Key and value are (same) permissions objects.
Not serialized; see serialization section at end of class.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Permission, Permission> ${name}${value};
"
	    classrelation_ref 3356802 // permsMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 7979138 "PermissionsHash"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an empty PermissionsHash object.
"
      end

      operation 7979266 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission to the PermissionsHash.

@param permission the Permission object to add.
"
      end

      operation 7979394 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and see if this set of permissions implies the permissions
expressed in \"permission\".

@param permission the Permission object to compare

@return true if \"permission\" is a proper subset of a permission in
the set, false if not.
"
      end

      operation 7979522 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the Permission objects in the container.

@return an enumeration of all the Permissions.
"
      end

      attribute 1851650 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8491988220802933440L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3356930 // serialPersistentFields (<unidirectional association>)
	relation 3356930 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"perms\", Hashtable.class),
    }" class_relation const_relation private
	    comment " Need to maintain serialization interoperability with earlier releases,
 which had the serializable field:
 private Hashtable perms;

@serialField perms java.util.Hashtable
    A table of the Permissions (both key and value are same).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3356930 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 7979650 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData Default fields.


Writes the contents of the permsMap field out as a Hashtable for
serialization compatibility with earlier releases.
"
      end

      operation 7979778 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Hashtable of Permission/Permission and saves them in the
permsMap field.
"
      end
    end

    class 1021570 "PKCS12Attribute"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An attribute associated with a PKCS12 keystore entry.
The attribute name is an ASN.1 Object Identifier and the attribute
value is a set of ASN.1 types.

@since 1.8
"
      classrelation 3357058 // <realization>
	relation 3357058 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3357058 // <realization>
	  b parent class_ref 1019778 // Attribute
      end

      classrelation 3357186 // COLON_SEPARATED_HEX_PAIRS (<unidirectional association>)
	relation 3357186 --->
	  a role_name "COLON_SEPARATED_HEX_PAIRS" init_value "
        Pattern.compile(\"^[0-9a-fA-F]{2}(:[0-9a-fA-F]{2})+$\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3357186 // COLON_SEPARATED_HEX_PAIRS (<unidirectional association>)
	  b parent class_ref 417154 // Pattern
      end

      classrelation 3357314 // name (<unidirectional association>)
	relation 3357314 --->
	  a role_name "name" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3357314 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3357442 // value (<unidirectional association>)
	relation 3357442 --->
	  a role_name "value" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3357442 // value (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1851778 "encoded"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1851906 "hashValue"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7979906 "PKCS12Attribute"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a PKCS12 attribute from its name and value.
The name is an ASN.1 Object Identifier represented as a list of
dot-separated integers.
A string value is represented as the string itself.
A binary value is represented as a string of colon-separated
pairs of hexadecimal digits.
Multi-valued attributes are represented as a comma-separated
list of values, enclosed in square brackets. See
{@link Arrays#toString(java.lang.Object[])}.
<p>
A string value will be DER-encoded as an ASN.1 UTF8String and a
binary value will be DER-encoded as an ASN.1 Octet String.

@param name the attribute's identifier
@param value the attribute's value

@exception NullPointerException if {@code name} or {@code value}
    is {@code null}
@exception IllegalArgumentException if {@code name} or
    {@code value} is incorrectly formatted
"
      end

      operation 7980034 "PKCS12Attribute"
	public explicit_return_type ""
	nparams 1
	  param inout name "encoded" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a PKCS12 attribute from its ASN.1 DER encoding.
The DER encoding is specified by the following ASN.1 definition:
<pre>

Attribute ::= SEQUENCE {
    type   AttributeType,
    values SET OF AttributeValue
}
AttributeType ::= OBJECT IDENTIFIER
AttributeValue ::= ANY defined by type

</pre>

@param encoded the attribute's ASN.1 DER encoding. It is cloned
    to prevent subsequent modificaion.

@exception NullPointerException if {@code encoded} is
    {@code null}
@exception IllegalArgumentException if {@code encoded} is
    incorrectly formatted
"
      end

      operation 7980162 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the attribute's ASN.1 Object Identifier represented as a
list of dot-separated integers.

@return the attribute's identifier
"
      end

      operation 7980290 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the attribute's ASN.1 DER-encoded value as a string.
An ASN.1 DER-encoded value is returned in one of the following
{@code String} formats:
<ul>
<li> the DER encoding of a basic ASN.1 type that has a natural
     string representation is returned as the string itself.
     Such types are currently limited to BOOLEAN, INTEGER,
     OBJECT IDENTIFIER, UTCTime, GeneralizedTime and the
     following six ASN.1 string types: UTF8String,
     PrintableString, T61String, IA5String, BMPString and
     GeneralString.
<li> the DER encoding of any other ASN.1 type is not decoded but
     returned as a binary string of colon-separated pairs of
     hexadecimal digits.
</ul>
Multi-valued attributes are represented as a comma-separated
list of values, enclosed in square brackets. See
{@link Arrays#toString(java.lang.Object[])}.

@return the attribute value's string encoding
"
      end

      operation 7980418 "getEncoded"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the attribute's ASN.1 DER encoding.

@return a clone of the attribute's DER encoding
"
      end

      operation 7980546 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares this {@code PKCS12Attribute} and a specified object for
equality.

@param obj the comparison object

@return true if {@code obj} is a {@code PKCS12Attribute} and
their DER encodings are equal.
"
      end

      operation 7980674 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hashcode for this {@code PKCS12Attribute}.
The hash code is computed from its DER encoding.

@return the hash code
"
      end

      operation 7980802 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of this {@code PKCS12Attribute}.

@return a name/value pair separated by an 'equals' symbol
"
      end

      operation 7980930 "encode"
	private explicit_return_type "byte"
	nparams 2
	  param inout name "type" explicit_type "ObjectIdentifier"
	  param inout name "values" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7981058 "parse"
	private explicit_return_type "void"
	nparams 1
	  param inout name "encoded" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1021698 "Policy"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A Policy object is responsible for determining whether code executing
in the Java runtime environment has permission to perform a
security-sensitive operation.

<p> There is only one Policy object installed in the runtime at any
given time.  A Policy object can be installed by calling the
{@code setPolicy} method.  The installed Policy object can be
obtained by calling the {@code getPolicy} method.

<p> If no Policy object has been installed in the runtime, a call to
{@code getPolicy} installs an instance of the default Policy
implementation (a default subclass implementation of this abstract class).
The default Policy implementation can be changed by setting the value
of the {@code policy.provider} security property to the fully qualified
name of the desired Policy subclass implementation.

<p> Application code can directly subclass Policy to provide a custom
implementation.  In addition, an instance of a Policy object can be
constructed by invoking one of the {@code getInstance} factory methods
with a standard type.  The default policy type is \"JavaPolicy\".

<p> Once a Policy instance has been installed (either by default, or by
calling {@code setPolicy}), the Java runtime invokes its
{@code implies} method when it needs to
determine whether executing code (encapsulated in a ProtectionDomain)
can perform SecurityManager-protected operations.  How a Policy object
retrieves its policy data is up to the Policy implementation itself.
The policy data may be stored, for example, in a flat ASCII file,
in a serialized binary file of the Policy class, or in a database.

<p> The {@code refresh} method causes the policy object to
refresh/reload its data.  This operation is implementation-dependent.
For example, if the policy object stores its data in configuration files,
calling {@code refresh} will cause it to re-read the configuration
policy files.  If a refresh operation is not supported, this method does
nothing.  Note that refreshed policy may not have an effect on classes
in a particular ProtectionDomain. This is dependent on the Policy
provider's implementation of the {@code implies}
method and its PermissionCollection caching strategy.

@author Roland Schemers
@author Gary Ellison
@see java.security.Provider
@see java.security.ProtectionDomain
@see java.security.Permission
@see java.security.Security security properties
"
      classrelation 3357570 // UNSUPPORTED_EMPTY_COLLECTION (<unidirectional association>)
	relation 3357570 --->
	  a role_name "UNSUPPORTED_EMPTY_COLLECTION" init_value "
                        new UnsupportedEmptyCollection()" class_relation const_relation public
	    comment "
A read-only empty PermissionCollection instance.
@since 1.6

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3357570 // UNSUPPORTED_EMPTY_COLLECTION (<unidirectional association>)
	  b parent class_ref 257794 // PermissionCollection
      end

      class 1021826 "PolicyInfo"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3357698 // policy (<unidirectional association>)
	  relation 3357698 --->
	    a role_name "policy" const_relation package
	      comment " the system-wide policy
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3357698 // policy (<unidirectional association>)
	    b parent class_ref 1021698 // Policy
	end

	attribute 1852034 "initialized"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " a flag indicating if the system-wide policy has been initialized
"
	end

	operation 7981186 "PolicyInfo"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "policy" type class_ref 1021698 // Policy
	    param inout name "initialized" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3357826 // policy (<unidirectional association>)
	relation 3357826 --->
	  a role_name "policy" init_value "
        new AtomicReference<>(new PolicyInfo(null, false))" class_relation private
	    comment " PolicyInfo is stored in an AtomicReference
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PolicyInfo> ${name}${value};
"
	    classrelation_ref 3357826 // policy (<unidirectional association>)
	  b parent class_ref 1021954 // AtomicReference
      end

      attribute 1852162 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value " Debug.getInstance(\"policy\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3357954 // pdMapping (<unidirectional association>)
	relation 3357954 --->
	  a role_name "pdMapping" private
	    comment " Cache mapping ProtectionDomain.Key to PermissionCollection
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ProtectionDomain.Key, PermissionCollection> ${name}${value};
"
	    classrelation_ref 3357954 // pdMapping (<unidirectional association>)
	  b parent class_ref 192002 // WeakHashMap
      end

      operation 7981314 "isSet"
	class_operation package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " package private for AccessControlContext and ProtectionDomain "
      end

      operation 7981442 "checkPermission"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "type" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7981570 "getPolicy"
	class_operation public return_type class_ref 1021698 // Policy
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the installed Policy object. This value should not be cached,
as it may be changed by a call to {@code setPolicy}.
This method first calls
{@code SecurityManager.checkPermission} with a
{@code SecurityPermission(\"getPolicy\")} permission
to ensure it's ok to get the Policy object.

@return the installed Policy.

@throws SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       getting the Policy object.

@see SecurityManager#checkPermission(Permission)
@see #setPolicy(java.security.Policy)
"
      end

      operation 7981698 "getPolicyNoCheck"
	class_operation package return_type class_ref 1021698 // Policy
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the installed Policy object, skipping the security check.
Used by ProtectionDomain and getPolicy.

@return the installed Policy.
"
      end

      operation 7981826 "setPolicy"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 1021698 // Policy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the system-wide Policy object. This method first calls
{@code SecurityManager.checkPermission} with a
{@code SecurityPermission(\"setPolicy\")}
permission to ensure it's ok to set the Policy.

@param p the new system Policy object.

@throws SecurityException
       if a security manager exists and its
       {@code checkPermission} method doesn't allow
       setting the Policy.

@see SecurityManager#checkPermission(Permission)
@see #getPolicy()

"
      end

      operation 7981954 "initPolicy"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "p" type class_ref 1021698 // Policy
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize superclass state such that a legacy provider can
handle queries for itself.

@since 1.4
"
      end

      operation 7982082 "getInstance"
	class_operation public return_type class_ref 1021698 // Policy
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param inout name "params" type class_ref 1022210 // Parameters
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Policy object of the specified type.

<p> This method traverses the list of registered security providers,
starting with the most preferred Provider.
A new Policy object encapsulating the
PolicySpi implementation from the first
Provider that supports the specified type is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param type the specified Policy type.  See the Policy section in the
   <a href=
   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Policy\">
   Java Cryptography Architecture Standard Algorithm Name Documentation</a>
   for a list of standard Policy types.

@param params parameters for the Policy, which may be null.

@return the new Policy object.

@exception SecurityException if the caller does not have permission
         to get a Policy instance for the specified type.

@exception NullPointerException if the specified type is null.

@exception IllegalArgumentException if the specified parameters
         are not understood by the PolicySpi implementation
         from the selected Provider.

@exception NoSuchAlgorithmException if no Provider supports a PolicySpi
         implementation for the specified type.

@see Provider
@since 1.6
"
      end

      class 1022210 "Parameters"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      operation 7982210 "getInstance"
	class_operation public return_type class_ref 1021698 // Policy
	nparams 3
	  param inout name "type" type class_ref 128130 // String
	  param inout name "params" type class_ref 1022210 // Parameters
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509442 // NoSuchProviderException
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Policy object of the specified type.

<p> A new Policy object encapsulating the
PolicySpi implementation from the specified provider
is returned.   The specified provider must be registered
in the provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param type the specified Policy type.  See the Policy section in the
   <a href=
   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Policy\">
   Java Cryptography Architecture Standard Algorithm Name Documentation</a>
   for a list of standard Policy types.

@param params parameters for the Policy, which may be null.

@param provider the provider.

@return the new Policy object.

@exception SecurityException if the caller does not have permission
         to get a Policy instance for the specified type.

@exception NullPointerException if the specified type is null.

@exception IllegalArgumentException if the specified provider
         is null or empty,
         or if the specified parameters are not understood by
         the PolicySpi implementation from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception NoSuchAlgorithmException if the specified provider does not
         support a PolicySpi implementation for the specified type.

@see Provider
@since 1.6
"
      end

      operation 7982338 "getInstance"
	class_operation public return_type class_ref 1021698 // Policy
	nparams 3
	  param inout name "type" type class_ref 128130 // String
	  param inout name "params" type class_ref 1022210 // Parameters
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Policy object of the specified type.

<p> A new Policy object encapsulating the
PolicySpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param type the specified Policy type.  See the Policy section in the
   <a href=
   \"{@docRoot}/../technotes/guides/security/StandardNames.html#Policy\">
   Java Cryptography Architecture Standard Algorithm Name Documentation</a>
   for a list of standard Policy types.

@param params parameters for the Policy, which may be null.

@param provider the Provider.

@return the new Policy object.

@exception SecurityException if the caller does not have permission
         to get a Policy instance for the specified type.

@exception NullPointerException if the specified type is null.

@exception IllegalArgumentException if the specified Provider is null,
         or if the specified parameters are not understood by
         the PolicySpi implementation from the specified Provider.

@exception NoSuchAlgorithmException if the specified Provider does not
         support a PolicySpi implementation for the specified type.

@see Provider
@since 1.6
"
      end

      operation 7982466 "handleException"
	class_operation private return_type class_ref 1021698 // Policy
	nparams 1
	  param inout name "nsae" type class_ref 509314 // NoSuchAlgorithmException
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7982594 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Provider of this Policy.

<p> This Policy instance will only have a Provider if it
was obtained via a call to {@code Policy.getInstance}.
Otherwise this method returns null.

@return the Provider of this Policy, or null.

@since 1.6
"
      end

      operation 7982722 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the type of this Policy.

<p> This Policy instance will only have a type if it
was obtained via a call to {@code Policy.getInstance}.
Otherwise this method returns null.

@return the type of this Policy, or null.

@since 1.6
"
      end

      operation 7982850 "getParameters"
	public return_type class_ref 1022210 // Parameters
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return Policy parameters.

<p> This Policy instance will only have parameters if it
was obtained via a call to {@code Policy.getInstance}.
Otherwise this method returns null.

@return Policy parameters, or null.

@since 1.6
"
      end

      operation 7982978 "getPermissions"
	public return_type class_ref 257794 // PermissionCollection
	nparams 1
	  param inout name "codesource" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a PermissionCollection object containing the set of
permissions granted to the specified CodeSource.

<p> Applications are discouraged from calling this method
since this operation may not be supported by all policy implementations.
Applications should solely rely on the {@code implies} method
to perform policy checks.  If an application absolutely must call
a getPermissions method, it should call
{@code getPermissions(ProtectionDomain)}.

<p> The default implementation of this method returns
Policy.UNSUPPORTED_EMPTY_COLLECTION.  This method can be
overridden if the policy implementation can return a set of
permissions granted to a CodeSource.

@param codesource the CodeSource to which the returned
         PermissionCollection has been granted.

@return a set of permissions granted to the specified CodeSource.
         If this operation is supported, the returned
         set of permissions must be a new mutable instance
         and it must support heterogeneous Permission types.
         If this operation is not supported,
         Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.
"
      end

      operation 7983106 "getPermissions"
	public return_type class_ref 257794 // PermissionCollection
	nparams 1
	  param inout name "domain" type class_ref 319618 // ProtectionDomain
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a PermissionCollection object containing the set of
permissions granted to the specified ProtectionDomain.

<p> Applications are discouraged from calling this method
since this operation may not be supported by all policy implementations.
Applications should rely on the {@code implies} method
to perform policy checks.

<p> The default implementation of this method first retrieves
the permissions returned via {@code getPermissions(CodeSource)}
(the CodeSource is taken from the specified ProtectionDomain),
as well as the permissions located inside the specified ProtectionDomain.
All of these permissions are then combined and returned in a new
PermissionCollection object.  If {@code getPermissions(CodeSource)}
returns Policy.UNSUPPORTED_EMPTY_COLLECTION, then this method
returns the permissions contained inside the specified ProtectionDomain
in a new PermissionCollection object.

<p> This method can be overridden if the policy implementation
supports returning a set of permissions granted to a ProtectionDomain.

@param domain the ProtectionDomain to which the returned
         PermissionCollection has been granted.

@return a set of permissions granted to the specified ProtectionDomain.
         If this operation is supported, the returned
         set of permissions must be a new mutable instance
         and it must support heterogeneous Permission types.
         If this operation is not supported,
         Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.

@since 1.4
"
      end

      operation 7983234 "addStaticPerms"
	private explicit_return_type "void"
	nparams 2
	  param inout name "perms" type class_ref 257794 // PermissionCollection
	  param inout name "statics" type class_ref 257794 // PermissionCollection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "add static permissions to provided permission collection
"
      end

      operation 7983362 "implies"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "domain" type class_ref 319618 // ProtectionDomain
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluates the global policy for the permissions granted to
the ProtectionDomain and tests whether the permission is
granted.

@param domain the ProtectionDomain to test
@param permission the Permission object to be tested for implication.

@return true if \"permission\" is a proper subset of a permission
granted to this ProtectionDomain.

@see java.security.ProtectionDomain
@since 1.4
"
      end

      operation 7983490 "refresh"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Refreshes/reloads the policy configuration. The behavior of this method
depends on the implementation. For example, calling {@code refresh}
on a file-based policy will cause the file to be re-read.

<p> The default implementation of this method does nothing.
This method should be overridden if a refresh operation is supported
by the policy implementation.
"
      end

      class 1022338 "PolicyDelegate"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3358082 // <generalisation>
	  relation 3358082 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3358082 // <generalisation>
	    b parent class_ref 1021698 // Policy
	end

	classrelation 3358210 // spi (<unidirectional association>)
	  relation 3358210 --->
	    a role_name "spi" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3358210 // spi (<unidirectional association>)
	    b parent class_ref 1022466 // PolicySpi
	end

	classrelation 3358338 // p (<unidirectional association>)
	  relation 3358338 --->
	    a role_name "p" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3358338 // p (<unidirectional association>)
	    b parent class_ref 509570 // Provider
	end

	classrelation 3358466 // type (<unidirectional association>)
	  relation 3358466 --->
	    a role_name "type" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3358466 // type (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3358594 // params (<unidirectional association>)
	  relation 3358594 --->
	    a role_name "params" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3358594 // params (<unidirectional association>)
	    b parent class_ref 1022210 // Parameters
	end

	operation 7983618 "PolicyDelegate"
	  private explicit_return_type ""
	  nparams 4
	    param inout name "spi" type class_ref 1022466 // PolicySpi
	    param inout name "p" type class_ref 509570 // Provider
	    param inout name "type" type class_ref 128130 // String
	    param inout name "params" type class_ref 1022210 // Parameters
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7983746 "getType"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7983874 "getParameters"
	  public return_type class_ref 1022210 // Parameters
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7984002 "getProvider"
	  public return_type class_ref 509570 // Provider
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7984130 "getPermissions"
	  public return_type class_ref 257794 // PermissionCollection
	  nparams 1
	    param inout name "codesource" type class_ref 319874 // CodeSource
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7984258 "getPermissions"
	  public return_type class_ref 257794 // PermissionCollection
	  nparams 1
	    param inout name "domain" type class_ref 319618 // ProtectionDomain
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7984386 "implies"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "domain" type class_ref 319618 // ProtectionDomain
	    param inout name "perm" type class_ref 257538 // Permission
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7984514 "refresh"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1022594 "UnsupportedEmptyCollection"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3358722 // <generalisation>
	  relation 3358722 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3358722 // <generalisation>
	    b parent class_ref 257794 // PermissionCollection
	end

	attribute 1852290 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -8492269157353014774L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3358850 // perms (<unidirectional association>)
	  relation 3358850 --->
	    a role_name "perms" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3358850 // perms (<unidirectional association>)
	    b parent class_ref 1021186 // Permissions
	end

	operation 7984642 "UnsupportedEmptyCollection"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a read-only empty PermissionCollection object.
"
	end

	operation 7984770 "add"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "permission" type class_ref 257538 // Permission
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Adds a permission object to the current collection of permission
objects.

@param permission the Permission object to add.

@exception SecurityException - if this PermissionCollection object
                               has been marked readonly
"
	end

	operation 7984898 "implies"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "permission" type class_ref 257538 // Permission
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Checks to see if the specified permission is implied by the
collection of Permission objects held in this PermissionCollection.

@param permission the Permission object to compare.

@return true if \"permission\" is implied by the permissions in
the collection, false if not.
"
	end

	operation 7985026 "elements"
	  public return_type class_ref 185986 // Enumeration
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Returns an enumeration of all the Permission objects in the
collection.

@return an enumeration of all the Permissions.
"
	end
      end
    end

    class 1022466 "PolicySpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code Policy} class.
All the abstract methods in this class must be implemented by each
service provider who wishes to supply a Policy implementation.

<p> Subclass implementations of this abstract class must provide
a public constructor that takes a {@code Policy.Parameters}
object as an input parameter.  This constructor also must throw
an IllegalArgumentException if it does not understand the
{@code Policy.Parameters} input.


@since 1.6
"
      operation 7985154 "engineImplies"
	abstract protected explicit_return_type "boolean"
	nparams 2
	  param inout name "domain" type class_ref 319618 // ProtectionDomain
	  param inout name "permission" type class_ref 257538 // Permission
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check whether the policy has granted a Permission to a ProtectionDomain.

@param domain the ProtectionDomain to check.

@param permission check whether this permission is granted to the
         specified domain.

@return boolean true if the permission is granted to the domain.
"
      end

      operation 7985282 "engineRefresh"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Refreshes/reloads the policy configuration. The behavior of this method
depends on the implementation. For example, calling {@code refresh}
on a file-based policy will cause the file to be re-read.

<p> The default implementation of this method does nothing.
This method should be overridden if a refresh operation is supported
by the policy implementation.
"
      end

      operation 7985410 "engineGetPermissions"
	protected return_type class_ref 257794 // PermissionCollection
	nparams 1
	  param inout name "codesource" type class_ref 319874 // CodeSource
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a PermissionCollection object containing the set of
permissions granted to the specified CodeSource.

<p> The default implementation of this method returns
Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be
overridden if the policy implementation can return a set of
permissions granted to a CodeSource.

@param codesource the CodeSource to which the returned
         PermissionCollection has been granted.

@return a set of permissions granted to the specified CodeSource.
         If this operation is supported, the returned
         set of permissions must be a new mutable instance
         and it must support heterogeneous Permission types.
         If this operation is not supported,
         Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.
"
      end

      operation 7985538 "engineGetPermissions"
	protected return_type class_ref 257794 // PermissionCollection
	nparams 1
	  param inout name "domain" type class_ref 319618 // ProtectionDomain
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a PermissionCollection object containing the set of
permissions granted to the specified ProtectionDomain.

<p> The default implementation of this method returns
Policy.UNSUPPORTED_EMPTY_COLLECTION object.  This method can be
overridden if the policy implementation can return a set of
permissions granted to a ProtectionDomain.

@param domain the ProtectionDomain to which the returned
         PermissionCollection has been granted.

@return a set of permissions granted to the specified ProtectionDomain.
         If this operation is supported, the returned
         set of permissions must be a new mutable instance
         and it must support heterogeneous Permission types.
         If this operation is not supported,
         Policy.UNSUPPORTED_EMPTY_COLLECTION is returned.
"
      end
    end

    class 1023362 "ProviderException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A runtime exception for Provider exceptions (such as
misconfiguration errors or unrecoverable internal errors),
which may be subclassed by Providers to
throw specialized, provider-specific runtime errors.

@author Benjamin Renaud
"
      classrelation 3360898 // <generalisation>
	relation 3360898 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3360898 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1853186 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5256023526693665674L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7989250 "ProviderException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ProviderException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 7989378 "ProviderException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ProviderException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param s the detail message.
"
      end

      operation 7989506 "ProviderException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ProviderException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 7989634 "ProviderException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ProviderException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1024130 "SecureRandomSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code SecureRandom} class.
All the abstract methods in this class must be implemented by each
service provider who wishes to supply the implementation
of a cryptographically strong pseudo-random number generator.


@see SecureRandom
@since 1.2
"
      classrelation 3363714 // <realization>
	relation 3363714 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3363714 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1857026 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2991854161009191830L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7998722 "engineSetSeed"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "seed" explicit_type "byte"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reseeds this random object. The given seed supplements, rather than
replaces, the existing seed. Thus, repeated calls are guaranteed
never to reduce randomness.

@param seed the seed.
"
      end

      operation 7998850 "engineNextBytes"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "bytes" explicit_type "byte"
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a user-specified number of random bytes.

<p> If a call to {@code engineSetSeed} had not occurred previously,
the first call to this method forces this SecureRandom implementation
to seed itself.  This self-seeding will not occur if
{@code engineSetSeed} was previously called.

@param bytes the array to be filled in with random bytes.
"
      end

      operation 7998978 "engineGenerateSeed"
	abstract protected explicit_return_type "byte"
	nparams 1
	  param in name "numBytes" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the given number of seed bytes.  This call may be used to
seed other random number generators.

@param numBytes the number of seed bytes to generate.

@return the seed bytes.
"
      end
    end

    class 1024386 "Security"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>This class centralizes all security properties and common security
methods. One of its primary uses is to manage providers.

<p>The default values of security properties are read from an
implementation-specific location, which is typically the properties file
{@code lib/security/java.security} in the Java installation directory.

@author Benjamin Renaud
"
      attribute 1857154 "sdebug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value "
                        Debug.getInstance(\"properties\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Are we debugging? -- for developers 
"
      end

      classrelation 3363842 // props (<unidirectional association>)
	relation 3363842 --->
	  a role_name "props" class_relation private
	    comment " The java.security properties 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3363842 // props (<unidirectional association>)
	  b parent class_ref 240130 // Properties
      end

      class 1024514 "ProviderProperty"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3363970 // className (<unidirectional association>)
	  relation 3363970 --->
	    a role_name "className" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3363970 // className (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3364098 // provider (<unidirectional association>)
	  relation 3364098 --->
	    a role_name "provider" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3364098 // provider (<unidirectional association>)
	    b parent class_ref 509570 // Provider
	end
      end

      extra_member 167682 "initialization"
	
	cpp "" ""
	java "  static {
        // doPrivileged here because there are multiple
        // things in initialize that might require privs.
        // (the FileInputStream call and the File.exists call,
        // the securityPropFile call, etc)
        AccessController.doPrivileged(new PrivilegedAction<Void>() {
            public Void run() {
                initialize();
                return null;
            }
        });
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7999106 "initialize"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7999234 "initializeStatic"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize to default values, if <java.home>/lib/java.security
is not found.
"
      end

      operation 7999362 "Security"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Don't let anyone instantiate this.
"
      end

      operation 7999490 "securityPropFile"
	class_operation private return_type class_ref 131970 // File
	nparams 1
	  param inout name "filename" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7999618 "getProviderProperty"
	class_operation private return_type class_ref 1024514 // ProviderProperty
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Looks up providers, and returns the property (and its associated
provider) mapping the key, if any.
The order in which the providers are looked up is the
provider-preference order, as specificed in the security
properties file.
"
      end

      operation 7999746 "getProviderProperty"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the property (if any) mapping the key for the given provider.
"
      end

      operation 7999874 "getAlgorithmProperty"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "algName" type class_ref 128130 // String
	  param inout name "propName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Gets a specified property for an algorithm. The algorithm name
should be a standard name. See the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

One possible use is by specialized algorithm parsers, which may map
classes to algorithms which they understand (much like Key parsers
do).

@param algName the algorithm name.

@param propName the name of the property to get.

@return the value of the specified property.

@deprecated This method used to return the value of a proprietary
property in the master file of the \"SUN\" Cryptographic Service
Provider in order to determine how to parse algorithm-specific
parameters. Use the new provider-based and algorithm-independent
{@code AlgorithmParameters} and {@code KeyFactory} engine
classes (introduced in the J2SE version 1.2 platform) instead.
"
      end

      operation 8000002 "insertProviderAt"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "provider" type class_ref 509570 // Provider
	  param in name "position" explicit_type "int"
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new provider, at a specified position. The position is
the preference order in which providers are searched for
requested algorithms.  The position is 1-based, that is,
1 is most preferred, followed by 2, and so on.

<p>If the given provider is installed at the requested position,
the provider that used to be at that position, and all providers
with a position greater than {@code position}, are shifted up
one position (towards the end of the list of installed providers).

<p>A provider cannot be added if it is already installed.

<p>If there is a security manager, the
{@link java.lang.SecurityManager#checkSecurityAccess} method is called
with the {@code \"insertProvider\"} permission target name to see if
it's ok to add a new provider. If this permission check is denied,
{@code checkSecurityAccess} is called again with the
{@code \"insertProvider.\"+provider.getName()} permission target name. If
both checks are denied, a {@code SecurityException} is thrown.

@param provider the provider to be added.

@param position the preference position that the caller would
like for this provider.

@return the actual preference position in which the provider was
added, or -1 if the provider was not added because it is
already installed.

@throws  NullPointerException if provider is null
@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to add a new provider

@see #getProvider
@see #removeProvider
@see java.security.SecurityPermission
"
      end

      operation 8000130 "addProvider"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "provider" type class_ref 509570 // Provider
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a provider to the next position available.

<p>If there is a security manager, the
{@link java.lang.SecurityManager#checkSecurityAccess} method is called
with the {@code \"insertProvider\"} permission target name to see if
it's ok to add a new provider. If this permission check is denied,
{@code checkSecurityAccess} is called again with the
{@code \"insertProvider.\"+provider.getName()} permission target name. If
both checks are denied, a {@code SecurityException} is thrown.

@param provider the provider to be added.

@return the preference position in which the provider was
added, or -1 if the provider was not added because it is
already installed.

@throws  NullPointerException if provider is null
@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies access to add a new provider

@see #getProvider
@see #removeProvider
@see java.security.SecurityPermission
"
      end

      operation 8000258 "removeProvider"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the provider with the specified name.

<p>When the specified provider is removed, all providers located
at a position greater than where the specified provider was are shifted
down one position (towards the head of the list of installed
providers).

<p>This method returns silently if the provider is not installed or
if name is null.

<p>First, if there is a security manager, its
{@code checkSecurityAccess}
method is called with the string {@code \"removeProvider.\"+name}
to see if it's ok to remove the provider.
If the default implementation of {@code checkSecurityAccess}
is used (i.e., that method is not overriden), then this will result in
a call to the security manager's {@code checkPermission} method
with a {@code SecurityPermission(\"removeProvider.\"+name)}
permission.

@param name the name of the provider to remove.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkSecurityAccess} method
         denies
         access to remove the provider

@see #getProvider
@see #addProvider
"
      end

      operation 8000386 "getProviders"
	class_operation public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all the installed providers. The order of
the providers in the array is their preference order.

@return an array of all the installed providers.
"
      end

      operation 8000514 "getProvider"
	class_operation public return_type class_ref 509570 // Provider
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider installed with the specified name, if
any. Returns null if no provider with the specified name is
installed or if name is null.

@param name the name of the provider to get.

@return the provider of the specified name.

@see #removeProvider
@see #addProvider
"
      end

      operation 8000642 "getProviders"
	class_operation public return_type class_ref 509570 // Provider
	nparams 1
	  param inout name "filter" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all installed providers that satisfy the
specified selection criterion, or null if no such providers have been
installed. The returned providers are ordered
according to their
{@linkplain #insertProviderAt(java.security.Provider, int) preference order}.

<p> A cryptographic service is always associated with a particular
algorithm or type. For example, a digital signature service is
always associated with a particular algorithm (e.g., DSA),
and a CertificateFactory service is always associated with
a particular certificate type (e.g., X.509).

<p>The selection criterion must be specified in one of the following two
formats:
<ul>
<li> <i>{@literal <crypto_service>.<algorithm_or_type>}</i>
<p> The cryptographic service name must not contain any dots.
<p> A
provider satisfies the specified selection criterion iff the provider
implements the
specified algorithm or type for the specified cryptographic service.
<p> For example, \"CertificateFactory.X.509\"
would be satisfied by any provider that supplied
a CertificateFactory implementation for X.509 certificates.
<li> <i>{@literal <crypto_service>.<algorithm_or_type>
<attribute_name>:<attribute_value>}</i>
<p> The cryptographic service name must not contain any dots. There
must be one or more space characters between the
<i>{@literal <algorithm_or_type>}</i> and the
<i>{@literal <attribute_name>}</i>.
 <p> A provider satisfies this selection criterion iff the
provider implements the specified algorithm or type for the specified
cryptographic service and its implementation meets the
constraint expressed by the specified attribute name/value pair.
<p> For example, \"Signature.SHA1withDSA KeySize:1024\" would be
satisfied by any provider that implemented
the SHA1withDSA signature algorithm with a keysize of 1024 (or larger).

</ul>

<p> See the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard cryptographic service names, standard
algorithm names and standard attribute names.

@param filter the criterion for selecting
providers. The filter is case-insensitive.

@return all the installed providers that satisfy the selection
criterion, or null if no such providers have been installed.

@throws InvalidParameterException
        if the filter is not in the required format
@throws NullPointerException if filter is null

@see #getProviders(java.util.Map)
@since 1.3
"
      end

      operation 8000770 "getProviders"
	class_operation public return_type class_ref 509570 // Provider
	nparams 1
	  param inout name "filter" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<String,String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all installed providers that satisfy the
specified* selection criteria, or null if no such providers have been
installed. The returned providers are ordered
according to their
{@linkplain #insertProviderAt(java.security.Provider, int)
preference order}.

<p>The selection criteria are represented by a map.
Each map entry represents a selection criterion.
A provider is selected iff it satisfies all selection
criteria. The key for any entry in such a map must be in one of the
following two formats:
<ul>
<li> <i>{@literal <crypto_service>.<algorithm_or_type>}</i>
<p> The cryptographic service name must not contain any dots.
<p> The value associated with the key must be an empty string.
<p> A provider
satisfies this selection criterion iff the provider implements the
specified algorithm or type for the specified cryptographic service.
<li>  <i>{@literal <crypto_service>}.
{@literal <algorithm_or_type> <attribute_name>}</i>
<p> The cryptographic service name must not contain any dots. There
must be one or more space characters between the
<i>{@literal <algorithm_or_type>}</i>
and the <i>{@literal <attribute_name>}</i>.
<p> The value associated with the key must be a non-empty string.
A provider satisfies this selection criterion iff the
provider implements the specified algorithm or type for the specified
cryptographic service and its implementation meets the
constraint expressed by the specified attribute name/value pair.
</ul>

<p> See the <a href=
\"../../../technotes/guides/security/StandardNames.html\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard cryptographic service names, standard
algorithm names and standard attribute names.

@param filter the criteria for selecting
providers. The filter is case-insensitive.

@return all the installed providers that satisfy the selection
criteria, or null if no such providers have been installed.

@throws InvalidParameterException
        if the filter is not in the required format
@throws NullPointerException if filter is null

@see #getProviders(java.lang.String)
@since 1.3
"
      end

      classrelation 3364226 // spiMap (<unidirectional association>)
	relation 3364226 --->
	  a role_name "spiMap" init_value "
            new ConcurrentHashMap<>()" class_relation const_relation private
	    comment " Map containing cached Spi Class objects of the specified type
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Class<?>> ${name}${value};
"
	    classrelation_ref 3364226 // spiMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 8000898 "getSpiClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 1
	  param inout name "type" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Class object for the given engine type
(e.g. \"MessageDigest\"). Works for Spis in the java.security package
only.
"
      end

      operation 8001026 "getImpl"
	class_operation package return_type class_ref 129538 // Object
	nparams 3
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of objects: the first object in the array is
an instance of an implementation of the requested algorithm
and type, and the second object in the array identifies the provider
of that implementation.
The {@code provider} argument can be null, in which case all
configured providers will be searched in order of preference.
"
      end

      operation 8001154 "getImpl"
	class_operation package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8001282 "getImpl"
	class_operation package return_type class_ref 129538 // Object
	nparams 3
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of objects: the first object in the array is
an instance of an implementation of the requested algorithm
and type, and the second object in the array identifies the provider
of that implementation.
The {@code provider} argument cannot be null.
"
      end

      operation 8001410 "getImpl"
	class_operation package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "type" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "params" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8001538 "getProperty"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a security property value.

<p>First, if there is a security manager, its
{@code checkPermission}  method is called with a
{@code java.security.SecurityPermission(\"getProperty.\"+key)}
permission to see if it's ok to retrieve the specified
security property value..

@param key the key of the property being retrieved.

@return the value of the security property corresponding to key.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkPermission} method
         denies
         access to retrieve the specified security property value
@throws  NullPointerException is key is null

@see #setProperty
@see java.security.SecurityPermission
"
      end

      operation 8001666 "setProperty"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 128130 // String
	  param inout name "datum" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a security property value.

<p>First, if there is a security manager, its
{@code checkPermission} method is called with a
{@code java.security.SecurityPermission(\"setProperty.\"+key)}
permission to see if it's ok to set the specified
security property value.

@param key the name of the property to be set.

@param datum the value of the property to be set.

@throws  SecurityException
         if a security manager exists and its {@link
         java.lang.SecurityManager#checkPermission} method
         denies access to set the specified security property value
@throws  NullPointerException if key or datum is null

@see #getProperty
@see java.security.SecurityPermission
"
      end

      operation 8001794 "invalidateSMCache"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation detail:  If the property we just set in
setProperty() was either \"package.access\" or
\"package.definition\", we need to signal to the SecurityManager
class that the value has just changed, and that it should
invalidate it's local cache values.

Rather than create a new API entry for this function,
we use reflection to set a private variable.
"
      end

      operation 8001922 "check"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "directive" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8002050 "checkInsertProvider"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8002178 "getAllQualifyingCandidates"
	class_operation private return_type class_ref 884866 // LinkedHashSet
	nparams 3
	  param inout name "filterKey" type class_ref 128130 // String
	  param inout name "filterValue" type class_ref 128130 // String
	  param inout name "allProviders" type class_ref 509570 // Provider
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Provider> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all providers who satisfy the specified
criterion.
"
      end

      operation 8002306 "getProvidersNotUsingCache"
	class_operation private return_type class_ref 884866 // LinkedHashSet
	nparams 5
	  param inout name "serviceName" type class_ref 128130 // String
	  param inout name "algName" type class_ref 128130 // String
	  param inout name "attrName" type class_ref 128130 // String
	  param inout name "filterValue" type class_ref 128130 // String
	  param inout name "allProviders" type class_ref 509570 // Provider
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Provider> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8002434 "isCriterionSatisfied"
	class_operation private explicit_return_type "boolean"
	nparams 5
	  param inout name "prov" type class_ref 509570 // Provider
	  param inout name "serviceName" type class_ref 128130 // String
	  param inout name "algName" type class_ref 128130 // String
	  param inout name "attrName" type class_ref 128130 // String
	  param inout name "filterValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the given provider satisfies
the selection criterion key:value.
"
      end

      operation 8002562 "isStandardAttr"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "attribute" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the attribute is a standard attribute;
otherwise, returns false.
"
      end

      operation 8002690 "isConstraintSatisfied"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "attribute" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	  param inout name "prop" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the requested attribute value is supported;
otherwise, returns false.
"
      end

      operation 8002818 "getFilterComponents"
	class_operation package return_type class_ref 128130 // String
	nparams 2
	  param inout name "filterKey" type class_ref 128130 // String
	  param inout name "filterValue" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8002946 "getAlgorithms"
	class_operation public return_type class_ref 192258 // Set
	nparams 1
	  param inout name "serviceName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a Set of Strings containing the names of all available
algorithms or types for the specified Java cryptographic service
(e.g., Signature, MessageDigest, Cipher, Mac, KeyStore). Returns
an empty Set if there is no provider that supports the
specified service or if serviceName is null. For a complete list
of Java cryptographic services, please see the
<a href=\"../../../technotes/guides/security/crypto/CryptoSpec.html\">Java
Cryptography Architecture API Specification &amp; Reference</a>.
Note: the returned set is immutable.

@param serviceName the name of the Java cryptographic
service (e.g., Signature, MessageDigest, Cipher, Mac, KeyStore).
Note: this parameter is case-insensitive.

@return a Set of Strings containing the names of all available
algorithms or types for the specified Java cryptographic service
or an empty set if no provider supports the specified service.

@since 1.4
"
      end
    end

    class 1024642 "SignatureSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code Signature} class, which is used to provide the
functionality of a digital signature algorithm. Digital signatures are used
for authentication and integrity assurance of digital data.
.
<p> All the abstract methods in this class must be implemented by each
cryptographic service provider who wishes to supply the implementation
of a particular signature algorithm.

@author Benjamin Renaud


@see Signature
"
      classrelation 3364482 // appRandom (<unidirectional association>)
	relation 3364482 --->
	  a role_name "appRandom" init_value " null" protected
	    comment "
Application-specified source of randomness.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3364482 // appRandom (<unidirectional association>)
	  b parent class_ref 753154 // SecureRandom
      end

      operation 8003330 "engineInitVerify"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "publicKey" type class_ref 765826 // PublicKey
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this signature object with the specified
public key for verification operations.

@param publicKey the public key of the identity whose signature is
going to be verified.

@exception InvalidKeyException if the key is improperly
encoded, parameters are missing, and so on.
"
      end

      operation 8003458 "engineInitSign"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "privateKey" type class_ref 767362 // PrivateKey
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this signature object with the specified
private key for signing operations.

@param privateKey the private key of the identity whose signature
will be generated.

@exception InvalidKeyException if the key is improperly
encoded, parameters are missing, and so on.
"
      end

      operation 8003586 "engineInitSign"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "privateKey" type class_ref 767362 // PrivateKey
	  param inout name "random" type class_ref 753154 // SecureRandom
	nexceptions 1
	  exception class_ref 1017346 // InvalidKeyException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this signature object with the specified
private key and source of randomness for signing operations.

<p>This concrete method has been added to this previously-defined
abstract class. (For backwards compatibility, it cannot be abstract.)

@param privateKey the private key of the identity whose signature
will be generated.
@param random the source of randomness

@exception InvalidKeyException if the key is improperly
encoded, parameters are missing, and so on.
"
      end

      operation 8003714 "engineUpdate"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "byte"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the data to be signed or verified
using the specified byte.

@param b the byte to use for the update.

@exception SignatureException if the engine is not initialized
properly.
"
      end

      operation 8003842 "engineUpdate"
	abstract protected explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the data to be signed or verified, using the
specified array of bytes, starting at the specified offset.

@param b the array of bytes
@param off the offset to start from in the array of bytes
@param len the number of bytes to use, starting at offset

@exception SignatureException if the engine is not initialized
properly
"
      end

      operation 8003970 "engineUpdate"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "input" type class_ref 149890 // ByteBuffer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the data to be signed or verified using the specified
ByteBuffer. Processes the {@code data.remaining()} bytes
starting at at {@code data.position()}.
Upon return, the buffer's position will be equal to its limit;
its limit will not have changed.

@param input the ByteBuffer
@since 1.5
"
      end

      operation 8004098 "engineSign"
	abstract protected explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signature bytes of all the data
updated so far.
The format of the signature depends on the underlying
signature scheme.

@return the signature bytes of the signing operation's result.

@exception SignatureException if the engine is not
initialized properly or if this signature algorithm is unable to
process the input data provided.
"
      end

      operation 8004226 "engineSign"
	protected explicit_return_type "int"
	nparams 3
	  param inout name "outbuf" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes this signature operation and stores the resulting signature
bytes in the provided buffer {@code outbuf}, starting at
{@code offset}.
The format of the signature depends on the underlying
signature scheme.

<p>The signature implementation is reset to its initial state
(the state it was in after a call to one of the
{@code engineInitSign} methods)
and can be reused to generate further signatures with the same private
key.

This method should be abstract, but we leave it concrete for
binary compatibility.  Knowledgeable providers should override this
method.

@param outbuf buffer for the signature result.

@param offset offset into {@code outbuf} where the signature is
stored.

@param len number of bytes within {@code outbuf} allotted for the
signature.
Both this default implementation and the SUN provider do not
return partial digests. If the value of this parameter is less
than the actual signature length, this method will throw a
SignatureException.
This parameter is ignored if its value is greater than or equal to
the actual signature length.

@return the number of bytes placed into {@code outbuf}

@exception SignatureException if the engine is not
initialized properly, if this signature algorithm is unable to
process the input data provided, or if {@code len} is less
than the actual signature length.

@since 1.2
"
      end

      operation 8004354 "engineVerify"
	abstract protected explicit_return_type "boolean"
	nparams 1
	  param inout name "sigBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies the passed-in signature.

@param sigBytes the signature bytes to be verified.

@return true if the signature was verified, false if not.

@exception SignatureException if the engine is not
initialized properly, the passed-in signature is improperly
encoded or of the wrong type, if this signature algorithm is unable to
process the input data provided, etc.
"
      end

      operation 8004482 "engineVerify"
	protected explicit_return_type "boolean"
	nparams 3
	  param inout name "sigBytes" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies the passed-in signature in the specified array
of bytes, starting at the specified offset.

<p> Note: Subclasses should overwrite the default implementation.


@param sigBytes the signature bytes to be verified.
@param offset the offset to start from in the array of bytes.
@param length the number of bytes to use, starting at offset.

@return true if the signature was verified, false if not.

@exception SignatureException if the engine is not
initialized properly, the passed-in signature is improperly
encoded or of the wrong type, if this signature algorithm is unable to
process the input data provided, etc.
@since 1.4
"
      end

      operation 8004610 "engineSetParameter"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "param" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1017474 // InvalidParameterException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Sets the specified algorithm parameter to the specified
value. This method supplies a general-purpose mechanism through
which it is possible to set the various parameters of this object.
A parameter may be any settable parameter for the algorithm, such as
a parameter size, or a source of random bits for signature generation
(if appropriate), or an indication of whether or not to perform
a specific but optional computation. A uniform algorithm-specific
naming scheme for each parameter is desirable but left unspecified
at this time.

@param param the string identifier of the parameter.

@param value the parameter value.

@exception InvalidParameterException if {@code param} is an
invalid parameter for this signature algorithm engine,
the parameter is already set
and cannot be set again, a security exception occurs, and so on.

@deprecated Replaced by {@link
#engineSetParameter(java.security.spec.AlgorithmParameterSpec)
engineSetParameter}.
"
      end

      operation 8004738 "engineSetParameter"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "params" type class_ref 753282 // AlgorithmParameterSpec
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>This method is overridden by providers to initialize
this signature engine with the specified parameter set.

@param params the parameters

@exception UnsupportedOperationException if this method is not
overridden by a provider

@exception InvalidAlgorithmParameterException if this method is
overridden by a provider and the given parameters
are inappropriate for this signature engine
"
      end

      operation 8004866 "engineGetParameters"
	protected return_type class_ref 1013378 // AlgorithmParameters
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>This method is overridden by providers to return the
parameters used with this signature engine, or null
if this signature engine does not use any parameters.

<p>The returned parameters may be the same that were used to initialize
this signature engine, or may contain a combination of default and
randomly generated parameter values used by the underlying signature
implementation if this signature engine requires algorithm parameters
but was not initialized with any.

@return the parameters used with this signature engine, or null if this
signature engine does not use any parameters

@exception UnsupportedOperationException if this method is
not overridden by a provider
@since 1.4
"
      end

      operation 8004994 "engineGetParameter"
	abstract protected return_type class_ref 129538 // Object
	nparams 1
	  param inout name "param" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1017474 // InvalidParameterException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Gets the value of the specified algorithm parameter.
This method supplies a general-purpose mechanism through which it
is possible to get the various parameters of this object. A parameter
may be any settable parameter for the algorithm, such as a parameter
size, or  a source of random bits for signature generation (if
appropriate), or an indication of whether or not to perform a
specific but optional computation. A uniform algorithm-specific
naming scheme for each parameter is desirable but left unspecified
at this time.

@param param the string name of the parameter.

@return the object that represents the parameter value, or null if
there is none.

@exception InvalidParameterException if {@code param} is an
invalid parameter for this engine, or another exception occurs while
trying to get this parameter.

@deprecated
"
      end

      operation 8005122 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 129794 // CloneNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone if the implementation is cloneable.

@return a clone if the implementation is cloneable.

@exception CloneNotSupportedException if this is called
on an implementation that does not support {@code Cloneable}.
"
      end
    end

    class 1024770 "SignatureException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the generic Signature exception.

@author Benjamin Renaud
"
      classrelation 3366402 // <generalisation>
	relation 3366402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3366402 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1858946 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7509989324975124438L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8012802 "SignatureException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SignatureException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 8012930 "SignatureException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SignatureException with the specified detail
message.  A detail message is a String that describes this
particular exception.

@param msg the detail message.
"
      end

      operation 8013058 "SignatureException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code SignatureException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 8013186 "SignatureException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code SignatureException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1025154 "SignedObject"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p> SignedObject is a class for the purpose of creating authentic
runtime objects whose integrity cannot be compromised without being
detected.

<p> More specifically, a SignedObject contains another Serializable
object, the (to-be-)signed object and its signature.

<p> The signed object is a \"deep copy\" (in serialized form) of an
original object.  Once the copy is made, further manipulation of
the original object has no side effect on the copy.

<p> The underlying signing algorithm is designated by the Signature
object passed to the constructor and the {@code verify} method.
A typical usage for signing is the following:

<pre>{@code
Signature signingEngine = Signature.getInstance(algorithm,
                                                provider);
SignedObject so = new SignedObject(myobject, signingKey,
                                   signingEngine);
}</pre>

<p> A typical usage for verification is the following (having
received SignedObject {@code so}):

<pre>{@code
Signature verificationEngine =
    Signature.getInstance(algorithm, provider);
if (so.verify(publickey, verificationEngine))
    try {
        Object myobj = so.getObject();
    } catch (java.lang.ClassNotFoundException e) {};
}</pre>

<p> Several points are worth noting.  First, there is no need to
initialize the signing or verification engine, as it will be
re-initialized inside the constructor and the {@code verify}
method. Secondly, for verification to succeed, the specified
public key must be the public key corresponding to the private key
used to generate the SignedObject.

<p> More importantly, for flexibility reasons, the
constructor and {@code verify} method allow for
customized signature engines, which can implement signature
algorithms that are not installed formally as part of a crypto
provider.  However, it is crucial that the programmer writing the
verifier code be aware what {@code Signature} engine is being
used, as its own implementation of the {@code verify} method
is invoked to verify a signature.  In other words, a malicious
{@code Signature} may choose to always return true on
verification in an attempt to bypass a security check.

<p> The signature algorithm can be, among others, the NIST standard
DSA, using DSA and SHA-1.  The algorithm is specified using the
same convention as that for signatures. The DSA algorithm using the
SHA-1 message digest algorithm can be specified, for example, as
\"SHA/DSA\" or \"SHA-1/DSA\" (they are equivalent).  In the case of
RSA, there are multiple choices for the message digest algorithm,
so the signing algorithm could be specified as, for example,
\"MD2/RSA\", \"MD5/RSA\" or \"SHA-1/RSA\".  The algorithm name must be
specified, as there is no default.

<p> The name of the Cryptography Package Provider is designated
also by the Signature parameter to the constructor and the
{@code verify} method.  If the provider is not
specified, the default provider is used.  Each installation can
be configured to use a particular provider as default.

<p> Potential applications of SignedObject include:
<ul>
<li> It can be used
internally to any Java runtime as an unforgeable authorization
token -- one that can be passed around without the fear that the
token can be maliciously modified without being detected.
<li> It
can be used to sign and serialize data/object for storage outside
the Java runtime (e.g., storing critical access control data on
disk).
<li> Nested SignedObjects can be used to construct a logical
sequence of signatures, resembling a chain of authorization and
delegation.
</ul>

@see Signature

@author Li Gong
"
      classrelation 3366530 // <realization>
	relation 3366530 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3366530 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1859074 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 720502720485447167L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1859202 "content"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The original content is \"deep copied\" in its serialized format
and stored in a byte array.  The signature field is also in the
form of byte array.

"
      end

      attribute 1859330 "signature"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3366658 // thealgorithm (<unidirectional association>)
	relation 3366658 --->
	  a role_name "thealgorithm" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3366658 // thealgorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8013314 "SignedObject"
	public explicit_return_type ""
	nparams 3
	  param inout name "object" type class_ref 136578 // Serializable
	  param inout name "signingKey" type class_ref 767362 // PrivateKey
	  param inout name "signingEngine" type class_ref 754562 // Signature
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a SignedObject from any Serializable object.
The given object is signed with the given signing key, using the
designated signature engine.

@param object the object to be signed.
@param signingKey the private key for signing.
@param signingEngine the signature signing engine.

@exception IOException if an error occurs during serialization
@exception InvalidKeyException if the key is invalid.
@exception SignatureException if signing fails.
"
      end

      operation 8013442 "getObject"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the encapsulated object.
The encapsulated object is de-serialized before it is returned.

@return the encapsulated object.

@exception IOException if an error occurs during de-serialization
@exception ClassNotFoundException if an error occurs during
de-serialization
"
      end

      operation 8013570 "getSignature"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the signature on the signed object, in the form of a
byte array.

@return the signature. Returns a new array each time this
method is called.
"
      end

      operation 8013698 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the name of the signature algorithm.

@return the signature algorithm name.
"
      end

      operation 8013826 "verify"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "verificationKey" type class_ref 765826 // PublicKey
	  param inout name "verificationEngine" type class_ref 754562 // Signature
	nexceptions 2
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that the signature in this SignedObject is the valid
signature for the object stored inside, with the given
verification key, using the designated verification engine.

@param verificationKey the public key for verification.
@param verificationEngine the signature verification engine.

@exception SignatureException if signature verification failed.
@exception InvalidKeyException if the verification key is invalid.

@return {@code true} if the signature
is valid, {@code false} otherwise
"
      end

      operation 8013954 "sign"
	private explicit_return_type "void"
	nparams 2
	  param inout name "signingKey" type class_ref 767362 // PrivateKey
	  param inout name "signingEngine" type class_ref 754562 // Signature
	nexceptions 2
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signs the encapsulated object with the given signing key, using the
designated signature engine.

@param signingKey the private key for signing.
@param signingEngine the signature signing engine.

@exception InvalidKeyException if the key is invalid.
@exception SignatureException if signing fails.
"
      end

      operation 8014082 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "readObject is called to restore the state of the SignedObject from
a stream.
"
      end
    end

    class 1025282 "Signer"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used to represent an Identity that can also digitally
sign data.

<p>The management of a signer's private keys is an important and
sensitive issue that should be handled by subclasses as appropriate
to their intended use.

@see Identity

@author Benjamin Renaud

@deprecated This class is no longer used. Its functionality has been
replaced by {@code java.security.KeyStore}, the
{@code java.security.cert} package, and
{@code java.security.Principal}.
"
      classrelation 3366786 // <generalisation>
	relation 3366786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3366786 // <generalisation>
	  b parent class_ref 1016962 // Identity
      end

      attribute 1859458 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1763464102261361480L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3366914 // privateKey (<unidirectional association>)
	relation 3366914 --->
	  a role_name "privateKey" private
	    comment "
The signer's private key.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3366914 // privateKey (<unidirectional association>)
	  b parent class_ref 767362 // PrivateKey
      end

      operation 8014210 "Signer"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a signer. This constructor should only be used for
serialization.
"
      end

      operation 8014338 "Signer"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a signer with the specified identity name.

@param name the identity name.
"
      end

      operation 8014466 "Signer"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "scope" type class_ref 1017090 // IdentityScope
	nexceptions 1
	  exception class_ref 1017218 // KeyManagementException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a signer with the specified identity name and scope.

@param name the identity name.

@param scope the scope of the identity.

@exception KeyManagementException if there is already an identity
with the same name in the scope.
"
      end

      operation 8014594 "getPrivateKey"
	public return_type class_ref 767362 // PrivateKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this signer's private key.

<p>First, if there is a security manager, its {@code checkSecurityAccess}
method is called with {@code \"getSignerPrivateKey\"}
as its argument to see if it's ok to return the private key.

@return this signer's private key, or null if the private key has
not yet been set.

@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
returning the private key.

@see SecurityManager#checkSecurityAccess
"
      end

      operation 8014722 "setKeyPair"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pair" type class_ref 1018114 // KeyPair
	nexceptions 2
	  exception class_ref 1017474 // InvalidParameterException
	  exception class_ref 1015426 // KeyException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the key pair (public key and private key) for this signer.

<p>First, if there is a security manager, its {@code checkSecurityAccess}
method is called with {@code \"setSignerKeyPair\"}
as its argument to see if it's ok to set the key pair.

@param pair an initialized key pair.

@exception InvalidParameterException if the key pair is not
properly initialized.
@exception KeyException if the key pair cannot be set for any
other reason.
@exception  SecurityException  if a security manager exists and its
{@code checkSecurityAccess} method doesn't allow
setting the key pair.

@see SecurityManager#checkSecurityAccess
"
      end

      operation 8014850 "printKeys"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8014978 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string of information about the signer.

@return a string of information about the signer.
"
      end

      operation 8015106 "check"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "directive" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1025410 "UnresolvedPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The UnresolvedPermission class is used to hold Permissions that
were \"unresolved\" when the Policy was initialized.
An unresolved permission is one whose actual Permission class
does not yet exist at the time the Policy is initialized (see below).

<p>The policy for a Java runtime (specifying
which permissions are available for code from various principals)
is represented by a Policy object.
Whenever a Policy is initialized or refreshed, Permission objects of
appropriate classes are created for all permissions
allowed by the Policy.

<p>Many permission class types
referenced by the policy configuration are ones that exist
locally (i.e., ones that can be found on CLASSPATH).
Objects for such permissions can be instantiated during
Policy initialization. For example, it is always possible
to instantiate a java.io.FilePermission, since the
FilePermission class is found on the CLASSPATH.

<p>Other permission classes may not yet exist during Policy
initialization. For example, a referenced permission class may
be in a JAR file that will later be loaded.
For each such class, an UnresolvedPermission is instantiated.
Thus, an UnresolvedPermission is essentially a \"placeholder\"
containing information about the permission.

<p>Later, when code calls AccessController.checkPermission
on a permission of a type that was previously unresolved,
but whose class has since been loaded, previously-unresolved
permissions of that type are \"resolved\". That is,
for each such UnresolvedPermission, a new object of
the appropriate class type is instantiated, based on the
information in the UnresolvedPermission.

<p> To instantiate the new class, UnresolvedPermission assumes
the class provides a zero, one, and/or two-argument constructor.
The zero-argument constructor would be used to instantiate
a permission without a name and without actions.
A one-arg constructor is assumed to take a {@code String}
name as input, and a two-arg constructor is assumed to take a
{@code String} name and {@code String} actions
as input.  UnresolvedPermission may invoke a
constructor with a {@code null} name and/or actions.
If an appropriate permission constructor is not available,
the UnresolvedPermission is ignored and the relevant permission
will not be granted to executing code.

<p> The newly created permission object replaces the
UnresolvedPermission, which is removed.

<p> Note that the {@code getName} method for an
{@code UnresolvedPermission} returns the
{@code type} (class name) for the underlying permission
that has not been resolved.

@see java.security.Permission
@see java.security.Permissions
@see java.security.PermissionCollection
@see java.security.Policy


@author Roland Schemers
"
      classrelation 3367682 // <generalisation>
	relation 3367682 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3367682 // <generalisation>
	  b parent class_ref 257538 // Permission
      end

      classrelation 3367810 // <realization>
	relation 3367810 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3367810 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1860098 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4821973115467008846L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1860226 "debug"
	class_attribute const_attribute private explicit_type "sun.security.util.Debug"
	init_value "
        sun.security.util.Debug.getInstance
        (\"policy,access\", \"UnresolvedPermission\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3367938 // type (<unidirectional association>)
	relation 3367938 --->
	  a role_name "type" private
	    comment "
The class name of the Permission class that will be
created when this unresolved permission is resolved.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3367938 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3368066 // name (<unidirectional association>)
	relation 3368066 --->
	  a role_name "name" private
	    comment "
The permission name.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3368066 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3368194 // actions (<unidirectional association>)
	relation 3368194 --->
	  a role_name "actions" private
	    comment "
The actions of the permission.

@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3368194 // actions (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3368322 // certs (<unidirectional association>)
	relation 3368322 --->
	  a role_name "certs" multiplicity "[]" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3368322 // certs (<unidirectional association>)
	  b parent class_ref 319490 // Certificate
      end

      operation 8016642 "UnresolvedPermission"
	public explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	  param inout name "certs" type class_ref 319490 // Certificate
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new UnresolvedPermission containing the permission
information needed later to actually create a Permission of the
specified class, when the permission is resolved.

@param type the class name of the Permission class that will be
created when this unresolved permission is resolved.
@param name the name of the permission.
@param actions the actions of the permission.
@param certs the certificates the permission's class was signed with.
This is a list of certificate chains, where each chain is composed of a
signer certificate and optionally its supporting certificate chain.
Each chain is ordered bottom-to-top (i.e., with the signer certificate
first and the (root) certificate authority last). The signer
certificates are copied from the array. Subsequent changes to
the array will not affect this UnsolvedPermission.
"
      end

      classrelation 3368450 // PARAMS0 (<unidirectional association>)
	relation 3368450 --->
	  a role_name "PARAMS0" multiplicity "[]" init_value " { }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3368450 // PARAMS0 (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3368578 // PARAMS1 (<unidirectional association>)
	relation 3368578 --->
	  a role_name "PARAMS1" multiplicity "[]" init_value " { String.class }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3368578 // PARAMS1 (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3368706 // PARAMS2 (<unidirectional association>)
	relation 3368706 --->
	  a role_name "PARAMS2" multiplicity "[]" init_value " { String.class, String.class }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3368706 // PARAMS2 (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 8016770 "resolve"
	package return_type class_ref 257538 // Permission
	nparams 2
	  param inout name "p" type class_ref 257538 // Permission
	  param inout name "certs" type class_ref 319490 // Certificate
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "try and resolve this permission using the class loader of the permission
that was passed in.
"
      end

      operation 8016898 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method always returns false for unresolved permissions.
That is, an UnresolvedPermission is never considered to
imply another permission.

@param p the permission to check against.

@return false.
"
      end

      operation 8017026 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks two UnresolvedPermission objects for equality.
Checks that <i>obj</i> is an UnresolvedPermission, and has
the same type (class) name, permission name, actions, and
certificates as this object.

<p> To determine certificate equality, this method only compares
actual signer certificates.  Supporting certificate chains
are not taken into consideration by this method.

@param obj the object we are testing for equality with this object.

@return true if obj is an UnresolvedPermission, and has the same
type (class) name, permission name, actions, and
certificates as this object.
"
      end

      operation 8017154 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code value for this object.

@return a hash code value for this object.
"
      end

      operation 8017282 "getActions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the canonical string representation of the actions,
which currently is the empty string \"\", since there are no actions for
an UnresolvedPermission. That is, the actions for the
permission that will be created when this UnresolvedPermission
is resolved may be non-null, but an UnresolvedPermission
itself is never considered to have any actions.

@return the empty string \"\".
"
      end

      operation 8017410 "getUnresolvedType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the type (class name) of the underlying permission that
has not been resolved.

@return the type (class name) of the underlying permission that
 has not been resolved

@since 1.5
"
      end

      operation 8017538 "getUnresolvedName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the target name of the underlying permission that
has not been resolved.

@return the target name of the underlying permission that
         has not been resolved, or {@code null},
         if there is no target name

@since 1.5
"
      end

      operation 8017666 "getUnresolvedActions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the actions for the underlying permission that
has not been resolved.

@return the actions for the underlying permission that
         has not been resolved, or {@code null}
         if there are no actions

@since 1.5
"
      end

      operation 8017794 "getUnresolvedCerts"
	public return_type class_ref 319490 // Certificate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the signer certificates (without any supporting chain)
for the underlying permission that has not been resolved.

@return the signer certificates for the underlying permission that
has not been resolved, or null, if there are no signer certificates.
Returns a new array each time this method is called.

@since 1.5
"
      end

      operation 8017922 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this UnresolvedPermission.  The convention
is to specify the class name, the permission name, and the actions, in
the following format: '(unresolved \"ClassName\" \"name\" \"actions\")'.

@return information about this UnresolvedPermission.
"
      end

      operation 8018050 "newPermissionCollection"
	public return_type class_ref 257794 // PermissionCollection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new PermissionCollection object for storing
UnresolvedPermission  objects.
<p>
@return a new PermissionCollection object suitable for
storing UnresolvedPermissions.
"
      end

      operation 8018178 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "oos" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes this object out to a stream (i.e., serializes it).

@serialData An initial {@code String} denoting the
{@code type} is followed by a {@code String} denoting the
{@code name} is followed by a {@code String} denoting the
{@code actions} is followed by an {@code int} indicating the
number of certificates to follow
(a value of \"zero\" denotes that there are no certificates associated
with this object).
Each certificate is written out starting with a {@code String}
denoting the certificate type, followed by an
{@code int} specifying the length of the certificate encoding,
followed by the certificate encoding itself which is written out as an
array of bytes.
"
      end

      operation 8018306 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restores this object from a stream (i.e., deserializes it).
"
      end
    end

    class 1025538 "UnresolvedPermissionCollection"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A UnresolvedPermissionCollection stores a collection
of UnresolvedPermission permissions.

@see java.security.Permission
@see java.security.Permissions
@see java.security.UnresolvedPermission


@author Roland Schemers

@serial include
"
      classrelation 3368834 // <generalisation>
	relation 3368834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3368834 // <generalisation>
	  b parent class_ref 257794 // PermissionCollection
      end

      classrelation 3368962 // <realization>
	relation 3368962 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3368962 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3369090 // perms (<unidirectional association>)
	relation 3369090 --->
	  a role_name "perms" private
	    comment "
Key is permission type, value is a list of the UnresolvedPermissions
of the same type.
Not serialized; see serialization section at end of class.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, List<UnresolvedPermission>> ${name}${value};
"
	    classrelation_ref 3369090 // perms (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 8018434 "UnresolvedPermissionCollection"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an empty UnresolvedPermissionCollection object.

"
      end

      operation 8018562 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a permission to this UnresolvedPermissionCollection.
The key for the hash is the unresolved permission's type (class) name.

@param permission the Permission object to add.
"
      end

      operation 8018690 "getUnresolvedPermissions"
	package return_type class_ref 175362 // List
	nparams 1
	  param inout name "p" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<UnresolvedPermission> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "get any unresolved permissions of the same type as p,
and return the List containing them.
"
      end

      operation 8018818 "implies"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "permission" type class_ref 257538 // Permission
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "always returns false for unresolved permissions

"
      end

      operation 8018946 "elements"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Permission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of all the UnresolvedPermission lists in the
container.

@return an enumeration of all the UnresolvedPermission objects.
"
      end

      attribute 1860354 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7176153071733132400L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3369218 // serialPersistentFields (<unidirectional association>)
	relation 3369218 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " {
        new ObjectStreamField(\"permissions\", Hashtable.class),
    }" class_relation const_relation private
	    comment " Need to maintain serialization interoperability with earlier releases,
 which had the serializable field:
 private Hashtable permissions; // keyed on type

@serialField permissions java.util.Hashtable
    A table of the UnresolvedPermissions keyed on type, value is Vector
    of permissions

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3369218 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 8019074 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@serialData Default field.


Writes the contents of the perms field out as a Hashtable
in which the values are Vectors for
serialization compatibility with earlier releases.
"
      end

      operation 8019202 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads in a Hashtable in which the values are Vectors of
UnresolvedPermissions and saves them in the perms field.
"
      end
    end

    class 1025666 "URIParameter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A parameter that contains a URI pointing to data intended for a
PolicySpi or ConfigurationSpi implementation.

@since 1.6
"
      classrelation 3369346 // <realization>
	relation 3369346 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3369346 // <realization>
	  b parent class_ref 1022210 // Parameters
      end

      classrelation 3369474 // <realization>
	relation 3369474 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3369474 // <realization>
	  b parent class_ref 509186 // Parameters
      end

      classrelation 3369602 // uri (<unidirectional association>)
	relation 3369602 --->
	  a role_name "uri" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3369602 // uri (<unidirectional association>)
	  b parent class_ref 783874 // URI
      end

      operation 8019330 "URIParameter"
	public explicit_return_type ""
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a URIParameter with the URI pointing to
data intended for an SPI implementation.

@param uri the URI pointing to the data.

@exception NullPointerException if the specified URI is null.
"
      end

      operation 8019458 "getURI"
	public return_type class_ref 783874 // URI
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the URI.

@return uri the URI.
"
      end
    end
  end

  deploymentview 135426 "security"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 194178 "PrivilegedAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 250114 // PrivilegedAction
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 199810 "Guard"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 257666 // Guard
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 199938 "Permission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 257538 // Permission
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 200066 "BasicPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.Map;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Collections;
import java.io.ObjectStreamField;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 257410 // BasicPermission
	class_ref 257922 // BasicPermissionCollection
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 200194 "PermissionCollection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 257794 // PermissionCollection
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 259458 "PrivilegedExceptionAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 320514 // PrivilegedExceptionAction
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 333442 "DomainCombiner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 510338 // DomainCombiner
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 353410 "Principal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.security.auth.Subject;
${definition}"
      associated_elems
	class_ref 510594 // Principal
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 711170 "SecureClassLoader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.HashMap;
import java.util.ArrayList;
import java.net.URL;
import sun.security.util.Debug;
${definition}"
      associated_elems
	class_ref 972930 // SecureClassLoader
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 749698 "AccessControlContext"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import sun.security.util.Debug;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 129154 // AccessControlContext
      end
      comment "Copyright (c) 1997, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 749826 "AccessControlException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1012994 // AccessControlException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 749954 "AccessController"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.security.util.Debug;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
${definition}"
      associated_elems
	class_ref 1013122 // AccessController
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 750082 "AlgorithmConstraints"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1013250 // AlgorithmConstraints
      end
      comment "Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 750210 "AlgorithmParameterGenerator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.spec.AlgorithmParameterSpec;
${definition}"
      associated_elems
	class_ref 1013506 // AlgorithmParameterGenerator
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 750338 "AlgorithmParameterGeneratorSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.spec.AlgorithmParameterSpec;
${definition}"
      associated_elems
	class_ref 1013634 // AlgorithmParameterGeneratorSpi
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 750466 "AlgorithmParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.InvalidParameterSpecException;
${definition}"
      associated_elems
	class_ref 1013378 // AlgorithmParameters
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 750594 "AlgorithmParametersSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.security.spec.AlgorithmParameterSpec;
import java.security.spec.InvalidParameterSpecException;
${definition}"
      associated_elems
	class_ref 1013890 // AlgorithmParametersSpi
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 750722 "AllPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.StringTokenizer;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 1014146 // AllPermission
	class_ref 1014274 // AllPermissionCollection
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 750978 "Provider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.*;
import java.lang.ref.*;
import java.lang.reflect.*;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
${definition}"
      associated_elems
	class_ref 509570 // Provider
      end
      comment "Copyright (c) 1996, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 751106 "AuthProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.security.auth.Subject;
import javax.security.auth.login.LoginException;
import javax.security.auth.callback.CallbackHandler;
${definition}"
      associated_elems
	class_ref 1014402 // AuthProvider
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 751234 "Certificate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.Date;
${definition}"
      associated_elems
	class_ref 833154 // Certificate
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 751362 "CodeSigner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.security.cert.CertPath;
${definition}"
      associated_elems
	class_ref 1015554 // CodeSigner
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 751490 "CodeSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URL;
import java.net.SocketPermission;
import java.util.ArrayList;
import java.util.List;
import java.util.Hashtable;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.cert.*;
${definition}"
      associated_elems
	class_ref 319874 // CodeSource
      end
      comment "Copyright (c) 1997, 2017, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 751618 "CryptoPrimitive"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1015938 // CryptoPrimitive
      end
      comment "Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 751746 "GeneralSecurityException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1016066 // GeneralSecurityException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 751874 "DigestException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 752642 // DigestException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 752002 "DigestInputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.FilterInputStream;
import java.io.PrintStream;
import java.io.ByteArrayInputStream;
${definition}"
      associated_elems
	class_ref 1016194 // DigestInputStream
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 752130 "DigestOutputStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.EOFException;
import java.io.OutputStream;
import java.io.FilterOutputStream;
import java.io.PrintStream;
import java.io.ByteArrayOutputStream;
${definition}"
      associated_elems
	class_ref 1016322 // DigestOutputStream
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 752258 "DomainLoadStoreParameter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URI;
import java.util.*;
import static java.security.KeyStore.*;
${definition}"
      associated_elems
	class_ref 1016450 // DomainLoadStoreParameter
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 752386 "GuardedObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1016834 // GuardedObject
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 752514 "Identity"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.*;
${definition}"
      associated_elems
	class_ref 1016962 // Identity
      end
      comment "Copyright (c) 1996, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 752642 "IdentityScope"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Enumeration;
import java.util.Properties;
${definition}"
      associated_elems
	class_ref 1017090 // IdentityScope
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 752770 "InvalidAlgorithmParameterException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1013762 // InvalidAlgorithmParameterException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 752898 "KeyException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1015426 // KeyException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 753026 "InvalidKeyException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1017346 // InvalidKeyException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 753154 "InvalidParameterException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1017474 // InvalidParameterException
      end
      comment "Copyright (c) 1996, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 753282 "Key"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 753026 // Key
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 753410 "KeyFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.security.Provider.Service;
import java.security.spec.KeySpec;
import java.security.spec.InvalidKeySpecException;
import sun.security.util.Debug;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_elems
	class_ref 1017602 // KeyFactory
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 753538 "KeyFactorySpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.spec.KeySpec;
import java.security.spec.InvalidKeySpecException;
${definition}"
      associated_elems
	class_ref 1017730 // KeyFactorySpi
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 753666 "KeyManagementException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1017218 // KeyManagementException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 753794 "KeyPair"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 1018114 // KeyPair
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 753922 "KeyPairGeneratorSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.spec.AlgorithmParameterSpec;
${definition}"
      associated_elems
	class_ref 1018370 // KeyPairGeneratorSpi
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 754050 "KeyPairGenerator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.security.spec.AlgorithmParameterSpec;
import java.security.Provider.Service;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
import sun.security.util.Debug;
${definition}"
      associated_elems
	class_ref 1018242 // KeyPairGenerator
      end
      comment "Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 754178 "KeyRep"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.Locale;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.spec.InvalidKeySpecException;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.SecretKeySpec;
${definition}"
      associated_elems
	class_ref 1018626 // KeyRep
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 754434 "KeyStore"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.net.URI;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.security.cert.CertificateException;
import java.security.spec.AlgorithmParameterSpec;
import java.util.*;
import javax.crypto.SecretKey;
import javax.security.auth.DestroyFailedException;
import javax.security.auth.callback.*;
import sun.security.util.Debug;
${definition}"
      associated_elems
	class_ref 769922 // KeyStore
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 754562 "KeyStoreException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 770050 // KeyStoreException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 754690 "KeyStoreSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.*;
import java.security.KeyStore.*;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import javax.crypto.SecretKey;
import javax.security.auth.callback.*;
${definition}"
      associated_elems
	class_ref 1018882 // KeyStoreSpi
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 754818 "MessageDigestSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import sun.security.jca.JCAUtil;
${definition}"
      associated_elems
	class_ref 1020930 // MessageDigestSpi
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 754946 "MessageDigest"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.io.IOException;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.nio.ByteBuffer;
import sun.security.util.Debug;
${definition}"
      associated_elems
	class_ref 752386 // MessageDigest
      end
      comment "Copyright (c) 1996, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 755074 "NoSuchAlgorithmException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 509314 // NoSuchAlgorithmException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 755202 "NoSuchProviderException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 509442 // NoSuchProviderException
      end
      comment "Copyright (c) 1996, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 755330 "Permissions"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.NoSuchElementException;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.Iterator;
import java.util.Collections;
import java.io.Serializable;
import java.io.ObjectStreamField;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1021186 // Permissions
	class_ref 1021314 // PermissionsEnumerator
	class_ref 1021442 // PermissionsHash
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 755458 "PKCS12Attribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.regex.Pattern;
import sun.security.util.*;
${definition}"
      associated_elems
	class_ref 1021570 // PKCS12Attribute
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 755586 "Policy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
import java.util.WeakHashMap;
import java.util.concurrent.atomic.AtomicReference;
import sun.security.jca.GetInstance;
import sun.security.util.Debug;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 1021698 // Policy
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 755714 "PolicySpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1022466 // PolicySpi
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 755842 "PrivateKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 767362 // PrivateKey
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 755970 "PrivilegedActionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 189826 // PrivilegedActionException
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 756098 "ProtectionDomain"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.SoftReference;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import sun.misc.JavaSecurityProtectionDomainAccess;
import sun.security.util.Debug;
import sun.security.util.SecurityConstants;
import sun.misc.JavaSecurityAccess;
import sun.misc.SharedSecrets;
import static sun.misc.JavaSecurityProtectionDomainAccess.ProtectionDomainCache;
${definition}"
      associated_elems
	class_ref 319618 // ProtectionDomain
      end
      comment "Copyright (c) 1997, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 756226 "ProviderException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1023362 // ProviderException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 756354 "PublicKey"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 765826 // PublicKey
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 756610 "SecureRandom"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.regex.*;
import java.security.Provider.Service;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
import sun.security.util.Debug;
${definition}"
      associated_elems
	class_ref 753154 // SecureRandom
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 756738 "SecureRandomSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1024130 // SecureRandomSpi
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 756866 "Security"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.io.*;
import java.net.URL;
import sun.security.util.Debug;
import sun.security.util.PropertyExpander;
import sun.security.jca.*;
${definition}"
      associated_elems
	class_ref 1024386 // Security
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 756994 "SecurityPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.StringTokenizer;
${definition}"
      associated_elems
	class_ref 781442 // SecurityPermission
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 757122 "SignatureSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.spec.AlgorithmParameterSpec;
import java.util.*;
import java.io.*;
import java.nio.ByteBuffer;
import sun.security.jca.JCAUtil;
${definition}"
      associated_elems
	class_ref 1024642 // SignatureSpi
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 757250 "Signature"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.spec.AlgorithmParameterSpec;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.io.*;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.nio.ByteBuffer;
import java.security.Provider.Service;
import javax.crypto.Cipher;
import javax.crypto.CipherSpi;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.BadPaddingException;
import javax.crypto.NoSuchPaddingException;
import sun.security.util.Debug;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_elems
	class_ref 754562 // Signature
      end
      comment "Copyright (c) 1996, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 757378 "SignatureException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1024770 // SignatureException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 757506 "SignedObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 1025154 // SignedObject
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 757634 "Signer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
${definition}"
      associated_elems
	class_ref 1025282 // Signer
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 757762 "Timestamp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.security.cert.Certificate;
import java.security.cert.CertPath;
import java.security.cert.X509Extension;
import java.util.Date;
import java.util.List;
${definition}"
      associated_elems
	class_ref 1015682 // Timestamp
      end
      comment "Copyright (c) 2003, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 757890 "UnrecoverableEntryException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1020418 // UnrecoverableEntryException
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 758018 "UnrecoverableKeyException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1020290 // UnrecoverableKeyException
      end
      comment "Copyright (c) 1997, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 758146 "UnresolvedPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.lang.reflect.*;
import java.security.cert.*;
${definition}"
      associated_elems
	class_ref 1025410 // UnresolvedPermission
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 758274 "UnresolvedPermissionCollection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.io.ObjectStreamField;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1025538 // UnresolvedPermissionCollection
      end
      comment "Copyright (c) 1997, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 758402 "URIParameter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1025666 // URIParameter
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 148226 // cert

  package_ref 160258 // acl

  package_ref 173314 // spec

  package_ref 183042 // interfaces
end
