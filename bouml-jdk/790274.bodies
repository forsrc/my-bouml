class ToHTMLSAXHandler
!!!5584770.java!!!	getOutputFormat() : Properties
        return null;
!!!5584898.java!!!	getOutputStream() : OutputStream
        return null;
!!!5585026.java!!!	getWriter() : Writer
        return null;
!!!5585282.java!!!	serialize(inout node : Node) : void
        return;
!!!5585410.java!!!	setEscaping(inout escape : boolean) : boolean
        boolean oldEscapeSetting = m_escapeSetting;
        m_escapeSetting = escape;

        if (escape) {
            processingInstruction(Result.PI_ENABLE_OUTPUT_ESCAPING, "");
        } else {
            processingInstruction(Result.PI_DISABLE_OUTPUT_ESCAPING, "");
        }

        return oldEscapeSetting;
!!!5586178.java!!!	elementDecl(inout name : String, inout model : String) : void
        return;
!!!5586562.java!!!	endElement(inout uri : String, inout localName : String, inout qName : String) : void
        flushPending();
        m_saxHandler.endElement(uri, localName, qName);

        // time to fire off endElement event
        if (m_tracer != null)
            super.fireEndElem(qName);
!!!5586946.java!!!	processingInstruction(inout target : String, inout data : String) : void
        flushPending();
        m_saxHandler.processingInstruction(target,data);

                // time to fire off processing instruction event

        if (m_tracer != null)
                    super.fireEscapingEvent(target,data);
!!!5587074.java!!!	setDocumentLocator(inout arg0 : Locator) : void
        super.setDocumentLocator(arg0);
!!!5587330.java!!!	startElement(inout namespaceURI : String, inout localName : String, inout qName : String, inout atts : Attributes) : void
        flushPending();
        super.startElement(namespaceURI, localName, qName, atts);
        m_saxHandler.startElement(namespaceURI, localName, qName, atts);
        m_elemContext.m_startTagOpen = false;
!!!5587458.java!!!	comment(inout ch : char [[]], in start : int, in length : int) : void
        flushPending();
        if (m_lexHandler != null)
            m_lexHandler.comment(ch, start, length);

        // time to fire off comment event
        if (m_tracer != null)
            super.fireCommentEvent(ch, start, length);
        return;
!!!5587586.java!!!	endCDATA() : void
        return;
!!!5588098.java!!!	endDocument() : void
        flushPending();

        // Close output document
        m_saxHandler.endDocument();

        if (m_tracer != null)
            super.fireEndDoc();
!!!5588226.java!!!	closeStartTag() : void

        m_elemContext.m_startTagOpen = false;

        // Now is time to send the startElement event
        m_saxHandler.startElement(
            EMPTYSTRING,
            m_elemContext.m_elementName,
            m_elemContext.m_elementName,
            m_attributes);
        m_attributes.clear();

!!!5588354.java!!!	close() : void
        return;
!!!5588482.java!!!	characters(in chars : String) : void
        final int length = chars.length();
        if (length > m_charsBuff.length)
        {
            m_charsBuff = new char[length * 2 + 1];
        }
        chars.getChars(0, length, m_charsBuff, 0);
        this.characters(m_charsBuff, 0, length);
!!!5588610.java!!!	ToHTMLSAXHandler(inout handler : ContentHandler, inout encoding : String)
        super(handler,encoding);
!!!5588738.java!!!	ToHTMLSAXHandler(inout handler : ContentHandler, inout lex : LexicalHandler, inout encoding : String)
        super(handler,lex,encoding);
!!!5588866.java!!!	startElement(inout elementNamespaceURI : String, inout elementLocalName : String, inout elementName : String) : void

        super.startElement(elementNamespaceURI, elementLocalName, elementName);

        flushPending();

        // Handle document type declaration (for first element only)
        if (!m_dtdHandled)
        {
            String doctypeSystem = getDoctypeSystem();
            String doctypePublic = getDoctypePublic();
            if ((doctypeSystem != null) || (doctypePublic != null)) {
                if (m_lexHandler != null)
                    m_lexHandler.startDTD(
                        elementName,
                        doctypePublic,
                        doctypeSystem);
            }
                        m_dtdHandled = true;
        }
        m_elemContext = m_elemContext.push(elementNamespaceURI, elementLocalName, elementName);
!!!5588994.java!!!	startElement(inout elementName : String) : void
        this.startElement(null,null, elementName);
!!!5589122.java!!!	endElement(inout elementName : String) : void
        flushPending();
        m_saxHandler.endElement(EMPTYSTRING, elementName, elementName);

        // time to fire off endElement event
                if (m_tracer != null)
            super.fireEndElem(elementName);
!!!5589250.java!!!	characters(inout ch : char [[]], in off : int, in len : int) : void

        flushPending();
        m_saxHandler.characters(ch, off, len);

        // time to fire off characters event
                if (m_tracer != null)
            super.fireCharEvent(ch, off, len);
!!!5589378.java!!!	flushPending() : void
                if (m_needToCallStartDocument)
                {
                        startDocumentInternal();
                        m_needToCallStartDocument = false;
                }
        // Close any open element
        if (m_elemContext.m_startTagOpen)
        {
            closeStartTag();
            m_elemContext.m_startTagOpen = false;
        }
!!!5589506.java!!!	startPrefixMapping(inout prefix : String, inout uri : String, inout shouldFlush : boolean) : boolean
        // no namespace support for HTML
        if (shouldFlush)
            flushPending();
        m_saxHandler.startPrefixMapping(prefix,uri);
        return false;
!!!5589634.java!!!	startPrefixMapping(inout prefix : String, inout uri : String) : void
        startPrefixMapping(prefix,uri,true);
!!!5589762.java!!!	namespaceAfterStartElement(in prefix : String, in uri : String) : void
        // hack for XSLTC with finding URI for default namespace
        if (m_elemContext.m_elementURI == null)
        {
            String prefix1 = getPrefixPart(m_elemContext.m_elementName);
            if (prefix1 == null && EMPTYSTRING.equals(prefix))
            {
                // the elements URI is not known yet, and it
                // doesn't have a prefix, and we are currently
                // setting the uri for prefix "", so we have
                // the uri for the element... lets remember it
                m_elemContext.m_elementURI = uri;
            }
        }
        startPrefixMapping(prefix,uri,false);
!!!5589890.java!!!	reset() : boolean
        boolean wasReset = false;
        if (super.reset())
        {
            resetToHTMLSAXHandler();
            wasReset = true;
        }
        return wasReset;
!!!5590018.java!!!	resetToHTMLSAXHandler() : void
        this.m_escapeSetting = true;
