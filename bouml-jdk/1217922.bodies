class StartTlsRequest
!!!10080514.java!!!	getID() : String
        return OID;
!!!10080642.java!!!	getEncodedValue() : byte
        return null;
!!!10080770.java!!!	createExtendedResponse(inout id : String, inout berValue : byte [[]], in offset : int, in length : int) : ExtendedResponse

        // Confirm that the object identifier is correct
        if ((id != null) && (!id.equals(OID))) {
            throw new ConfigurationException(
                "Start TLS received the following response instead of " +
                OID + ": " + id);
        }

        StartTlsResponse resp = null;

        ServiceLoader<StartTlsResponse> sl = ServiceLoader.load(
                StartTlsResponse.class, getContextClassLoader());
        Iterator<StartTlsResponse> iter = sl.iterator();

        while (resp == null && privilegedHasNext(iter)) {
            resp = iter.next();
        }
        if (resp != null) {
            return resp;
        }
        try {
            VersionHelper helper = VersionHelper.getVersionHelper();
            Class<?> clas = helper.loadClass(
                "com.sun.jndi.ldap.ext.StartTlsResponseImpl");

            resp = (StartTlsResponse) clas.newInstance();

        } catch (IllegalAccessException e) {
            throw wrapException(e);

        } catch (InstantiationException e) {
            throw wrapException(e);

        } catch (ClassNotFoundException e) {
            throw wrapException(e);
        }

        return resp;
!!!10080898.java!!!	wrapException(inout e : Exception) : ConfigurationException
        ConfigurationException ce = new ConfigurationException(
            "Cannot load implementation of javax.naming.ldap.StartTlsResponse");

        ce.setRootCause(e);
        return ce;
!!!10081026.java!!!	getContextClassLoader() : ClassLoader
        return AccessController.doPrivileged(
            new PrivilegedAction<ClassLoader>() {
                public ClassLoader run() {
                    return Thread.currentThread().getContextClassLoader();
                }
            }
        );
!!!10081154.java!!!	privilegedHasNext(in iter : Iterator) : boolean
        Boolean answer = AccessController.doPrivileged(
            new PrivilegedAction<Boolean>() {
            public Boolean run() {
                return Boolean.valueOf(iter.hasNext());
            }
        });
        return answer.booleanValue();
