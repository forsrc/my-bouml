class DSAKeyValue
!!!5404034.java!!!	DSAKeyValue(inout element : Element, inout baseURI : String)
        super(element, baseURI);
!!!5404162.java!!!	DSAKeyValue(inout doc : Document, inout P : BigInteger, inout Q : BigInteger, inout G : BigInteger, inout Y : BigInteger)
        super(doc);

        XMLUtils.addReturnToElement(this.constructionElement);
        this.addBigIntegerElement(P, Constants._TAG_P);
        this.addBigIntegerElement(Q, Constants._TAG_Q);
        this.addBigIntegerElement(G, Constants._TAG_G);
        this.addBigIntegerElement(Y, Constants._TAG_Y);
!!!5404290.java!!!	DSAKeyValue(inout doc : Document, inout key : Key)
        super(doc);

        XMLUtils.addReturnToElement(this.constructionElement);

        if (key instanceof java.security.interfaces.DSAPublicKey) {
            this.addBigIntegerElement(((DSAPublicKey) key).getParams().getP(), Constants._TAG_P);
            this.addBigIntegerElement(((DSAPublicKey) key).getParams().getQ(), Constants._TAG_Q);
            this.addBigIntegerElement(((DSAPublicKey) key).getParams().getG(), Constants._TAG_G);
            this.addBigIntegerElement(((DSAPublicKey) key).getY(), Constants._TAG_Y);
        } else {
            Object exArgs[] = { Constants._TAG_DSAKEYVALUE, key.getClass().getName() };

            throw new IllegalArgumentException(I18n.translate("KeyValue.IllegalArgument", exArgs));
        }
!!!5404418.java!!!	getPublicKey() : PublicKey
        try {
            DSAPublicKeySpec pkspec =
                new DSAPublicKeySpec(
                    this.getBigIntegerFromChildElement(
                        Constants._TAG_Y, Constants.SignatureSpecNS
                    ),
                    this.getBigIntegerFromChildElement(
                        Constants._TAG_P, Constants.SignatureSpecNS
                    ),
                    this.getBigIntegerFromChildElement(
                        Constants._TAG_Q, Constants.SignatureSpecNS
                    ),
                    this.getBigIntegerFromChildElement(
                        Constants._TAG_G, Constants.SignatureSpecNS
                    )
                );
            KeyFactory dsaFactory = KeyFactory.getInstance("DSA");
            PublicKey pk = dsaFactory.generatePublic(pkspec);

            return pk;
        } catch (NoSuchAlgorithmException ex) {
            throw new XMLSecurityException("empty", ex);
        } catch (InvalidKeySpecException ex) {
            throw new XMLSecurityException("empty", ex);
        }
!!!5404546.java!!!	getBaseLocalName() : String
        return Constants._TAG_DSAKEYVALUE;
