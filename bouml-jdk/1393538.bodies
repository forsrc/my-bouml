class ParagraphView
!!!11790978.java!!!	ParagraphView(inout elem : Element)
        super(elem);
!!!11791106.java!!!	setParent(inout parent : View) : void
        super.setParent(parent);
        if (parent != null) {
            setPropertiesFromAttributes();
        }
!!!11791234.java!!!	getAttributes() : AttributeSet
        if (attr == null) {
            StyleSheet sheet = getStyleSheet();
            attr = sheet.getViewAttributes(this);
        }
        return attr;
!!!11791362.java!!!	setPropertiesFromAttributes() : void
        StyleSheet sheet = getStyleSheet();
        attr = sheet.getViewAttributes(this);
        painter = sheet.getBoxPainter(attr);
        if (attr != null) {
            super.setPropertiesFromAttributes();
            setInsets((short) painter.getInset(TOP, this),
                      (short) painter.getInset(LEFT, this),
                      (short) painter.getInset(BOTTOM, this),
                      (short) painter.getInset(RIGHT, this));
            Object o = attr.getAttribute(CSS.Attribute.TEXT_ALIGN);
            if (o != null) {
                // set horizontal alignment
                String ta = o.toString();
                if (ta.equals("left")) {
                    setJustification(StyleConstants.ALIGN_LEFT);
                } else if (ta.equals("center")) {
                    setJustification(StyleConstants.ALIGN_CENTER);
                } else if (ta.equals("right")) {
                    setJustification(StyleConstants.ALIGN_RIGHT);
                } else if (ta.equals("justify")) {
                    setJustification(StyleConstants.ALIGN_JUSTIFIED);
                }
            }
            // Get the width/height
            cssWidth = (CSS.LengthValue)attr.getAttribute(
                                        CSS.Attribute.WIDTH);
            cssHeight = (CSS.LengthValue)attr.getAttribute(
                                         CSS.Attribute.HEIGHT);
        }
!!!11791490.java!!!	getStyleSheet() : StyleSheet
        HTMLDocument doc = (HTMLDocument) getDocument();
        return doc.getStyleSheet();
!!!11791618.java!!!	calculateMinorAxisRequirements(in axis : int, inout r : SizeRequirements) : SizeRequirements
        r = super.calculateMinorAxisRequirements(axis, r);

        if (BlockView.spanSetFromAttributes(axis, r, cssWidth, cssHeight)) {
            // Offset by the margins so that pref/min/max return the
            // right value.
            int margin = (axis == X_AXIS) ? getLeftInset() + getRightInset() :
                                            getTopInset() + getBottomInset();
            r.minimum -= margin;
            r.preferred -= margin;
            r.maximum -= margin;
        }
        return r;
!!!11791746.java!!!	isVisible() : boolean

        int n = getLayoutViewCount() - 1;
        for (int i = 0; i < n; i++) {
            View v = getLayoutView(i);
            if (v.isVisible()) {
                return true;
            }
        }
        if (n > 0) {
            View v = getLayoutView(n);
            if ((v.getEndOffset() - v.getStartOffset()) == 1) {
                return false;
            }
        }
        // If it's the last paragraph and not editable, it shouldn't
        // be visible.
        if (getStartOffset() == getDocument().getLength()) {
            boolean editable = false;
            Component c = getContainer();
            if (c instanceof JTextComponent) {
                editable = ((JTextComponent)c).isEditable();
            }
            if (!editable) {
                return false;
            }
        }
        return true;
!!!11791874.java!!!	paint(inout g : Graphics, inout a : Shape) : void
        if (a == null) {
            return;
        }

        Rectangle r;
        if (a instanceof Rectangle) {
            r = (Rectangle) a;
        } else {
            r = a.getBounds();
        }
        painter.paint(g, r.x, r.y, r.width, r.height, this);
        super.paint(g, a);
!!!11792002.java!!!	getPreferredSpan(in axis : int) : float
        if (!isVisible()) {
            return 0;
        }
        return super.getPreferredSpan(axis);
!!!11792130.java!!!	getMinimumSpan(in axis : int) : float
        if (!isVisible()) {
            return 0;
        }
        return super.getMinimumSpan(axis);
!!!11792258.java!!!	getMaximumSpan(in axis : int) : float
        if (!isVisible()) {
            return 0;
        }
        return super.getMaximumSpan(axis);
