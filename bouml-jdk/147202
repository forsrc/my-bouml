format 222
"imageio" // jdk1.8::javax::imageio
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/imageio/"
  java_package "javax.imageio"
  classview 143618 "imageio"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 312706 "ImageReader"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract superclass for parsing and decoding of images.  This
class must be subclassed by classes that read in images in the
context of the Java Image I/O framework.

<p> <code>ImageReader</code> objects are normally instantiated by
the service provider interface (SPI) class for the specific format.
Service provider classes (e.g., instances of
<code>ImageReaderSpi</code>) are registered with the
<code>IIORegistry</code>, which uses them for format recognition
and presentation of available format readers and writers.

<p> When an input source is set (using the <code>setInput</code>
method), it may be marked as \"seek forward only\".  This setting
means that images contained within the input source will only be
read in order, possibly allowing the reader to avoid caching
portions of the input containing data associated with images that
have been read previously.

@see ImageWriter
@see javax.imageio.spi.IIORegistry
@see javax.imageio.spi.ImageReaderSpi

"
      classrelation 522882 // originatingProvider (<unidirectional association>)
	relation 522882 --->
	  a role_name "originatingProvider" protected
	    comment "
The <code>ImageReaderSpi</code> that instantiated this object,
or <code>null</code> if its identity is not known or none
exists.  By default it is initialized to <code>null</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 522882 // originatingProvider (<unidirectional association>)
	  b parent class_ref 312834 // ImageReaderSpi
      end

      classrelation 523010 // input (<unidirectional association>)
	relation 523010 --->
	  a role_name "input" init_value " null" protected
	    comment "
The <code>ImageInputStream</code> or other
<code>Object</code> by <code>setInput</code> and retrieved
by <code>getInput</code>.  By default it is initialized to
<code>null</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 523010 // input (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 353282 "seekForwardOnly"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<code>true</code> if the current input source has been marked
as allowing only forward seeking by <code>setInput</code>.  By
default, the value is <code>false</code>.

@see #minIndex
@see #setInput

"
      end

      attribute 353410 "ignoreMetadata"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<code>true</code> if the current input source has been marked
as allowing metadata to be ignored by <code>setInput</code>.
By default, the value is <code>false</code>.

@see #setInput

"
      end

      attribute 353538 "minIndex"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The smallest valid index for reading, initially 0.  When
<code>seekForwardOnly</code> is <code>true</code>, various methods
may throw an <code>IndexOutOfBoundsException</code> on an
attempt to access data associate with an image having a lower
index.

@see #seekForwardOnly
@see #setInput

"
      end

      classrelation 523138 // availableLocales (<unidirectional association>)
	relation 523138 --->
	  a role_name "availableLocales" multiplicity "[]" init_value " null" protected
	    comment "
An array of <code>Locale</code>s which may be used to localize
warning messages, or <code>null</code> if localization is not
supported.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 523138 // availableLocales (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 523266 // locale (<unidirectional association>)
	relation 523266 --->
	  a role_name "locale" init_value " null" protected
	    comment "
The current <code>Locale</code> to be used for localization, or
<code>null</code> if none has been set.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 523266 // locale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 523394 // warningListeners (<unidirectional association>)
	relation 523394 --->
	  a role_name "warningListeners" init_value " null" protected
	    comment "
A <code>List</code> of currently registered
<code>IIOReadWarningListener</code>s, initialized by default to
<code>null</code>, which is synonymous with an empty
<code>List</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<IIOReadWarningListener> ${name}${value};
"
	    classrelation_ref 523394 // warningListeners (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 523522 // warningLocales (<unidirectional association>)
	relation 523522 --->
	  a role_name "warningLocales" init_value " null" protected
	    comment "
A <code>List</code> of the <code>Locale</code>s associated with
each currently registered <code>IIOReadWarningListener</code>,
initialized by default to <code>null</code>, which is
synonymous with an empty <code>List</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale> ${name}${value};
"
	    classrelation_ref 523522 // warningLocales (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 523650 // progressListeners (<unidirectional association>)
	relation 523650 --->
	  a role_name "progressListeners" init_value " null" protected
	    comment "
A <code>List</code> of currently registered
<code>IIOReadProgressListener</code>s, initialized by default
to <code>null</code>, which is synonymous with an empty
<code>List</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<IIOReadProgressListener> ${name}${value};
"
	    classrelation_ref 523650 // progressListeners (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 523778 // updateListeners (<unidirectional association>)
	relation 523778 --->
	  a role_name "updateListeners" init_value " null" protected
	    comment "
A <code>List</code> of currently registered
<code>IIOReadUpdateListener</code>s, initialized by default to
<code>null</code>, which is synonymous with an empty
<code>List</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<IIOReadUpdateListener> ${name}${value};
"
	    classrelation_ref 523778 // updateListeners (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      attribute 353666 "abortFlag"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If <code>true</code>, the current read operation should be
aborted.

"
      end

      operation 1666946 "ImageReader"
	protected explicit_return_type ""
	nparams 1
	  param inout name "originatingProvider" type class_ref 312834 // ImageReaderSpi
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageReader</code> and sets its
<code>originatingProvider</code> field to the supplied value.

<p> Subclasses that make use of extensions should provide a
constructor with signature <code>(ImageReaderSpi,
Object)</code> in order to retrieve the extension object.  If
the extension object is unsuitable, an
<code>IllegalArgumentException</code> should be thrown.

@param originatingProvider the <code>ImageReaderSpi</code> that is
invoking this constructor, or <code>null</code>.
"
      end

      operation 1667074 "getFormatName"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>String</code> identifying the format of the
input source.

<p> The default implementation returns
<code>originatingProvider.getFormatNames()[0]</code>.
Implementations that may not have an originating service
provider, or which desire a different naming policy should
override this method.

@exception IOException if an error occurs reading the
information from the input source.

@return the format name, as a <code>String</code>.
"
      end

      operation 1667202 "getOriginatingProvider"
	public return_type class_ref 312834 // ImageReaderSpi
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ImageReaderSpi</code> that was passed in on
the constructor.  Note that this value may be <code>null</code>.

@return an <code>ImageReaderSpi</code>, or <code>null</code>.

@see ImageReaderSpi
"
      end

      operation 1667330 "setInput"
	public explicit_return_type "void"
	nparams 3
	  param inout name "input" type class_ref 129538 // Object
	  param inout name "seekForwardOnly" explicit_type "boolean"
	  param inout name "ignoreMetadata" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the input source to use to the given
<code>ImageInputStream</code> or other <code>Object</code>.
The input source must be set before any of the query or read
methods are used.  If <code>input</code> is <code>null</code>,
any currently set input source will be removed.  In any case,
the value of <code>minIndex</code> will be initialized to 0.

<p> The <code>seekForwardOnly</code> parameter controls whether
the value returned by <code>getMinIndex</code> will be
increased as each image (or thumbnail, or image metadata) is
read.  If <code>seekForwardOnly</code> is true, then a call to
<code>read(index)</code> will throw an
<code>IndexOutOfBoundsException</code> if {@code index < this.minIndex};
otherwise, the value of
<code>minIndex</code> will be set to <code>index</code>.  If
<code>seekForwardOnly</code> is <code>false</code>, the value of
<code>minIndex</code> will remain 0 regardless of any read
operations.

<p> The <code>ignoreMetadata</code> parameter, if set to
<code>true</code>, allows the reader to disregard any metadata
encountered during the read.  Subsequent calls to the
<code>getStreamMetadata</code> and
<code>getImageMetadata</code> methods may return
<code>null</code>, and an <code>IIOImage</code> returned from
<code>readAll</code> may return <code>null</code> from their
<code>getMetadata</code> method.  Setting this parameter may
allow the reader to work more efficiently.  The reader may
choose to disregard this setting and return metadata normally.

<p> Subclasses should take care to remove any cached
information based on the previous stream, such as header
information or partially decoded image data.

<p> Use of a general <code>Object</code> other than an
<code>ImageInputStream</code> is intended for readers that
interact directly with a capture device or imaging protocol.
The set of legal classes is advertised by the reader's service
provider's <code>getInputTypes</code> method; most readers
will return a single-element array containing only
<code>ImageInputStream.class</code> to indicate that they
accept only an <code>ImageInputStream</code>.

<p> The default implementation checks the <code>input</code>
argument against the list returned by
<code>originatingProvider.getInputTypes()</code> and fails
if the argument is not an instance of one of the classes
in the list.  If the originating provider is set to
<code>null</code>, the input is accepted only if it is an
<code>ImageInputStream</code>.

@param input the <code>ImageInputStream</code> or other
<code>Object</code> to use for future decoding.
@param seekForwardOnly if <code>true</code>, images and metadata
may only be read in ascending order from this input source.
@param ignoreMetadata if <code>true</code>, metadata
may be ignored during reads.

@exception IllegalArgumentException if <code>input</code> is
not an instance of one of the classes returned by the
originating service provider's <code>getInputTypes</code>
method, or is not an <code>ImageInputStream</code>.

@see ImageInputStream
@see #getInput
@see javax.imageio.spi.ImageReaderSpi#getInputTypes
"
      end

      operation 1667458 "setInput"
	public explicit_return_type "void"
	nparams 2
	  param inout name "input" type class_ref 129538 // Object
	  param inout name "seekForwardOnly" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the input source to use to the given
<code>ImageInputStream</code> or other <code>Object</code>.
The input source must be set before any of the query or read
methods are used.  If <code>input</code> is <code>null</code>,
any currently set input source will be removed.  In any case,
the value of <code>minIndex</code> will be initialized to 0.

<p> The <code>seekForwardOnly</code> parameter controls whether
the value returned by <code>getMinIndex</code> will be
increased as each image (or thumbnail, or image metadata) is
read.  If <code>seekForwardOnly</code> is true, then a call to
<code>read(index)</code> will throw an
<code>IndexOutOfBoundsException</code> if {@code index < this.minIndex};
otherwise, the value of
<code>minIndex</code> will be set to <code>index</code>.  If
<code>seekForwardOnly</code> is <code>false</code>, the value of
<code>minIndex</code> will remain 0 regardless of any read
operations.

<p> This method is equivalent to <code>setInput(input,
seekForwardOnly, false)</code>.

@param input the <code>ImageInputStream</code> or other
<code>Object</code> to use for future decoding.
@param seekForwardOnly if <code>true</code>, images and metadata
may only be read in ascending order from this input source.

@exception IllegalArgumentException if <code>input</code> is
not an instance of one of the classes returned by the
originating service provider's <code>getInputTypes</code>
method, or is not an <code>ImageInputStream</code>.

@see #getInput
"
      end

      operation 1667586 "setInput"
	public explicit_return_type "void"
	nparams 1
	  param inout name "input" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the input source to use to the given
<code>ImageInputStream</code> or other <code>Object</code>.
The input source must be set before any of the query or read
methods are used.  If <code>input</code> is <code>null</code>,
any currently set input source will be removed.  In any case,
the value of <code>minIndex</code> will be initialized to 0.

<p> This method is equivalent to <code>setInput(input, false,
false)</code>.

@param input the <code>ImageInputStream</code> or other
<code>Object</code> to use for future decoding.

@exception IllegalArgumentException if <code>input</code> is
not an instance of one of the classes returned by the
originating service provider's <code>getInputTypes</code>
method, or is not an <code>ImageInputStream</code>.

@see #getInput
"
      end

      operation 1667714 "getInput"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ImageInputStream</code> or other
<code>Object</code> previously set as the input source.  If the
input source has not been set, <code>null</code> is returned.

@return the <code>Object</code> that will be used for future
decoding, or <code>null</code>.

@see ImageInputStream
@see #setInput
"
      end

      operation 1667842 "isSeekForwardOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the current input source has been
marked as seek forward only by passing <code>true</code> as the
<code>seekForwardOnly</code> argument to the
<code>setInput</code> method.

@return <code>true</code> if the input source is seek forward
only.

@see #setInput
"
      end

      operation 1667970 "isIgnoringMetadata"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the current input source has been
marked as allowing metadata to be ignored by passing
<code>true</code> as the <code>ignoreMetadata</code> argument
to the <code>setInput</code> method.

@return <code>true</code> if the metadata may be ignored.

@see #setInput
"
      end

      operation 1668098 "getMinIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lowest valid index for reading an image, thumbnail,
or image metadata.  If <code>seekForwardOnly()</code> is
<code>false</code>, this value will typically remain 0,
indicating that random access is possible.  Otherwise, it will
contain the value of the most recently accessed index, and
increase in a monotonic fashion.

@return the minimum legal index for reading.
"
      end

      operation 1668226 "getAvailableLocales"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Localization

Returns an array of <code>Locale</code>s that may be used to
localize warning listeners and compression settings.  A return
value of <code>null</code> indicates that localization is not
supported.

<p> The default implementation returns a clone of the
<code>availableLocales</code> instance variable if it is
non-<code>null</code>, or else returns <code>null</code>.

@return an array of <code>Locale</code>s that may be used as
arguments to <code>setLocale</code>, or <code>null</code>.
"
      end

      operation 1668354 "setLocale"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current <code>Locale</code> of this
<code>ImageReader</code> to the given value.  A value of
<code>null</code> removes any previous setting, and indicates
that the reader should localize as it sees fit.

@param locale the desired <code>Locale</code>, or
<code>null</code>.

@exception IllegalArgumentException if <code>locale</code> is
non-<code>null</code> but is not one of the values returned by
<code>getAvailableLocales</code>.

@see #getLocale
"
      end

      operation 1668482 "getLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currently set <code>Locale</code>, or
<code>null</code> if none has been set.

@return the current <code>Locale</code>, or <code>null</code>.

@see #setLocale
"
      end

      operation 1668610 "getNumImages"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "allowSearch" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Image queries

Returns the number of images, not including thumbnails, available
from the current input source.

<p> Note that some image formats (such as animated GIF) do not
specify how many images are present in the stream.  Thus
determining the number of images will require the entire stream
to be scanned and may require memory for buffering.  If images
are to be processed in order, it may be more efficient to
simply call <code>read</code> with increasing indices until an
<code>IndexOutOfBoundsException</code> is thrown to indicate
that no more images are available.  The
<code>allowSearch</code> parameter may be set to
<code>false</code> to indicate that an exhaustive search is not
desired; the return value will be <code>-1</code> to indicate
that a search is necessary.  If the input has been specified
with <code>seekForwardOnly</code> set to <code>true</code>,
this method throws an <code>IllegalStateException</code> if
<code>allowSearch</code> is set to <code>true</code>.

@param allowSearch if <code>true</code>, the true number of
images will be returned even if a search is required.  If
<code>false</code>, the reader may return <code>-1</code>
without performing the search.

@return the number of images, as an <code>int</code>, or
<code>-1</code> if <code>allowSearch</code> is
<code>false</code> and a search would be required.

@exception IllegalStateException if the input source has not been set,
or if the input has been specified with <code>seekForwardOnly</code>
set to <code>true</code>.
@exception IOException if an error occurs reading the
information from the input source.

@see #setInput
"
      end

      operation 1668738 "getWidth"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width in pixels of the given image within the input
source.

<p> If the image can be rendered to a user-specified size, then
this method returns the default width.

@param imageIndex the index of the image to be queried.

@return the width of the image, as an <code>int</code>.

@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs reading the width
information from the input source.
"
      end

      operation 1668866 "getHeight"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height in pixels of the given image within the
input source.

<p> If the image can be rendered to a user-specified size, then
this method returns the default height.

@param imageIndex the index of the image to be queried.

@return the height of the image, as an <code>int</code>.

@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs reading the height
information from the input source.
"
      end

      operation 1668994 "isRandomAccessEasy"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the storage format of the given
image places no inherent impediment on random access to pixels.
For most compressed formats, such as JPEG, this method should
return <code>false</code>, as a large section of the image in
addition to the region of interest may need to be decoded.

<p> This is merely a hint for programs that wish to be
efficient; all readers must be able to read arbitrary regions
as specified in an <code>ImageReadParam</code>.

<p> Note that formats that return <code>false</code> from
this method may nonetheless allow tiling (<i>e.g.</i> Restart
Markers in JPEG), and random access will likely be reasonably
efficient on tiles.  See {@link #isImageTiled isImageTiled}.

<p> A reader for which all images are guaranteed to support
easy random access, or are guaranteed not to support easy
random access, may return <code>true</code> or
<code>false</code> respectively without accessing any image
data.  In such cases, it is not necessary to throw an exception
even if no input source has been set or the image index is out
of bounds.

<p> The default implementation returns <code>false</code>.

@param imageIndex the index of the image to be queried.

@return <code>true</code> if reading a region of interest of
the given image is likely to be efficient.

@exception IllegalStateException if an input source is required
to determine the return value, but none has been set.
@exception IndexOutOfBoundsException if an image must be
accessed to determine the return value, but the supplied index
is out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1669122 "getAspectRatio"
	public explicit_return_type "float"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the aspect ratio of the given image (that is, its width
divided by its height) as a <code>float</code>.  For images
that are inherently resizable, this method provides a way to
determine the appropriate width given a desired height, or vice
versa.  For non-resizable images, the true width and height
are used.

<p> The default implementation simply returns
<code>(float)getWidth(imageIndex)/getHeight(imageIndex)</code>.

@param imageIndex the index of the image to be queried.

@return a <code>float</code> indicating the aspect ratio of the
given image.

@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1669250 "getRawImageType"
	public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>ImageTypeSpecifier</code> indicating the
<code>SampleModel</code> and <code>ColorModel</code> which most
closely represents the \"raw\" internal format of the image.  For
example, for a JPEG image the raw type might have a YCbCr color
space even though the image would conventionally be transformed
into an RGB color space prior to display.  The returned value
should also be included in the list of values returned by
<code>getImageTypes</code>.

<p> The default implementation simply returns the first entry
from the list provided by <code>getImageType</code>.

@param imageIndex the index of the image to be queried.

@return an <code>ImageTypeSpecifier</code>.

@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs reading the format
information from the input source.
"
      end

      operation 1669378 "getImageTypes"
	abstract public return_type class_ref 132994 // Iterator
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageTypeSpecifier> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing possible image
types to which the given image may be decoded, in the form of
<code>ImageTypeSpecifiers</code>s.  At least one legal image
type will be returned.

<p> The first element of the iterator should be the most
\"natural\" type for decoding the image with as little loss as
possible.  For example, for a JPEG image the first entry should
be an RGB image, even though the image data is stored
internally in a YCbCr color space.

@param imageIndex the index of the image to be
<code>retrieved</code>.

@return an <code>Iterator</code> containing at least one
<code>ImageTypeSpecifier</code> representing suggested image
types for decoding the current given image.

@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs reading the format
information from the input source.

@see ImageReadParam#setDestination(BufferedImage)
@see ImageReadParam#setDestinationType(ImageTypeSpecifier)
"
      end

      operation 1669506 "getDefaultReadParam"
	public return_type class_ref 313602 // ImageReadParam
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a default <code>ImageReadParam</code> object
appropriate for this format.  All subclasses should define a
set of default values for all parameters and return them with
this call.  This method may be called before the input source
is set.

<p> The default implementation constructs and returns a new
<code>ImageReadParam</code> object that does not allow source
scaling (<i>i.e.</i>, it returns <code>new
ImageReadParam()</code>.

@return an <code>ImageReadParam</code> object which may be used
to control the decoding process using a set of default settings.
"
      end

      operation 1669634 "getStreamMetadata"
	abstract public return_type class_ref 313730 // IIOMetadata
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>IIOMetadata</code> object representing the
metadata associated with the input source as a whole (i.e., not
associated with any particular image), or <code>null</code> if
the reader does not support reading metadata, is set to ignore
metadata, or if no metadata is available.

@return an <code>IIOMetadata</code> object, or <code>null</code>.

@exception IOException if an error occurs during reading.
"
      end

      operation 1669762 "getStreamMetadata"
	public return_type class_ref 313730 // IIOMetadata
	nparams 2
	  param inout name "formatName" type class_ref 128130 // String
	  param inout name "nodeNames" type class_ref 192258 // Set
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>IIOMetadata</code> object representing the
metadata associated with the input source as a whole (i.e.,
not associated with any particular image).  If no such data
exists, <code>null</code> is returned.

<p> The resulting metadata object is only responsible for
returning documents in the format named by
<code>formatName</code>.  Within any documents that are
returned, only nodes whose names are members of
<code>nodeNames</code> are required to be returned.  In this
way, the amount of metadata processing done by the reader may
be kept to a minimum, based on what information is actually
needed.

<p> If <code>formatName</code> is not the name of a supported
metadata format, <code>null</code> is returned.

<p> In all cases, it is legal to return a more capable metadata
object than strictly necessary.  The format name and node names
are merely hints that may be used to reduce the reader's
workload.

<p> The default implementation simply returns the result of
calling <code>getStreamMetadata()</code>, after checking that
the format name is supported.  If it is not,
<code>null</code> is returned.

@param formatName a metadata format name that may be used to retrieve
a document from the returned <code>IIOMetadata</code> object.
@param nodeNames a <code>Set</code> containing the names of
nodes that may be contained in a retrieved document.

@return an <code>IIOMetadata</code> object, or <code>null</code>.

@exception IllegalArgumentException if <code>formatName</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>nodeNames</code>
is <code>null</code>.
@exception IOException if an error occurs during reading.
"
      end

      operation 1669890 "getMetadata"
	private return_type class_ref 313730 // IIOMetadata
	nparams 4
	  param inout name "formatName" type class_ref 128130 // String
	  param inout name "nodeNames" type class_ref 192258 // Set
	  param inout name "wantStream" explicit_type "boolean"
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1670018 "getImageMetadata"
	abstract public return_type class_ref 313730 // IIOMetadata
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>IIOMetadata</code> object containing metadata
associated with the given image, or <code>null</code> if the
reader does not support reading metadata, is set to ignore
metadata, or if no metadata is available.

@param imageIndex the index of the image whose metadata is to
be retrieved.

@return an <code>IIOMetadata</code> object, or
<code>null</code>.

@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1670146 "getImageMetadata"
	public return_type class_ref 313730 // IIOMetadata
	nparams 3
	  param in name "imageIndex" explicit_type "int"
	  param inout name "formatName" type class_ref 128130 // String
	  param inout name "nodeNames" type class_ref 192258 // Set
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>IIOMetadata</code> object representing the
metadata associated with the given image, or <code>null</code>
if the reader does not support reading metadata or none
is available.

<p> The resulting metadata object is only responsible for
returning documents in the format named by
<code>formatName</code>.  Within any documents that are
returned, only nodes whose names are members of
<code>nodeNames</code> are required to be returned.  In this
way, the amount of metadata processing done by the reader may
be kept to a minimum, based on what information is actually
needed.

<p> If <code>formatName</code> is not the name of a supported
metadata format, <code>null</code> may be returned.

<p> In all cases, it is legal to return a more capable metadata
object than strictly necessary.  The format name and node names
are merely hints that may be used to reduce the reader's
workload.

<p> The default implementation simply returns the result of
calling <code>getImageMetadata(imageIndex)</code>, after
checking that the format name is supported.  If it is not,
<code>null</code> is returned.

@param imageIndex the index of the image whose metadata is to
be retrieved.
@param formatName a metadata format name that may be used to retrieve
a document from the returned <code>IIOMetadata</code> object.
@param nodeNames a <code>Set</code> containing the names of
nodes that may be contained in a retrieved document.

@return an <code>IIOMetadata</code> object, or <code>null</code>.

@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IllegalArgumentException if <code>formatName</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>nodeNames</code>
is <code>null</code>.
@exception IOException if an error occurs during reading.
"
      end

      operation 1670274 "read"
	public return_type class_ref 311554 // BufferedImage
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the image indexed by <code>imageIndex</code> and returns
it as a complete <code>BufferedImage</code>, using a default
<code>ImageReadParam</code>.  This is a convenience method
that calls <code>read(imageIndex, null)</code>.

<p> The image returned will be formatted according to the first
<code>ImageTypeSpecifier</code> returned from
<code>getImageTypes</code>.

<p> Any registered <code>IIOReadProgressListener</code> objects
will be notified by calling their <code>imageStarted</code>
method, followed by calls to their <code>imageProgress</code>
method as the read progresses.  Finally their
<code>imageComplete</code> method will be called.
<code>IIOReadUpdateListener</code> objects may be updated at
other times during the read as pixels are decoded.  Finally,
<code>IIOReadWarningListener</code> objects will receive
notification of any non-fatal warnings that occur during
decoding.

@param imageIndex the index of the image to be retrieved.

@return the desired portion of the image as a
<code>BufferedImage</code>.

@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1670402 "read"
	abstract public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param inout name "param" type class_ref 313602 // ImageReadParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the image indexed by <code>imageIndex</code> and returns
it as a complete <code>BufferedImage</code>, using a supplied
<code>ImageReadParam</code>.

<p> The actual <code>BufferedImage</code> returned will be
chosen using the algorithm defined by the
<code>getDestination</code> method.

<p> Any registered <code>IIOReadProgressListener</code> objects
will be notified by calling their <code>imageStarted</code>
method, followed by calls to their <code>imageProgress</code>
method as the read progresses.  Finally their
<code>imageComplete</code> method will be called.
<code>IIOReadUpdateListener</code> objects may be updated at
other times during the read as pixels are decoded.  Finally,
<code>IIOReadWarningListener</code> objects will receive
notification of any non-fatal warnings that occur during
decoding.

<p> The set of source bands to be read and destination bands to
be written is determined by calling <code>getSourceBands</code>
and <code>getDestinationBands</code> on the supplied
<code>ImageReadParam</code>.  If the lengths of the arrays
returned by these methods differ, the set of source bands
contains an index larger that the largest available source
index, or the set of destination bands contains an index larger
than the largest legal destination index, an
<code>IllegalArgumentException</code> is thrown.

<p> If the supplied <code>ImageReadParam</code> contains
optional setting values not supported by this reader (<i>e.g.</i>
source render size or any format-specific settings), they will
be ignored.

@param imageIndex the index of the image to be retrieved.
@param param an <code>ImageReadParam</code> used to control
the reading process, or <code>null</code>.

@return the desired portion of the image as a
<code>BufferedImage</code>.

@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IllegalArgumentException if the set of source and
destination bands specified by
<code>param.getSourceBands</code> and
<code>param.getDestinationBands</code> differ in length or
include indices that are out of bounds.
@exception IllegalArgumentException if the resulting image would
have a width or height less than 1.
@exception IOException if an error occurs during reading.
"
      end

      operation 1670530 "readAll"
	public return_type class_ref 313858 // IIOImage
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param inout name "param" type class_ref 313602 // ImageReadParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the image indexed by <code>imageIndex</code> and returns
an <code>IIOImage</code> containing the image, thumbnails, and
associated image metadata, using a supplied
<code>ImageReadParam</code>.

<p> The actual <code>BufferedImage</code> referenced by the
returned <code>IIOImage</code> will be chosen using the
algorithm defined by the <code>getDestination</code> method.

<p> Any registered <code>IIOReadProgressListener</code> objects
will be notified by calling their <code>imageStarted</code>
method, followed by calls to their <code>imageProgress</code>
method as the read progresses.  Finally their
<code>imageComplete</code> method will be called.
<code>IIOReadUpdateListener</code> objects may be updated at
other times during the read as pixels are decoded.  Finally,
<code>IIOReadWarningListener</code> objects will receive
notification of any non-fatal warnings that occur during
decoding.

<p> The set of source bands to be read and destination bands to
be written is determined by calling <code>getSourceBands</code>
and <code>getDestinationBands</code> on the supplied
<code>ImageReadParam</code>.  If the lengths of the arrays
returned by these methods differ, the set of source bands
contains an index larger that the largest available source
index, or the set of destination bands contains an index larger
than the largest legal destination index, an
<code>IllegalArgumentException</code> is thrown.

<p> Thumbnails will be returned in their entirety regardless of
the region settings.

<p> If the supplied <code>ImageReadParam</code> contains
optional setting values not supported by this reader (<i>e.g.</i>
source render size or any format-specific settings), those
values will be ignored.

@param imageIndex the index of the image to be retrieved.
@param param an <code>ImageReadParam</code> used to control
the reading process, or <code>null</code>.

@return an <code>IIOImage</code> containing the desired portion
of the image, a set of thumbnails, and associated image
metadata.

@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IllegalArgumentException if the set of source and
destination bands specified by
<code>param.getSourceBands</code> and
<code>param.getDestinationBands</code> differ in length or
include indices that are out of bounds.
@exception IllegalArgumentException if the resulting image
would have a width or height less than 1.
@exception IOException if an error occurs during reading.
"
      end

      operation 1670658 "readAll"
	public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "params" type class_ref 132994 // Iterator
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<IIOImage> ${name}${(}${t0}<? extends ImageReadParam> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all the images,
thumbnails, and metadata, starting at the index given by
<code>getMinIndex</code>, from the input source in the form of
<code>IIOImage</code> objects.  An <code>Iterator</code>
containing <code>ImageReadParam</code> objects is supplied; one
element is consumed for each image read from the input source
until no more images are available.  If the read param
<code>Iterator</code> runs out of elements, but there are still
more images available from the input source, default read
params are used for the remaining images.

<p> If <code>params</code> is <code>null</code>, a default read
param will be used for all images.

<p> The actual <code>BufferedImage</code> referenced by the
returned <code>IIOImage</code> will be chosen using the
algorithm defined by the <code>getDestination</code> method.

<p> Any registered <code>IIOReadProgressListener</code> objects
will be notified by calling their <code>sequenceStarted</code>
method once.  Then, for each image decoded, there will be a
call to <code>imageStarted</code>, followed by calls to
<code>imageProgress</code> as the read progresses, and finally
to <code>imageComplete</code>.  The
<code>sequenceComplete</code> method will be called after the
last image has been decoded.
<code>IIOReadUpdateListener</code> objects may be updated at
other times during the read as pixels are decoded.  Finally,
<code>IIOReadWarningListener</code> objects will receive
notification of any non-fatal warnings that occur during
decoding.

<p> The set of source bands to be read and destination bands to
be written is determined by calling <code>getSourceBands</code>
and <code>getDestinationBands</code> on the supplied
<code>ImageReadParam</code>.  If the lengths of the arrays
returned by these methods differ, the set of source bands
contains an index larger that the largest available source
index, or the set of destination bands contains an index larger
than the largest legal destination index, an
<code>IllegalArgumentException</code> is thrown.

<p> Thumbnails will be returned in their entirety regardless of the
region settings.

<p> If any of the supplied <code>ImageReadParam</code>s contain
optional setting values not supported by this reader (<i>e.g.</i>
source render size or any format-specific settings), they will
be ignored.

@param params an <code>Iterator</code> containing
<code>ImageReadParam</code> objects.

@return an <code>Iterator</code> representing the
contents of the input source as <code>IIOImage</code>s.

@exception IllegalStateException if the input source has not been
set.
@exception IllegalArgumentException if any
non-<code>null</code> element of <code>params</code> is not an
<code>ImageReadParam</code>.
@exception IllegalArgumentException if the set of source and
destination bands specified by
<code>param.getSourceBands</code> and
<code>param.getDestinationBands</code> differ in length or
include indices that are out of bounds.
@exception IllegalArgumentException if a resulting image would
have a width or height less than 1.
@exception IOException if an error occurs during reading.

@see ImageReadParam
@see IIOImage
"
      end

      operation 1670786 "canReadRaster"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this plug-in supports reading
just a {@link java.awt.image.Raster Raster} of pixel data.
If this method returns <code>false</code>, calls to
{@link #readRaster readRaster} or {@link #readTileRaster readTileRaster}
will throw an <code>UnsupportedOperationException</code>.

<p> The default implementation returns <code>false</code>.

@return <code>true</code> if this plug-in supports reading raw
<code>Raster</code>s.

@see #readRaster
@see #readTileRaster
"
      end

      operation 1670914 "readRaster"
	public return_type class_ref 311682 // Raster
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param inout name "param" type class_ref 313602 // ImageReadParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>Raster</code> object containing the raw pixel data
from the image stream, without any color conversion applied.  The
application must determine how to interpret the pixel data by other
means.  Any destination or image-type parameters in the supplied
<code>ImageReadParam</code> object are ignored, but all other
parameters are used exactly as in the {@link #read read}
method, except that any destination offset is used as a logical rather
than a physical offset.  The size of the returned <code>Raster</code>
will always be that of the source region clipped to the actual image.
Logical offsets in the stream itself are ignored.

<p> This method allows formats that normally apply a color
conversion, such as JPEG, and formats that do not normally have an
associated colorspace, such as remote sensing or medical imaging data,
to provide access to raw pixel data.

<p> Any registered <code>readUpdateListener</code>s are ignored, as
there is no <code>BufferedImage</code>, but all other listeners are
called exactly as they are for the {@link #read read} method.

<p> If {@link #canReadRaster canReadRaster()} returns
<code>false</code>, this method throws an
<code>UnsupportedOperationException</code>.

<p> If the supplied <code>ImageReadParam</code> contains
optional setting values not supported by this reader (<i>e.g.</i>
source render size or any format-specific settings), they will
be ignored.

<p> The default implementation throws an
<code>UnsupportedOperationException</code>.

@param imageIndex the index of the image to be read.
@param param an <code>ImageReadParam</code> used to control
the reading process, or <code>null</code>.

@return the desired portion of the image as a
<code>Raster</code>.

@exception UnsupportedOperationException if this plug-in does not
support reading raw <code>Raster</code>s.
@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs during reading.

@see #canReadRaster
@see #read
@see java.awt.image.Raster
"
      end

      operation 1671042 "isImageTiled"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the image is organized into
<i>tiles</i>, that is, equal-sized non-overlapping rectangles.

<p> A reader plug-in may choose whether or not to expose tiling
that is present in the image as it is stored.  It may even
choose to advertise tiling when none is explicitly present.  In
general, tiling should only be advertised if there is some
advantage (in speed or space) to accessing individual tiles.
Regardless of whether the reader advertises tiling, it must be
capable of reading an arbitrary rectangular region specified in
an <code>ImageReadParam</code>.

<p> A reader for which all images are guaranteed to be tiled,
or are guaranteed not to be tiled, may return <code>true</code>
or <code>false</code> respectively without accessing any image
data.  In such cases, it is not necessary to throw an exception
even if no input source has been set or the image index is out
of bounds.

<p> The default implementation just returns <code>false</code>.

@param imageIndex the index of the image to be queried.

@return <code>true</code> if the image is tiled.

@exception IllegalStateException if an input source is required
to determine the return value, but none has been set.
@exception IndexOutOfBoundsException if an image must be
accessed to determine the return value, but the supplied index
is out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1671170 "getTileWidth"
	public explicit_return_type "int"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of a tile in the given image.

<p> The default implementation simply returns
<code>getWidth(imageIndex)</code>, which is correct for
non-tiled images.  Readers that support tiling should override
this method.

@return the width of a tile.

@param imageIndex the index of the image to be queried.

@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1671298 "getTileHeight"
	public explicit_return_type "int"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of a tile in the given image.

<p> The default implementation simply returns
<code>getHeight(imageIndex)</code>, which is correct for
non-tiled images.  Readers that support tiling should override
this method.

@return the height of a tile.

@param imageIndex the index of the image to be queried.

@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1671426 "getTileGridXOffset"
	public explicit_return_type "int"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the X coordinate of the upper-left corner of tile (0,
0) in the given image.

<p> A reader for which the tile grid X offset always has the
same value (usually 0), may return the value without accessing
any image data.  In such cases, it is not necessary to throw an
exception even if no input source has been set or the image
index is out of bounds.

<p> The default implementation simply returns 0, which is
correct for non-tiled images and tiled images in most formats.
Readers that support tiling with non-(0, 0) offsets should
override this method.

@return the X offset of the tile grid.

@param imageIndex the index of the image to be queried.

@exception IllegalStateException if an input source is required
to determine the return value, but none has been set.
@exception IndexOutOfBoundsException if an image must be
accessed to determine the return value, but the supplied index
is out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1671554 "getTileGridYOffset"
	public explicit_return_type "int"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Y coordinate of the upper-left corner of tile (0,
0) in the given image.

<p> A reader for which the tile grid Y offset always has the
same value (usually 0), may return the value without accessing
any image data.  In such cases, it is not necessary to throw an
exception even if no input source has been set or the image
index is out of bounds.

<p> The default implementation simply returns 0, which is
correct for non-tiled images and tiled images in most formats.
Readers that support tiling with non-(0, 0) offsets should
override this method.

@return the Y offset of the tile grid.

@param imageIndex the index of the image to be queried.

@exception IllegalStateException if an input source is required
to determine the return value, but none has been set.
@exception IndexOutOfBoundsException if an image must be
accessed to determine the return value, but the supplied index
is out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1671682 "readTile"
	public return_type class_ref 311554 // BufferedImage
	nparams 3
	  param in name "imageIndex" explicit_type "int"
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the tile indicated by the <code>tileX</code> and
<code>tileY</code> arguments, returning it as a
<code>BufferedImage</code>.  If the arguments are out of range,
an <code>IllegalArgumentException</code> is thrown.  If the
image is not tiled, the values 0, 0 will return the entire
image; any other values will cause an
<code>IllegalArgumentException</code> to be thrown.

<p> This method is merely a convenience equivalent to calling
<code>read(int, ImageReadParam)</code> with a read param
specifying a source region having offsets of
<code>tileX*getTileWidth(imageIndex)</code>,
<code>tileY*getTileHeight(imageIndex)</code> and width and
height of <code>getTileWidth(imageIndex)</code>,
<code>getTileHeight(imageIndex)</code>; and subsampling
factors of 1 and offsets of 0.  To subsample a tile, call
<code>read</code> with a read param specifying this region
and different subsampling parameters.

<p> The default implementation returns the entire image if
<code>tileX</code> and <code>tileY</code> are 0, or throws
an <code>IllegalArgumentException</code> otherwise.

@param imageIndex the index of the image to be retrieved.
@param tileX the column index (starting with 0) of the tile
to be retrieved.
@param tileY the row index (starting with 0) of the tile
to be retrieved.

@return the tile as a <code>BufferedImage</code>.

@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if <code>imageIndex</code>
is out of bounds.
@exception IllegalArgumentException if the tile indices are
out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1671810 "readTileRaster"
	public return_type class_ref 311682 // Raster
	nparams 3
	  param in name "imageIndex" explicit_type "int"
	  param in name "tileX" explicit_type "int"
	  param in name "tileY" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new <code>Raster</code> object containing the raw
pixel data from the tile, without any color conversion applied.
The application must determine how to interpret the pixel data by other
means.

<p> If {@link #canReadRaster canReadRaster()} returns
<code>false</code>, this method throws an
<code>UnsupportedOperationException</code>.

<p> The default implementation checks if reading
<code>Raster</code>s is supported, and if so calls {@link
#readRaster readRaster(imageIndex, null)} if
<code>tileX</code> and <code>tileY</code> are 0, or throws an
<code>IllegalArgumentException</code> otherwise.

@param imageIndex the index of the image to be retrieved.
@param tileX the column index (starting with 0) of the tile
to be retrieved.
@param tileY the row index (starting with 0) of the tile
to be retrieved.

@return the tile as a <code>Raster</code>.

@exception UnsupportedOperationException if this plug-in does not
support reading raw <code>Raster</code>s.
@exception IllegalArgumentException if the tile indices are
out of bounds.
@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if <code>imageIndex</code>
is out of bounds.
@exception IOException if an error occurs during reading.

@see #readTile
@see #readRaster
@see java.awt.image.Raster
"
      end

      operation 1671938 "readAsRenderedImage"
	public return_type class_ref 313986 // RenderedImage
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param inout name "param" type class_ref 313602 // ImageReadParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " RenderedImages

Returns a <code>RenderedImage</code> object that contains the
contents of the image indexed by <code>imageIndex</code>.  By
default, the returned image is simply the
<code>BufferedImage</code> returned by <code>read(imageIndex,
param)</code>.

<p> The semantics of this method may differ from those of the
other <code>read</code> methods in several ways.  First, any
destination image and/or image type set in the
<code>ImageReadParam</code> may be ignored.  Second, the usual
listener calls are not guaranteed to be made, or to be
meaningful if they are.  This is because the returned image may
not be fully populated with pixel data at the time it is
returned, or indeed at any time.

<p> If the supplied <code>ImageReadParam</code> contains
optional setting values not supported by this reader (<i>e.g.</i>
source render size or any format-specific settings), they will
be ignored.

<p> The default implementation just calls
{@link #read read(imageIndex, param)}.

@param imageIndex the index of the image to be retrieved.
@param param an <code>ImageReadParam</code> used to control
the reading process, or <code>null</code>.

@return a <code>RenderedImage</code> object providing a view of
the image.

@exception IllegalStateException if the input source has not been
set.
@exception IndexOutOfBoundsException if the supplied index is
out of bounds.
@exception IllegalArgumentException if the set of source and
destination bands specified by
<code>param.getSourceBands</code> and
<code>param.getDestinationBands</code> differ in length or
include indices that are out of bounds.
@exception IllegalArgumentException if the resulting image
would have a width or height less than 1.
@exception IOException if an error occurs during reading.
"
      end

      operation 1672066 "readerSupportsThumbnails"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Thumbnails

Returns <code>true</code> if the image format understood by
this reader supports thumbnail preview images associated with
it.  The default implementation returns <code>false</code>.

<p> If this method returns <code>false</code>,
<code>hasThumbnails</code> and <code>getNumThumbnails</code>
will return <code>false</code> and <code>0</code>,
respectively, and <code>readThumbnail</code> will throw an
<code>UnsupportedOperationException</code>, regardless of their
arguments.

<p> A reader that does not support thumbnails need not
implement any of the thumbnail-related methods.

@return <code>true</code> if thumbnails are supported.
"
      end

      operation 1672194 "hasThumbnails"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the given image has thumbnail
preview images associated with it.  If the format does not
support thumbnails (<code>readerSupportsThumbnails</code>
returns <code>false</code>), <code>false</code> will be
returned regardless of whether an input source has been set or
whether <code>imageIndex</code> is in bounds.

<p> The default implementation returns <code>true</code> if
<code>getNumThumbnails</code> returns a value greater than 0.

@param imageIndex the index of the image being queried.

@return <code>true</code> if the given image has thumbnails.

@exception IllegalStateException if the reader supports
thumbnails but the input source has not been set.
@exception IndexOutOfBoundsException if the reader supports
thumbnails but <code>imageIndex</code> is out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1672322 "getNumThumbnails"
	public explicit_return_type "int"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of thumbnail preview images associated with
the given image.  If the format does not support thumbnails,
(<code>readerSupportsThumbnails</code> returns
<code>false</code>), <code>0</code> will be returned regardless
of whether an input source has been set or whether
<code>imageIndex</code> is in bounds.

<p> The default implementation returns 0 without checking its
argument.

@param imageIndex the index of the image being queried.

@return the number of thumbnails associated with the given
image.

@exception IllegalStateException if the reader supports
thumbnails but the input source has not been set.
@exception IndexOutOfBoundsException if the reader supports
thumbnails but <code>imageIndex</code> is out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1672450 "getThumbnailWidth"
	public explicit_return_type "int"
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of the thumbnail preview image indexed by
<code>thumbnailIndex</code>, associated with the image indexed
by <code>ImageIndex</code>.

<p> If the reader does not support thumbnails,
(<code>readerSupportsThumbnails</code> returns
<code>false</code>), an <code>UnsupportedOperationException</code>
will be thrown.

<p> The default implementation simply returns
<code>readThumbnail(imageindex,
thumbnailIndex).getWidth()</code>.  Subclasses should therefore
override this method if possible in order to avoid forcing the
thumbnail to be read.

@param imageIndex the index of the image to be retrieved.
@param thumbnailIndex the index of the thumbnail to be retrieved.

@return the width of the desired thumbnail as an <code>int</code>.

@exception UnsupportedOperationException if thumbnails are not
supported.
@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if either of the supplied
indices are out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1672578 "getThumbnailHeight"
	public explicit_return_type "int"
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of the thumbnail preview image indexed by
<code>thumbnailIndex</code>, associated with the image indexed
by <code>ImageIndex</code>.

<p> If the reader does not support thumbnails,
(<code>readerSupportsThumbnails</code> returns
<code>false</code>), an <code>UnsupportedOperationException</code>
will be thrown.

<p> The default implementation simply returns
<code>readThumbnail(imageindex,
thumbnailIndex).getHeight()</code>.  Subclasses should
therefore override this method if possible in order to avoid
forcing the thumbnail to be read.

@param imageIndex the index of the image to be retrieved.
@param thumbnailIndex the index of the thumbnail to be retrieved.

@return the height of the desired thumbnail as an <code>int</code>.

@exception UnsupportedOperationException if thumbnails are not
supported.
@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if either of the supplied
indices are out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1672706 "readThumbnail"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thumbnail preview image indexed by
<code>thumbnailIndex</code>, associated with the image indexed
by <code>ImageIndex</code> as a <code>BufferedImage</code>.

<p> Any registered <code>IIOReadProgressListener</code> objects
will be notified by calling their
<code>thumbnailStarted</code>, <code>thumbnailProgress</code>,
and <code>thumbnailComplete</code> methods.

<p> If the reader does not support thumbnails,
(<code>readerSupportsThumbnails</code> returns
<code>false</code>), an <code>UnsupportedOperationException</code>
will be thrown regardless of whether an input source has been
set or whether the indices are in bounds.

<p> The default implementation throws an
<code>UnsupportedOperationException</code>.

@param imageIndex the index of the image to be retrieved.
@param thumbnailIndex the index of the thumbnail to be retrieved.

@return the desired thumbnail as a <code>BufferedImage</code>.

@exception UnsupportedOperationException if thumbnails are not
supported.
@exception IllegalStateException if the input source has not been set.
@exception IndexOutOfBoundsException if either of the supplied
indices are out of bounds.
@exception IOException if an error occurs during reading.
"
      end

      operation 1672834 "abort"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Abort

Requests that any current read operation be aborted.  The
contents of the image following the abort will be undefined.

<p> Readers should call <code>clearAbortRequest</code> at the
beginning of each read operation, and poll the value of
<code>abortRequested</code> regularly during the read.
"
      end

      operation 1672962 "abortRequested"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if a request to abort the current
read operation has been made since the reader was instantiated or
<code>clearAbortRequest</code> was called.

@return <code>true</code> if the current read operation should
be aborted.

@see #abort
@see #clearAbortRequest
"
      end

      operation 1673090 "clearAbortRequest"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears any previous abort request.  After this method has been
called, <code>abortRequested</code> will return
<code>false</code>.

@see #abort
@see #abortRequested
"
      end

      operation 1673218 "addToList"
	class_operation package return_type class_ref 175362 // List
	nparams 2
	  param inout name "l" type class_ref 175362 // List
	  param inout name "elt" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Listeners
 Add an element to a list, creating a new list if the
 existing list is null, and return the list."
      end

      operation 1673346 "removeFromList"
	class_operation package return_type class_ref 175362 // List
	nparams 2
	  param inout name "l" type class_ref 175362 // List
	  param inout name "elt" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Remove an element from a list, discarding the list if the
 resulting list is empty, and return the list or null."
      end

      operation 1673474 "addIIOReadWarningListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 313090 // IIOReadWarningListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an <code>IIOReadWarningListener</code> to the list of
registered warning listeners.  If <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.  Messages sent to the given listener will be
localized, if possible, to match the current
<code>Locale</code>.  If no <code>Locale</code> has been set,
warning messages may be localized as the reader sees fit.

@param listener an <code>IIOReadWarningListener</code> to be registered.

@see #removeIIOReadWarningListener
"
      end

      operation 1673602 "removeIIOReadWarningListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 313090 // IIOReadWarningListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an <code>IIOReadWarningListener</code> from the list of
registered error listeners.  If the listener was not previously
registered, or if <code>listener</code> is <code>null</code>,
no exception will be thrown and no action will be taken.

@param listener an IIOReadWarningListener to be unregistered.

@see #addIIOReadWarningListener
"
      end

      operation 1673730 "removeAllIIOReadWarningListeners"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all currently registered
<code>IIOReadWarningListener</code> objects.

<p> The default implementation sets the
<code>warningListeners</code> and <code>warningLocales</code>
instance variables to <code>null</code>.
"
      end

      operation 1673858 "addIIOReadProgressListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 313218 // IIOReadProgressListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an <code>IIOReadProgressListener</code> to the list of
registered progress listeners.  If <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.

@param listener an IIOReadProgressListener to be registered.

@see #removeIIOReadProgressListener
"
      end

      operation 1673986 "removeIIOReadProgressListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 313218 // IIOReadProgressListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an <code>IIOReadProgressListener</code> from the list
of registered progress listeners.  If the listener was not
previously registered, or if <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.

@param listener an IIOReadProgressListener to be unregistered.

@see #addIIOReadProgressListener
"
      end

      operation 1674114 "removeAllIIOReadProgressListeners"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all currently registered
<code>IIOReadProgressListener</code> objects.

<p> The default implementation sets the
<code>progressListeners</code> instance variable to
<code>null</code>.
"
      end

      operation 1674242 "addIIOReadUpdateListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 313346 // IIOReadUpdateListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an <code>IIOReadUpdateListener</code> to the list of
registered update listeners.  If <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.  The listener will receive notification of pixel
updates as images and thumbnails are decoded, including the
starts and ends of progressive passes.

<p> If no update listeners are present, the reader may choose
to perform fewer updates to the pixels of the destination
images and/or thumbnails, which may result in more efficient
decoding.

<p> For example, in progressive JPEG decoding each pass
contains updates to a set of coefficients, which would have to
be transformed into pixel values and converted to an RGB color
space for each pass if listeners are present.  If no listeners
are present, the coefficients may simply be accumulated and the
final results transformed and color converted one time only.

<p> The final results of decoding will be the same whether or
not intermediate updates are performed.  Thus if only the final
image is desired it may be preferable not to register any
<code>IIOReadUpdateListener</code>s.  In general, progressive
updating is most effective when fetching images over a network
connection that is very slow compared to local CPU processing;
over a fast connection, progressive updates may actually slow
down the presentation of the image.

@param listener an IIOReadUpdateListener to be registered.

@see #removeIIOReadUpdateListener
"
      end

      operation 1674370 "removeIIOReadUpdateListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 313346 // IIOReadUpdateListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an <code>IIOReadUpdateListener</code> from the list of
registered update listeners.  If the listener was not
previously registered, or if <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.

@param listener an IIOReadUpdateListener to be unregistered.

@see #addIIOReadUpdateListener
"
      end

      operation 1674498 "removeAllIIOReadUpdateListeners"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all currently registered
<code>IIOReadUpdateListener</code> objects.

<p> The default implementation sets the
<code>updateListeners</code> instance variable to
<code>null</code>.
"
      end

      operation 1674626 "processSequenceStarted"
	protected explicit_return_type "void"
	nparams 1
	  param in name "minIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the start of an sequence of image reads to all
registered <code>IIOReadProgressListener</code>s by calling
their <code>sequenceStarted</code> method.  Subclasses may use
this method as a convenience.

@param minIndex the lowest index being read.
"
      end

      operation 1674754 "processSequenceComplete"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the completion of an sequence of image reads to all
registered <code>IIOReadProgressListener</code>s by calling
their <code>sequenceComplete</code> method.  Subclasses may use
this method as a convenience.
"
      end

      operation 1674882 "processImageStarted"
	protected explicit_return_type "void"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the start of an image read to all registered
<code>IIOReadProgressListener</code>s by calling their
<code>imageStarted</code> method.  Subclasses may use this
method as a convenience.

@param imageIndex the index of the image about to be read.
"
      end

      operation 1675010 "processImageProgress"
	protected explicit_return_type "void"
	nparams 1
	  param in name "percentageDone" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the current percentage of image completion to all
registered <code>IIOReadProgressListener</code>s by calling
their <code>imageProgress</code> method.  Subclasses may use
this method as a convenience.

@param percentageDone the current percentage of completion,
as a <code>float</code>.
"
      end

      operation 1675138 "processImageComplete"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the completion of an image read to all registered
<code>IIOReadProgressListener</code>s by calling their
<code>imageComplete</code> method.  Subclasses may use this
method as a convenience.
"
      end

      operation 1675266 "processThumbnailStarted"
	protected explicit_return_type "void"
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the start of a thumbnail read to all registered
<code>IIOReadProgressListener</code>s by calling their
<code>thumbnailStarted</code> method.  Subclasses may use this
method as a convenience.

@param imageIndex the index of the image associated with the
thumbnail.
@param thumbnailIndex the index of the thumbnail.
"
      end

      operation 1675394 "processThumbnailProgress"
	protected explicit_return_type "void"
	nparams 1
	  param in name "percentageDone" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the current percentage of thumbnail completion to
all registered <code>IIOReadProgressListener</code>s by calling
their <code>thumbnailProgress</code> method.  Subclasses may
use this method as a convenience.

@param percentageDone the current percentage of completion,
as a <code>float</code>.
"
      end

      operation 1675522 "processThumbnailComplete"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the completion of a thumbnail read to all registered
<code>IIOReadProgressListener</code>s by calling their
<code>thumbnailComplete</code> method.  Subclasses may use this
method as a convenience.
"
      end

      operation 1675650 "processReadAborted"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts that the read has been aborted to all registered
<code>IIOReadProgressListener</code>s by calling their
<code>readAborted</code> method.  Subclasses may use this
method as a convenience.
"
      end

      operation 1675778 "processPassStarted"
	protected explicit_return_type "void"
	nparams 9
	  param inout name "theImage" type class_ref 311554 // BufferedImage
	  param in name "pass" explicit_type "int"
	  param in name "minPass" explicit_type "int"
	  param in name "maxPass" explicit_type "int"
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the beginning of a progressive pass to all
registered <code>IIOReadUpdateListener</code>s by calling their
<code>passStarted</code> method.  Subclasses may use this
method as a convenience.

@param theImage the <code>BufferedImage</code> being updated.
@param pass the index of the current pass, starting with 0.
@param minPass the index of the first pass that will be decoded.
@param maxPass the index of the last pass that will be decoded.
@param minX the X coordinate of the upper-left pixel included
in the pass.
@param minY the X coordinate of the upper-left pixel included
in the pass.
@param periodX the horizontal separation between pixels.
@param periodY the vertical separation between pixels.
@param bands an array of <code>int</code>s indicating the
set of affected bands of the destination.
"
      end

      operation 1675906 "processImageUpdate"
	protected explicit_return_type "void"
	nparams 8
	  param inout name "theImage" type class_ref 311554 // BufferedImage
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the update of a set of samples to all registered
<code>IIOReadUpdateListener</code>s by calling their
<code>imageUpdate</code> method.  Subclasses may use this
method as a convenience.

@param theImage the <code>BufferedImage</code> being updated.
@param minX the X coordinate of the upper-left pixel included
in the pass.
@param minY the X coordinate of the upper-left pixel included
in the pass.
@param width the total width of the area being updated, including
pixels being skipped if <code>periodX &gt; 1</code>.
@param height the total height of the area being updated,
including pixels being skipped if <code>periodY &gt; 1</code>.
@param periodX the horizontal separation between pixels.
@param periodY the vertical separation between pixels.
@param bands an array of <code>int</code>s indicating the
set of affected bands of the destination.
"
      end

      operation 1676034 "processPassComplete"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "theImage" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the end of a progressive pass to all
registered <code>IIOReadUpdateListener</code>s by calling their
<code>passComplete</code> method.  Subclasses may use this
method as a convenience.

@param theImage the <code>BufferedImage</code> being updated.
"
      end

      operation 1676162 "processThumbnailPassStarted"
	protected explicit_return_type "void"
	nparams 9
	  param inout name "theThumbnail" type class_ref 311554 // BufferedImage
	  param in name "pass" explicit_type "int"
	  param in name "minPass" explicit_type "int"
	  param in name "maxPass" explicit_type "int"
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the beginning of a thumbnail progressive pass to all
registered <code>IIOReadUpdateListener</code>s by calling their
<code>thumbnailPassStarted</code> method.  Subclasses may use this
method as a convenience.

@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.
@param pass the index of the current pass, starting with 0.
@param minPass the index of the first pass that will be decoded.
@param maxPass the index of the last pass that will be decoded.
@param minX the X coordinate of the upper-left pixel included
in the pass.
@param minY the X coordinate of the upper-left pixel included
in the pass.
@param periodX the horizontal separation between pixels.
@param periodY the vertical separation between pixels.
@param bands an array of <code>int</code>s indicating the
set of affected bands of the destination.
"
      end

      operation 1676290 "processThumbnailUpdate"
	protected explicit_return_type "void"
	nparams 8
	  param inout name "theThumbnail" type class_ref 311554 // BufferedImage
	  param in name "minX" explicit_type "int"
	  param in name "minY" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "periodX" explicit_type "int"
	  param in name "periodY" explicit_type "int"
	  param inout name "bands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the update of a set of samples in a thumbnail image
to all registered <code>IIOReadUpdateListener</code>s by
calling their <code>thumbnailUpdate</code> method.  Subclasses may
use this method as a convenience.

@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.
@param minX the X coordinate of the upper-left pixel included
in the pass.
@param minY the X coordinate of the upper-left pixel included
in the pass.
@param width the total width of the area being updated, including
pixels being skipped if <code>periodX &gt; 1</code>.
@param height the total height of the area being updated,
including pixels being skipped if <code>periodY &gt; 1</code>.
@param periodX the horizontal separation between pixels.
@param periodY the vertical separation between pixels.
@param bands an array of <code>int</code>s indicating the
set of affected bands of the destination.
"
      end

      operation 1676418 "processThumbnailPassComplete"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "theThumbnail" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the end of a thumbnail progressive pass to all
registered <code>IIOReadUpdateListener</code>s by calling their
<code>thumbnailPassComplete</code> method.  Subclasses may use this
method as a convenience.

@param theThumbnail the <code>BufferedImage</code> thumbnail
being updated.
"
      end

      operation 1676546 "processWarningOccurred"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "warning" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts a warning message to all registered
<code>IIOReadWarningListener</code>s by calling their
<code>warningOccurred</code> method.  Subclasses may use this
method as a convenience.

@param warning the warning message to send.

@exception IllegalArgumentException if <code>warning</code>
is <code>null</code>.
"
      end

      operation 1676674 "processWarningOccurred"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "baseName" type class_ref 128130 // String
	  param inout name "keyword" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts a localized warning message to all registered
<code>IIOReadWarningListener</code>s by calling their
<code>warningOccurred</code> method with a string taken
from a <code>ResourceBundle</code>.  Subclasses may use this
method as a convenience.

@param baseName the base name of a set of
<code>ResourceBundle</code>s containing localized warning
messages.
@param keyword the keyword used to index the warning message
within the set of <code>ResourceBundle</code>s.

@exception IllegalArgumentException if <code>baseName</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>keyword</code>
is <code>null</code>.
@exception IllegalArgumentException if no appropriate
<code>ResourceBundle</code> may be located.
@exception IllegalArgumentException if the named resource is
not found in the located <code>ResourceBundle</code>.
@exception IllegalArgumentException if the object retrieved
from the <code>ResourceBundle</code> is not a
<code>String</code>.
"
      end

      operation 1676802 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " State management

Restores the <code>ImageReader</code> to its initial state.

<p> The default implementation calls <code>setInput(null,
false)</code>, <code>setLocale(null)</code>,
<code>removeAllIIOReadUpdateListeners()</code>,
<code>removeAllIIOReadWarningListeners()</code>,
<code>removeAllIIOReadProgressListeners()</code>, and
<code>clearAbortRequest</code>.
"
      end

      operation 1676930 "dispose"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows any resources held by this object to be released.  The
result of calling any other method (other than
<code>finalize</code>) subsequent to a call to this method
is undefined.

<p>It is important for applications to call this method when they
know they will no longer be using this <code>ImageReader</code>.
Otherwise, the reader may continue to hold on to resources
indefinitely.

<p>The default implementation of this method in the superclass does
nothing.  Subclass implementations should ensure that all resources,
especially native resources, are released.
"
      end

      operation 1677058 "getSourceRegion"
	class_operation protected return_type class_ref 314114 // Rectangle
	nparams 3
	  param inout name "param" type class_ref 313602 // ImageReadParam
	  param in name "srcWidth" explicit_type "int"
	  param in name "srcHeight" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility methods

A utility method that may be used by readers to compute the
region of the source image that should be read, taking into
account any source region and subsampling offset settings in
the supplied <code>ImageReadParam</code>.  The actual
subsampling factors, destination size, and destination offset
are <em>not</em> taken into consideration, thus further
clipping must take place.  The {@link #computeRegions computeRegions}
method performs all necessary clipping.

@param param the <code>ImageReadParam</code> being used, or
<code>null</code>.
@param srcWidth the width of the source image.
@param srcHeight the height of the source image.

@return the source region as a <code>Rectangle</code>.
"
      end

      operation 1677186 "computeRegions"
	class_operation protected explicit_return_type "void"
	nparams 6
	  param inout name "param" type class_ref 313602 // ImageReadParam
	  param in name "srcWidth" explicit_type "int"
	  param in name "srcHeight" explicit_type "int"
	  param inout name "image" type class_ref 311554 // BufferedImage
	  param inout name "srcRegion" type class_ref 314114 // Rectangle
	  param inout name "destRegion" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the source region of interest and the destination
region of interest, taking the width and height of the source
image, an optional destination image, and an optional
<code>ImageReadParam</code> into account.  The source region
begins with the entire source image.  Then that is clipped to
the source region specified in the <code>ImageReadParam</code>,
if one is specified.

<p> If either of the destination offsets are negative, the
source region is clipped so that its top left will coincide
with the top left of the destination image, taking subsampling
into account.  Then the result is clipped to the destination
image on the right and bottom, if one is specified, taking
subsampling and destination offsets into account.

<p> Similarly, the destination region begins with the source
image, is translated to the destination offset given in the
<code>ImageReadParam</code> if there is one, and finally is
clipped to the destination image, if there is one.

<p> If either the source or destination regions end up having a
width or height of 0, an <code>IllegalArgumentException</code>
is thrown.

<p> The {@link #getSourceRegion getSourceRegion>}
method may be used if only source clipping is desired.

@param param an <code>ImageReadParam</code>, or <code>null</code>.
@param srcWidth the width of the source image.
@param srcHeight the height of the source image.
@param image a <code>BufferedImage</code> that will be the
destination image, or <code>null</code>.
@param srcRegion a <code>Rectangle</code> that will be filled with
the source region of interest.
@param destRegion a <code>Rectangle</code> that will be filled with
the destination region of interest.
@exception IllegalArgumentException if <code>srcRegion</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>dstRegion</code>
is <code>null</code>.
@exception IllegalArgumentException if the resulting source or
destination region is empty.
"
      end

      operation 1677314 "checkReadParamBandSettings"
	class_operation protected explicit_return_type "void"
	nparams 3
	  param inout name "param" type class_ref 313602 // ImageReadParam
	  param in name "numSrcBands" explicit_type "int"
	  param in name "numDstBands" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A utility method that may be used by readers to test the
validity of the source and destination band settings of an
<code>ImageReadParam</code>.  This method may be called as soon
as the reader knows both the number of bands of the source
image as it exists in the input stream, and the number of bands
of the destination image that being written.

<p> The method retrieves the source and destination band
setting arrays from param using the <code>getSourceBands</code>
and <code>getDestinationBands</code>methods (or considers them
to be <code>null</code> if <code>param</code> is
<code>null</code>).  If the source band setting array is
<code>null</code>, it is considered to be equal to the array
<code>{ 0, 1, ..., numSrcBands - 1 }</code>, and similarly for
the destination band setting array.

<p> The method then tests that both arrays are equal in length,
and that neither array contains a value larger than the largest
available band index.

<p> Any failure results in an
<code>IllegalArgumentException</code> being thrown; success
results in the method returning silently.

@param param the <code>ImageReadParam</code> being used to read
the image.
@param numSrcBands the number of bands of the image as it exists
int the input source.
@param numDstBands the number of bands in the destination image
being written.

@exception IllegalArgumentException if <code>param</code>
contains an invalid specification of a source and/or
destination band subset.
"
      end

      operation 1677442 "getDestination"
	class_operation protected return_type class_ref 311554 // BufferedImage
	nparams 4
	  param inout name "param" type class_ref 313602 // ImageReadParam
	  param inout name "imageTypes" type class_ref 132994 // Iterator
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	nexceptions 1
	  exception class_ref 314242 // IIOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<ImageTypeSpecifier> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>BufferedImage</code> to which decoded pixel
data should be written.  The image is determined by inspecting
the supplied <code>ImageReadParam</code> if it is
non-<code>null</code>; if its <code>getDestination</code>
method returns a non-<code>null</code> value, that image is
simply returned.  Otherwise,
<code>param.getDestinationType</code> method is called to
determine if a particular image type has been specified.  If
so, the returned <code>ImageTypeSpecifier</code> is used after
checking that it is equal to one of those included in
<code>imageTypes</code>.

<p> If <code>param</code> is <code>null</code> or the above
steps have not yielded an image or an
<code>ImageTypeSpecifier</code>, the first value obtained from
the <code>imageTypes</code> parameter is used.  Typically, the
caller will set <code>imageTypes</code> to the value of
<code>getImageTypes(imageIndex)</code>.

<p> Next, the dimensions of the image are determined by a call
to <code>computeRegions</code>.  The actual width and height of
the image being decoded are passed in as the <code>width</code>
and <code>height</code> parameters.

@param param an <code>ImageReadParam</code> to be used to get
the destination image or image type, or <code>null</code>.
@param imageTypes an <code>Iterator</code> of
<code>ImageTypeSpecifier</code>s indicating the legal image
types, with the default first.
@param width the true width of the image or tile begin decoded.
@param height the true width of the image or tile being decoded.

@return the <code>BufferedImage</code> to which decoded pixel
data should be written.

@exception IIOException if the <code>ImageTypeSpecifier</code>
specified by <code>param</code> does not match any of the legal
ones from <code>imageTypes</code>.
@exception IllegalArgumentException if <code>imageTypes</code>
is <code>null</code> or empty, or if an object not of type
<code>ImageTypeSpecifier</code> is retrieved from it.
@exception IllegalArgumentException if the resulting image would
have a width or height less than 1.
@exception IllegalArgumentException if the product of
<code>width</code> and <code>height</code> is greater than
<code>Integer.MAX_VALUE</code>.
"
      end
    end

    class 313474 "ImageTypeSpecifier"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class that allows the format of an image (in particular, its
<code>SampleModel</code> and <code>ColorModel</code>) to be
specified in a convenient manner.

"
      classrelation 3756802 // colorModel (<unidirectional association>)
	relation 3756802 --->
	  a role_name "colorModel" protected
	    comment "
The <code>ColorModel</code> to be used as a prototype.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3756802 // colorModel (<unidirectional association>)
	  b parent class_ref 312066 // ColorModel
      end

      classrelation 3756930 // sampleModel (<unidirectional association>)
	relation 3756930 --->
	  a role_name "sampleModel" protected
	    comment "
A <code>SampleModel</code> to be used as a prototype.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3756930 // sampleModel (<unidirectional association>)
	  b parent class_ref 314370 // SampleModel
      end

      classrelation 3757058 // BISpecifier (<unidirectional association>)
	relation 3757058 --->
	  a role_name "BISpecifier" multiplicity "[]" class_relation private
	    comment "
Cached specifiers for all of the standard
<code>BufferedImage</code> types.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3757058 // BISpecifier (<unidirectional association>)
	  b parent class_ref 313474 // ImageTypeSpecifier
      end

      classrelation 3757186 // sRGB (<unidirectional association>)
	relation 3757186 --->
	  a role_name "sRGB" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3757186 // sRGB (<unidirectional association>)
	  b parent class_ref 322178 // ColorSpace
      end

      extra_member 179202 "initialization"
	
	cpp "" ""
	java "  static {
        sRGB = ColorSpace.getInstance(ColorSpace.CS_sRGB);

        BISpecifier =
            new ImageTypeSpecifier[BufferedImage.TYPE_BYTE_INDEXED + 1];
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9658882 "ImageTypeSpecifier"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A constructor to be used by inner subclasses only.
"
      end

      operation 9659010 "ImageTypeSpecifier"
	public explicit_return_type ""
	nparams 2
	  param inout name "colorModel" type class_ref 312066 // ColorModel
	  param inout name "sampleModel" type class_ref 314370 // SampleModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageTypeSpecifier</code> directly
from a <code>ColorModel</code> and a <code>SampleModel</code>.
It is the caller's responsibility to supply compatible
parameters.

@param colorModel a <code>ColorModel</code>.
@param sampleModel a <code>SampleModel</code>.

@exception IllegalArgumentException if either parameter is
<code>null</code>.
@exception IllegalArgumentException if <code>sampleModel</code>
is not compatible with <code>colorModel</code>.
"
      end

      operation 9659138 "ImageTypeSpecifier"
	public explicit_return_type ""
	nparams 1
	  param inout name "image" type class_ref 313986 // RenderedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageTypeSpecifier</code> from a
<code>RenderedImage</code>.  If a <code>BufferedImage</code> is
being used, one of the factory methods
<code>createFromRenderedImage</code> or
<code>createFromBufferedImageType</code> should be used instead in
order to get a more accurate result.

@param image a <code>RenderedImage</code>.

@exception IllegalArgumentException if the argument is
<code>null</code>.
"
      end

      class 1176194 "Packed"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3757314 // <generalisation>
	  relation 3757314 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3757314 // <generalisation>
	    b parent class_ref 313474 // ImageTypeSpecifier
	end

	classrelation 3757442 // colorSpace (<unidirectional association>)
	  relation 3757442 --->
	    a role_name "colorSpace" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3757442 // colorSpace (<unidirectional association>)
	    b parent class_ref 322178 // ColorSpace
	end

	attribute 2244610 "redMask"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2244738 "greenMask"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2244866 "blueMask"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2244994 "alphaMask"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2245122 "transferType"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2245250 "isAlphaPremultiplied"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9659266 "Packed"
	  public explicit_return_type ""
	  nparams 7
	    param inout name "colorSpace" type class_ref 322178 // ColorSpace
	    param in name "redMask" explicit_type "int"
	    param in name "greenMask" explicit_type "int"
	    param in name "blueMask" explicit_type "int"
	    param in name "alphaMask" explicit_type "int"
	    param in name "transferType" explicit_type "int"
	    param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9659394 "createPacked"
	class_operation public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 7
	  param inout name "colorSpace" type class_ref 322178 // ColorSpace
	  param in name "redMask" explicit_type "int"
	  param in name "greenMask" explicit_type "int"
	  param in name "blueMask" explicit_type "int"
	  param in name "alphaMask" explicit_type "int"
	  param in name "transferType" explicit_type "int"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a specifier for a packed image format that will use a
<code>DirectColorModel</code> and a packed
<code>SampleModel</code> to store each pixel packed into in a
single byte, short, or int.

@param colorSpace the desired <code>ColorSpace</code>.
@param redMask a contiguous mask indicated the position of the
red channel.
@param greenMask a contiguous mask indicated the position of the
green channel.
@param blueMask a contiguous mask indicated the position of the
blue channel.
@param alphaMask a contiguous mask indicated the position of the
alpha channel.
@param transferType the desired <code>SampleModel</code> transfer type.
@param isAlphaPremultiplied <code>true</code> if the color channels
will be premultipled by the alpha channel.

@return an <code>ImageTypeSpecifier</code> with the desired
characteristics.

@exception IllegalArgumentException if <code>colorSpace</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>colorSpace</code>
is not of type <code>TYPE_RGB</code>.
@exception IllegalArgumentException if no mask has at least 1
bit set.
@exception IllegalArgumentException if
<code>transferType</code> if not one of
<code>DataBuffer.TYPE_BYTE</code>,
<code>DataBuffer.TYPE_USHORT</code>, or
<code>DataBuffer.TYPE_INT</code>.
"
      end

      operation 9659522 "createComponentCM"
	class_operation package return_type class_ref 312066 // ColorModel
	nparams 5
	  param inout name "colorSpace" type class_ref 322178 // ColorSpace
	  param in name "numBands" explicit_type "int"
	  param in name "dataType" explicit_type "int"
	  param inout name "hasAlpha" explicit_type "boolean"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1176322 "Interleaved"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3757570 // <generalisation>
	  relation 3757570 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3757570 // <generalisation>
	    b parent class_ref 313474 // ImageTypeSpecifier
	end

	classrelation 3757698 // colorSpace (<unidirectional association>)
	  relation 3757698 --->
	    a role_name "colorSpace" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3757698 // colorSpace (<unidirectional association>)
	    b parent class_ref 322178 // ColorSpace
	end

	attribute 2245378 "bandOffsets"
	  package explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2245506 "dataType"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2245634 "hasAlpha"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2245762 "isAlphaPremultiplied"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9659650 "Interleaved"
	  public explicit_return_type ""
	  nparams 5
	    param inout name "colorSpace" type class_ref 322178 // ColorSpace
	    param inout name "bandOffsets" explicit_type "int"
	  multiplicity "[]"
	    param in name "dataType" explicit_type "int"
	    param inout name "hasAlpha" explicit_type "boolean"
	    param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9659778 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9659906 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9660034 "createInterleaved"
	class_operation public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 5
	  param inout name "colorSpace" type class_ref 322178 // ColorSpace
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	  param in name "dataType" explicit_type "int"
	  param inout name "hasAlpha" explicit_type "boolean"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a specifier for an interleaved image format that will
use a <code>ComponentColorModel</code> and a
<code>PixelInterleavedSampleModel</code> to store each pixel
component in a separate byte, short, or int.

@param colorSpace the desired <code>ColorSpace</code>.
@param bandOffsets an array of <code>int</code>s indicating the
offsets for each band.
@param dataType the desired data type, as one of the enumerations
from the <code>DataBuffer</code> class.
@param hasAlpha <code>true</code> if an alpha channel is desired.
@param isAlphaPremultiplied <code>true</code> if the color channels
will be premultipled by the alpha channel.

@return an <code>ImageTypeSpecifier</code> with the desired
characteristics.

@exception IllegalArgumentException if <code>colorSpace</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>bandOffsets</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>dataType</code> is
not one of the legal <code>DataBuffer.TYPE_*</code> constants.
@exception IllegalArgumentException if
<code>bandOffsets.length</code> does not equal the number of
color space components, plus 1 if <code>hasAlpha</code> is
<code>true</code>.
"
      end

      class 1176450 "Banded"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3757826 // <generalisation>
	  relation 3757826 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3757826 // <generalisation>
	    b parent class_ref 313474 // ImageTypeSpecifier
	end

	classrelation 3757954 // colorSpace (<unidirectional association>)
	  relation 3757954 --->
	    a role_name "colorSpace" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3757954 // colorSpace (<unidirectional association>)
	    b parent class_ref 322178 // ColorSpace
	end

	attribute 2245890 "bankIndices"
	  package explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2246018 "bandOffsets"
	  package explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2246146 "dataType"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2246274 "hasAlpha"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2246402 "isAlphaPremultiplied"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9660162 "Banded"
	  public explicit_return_type ""
	  nparams 6
	    param inout name "colorSpace" type class_ref 322178 // ColorSpace
	    param inout name "bankIndices" explicit_type "int"
	  multiplicity "[]"
	    param inout name "bandOffsets" explicit_type "int"
	  multiplicity "[]"
	    param in name "dataType" explicit_type "int"
	    param inout name "hasAlpha" explicit_type "boolean"
	    param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9660290 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9660418 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9660546 "createBanded"
	class_operation public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 6
	  param inout name "colorSpace" type class_ref 322178 // ColorSpace
	  param inout name "bankIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "bandOffsets" explicit_type "int"
	multiplicity "[]"
	  param in name "dataType" explicit_type "int"
	  param inout name "hasAlpha" explicit_type "boolean"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a specifier for a banded image format that will use a
<code>ComponentColorModel</code> and a
<code>BandedSampleModel</code> to store each channel in a
separate array.

@param colorSpace the desired <code>ColorSpace</code>.
@param bankIndices an array of <code>int</code>s indicating the
bank in which each band will be stored.
@param bandOffsets an array of <code>int</code>s indicating the
starting offset of each band within its bank.
@param dataType the desired data type, as one of the enumerations
from the <code>DataBuffer</code> class.
@param hasAlpha <code>true</code> if an alpha channel is desired.
@param isAlphaPremultiplied <code>true</code> if the color channels
will be premultipled by the alpha channel.

@return an <code>ImageTypeSpecifier</code> with the desired
characteristics.

@exception IllegalArgumentException if <code>colorSpace</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>bankIndices</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>bandOffsets</code>
is <code>null</code>.
@exception IllegalArgumentException if the lengths of
<code>bankIndices</code> and <code>bandOffsets</code> differ.
@exception IllegalArgumentException if
<code>bandOffsets.length</code> does not equal the number of
color space components, plus 1 if <code>hasAlpha</code> is
<code>true</code>.
@exception IllegalArgumentException if <code>dataType</code> is
not one of the legal <code>DataBuffer.TYPE_*</code> constants.
"
      end

      class 1176578 "Grayscale"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3758082 // <generalisation>
	  relation 3758082 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3758082 // <generalisation>
	    b parent class_ref 313474 // ImageTypeSpecifier
	end

	attribute 2246530 "bits"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2246658 "dataType"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2246786 "isSigned"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2246914 "hasAlpha"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2247042 "isAlphaPremultiplied"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9660674 "Grayscale"
	  public explicit_return_type ""
	  nparams 5
	    param in name "bits" explicit_type "int"
	    param in name "dataType" explicit_type "int"
	    param inout name "isSigned" explicit_type "boolean"
	    param inout name "hasAlpha" explicit_type "boolean"
	    param inout name "isAlphaPremultiplied" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9660802 "createGrayscale"
	class_operation public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 3
	  param in name "bits" explicit_type "int"
	  param in name "dataType" explicit_type "int"
	  param inout name "isSigned" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a specifier for a grayscale image format that will pack
pixels of the given bit depth into array elements of
the specified data type.

@param bits the number of bits per gray value (1, 2, 4, 8, or 16).
@param dataType the desired data type, as one of the enumerations
from the <code>DataBuffer</code> class.
@param isSigned <code>true</code> if negative values are to
be represented.

@return an <code>ImageTypeSpecifier</code> with the desired
characteristics.

@exception IllegalArgumentException if <code>bits</code> is
not one of 1, 2, 4, 8, or 16.
@exception IllegalArgumentException if <code>dataType</code> is
not one of <code>DataBuffer.TYPE_BYTE</code>,
<code>DataBuffer.TYPE_SHORT</code>, or
<code>DataBuffer.TYPE_USHORT</code>.
@exception IllegalArgumentException if <code>bits</code> is
larger than the bit size of the given <code>dataType</code>.
"
      end

      operation 9660930 "createGrayscale"
	class_operation public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 4
	  param in name "bits" explicit_type "int"
	  param in name "dataType" explicit_type "int"
	  param inout name "isSigned" explicit_type "boolean"
	  param inout name "isAlphaPremultiplied" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a specifier for a grayscale plus alpha image format
that will pack pixels of the given bit depth into array
elements of the specified data type.

@param bits the number of bits per gray value (1, 2, 4, 8, or 16).
@param dataType the desired data type, as one of the enumerations
from the <code>DataBuffer</code> class.
@param isSigned <code>true</code> if negative values are to
be represented.
@param isAlphaPremultiplied <code>true</code> if the luminance channel
will be premultipled by the alpha channel.

@return an <code>ImageTypeSpecifier</code> with the desired
characteristics.

@exception IllegalArgumentException if <code>bits</code> is
not one of 1, 2, 4, 8, or 16.
@exception IllegalArgumentException if <code>dataType</code> is
not one of <code>DataBuffer.TYPE_BYTE</code>,
<code>DataBuffer.TYPE_SHORT</code>, or
<code>DataBuffer.TYPE_USHORT</code>.
@exception IllegalArgumentException if <code>bits</code> is
larger than the bit size of the given <code>dataType</code>.
"
      end

      class 1176706 "Indexed"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3758210 // <generalisation>
	  relation 3758210 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3758210 // <generalisation>
	    b parent class_ref 313474 // ImageTypeSpecifier
	end

	attribute 2247170 "redLUT"
	  package explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2247298 "greenLUT"
	  package explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2247426 "blueLUT"
	  package explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2247554 "alphaLUT"
	  package explicit_type "byte"
	  multiplicity "[]"
	  init_value " null"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2247682 "bits"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2247810 "dataType"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9661058 "Indexed"
	  public explicit_return_type ""
	  nparams 6
	    param inout name "redLUT" explicit_type "byte"
	  multiplicity "[]"
	    param inout name "greenLUT" explicit_type "byte"
	  multiplicity "[]"
	    param inout name "blueLUT" explicit_type "byte"
	  multiplicity "[]"
	    param inout name "alphaLUT" explicit_type "byte"
	  multiplicity "[]"
	    param in name "bits" explicit_type "int"
	    param in name "dataType" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9661186 "createIndexed"
	class_operation public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 6
	  param inout name "redLUT" explicit_type "byte"
	multiplicity "[]"
	  param inout name "greenLUT" explicit_type "byte"
	multiplicity "[]"
	  param inout name "blueLUT" explicit_type "byte"
	multiplicity "[]"
	  param inout name "alphaLUT" explicit_type "byte"
	multiplicity "[]"
	  param in name "bits" explicit_type "int"
	  param in name "dataType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a specifier for an indexed-color image format that will pack
index values of the given bit depth into array elements of
the specified data type.

@param redLUT an array of <code>byte</code>s containing
the red values for each index.
@param greenLUT an array of <code>byte</code>s containing * the
 green values for each index.
@param blueLUT an array of <code>byte</code>s containing the
blue values for each index.
@param alphaLUT an array of <code>byte</code>s containing the
alpha values for each index, or <code>null</code> to create a
fully opaque LUT.
@param bits the number of bits in each index.
@param dataType the desired output type, as one of the enumerations
from the <code>DataBuffer</code> class.

@return an <code>ImageTypeSpecifier</code> with the desired
characteristics.

@exception IllegalArgumentException if <code>redLUT</code> is
<code>null</code>.
@exception IllegalArgumentException if <code>greenLUT</code> is
<code>null</code>.
@exception IllegalArgumentException if <code>blueLUT</code> is
<code>null</code>.
@exception IllegalArgumentException if <code>bits</code> is
not one of 1, 2, 4, 8, or 16.
@exception IllegalArgumentException if the
non-<code>null</code> LUT parameters do not have lengths of
exactly {@code 1 << bits}.
@exception IllegalArgumentException if <code>dataType</code> is
not one of <code>DataBuffer.TYPE_BYTE</code>,
<code>DataBuffer.TYPE_SHORT</code>,
<code>DataBuffer.TYPE_USHORT</code>,
or <code>DataBuffer.TYPE_INT</code>.
@exception IllegalArgumentException if <code>bits</code> is
larger than the bit size of the given <code>dataType</code>.
"
      end

      operation 9661314 "createFromBufferedImageType"
	class_operation public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 1
	  param in name "bufferedImageType" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>ImageTypeSpecifier</code> that encodes
one of the standard <code>BufferedImage</code> types
(other than <code>TYPE_CUSTOM</code>).

@param bufferedImageType an int representing one of the standard
<code>BufferedImage</code> types.

@return an <code>ImageTypeSpecifier</code> with the desired
characteristics.

@exception IllegalArgumentException if
<code>bufferedImageType</code> is not one of the standard
types, or is equal to <code>TYPE_CUSTOM</code>.

@see java.awt.image.BufferedImage
@see java.awt.image.BufferedImage#TYPE_INT_RGB
@see java.awt.image.BufferedImage#TYPE_INT_ARGB
@see java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE
@see java.awt.image.BufferedImage#TYPE_INT_BGR
@see java.awt.image.BufferedImage#TYPE_3BYTE_BGR
@see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR
@see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE
@see java.awt.image.BufferedImage#TYPE_USHORT_565_RGB
@see java.awt.image.BufferedImage#TYPE_USHORT_555_RGB
@see java.awt.image.BufferedImage#TYPE_BYTE_GRAY
@see java.awt.image.BufferedImage#TYPE_USHORT_GRAY
@see java.awt.image.BufferedImage#TYPE_BYTE_BINARY
@see java.awt.image.BufferedImage#TYPE_BYTE_INDEXED
"
      end

      operation 9661442 "createFromRenderedImage"
	class_operation public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 1
	  param inout name "image" type class_ref 313986 // RenderedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>ImageTypeSpecifier</code> that encodes the
layout of a <code>RenderedImage</code> (which may be a
<code>BufferedImage</code>).

@param image a <code>RenderedImage</code>.

@return an <code>ImageTypeSpecifier</code> with the desired
characteristics.

@exception IllegalArgumentException if <code>image</code> is
<code>null</code>.
"
      end

      operation 9661570 "getBufferedImageType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an int containing one of the enumerated constant values
describing image formats from <code>BufferedImage</code>.

@return an <code>int</code> representing a
<code>BufferedImage</code> type.

@see java.awt.image.BufferedImage
@see java.awt.image.BufferedImage#TYPE_CUSTOM
@see java.awt.image.BufferedImage#TYPE_INT_RGB
@see java.awt.image.BufferedImage#TYPE_INT_ARGB
@see java.awt.image.BufferedImage#TYPE_INT_ARGB_PRE
@see java.awt.image.BufferedImage#TYPE_INT_BGR
@see java.awt.image.BufferedImage#TYPE_3BYTE_BGR
@see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR
@see java.awt.image.BufferedImage#TYPE_4BYTE_ABGR_PRE
@see java.awt.image.BufferedImage#TYPE_USHORT_565_RGB
@see java.awt.image.BufferedImage#TYPE_USHORT_555_RGB
@see java.awt.image.BufferedImage#TYPE_BYTE_GRAY
@see java.awt.image.BufferedImage#TYPE_USHORT_GRAY
@see java.awt.image.BufferedImage#TYPE_BYTE_BINARY
@see java.awt.image.BufferedImage#TYPE_BYTE_INDEXED
"
      end

      operation 9661698 "getNumComponents"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of color components
specified by this object.  This is the same value as returned by
<code>ColorModel.getNumComponents</code>

@return the number of components in the image.
"
      end

      operation 9661826 "getNumBands"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of bands
specified by this object.  This is the same value as returned by
<code>SampleModel.getNumBands</code>

@return the number of bands in the image.
"
      end

      operation 9661954 "getBitsPerBand"
	public explicit_return_type "int"
	nparams 1
	  param in name "band" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of bits used to represent samples of the given band.

@param band the index of the band to be queried, as an
int.

@return an int specifying a number of bits.

@exception IllegalArgumentException if <code>band</code> is
negative or greater than the largest band index.
"
      end

      operation 9662082 "getSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>SampleModel</code> based on the settings
encapsulated within this object.  The width and height of the
<code>SampleModel</code> will be set to arbitrary values.

@return a <code>SampleModel</code> with arbitrary dimensions.
"
      end

      operation 9662210 "getSampleModel"
	public return_type class_ref 314370 // SampleModel
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>SampleModel</code> based on the settings
encapsulated within this object.  The width and height of the
<code>SampleModel</code> will be set to the supplied values.

@param width the desired width of the returned <code>SampleModel</code>.
@param height the desired height of the returned
<code>SampleModel</code>.

@return a <code>SampleModel</code> with the given dimensions.

@exception IllegalArgumentException if either <code>width</code> or
<code>height</code> are negative or zero.
@exception IllegalArgumentException if the product of
<code>width</code> and <code>height</code> is greater than
<code>Integer.MAX_VALUE</code>
"
      end

      operation 9662338 "getColorModel"
	public return_type class_ref 312066 // ColorModel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ColorModel</code> specified by this object.

@return a <code>ColorModel</code>.
"
      end

      operation 9662466 "createBufferedImage"
	public return_type class_ref 311554 // BufferedImage
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>BufferedImage</code> with a given width and
height according to the specification embodied in this object.

@param width the desired width of the returned
<code>BufferedImage</code>.
@param height the desired height of the returned
<code>BufferedImage</code>.

@return a new <code>BufferedImage</code>

@exception IllegalArgumentException if either <code>width</code> or
<code>height</code> are negative or zero.
@exception IllegalArgumentException if the product of
<code>width</code> and <code>height</code> is greater than
<code>Integer.MAX_VALUE</code>, or if the number of array
elements needed to store the image is greater than
<code>Integer.MAX_VALUE</code>.
"
      end

      operation 9662594 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the given <code>Object</code> is
an <code>ImageTypeSpecifier</code> and has a
<code>SampleModel</code> and <code>ColorModel</code> that are
equal to those of this object.

@param o the <code>Object</code> to be compared for equality.

@return <code>true</code> if the given object is an equivalent
<code>ImageTypeSpecifier</code>.
"
      end

      operation 9662722 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code for this ImageTypeSpecifier.

@return a hash code for this ImageTypeSpecifier
"
      end

      operation 9662850 "getSpecifier"
	class_operation private return_type class_ref 313474 // ImageTypeSpecifier
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9662978 "createSpecifier"
	class_operation private return_type class_ref 313474 // ImageTypeSpecifier
	nparams 1
	  param in name "type" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 313602 "ImageReadParam"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class describing how a stream is to be decoded.  Instances of
this class or its subclasses are used to supply prescriptive
\"how-to\" information to instances of <code>ImageReader</code>.

<p> An image encoded as part of a file or stream may be thought of
extending out in multiple dimensions: the spatial dimensions of
width and height, a number of bands, and a number of progressive
decoding passes.  This class allows a contiguous (hyper)rectangular
subarea of the image in all of these dimensions to be selected for
decoding.  Additionally, the spatial dimensions may be subsampled
discontinuously.  Finally, color and format conversions may be
specified by controlling the <code>ColorModel</code> and
<code>SampleModel</code> of the destination image, either by
providing a <code>BufferedImage</code> or by using an
<code>ImageTypeSpecifier</code>.

<p> An <code>ImageReadParam</code> object is used to specify how an
image, or a set of images, will be converted on input from
a stream in the context of the Java Image I/O framework.  A plug-in for a
specific image format will return instances of
<code>ImageReadParam</code> from the
<code>getDefaultReadParam</code> method of its
<code>ImageReader</code> implementation.

<p> The state maintained by an instance of
<code>ImageReadParam</code> is independent of any particular image
being decoded.  When actual decoding takes place, the values set in
the read param are combined with the actual properties of the image
being decoded from the stream and the destination
<code>BufferedImage</code> that will receive the decoded pixel
data.  For example, the source region set using
<code>setSourceRegion</code> will first be intersected with the
actual valid source area.  The result will be translated by the
value returned by <code>getDestinationOffset</code>, and the
resulting rectangle intersected with the actual valid destination
area to yield the destination area that will be written.

<p> The parameters specified by an <code>ImageReadParam</code> are
applied to an image as follows.  First, if a rendering size has
been set by <code>setSourceRenderSize</code>, the entire decoded
image is rendered at the size given by
<code>getSourceRenderSize</code>.  Otherwise, the image has its
natural size given by <code>ImageReader.getWidth</code> and
<code>ImageReader.getHeight</code>.

<p> Next, the image is clipped against the source region
specified by <code>getSourceXOffset</code>, <code>getSourceYOffset</code>,
<code>getSourceWidth</code>, and <code>getSourceHeight</code>.

<p> The resulting region is then subsampled according to the
factors given in {@link IIOParam#setSourceSubsampling
IIOParam.setSourceSubsampling}.  The first pixel,
the number of pixels per row, and the number of rows all depend
on the subsampling settings.
Call the minimum X and Y coordinates of the resulting rectangle
(<code>minX</code>, <code>minY</code>), its width <code>w</code>
and its height <code>h</code>.

<p> This rectangle is offset by
(<code>getDestinationOffset().x</code>,
<code>getDestinationOffset().y</code>) and clipped against the
destination bounds.  If no destination image has been set, the
destination is defined to have a width of
<code>getDestinationOffset().x</code> + <code>w</code>, and a
height of <code>getDestinationOffset().y</code> + <code>h</code> so
that all pixels of the source region may be written to the
destination.

<p> Pixels that land, after subsampling, within the destination
image, and that are written in one of the progressive passes
specified by <code>getSourceMinProgressivePass</code> and
<code>getSourceNumProgressivePasses</code> are passed along to the
next step.

<p> Finally, the source samples of each pixel are mapped into
destination bands according to the algorithm described in the
comment for <code>setDestinationBands</code>.

<p> Plug-in writers may extend the functionality of
<code>ImageReadParam</code> by providing a subclass that implements
additional, plug-in specific interfaces.  It is up to the plug-in
to document what interfaces are available and how they are to be
used.  Readers will silently ignore any extended features of an
<code>ImageReadParam</code> subclass of which they are not aware.
Also, they may ignore any optional features that they normally
disable when creating their own <code>ImageReadParam</code>
instances via <code>getDefaultReadParam</code>.

<p> Note that unless a query method exists for a capability, it must
be supported by all <code>ImageReader</code> implementations
(<i>e.g.</i> source render size is optional, but subsampling must be
supported).


@see ImageReader
@see ImageWriter
@see ImageWriteParam
"
      classrelation 3756418 // <generalisation>
	relation 3756418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3756418 // <generalisation>
	  b parent class_ref 326146 // IIOParam
      end

      attribute 2244098 "canSetSourceRenderSize"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "<code>true</code> if this <code>ImageReadParam</code> allows
the source rendering dimensions to be set.  By default, the
value is <code>false</code>.  Subclasses must set this value
manually.

<p> <code>ImageReader</code>s that do not support setting of
the source render size should set this value to
<code>false</code>.

"
      end

      classrelation 3756546 // sourceRenderSize (<unidirectional association>)
	relation 3756546 --->
	  a role_name "sourceRenderSize" init_value " null" protected
	    comment "
The desired rendering width and height of the source, if
<code>canSetSourceRenderSize</code> is <code>true</code>, or
<code>null</code>.

<p> <code>ImageReader</code>s that do not support setting of
the source render size may ignore this value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3756546 // sourceRenderSize (<unidirectional association>)
	  b parent class_ref 316802 // Dimension
      end

      classrelation 3756674 // destination (<unidirectional association>)
	relation 3756674 --->
	  a role_name "destination" init_value " null" protected
	    comment "
The current destination <code>BufferedImage</code>, or
<code>null</code> if none has been set.  By default, the value
is <code>null</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3756674 // destination (<unidirectional association>)
	  b parent class_ref 311554 // BufferedImage
      end

      attribute 2244226 "destinationBands"
	protected explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The set of destination bands to be used, as an array of
<code>int</code>s.  By default, the value is <code>null</code>,
indicating all destination bands should be written in order.

"
      end

      attribute 2244354 "minProgressivePass"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum index of a progressive pass to read from the
source.  By default, the value is set to 0, which indicates
that passes starting with the first available pass should be
decoded.

<p> Subclasses should ensure that this value is
non-negative.

"
      end

      attribute 2244482 "numProgressivePasses"
	protected explicit_type "int"
	init_value " Integer.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum number of progressive passes to read from the
source.  By default, the value is set to
<code>Integer.MAX_VALUE</code>, which indicates that passes up
to and including the last available pass should be decoded.

<p> Subclasses should ensure that this value is positive.
Additionally, if the value is not
<code>Integer.MAX_VALUE</code>, then <code>minProgressivePass +
numProgressivePasses - 1</code> should not exceed
<code>Integer.MAX_VALUE</code>.

"
      end

      operation 9657218 "ImageReadParam"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageReadParam</code>.
"
      end

      operation 9657346 "setDestinationType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "destinationType" type class_ref 313474 // ImageTypeSpecifier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Comment inherited"
      end

      operation 9657474 "setDestination"
	public explicit_return_type "void"
	nparams 1
	  param inout name "destination" type class_ref 311554 // BufferedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Supplies a <code>BufferedImage</code> to be used as the
destination for decoded pixel data.  The currently set image
will be written to by the <code>read</code>,
<code>readAll</code>, and <code>readRaster</code> methods, and
a reference to it will be returned by those methods.

<p> Pixel data from the aforementioned methods will be written
starting at the offset specified by
<code>getDestinationOffset</code>.

<p> If <code>destination</code> is <code>null</code>, a
newly-created <code>BufferedImage</code> will be returned by
those methods.

<p> At the time of reading, the image is checked to verify that
its <code>ColorModel</code> and <code>SampleModel</code>
correspond to one of the <code>ImageTypeSpecifier</code>s
returned from the <code>ImageReader</code>'s
<code>getImageTypes</code> method.  If it does not, the reader
will throw an <code>IIOException</code>.

@param destination the BufferedImage to be written to, or
<code>null</code>.

@see #getDestination
"
      end

      operation 9657602 "getDestination"
	public return_type class_ref 311554 // BufferedImage
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>BufferedImage</code> currently set by the
<code>setDestination</code> method, or <code>null</code>
if none is set.

@return the BufferedImage to be written to.

@see #setDestination
"
      end

      operation 9657730 "setDestinationBands"
	public explicit_return_type "void"
	nparams 1
	  param inout name "destinationBands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the indices of the destination bands where data
will be placed.  Duplicate indices are not allowed.

<p> A <code>null</code> value indicates that all destination
bands will be used.

<p> Choosing a destination band subset will not affect the
number of bands in the output image of a read if no destination
image is specified; the created destination image will still
have the same number of bands as if this method had never been
called.  If a different number of bands in the destination
image is desired, an image must be supplied using the
<code>ImageReadParam.setDestination</code> method.

<p> At the time of reading or writing, an
<code>IllegalArgumentException</code> will be thrown by the
reader or writer if a value larger than the largest destination
band index has been specified, or if the number of source bands
and destination bands to be used differ.  The
<code>ImageReader.checkReadParamBandSettings</code> method may
be used to automate this test.

@param destinationBands an array of integer band indices to be
used.

@exception IllegalArgumentException if <code>destinationBands</code>
contains a negative or duplicate value.

@see #getDestinationBands
@see #getSourceBands
@see ImageReader#checkReadParamBandSettings
"
      end

      operation 9657858 "getDestinationBands"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of band indices where data will be placed.
If no value has been set, <code>null</code> is returned to
indicate that all destination bands will be used.

@return the indices of the destination bands to be used,
or <code>null</code>.

@see #setDestinationBands
"
      end

      operation 9657986 "canSetSourceRenderSize"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this reader allows the source
image to be rendered at an arbitrary size as part of the
decoding process, by means of the
<code>setSourceRenderSize</code> method.  If this method
returns <code>false</code>, calls to
<code>setSourceRenderSize</code> will throw an
<code>UnsupportedOperationException</code>.

@return <code>true</code> if setting source rendering size is
supported.

@see #setSourceRenderSize
"
      end

      operation 9658114 "setSourceRenderSize"
	public explicit_return_type "void"
	nparams 1
	  param inout name "size" type class_ref 316802 // Dimension
	nexceptions 1
	  exception class_ref 193538 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the image is able to be rendered at an arbitrary size, sets
the source width and height to the supplied values.  Note that
the values returned from the <code>getWidth</code> and
<code>getHeight</code> methods on <code>ImageReader</code> are
not affected by this method; they will continue to return the
default size for the image.  Similarly, if the image is also
tiled the tile width and height are given in terms of the default
size.

<p> Typically, the width and height should be chosen such that
the ratio of width to height closely approximates the aspect
ratio of the image, as returned from
<code>ImageReader.getAspectRatio</code>.

<p> If this plug-in does not allow the rendering size to be
set, an <code>UnsupportedOperationException</code> will be
thrown.

<p> To remove the render size setting, pass in a value of
<code>null</code> for <code>size</code>.

@param size a <code>Dimension</code> indicating the desired
width and height.

@exception IllegalArgumentException if either the width or the
height is negative or 0.
@exception UnsupportedOperationException if image resizing
is not supported by this plug-in.

@see #getSourceRenderSize
@see ImageReader#getWidth
@see ImageReader#getHeight
@see ImageReader#getAspectRatio
"
      end

      operation 9658242 "getSourceRenderSize"
	public return_type class_ref 316802 // Dimension
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width and height of the source image as it
will be rendered during decoding, if they have been set via the
<code>setSourceRenderSize</code> method.  A
<code>null</code>value indicates that no setting has been made.

@return the rendered width and height of the source image
as a <code>Dimension</code>.

@see #setSourceRenderSize
"
      end

      operation 9658370 "setSourceProgressivePasses"
	public explicit_return_type "void"
	nparams 2
	  param in name "minPass" explicit_type "int"
	  param in name "numPasses" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the range of progressive passes that will be decoded.
Passes outside of this range will be ignored.

<p> A progressive pass is a re-encoding of the entire image,
generally at progressively higher effective resolutions, but
requiring greater transmission bandwidth.  The most common use
of progressive encoding is found in the JPEG format, where
successive passes include more detailed representations of the
high-frequency image content.

<p> The actual number of passes to be decoded is determined
during decoding, based on the number of actual passes available
in the stream.  Thus if <code>minPass + numPasses - 1</code> is
larger than the index of the last available passes, decoding
will end with that pass.

<p> A value of <code>numPasses</code> of
<code>Integer.MAX_VALUE</code> indicates that all passes from
<code>minPass</code> forward should be read.  Otherwise, the
index of the last pass (<i>i.e.</i>, <code>minPass + numPasses
- 1</code>) must not exceed <code>Integer.MAX_VALUE</code>.

<p> There is no <code>unsetSourceProgressivePasses</code>
method; the same effect may be obtained by calling
<code>setSourceProgressivePasses(0, Integer.MAX_VALUE)</code>.

@param minPass the index of the first pass to be decoded.
@param numPasses the maximum number of passes to be decoded.

@exception IllegalArgumentException if <code>minPass</code> is
negative, <code>numPasses</code> is negative or 0, or
<code>numPasses</code> is smaller than
<code>Integer.MAX_VALUE</code> but <code>minPass +
numPasses - 1</code> is greater than
<code>INTEGER.MAX_VALUE</code>.

@see #getSourceMinProgressivePass
@see #getSourceMaxProgressivePass
"
      end

      operation 9658498 "getSourceMinProgressivePass"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first progressive pass that will be
decoded. If no value has been set, 0 will be returned (which is
the correct value).

@return the index of the first pass that will be decoded.

@see #setSourceProgressivePasses
@see #getSourceNumProgressivePasses
"
      end

      operation 9658626 "getSourceMaxProgressivePass"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If <code>getSourceNumProgressivePasses</code> is equal to
<code>Integer.MAX_VALUE</code>, returns
<code>Integer.MAX_VALUE</code>.  Otherwise, returns
<code>getSourceMinProgressivePass() +
getSourceNumProgressivePasses() - 1</code>.

@return the index of the last pass to be read, or
<code>Integer.MAX_VALUE</code>.
"
      end

      operation 9658754 "getSourceNumProgressivePasses"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of the progressive passes that will be
decoded. If no value has been set,
<code>Integer.MAX_VALUE</code> will be returned (which is the
correct value).

@return the number of the passes that will be decoded.

@see #setSourceProgressivePasses
@see #getSourceMinProgressivePass
"
      end
    end

    class 313858 "IIOImage"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple container class to aggregate an image, a set of
thumbnail (preview) images, and an object representing metadata
associated with the image.

<p> The image data may take the form of either a
<code>RenderedImage</code>, or a <code>Raster</code>.  Reader
methods that return an <code>IIOImage</code> will always return a
<code>BufferedImage</code> using the <code>RenderedImage</code>
reference.  Writer methods that accept an <code>IIOImage</code>
will always accept a <code>RenderedImage</code>, and may optionally
accept a <code>Raster</code>.

<p> Exactly one of <code>getRenderedImage</code> and
<code>getRaster</code> will return a non-<code>null</code> value.
Subclasses are responsible for ensuring this behavior.

@see ImageReader#readAll(int, ImageReadParam)
@see ImageReader#readAll(java.util.Iterator)
@see ImageWriter#write(javax.imageio.metadata.IIOMetadata,
                       IIOImage, ImageWriteParam)
@see ImageWriter#write(IIOImage)
@see ImageWriter#writeToSequence(IIOImage, ImageWriteParam)
@see ImageWriter#writeInsert(int, IIOImage, ImageWriteParam)

"
      classrelation 3751426 // image (<unidirectional association>)
	relation 3751426 --->
	  a role_name "image" protected
	    comment "
The <code>RenderedImage</code> being referenced.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3751426 // image (<unidirectional association>)
	  b parent class_ref 313986 // RenderedImage
      end

      classrelation 3751554 // raster (<unidirectional association>)
	relation 3751554 --->
	  a role_name "raster" protected
	    comment "
The <code>Raster</code> being referenced.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3751554 // raster (<unidirectional association>)
	  b parent class_ref 311682 // Raster
      end

      classrelation 3751682 // thumbnails (<unidirectional association>)
	relation 3751682 --->
	  a role_name "thumbnails" init_value " null" protected
	    comment "
A <code>List</code> of <code>BufferedImage</code> thumbnails,
or <code>null</code>.  Non-<code>BufferedImage</code> objects
must not be stored in this <code>List</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends BufferedImage> ${name}${value};
"
	    classrelation_ref 3751682 // thumbnails (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3751810 // metadata (<unidirectional association>)
	relation 3751810 --->
	  a role_name "metadata" protected
	    comment "
An <code>IIOMetadata</code> object containing metadata
associated with the image.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3751810 // metadata (<unidirectional association>)
	  b parent class_ref 313730 // IIOMetadata
      end

      operation 9642370 "IIOImage"
	public explicit_return_type ""
	nparams 3
	  param inout name "image" type class_ref 313986 // RenderedImage
	  param inout name "thumbnails" type class_ref 175362 // List
	  param inout name "metadata" type class_ref 313730 // IIOMetadata
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? extends BufferedImage> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IIOImage</code> containing a
<code>RenderedImage</code>, and thumbnails and metadata
associated with it.

<p> All parameters are stored by reference.

<p> The <code>thumbnails</code> argument must either be
<code>null</code> or contain only <code>BufferedImage</code>
objects.

@param image a <code>RenderedImage</code>.
@param thumbnails a <code>List</code> of <code>BufferedImage</code>s,
or <code>null</code>.
@param metadata an <code>IIOMetadata</code> object, or
<code>null</code>.

@exception IllegalArgumentException if <code>image</code> is
<code>null</code>.
"
      end

      operation 9642498 "IIOImage"
	public explicit_return_type ""
	nparams 3
	  param inout name "raster" type class_ref 311682 // Raster
	  param inout name "thumbnails" type class_ref 175362 // List
	  param inout name "metadata" type class_ref 313730 // IIOMetadata
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? extends BufferedImage> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IIOImage</code> containing a
<code>Raster</code>, and thumbnails and metadata
associated with it.

<p> All parameters are stored by reference.

@param raster a <code>Raster</code>.
@param thumbnails a <code>List</code> of <code>BufferedImage</code>s,
or <code>null</code>.
@param metadata an <code>IIOMetadata</code> object, or
<code>null</code>.

@exception IllegalArgumentException if <code>raster</code> is
<code>null</code>.
"
      end

      operation 9642626 "getRenderedImage"
	public return_type class_ref 313986 // RenderedImage
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currently set <code>RenderedImage</code>, or
<code>null</code> if only a <code>Raster</code> is available.

@return a <code>RenderedImage</code>, or <code>null</code>.

@see #setRenderedImage
"
      end

      operation 9642754 "setRenderedImage"
	public explicit_return_type "void"
	nparams 1
	  param inout name "image" type class_ref 313986 // RenderedImage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current <code>RenderedImage</code>.  The value is
stored by reference.  Any existing <code>Raster</code> is
discarded.

@param image a <code>RenderedImage</code>.

@exception IllegalArgumentException if <code>image</code> is
<code>null</code>.

@see #getRenderedImage
"
      end

      operation 9642882 "hasRaster"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this <code>IIOImage</code> stores
a <code>Raster</code> rather than a <code>RenderedImage</code>.

@return <code>true</code> if a <code>Raster</code> is
available.
"
      end

      operation 9643010 "getRaster"
	public return_type class_ref 311682 // Raster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currently set <code>Raster</code>, or
<code>null</code> if only a <code>RenderedImage</code> is
available.

@return a <code>Raster</code>, or <code>null</code>.

@see #setRaster
"
      end

      operation 9643138 "setRaster"
	public explicit_return_type "void"
	nparams 1
	  param inout name "raster" type class_ref 311682 // Raster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current <code>Raster</code>.  The value is
stored by reference.  Any existing <code>RenderedImage</code> is
discarded.

@param raster a <code>Raster</code>.

@exception IllegalArgumentException if <code>raster</code> is
<code>null</code>.

@see #getRaster
"
      end

      operation 9643266 "getNumThumbnails"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of thumbnails stored in this
<code>IIOImage</code>.

@return the number of thumbnails, as an <code>int</code>.
"
      end

      operation 9643394 "getThumbnail"
	public return_type class_ref 311554 // BufferedImage
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a thumbnail associated with the main image.

@param index the index of the desired thumbnail image.

@return a thumbnail image, as a <code>BufferedImage</code>.

@exception IndexOutOfBoundsException if the supplied index is
negative or larger than the largest valid index.
@exception ClassCastException if a
non-<code>BufferedImage</code> object is encountered in the
list of thumbnails at the given index.

@see #getThumbnails
@see #setThumbnails
"
      end

      operation 9643522 "getThumbnails"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends BufferedImage> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current <code>List</code> of thumbnail
<code>BufferedImage</code>s, or <code>null</code> if none is
set.  A live reference is returned.

@return the current <code>List</code> of
<code>BufferedImage</code> thumbnails, or <code>null</code>.

@see #getThumbnail(int)
@see #setThumbnails
"
      end

      operation 9643650 "setThumbnails"
	public explicit_return_type "void"
	nparams 1
	  param inout name "thumbnails" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends BufferedImage> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the list of thumbnails to a new <code>List</code> of
<code>BufferedImage</code>s, or to <code>null</code>.  The
reference to the previous <code>List</code> is discarded.

<p> The <code>thumbnails</code> argument must either be
<code>null</code> or contain only <code>BufferedImage</code>
objects.

@param thumbnails a <code>List</code> of
<code>BufferedImage</code> thumbnails, or <code>null</code>.

@see #getThumbnail(int)
@see #getThumbnails
"
      end

      operation 9643778 "getMetadata"
	public return_type class_ref 313730 // IIOMetadata
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the current <code>IIOMetadata</code>
object, or <code>null</code> is none is set.

@return an <code>IIOMetadata</code> object, or <code>null</code>.

@see #setMetadata
"
      end

      operation 9643906 "setMetadata"
	public explicit_return_type "void"
	nparams 1
	  param inout name "metadata" type class_ref 313730 // IIOMetadata
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>IIOMetadata</code> to a new object, or
<code>null</code>.

@param metadata an <code>IIOMetadata</code> object, or
<code>null</code>.

@see #getMetadata
"
      end
    end

    class 314242 "IIOException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception class used for signaling run-time failure of reading
and writing operations.

<p> In addition to a message string, a reference to another
<code>Throwable</code> (<code>Error</code> or
<code>Exception</code>) is maintained.  This reference, if
non-<code>null</code>, refers to the event that caused this
exception to occur.  For example, an <code>IOException</code> while
reading from a <code>File</code> would be stored there.

"
      classrelation 3751298 // <generalisation>
	relation 3751298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3751298 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      operation 9642114 "IIOException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IIOException</code> with a given message
<code>String</code>.  No underlying cause is set;
<code>getCause</code> will return <code>null</code>.

@param message the error message.

@see #getMessage
"
      end

      operation 9642242 "IIOException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>IIOException</code> with a given message
<code>String</code> and a <code>Throwable</code> that was its
underlying cause.

@param message the error message.
@param cause the <code>Throwable</code> (<code>Error</code> or
<code>Exception</code>) that caused this exception to occur.

@see #getCause
@see #getMessage
"
      end
    end

    class 316034 "ImageWriter"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract superclass for encoding and writing images.  This class
must be subclassed by classes that write out images in the context
of the Java Image I/O framework.

<p> <code>ImageWriter</code> objects are normally instantiated by
the service provider class for the specific format.  Service
provider classes are registered with the <code>IIORegistry</code>,
which uses them for format recognition and presentation of
available format readers and writers.

<p>

@see ImageReader
@see ImageWriteParam
@see javax.imageio.spi.IIORegistry
@see javax.imageio.spi.ImageWriterSpi

"
      classrelation 529154 // <realization>
	relation 529154 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 529154 // <realization>
	  b parent class_ref 316162 // ImageTranscoder
      end

      classrelation 529282 // originatingProvider (<unidirectional association>)
	relation 529282 --->
	  a role_name "originatingProvider" init_value " null" protected
	    comment "
The <code>ImageWriterSpi</code> that instantiated this object,
or <code>null</code> if its identity is not known or none
exists.  By default it is initialized to <code>null</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 529282 // originatingProvider (<unidirectional association>)
	  b parent class_ref 316418 // ImageWriterSpi
      end

      classrelation 529410 // output (<unidirectional association>)
	relation 529410 --->
	  a role_name "output" init_value " null" protected
	    comment "
The <code>ImageOutputStream</code> or other <code>Object</code>
set by <code>setOutput</code> and retrieved by
<code>getOutput</code>.  By default it is initialized to
<code>null</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 529410 // output (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 529538 // availableLocales (<unidirectional association>)
	relation 529538 --->
	  a role_name "availableLocales" multiplicity "[]" init_value " null" protected
	    comment "
An array of <code>Locale</code>s that may be used to localize
warning messages and compression setting values, or
<code>null</code> if localization is not supported.  By default
it is initialized to <code>null</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 529538 // availableLocales (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 529666 // locale (<unidirectional association>)
	relation 529666 --->
	  a role_name "locale" init_value " null" protected
	    comment "
The current <code>Locale</code> to be used for localization, or
<code>null</code> if none has been set.  By default it is
initialized to <code>null</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 529666 // locale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 529794 // warningListeners (<unidirectional association>)
	relation 529794 --->
	  a role_name "warningListeners" init_value " null" protected
	    comment "
A <code>List</code> of currently registered
<code>IIOWriteWarningListener</code>s, initialized by default to
<code>null</code>, which is synonymous with an empty
<code>List</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<IIOWriteWarningListener> ${name}${value};
"
	    classrelation_ref 529794 // warningListeners (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 529922 // warningLocales (<unidirectional association>)
	relation 529922 --->
	  a role_name "warningLocales" init_value " null" protected
	    comment "
A <code>List</code> of <code>Locale</code>s, one for each
element of <code>warningListeners</code>, initialized by default
<code>null</code>, which is synonymous with an empty
<code>List</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Locale> ${name}${value};
"
	    classrelation_ref 529922 // warningLocales (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 530050 // progressListeners (<unidirectional association>)
	relation 530050 --->
	  a role_name "progressListeners" init_value " null" protected
	    comment "
A <code>List</code> of currently registered
<code>IIOWriteProgressListener</code>s, initialized by default
<code>null</code>, which is synonymous with an empty
<code>List</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<IIOWriteProgressListener> ${name}${value};
"
	    classrelation_ref 530050 // progressListeners (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      attribute 359426 "abortFlag"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If <code>true</code>, the current write operation should be
aborted.

"
      end

      operation 1688706 "ImageWriter"
	protected explicit_return_type ""
	nparams 1
	  param inout name "originatingProvider" type class_ref 316418 // ImageWriterSpi
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageWriter</code> and sets its
<code>originatingProvider</code> instance variable to the
supplied value.

<p> Subclasses that make use of extensions should provide a
constructor with signature <code>(ImageWriterSpi,
Object)</code> in order to retrieve the extension object.  If
the extension object is unsuitable, an
<code>IllegalArgumentException</code> should be thrown.

@param originatingProvider the <code>ImageWriterSpi</code> that
is constructing this object, or <code>null</code>.
"
      end

      operation 1688834 "getOriginatingProvider"
	public return_type class_ref 316418 // ImageWriterSpi
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ImageWriterSpi</code> object that created
this <code>ImageWriter</code>, or <code>null</code> if this
object was not created through the <code>IIORegistry</code>.

<p> The default implementation returns the value of the
<code>originatingProvider</code> instance variable.

@return an <code>ImageWriterSpi</code>, or <code>null</code>.

@see ImageWriterSpi
"
      end

      operation 1688962 "setOutput"
	public explicit_return_type "void"
	nparams 1
	  param inout name "output" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the destination to the given
<code>ImageOutputStream</code> or other <code>Object</code>.
The destination is assumed to be ready to accept data, and will
not be closed at the end of each write. This allows distributed
imaging applications to transmit a series of images over a
single network connection.  If <code>output</code> is
<code>null</code>, any currently set output will be removed.

<p> If <code>output</code> is an
<code>ImageOutputStream</code>, calls to the
<code>write</code>, <code>writeToSequence</code>, and
<code>prepareWriteEmpty</code>/<code>endWriteEmpty</code>
methods will preserve the existing contents of the stream.
Other write methods, such as <code>writeInsert</code>,
<code>replaceStreamMetadata</code>,
<code>replaceImageMetadata</code>, <code>replacePixels</code>,
<code>prepareInsertEmpty</code>/<code>endInsertEmpty</code>,
and <code>endWriteSequence</code>, require the full contents
of the stream to be readable and writable, and may alter any
portion of the stream.

<p> Use of a general <code>Object</code> other than an
<code>ImageOutputStream</code> is intended for writers that
interact directly with an output device or imaging protocol.
The set of legal classes is advertised by the writer's service
provider's <code>getOutputTypes</code> method; most writers
will return a single-element array containing only
<code>ImageOutputStream.class</code> to indicate that they
accept only an <code>ImageOutputStream</code>.

<p> The default implementation sets the <code>output</code>
instance variable to the value of <code>output</code> after
checking <code>output</code> against the set of classes
advertised by the originating provider, if there is one.

@param output the <code>ImageOutputStream</code> or other
<code>Object</code> to use for future writing.

@exception IllegalArgumentException if <code>output</code> is
not an instance of one of the classes returned by the
originating service provider's <code>getOutputTypes</code>
method.

@see #getOutput
"
      end

      operation 1689090 "getOutput"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>ImageOutputStream</code> or other
<code>Object</code> set by the most recent call to the
<code>setOutput</code> method.  If no destination has been
set, <code>null</code> is returned.

<p> The default implementation returns the value of the
<code>output</code> instance variable.

@return the <code>Object</code> that was specified using
<code>setOutput</code>, or <code>null</code>.

@see #setOutput
"
      end

      operation 1689218 "getAvailableLocales"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Localization

Returns an array of <code>Locale</code>s that may be used to
localize warning listeners and compression settings.  A return
value of <code>null</code> indicates that localization is not
supported.

<p> The default implementation returns a clone of the
<code>availableLocales</code> instance variable if it is
non-<code>null</code>, or else returns <code>null</code>.

@return an array of <code>Locale</code>s that may be used as
arguments to <code>setLocale</code>, or <code>null</code>.
"
      end

      operation 1689346 "setLocale"
	public explicit_return_type "void"
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the current <code>Locale</code> of this
<code>ImageWriter</code> to the given value.  A value of
<code>null</code> removes any previous setting, and indicates
that the writer should localize as it sees fit.

<p> The default implementation checks <code>locale</code>
against the values returned by
<code>getAvailableLocales</code>, and sets the
<code>locale</code> instance variable if it is found.  If
<code>locale</code> is <code>null</code>, the instance variable
is set to <code>null</code> without any checking.

@param locale the desired <code>Locale</code>, or
<code>null</code>.

@exception IllegalArgumentException if <code>locale</code> is
non-<code>null</code> but is not one of the values returned by
<code>getAvailableLocales</code>.

@see #getLocale
"
      end

      operation 1689474 "getLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currently set <code>Locale</code>, or
<code>null</code> if none has been set.

<p> The default implementation returns the value of the
<code>locale</code> instance variable.

@return the current <code>Locale</code>, or <code>null</code>.

@see #setLocale
"
      end

      operation 1689602 "getDefaultWriteParam"
	public return_type class_ref 316290 // ImageWriteParam
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Write params

Returns a new <code>ImageWriteParam</code> object of the
appropriate type for this file format containing default
values, that is, those values that would be used
if no <code>ImageWriteParam</code> object were specified.  This
is useful as a starting point for tweaking just a few parameters
and otherwise leaving the default settings alone.

<p> The default implementation constructs and returns a new
<code>ImageWriteParam</code> object that does not allow tiling,
progressive encoding, or compression, and that will be
localized for the current <code>Locale</code> (<i>i.e.</i>,
what you would get by calling <code>new
ImageWriteParam(getLocale())</code>.

<p> Individual plug-ins may return an instance of
<code>ImageWriteParam</code> with additional optional features
enabled, or they may return an instance of a plug-in specific
subclass of <code>ImageWriteParam</code>.

@return a new <code>ImageWriteParam</code> object containing
default values.
"
      end

      operation 1689730 "getDefaultStreamMetadata"
	abstract public return_type class_ref 313730 // IIOMetadata
	nparams 1
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Metadata

Returns an <code>IIOMetadata</code> object containing default
values for encoding a stream of images.  The contents of the
object may be manipulated using either the XML tree structure
returned by the <code>IIOMetadata.getAsTree</code> method, an
<code>IIOMetadataController</code> object, or via plug-in
specific interfaces, and the resulting data supplied to one of
the <code>write</code> methods that take a stream metadata
parameter.

<p> An optional <code>ImageWriteParam</code> may be supplied
for cases where it may affect the structure of the stream
metadata.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> Writers that do not make use of stream metadata
(<i>e.g.</i>, writers for single-image formats) should return
<code>null</code>.

@param param an <code>ImageWriteParam</code> that will be used to
encode the image, or <code>null</code>.

@return an <code>IIOMetadata</code> object.
"
      end

      operation 1689858 "getDefaultImageMetadata"
	abstract public return_type class_ref 313730 // IIOMetadata
	nparams 2
	  param inout name "imageType" type class_ref 313474 // ImageTypeSpecifier
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>IIOMetadata</code> object containing default
values for encoding an image of the given type.  The contents
of the object may be manipulated using either the XML tree
structure returned by the <code>IIOMetadata.getAsTree</code>
method, an <code>IIOMetadataController</code> object, or via
plug-in specific interfaces, and the resulting data supplied to
one of the <code>write</code> methods that take a stream
metadata parameter.

<p> An optional <code>ImageWriteParam</code> may be supplied
for cases where it may affect the structure of the image
metadata.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

@param imageType an <code>ImageTypeSpecifier</code> indicating the
format of the image to be written later.
@param param an <code>ImageWriteParam</code> that will be used to
encode the image, or <code>null</code>.

@return an <code>IIOMetadata</code> object.
"
      end

      operation 1689986 "convertStreamMetadata"
	abstract public return_type class_ref 313730 // IIOMetadata
	nparams 2
	  param inout name "inData" type class_ref 313730 // IIOMetadata
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " comment inherited"
      end

      operation 1690114 "convertImageMetadata"
	abstract public return_type class_ref 313730 // IIOMetadata
	nparams 3
	  param inout name "inData" type class_ref 313730 // IIOMetadata
	  param inout name "imageType" type class_ref 313474 // ImageTypeSpecifier
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " comment inherited"
      end

      operation 1690242 "getNumThumbnailsSupported"
	public explicit_return_type "int"
	nparams 4
	  param inout name "imageType" type class_ref 313474 // ImageTypeSpecifier
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	  param inout name "streamMetadata" type class_ref 313730 // IIOMetadata
	  param inout name "imageMetadata" type class_ref 313730 // IIOMetadata
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Thumbnails

Returns the number of thumbnails supported by the format being
written, given the image type and any additional write
parameters and metadata objects that will be used during
encoding.  A return value of <code>-1</code> indicates that
insufficient information is available.

<p> An <code>ImageWriteParam</code> may optionally be supplied
for cases where it may affect thumbnail handling.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> The default implementation returns 0.

@param imageType an <code>ImageTypeSpecifier</code> indicating
the type of image to be written, or <code>null</code>.
@param param the <code>ImageWriteParam</code> that will be used for
writing, or <code>null</code>.
@param streamMetadata an <code>IIOMetadata</code> object that will
be used for writing, or <code>null</code>.
@param imageMetadata an <code>IIOMetadata</code> object that will
be used for writing, or <code>null</code>.

@return the number of thumbnails that may be written given the
supplied parameters, or <code>-1</code> if insufficient
information is available.
"
      end

      operation 1690370 "getPreferredThumbnailSizes"
	public return_type class_ref 316802 // Dimension
	nparams 4
	  param inout name "imageType" type class_ref 313474 // ImageTypeSpecifier
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	  param inout name "streamMetadata" type class_ref 313730 // IIOMetadata
	  param inout name "imageMetadata" type class_ref 313730 // IIOMetadata
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Dimension</code>s indicating the
legal size ranges for thumbnail images as they will be encoded
in the output file or stream.  This information is merely
advisory; the writer will resize any supplied thumbnails as
necessary.

<p> The information is returned as a set of pairs; the first
element of a pair contains an (inclusive) minimum width and
height, and the second element contains an (inclusive) maximum
width and height.  Together, each pair defines a valid range of
sizes.  To specify a fixed size, the same width and height will
appear for both elements.  A return value of <code>null</code>
indicates that the size is arbitrary or unknown.

<p> An <code>ImageWriteParam</code> may optionally be supplied
for cases where it may affect thumbnail handling.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> The default implementation returns <code>null</code>.

@param imageType an <code>ImageTypeSpecifier</code> indicating the
type of image to be written, or <code>null</code>.
@param param the <code>ImageWriteParam</code> that will be used for
writing, or <code>null</code>.
@param streamMetadata an <code>IIOMetadata</code> object that will
be used for writing, or <code>null</code>.
@param imageMetadata an <code>IIOMetadata</code> object that will
be used for writing, or <code>null</code>.

@return an array of <code>Dimension</code>s with an even length
of at least two, or <code>null</code>.
"
      end

      operation 1690498 "canWriteRasters"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the methods that take an
<code>IIOImage</code> parameter are capable of dealing with a
<code>Raster</code> (as opposed to <code>RenderedImage</code>)
source image.  If this method returns <code>false</code>, then
those methods will throw an
<code>UnsupportedOperationException</code> if supplied with an
<code>IIOImage</code> containing a <code>Raster</code>.

<p> The default implementation returns <code>false</code>.

@return <code>true</code> if <code>Raster</code> sources are
supported.
"
      end

      operation 1690626 "write"
	abstract public explicit_return_type "void"
	nparams 3
	  param inout name "streamMetadata" type class_ref 313730 // IIOMetadata
	  param inout name "image" type class_ref 313858 // IIOImage
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a complete image stream containing a single image and
associated stream and image metadata and thumbnails to the
output.  Any necessary header information is included.  If the
output is an <code>ImageOutputStream</code>, its existing
contents prior to the current seek position are not affected,
and need not be readable or writable.

<p> The output must have been set beforehand using the
<code>setOutput</code> method.

<p> Stream metadata may optionally be supplied; if it is
<code>null</code>, default stream metadata will be used.

<p> If <code>canWriteRasters</code> returns <code>true</code>,
the <code>IIOImage</code> may contain a <code>Raster</code>
source.  Otherwise, it must contain a
<code>RenderedImage</code> source.

<p> The supplied thumbnails will be resized if needed, and any
thumbnails in excess of the supported number will be ignored.
If the format requires additional thumbnails that are not
provided, the writer should generate them internally.

<p>  An <code>ImageWriteParam</code> may
optionally be supplied to control the writing process.  If
<code>param</code> is <code>null</code>, a default write param
will be used.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

@param streamMetadata an <code>IIOMetadata</code> object representing
stream metadata, or <code>null</code> to use default values.
@param image an <code>IIOImage</code> object containing an
image, thumbnails, and metadata to be written.
@param param an <code>ImageWriteParam</code>, or
<code>null</code> to use a default
<code>ImageWriteParam</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if <code>image</code>
contains a <code>Raster</code> and <code>canWriteRasters</code>
returns <code>false</code>.
@exception IllegalArgumentException if <code>image</code> is
<code>null</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 1690754 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "image" type class_ref 313858 // IIOImage
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a complete image stream containing a single image with
default metadata and thumbnails to the output.  This method is
a shorthand for <code>write(null, image, null)</code>.

@param image an <code>IIOImage</code> object containing an
image, thumbnails, and metadata to be written.

@exception IllegalStateException if the output has not
been set.
@exception IllegalArgumentException if <code>image</code> is
<code>null</code>.
@exception UnsupportedOperationException if <code>image</code>
contains a <code>Raster</code> and <code>canWriteRasters</code>
returns <code>false</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 1690882 "write"
	public explicit_return_type "void"
	nparams 1
	  param inout name "image" type class_ref 313986 // RenderedImage
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a complete image stream consisting of a single image
with default metadata and thumbnails to the output.  This
method is a shorthand for <code>write(null, new IIOImage(image,
null, null), null)</code>.

@param image a <code>RenderedImage</code> to be written.

@exception IllegalStateException if the output has not
been set.
@exception IllegalArgumentException if <code>image</code> is
<code>null</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 1691010 "unsupported"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that the output has been set, then throw an
 UnsupportedOperationException."
      end

      operation 1691138 "canWriteSequence"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sequence writes

Returns <code>true</code> if the writer is able to append an
image to an image stream that already contains header
information and possibly prior images.

<p> If <code>canWriteSequence</code> returns <code>false</code>,
<code>writeToSequence</code> and <code>endWriteSequence</code>
will throw an <code>UnsupportedOperationException</code>.

<p> The default implementation returns <code>false</code>.

@return <code>true</code> if images may be appended sequentially.
"
      end

      operation 1691266 "prepareWriteSequence"
	public explicit_return_type "void"
	nparams 1
	  param inout name "streamMetadata" type class_ref 313730 // IIOMetadata
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepares a stream to accept a series of subsequent
<code>writeToSequence</code> calls, using the provided stream
metadata object.  The metadata will be written to the stream if
it should precede the image data.  If the argument is <code>null</code>,
default stream metadata is used.

<p> If the output is an <code>ImageOutputStream</code>, the existing
contents of the output prior to the current seek position are
flushed, and need not be readable or writable.  If the format
requires that <code>endWriteSequence</code> be able to rewind to
patch up the header information, such as for a sequence of images
in a single TIFF file, then the metadata written by this method
must remain in a writable portion of the stream.  Other formats
may flush the stream after this method and after each image.

<p> If <code>canWriteSequence</code> returns <code>false</code>,
this method will throw an
<code>UnsupportedOperationException</code>.

<p> The output must have been set beforehand using either
the <code>setOutput</code> method.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param streamMetadata A stream metadata object, or <code>null</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canWriteSequence</code> returns <code>false</code>.
@exception IOException if an error occurs writing the stream
metadata.
"
      end

      operation 1691394 "writeToSequence"
	public explicit_return_type "void"
	nparams 2
	  param inout name "image" type class_ref 313858 // IIOImage
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a single image and possibly associated metadata and
thumbnails, to the output.  If the output is an
<code>ImageOutputStream</code>, the existing contents of the
output prior to the current seek position may be flushed, and
need not be readable or writable, unless the plug-in needs to
be able to patch up the header information when
<code>endWriteSequence</code> is called (<i>e.g.</i> TIFF).

<p> If <code>canWriteSequence</code> returns <code>false</code>,
this method will throw an
<code>UnsupportedOperationException</code>.

<p> The output must have been set beforehand using
the <code>setOutput</code> method.

<p> <code>prepareWriteSequence</code> must have been called
beforehand, or an <code>IllegalStateException</code> is thrown.

<p> If <code>canWriteRasters</code> returns <code>true</code>,
the <code>IIOImage</code> may contain a <code>Raster</code>
source.  Otherwise, it must contain a
<code>RenderedImage</code> source.

<p> The supplied thumbnails will be resized if needed, and any
thumbnails in excess of the supported number will be ignored.
If the format requires additional thumbnails that are not
provided, the writer will generate them internally.

<p> An <code>ImageWriteParam</code> may optionally be supplied
to control the writing process.  If <code>param</code> is
<code>null</code>, a default write param will be used.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param image an <code>IIOImage</code> object containing an
image, thumbnails, and metadata to be written.
@param param an <code>ImageWriteParam</code>, or
<code>null</code> to use a default
<code>ImageWriteParam</code>.

@exception IllegalStateException if the output has not
been set, or <code>prepareWriteSequence</code> has not been called.
@exception UnsupportedOperationException if
<code>canWriteSequence</code> returns <code>false</code>.
@exception IllegalArgumentException if <code>image</code> is
<code>null</code>.
@exception UnsupportedOperationException if <code>image</code>
contains a <code>Raster</code> and <code>canWriteRasters</code>
returns <code>false</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 1691522 "endWriteSequence"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes the writing of a sequence of images begun with
<code>prepareWriteSequence</code>.  Any stream metadata that
should come at the end of the sequence of images is written out,
and any header information at the beginning of the sequence is
patched up if necessary.  If the output is an
<code>ImageOutputStream</code>, data through the stream metadata
at the end of the sequence are flushed and need not be readable
or writable.

<p> If <code>canWriteSequence</code> returns <code>false</code>,
this method will throw an
<code>UnsupportedOperationException</code>.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@exception IllegalStateException if the output has not
been set, or <code>prepareWriteSequence</code> has not been called.
@exception UnsupportedOperationException if
<code>canWriteSequence</code> returns <code>false</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 1691650 "canReplaceStreamMetadata"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Metadata replacement

Returns <code>true</code> if it is possible to replace the
stream metadata already present in the output.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise returns <code>false</code>.

@return <code>true</code> if replacement of stream metadata is
allowed.

@exception IllegalStateException if the output has not
been set.
@exception IOException if an I/O error occurs during the query.
"
      end

      operation 1691778 "replaceStreamMetadata"
	public explicit_return_type "void"
	nparams 1
	  param inout name "streamMetadata" type class_ref 313730 // IIOMetadata
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the stream metadata in the output with new
information.  If the output is an
<code>ImageOutputStream</code>, the prior contents of the
stream are examined and possibly edited to make room for the
new data.  All of the prior contents of the output must be
available for reading and writing.

<p> If <code>canReplaceStreamMetadata</code> returns
<code>false</code>, an
<code>UnsupportedOperationException</code> will be thrown.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param streamMetadata an <code>IIOMetadata</code> object representing
stream metadata, or <code>null</code> to use default values.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if the
<code>canReplaceStreamMetadata</code> returns
<code>false</code>.  modes do not include
@exception IOException if an error occurs during writing.
"
      end

      operation 1691906 "canReplaceImageMetadata"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if it is possible to replace the
image metadata associated with an existing image with index
<code>imageIndex</code>.  If this method returns
<code>false</code>, a call to
<code>replaceImageMetadata(imageIndex)</code> will throw an
<code>UnsupportedOperationException</code>.

<p> A writer that does not support any image metadata
replacement may return <code>false</code> without performing
bounds checking on the index.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise returns <code>false</code>
without checking the value of <code>imageIndex</code>.

@param imageIndex the index of the image whose metadata is to
be replaced.

@return <code>true</code> if the image metadata of the given
image can be replaced.

@exception IllegalStateException if the output has not
been set.
@exception IndexOutOfBoundsException if the writer supports
image metadata replacement in general, but
<code>imageIndex</code> is less than 0 or greater than the
largest available index.
@exception IOException if an I/O error occurs during the query.
"
      end

      operation 1692034 "replaceImageMetadata"
	public explicit_return_type "void"
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param inout name "imageMetadata" type class_ref 313730 // IIOMetadata
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the image metadata associated with an existing image.

<p> If <code>canReplaceImageMetadata(imageIndex)</code> returns
<code>false</code>, an
<code>UnsupportedOperationException</code> will be thrown.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param imageIndex the index of the image whose metadata is to
be replaced.
@param imageMetadata an <code>IIOMetadata</code> object
representing image metadata, or <code>null</code>.

@exception IllegalStateException if the output has not been
set.
@exception UnsupportedOperationException if
<code>canReplaceImageMetadata</code> returns
<code>false</code>.
@exception IndexOutOfBoundsException if <code>imageIndex</code>
is less than 0 or greater than the largest available index.
@exception IOException if an error occurs during writing.
"
      end

      operation 1692162 "canInsertImage"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Image insertion

Returns <code>true</code> if the writer supports the insertion
of a new image at the given index.  Existing images with
indices greater than or equal to the insertion index will have
their indices increased by 1.  A value for
<code>imageIndex</code> of <code>-1</code> may be used to
signify an index one larger than the current largest index.

<p> A writer that does not support any image insertion may
return <code>false</code> without performing bounds checking on
the index.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise returns <code>false</code>
without checking the value of <code>imageIndex</code>.

@param imageIndex the index at which the image is to be
inserted.

@return <code>true</code> if an image may be inserted at the
given index.

@exception IllegalStateException if the output has not
been set.
@exception IndexOutOfBoundsException if the writer supports
image insertion in general, but <code>imageIndex</code> is less
than -1 or greater than the largest available index.
@exception IOException if an I/O error occurs during the query.
"
      end

      operation 1692290 "writeInsert"
	public explicit_return_type "void"
	nparams 3
	  param in name "imageIndex" explicit_type "int"
	  param inout name "image" type class_ref 313858 // IIOImage
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts a new image into an existing image stream.  Existing
images with an index greater than <code>imageIndex</code> are
preserved, and their indices are each increased by 1.  A value
for <code>imageIndex</code> of -1 may be used to signify an
index one larger than the previous largest index; that is, it
will cause the image to be logically appended to the end of the
sequence.  If the output is an <code>ImageOutputStream</code>,
the entirety of the stream must be both readable and writeable.

<p> If <code>canInsertImage(imageIndex)</code> returns
<code>false</code>, an
<code>UnsupportedOperationException</code> will be thrown.

<p> An <code>ImageWriteParam</code> may optionally be supplied
to control the writing process.  If <code>param</code> is
<code>null</code>, a default write param will be used.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param imageIndex the index at which to write the image.
@param image an <code>IIOImage</code> object containing an
image, thumbnails, and metadata to be written.
@param param an <code>ImageWriteParam</code>, or
<code>null</code> to use a default
<code>ImageWriteParam</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canInsertImage(imageIndex)</code> returns <code>false</code>.
@exception IllegalArgumentException if <code>image</code> is
<code>null</code>.
@exception IndexOutOfBoundsException if <code>imageIndex</code>
is less than -1 or greater than the largest available index.
@exception UnsupportedOperationException if <code>image</code>
contains a <code>Raster</code> and <code>canWriteRasters</code>
returns <code>false</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 1692418 "canRemoveImage"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Image removal

Returns <code>true</code> if the writer supports the removal
of an existing image at the given index.  Existing images with
indices greater than the insertion index will have
their indices decreased by 1.

<p> A writer that does not support any image removal may
return <code>false</code> without performing bounds checking on
the index.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise returns <code>false</code>
without checking the value of <code>imageIndex</code>.

@param imageIndex the index of the image to be removed.

@return <code>true</code> if it is possible to remove the given
image.

@exception IllegalStateException if the output has not
been set.
@exception IndexOutOfBoundsException if the writer supports
image removal in general, but <code>imageIndex</code> is less
than 0 or greater than the largest available index.
@exception IOException if an I/O error occurs during the
query.
"
      end

      operation 1692546 "removeImage"
	public explicit_return_type "void"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an image from the stream.

<p> If <code>canRemoveImage(imageIndex)</code> returns false,
an <code>UnsupportedOperationException</code>will be thrown.

<p> The removal may or may not cause a reduction in the actual
file size.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param imageIndex the index of the image to be removed.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canRemoveImage(imageIndex)</code> returns <code>false</code>.
@exception IndexOutOfBoundsException if <code>imageIndex</code>
is less than 0 or greater than the largest available index.
@exception IOException if an I/O error occurs during the
removal.
"
      end

      operation 1692674 "canWriteEmpty"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Empty images

Returns <code>true</code> if the writer supports the writing of
a complete image stream consisting of a single image with
undefined pixel values and associated metadata and thumbnails
to the output.  The pixel values may be defined by future
calls to the <code>replacePixels</code> methods.  If the output
is an <code>ImageOutputStream</code>, its existing contents
prior to the current seek position are not affected, and need
not be readable or writable.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise returns <code>false</code>.

@return <code>true</code> if the writing of complete image
stream with contents to be defined later is supported.

@exception IllegalStateException if the output has not been
set.
@exception IOException if an I/O error occurs during the
query.
"
      end

      operation 1692802 "prepareWriteEmpty"
	public explicit_return_type "void"
	nparams 7
	  param inout name "streamMetadata" type class_ref 313730 // IIOMetadata
	  param inout name "imageType" type class_ref 313474 // ImageTypeSpecifier
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param inout name "imageMetadata" type class_ref 313730 // IIOMetadata
	  param inout name "thumbnails" type class_ref 175362 // List
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}<? extends BufferedImage> ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begins the writing of a complete image stream, consisting of a
single image with undefined pixel values and associated
metadata and thumbnails, to the output.  The pixel values will
be defined by future calls to the <code>replacePixels</code>
methods.  If the output is an <code>ImageOutputStream</code>,
its existing contents prior to the current seek position are
not affected, and need not be readable or writable.

<p> The writing is not complete until a call to
<code>endWriteEmpty</code> occurs.  Calls to
<code>prepareReplacePixels</code>, <code>replacePixels</code>,
and <code>endReplacePixels</code> may occur between calls to
<code>prepareWriteEmpty</code> and <code>endWriteEmpty</code>.
However, calls to <code>prepareWriteEmpty</code> cannot be
nested, and calls to <code>prepareWriteEmpty</code> and
<code>prepareInsertEmpty</code> may not be interspersed.

<p> If <code>canWriteEmpty</code> returns <code>false</code>,
an <code>UnsupportedOperationException</code> will be thrown.

<p> An <code>ImageWriteParam</code> may optionally be supplied
to control the writing process.  If <code>param</code> is
<code>null</code>, a default write param will be used.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param streamMetadata an <code>IIOMetadata</code> object representing
stream metadata, or <code>null</code> to use default values.
@param imageType an <code>ImageTypeSpecifier</code> describing
the layout of the image.
@param width the width of the image.
@param height the height of the image.
@param imageMetadata an <code>IIOMetadata</code> object
representing image metadata, or <code>null</code>.
@param thumbnails a <code>List</code> of
<code>BufferedImage</code> thumbnails for this image, or
<code>null</code>.
@param param an <code>ImageWriteParam</code>, or
<code>null</code> to use a default
<code>ImageWriteParam</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canWriteEmpty</code> returns <code>false</code>.
@exception IllegalStateException if a previous call to
<code>prepareWriteEmpty</code> has been made without a
corresponding call to <code>endWriteEmpty</code>.
@exception IllegalStateException if a previous call to
<code>prepareInsertEmpty</code> has been made without a
corresponding call to <code>endInsertEmpty</code>.
@exception IllegalArgumentException if <code>imageType</code>
is <code>null</code> or <code>thumbnails</code> contains
<code>null</code> references or objects other than
<code>BufferedImage</code>s.
@exception IllegalArgumentException if width or height are less
than 1.
@exception IOException if an I/O error occurs during writing.
"
      end

      operation 1692930 "endWriteEmpty"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes the writing of a new image that was begun with a
prior call to <code>prepareWriteEmpty</code>.

<p> If <code>canWriteEmpty()</code> returns <code>false</code>,
an <code>UnsupportedOperationException</code> will be thrown.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canWriteEmpty(imageIndex)</code> returns
<code>false</code>.
@exception IllegalStateException if a previous call to
<code>prepareWriteEmpty</code> without a corresponding call to
<code>endWriteEmpty</code> has not been made.
@exception IllegalStateException if a previous call to
<code>prepareInsertEmpty</code> without a corresponding call to
<code>endInsertEmpty</code> has been made.
@exception IllegalStateException if a call to
<code>prepareReiplacePixels</code> has been made without a
matching call to <code>endReplacePixels</code>.
@exception IOException if an I/O error occurs during writing.
"
      end

      operation 1693058 "canInsertEmpty"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the writer supports the insertion
of a new, empty image at the given index.  The pixel values of
the image are undefined, and may be specified in pieces using
the <code>replacePixels</code> methods.  Existing images with
indices greater than or equal to the insertion index will have
their indices increased by 1.  A value for
<code>imageIndex</code> of <code>-1</code> may be used to
signify an index one larger than the current largest index.

<p> A writer that does not support insertion of empty images
may return <code>false</code> without performing bounds
checking on the index.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise returns <code>false</code>
without checking the value of <code>imageIndex</code>.

@param imageIndex the index at which the image is to be
inserted.

@return <code>true</code> if an empty image may be inserted at
the given index.

@exception IllegalStateException if the output has not been
set.
@exception IndexOutOfBoundsException if the writer supports
empty image insertion in general, but <code>imageIndex</code>
is less than -1 or greater than the largest available index.
@exception IOException if an I/O error occurs during the
query.
"
      end

      operation 1693186 "prepareInsertEmpty"
	public explicit_return_type "void"
	nparams 7
	  param in name "imageIndex" explicit_type "int"
	  param inout name "imageType" type class_ref 313474 // ImageTypeSpecifier
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param inout name "imageMetadata" type class_ref 313730 // IIOMetadata
	  param inout name "thumbnails" type class_ref 175362 // List
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}<? extends BufferedImage> ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begins the insertion of a new image with undefined pixel values
into an existing image stream.  Existing images with an index
greater than <code>imageIndex</code> are preserved, and their
indices are each increased by 1.  A value for
<code>imageIndex</code> of -1 may be used to signify an index
one larger than the previous largest index; that is, it will
cause the image to be logically appended to the end of the
sequence.  If the output is an <code>ImageOutputStream</code>,
the entirety of the stream must be both readable and writeable.

<p> The image contents may be
supplied later using the <code>replacePixels</code> method.
The insertion is not complete until a call to
<code>endInsertEmpty</code> occurs.  Calls to
<code>prepareReplacePixels</code>, <code>replacePixels</code>,
and <code>endReplacePixels</code> may occur between calls to
<code>prepareInsertEmpty</code> and
<code>endInsertEmpty</code>.  However, calls to
<code>prepareInsertEmpty</code> cannot be nested, and calls to
<code>prepareWriteEmpty</code> and
<code>prepareInsertEmpty</code> may not be interspersed.

<p> If <code>canInsertEmpty(imageIndex)</code> returns
<code>false</code>, an
<code>UnsupportedOperationException</code> will be thrown.

<p> An <code>ImageWriteParam</code> may optionally be supplied
to control the writing process.  If <code>param</code> is
<code>null</code>, a default write param will be used.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param imageIndex the index at which to write the image.
@param imageType an <code>ImageTypeSpecifier</code> describing
the layout of the image.
@param width the width of the image.
@param height the height of the image.
@param imageMetadata an <code>IIOMetadata</code> object
representing image metadata, or <code>null</code>.
@param thumbnails a <code>List</code> of
<code>BufferedImage</code> thumbnails for this image, or
<code>null</code>.
@param param an <code>ImageWriteParam</code>, or
<code>null</code> to use a default
<code>ImageWriteParam</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canInsertEmpty(imageIndex)</code> returns
<code>false</code>.
@exception IndexOutOfBoundsException if <code>imageIndex</code>
is less than -1 or greater than the largest available index.
@exception IllegalStateException if a previous call to
<code>prepareInsertEmpty</code> has been made without a
corresponding call to <code>endInsertEmpty</code>.
@exception IllegalStateException if a previous call to
<code>prepareWriteEmpty</code> has been made without a
corresponding call to <code>endWriteEmpty</code>.
@exception IllegalArgumentException if <code>imageType</code>
is <code>null</code> or <code>thumbnails</code> contains
<code>null</code> references or objects other than
<code>BufferedImage</code>s.
@exception IllegalArgumentException if width or height are less
than 1.
@exception IOException if an I/O error occurs during writing.
"
      end

      operation 1693314 "endInsertEmpty"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes the insertion of a new image that was begun with a
prior call to <code>prepareInsertEmpty</code>.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canInsertEmpty(imageIndex)</code> returns
<code>false</code>.
@exception IllegalStateException if a previous call to
<code>prepareInsertEmpty</code> without a corresponding call to
<code>endInsertEmpty</code> has not been made.
@exception IllegalStateException if a previous call to
<code>prepareWriteEmpty</code> without a corresponding call to
<code>endWriteEmpty</code> has been made.
@exception IllegalStateException if a call to
<code>prepareReplacePixels</code> has been made without a
matching call to <code>endReplacePixels</code>.
@exception IOException if an I/O error occurs during writing.
"
      end

      operation 1693442 "canReplacePixels"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Pixel replacement

Returns <code>true</code> if the writer allows pixels of the
given image to be replaced using the <code>replacePixels</code>
methods.

<p> A writer that does not support any pixel replacement may
return <code>false</code> without performing bounds checking on
the index.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise returns <code>false</code>
without checking the value of <code>imageIndex</code>.

@param imageIndex the index of the image whose pixels are to be
replaced.

@return <code>true</code> if the pixels of the given
image can be replaced.

@exception IllegalStateException if the output has not been
set.
@exception IndexOutOfBoundsException if the writer supports
pixel replacement in general, but <code>imageIndex</code> is
less than 0 or greater than the largest available index.
@exception IOException if an I/O error occurs during the query.
"
      end

      operation 1693570 "prepareReplacePixels"
	public explicit_return_type "void"
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param inout name "region" type class_ref 314114 // Rectangle
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prepares the writer to handle a series of calls to the
<code>replacePixels</code> methods.  The affected pixel area
will be clipped against the supplied

<p> If <code>canReplacePixels</code> returns
<code>false</code>, and
<code>UnsupportedOperationException</code> will be thrown.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param imageIndex the index of the image whose pixels are to be
replaced.
@param region a <code>Rectangle</code> that will be used to clip
future pixel regions.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canReplacePixels(imageIndex)</code> returns
<code>false</code>.
@exception IndexOutOfBoundsException if <code>imageIndex</code>
is less than 0 or greater than the largest available index.
@exception IllegalStateException if there is a previous call to
<code>prepareReplacePixels</code> without a matching call to
<code>endReplacePixels</code> (<i>i.e.</i>, nesting is not
allowed).
@exception IllegalArgumentException if <code>region</code> is
<code>null</code> or has a width or height less than 1.
@exception IOException if an I/O error occurs during the
preparation.
"
      end

      operation 1693698 "replacePixels"
	public explicit_return_type "void"
	nparams 2
	  param inout name "image" type class_ref 313986 // RenderedImage
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces a portion of an image already present in the output
with a portion of the given image.  The image data must match,
or be convertible to, the image layout of the existing image.

<p> The destination region is specified in the
<code>param</code> argument, and will be clipped to the image
boundaries and the region supplied to
<code>prepareReplacePixels</code>.  At least one pixel of the
source must not be clipped, or an exception is thrown.

<p> An <code>ImageWriteParam</code> may optionally be supplied
to control the writing process.  If <code>param</code> is
<code>null</code>, a default write param will be used.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> This method may only be called after a call to
<code>prepareReplacePixels</code>, or else an
<code>IllegalStateException</code> will be thrown.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param image a <code>RenderedImage</code> containing source
pixels.
@param param an <code>ImageWriteParam</code>, or
<code>null</code> to use a default
<code>ImageWriteParam</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canReplacePixels(imageIndex)</code> returns
<code>false</code>.
@exception IllegalStateException if there is no previous call to
<code>prepareReplacePixels</code> without a matching call to
<code>endReplacePixels</code>.
@exception IllegalArgumentException if any of the following are true:
<ul>
<li> <code>image</code> is <code>null</code>.
<li> <code>param</code> is <code>null</code>.
<li> the intersected region does not contain at least one pixel.
<li> the layout of <code>image</code> does not match, or this
writer cannot convert it to, the existing image layout.
</ul>
@exception IOException if an I/O error occurs during writing.
"
      end

      operation 1693826 "replacePixels"
	public explicit_return_type "void"
	nparams 2
	  param inout name "raster" type class_ref 311682 // Raster
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces a portion of an image already present in the output
with a portion of the given <code>Raster</code>.  The image
data must match, or be convertible to, the image layout of the
existing image.

<p> An <code>ImageWriteParam</code> may optionally be supplied
to control the writing process.  If <code>param</code> is
<code>null</code>, a default write param will be used.

<p> The destination region is specified in the
<code>param</code> argument, and will be clipped to the image
boundaries and the region supplied to
<code>prepareReplacePixels</code>.  At least one pixel of the
source must not be clipped, or an exception is thrown.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not supported by this writer (<i>e.g.</i>
progressive encoding or any format-specific settings), they
will be ignored.

<p> This method may only be called after a call to
<code>prepareReplacePixels</code>, or else an
<code>IllegalStateException</code> will be thrown.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@param raster a <code>Raster</code> containing source
pixels.
@param param an <code>ImageWriteParam</code>, or
<code>null</code> to use a default
<code>ImageWriteParam</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canReplacePixels(imageIndex)</code> returns
<code>false</code>.
@exception IllegalStateException if there is no previous call to
<code>prepareReplacePixels</code> without a matching call to
<code>endReplacePixels</code>.
@exception UnsupportedOperationException if
<code>canWriteRasters</code> returns <code>false</code>.
@exception IllegalArgumentException if any of the following are true:
<ul>
<li> <code>raster</code> is <code>null</code>.
<li> <code>param</code> is <code>null</code>.
<li> the intersected region does not contain at least one pixel.
<li> the layout of <code>raster</code> does not match, or this
writer cannot convert it to, the existing image layout.
</ul>
@exception IOException if an I/O error occurs during writing.
"
      end

      operation 1693954 "endReplacePixels"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Terminates a sequence of calls to <code>replacePixels</code>.

<p> If <code>canReplacePixels</code> returns
<code>false</code>, and
<code>UnsupportedOperationException</code> will be thrown.

<p> The default implementation throws an
<code>IllegalStateException</code> if the output is
<code>null</code>, and otherwise throws an
<code>UnsupportedOperationException</code>.

@exception IllegalStateException if the output has not
been set.
@exception UnsupportedOperationException if
<code>canReplacePixels(imageIndex)</code> returns
<code>false</code>.
@exception IllegalStateException if there is no previous call
to <code>prepareReplacePixels</code> without a matching call to
<code>endReplacePixels</code>.
@exception IOException if an I/O error occurs during writing.
"
      end

      operation 1694082 "abort"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Abort

Requests that any current write operation be aborted.  The
contents of the output following the abort will be undefined.

<p> Writers should call <code>clearAbortRequest</code> at the
beginning of each write operation, and poll the value of
<code>abortRequested</code> regularly during the write.
"
      end

      operation 1694210 "abortRequested"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if a request to abort the current
write operation has been made since the writer was instantiated or
<code>clearAbortRequest</code> was called.

@return <code>true</code> if the current write operation should
be aborted.

@see #abort
@see #clearAbortRequest
"
      end

      operation 1694338 "clearAbortRequest"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears any previous abort request.  After this method has been
called, <code>abortRequested</code> will return
<code>false</code>.

@see #abort
@see #abortRequested
"
      end

      operation 1694466 "addIIOWriteWarningListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 316546 // IIOWriteWarningListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Listeners

Adds an <code>IIOWriteWarningListener</code> to the list of
registered warning listeners.  If <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.  Messages sent to the given listener will be
localized, if possible, to match the current
<code>Locale</code>.  If no <code>Locale</code> has been set,
warning messages may be localized as the writer sees fit.

@param listener an <code>IIOWriteWarningListener</code> to be
registered.

@see #removeIIOWriteWarningListener
"
      end

      operation 1694594 "removeIIOWriteWarningListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 316546 // IIOWriteWarningListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an <code>IIOWriteWarningListener</code> from the list
of registered warning listeners.  If the listener was not
previously registered, or if <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.

@param listener an <code>IIOWriteWarningListener</code> to be
deregistered.

@see #addIIOWriteWarningListener
"
      end

      operation 1694722 "removeAllIIOWriteWarningListeners"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all currently registered
<code>IIOWriteWarningListener</code> objects.

<p> The default implementation sets the
<code>warningListeners</code> and <code>warningLocales</code>
instance variables to <code>null</code>.
"
      end

      operation 1694850 "addIIOWriteProgressListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 316674 // IIOWriteProgressListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an <code>IIOWriteProgressListener</code> to the list of
registered progress listeners.  If <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.

@param listener an <code>IIOWriteProgressListener</code> to be
registered.

@see #removeIIOWriteProgressListener
"
      end

      operation 1694978 "removeIIOWriteProgressListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 316674 // IIOWriteProgressListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an <code>IIOWriteProgressListener</code> from the list
of registered progress listeners.  If the listener was not
previously registered, or if <code>listener</code> is
<code>null</code>, no exception will be thrown and no action
will be taken.

@param listener an <code>IIOWriteProgressListener</code> to be
deregistered.

@see #addIIOWriteProgressListener
"
      end

      operation 1695106 "removeAllIIOWriteProgressListeners"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all currently registered
<code>IIOWriteProgressListener</code> objects.

<p> The default implementation sets the
<code>progressListeners</code> instance variable to
<code>null</code>.
"
      end

      operation 1695234 "processImageStarted"
	protected explicit_return_type "void"
	nparams 1
	  param in name "imageIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the start of an image write to all registered
<code>IIOWriteProgressListener</code>s by calling their
<code>imageStarted</code> method.  Subclasses may use this
method as a convenience.

@param imageIndex the index of the image about to be written.
"
      end

      operation 1695362 "processImageProgress"
	protected explicit_return_type "void"
	nparams 1
	  param in name "percentageDone" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the current percentage of image completion to all
registered <code>IIOWriteProgressListener</code>s by calling
their <code>imageProgress</code> method.  Subclasses may use
this method as a convenience.

@param percentageDone the current percentage of completion,
as a <code>float</code>.
"
      end

      operation 1695490 "processImageComplete"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the completion of an image write to all registered
<code>IIOWriteProgressListener</code>s by calling their
<code>imageComplete</code> method.  Subclasses may use this
method as a convenience.
"
      end

      operation 1695618 "processThumbnailStarted"
	protected explicit_return_type "void"
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param in name "thumbnailIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the start of a thumbnail write to all registered
<code>IIOWriteProgressListener</code>s by calling their
<code>thumbnailStarted</code> method.  Subclasses may use this
method as a convenience.

@param imageIndex the index of the image associated with the
thumbnail.
@param thumbnailIndex the index of the thumbnail.
"
      end

      operation 1695746 "processThumbnailProgress"
	protected explicit_return_type "void"
	nparams 1
	  param in name "percentageDone" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the current percentage of thumbnail completion to
all registered <code>IIOWriteProgressListener</code>s by calling
their <code>thumbnailProgress</code> method.  Subclasses may
use this method as a convenience.

@param percentageDone the current percentage of completion,
as a <code>float</code>.
"
      end

      operation 1695874 "processThumbnailComplete"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts the completion of a thumbnail write to all registered
<code>IIOWriteProgressListener</code>s by calling their
<code>thumbnailComplete</code> method.  Subclasses may use this
method as a convenience.
"
      end

      operation 1696002 "processWriteAborted"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts that the write has been aborted to all registered
<code>IIOWriteProgressListener</code>s by calling their
<code>writeAborted</code> method.  Subclasses may use this
method as a convenience.
"
      end

      operation 1696130 "processWarningOccurred"
	protected explicit_return_type "void"
	nparams 2
	  param in name "imageIndex" explicit_type "int"
	  param inout name "warning" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts a warning message to all registered
<code>IIOWriteWarningListener</code>s by calling their
<code>warningOccurred</code> method.  Subclasses may use this
method as a convenience.

@param imageIndex the index of the image on which the warning
occurred.
@param warning the warning message.

@exception IllegalArgumentException if <code>warning</code>
is <code>null</code>.
"
      end

      operation 1696258 "processWarningOccurred"
	protected explicit_return_type "void"
	nparams 3
	  param in name "imageIndex" explicit_type "int"
	  param inout name "baseName" type class_ref 128130 // String
	  param inout name "keyword" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Broadcasts a localized warning message to all registered
<code>IIOWriteWarningListener</code>s by calling their
<code>warningOccurred</code> method with a string taken
from a <code>ResourceBundle</code>.  Subclasses may use this
method as a convenience.

@param imageIndex the index of the image on which the warning
occurred.
@param baseName the base name of a set of
<code>ResourceBundle</code>s containing localized warning
messages.
@param keyword the keyword used to index the warning message
within the set of <code>ResourceBundle</code>s.

@exception IllegalArgumentException if <code>baseName</code>
is <code>null</code>.
@exception IllegalArgumentException if <code>keyword</code>
is <code>null</code>.
@exception IllegalArgumentException if no appropriate
<code>ResourceBundle</code> may be located.
@exception IllegalArgumentException if the named resource is
not found in the located <code>ResourceBundle</code>.
@exception IllegalArgumentException if the object retrieved
from the <code>ResourceBundle</code> is not a
<code>String</code>.
"
      end

      operation 1696386 "reset"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " State management

Restores the <code>ImageWriter</code> to its initial state.

<p> The default implementation calls
<code>setOutput(null)</code>, <code>setLocale(null)</code>,
<code>removeAllIIOWriteWarningListeners()</code>,
<code>removeAllIIOWriteProgressListeners()</code>, and
<code>clearAbortRequest</code>.
"
      end

      operation 1696514 "dispose"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows any resources held by this object to be released.  The
result of calling any other method (other than
<code>finalize</code>) subsequent to a call to this method
is undefined.

<p>It is important for applications to call this method when they
know they will no longer be using this <code>ImageWriter</code>.
Otherwise, the writer may continue to hold on to resources
indefinitely.

<p>The default implementation of this method in the superclass does
nothing.  Subclass implementations should ensure that all resources,
especially native resources, are released.
"
      end
    end

    class 316162 "ImageTranscoder"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface providing metadata transcoding capability.

<p> Any image may be transcoded (written to a different format
than the one it was originally stored in) simply by performing
a read operation followed by a write operation.  However, loss
of data may occur in this process due to format differences.

<p> In general, the best results will be achieved when
format-specific metadata objects can be created to encapsulate as
much information about the image and its associated metadata as
possible, in terms that are understood by the specific
<code>ImageWriter</code> used to perform the encoding.

<p> An <code>ImageTranscoder</code> may be used to convert the
<code>IIOMetadata</code> objects supplied by the
<code>ImageReader</code> (representing per-stream and per-image
metadata) into corresponding objects suitable for encoding by a
particular <code>ImageWriter</code>.  In the case where the methods
of this interface are being called directly on an
<code>ImageWriter</code>, the output will be suitable for that
writer.

<p> The internal details of converting an <code>IIOMetadata</code>
object into a writer-specific format will vary according to the
context of the operation.  Typically, an <code>ImageWriter</code>
will inspect the incoming object to see if it implements additional
interfaces with which the writer is familiar.  This might be the
case, for example, if the object was obtained by means of a read
operation on a reader plug-in written by the same vendor as the
writer.  In this case, the writer may access the incoming object by
means of its plug-in specific interfaces.  In this case, the
re-encoding may be close to lossless if the image file format is
kept constant.  If the format is changing, the writer may still
attempt to preserve as much information as possible.

<p> If the incoming object does not implement any additional
interfaces known to the writer, the writer has no choice but to
access it via the standard <code>IIOMetadata</code> interfaces such
as the tree view provided by <code>IIOMetadata.getAsTree</code>.
In this case, there is likely to be significant loss of
information.

<p> An independent <code>ImageTranscoder</code> essentially takes
on the same role as the writer plug-in in the above examples.  It
must be familiar with the private interfaces used by both the
reader and writer plug-ins, and manually instantiate an object that
will be usable by the writer.  The resulting metadata objects may
be used by the writer directly.

<p> No independent implementations of <code>ImageTranscoder</code>
are provided as part of the standard API.  Instead, the intention
of this interface is to provide a way for implementations to be
created and discovered by applications as the need arises.

"
      operation 1688450 "convertStreamMetadata"
	public return_type class_ref 313730 // IIOMetadata
	nparams 2
	  param inout name "inData" type class_ref 313730 // IIOMetadata
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>IIOMetadata</code> object that may be used for
encoding and optionally modified using its document interfaces
or other interfaces specific to the writer plug-in that will be
used for encoding.

<p> An optional <code>ImageWriteParam</code> may be supplied
for cases where it may affect the structure of the stream
metadata.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not understood by this writer or
transcoder, they will be ignored.

@param inData an <code>IIOMetadata</code> object representing
stream metadata, used to initialize the state of the returned
object.
@param param an <code>ImageWriteParam</code> that will be used to
encode the image, or <code>null</code>.

@return an <code>IIOMetadata</code> object, or
<code>null</code> if the plug-in does not provide metadata
encoding capabilities.

@exception IllegalArgumentException if <code>inData</code> is
<code>null</code>.
"
      end

      operation 1688578 "convertImageMetadata"
	public return_type class_ref 313730 // IIOMetadata
	nparams 3
	  param inout name "inData" type class_ref 313730 // IIOMetadata
	  param inout name "imageType" type class_ref 313474 // ImageTypeSpecifier
	  param inout name "param" type class_ref 316290 // ImageWriteParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>IIOMetadata</code> object that may be used for
encoding and optionally modified using its document interfaces
or other interfaces specific to the writer plug-in that will be
used for encoding.

<p> An optional <code>ImageWriteParam</code> may be supplied
for cases where it may affect the structure of the image
metadata.

<p> If the supplied <code>ImageWriteParam</code> contains
optional setting values not understood by this writer or
transcoder, they will be ignored.

@param inData an <code>IIOMetadata</code> object representing
image metadata, used to initialize the state of the returned
object.
@param imageType an <code>ImageTypeSpecifier</code> indicating
the layout and color information of the image with which the
metadata will be associated.
@param param an <code>ImageWriteParam</code> that will be used to
encode the image, or <code>null</code>.

@return an <code>IIOMetadata</code> object,
or <code>null</code> if the plug-in does not provide
metadata encoding capabilities.

@exception IllegalArgumentException if either of
<code>inData</code> or <code>imageType</code> is
<code>null</code>.
"
      end
    end

    class 316290 "ImageWriteParam"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class describing how a stream is to be encoded.  Instances of
this class or its subclasses are used to supply prescriptive
\"how-to\" information to instances of <code>ImageWriter</code>.

<p> A plug-in for a specific image format may define a subclass of
this class, and return objects of that class from the
<code>getDefaultWriteParam</code> method of its
<code>ImageWriter</code> implementation.  For example, the built-in
JPEG writer plug-in will return instances of
<code>javax.imageio.plugins.jpeg.JPEGImageWriteParam</code>.

<p> The region of the image to be written is determined by first
intersecting the actual bounds of the image with the rectangle
specified by <code>IIOParam.setSourceRegion</code>, if any.  If the
resulting rectangle has a width or height of zero, the writer will
throw an <code>IIOException</code>. If the intersection is
non-empty, writing will commence with the first subsampled pixel
and include additional pixels within the intersected bounds
according to the horizontal and vertical subsampling factors
specified by {@link IIOParam#setSourceSubsampling
IIOParam.setSourceSubsampling}.

<p> Individual features such as tiling, progressive encoding, and
compression may be set in one of four modes.
<code>MODE_DISABLED</code> disables the features;
<code>MODE_DEFAULT</code> enables the feature with
writer-controlled parameter values; <code>MODE_EXPLICIT</code>
enables the feature and allows the use of a <code>set</code> method
to provide additional parameters; and
<code>MODE_COPY_FROM_METADATA</code> copies relevant parameter
values from the stream and image metadata objects passed to the
writer.  The default for all features is
<code>MODE_COPY_FROM_METADATA</code>.  Non-standard features
supplied in subclasses are encouraged, but not required to use a
similar scheme.

<p> Plug-in writers may extend the functionality of
<code>ImageWriteParam</code> by providing a subclass that implements
additional, plug-in specific interfaces.  It is up to the plug-in
to document what interfaces are available and how they are to be
used.  Writers will silently ignore any extended features of an
<code>ImageWriteParam</code> subclass of which they are not aware.
Also, they may ignore any optional features that they normally
disable when creating their own <code>ImageWriteParam</code>
instances via <code>getDefaultWriteParam</code>.

<p> Note that unless a query method exists for a capability, it must
be supported by all <code>ImageWriter</code> implementations
(<i>e.g.</i> progressive encoding is optional, but subsampling must be
supported).


@see ImageReadParam
"
      classrelation 554498 // <generalisation>
	relation 554498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 554498 // <generalisation>
	  b parent class_ref 326146 // IIOParam
      end

      attribute 389890 "MODE_DISABLED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant value that may be passed into methods such as
<code>setTilingMode</code>, <code>setProgressiveMode</code>,
and <code>setCompressionMode</code> to disable a feature for
future writes.  That is, when this mode is set the stream will
<b>not</b> be tiled, progressive, or compressed, and the
relevant accessor methods will throw an
<code>IllegalStateException</code>.

@see #MODE_EXPLICIT
@see #MODE_COPY_FROM_METADATA
@see #MODE_DEFAULT
@see #setProgressiveMode
@see #getProgressiveMode
@see #setTilingMode
@see #getTilingMode
@see #setCompressionMode
@see #getCompressionMode

"
      end

      attribute 390018 "MODE_DEFAULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant value that may be passed into methods such as
<code>setTilingMode</code>,
<code>setProgressiveMode</code>, and
<code>setCompressionMode</code> to enable that feature for
future writes.  That is, when this mode is enabled the stream
will be tiled, progressive, or compressed according to a
sensible default chosen internally by the writer in a plug-in
dependent way, and the relevant accessor methods will
throw an <code>IllegalStateException</code>.

@see #MODE_DISABLED
@see #MODE_EXPLICIT
@see #MODE_COPY_FROM_METADATA
@see #setProgressiveMode
@see #getProgressiveMode
@see #setTilingMode
@see #getTilingMode
@see #setCompressionMode
@see #getCompressionMode

"
      end

      attribute 390146 "MODE_EXPLICIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant value that may be passed into methods such as
<code>setTilingMode</code> or <code>setCompressionMode</code>
to enable a feature for future writes. That is, when this mode
is set the stream will be tiled or compressed according to
additional information supplied to the corresponding
<code>set</code> methods in this class and retrievable from the
corresponding <code>get</code> methods.  Note that this mode is
not supported for progressive output.

@see #MODE_DISABLED
@see #MODE_COPY_FROM_METADATA
@see #MODE_DEFAULT
@see #setProgressiveMode
@see #getProgressiveMode
@see #setTilingMode
@see #getTilingMode
@see #setCompressionMode
@see #getCompressionMode

"
      end

      attribute 390274 "MODE_COPY_FROM_METADATA"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A constant value that may be passed into methods such as
<code>setTilingMode</code>, <code>setProgressiveMode</code>, or
<code>setCompressionMode</code> to enable that feature for
future writes.  That is, when this mode is enabled the stream
will be tiled, progressive, or compressed based on the contents
of stream and/or image metadata passed into the write
operation, and any relevant accessor methods will throw an
<code>IllegalStateException</code>.

<p> This is the default mode for all features, so that a read
including metadata followed by a write including metadata will
preserve as much information as possible.

@see #MODE_DISABLED
@see #MODE_EXPLICIT
@see #MODE_DEFAULT
@see #setProgressiveMode
@see #getProgressiveMode
@see #setTilingMode
@see #getTilingMode
@see #setCompressionMode
@see #getCompressionMode

"
      end

      attribute 390402 "MAX_MODE"
	class_attribute const_attribute private explicit_type "int"
	init_value " MODE_COPY_FROM_METADATA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If more modes are added, this should be updated.
"
      end

      attribute 390530 "canWriteTiles"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>boolean</code> that is <code>true</code> if this
<code>ImageWriteParam</code> allows tile width and tile height
parameters to be set.  By default, the value is
<code>false</code>.  Subclasses must set the value manually.

<p> Subclasses that do not support writing tiles should ensure
that this value is set to <code>false</code>.

"
      end

      attribute 390658 "tilingMode"
	protected explicit_type "int"
	init_value " MODE_COPY_FROM_METADATA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The mode controlling tiling settings, which Must be
set to one of the four <code>MODE_*</code> values.  The default
is <code>MODE_COPY_FROM_METADATA</code>.

<p> Subclasses that do not writing tiles may ignore this value.

@see #MODE_DISABLED
@see #MODE_EXPLICIT
@see #MODE_COPY_FROM_METADATA
@see #MODE_DEFAULT
@see #setTilingMode
@see #getTilingMode

"
      end

      classrelation 554626 // preferredTileSizes (<unidirectional association>)
	relation 554626 --->
	  a role_name "preferredTileSizes" multiplicity "[]" init_value " null" protected
	    comment "
An array of preferred tile size range pairs.  The default value
is <code>null</code>, which indicates that there are no
preferred sizes.  If the value is non-<code>null</code>, it
must have an even length of at least two.

<p> Subclasses that do not support writing tiles may ignore
this value.

@see #getPreferredTileSizes

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 554626 // preferredTileSizes (<unidirectional association>)
	  b parent class_ref 316802 // Dimension
      end

      attribute 390786 "tilingSet"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>boolean</code> that is <code>true</code> if tiling
parameters have been specified.

<p> Subclasses that do not support writing tiles may ignore
this value.

"
      end

      attribute 390914 "tileWidth"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The width of each tile if tiling has been set, or 0 otherwise.

<p> Subclasses that do not support tiling may ignore this
value.

"
      end

      attribute 391042 "tileHeight"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The height of each tile if tiling has been set, or 0 otherwise.
The initial value is <code>0</code>.

<p> Subclasses that do not support tiling may ignore this
value.

"
      end

      attribute 391170 "canOffsetTiles"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>boolean</code> that is <code>true</code> if this
<code>ImageWriteParam</code> allows tiling grid offset
parameters to be set.  By default, the value is
<code>false</code>.  Subclasses must set the value manually.

<p> Subclasses that do not support writing tiles, or that
support writing but not offsetting tiles must ensure that this
value is set to <code>false</code>.

"
      end

      attribute 391298 "tileGridXOffset"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The amount by which the tile grid origin should be offset
horizontally from the image origin if tiling has been set,
or 0 otherwise.  The initial value is <code>0</code>.

<p> Subclasses that do not support offsetting tiles may ignore
this value.

"
      end

      attribute 391426 "tileGridYOffset"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The amount by which the tile grid origin should be offset
vertically from the image origin if tiling has been set,
or 0 otherwise.  The initial value is <code>0</code>.

<p> Subclasses that do not support offsetting tiles may ignore
this value.

"
      end

      attribute 391554 "canWriteProgressive"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>boolean</code> that is <code>true</code> if this
<code>ImageWriteParam</code> allows images to be written as a
progressive sequence of increasing quality passes.  By default,
the value is <code>false</code>.  Subclasses must set the value
manually.

<p> Subclasses that do not support progressive encoding must
ensure that this value is set to <code>false</code>.

"
      end

      attribute 391682 "progressiveMode"
	protected explicit_type "int"
	init_value " MODE_COPY_FROM_METADATA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The mode controlling progressive encoding, which must be set to
one of the four <code>MODE_*</code> values, except
<code>MODE_EXPLICIT</code>.  The default is
<code>MODE_COPY_FROM_METADATA</code>.

<p> Subclasses that do not support progressive encoding may
ignore this value.

@see #MODE_DISABLED
@see #MODE_EXPLICIT
@see #MODE_COPY_FROM_METADATA
@see #MODE_DEFAULT
@see #setProgressiveMode
@see #getProgressiveMode

"
      end

      attribute 391810 "canWriteCompressed"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>boolean</code> that is <code>true</code> if this writer
can write images using compression. By default, the value is
<code>false</code>.  Subclasses must set the value manually.

<p> Subclasses that do not support compression must ensure that
this value is set to <code>false</code>.

"
      end

      attribute 391938 "compressionMode"
	protected explicit_type "int"
	init_value " MODE_COPY_FROM_METADATA"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The mode controlling compression settings, which must be set to
one of the four <code>MODE_*</code> values.  The default is
<code>MODE_COPY_FROM_METADATA</code>.

<p> Subclasses that do not support compression may ignore this
value.

@see #MODE_DISABLED
@see #MODE_EXPLICIT
@see #MODE_COPY_FROM_METADATA
@see #MODE_DEFAULT
@see #setCompressionMode
@see #getCompressionMode

"
      end

      classrelation 554754 // compressionTypes (<unidirectional association>)
	relation 554754 --->
	  a role_name "compressionTypes" multiplicity "[]" init_value " null" protected
	    comment "
An array of <code>String</code>s containing the names of the
available compression types.  Subclasses must set the value
manually.

<p> Subclasses that do not support compression may ignore this
value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 554754 // compressionTypes (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 554882 // compressionType (<unidirectional association>)
	relation 554882 --->
	  a role_name "compressionType" init_value " null" protected
	    comment "
A <code>String</code> containing the name of the current
compression type, or <code>null</code> if none is set.

<p> Subclasses that do not support compression may ignore this
value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 554882 // compressionType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 392066 "compressionQuality"
	protected explicit_type "float"
	init_value " 1.0F"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A <code>float</code> containing the current compression quality
setting.  The initial value is <code>1.0F</code>.

<p> Subclasses that do not support compression may ignore this
value.

"
      end

      classrelation 555010 // locale (<unidirectional association>)
	relation 555010 --->
	  a role_name "locale" init_value " null" protected
	    comment "
A <code>Locale</code> to be used to localize compression type
names and quality descriptions, or <code>null</code> to use a
default <code>Locale</code>.  Subclasses must set the value
manually.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 555010 // locale (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      operation 1780226 "ImageWriteParam"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty <code>ImageWriteParam</code>.  It is up to
the subclass to set up the instance variables properly.
"
      end

      operation 1780354 "ImageWriteParam"
	public explicit_return_type ""
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <code>ImageWriteParam</code> set to use a
given <code>Locale</code>.

@param locale a <code>Locale</code> to be used to localize
compression type names and quality descriptions, or
<code>null</code>.
"
      end

      operation 1780482 "clonePreferredTileSizes"
	class_operation private return_type class_ref 316802 // Dimension
	nparams 1
	  param inout name "sizes" type class_ref 316802 // Dimension
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a deep copy of the array"
      end

      operation 1780610 "getLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currently set <code>Locale</code>, or
<code>null</code> if only a default <code>Locale</code> is
supported.

@return the current <code>Locale</code>, or <code>null</code>.
"
      end

      operation 1780738 "canWriteTiles"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the writer can perform tiling
while writing.  If this method returns <code>false</code>, then
<code>setTiling</code> will throw an
<code>UnsupportedOperationException</code>.

@return <code>true</code> if the writer supports tiling.

@see #canOffsetTiles()
@see #setTiling(int, int, int, int)
"
      end

      operation 1780866 "canOffsetTiles"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the writer can perform tiling with
non-zero grid offsets while writing.  If this method returns
<code>false</code>, then <code>setTiling</code> will throw an
<code>UnsupportedOperationException</code> if the grid offset
arguments are not both zero.  If <code>canWriteTiles</code>
returns <code>false</code>, this method will return
<code>false</code> as well.

@return <code>true</code> if the writer supports non-zero tile
offsets.

@see #canWriteTiles()
@see #setTiling(int, int, int, int)
"
      end

      operation 1780994 "setTilingMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the image will be tiled in the output
stream and, if it will, how the tiling parameters will be
determined.  The modes are interpreted as follows:

<ul>

<li><code>MODE_DISABLED</code> - The image will not be tiled.
<code>setTiling</code> will throw an
<code>IllegalStateException</code>.

<li><code>MODE_DEFAULT</code> - The image will be tiled using
default parameters.  <code>setTiling</code> will throw an
<code>IllegalStateException</code>.

<li><code>MODE_EXPLICIT</code> - The image will be tiled
according to parameters given in the {@link #setTiling setTiling}
method.  Any previously set tiling parameters are discarded.

<li><code>MODE_COPY_FROM_METADATA</code> - The image will
conform to the metadata object passed in to a write.
<code>setTiling</code> will throw an
<code>IllegalStateException</code>.

</ul>

@param mode The mode to use for tiling.

@exception UnsupportedOperationException if
<code>canWriteTiles</code> returns <code>false</code>.
@exception IllegalArgumentException if <code>mode</code> is not
one of the modes listed above.

@see #setTiling
@see #getTilingMode
"
      end

      operation 1781122 "getTilingMode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current tiling mode, if tiling is supported.
Otherwise throws an <code>UnsupportedOperationException</code>.

@return the current tiling mode.

@exception UnsupportedOperationException if
<code>canWriteTiles</code> returns <code>false</code>.

@see #setTilingMode
"
      end

      operation 1781250 "getPreferredTileSizes"
	public return_type class_ref 316802 // Dimension
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>Dimension</code>s indicating the
legal size ranges for tiles as they will be encoded in the
output file or stream.  The returned array is a copy.

<p> The information is returned as a set of pairs; the first
element of a pair contains an (inclusive) minimum width and
height, and the second element contains an (inclusive) maximum
width and height.  Together, each pair defines a valid range of
sizes.  To specify a fixed size, use the same width and height
for both elements.  To specify an arbitrary range, a value of
<code>null</code> is used in place of an actual array of
<code>Dimension</code>s.

<p> If no array is specified on the constructor, but tiling is
allowed, then this method returns <code>null</code>.

@exception UnsupportedOperationException if the plug-in does
not support tiling.

@return an array of <code>Dimension</code>s with an even length
of at least two, or <code>null</code>.
"
      end

      operation 1781378 "setTiling"
	public explicit_return_type "void"
	nparams 4
	  param in name "tileWidth" explicit_type "int"
	  param in name "tileHeight" explicit_type "int"
	  param in name "tileGridXOffset" explicit_type "int"
	  param in name "tileGridYOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the image should be tiled in the output stream.
The <code>tileWidth</code> and <code>tileHeight</code>
parameters specify the width and height of the tiles in the
file.  If the tile width or height is greater than the width or
height of the image, the image is not tiled in that dimension.

<p> If <code>canOffsetTiles</code> returns <code>false</code>,
then the <code>tileGridXOffset</code> and
<code>tileGridYOffset</code> parameters must be zero.

@param tileWidth the width of each tile.
@param tileHeight the height of each tile.
@param tileGridXOffset the horizontal offset of the tile grid.
@param tileGridYOffset the vertical offset of the tile grid.

@exception UnsupportedOperationException if the plug-in does not
support tiling.
@exception IllegalStateException if the tiling mode is not
<code>MODE_EXPLICIT</code>.
@exception UnsupportedOperationException if the plug-in does not
support grid offsets, and the grid offsets are not both zero.
@exception IllegalArgumentException if the tile size is not
within one of the allowable ranges returned by
<code>getPreferredTileSizes</code>.
@exception IllegalArgumentException if <code>tileWidth</code>
or <code>tileHeight</code> is less than or equal to 0.

@see #canWriteTiles
@see #canOffsetTiles
@see #getTileWidth()
@see #getTileHeight()
@see #getTileGridXOffset()
@see #getTileGridYOffset()
"
      end

      operation 1781506 "unsetTiling"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any previous tile grid parameters specified by calls to
<code>setTiling</code>.

<p> The default implementation sets the instance variables
<code>tileWidth</code>, <code>tileHeight</code>,
<code>tileGridXOffset</code>, and
<code>tileGridYOffset</code> to <code>0</code>.

@exception UnsupportedOperationException if the plug-in does not
support tiling.
@exception IllegalStateException if the tiling mode is not
<code>MODE_EXPLICIT</code>.

@see #setTiling(int, int, int, int)
"
      end

      operation 1781634 "getTileWidth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the width of each tile in an image as it will be
written to the output stream.  If tiling parameters have not
been set, an <code>IllegalStateException</code> is thrown.

@return the tile width to be used for encoding.

@exception UnsupportedOperationException if the plug-in does not
support tiling.
@exception IllegalStateException if the tiling mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the tiling parameters have
not been set.

@see #setTiling(int, int, int, int)
@see #getTileHeight()
"
      end

      operation 1781762 "getTileHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of each tile in an image as it will be written to
the output stream.  If tiling parameters have not
been set, an <code>IllegalStateException</code> is thrown.

@return the tile height to be used for encoding.

@exception UnsupportedOperationException if the plug-in does not
support tiling.
@exception IllegalStateException if the tiling mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the tiling parameters have
not been set.

@see #setTiling(int, int, int, int)
@see #getTileWidth()
"
      end

      operation 1781890 "getTileGridXOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the horizontal tile grid offset of an image as it will
be written to the output stream.  If tiling parameters have not
been set, an <code>IllegalStateException</code> is thrown.

@return the tile grid X offset to be used for encoding.

@exception UnsupportedOperationException if the plug-in does not
support tiling.
@exception IllegalStateException if the tiling mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the tiling parameters have
not been set.

@see #setTiling(int, int, int, int)
@see #getTileGridYOffset()
"
      end

      operation 1782018 "getTileGridYOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vertical tile grid offset of an image as it will
be written to the output stream.  If tiling parameters have not
been set, an <code>IllegalStateException</code> is thrown.

@return the tile grid Y offset to be used for encoding.

@exception UnsupportedOperationException if the plug-in does not
support tiling.
@exception IllegalStateException if the tiling mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the tiling parameters have
not been set.

@see #setTiling(int, int, int, int)
@see #getTileGridXOffset()
"
      end

      operation 1782146 "canWriteProgressive"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the writer can write out images
as a series of passes of progressively increasing quality.

@return <code>true</code> if the writer supports progressive
encoding.

@see #setProgressiveMode
@see #getProgressiveMode
"
      end

      operation 1782274 "setProgressiveMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies that the writer is to write the image out in a
progressive mode such that the stream will contain a series of
scans of increasing quality.  If progressive encoding is not
supported, an <code>UnsupportedOperationException</code> will
be thrown.

<p>  The mode argument determines how
the progression parameters are chosen, and must be either
<code>MODE_DISABLED</code>,
<code>MODE_COPY_FROM_METADATA</code>, or
<code>MODE_DEFAULT</code>.  Otherwise an
<code>IllegalArgumentException</code> is thrown.

<p> The modes are interpreted as follows:

<ul>
  <li><code>MODE_DISABLED</code> - No progression.  Use this to
  turn off progression.

  <li><code>MODE_COPY_FROM_METADATA</code> - The output image
  will use whatever progression parameters are found in the
  metadata objects passed into the writer.

  <li><code>MODE_DEFAULT</code> - The image will be written
  progressively, with parameters chosen by the writer.
</ul>

<p> The default is <code>MODE_COPY_FROM_METADATA</code>.

@param mode The mode for setting progression in the output
stream.

@exception UnsupportedOperationException if the writer does not
support progressive encoding.
@exception IllegalArgumentException if <code>mode</code> is not
one of the modes listed above.

@see #getProgressiveMode
"
      end

      operation 1782402 "getProgressiveMode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current mode for writing the stream in a
progressive manner.

@return the current mode for progressive encoding.

@exception UnsupportedOperationException if the writer does not
support progressive encoding.

@see #setProgressiveMode
"
      end

      operation 1782530 "canWriteCompressed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if this writer supports compression.

@return <code>true</code> if the writer supports compression.
"
      end

      operation 1782658 "setCompressionMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies whether compression is to be performed, and if so how
compression parameters are to be determined.  The <code>mode</code>
argument must be one of the four modes, interpreted as follows:

<ul>
  <li><code>MODE_DISABLED</code> - If the mode is set to
  <code>MODE_DISABLED</code>, methods that query or modify the
  compression type or parameters will throw an
  <code>IllegalStateException</code> (if compression is
  normally supported by the plug-in). Some writers, such as JPEG,
  do not normally offer uncompressed output. In this case, attempting
  to set the mode to <code>MODE_DISABLED</code> will throw an
  <code>UnsupportedOperationException</code> and the mode will not be
  changed.

  <li><code>MODE_EXPLICIT</code> - Compress using the
  compression type and quality settings specified in this
  <code>ImageWriteParam</code>.  Any previously set compression
  parameters are discarded.

  <li><code>MODE_COPY_FROM_METADATA</code> - Use whatever
  compression parameters are specified in metadata objects
  passed in to the writer.

  <li><code>MODE_DEFAULT</code> - Use default compression
  parameters.
</ul>

<p> The default is <code>MODE_COPY_FROM_METADATA</code>.

@param mode The mode for setting compression in the output
stream.

@exception UnsupportedOperationException if the writer does not
support compression, or does not support the requested mode.
@exception IllegalArgumentException if <code>mode</code> is not
one of the modes listed above.

@see #getCompressionMode
"
      end

      operation 1782786 "getCompressionMode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current compression mode, if compression is
supported.

@return the current compression mode.

@exception UnsupportedOperationException if the writer does not
support compression.

@see #setCompressionMode
"
      end

      operation 1782914 "getCompressionTypes"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of available compression types, as an array or
<code>String</code>s, or <code>null</code> if a compression
type may not be chosen using these interfaces.  The array
returned is a copy.

<p> If the writer only offers a single, mandatory form of
compression, it is not necessary to provide any named
compression types.  Named compression types should only be
used where the user is able to make a meaningful choice
between different schemes.

<p> The default implementation checks if compression is
supported and throws an
<code>UnsupportedOperationException</code> if not.  Otherwise,
it returns a clone of the <code>compressionTypes</code>
instance variable if it is non-<code>null</code>, or else
returns <code>null</code>.

@return an array of <code>String</code>s containing the
(non-localized) names of available compression types, or
<code>null</code>.

@exception UnsupportedOperationException if the writer does not
support compression.
"
      end

      operation 1783042 "setCompressionType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "compressionType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the compression type to one of the values indicated by
<code>getCompressionTypes</code>.  If a value of
<code>null</code> is passed in, any previous setting is
removed.

<p> The default implementation checks whether compression is
supported and the compression mode is
<code>MODE_EXPLICIT</code>.  If so, it calls
<code>getCompressionTypes</code> and checks if
<code>compressionType</code> is one of the legal values.  If it
is, the <code>compressionType</code> instance variable is set.
If <code>compressionType</code> is <code>null</code>, the
instance variable is set without performing any checking.

@param compressionType one of the <code>String</code>s returned
by <code>getCompressionTypes</code>, or <code>null</code> to
remove any previous setting.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
@exception UnsupportedOperationException if there are no
settable compression types.
@exception IllegalArgumentException if
<code>compressionType</code> is non-<code>null</code> but is not
one of the values returned by <code>getCompressionTypes</code>.

@see #getCompressionTypes
@see #getCompressionType
@see #unsetCompression
"
      end

      operation 1783170 "getCompressionType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the currently set compression type, or
<code>null</code> if none has been set.  The type is returned
as a <code>String</code> from among those returned by
<code>getCompressionTypes</code>.
If no compression type has been set, <code>null</code> is
returned.

<p> The default implementation checks whether compression is
supported and the compression mode is
<code>MODE_EXPLICIT</code>.  If so, it returns the value of the
<code>compressionType</code> instance variable.

@return the current compression type as a <code>String</code>,
or <code>null</code> if no type is set.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.

@see #setCompressionType
"
      end

      operation 1783298 "unsetCompression"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any previous compression type and quality settings.

<p> The default implementation sets the instance variable
<code>compressionType</code> to <code>null</code>, and the
instance variable <code>compressionQuality</code> to
<code>1.0F</code>.

@exception UnsupportedOperationException if the plug-in does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.

@see #setCompressionType
@see #setCompressionQuality
"
      end

      operation 1783426 "getLocalizedCompressionTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a localized version of the name of the current
compression type, using the <code>Locale</code> returned by
<code>getLocale</code>.

<p> The default implementation checks whether compression is
supported and the compression mode is
<code>MODE_EXPLICIT</code>.  If so, if
<code>compressionType</code> is <code>non-null</code> the value
of <code>getCompressionType</code> is returned as a
convenience.

@return a <code>String</code> containing a localized version of
the name of the current compression type.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if no compression type is set.
"
      end

      operation 1783554 "isCompressionLossless"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if the current compression type
provides lossless compression.  If a plug-in provides only
one mandatory compression type, then this method may be
called without calling <code>setCompressionType</code> first.

<p> If there are multiple compression types but none has
been set, an <code>IllegalStateException</code> is thrown.

<p> The default implementation checks whether compression is
supported and the compression mode is
<code>MODE_EXPLICIT</code>.  If so, if
<code>getCompressionTypes()</code> is <code>null</code> or
<code>getCompressionType()</code> is non-<code>null</code>
<code>true</code> is returned as a convenience.

@return <code>true</code> if the current compression type is
lossless.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the set of legal
compression types is non-<code>null</code> and the current
compression type is <code>null</code>.
"
      end

      operation 1783682 "setCompressionQuality"
	public explicit_return_type "void"
	nparams 1
	  param in name "quality" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the compression quality to a value between <code>0</code>
and <code>1</code>.  Only a single compression quality setting
is supported by default; writers can provide extended versions
of <code>ImageWriteParam</code> that offer more control.  For
lossy compression schemes, the compression quality should
control the tradeoff between file size and image quality (for
example, by choosing quantization tables when writing JPEG
images).  For lossless schemes, the compression quality may be
used to control the tradeoff between file size and time taken
to perform the compression (for example, by optimizing row
filters and setting the ZLIB compression level when writing
PNG images).

<p> A compression quality setting of 0.0 is most generically
interpreted as \"high compression is important,\" while a setting of
1.0 is most generically interpreted as \"high image quality is
important.\"

<p> If there are multiple compression types but none has been
set, an <code>IllegalStateException</code> is thrown.

<p> The default implementation checks that compression is
supported, and that the compression mode is
<code>MODE_EXPLICIT</code>.  If so, if
<code>getCompressionTypes()</code> returns <code>null</code> or
<code>compressionType</code> is non-<code>null</code> it sets
the <code>compressionQuality</code> instance variable.

@param quality a <code>float</code> between <code>0</code>and
<code>1</code> indicating the desired quality level.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the set of legal
compression types is non-<code>null</code> and the current
compression type is <code>null</code>.
@exception IllegalArgumentException if <code>quality</code> is
not between <code>0</code>and <code>1</code>, inclusive.

@see #getCompressionQuality
"
      end

      operation 1783810 "getCompressionQuality"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current compression quality setting.

<p> If there are multiple compression types but none has been
set, an <code>IllegalStateException</code> is thrown.

<p> The default implementation checks that compression is
supported and that the compression mode is
<code>MODE_EXPLICIT</code>.  If so, if
<code>getCompressionTypes()</code> is <code>null</code> or
<code>getCompressionType()</code> is non-<code>null</code>, it
returns the value of the <code>compressionQuality</code>
instance variable.

@return the current compression quality setting.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the set of legal
compression types is non-<code>null</code> and the current
compression type is <code>null</code>.

@see #setCompressionQuality
"
      end

      operation 1783938 "getBitRate"
	public explicit_return_type "float"
	nparams 1
	  param in name "quality" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>float</code> indicating an estimate of the
number of bits of output data for each bit of input image data
at the given quality level.  The value will typically lie
between <code>0</code> and <code>1</code>, with smaller values
indicating more compression.  A special value of
<code>-1.0F</code> is used to indicate that no estimate is
available.

<p> If there are multiple compression types but none has been set,
an <code>IllegalStateException</code> is thrown.

<p> The default implementation checks that compression is
supported and the compression mode is
<code>MODE_EXPLICIT</code>.  If so, if
<code>getCompressionTypes()</code> is <code>null</code> or
<code>getCompressionType()</code> is non-<code>null</code>, and
<code>quality</code> is within bounds, it returns
<code>-1.0</code>.

@param quality the quality setting whose bit rate is to be
queried.

@return an estimate of the compressed bit rate, or
<code>-1.0F</code> if no estimate is available.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the set of legal
compression types is non-<code>null</code> and the current
compression type is <code>null</code>.
@exception IllegalArgumentException if <code>quality</code> is
not between <code>0</code>and <code>1</code>, inclusive.
"
      end

      operation 1784066 "getCompressionQualityDescriptions"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>String</code>s that may be used along
with <code>getCompressionQualityValues</code> as part of a user
interface for setting or displaying the compression quality
level.  The <code>String</code> with index <code>i</code>
provides a description of the range of quality levels between
<code>getCompressionQualityValues[i]</code> and
<code>getCompressionQualityValues[i + 1]</code>.  Note that the
length of the array returned from
<code>getCompressionQualityValues</code> will always be one
greater than that returned from
<code>getCompressionQualityDescriptions</code>.

<p> As an example, the strings \"Good\", \"Better\", and \"Best\"
could be associated with the ranges <code>[0, .33)</code>,
<code>[.33, .66)</code>, and <code>[.66, 1.0]</code>.  In this
case, <code>getCompressionQualityDescriptions</code> would
return <code>{ \"Good\", \"Better\", \"Best\" }</code> and
<code>getCompressionQualityValues</code> would return
<code>{ 0.0F, .33F, .66F, 1.0F }</code>.

<p> If no descriptions are available, <code>null</code> is
returned.  If <code>null</code> is returned from
<code>getCompressionQualityValues</code>, this method must also
return <code>null</code>.

<p> The descriptions should be localized for the
<code>Locale</code> returned by <code>getLocale</code>, if it
is non-<code>null</code>.

<p> If there are multiple compression types but none has been set,
an <code>IllegalStateException</code> is thrown.

<p> The default implementation checks that compression is
supported and that the compression mode is
<code>MODE_EXPLICIT</code>.  If so, if
<code>getCompressionTypes()</code> is <code>null</code> or
<code>getCompressionType()</code> is non-<code>null</code>, it
returns <code>null</code>.

@return an array of <code>String</code>s containing localized
descriptions of the compression quality levels.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the set of legal
compression types is non-<code>null</code> and the current
compression type is <code>null</code>.

@see #getCompressionQualityValues
"
      end

      operation 1784194 "getCompressionQualityValues"
	public explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>float</code>s that may be used along
with <code>getCompressionQualityDescriptions</code> as part of a user
interface for setting or displaying the compression quality
level.  See {@link #getCompressionQualityDescriptions
getCompressionQualityDescriptions} for more information.

<p> If no descriptions are available, <code>null</code> is
returned.  If <code>null</code> is returned from
<code>getCompressionQualityDescriptions</code>, this method
must also return <code>null</code>.

<p> If there are multiple compression types but none has been set,
an <code>IllegalStateException</code> is thrown.

<p> The default implementation checks that compression is
supported and that the compression mode is
<code>MODE_EXPLICIT</code>.  If so, if
<code>getCompressionTypes()</code> is <code>null</code> or
<code>getCompressionType()</code> is non-<code>null</code>, it
returns <code>null</code>.

@return an array of <code>float</code>s indicating the
boundaries between the compression quality levels as described
by the <code>String</code>s from
<code>getCompressionQualityDescriptions</code>.

@exception UnsupportedOperationException if the writer does not
support compression.
@exception IllegalStateException if the compression mode is not
<code>MODE_EXPLICIT</code>.
@exception IllegalStateException if the set of legal
compression types is non-<code>null</code> and the current
compression type is <code>null</code>.

@see #getCompressionQualityDescriptions
"
      end
    end

    class 326146 "IIOParam"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A superclass of all classes describing how streams should be
decoded or encoded.  This class contains all the variables and
methods that are shared by <code>ImageReadParam</code> and
<code>ImageWriteParam</code>.

<p> This class provides mechanisms to specify a source region and a
destination region.  When reading, the source is the stream and
the in-memory image is the destination.  When writing, these are
reversed.  In the case of writing, destination regions may be used
only with a writer that supports pixel replacement.
<p>
Decimation subsampling may be specified for both readers
and writers, using a movable subsampling grid.
<p>
Subsets of the source and destination bands may be selected.

"
      classrelation 553858 // sourceRegion (<unidirectional association>)
	relation 553858 --->
	  a role_name "sourceRegion" init_value " null" protected
	    comment "
The source region, on <code>null</code> if none is set.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 553858 // sourceRegion (<unidirectional association>)
	  b parent class_ref 314114 // Rectangle
      end

      attribute 389250 "sourceXSubsampling"
	protected explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The decimation subsampling to be applied in the horizontal
direction.  By default, the value is <code>1</code>.
The value must not be negative or 0.

"
      end

      attribute 389378 "sourceYSubsampling"
	protected explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The decimation subsampling to be applied in the vertical
direction.  By default, the value is <code>1</code>.
The value must not be negative or 0.

"
      end

      attribute 389506 "subsamplingXOffset"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A horizontal offset to be applied to the subsampling grid before
subsampling.  The first pixel to be used will be offset this
amount from the origin of the region, or of the image if no
region is specified.

"
      end

      attribute 389634 "subsamplingYOffset"
	protected explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A vertical offset to be applied to the subsampling grid before
subsampling.  The first pixel to be used will be offset this
amount from the origin of the region, or of the image if no
region is specified.

"
      end

      attribute 389762 "sourceBands"
	protected explicit_type "int"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An array of <code>int</code>s indicating which source bands
will be used, or <code>null</code>.  If <code>null</code>, the
set of source bands to be used is as described in the comment
for the <code>setSourceBands</code> method.  No value should
be allowed to be negative.

"
      end

      classrelation 553986 // destinationType (<unidirectional association>)
	relation 553986 --->
	  a role_name "destinationType" init_value " null" protected
	    comment "
An <code>ImageTypeSpecifier</code> to be used to generate a
destination image when reading, or to set the output color type
when writing.  If non has been set the value will be
<code>null</code>.  By default, the value is <code>null</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 553986 // destinationType (<unidirectional association>)
	  b parent class_ref 313474 // ImageTypeSpecifier
      end

      classrelation 554114 // destinationOffset (<unidirectional association>)
	relation 554114 --->
	  a role_name "destinationOffset" init_value " new Point(0, 0)" protected
	    comment "
The offset in the destination where the upper-left decoded
pixel should be placed.  By default, the value is (0, 0).

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 554114 // destinationOffset (<unidirectional association>)
	  b parent class_ref 323714 // Point
      end

      classrelation 554242 // defaultController (<unidirectional association>)
	relation 554242 --->
	  a role_name "defaultController" init_value " null" protected
	    comment "
The default <code>IIOParamController</code> that will be
used to provide settings for this <code>IIOParam</code>
object when the <code>activateController</code> method
is called.  This default should be set by subclasses
that choose to provide their own default controller,
usually a GUI, for setting parameters.

@see IIOParamController
@see #getDefaultController
@see #activateController

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 554242 // defaultController (<unidirectional association>)
	  b parent class_ref 326274 // IIOParamController
      end

      classrelation 554370 // controller (<unidirectional association>)
	relation 554370 --->
	  a role_name "controller" init_value " null" protected
	    comment "
The <code>IIOParamController</code> that will be
used to provide settings for this <code>IIOParam</code>
object when the <code>activateController</code> method
is called.  This value overrides any default controller,
even when null.

@see IIOParamController
@see #setController(IIOParamController)
@see #hasController()
@see #activateController()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 554370 // controller (<unidirectional association>)
	  b parent class_ref 326274 // IIOParamController
      end

      operation 1777794 "IIOParam"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected constructor may be called only by subclasses.
"
      end

      operation 1777922 "setSourceRegion"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sourceRegion" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the source region of interest.  The region of interest is
described as a rectangle, with the upper-left corner of the
source image as pixel (0, 0) and increasing values down and to
the right.  The actual number of pixels used will depend on
the subsampling factors set by <code>setSourceSubsampling</code>.
If subsampling has been set such that this number is zero,
an <code>IllegalStateException</code> will be thrown.

<p> The source region of interest specified by this method will
be clipped as needed to fit within the source bounds, as well
as the destination offsets, width, and height at the time of
actual I/O.

<p> A value of <code>null</code> for <code>sourceRegion</code>
will remove any region specification, causing the entire image
to be used.

@param sourceRegion a <code>Rectangle</code> specifying the
source region of interest, or <code>null</code>.

@exception IllegalArgumentException if
<code>sourceRegion</code> is non-<code>null</code> and either
<code>sourceRegion.x</code> or <code>sourceRegion.y</code> is
negative.
@exception IllegalArgumentException if
<code>sourceRegion</code> is non-<code>null</code> and either
<code>sourceRegion.width</code> or
<code>sourceRegion.height</code> is negative or 0.
@exception IllegalStateException if subsampling is such that
this region will have a subsampled width or height of zero.

@see #getSourceRegion
@see #setSourceSubsampling
@see ImageReadParam#setDestinationOffset
@see ImageReadParam#getDestinationOffset
"
      end

      operation 1778050 "getSourceRegion"
	public return_type class_ref 314114 // Rectangle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the source region to be used.  The returned value is
that set by the most recent call to
<code>setSourceRegion</code>, and will be <code>null</code> if
there is no region set.

@return the source region of interest as a
<code>Rectangle</code>, or <code>null</code>.

@see #setSourceRegion
"
      end

      operation 1778178 "setSourceSubsampling"
	public explicit_return_type "void"
	nparams 4
	  param in name "sourceXSubsampling" explicit_type "int"
	  param in name "sourceYSubsampling" explicit_type "int"
	  param in name "subsamplingXOffset" explicit_type "int"
	  param in name "subsamplingYOffset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies a decimation subsampling to apply on I/O.  The
<code>sourceXSubsampling</code> and
<code>sourceYSubsampling</code> parameters specify the
subsampling period (<i>i.e.</i>, the number of rows and columns
to advance after every source pixel).  Specifically, a period of
1 will use every row or column; a period of 2 will use every
other row or column.  The <code>subsamplingXOffset</code> and
<code>subsamplingYOffset</code> parameters specify an offset
from the region (or image) origin for the first subsampled pixel.
Adjusting the origin of the subsample grid is useful for avoiding
seams when subsampling a very large source image into destination
regions that will be assembled into a complete subsampled image.
Most users will want to simply leave these parameters at 0.

<p> The number of pixels and scanlines to be used are calculated
as follows.
<p>
The number of subsampled pixels in a scanline is given by
<p>
<code>truncate[(width - subsamplingXOffset + sourceXSubsampling - 1)
/ sourceXSubsampling]</code>.
<p>
If the region is such that this width is zero, an
<code>IllegalStateException</code> is thrown.
<p>
The number of scanlines to be used can be computed similarly.

<p>The ability to set the subsampling grid to start somewhere
other than the source region origin is useful if the
region is being used to create subsampled tiles of a large image,
where the tile width and height are not multiples of the
subsampling periods.  If the subsampling grid does not remain
consistent from tile to tile, there will be artifacts at the tile
boundaries.  By adjusting the subsampling grid offset for each
tile to compensate, these artifacts can be avoided.  The tradeoff
is that in order to avoid these artifacts, the tiles are not all
the same size.  The grid offset to use in this case is given by:
<br>
grid offset = [period - (region offset modulo period)] modulo period)

<p> If either <code>sourceXSubsampling</code> or
<code>sourceYSubsampling</code> is 0 or negative, an
<code>IllegalArgumentException</code> will be thrown.

<p> If either <code>subsamplingXOffset</code> or
<code>subsamplingYOffset</code> is negative or greater than or
equal to the corresponding period, an
<code>IllegalArgumentException</code> will be thrown.

<p> There is no <code>unsetSourceSubsampling</code> method;
simply call <code>setSourceSubsampling(1, 1, 0, 0)</code> to
restore default values.

@param sourceXSubsampling the number of columns to advance
between pixels.
@param sourceYSubsampling the number of rows to advance between
pixels.
@param subsamplingXOffset the horizontal offset of the first subsample
within the region, or within the image if no region is set.
@param subsamplingYOffset the horizontal offset of the first subsample
within the region, or within the image if no region is set.
@exception IllegalArgumentException if either period is
negative or 0, or if either grid offset is negative or greater than
the corresponding period.
@exception IllegalStateException if the source region is such that
the subsampled output would contain no pixels.
"
      end

      operation 1778306 "getSourceXSubsampling"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of source columns to advance for each pixel.

<p>If <code>setSourceSubsampling</code> has not been called, 1
is returned (which is the correct value).

@return the source subsampling X period.

@see #setSourceSubsampling
@see #getSourceYSubsampling
"
      end

      operation 1778434 "getSourceYSubsampling"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of rows to advance for each pixel.

<p>If <code>setSourceSubsampling</code> has not been called, 1
is returned (which is the correct value).

@return the source subsampling Y period.

@see #setSourceSubsampling
@see #getSourceXSubsampling
"
      end

      operation 1778562 "getSubsamplingXOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the horizontal offset of the subsampling grid.

<p>If <code>setSourceSubsampling</code> has not been called, 0
is returned (which is the correct value).

@return the source subsampling grid X offset.

@see #setSourceSubsampling
@see #getSubsamplingYOffset
"
      end

      operation 1778690 "getSubsamplingYOffset"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the vertical offset of the subsampling grid.

<p>If <code>setSourceSubsampling</code> has not been called, 0
is returned (which is the correct value).

@return the source subsampling grid Y offset.

@see #setSourceSubsampling
@see #getSubsamplingXOffset
"
      end

      operation 1778818 "setSourceBands"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sourceBands" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the indices of the source bands to be used.  Duplicate
indices are not allowed.

<p> A <code>null</code> value indicates that all source bands
will be used.

<p> At the time of reading, an
<code>IllegalArgumentException</code> will be thrown by the
reader or writer if a value larger than the largest available
source band index has been specified or if the number of source
bands and destination bands to be used differ.  The
<code>ImageReader.checkReadParamBandSettings</code> method may
be used to automate this test.

<p> Semantically, a copy is made of the array; changes to the
array contents subsequent to this call have no effect on
this <code>IIOParam</code>.

@param sourceBands an array of integer band indices to be
used.

@exception IllegalArgumentException if <code>sourceBands</code>
contains a negative or duplicate value.

@see #getSourceBands
@see ImageReadParam#setDestinationBands
@see ImageReader#checkReadParamBandSettings
"
      end

      operation 1778946 "getSourceBands"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of of source bands to be used. The returned
value is that set by the most recent call to
<code>setSourceBands</code>, or <code>null</code> if there have
been no calls to <code>setSourceBands</code>.

<p> Semantically, the array returned is a copy; changes to
array contents subsequent to this call have no effect on this
<code>IIOParam</code>.

@return the set of source bands to be used, or
<code>null</code>.

@see #setSourceBands
"
      end

      operation 1779074 "setDestinationType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "destinationType" type class_ref 313474 // ImageTypeSpecifier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the desired image type for the destination image, using an
<code>ImageTypeSpecifier</code>.

<p> When reading, if the layout of the destination has been set
using this method, each call to an <code>ImageReader</code>
<code>read</code> method will return a new
<code>BufferedImage</code> using the format specified by the
supplied type specifier.  As a side effect, any destination
<code>BufferedImage</code> set by
<code>ImageReadParam.setDestination(BufferedImage)</code> will
no longer be set as the destination.  In other words, this
method may be thought of as calling
<code>setDestination((BufferedImage)null)</code>.

<p> When writing, the destination type maybe used to determine
the color type of the image.  The <code>SampleModel</code>
information will be ignored, and may be <code>null</code>.  For
example, a 4-banded image could represent either CMYK or RGBA
data.  If a destination type is set, its
<code>ColorModel</code> will override any
<code>ColorModel</code> on the image itself.  This is crucial
when <code>setSourceBands</code> is used since the image's
<code>ColorModel</code> will refer to the entire image rather
than to the subset of bands being written.

@param destinationType the <code>ImageTypeSpecifier</code> to
be used to determine the destination layout and color type.

@see #getDestinationType
"
      end

      operation 1779202 "getDestinationType"
	public return_type class_ref 313474 // ImageTypeSpecifier
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of image to be returned by the read, if one
was set by a call to
<code>setDestination(ImageTypeSpecifier)</code>, as an
<code>ImageTypeSpecifier</code>.  If none was set,
<code>null</code> is returned.

@return an <code>ImageTypeSpecifier</code> describing the
destination type, or <code>null</code>.

@see #setDestinationType
"
      end

      operation 1779330 "setDestinationOffset"
	public explicit_return_type "void"
	nparams 1
	  param inout name "destinationOffset" type class_ref 323714 // Point
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specifies the offset in the destination image at which future
decoded pixels are to be placed, when reading, or where a
region will be written, when writing.

<p> When reading, the region to be written within the
destination <code>BufferedImage</code> will start at this
offset and have a width and height determined by the source
region of interest, the subsampling parameters, and the
destination bounds.

<p> Normal writes are not affected by this method, only writes
performed using <code>ImageWriter.replacePixels</code>.  For
such writes, the offset specified is within the output stream
image whose pixels are being modified.

<p> There is no <code>unsetDestinationOffset</code> method;
simply call <code>setDestinationOffset(new Point(0, 0))</code> to
restore default values.

@param destinationOffset the offset in the destination, as a
<code>Point</code>.

@exception IllegalArgumentException if
<code>destinationOffset</code> is <code>null</code>.

@see #getDestinationOffset
@see ImageWriter#replacePixels
"
      end

      operation 1779458 "getDestinationOffset"
	public return_type class_ref 323714 // Point
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the offset in the destination image at which pixels are
to be placed.

<p> If <code>setDestinationOffsets</code> has not been called,
a <code>Point</code> with zero X and Y values is returned
(which is the correct value).

@return the destination offset as a <code>Point</code>.

@see #setDestinationOffset
"
      end

      operation 1779586 "setController"
	public explicit_return_type "void"
	nparams 1
	  param inout name "controller" type class_ref 326274 // IIOParamController
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>IIOParamController</code> to be used
to provide settings for this <code>IIOParam</code>
object when the <code>activateController</code> method
is called, overriding any default controller.  If the
argument is <code>null</code>, no controller will be
used, including any default.  To restore the default, use
<code>setController(getDefaultController())</code>.

@param controller An appropriate
<code>IIOParamController</code>, or <code>null</code>.

@see IIOParamController
@see #getController
@see #getDefaultController
@see #hasController
@see #activateController()
"
      end

      operation 1779714 "getController"
	public return_type class_ref 326274 // IIOParamController
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whatever <code>IIOParamController</code> is currently
installed.  This could be the default if there is one,
<code>null</code>, or the argument of the most recent call
to <code>setController</code>.

@return the currently installed
<code>IIOParamController</code>, or <code>null</code>.

@see IIOParamController
@see #setController
@see #getDefaultController
@see #hasController
@see #activateController()
"
      end

      operation 1779842 "getDefaultController"
	public return_type class_ref 326274 // IIOParamController
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default <code>IIOParamController</code>, if there
is one, regardless of the currently installed controller.  If
there is no default controller, returns <code>null</code>.

@return the default <code>IIOParamController</code>, or
<code>null</code>.

@see IIOParamController
@see #setController(IIOParamController)
@see #getController
@see #hasController
@see #activateController()
"
      end

      operation 1779970 "hasController"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if there is a controller installed
for this <code>IIOParam</code> object.  This will return
<code>true</code> if <code>getController</code> would not
return <code>null</code>.

@return <code>true</code> if a controller is installed.

@see IIOParamController
@see #setController(IIOParamController)
@see #getController
@see #getDefaultController
@see #activateController()
"
      end

      operation 1780098 "activateController"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Activates the installed <code>IIOParamController</code> for
this <code>IIOParam</code> object and returns the resulting
value.  When this method returns <code>true</code>, all values
for this <code>IIOParam</code> object will be ready for the
next read or write operation.  If <code>false</code> is
returned, no settings in this object will have been disturbed
(<i>i.e.</i>, the user canceled the operation).

<p> Ordinarily, the controller will be a GUI providing a user
interface for a subclass of <code>IIOParam</code> for a
particular plug-in.  Controllers need not be GUIs, however.

@return <code>true</code> if the controller completed normally.

@exception IllegalStateException if there is no controller
currently installed.

@see IIOParamController
@see #setController(IIOParamController)
@see #getController
@see #getDefaultController
@see #hasController
"
      end
    end

    class 326274 "IIOParamController"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface to be implemented by objects that can determine the
settings of an <code>IIOParam</code> object, either by putting up a
GUI to obtain values from a user, or by other means.  This
interface merely specifies a generic <code>activate</code> method
that invokes the controller, without regard for how the controller
obtains values (<i>i.e.</i>, whether the controller puts up a GUI
or merely computes a set of values is irrelevant to this
interface).

<p> Within the <code>activate</code> method, a controller obtains
initial values by querying the <code>IIOParam</code> object's
<code>get</code> methods, modifies values by whatever means, then
invokes the <code>IIOParam</code> object's <code>set</code> methods
to modify the appropriate settings.  Normally, these
<code>set</code> methods will be invoked all at once at a final
commit in order that a cancel operation not disturb existing
values.  In general, applications may expect that when the
<code>activate</code> method returns <code>true</code>, the
<code>IIOParam</code> object is ready for use in a read or write
operation.

<p> Vendors may choose to provide GUIs for the
<code>IIOParam</code> subclasses they define for a particular
plug-in.  These can be set up as default controllers in the
corresponding <code>IIOParam</code> subclasses.

<p> Applications may override any default GUIs and provide their
own controllers embedded in their own framework.  All that is
required is that the<code>activate</code> method behave modally
(not returning until either cancelled or committed), though it need
not put up an explicitly modal dialog.  Such a non-modal GUI
component would be coded roughly as follows:

<br>
<pre>
class MyGUI extends SomeComponent implements IIOParamController {

   public MyGUI() {
       // ...
       setEnabled(false);
   }

   public boolean activate(IIOParam param) {
       // disable other components if desired
       setEnabled(true);
       // go to sleep until either cancelled or committed
       boolean ret = false;
       if (!cancelled) {
           // set values on param
           ret = true;
       }
       setEnabled(false);
       // enable any components disabled above
       return ret;
   }
</pre>

<p> Alternatively, an algorithmic process such as a database lookup
or the parsing of a command line could be used as a controller, in
which case the <code>activate</code> method would simply look up or
compute the settings, call the <code>IIOParam.setXXX</code>
methods, and return <code>true</code>.

@see IIOParam#setController
@see IIOParam#getController
@see IIOParam#getDefaultController
@see IIOParam#hasController
@see IIOParam#activateController

"
      operation 9644034 "activate"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "param" type class_ref 326146 // IIOParam
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Activates the controller.  If <code>true</code> is returned,
all settings in the <code>IIOParam</code> object should be
ready for use in a read or write operation.  If
<code>false</code> is returned, no settings in the
<code>IIOParam</code> object will be disturbed (<i>i.e.</i>,
the user canceled the operation).

@param param the <code>IIOParam</code> object to be modified.

@return <code>true</code> if the <code>IIOParam</code> has been
modified, <code>false</code> otherwise.

@exception IllegalArgumentException if <code>param</code> is
<code>null</code> or is not an instance of the correct class.
"
      end
    end

    class 1174274 "ImageIO"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class containing static convenience methods for locating
<code>ImageReader</code>s and <code>ImageWriter</code>s, and
performing simple encoding and decoding.

"
      classrelation 3751938 // theRegistry (<unidirectional association>)
	relation 3751938 --->
	  a role_name "theRegistry" init_value "
        IIORegistry.getDefaultInstance()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3751938 // theRegistry (<unidirectional association>)
	  b parent class_ref 1174402 // IIORegistry
      end

      operation 9644162 "ImageIO"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor is private to prevent instantiation.
"
      end

      operation 9644290 "scanForPlugins"
	class_operation public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scans for plug-ins on the application class path,
loads their service provider classes, and registers a service
provider instance for each one found with the
<code>IIORegistry</code>.

<p>This method is needed because the application class path can
theoretically change, or additional plug-ins may become available.
Rather than re-scanning the classpath on every invocation of the
API, the class path is scanned automatically only on the first
invocation. Clients can call this method to prompt a re-scan.
Thus this method need only be invoked by sophisticated applications
which dynamically make new plug-ins available at runtime.

<p> The <code>getResources</code> method of the context
<code>ClassLoader</code> is used locate JAR files containing
files named
<code>META-INF/services/javax.imageio.spi.</code><i>classname</i>,
where <i>classname</i> is one of <code>ImageReaderSpi</code>,
<code>ImageWriterSpi</code>, <code>ImageTranscoderSpi</code>,
<code>ImageInputStreamSpi</code>, or
<code>ImageOutputStreamSpi</code>, along the application class
path.

<p> The contents of the located files indicate the names of
actual implementation classes which implement the
aforementioned service provider interfaces; the default class
loader is then used to load each of these classes and to
instantiate an instance of each class, which is then placed
into the registry for later retrieval.

<p> The exact set of locations searched depends on the
implementation of the Java runtime environment.

@see ClassLoader#getResources
"
      end

      class 1174530 "CacheInfo"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2243458 "useCache"
	  package explicit_type "boolean"
	  init_value " true"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3752066 // cacheDirectory (<unidirectional association>)
	  relation 3752066 --->
	    a role_name "cacheDirectory" init_value " null" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3752066 // cacheDirectory (<unidirectional association>)
	    b parent class_ref 131970 // File
	end

	classrelation 3752194 // hasPermission (<unidirectional association>)
	  relation 3752194 --->
	    a role_name "hasPermission" init_value " null" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3752194 // hasPermission (<unidirectional association>)
	    b parent class_ref 315010 // Boolean
	end

	operation 9644418 "CacheInfo"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9644546 "getUseCache"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9644674 "setUseCache"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "useCache" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9644802 "getCacheDirectory"
	  public return_type class_ref 131970 // File
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9644930 "setCacheDirectory"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "cacheDirectory" type class_ref 131970 // File
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9645058 "getHasPermission"
	  public return_type class_ref 315010 // Boolean
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9645186 "setHasPermission"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "hasPermission" type class_ref 315010 // Boolean
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9645314 "getCacheInfo"
	class_operation private return_type class_ref 1174530 // CacheInfo
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>CacheInfo</code> object associated with this
<code>ThreadGroup</code>.
"
      end

      operation 9645442 "getTempDir"
	class_operation private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default temporary (cache) directory as defined by the
java.io.tmpdir system property.
"
      end

      operation 9645570 "hasCachePermission"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the caller has write access to the cache
directory, stores the result in the <code>CacheInfo</code> object,
and returns the decision.  This method helps to prevent mysterious
SecurityExceptions to be thrown when this convenience class is used
in an applet, for example.
"
      end

      operation 9645698 "setUseCache"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "useCache" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a flag indicating whether a disk-based cache file should
be used when creating <code>ImageInputStream</code>s and
<code>ImageOutputStream</code>s.

<p> When reading from a standard <code>InputStream</code>, it
may be necessary to save previously read information in a cache
since the underlying stream does not allow data to be re-read.
Similarly, when writing to a standard
<code>OutputStream</code>, a cache may be used to allow a
previously written value to be changed before flushing it to
the final destination.

<p> The cache may reside in main memory or on disk.  Setting
this flag to <code>false</code> disallows the use of disk for
future streams, which may be advantageous when working with
small images, as the overhead of creating and destroying files
is removed.

<p> On startup, the value is set to <code>true</code>.

@param useCache a <code>boolean</code> indicating whether a
cache file should be used, in cases where it is optional.

@see #getUseCache
"
      end

      operation 9645826 "getUseCache"
	class_operation public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value set by <code>setUseCache</code>, or
<code>true</code> if no explicit setting has been made.

@return true if a disk-based cache may be used for
<code>ImageInputStream</code>s and
<code>ImageOutputStream</code>s.

@see #setUseCache
"
      end

      operation 9645954 "setCacheDirectory"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "cacheDirectory" type class_ref 131970 // File
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the directory where cache files are to be created.  A
value of <code>null</code> indicates that the system-dependent
default temporary-file directory is to be used.  If
<code>getUseCache</code> returns false, this value is ignored.

@param cacheDirectory a <code>File</code> specifying a directory.

@see File#createTempFile(String, String, File)

@exception SecurityException if the security manager denies
access to the directory.
@exception IllegalArgumentException if <code>cacheDir</code> is
non-<code>null</code> but is not a directory.

@see #getCacheDirectory
"
      end

      operation 9646082 "getCacheDirectory"
	class_operation public return_type class_ref 131970 // File
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value set by
<code>setCacheDirectory</code>, or <code>null</code> if no
explicit setting has been made.

@return a <code>File</code> indicating the directory where
cache files will be created, or <code>null</code> to indicate
the system-dependent default temporary-file directory.

@see #setCacheDirectory
"
      end

      operation 9646210 "createImageInputStream"
	class_operation public return_type class_ref 314498 // ImageInputStream
	nparams 1
	  param inout name "input" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>ImageInputStream</code> that will take its
input from the given <code>Object</code>.  The set of
<code>ImageInputStreamSpi</code>s registered with the
<code>IIORegistry</code> class is queried and the first one
that is able to take input from the supplied object is used to
create the returned <code>ImageInputStream</code>.  If no
suitable <code>ImageInputStreamSpi</code> exists,
<code>null</code> is returned.

<p> The current cache settings from <code>getUseCache</code>and
<code>getCacheDirectory</code> will be used to control caching.

@param input an <code>Object</code> to be used as an input
source, such as a <code>File</code>, readable
<code>RandomAccessFile</code>, or <code>InputStream</code>.

@return an <code>ImageInputStream</code>, or <code>null</code>.

@exception IllegalArgumentException if <code>input</code>
is <code>null</code>.
@exception IOException if a cache file is needed but cannot be
created.

@see javax.imageio.spi.ImageInputStreamSpi
"
      end

      operation 9646338 "createImageOutputStream"
	class_operation public return_type class_ref 316930 // ImageOutputStream
	nparams 1
	  param inout name "output" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ImageOutputStreams

Returns an <code>ImageOutputStream</code> that will send its
output to the given <code>Object</code>.  The set of
<code>ImageOutputStreamSpi</code>s registered with the
<code>IIORegistry</code> class is queried and the first one
that is able to send output from the supplied object is used to
create the returned <code>ImageOutputStream</code>.  If no
suitable <code>ImageOutputStreamSpi</code> exists,
<code>null</code> is returned.

<p> The current cache settings from <code>getUseCache</code>and
<code>getCacheDirectory</code> will be used to control caching.

@param output an <code>Object</code> to be used as an output
destination, such as a <code>File</code>, writable
<code>RandomAccessFile</code>, or <code>OutputStream</code>.

@return an <code>ImageOutputStream</code>, or
<code>null</code>.

@exception IllegalArgumentException if <code>output</code> is
<code>null</code>.
@exception IOException if a cache file is needed but cannot be
created.

@see javax.imageio.spi.ImageOutputStreamSpi
"
      end

      class 1174658 "SpiInfo"
	visibility private stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2243586 "FORMAT_NAMES"
	  public type class_ref 1174658 // SpiInfo
	  cpp_decl ""
	  java_decl "  ${@}${name} {
            @Override
            String[] info(ImageReaderWriterSpi spi) {
                return spi.getFormatNames();
            }
        },${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2243714 "MIME_TYPES"
	  public type class_ref 1174658 // SpiInfo
	  cpp_decl ""
	  java_decl "  ${@}${name} {
            @Override
            String[] info(ImageReaderWriterSpi spi) {
                return spi.getMIMETypes();
            }
        },${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2243842 "FILE_SUFFIXES"
	  public type class_ref 1174658 // SpiInfo
	  cpp_decl ""
	  java_decl "  ${@}${name} {
            @Override
            String[] info(ImageReaderWriterSpi spi) {
                return spi.getFileSuffixes();
            }
        },${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9646466 "info"
	  abstract package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "spi" type class_ref 315266 // ImageReaderWriterSpi
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9646594 "getReaderWriterInfo"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "spiClass" type class_ref 130818 // Class
	  param inout name "spiInfo" type class_ref 1174658 // SpiInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S extends ImageReaderWriterSpi> ${type}[] ${name}${(}${t0}<S> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9646722 "getReaderFormatNames"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Readers

Returns an array of <code>String</code>s listing all of the
informal format names understood by the current set of registered
readers.

@return an array of <code>String</code>s.
"
      end

      operation 9646850 "getReaderMIMETypes"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>String</code>s listing all of the
MIME types understood by the current set of registered
readers.

@return an array of <code>String</code>s.
"
      end

      operation 9646978 "getReaderFileSuffixes"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>String</code>s listing all of the
file suffixes associated with the formats understood
by the current set of registered readers.

@return an array of <code>String</code>s.
@since 1.6
"
      end

      class 1174786 "ImageReaderIterator"
	visibility package 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3752322 // <realization>
	  relation 3752322 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3752322 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3752450 // iter (<unidirectional association>)
	  relation 3752450 --->
	    a role_name "iter" public
	      comment " Contains ImageReaderSpis
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3752450 // iter (<unidirectional association>)
	    b parent class_ref 132994 // Iterator
	end

	operation 9647106 "ImageReaderIterator"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "iter" type class_ref 132994 // Iterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9647234 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9647362 "next"
	  public return_type class_ref 312706 // ImageReader
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9647490 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1174914 "CanDecodeInputFilter"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3753730 // <realization>
	  relation 3753730 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3753730 // <realization>
	    b parent class_ref 1175042 // Filter
	end

	classrelation 3753858 // input (<unidirectional association>)
	  relation 3753858 --->
	    a role_name "input" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3753858 // input (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 9652098 "CanDecodeInputFilter"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "input" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9652226 "filter"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "elt" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1175554 "CanEncodeImageAndFormatFilter"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3753986 // <realization>
	  relation 3753986 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3753986 // <realization>
	    b parent class_ref 1175042 // Filter
	end

	classrelation 3754114 // type (<unidirectional association>)
	  relation 3754114 --->
	    a role_name "type" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3754114 // type (<unidirectional association>)
	    b parent class_ref 313474 // ImageTypeSpecifier
	end

	classrelation 3754242 // formatName (<unidirectional association>)
	  relation 3754242 --->
	    a role_name "formatName" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3754242 // formatName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 9652354 "CanEncodeImageAndFormatFilter"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "type" type class_ref 313474 // ImageTypeSpecifier
	    param inout name "formatName" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9652482 "filter"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "elt" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1175682 "ContainsFilter"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3754370 // <realization>
	  relation 3754370 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3754370 // <realization>
	    b parent class_ref 1175042 // Filter
	end

	classrelation 3754498 // method (<unidirectional association>)
	  relation 3754498 --->
	    a role_name "method" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3754498 // method (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end

	classrelation 3754626 // name (<unidirectional association>)
	  relation 3754626 --->
	    a role_name "name" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3754626 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 9652610 "ContainsFilter"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "method" type class_ref 137858 // Method
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " method returns an array of Strings"
	end

	operation 9652738 "filter"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "elt" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9652866 "getImageReaders"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "input" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageReader> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageReader</code>s that claim to be able to
decode the supplied <code>Object</code>, typically an
<code>ImageInputStream</code>.

<p> The stream position is left at its prior position upon
exit from this method.

@param input an <code>ImageInputStream</code> or other
<code>Object</code> containing encoded image data.

@return an <code>Iterator</code> containing <code>ImageReader</code>s.

@exception IllegalArgumentException if <code>input</code> is
<code>null</code>.

@see javax.imageio.spi.ImageReaderSpi#canDecodeInput
"
      end

      classrelation 3754754 // readerFormatNamesMethod (<unidirectional association>)
	relation 3754754 --->
	  a role_name "readerFormatNamesMethod" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3754754 // readerFormatNamesMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3754882 // readerFileSuffixesMethod (<unidirectional association>)
	relation 3754882 --->
	  a role_name "readerFileSuffixesMethod" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3754882 // readerFileSuffixesMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3755010 // readerMIMETypesMethod (<unidirectional association>)
	relation 3755010 --->
	  a role_name "readerMIMETypesMethod" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3755010 // readerMIMETypesMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3755138 // writerFormatNamesMethod (<unidirectional association>)
	relation 3755138 --->
	  a role_name "writerFormatNamesMethod" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3755138 // writerFormatNamesMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3755266 // writerFileSuffixesMethod (<unidirectional association>)
	relation 3755266 --->
	  a role_name "writerFileSuffixesMethod" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3755266 // writerFileSuffixesMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 3755394 // writerMIMETypesMethod (<unidirectional association>)
	relation 3755394 --->
	  a role_name "writerMIMETypesMethod" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3755394 // writerMIMETypesMethod (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      extra_member 179074 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            readerFormatNamesMethod =
                ImageReaderSpi.class.getMethod(\"getFormatNames\");
            readerFileSuffixesMethod =
                ImageReaderSpi.class.getMethod(\"getFileSuffixes\");
            readerMIMETypesMethod =
                ImageReaderSpi.class.getMethod(\"getMIMETypes\");

            writerFormatNamesMethod =
                ImageWriterSpi.class.getMethod(\"getFormatNames\");
            writerFileSuffixesMethod =
                ImageWriterSpi.class.getMethod(\"getFileSuffixes\");
            writerMIMETypesMethod =
                ImageWriterSpi.class.getMethod(\"getMIMETypes\");
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 9652994 "getImageReadersByFormatName"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "formatName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageReader> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageReader</code>s that claim to be able to
decode the named format.

@param formatName a <code>String</code> containing the informal
name of a format (<i>e.g.</i>, \"jpeg\" or \"tiff\".

@return an <code>Iterator</code> containing
<code>ImageReader</code>s.

@exception IllegalArgumentException if <code>formatName</code>
is <code>null</code>.

@see javax.imageio.spi.ImageReaderSpi#getFormatNames
"
      end

      operation 9653122 "getImageReadersBySuffix"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "fileSuffix" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageReader> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageReader</code>s that claim to be able to
decode files with the given suffix.

@param fileSuffix a <code>String</code> containing a file
suffix (<i>e.g.</i>, \"jpg\" or \"tiff\").

@return an <code>Iterator</code> containing
<code>ImageReader</code>s.

@exception IllegalArgumentException if <code>fileSuffix</code>
is <code>null</code>.

@see javax.imageio.spi.ImageReaderSpi#getFileSuffixes
"
      end

      operation 9653250 "getImageReadersByMIMEType"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "MIMEType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageReader> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageReader</code>s that claim to be able to
decode files with the given MIME type.

@param MIMEType a <code>String</code> containing a file
suffix (<i>e.g.</i>, \"image/jpeg\" or \"image/x-bmp\").

@return an <code>Iterator</code> containing
<code>ImageReader</code>s.

@exception IllegalArgumentException if <code>MIMEType</code> is
<code>null</code>.

@see javax.imageio.spi.ImageReaderSpi#getMIMETypes
"
      end

      operation 9653378 "getWriterFormatNames"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Writers

Returns an array of <code>String</code>s listing all of the
informal format names understood by the current set of registered
writers.

@return an array of <code>String</code>s.
"
      end

      operation 9653506 "getWriterMIMETypes"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>String</code>s listing all of the
MIME types understood by the current set of registered
writers.

@return an array of <code>String</code>s.
"
      end

      operation 9653634 "getWriterFileSuffixes"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of <code>String</code>s listing all of the
file suffixes associated with the formats understood
by the current set of registered writers.

@return an array of <code>String</code>s.
@since 1.6
"
      end

      class 1175810 "ImageWriterIterator"
	visibility package 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3755522 // <realization>
	  relation 3755522 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3755522 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3755650 // iter (<unidirectional association>)
	  relation 3755650 --->
	    a role_name "iter" public
	      comment " Contains ImageWriterSpis
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3755650 // iter (<unidirectional association>)
	    b parent class_ref 132994 // Iterator
	end

	operation 9653762 "ImageWriterIterator"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "iter" type class_ref 132994 // Iterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9653890 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9654018 "next"
	  public return_type class_ref 316034 // ImageWriter
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9654146 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9654274 "contains"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "names" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9654402 "getImageWritersByFormatName"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "formatName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageWriter> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageWriter</code>s that claim to be able to
encode the named format.

@param formatName a <code>String</code> containing the informal
name of a format (<i>e.g.</i>, \"jpeg\" or \"tiff\".

@return an <code>Iterator</code> containing
<code>ImageWriter</code>s.

@exception IllegalArgumentException if <code>formatName</code> is
<code>null</code>.

@see javax.imageio.spi.ImageWriterSpi#getFormatNames
"
      end

      operation 9654530 "getImageWritersBySuffix"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "fileSuffix" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageWriter> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageWriter</code>s that claim to be able to
encode files with the given suffix.

@param fileSuffix a <code>String</code> containing a file
suffix (<i>e.g.</i>, \"jpg\" or \"tiff\").

@return an <code>Iterator</code> containing <code>ImageWriter</code>s.

@exception IllegalArgumentException if <code>fileSuffix</code> is
<code>null</code>.

@see javax.imageio.spi.ImageWriterSpi#getFileSuffixes
"
      end

      operation 9654658 "getImageWritersByMIMEType"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "MIMEType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageWriter> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageWriter</code>s that claim to be able to
encode files with the given MIME type.

@param MIMEType a <code>String</code> containing a file
suffix (<i>e.g.</i>, \"image/jpeg\" or \"image/x-bmp\").

@return an <code>Iterator</code> containing <code>ImageWriter</code>s.

@exception IllegalArgumentException if <code>MIMEType</code> is
<code>null</code>.

@see javax.imageio.spi.ImageWriterSpi#getMIMETypes
"
      end

      operation 9654786 "getImageWriter"
	class_operation public return_type class_ref 316034 // ImageWriter
	nparams 1
	  param inout name "reader" type class_ref 312706 // ImageReader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>ImageWriter</code>corresponding to the given
<code>ImageReader</code>, if there is one, or <code>null</code>
if the plug-in for this <code>ImageReader</code> does not
specify a corresponding <code>ImageWriter</code>, or if the
given <code>ImageReader</code> is not registered.  This
mechanism may be used to obtain an <code>ImageWriter</code>
that will understand the internal structure of non-pixel
metadata (as encoded by <code>IIOMetadata</code> objects)
generated by the <code>ImageReader</code>.  By obtaining this
data from the <code>ImageReader</code> and passing it on to the
<code>ImageWriter</code> obtained with this method, a client
program can read an image, modify it in some way, and write it
back out preserving all metadata, without having to understand
anything about the structure of the metadata, or even about
the image format.  Note that this method returns the
\"preferred\" writer, which is the first in the list returned by
<code>javax.imageio.spi.ImageReaderSpi.getImageWriterSpiNames()</code>.

@param reader an instance of a registered <code>ImageReader</code>.

@return an <code>ImageWriter</code>, or null.

@exception IllegalArgumentException if <code>reader</code> is
<code>null</code>.

@see #getImageReader(ImageWriter)
@see javax.imageio.spi.ImageReaderSpi#getImageWriterSpiNames()
"
      end

      operation 9654914 "getImageReader"
	class_operation public return_type class_ref 312706 // ImageReader
	nparams 1
	  param inout name "writer" type class_ref 316034 // ImageWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>ImageReader</code>corresponding to the given
<code>ImageWriter</code>, if there is one, or <code>null</code>
if the plug-in for this <code>ImageWriter</code> does not
specify a corresponding <code>ImageReader</code>, or if the
given <code>ImageWriter</code> is not registered.  This method
is provided principally for symmetry with
<code>getImageWriter(ImageReader)</code>.  Note that this
method returns the \"preferred\" reader, which is the first in
the list returned by
javax.imageio.spi.ImageWriterSpi.<code>getImageReaderSpiNames()</code>.

@param writer an instance of a registered <code>ImageWriter</code>.

@return an <code>ImageReader</code>, or null.

@exception IllegalArgumentException if <code>writer</code> is
<code>null</code>.

@see #getImageWriter(ImageReader)
@see javax.imageio.spi.ImageWriterSpi#getImageReaderSpiNames()
"
      end

      operation 9655042 "getImageWriters"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 2
	  param inout name "type" type class_ref 313474 // ImageTypeSpecifier
	  param inout name "formatName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageWriter> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageWriter</code>s that claim to be able to
encode images of the given layout (specified using an
<code>ImageTypeSpecifier</code>) in the given format.

@param type an <code>ImageTypeSpecifier</code> indicating the
layout of the image to be written.
@param formatName the informal name of the <code>format</code>.

@return an <code>Iterator</code> containing <code>ImageWriter</code>s.

@exception IllegalArgumentException if any parameter is
<code>null</code>.

@see javax.imageio.spi.ImageWriterSpi#canEncodeImage(ImageTypeSpecifier)
"
      end

      class 1175938 "ImageTranscoderIterator"
	visibility package 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3755778 // <realization>
	  relation 3755778 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3755778 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	classrelation 3755906 // iter (<unidirectional association>)
	  relation 3755906 --->
	    a role_name "iter" public
	      comment " Contains ImageTranscoderSpis
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3755906 // iter (<unidirectional association>)
	    b parent class_ref 132994 // Iterator
	end

	operation 9655170 "ImageTranscoderIterator"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "iter" type class_ref 132994 // Iterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9655298 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9655426 "next"
	  public return_type class_ref 316162 // ImageTranscoder
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9655554 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1176066 "TranscoderFilter"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3756034 // <realization>
	  relation 3756034 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3756034 // <realization>
	    b parent class_ref 1175042 // Filter
	end

	classrelation 3756162 // readerSpiName (<unidirectional association>)
	  relation 3756162 --->
	    a role_name "readerSpiName" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3756162 // readerSpiName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3756290 // writerSpiName (<unidirectional association>)
	  relation 3756290 --->
	    a role_name "writerSpiName" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3756290 // writerSpiName (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	operation 9655682 "TranscoderFilter"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "readerSpi" type class_ref 312834 // ImageReaderSpi
	    param inout name "writerSpi" type class_ref 316418 // ImageWriterSpi
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9655810 "filter"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "elt" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9655938 "getImageTranscoders"
	class_operation public return_type class_ref 132994 // Iterator
	nparams 2
	  param inout name "reader" type class_ref 312706 // ImageReader
	  param inout name "writer" type class_ref 316034 // ImageWriter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ImageTranscoder> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> containing all currently
registered <code>ImageTranscoder</code>s that claim to be
able to transcode between the metadata of the given
<code>ImageReader</code> and <code>ImageWriter</code>.

@param reader an <code>ImageReader</code>.
@param writer an <code>ImageWriter</code>.

@return an <code>Iterator</code> containing
<code>ImageTranscoder</code>s.

@exception IllegalArgumentException if <code>reader</code> or
<code>writer</code> is <code>null</code>.
"
      end

      operation 9656066 "read"
	class_operation public return_type class_ref 311554 // BufferedImage
	nparams 1
	  param inout name "input" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " All-in-one methods

Returns a <code>BufferedImage</code> as the result of decoding
a supplied <code>File</code> with an <code>ImageReader</code>
chosen automatically from among those currently registered.
The <code>File</code> is wrapped in an
<code>ImageInputStream</code>.  If no registered
<code>ImageReader</code> claims to be able to read the
resulting stream, <code>null</code> is returned.

<p> The current cache settings from <code>getUseCache</code>and
<code>getCacheDirectory</code> will be used to control caching in the
<code>ImageInputStream</code> that is created.

<p> Note that there is no <code>read</code> method that takes a
filename as a <code>String</code>; use this method instead after
creating a <code>File</code> from the filename.

<p> This method does not attempt to locate
<code>ImageReader</code>s that can read directly from a
<code>File</code>; that may be accomplished using
<code>IIORegistry</code> and <code>ImageReaderSpi</code>.

@param input a <code>File</code> to read from.

@return a <code>BufferedImage</code> containing the decoded
contents of the input, or <code>null</code>.

@exception IllegalArgumentException if <code>input</code> is
<code>null</code>.
@exception IOException if an error occurs during reading.
"
      end

      operation 9656194 "read"
	class_operation public return_type class_ref 311554 // BufferedImage
	nparams 1
	  param inout name "input" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>BufferedImage</code> as the result of decoding
a supplied <code>InputStream</code> with an <code>ImageReader</code>
chosen automatically from among those currently registered.
The <code>InputStream</code> is wrapped in an
<code>ImageInputStream</code>.  If no registered
<code>ImageReader</code> claims to be able to read the
resulting stream, <code>null</code> is returned.

<p> The current cache settings from <code>getUseCache</code>and
<code>getCacheDirectory</code> will be used to control caching in the
<code>ImageInputStream</code> that is created.

<p> This method does not attempt to locate
<code>ImageReader</code>s that can read directly from an
<code>InputStream</code>; that may be accomplished using
<code>IIORegistry</code> and <code>ImageReaderSpi</code>.

<p> This method <em>does not</em> close the provided
<code>InputStream</code> after the read operation has completed;
it is the responsibility of the caller to close the stream, if desired.

@param input an <code>InputStream</code> to read from.

@return a <code>BufferedImage</code> containing the decoded
contents of the input, or <code>null</code>.

@exception IllegalArgumentException if <code>input</code> is
<code>null</code>.
@exception IOException if an error occurs during reading.
"
      end

      operation 9656322 "read"
	class_operation public return_type class_ref 311554 // BufferedImage
	nparams 1
	  param inout name "input" type class_ref 243458 // URL
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>BufferedImage</code> as the result of decoding
a supplied <code>URL</code> with an <code>ImageReader</code>
chosen automatically from among those currently registered.  An
<code>InputStream</code> is obtained from the <code>URL</code>,
which is wrapped in an <code>ImageInputStream</code>.  If no
registered <code>ImageReader</code> claims to be able to read
the resulting stream, <code>null</code> is returned.

<p> The current cache settings from <code>getUseCache</code>and
<code>getCacheDirectory</code> will be used to control caching in the
<code>ImageInputStream</code> that is created.

<p> This method does not attempt to locate
<code>ImageReader</code>s that can read directly from a
<code>URL</code>; that may be accomplished using
<code>IIORegistry</code> and <code>ImageReaderSpi</code>.

@param input a <code>URL</code> to read from.

@return a <code>BufferedImage</code> containing the decoded
contents of the input, or <code>null</code>.

@exception IllegalArgumentException if <code>input</code> is
<code>null</code>.
@exception IOException if an error occurs during reading.
"
      end

      operation 9656450 "read"
	class_operation public return_type class_ref 311554 // BufferedImage
	nparams 1
	  param inout name "stream" type class_ref 314498 // ImageInputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>BufferedImage</code> as the result of decoding
a supplied <code>ImageInputStream</code> with an
<code>ImageReader</code> chosen automatically from among those
currently registered.  If no registered
<code>ImageReader</code> claims to be able to read the stream,
<code>null</code> is returned.

<p> Unlike most other methods in this class, this method <em>does</em>
close the provided <code>ImageInputStream</code> after the read
operation has completed, unless <code>null</code> is returned,
in which case this method <em>does not</em> close the stream.

@param stream an <code>ImageInputStream</code> to read from.

@return a <code>BufferedImage</code> containing the decoded
contents of the input, or <code>null</code>.

@exception IllegalArgumentException if <code>stream</code> is
<code>null</code>.
@exception IOException if an error occurs during reading.
"
      end

      operation 9656578 "write"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "im" type class_ref 313986 // RenderedImage
	  param inout name "formatName" type class_ref 128130 // String
	  param inout name "output" type class_ref 316930 // ImageOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an image using the an arbitrary <code>ImageWriter</code>
that supports the given format to an
<code>ImageOutputStream</code>.  The image is written to the
<code>ImageOutputStream</code> starting at the current stream
pointer, overwriting existing stream data from that point
forward, if present.

<p> This method <em>does not</em> close the provided
<code>ImageOutputStream</code> after the write operation has completed;
it is the responsibility of the caller to close the stream, if desired.

@param im a <code>RenderedImage</code> to be written.
@param formatName a <code>String</code> containing the informal
name of the format.
@param output an <code>ImageOutputStream</code> to be written to.

@return <code>false</code> if no appropriate writer is found.

@exception IllegalArgumentException if any parameter is
<code>null</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 9656706 "write"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "im" type class_ref 313986 // RenderedImage
	  param inout name "formatName" type class_ref 128130 // String
	  param inout name "output" type class_ref 131970 // File
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an image using an arbitrary <code>ImageWriter</code>
that supports the given format to a <code>File</code>.  If
there is already a <code>File</code> present, its contents are
discarded.

@param im a <code>RenderedImage</code> to be written.
@param formatName a <code>String</code> containing the informal
name of the format.
@param output a <code>File</code> to be written to.

@return <code>false</code> if no appropriate writer is found.

@exception IllegalArgumentException if any parameter is
<code>null</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 9656834 "write"
	class_operation public explicit_return_type "boolean"
	nparams 3
	  param inout name "im" type class_ref 313986 // RenderedImage
	  param inout name "formatName" type class_ref 128130 // String
	  param inout name "output" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes an image using an arbitrary <code>ImageWriter</code>
that supports the given format to an <code>OutputStream</code>.

<p> This method <em>does not</em> close the provided
<code>OutputStream</code> after the write operation has completed;
it is the responsibility of the caller to close the stream, if desired.

<p> The current cache settings from <code>getUseCache</code>and
<code>getCacheDirectory</code> will be used to control caching.

@param im a <code>RenderedImage</code> to be written.
@param formatName a <code>String</code> containing the informal
name of the format.
@param output an <code>OutputStream</code> to be written to.

@return <code>false</code> if no appropriate writer is found.

@exception IllegalArgumentException if any parameter is
<code>null</code>.
@exception IOException if an error occurs during writing.
"
      end

      operation 9656962 "getWriter"
	class_operation private return_type class_ref 316034 // ImageWriter
	nparams 2
	  param inout name "im" type class_ref 313986 // RenderedImage
	  param inout name "formatName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>ImageWriter</code> instance according to given
rendered image and image format or <code>null</code> if there
is no appropriate writer.
"
      end

      operation 9657090 "doWrite"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "im" type class_ref 313986 // RenderedImage
	  param inout name "writer" type class_ref 316034 // ImageWriter
	  param inout name "output" type class_ref 316930 // ImageOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes image to output stream  using given image writer.
"
      end
    end
  end

  package_ref 147330 // spi

  package_ref 147458 // event

  package_ref 147586 // metadata

  deploymentview 139650 "imageio"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 256770 "ImageReader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.awt.image.RenderedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.Set;
import javax.imageio.spi.ImageReaderSpi;
import javax.imageio.event.IIOReadWarningListener;
import javax.imageio.event.IIOReadProgressListener;
import javax.imageio.event.IIOReadUpdateListener;
import javax.imageio.metadata.IIOMetadata;
import javax.imageio.metadata.IIOMetadataFormatImpl;
import javax.imageio.stream.ImageInputStream;
${definition}"
      associated_elems
	class_ref 312706 // ImageReader
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 257922 "ImageTranscoder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.imageio.metadata.IIOMetadata;
${definition}"
      associated_elems
	class_ref 316162 // ImageTranscoder
      end
      comment "Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 258050 "ImageWriter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.awt.image.Raster;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.imageio.event.IIOWriteWarningListener;
import javax.imageio.event.IIOWriteProgressListener;
import javax.imageio.metadata.IIOMetadata;
import javax.imageio.stream.ImageOutputStream;
import javax.imageio.spi.ImageWriterSpi;
${definition}"
      associated_elems
	class_ref 316034 // ImageWriter
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 263042 "IIOParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Point;
import java.awt.Rectangle;
${definition}"
      associated_elems
	class_ref 326146 // IIOParam
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 263170 "ImageWriteParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Dimension;
import java.util.Locale;
${definition}"
      associated_elems
	class_ref 316290 // ImageWriteParam
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 836610 "IIOException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 314242 // IIOException
      end
      comment "Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 836738 "IIOImage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.BufferedImage;
import java.awt.image.Raster;
import java.awt.image.RenderedImage;
import java.util.List;
import javax.imageio.metadata.IIOMetadata;
${definition}"
      associated_elems
	class_ref 313858 // IIOImage
      end
      comment "Copyright (c) 2000, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 836866 "IIOParamController"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 326274 // IIOParamController
      end
      comment "Copyright (c) 2000, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 837122 "ImageIO"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.FilePermission;
import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.net.URL;
import java.security.AccessController;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Set;
import javax.imageio.spi.IIORegistry;
import javax.imageio.spi.ImageReaderSpi;
import javax.imageio.spi.ImageReaderWriterSpi;
import javax.imageio.spi.ImageWriterSpi;
import javax.imageio.spi.ImageInputStreamSpi;
import javax.imageio.spi.ImageOutputStreamSpi;
import javax.imageio.spi.ImageTranscoderSpi;
import javax.imageio.spi.ServiceRegistry;
import javax.imageio.stream.ImageInputStream;
import javax.imageio.stream.ImageOutputStream;
import sun.awt.AppContext;
import sun.security.action.GetPropertyAction;
${definition}"
      associated_elems
	class_ref 1174274 // ImageIO
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 837250 "ImageReadParam"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Dimension;
import java.awt.image.BufferedImage;
${definition}"
      associated_elems
	class_ref 313602 // ImageReadParam
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 837378 "ImageTypeSpecifier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Point;
import java.awt.Transparency;
import java.awt.image.BandedSampleModel;
import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.awt.color.ColorSpace;
import java.awt.image.IndexColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.DataBuffer;
import java.awt.image.DirectColorModel;
import java.awt.image.MultiPixelPackedSampleModel;
import java.awt.image.PixelInterleavedSampleModel;
import java.awt.image.SinglePixelPackedSampleModel;
import java.awt.image.Raster;
import java.awt.image.RenderedImage;
import java.awt.image.SampleModel;
import java.awt.image.WritableRaster;
import java.util.Hashtable;
${definition}"
      associated_elems
	class_ref 313474 // ImageTypeSpecifier
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 147714 // stream

  package_ref 148866 // plugins
end
