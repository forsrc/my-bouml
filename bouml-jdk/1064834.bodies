class DeqSpliterator
!!!8596354.java!!!	DeqSpliterator(inout deq : ArrayDeque, in origin : int, in fence : int)
            this.deq = deq;
            this.index = origin;
            this.fence = fence;
!!!8596482.java!!!	getFence() : int
 // force initialization
            int t;
            if ((t = fence) < 0) {
                t = fence = deq.tail;
                index = deq.head;
            }
            return t;
!!!8596610.java!!!	trySplit() : ArrayDeque::DeqSpliterator
            int t = getFence(), h = index, n = deq.elements.length;
            if (h != t && ((h + 1) & (n - 1)) != t) {
                if (h > t)
                    t += n;
                int m = ((h + t) >>> 1) & (n - 1);
                return new DeqSpliterator<>(deq, h, index = m);
            }
            return null;
!!!8596738.java!!!	forEachRemaining(inout consumer : Consumer) : void
            if (consumer == null)
                throw new NullPointerException();
            Object[] a = deq.elements;
            int m = a.length - 1, f = getFence(), i = index;
            index = f;
            while (i != f) {
                @SuppressWarnings("unchecked") E e = (E)a[i];
                i = (i + 1) & m;
                if (e == null)
                    throw new ConcurrentModificationException();
                consumer.accept(e);
            }
!!!8596866.java!!!	tryAdvance(inout consumer : Consumer) : boolean
            if (consumer == null)
                throw new NullPointerException();
            Object[] a = deq.elements;
            int m = a.length - 1, f = getFence(), i = index;
            if (i != fence) {
                @SuppressWarnings("unchecked") E e = (E)a[i];
                index = (i + 1) & m;
                if (e == null)
                    throw new ConcurrentModificationException();
                consumer.accept(e);
                return true;
            }
            return false;
!!!8596994.java!!!	estimateSize() : long
            int n = getFence() - index;
            if (n < 0)
                n += deq.elements.length;
            return (long) n;
!!!8597122.java!!!	characteristics() : int
            return Spliterator.ORDERED | Spliterator.SIZED |
                Spliterator.NONNULL | Spliterator.SUBSIZED;
