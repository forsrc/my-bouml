class ChronoLocalDate
!!!8340354.java!!!	timeLineOrder() : Comparator
        return AbstractChronology.DATE_ORDER;
!!!8340482.java!!!	from(inout temporal : TemporalAccessor) : ChronoLocalDate
        if (temporal instanceof ChronoLocalDate) {
            return (ChronoLocalDate) temporal;
        }
        Objects.requireNonNull(temporal, "temporal");
        Chronology chrono = temporal.query(TemporalQueries.chronology());
        if (chrono == null) {
            throw new DateTimeException("Unable to obtain ChronoLocalDate from TemporalAccessor: " + temporal.getClass());
        }
        return chrono.date(temporal);
!!!8340738.java!!!	getEra() : Era
        return getChronology().eraOf(get(ERA));
!!!8340866.java!!!	isLeapYear() : boolean
        return getChronology().isLeapYear(getLong(YEAR));
!!!8341122.java!!!	lengthOfYear() : int
        return (isLeapYear() ? 366 : 365);
!!!8341250.java!!!	isSupported(inout field : TemporalField) : boolean
        if (field instanceof ChronoField) {
            return field.isDateBased();
        }
        return field != null && field.isSupportedBy(this);
!!!8341378.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        if (unit instanceof ChronoUnit) {
            return unit.isDateBased();
        }
        return unit != null && unit.isSupportedBy(this);
!!!8341506.java!!!	with(inout adjuster : TemporalAdjuster) : ChronoLocalDate
        return ChronoLocalDateImpl.ensureValid(getChronology(), Temporal.super.with(adjuster));
!!!8341634.java!!!	with(inout field : TemporalField, in newValue : long) : ChronoLocalDate
        if (field instanceof ChronoField) {
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return ChronoLocalDateImpl.ensureValid(getChronology(), field.adjustInto(this, newValue));
!!!8341762.java!!!	plus(inout amount : TemporalAmount) : ChronoLocalDate
        return ChronoLocalDateImpl.ensureValid(getChronology(), Temporal.super.plus(amount));
!!!8341890.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : ChronoLocalDate
        if (unit instanceof ChronoUnit) {
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return ChronoLocalDateImpl.ensureValid(getChronology(), unit.addTo(this, amountToAdd));
!!!8342018.java!!!	minus(inout amount : TemporalAmount) : ChronoLocalDate
        return ChronoLocalDateImpl.ensureValid(getChronology(), Temporal.super.minus(amount));
!!!8342146.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : ChronoLocalDate
        return ChronoLocalDateImpl.ensureValid(getChronology(), Temporal.super.minus(amountToSubtract, unit));
!!!8342274.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.zoneId() || query == TemporalQueries.zone() || query == TemporalQueries.offset()) {
            return null;
        } else if (query == TemporalQueries.localTime()) {
            return null;
        } else if (query == TemporalQueries.chronology()) {
            return (R) getChronology();
        } else if (query == TemporalQueries.precision()) {
            return (R) DAYS;
        }
        // inline TemporalAccessor.super.query(query) as an optimization
        // non-JDK classes are not permitted to make this optimization
        return query.queryFrom(this);
!!!8342402.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        return temporal.with(EPOCH_DAY, toEpochDay());
!!!8342786.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8342914.java!!!	atTime(inout localTime : LocalTime) : ChronoLocalDateTime
        return ChronoLocalDateTimeImpl.of(this, localTime);
!!!8343042.java!!!	toEpochDay() : long
        return getLong(EPOCH_DAY);
!!!8343170.java!!!	compareTo(inout other : ChronoLocalDate) : int
        int cmp = Long.compare(toEpochDay(), other.toEpochDay());
        if (cmp == 0) {
            cmp = getChronology().compareTo(other.getChronology());
        }
        return cmp;
!!!8343298.java!!!	isAfter(inout other : ChronoLocalDate) : boolean
        return this.toEpochDay() > other.toEpochDay();
!!!8343426.java!!!	isBefore(inout other : ChronoLocalDate) : boolean
        return this.toEpochDay() < other.toEpochDay();
!!!8343554.java!!!	isEqual(inout other : ChronoLocalDate) : boolean
        return this.toEpochDay() == other.toEpochDay();
