class DragSource
!!!6411266.java!!!	load(inout name : String) : Cursor
        if (GraphicsEnvironment.isHeadless()) {
            return null;
        }

        try {
            return (Cursor)Toolkit.getDefaultToolkit().getDesktopProperty(name);
        } catch (Exception e) {
            e.printStackTrace();

            throw new RuntimeException("failed to load system cursor: " + name + " : " + e.getMessage());
        }
!!!6411394.java!!!	getDefaultDragSource() : DragSource
        if (GraphicsEnvironment.isHeadless()) {
            throw new HeadlessException();
        } else {
            return dflt;
        }
!!!6411522.java!!!	isDragImageSupported() : boolean
        Toolkit t = Toolkit.getDefaultToolkit();

        Boolean supported;

        try {
            supported = (Boolean)Toolkit.getDefaultToolkit().getDesktopProperty("DnD.isDragImageSupported");

            return supported.booleanValue();
        } catch (Exception e) {
            return false;
        }
!!!6411650.java!!!	DragSource()
        if (GraphicsEnvironment.isHeadless()) {
            throw new HeadlessException();
        }
!!!6411778.java!!!	startDrag(inout trigger : DragGestureEvent, inout dragCursor : Cursor, inout dragImage : Image, inout imageOffset : Point, inout transferable : Transferable, inout dsl : DragSourceListener, inout flavorMap : FlavorMap) : void

        SunDragSourceContextPeer.setDragDropInProgress(true);

        try {
            if (flavorMap != null) this.flavorMap = flavorMap;

            DragSourceContextPeer dscp = Toolkit.getDefaultToolkit().createDragSourceContextPeer(trigger);

            DragSourceContext     dsc = createDragSourceContext(dscp,
                                                                trigger,
                                                                dragCursor,
                                                                dragImage,
                                                                imageOffset,
                                                                transferable,
                                                                dsl
                                                                );

            if (dsc == null) {
                throw new InvalidDnDOperationException();
            }

            dscp.startDrag(dsc, dsc.getCursor(), dragImage, imageOffset); // may throw
        } catch (RuntimeException e) {
            SunDragSourceContextPeer.setDragDropInProgress(false);
            throw e;
        }
!!!6411906.java!!!	startDrag(inout trigger : DragGestureEvent, inout dragCursor : Cursor, inout transferable : Transferable, inout dsl : DragSourceListener, inout flavorMap : FlavorMap) : void
        startDrag(trigger, dragCursor, null, null, transferable, dsl, flavorMap);
!!!6412034.java!!!	startDrag(inout trigger : DragGestureEvent, inout dragCursor : Cursor, inout dragImage : Image, inout dragOffset : Point, inout transferable : Transferable, inout dsl : DragSourceListener) : void
        startDrag(trigger, dragCursor, dragImage, dragOffset, transferable, dsl, null);
!!!6412162.java!!!	startDrag(inout trigger : DragGestureEvent, inout dragCursor : Cursor, inout transferable : Transferable, inout dsl : DragSourceListener) : void
        startDrag(trigger, dragCursor, null, null, transferable, dsl, null);
!!!6412290.java!!!	createDragSourceContext(inout dscp : DragSourceContextPeer, inout dgl : DragGestureEvent, inout dragCursor : Cursor, inout dragImage : Image, inout imageOffset : Point, inout t : Transferable, inout dsl : DragSourceListener) : DragSourceContext
        return new DragSourceContext(dscp, dgl, dragCursor, dragImage, imageOffset, t, dsl);
!!!6412418.java!!!	getFlavorMap() : FlavorMap
 return flavorMap;
!!!6412546.java!!!	createDragGestureRecognizer(inout recognizerAbstractClass : Class, inout c : Component, in actions : int, inout dgl : DragGestureListener) : T
        return Toolkit.getDefaultToolkit().createDragGestureRecognizer(recognizerAbstractClass, this, c, actions, dgl);
!!!6412674.java!!!	createDefaultDragGestureRecognizer(inout c : Component, in actions : int, inout dgl : DragGestureListener) : DragGestureRecognizer
        return Toolkit.getDefaultToolkit().createDragGestureRecognizer(MouseDragGestureRecognizer.class, this, c, actions, dgl);
!!!6412802.java!!!	addDragSourceListener(inout dsl : DragSourceListener) : void
        if (dsl != null) {
            synchronized (this) {
                listener = DnDEventMulticaster.add(listener, dsl);
            }
        }
!!!6412930.java!!!	removeDragSourceListener(inout dsl : DragSourceListener) : void
        if (dsl != null) {
            synchronized (this) {
                listener = DnDEventMulticaster.remove(listener, dsl);
            }
        }
!!!6413058.java!!!	getDragSourceListeners() : DragSourceListener
        return getListeners(DragSourceListener.class);
!!!6413186.java!!!	addDragSourceMotionListener(inout dsml : DragSourceMotionListener) : void
        if (dsml != null) {
            synchronized (this) {
                motionListener = DnDEventMulticaster.add(motionListener, dsml);
            }
        }
!!!6413314.java!!!	removeDragSourceMotionListener(inout dsml : DragSourceMotionListener) : void
        if (dsml != null) {
            synchronized (this) {
                motionListener = DnDEventMulticaster.remove(motionListener, dsml);
            }
        }
!!!6413442.java!!!	getDragSourceMotionListeners() : DragSourceMotionListener
        return getListeners(DragSourceMotionListener.class);
!!!6413570.java!!!	getListeners(inout listenerType : Class) : T
        EventListener l = null;
        if (listenerType == DragSourceListener.class) {
            l = listener;
        } else if (listenerType == DragSourceMotionListener.class) {
            l = motionListener;
        }
        return DnDEventMulticaster.getListeners(l, listenerType);
!!!6413698.java!!!	processDragEnter(inout dsde : DragSourceDragEvent) : void
        DragSourceListener dsl = listener;
        if (dsl != null) {
            dsl.dragEnter(dsde);
        }
!!!6413826.java!!!	processDragOver(inout dsde : DragSourceDragEvent) : void
        DragSourceListener dsl = listener;
        if (dsl != null) {
            dsl.dragOver(dsde);
        }
!!!6413954.java!!!	processDropActionChanged(inout dsde : DragSourceDragEvent) : void
        DragSourceListener dsl = listener;
        if (dsl != null) {
            dsl.dropActionChanged(dsde);
        }
!!!6414082.java!!!	processDragExit(inout dse : DragSourceEvent) : void
        DragSourceListener dsl = listener;
        if (dsl != null) {
            dsl.dragExit(dse);
        }
!!!6414210.java!!!	processDragDropEnd(inout dsde : DragSourceDropEvent) : void
        DragSourceListener dsl = listener;
        if (dsl != null) {
            dsl.dragDropEnd(dsde);
        }
!!!6414338.java!!!	processDragMouseMoved(inout dsde : DragSourceDragEvent) : void
        DragSourceMotionListener dsml = motionListener;
        if (dsml != null) {
            dsml.dragMouseMoved(dsde);
        }
!!!6414466.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();

        s.writeObject(SerializationTester.test(flavorMap) ? flavorMap : null);

        DnDEventMulticaster.save(s, dragSourceListenerK, listener);
        DnDEventMulticaster.save(s, dragSourceMotionListenerK, motionListener);
        s.writeObject(null);
!!!6414594.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();

        // 'flavorMap' was written explicitly
        flavorMap = (FlavorMap)s.readObject();

        // Implementation assumes 'flavorMap' is never null.
        if (flavorMap == null) {
            flavorMap = SystemFlavorMap.getDefaultFlavorMap();
        }

        Object keyOrNull;
        while (null != (keyOrNull = s.readObject())) {
            String key = ((String)keyOrNull).intern();

            if (dragSourceListenerK == key) {
                addDragSourceListener((DragSourceListener)(s.readObject()));
            } else if (dragSourceMotionListenerK == key) {
                addDragSourceMotionListener(
                    (DragSourceMotionListener)(s.readObject()));
            } else {
                // skip value for unrecognized key
                s.readObject();
            }
        }
!!!6414722.java!!!	getDragThreshold() : int
        int ts = AccessController.doPrivileged(
                new GetIntegerAction("awt.dnd.drag.threshold", 0)).intValue();
        if (ts > 0) {
            return ts;
        } else {
            Integer td = (Integer)Toolkit.getDefaultToolkit().
                    getDesktopProperty("DnD.gestureMotionThreshold");
            if (td != null) {
                return td.intValue();
            }
        }
        return 5;
