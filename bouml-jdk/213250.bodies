class CorbaContactInfoBase
!!!725250.java!!!	getBroker() : Broker
        return orb;
!!!725378.java!!!	getContactInfoList() : ContactInfoList
        return contactInfoList;
!!!725506.java!!!	getClientRequestDispatcher() : ClientRequestDispatcher
        int scid =
            getEffectiveProfile().getObjectKeyTemplate().getSubcontractId() ;
        RequestDispatcherRegistry scr = orb.getRequestDispatcherRegistry() ;
        return scr.getClientRequestDispatcher( scid ) ;
!!!725634.java!!!	setConnectionCache(inout connectionCache : OutboundConnectionCache) : void
        this.connectionCache = connectionCache;
!!!725762.java!!!	getConnectionCache() : OutboundConnectionCache
        return connectionCache;
!!!725890.java!!!	createMessageMediator(inout broker : Broker, inout contactInfo : ContactInfo, inout connection : Connection, inout methodName : String, inout isOneWay : boolean) : MessageMediator
        // REVISIT: Would like version, ior, requestid, etc., decisions
        // to be in client subcontract.  Cannot pass these to this
        // factory method because it breaks generic abstraction.
        // Maybe set methods on mediator called from subcontract
        // after creation?
        CorbaMessageMediator messageMediator =
            new CorbaMessageMediatorImpl(
                (ORB) broker,
                contactInfo,
                connection,
                GIOPVersion.chooseRequestVersion( (ORB)broker,
                     effectiveTargetIOR),
                effectiveTargetIOR,
                ((CorbaConnection)connection).getNextRequestId(),
                getAddressingDisposition(),
                methodName,
                isOneWay);

        return messageMediator;
!!!726018.java!!!	createMessageMediator(inout broker : Broker, inout conn : Connection) : MessageMediator
        ORB orb = (ORB) broker;
        CorbaConnection connection = (CorbaConnection) conn;

        if (orb.transportDebugFlag) {
            if (connection.shouldReadGiopHeaderOnly()) {
                dprint(
                ".createMessageMediator: waiting for message header on connection: "
                + connection);
            } else {
                dprint(
                ".createMessageMediator: waiting for message on connection: "
                + connection);
            }
        }

        Message msg = null;

        if (connection.shouldReadGiopHeaderOnly()) {
            // read giop header only
            msg = MessageBase.readGIOPHeader(orb, connection);
        } else {
            // read entire giop message
            msg = MessageBase.readGIOPMessage(orb, connection);
        }

        ByteBuffer byteBuffer = msg.getByteBuffer();
        msg.setByteBuffer(null);
        CorbaMessageMediator messageMediator =
            new CorbaMessageMediatorImpl(orb, connection, msg, byteBuffer);

        return messageMediator;
!!!726146.java!!!	finishCreatingMessageMediator(inout broker : Broker, inout conn : Connection, inout messageMediator : MessageMediator) : MessageMediator
        ORB orb = (ORB) broker;
        CorbaConnection connection = (CorbaConnection) conn;
        CorbaMessageMediator corbaMessageMediator =
                      (CorbaMessageMediator)messageMediator;

        if (orb.transportDebugFlag) {
            dprint(
            ".finishCreatingMessageMediator: waiting for message body on connection: "
                + connection);
        }

        Message msg = corbaMessageMediator.getDispatchHeader();
        msg.setByteBuffer(corbaMessageMediator.getDispatchBuffer());

        // read giop body only
        msg = MessageBase.readGIOPBody(orb, connection, msg);

        ByteBuffer byteBuffer = msg.getByteBuffer();
        msg.setByteBuffer(null);
        corbaMessageMediator.setDispatchHeader(msg);
        corbaMessageMediator.setDispatchBuffer(byteBuffer);

        return corbaMessageMediator;
!!!726274.java!!!	createOutputObject(inout messageMediator : MessageMediator) : OutputObject
        CorbaMessageMediator corbaMessageMediator = (CorbaMessageMediator)
            messageMediator;

        OutputObject outputObject =
            sun.corba.OutputStreamFactory.newCDROutputObject(orb, messageMediator,
                                corbaMessageMediator.getRequestHeader(),
                                corbaMessageMediator.getStreamFormatVersion());

        messageMediator.setOutputObject(outputObject);
        return outputObject;
!!!726402.java!!!	createInputObject(inout broker : Broker, inout messageMediator : MessageMediator) : InputObject
        // REVISIT: Duplicate of acceptor code.
        CorbaMessageMediator corbaMessageMediator = (CorbaMessageMediator)
            messageMediator;
        return new CDRInputObject((ORB)broker,
                                  (CorbaConnection)messageMediator.getConnection(),
                                  corbaMessageMediator.getDispatchBuffer(),
                                  corbaMessageMediator.getDispatchHeader());
!!!726530.java!!!	getAddressingDisposition() : short
        return addressingDisposition;
!!!726658.java!!!	setAddressingDisposition(in addressingDisposition : short) : void
        this.addressingDisposition = addressingDisposition;
!!!726786.java!!!	getTargetIOR() : IOR
        return  contactInfoList.getTargetIOR();
!!!726914.java!!!	getEffectiveTargetIOR() : IOR
        return effectiveTargetIOR ;
!!!727042.java!!!	getEffectiveProfile() : IIOPProfile
        return effectiveTargetIOR.getProfile();
!!!727170.java!!!	toString() : String
        return
            "CorbaContactInfoBase["
            + "]";
!!!727298.java!!!	dprint(inout msg : String) : void
        ORBUtility.dprint("CorbaContactInfoBase", msg);
