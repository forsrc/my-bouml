class JapaneseEra
!!!8490626.java!!!	JapaneseEra(in eraValue : int, inout since : LocalDate)
        this.eraValue = eraValue;
        this.since = since;
!!!8490754.java!!!	getPrivateEra() : sun.util.calendar.Era
        return ERA_CONFIG[ordinal(eraValue)];
!!!8490882.java!!!	of(in japaneseEra : int) : JapaneseEra
        if (japaneseEra < MEIJI.eraValue || japaneseEra + ERA_OFFSET > KNOWN_ERAS.length) {
            throw new DateTimeException("Invalid era: " + japaneseEra);
        }
        return KNOWN_ERAS[ordinal(japaneseEra)];
!!!8491010.java!!!	valueOf(inout japaneseEra : String) : JapaneseEra
        Objects.requireNonNull(japaneseEra, "japaneseEra");
        for (JapaneseEra era : KNOWN_ERAS) {
            if (era.getName().equals(japaneseEra)) {
                return era;
            }
        }
        throw new IllegalArgumentException("japaneseEra is invalid");
!!!8491138.java!!!	values() : JapaneseEra
        return Arrays.copyOf(KNOWN_ERAS, KNOWN_ERAS.length);
!!!8491266.java!!!	from(inout date : LocalDate) : JapaneseEra
        if (date.isBefore(MEIJI_6_ISODATE)) {
            throw new DateTimeException("JapaneseDate before Meiji 6 are not supported");
        }
        for (int i = KNOWN_ERAS.length - 1; i > 0; i--) {
            JapaneseEra era = KNOWN_ERAS[i];
            if (date.compareTo(era.since) >= 0) {
                return era;
            }
        }
        return null;
!!!8491394.java!!!	toJapaneseEra(inout privateEra : sun.util.calendar.Era) : JapaneseEra
        for (int i = ERA_CONFIG.length - 1; i >= 0; i--) {
            if (ERA_CONFIG[i].equals(privateEra)) {
                return KNOWN_ERAS[i];
            }
        }
        return null;
!!!8491522.java!!!	privateEraFrom(inout isoDate : LocalDate) : sun.util.calendar.Era
        for (int i = KNOWN_ERAS.length - 1; i > 0; i--) {
            JapaneseEra era = KNOWN_ERAS[i];
            if (isoDate.compareTo(era.since) >= 0) {
                return ERA_CONFIG[i];
            }
        }
        return null;
!!!8491650.java!!!	ordinal(in eraValue : int) : int
        return eraValue + ERA_OFFSET - 1;
!!!8491778.java!!!	getValue() : int
        return eraValue;
!!!8491906.java!!!	range(inout field : TemporalField) : ValueRange
        if (field == ERA) {
            return JapaneseChronology.INSTANCE.range(ERA);
        }
        return Era.super.range(field);
!!!8492034.java!!!	getAbbreviation() : String
        int index = ordinal(getValue());
        if (index == 0) {
            return "";
        }
        return ERA_CONFIG[index].getAbbreviation();
!!!8492162.java!!!	getName() : String
        return ERA_CONFIG[ordinal(getValue())].getName();
!!!8492290.java!!!	toString() : String
        return getName();
!!!8492418.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8492546.java!!!	writeReplace() : Object
        return new Ser(Ser.JAPANESE_ERA_TYPE, this);
!!!8492674.java!!!	writeExternal(inout out : DataOutput) : void
        out.writeByte(this.getValue());
!!!8492802.java!!!	readExternal(inout in : DataInput) : JapaneseEra
        byte eraValue = in.readByte();
        return JapaneseEra.of(eraValue);
