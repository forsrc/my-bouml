class FastInputStream
!!!9366402.java!!!	FastInputStream(inout in : InputStream)
            this(in, 8192);
!!!9366530.java!!!	FastInputStream(inout in : InputStream, in size : int)
            super(in);
            buf = new byte[size];
!!!9366658.java!!!	read() : int
            if (pos >= count) {
                fill();
                if (pos >= count) {
                    return -1;
                }
            }
            return Byte.toUnsignedInt(buf[pos++]);
!!!9366786.java!!!	read(inout b : byte [[]], in off : int, in len : int) : int
            int avail = count - pos;
            if (avail <= 0) {
                if (len >= buf.length) {
                    return in.read(b, off, len);
                }
                fill();
                avail = count - pos;
                if (avail <= 0) {
                    return -1;
                }
            }
            if (len > avail) {
                len = avail;
            }
            System.arraycopy(buf, pos, b, off, len);
            pos += len;
            return len;
!!!9366914.java!!!	readLine(inout b : byte [[]], in off : int, in len : int) : int
            byte[] tbuf = this.buf;
            int total = 0;
            while (total < len) {
                int avail = count - pos;
                if (avail <= 0) {
                    fill();
                    avail = count - pos;
                    if (avail <= 0) {
                        return -1;
                    }
                }
                int n = len - total;
                if (n > avail) {
                    n = avail;
                }
                int tpos = pos;
                int maxpos = tpos + n;
                while (tpos < maxpos && tbuf[tpos++] != '\n') ;
                n = tpos - pos;
                System.arraycopy(tbuf, pos, b, off, n);
                off += n;
                total += n;
                pos = tpos;
                if (tbuf[tpos-1] == '\n') {
                    break;
                }
            }
            return total;
!!!9367042.java!!!	peek() : byte
            if (pos == count)
                fill();
            if (pos == count)
                return -1; // nothing left in buffer
            return buf[pos];
!!!9367170.java!!!	readLine(inout b : byte [[]]) : int
            return readLine(b, 0, b.length);
!!!9367298.java!!!	skip(in n : long) : long
            if (n <= 0) {
                return 0;
            }
            long avail = count - pos;
            if (avail <= 0) {
                return in.skip(n);
            }
            if (n > avail) {
                n = avail;
            }
            pos += n;
            return n;
!!!9367426.java!!!	available() : int
            return (count - pos) + in.available();
!!!9367554.java!!!	close() : void
            if (in != null) {
                in.close();
                in = null;
                buf = null;
            }
!!!9367682.java!!!	fill() : void
            count = pos = 0;
            int n = in.read(buf, 0, buf.length);
            if (n > 0) {
                count = n;
            }
