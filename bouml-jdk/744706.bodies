class IncrementalSAXSource_Filter
!!!5230082.java!!!	IncrementalSAXSource_Filter()
    this.init( new CoroutineManager(), -1, -1);
!!!5230210.java!!!	IncrementalSAXSource_Filter(inout co : CoroutineManager, in controllerCoroutineID : int)
    this.init( co, controllerCoroutineID, -1 );
!!!5230338.java!!!	createIncrementalSAXSource(inout co : CoroutineManager, in controllerCoroutineID : int) : IncrementalSAXSource
    return new IncrementalSAXSource_Filter(co, controllerCoroutineID);
!!!5230466.java!!!	init(inout co : CoroutineManager, in controllerCoroutineID : int, in sourceCoroutineID : int) : void
    if(co==null)
      co = new CoroutineManager();
    fCoroutineManager = co;
    fControllerCoroutineID = co.co_joinCoroutineSet(controllerCoroutineID);
    fSourceCoroutineID = co.co_joinCoroutineSet(sourceCoroutineID);
    if (fControllerCoroutineID == -1 || fSourceCoroutineID == -1)
      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_COJOINROUTINESET_FAILED, null)); //"co_joinCoroutineSet() failed");

    fNoMoreEvents=false;
    eventcounter=frequency;
!!!5230594.java!!!	setXMLReader(inout eventsource : XMLReader) : void
    fXMLReader=eventsource;
    eventsource.setContentHandler(this);
    eventsource.setDTDHandler(this);
    eventsource.setErrorHandler(this); // to report fatal errors in filtering mode

    // Not supported by all SAX2 filters:
    try
    {
      eventsource.
        setProperty("http://xml.org/sax/properties/lexical-handler",
                    this);
    }
    catch(SAXNotRecognizedException e)
    {
      // Nothing we can do about it
    }
    catch(SAXNotSupportedException e)
    {
      // Nothing we can do about it
    }

    // Should we also bind as other varieties of handler?
    // (DTDHandler and so on)
!!!5230722.java!!!	setContentHandler(inout handler : ContentHandler) : void
    clientContentHandler=handler;
!!!5230850.java!!!	setDTDHandler(inout handler : DTDHandler) : void
    clientDTDHandler=handler;
!!!5230978.java!!!	setLexicalHandler(inout handler : LexicalHandler) : void
    clientLexicalHandler=handler;
!!!5231106.java!!!	setErrHandler(inout handler : ErrorHandler) : void
    clientErrorHandler=handler;
!!!5231234.java!!!	setReturnFrequency(in events : int) : void
    if(events<1) events=1;
    frequency=eventcounter=events;
!!!5231362.java!!!	characters(inout ch : char [[]], in start : int, in length : int) : void
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.characters(ch,start,length);
!!!5231490.java!!!	endDocument() : void
    // EXCEPTION: In this case we need to run the event BEFORE we yield.
    if(clientContentHandler!=null)
      clientContentHandler.endDocument();

    eventcounter=0;
    co_yield(false);
!!!5231618.java!!!	endElement(inout namespaceURI : String, inout localName : String, inout qName : String) : void
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.endElement(namespaceURI,localName,qName);
!!!5231746.java!!!	endPrefixMapping(inout prefix : String) : void
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.endPrefixMapping(prefix);
!!!5231874.java!!!	ignorableWhitespace(inout ch : char [[]], in start : int, in length : int) : void
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.ignorableWhitespace(ch,start,length);
!!!5232002.java!!!	processingInstruction(inout target : String, inout data : String) : void
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.processingInstruction(target,data);
!!!5232130.java!!!	setDocumentLocator(inout locator : Locator) : void
    if(--eventcounter<=0)
      {
        // This can cause a hang.  -sb
        // co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.setDocumentLocator(locator);
!!!5232258.java!!!	skippedEntity(inout name : String) : void
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.skippedEntity(name);
!!!5232386.java!!!	startDocument() : void
    co_entry_pause();

    // Otherwise, begin normal event delivery
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.startDocument();
!!!5232514.java!!!	startElement(inout namespaceURI : String, inout localName : String, inout qName : String, inout atts : Attributes) : void
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.startElement(namespaceURI, localName, qName, atts);
!!!5232642.java!!!	startPrefixMapping(inout prefix : String, inout uri : String) : void
    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
    if(clientContentHandler!=null)
      clientContentHandler.startPrefixMapping(prefix,uri);
!!!5232770.java!!!	comment(inout ch : char [[]], in start : int, in length : int) : void
    if(null!=clientLexicalHandler)
      clientLexicalHandler.comment(ch,start,length);
!!!5232898.java!!!	endCDATA() : void
    if(null!=clientLexicalHandler)
      clientLexicalHandler.endCDATA();
!!!5233026.java!!!	endDTD() : void
    if(null!=clientLexicalHandler)
      clientLexicalHandler.endDTD();
!!!5233154.java!!!	endEntity(inout name : String) : void
    if(null!=clientLexicalHandler)
      clientLexicalHandler.endEntity(name);
!!!5233282.java!!!	startCDATA() : void
    if(null!=clientLexicalHandler)
      clientLexicalHandler.startCDATA();
!!!5233410.java!!!	startDTD(inout name : String, inout publicId : String, inout systemId : String) : void
    if(null!=clientLexicalHandler)
      clientLexicalHandler. startDTD(name, publicId, systemId);
!!!5233538.java!!!	startEntity(inout name : String) : void
    if(null!=clientLexicalHandler)
      clientLexicalHandler.startEntity(name);
!!!5233666.java!!!	notationDecl(inout a : String, inout b : String, inout c : String) : void
        if(null!=clientDTDHandler)
                clientDTDHandler.notationDecl(a,b,c);
!!!5233794.java!!!	unparsedEntityDecl(inout a : String, inout b : String, inout c : String, inout d : String) : void
        if(null!=clientDTDHandler)
                clientDTDHandler.unparsedEntityDecl(a,b,c,d);
!!!5233922.java!!!	error(inout exception : SAXParseException) : void
    if(null!=clientErrorHandler)
      clientErrorHandler.error(exception);
!!!5234050.java!!!	fatalError(inout exception : SAXParseException) : void
    // EXCEPTION: In this case we need to run the event BEFORE we yield --
    // just as with endDocument, this terminates the event stream.
    if(null!=clientErrorHandler)
      clientErrorHandler.error(exception);

    eventcounter=0;
    co_yield(false);

!!!5234178.java!!!	warning(inout exception : SAXParseException) : void
    if(null!=clientErrorHandler)
      clientErrorHandler.error(exception);
!!!5234306.java!!!	getSourceCoroutineID() : int
    return fSourceCoroutineID;
!!!5234434.java!!!	getControllerCoroutineID() : int
    return fControllerCoroutineID;
!!!5234562.java!!!	getCoroutineManager() : CoroutineManager
    return fCoroutineManager;
!!!5234690.java!!!	count_and_yield(inout moreExpected : boolean) : void
    if(!moreExpected) eventcounter=0;

    if(--eventcounter<=0)
      {
        co_yield(true);
        eventcounter=frequency;
      }
!!!5234818.java!!!	co_entry_pause() : void
    if(fCoroutineManager==null)
    {
      // Nobody called init()? Do it now...
      init(null,-1,-1);
    }

    try
    {
      Object arg=fCoroutineManager.co_entry_pause(fSourceCoroutineID);
      if(arg==Boolean.FALSE)
        co_yield(false);
    }
    catch(NoSuchMethodException e)
    {
      // Coroutine system says we haven't registered. That's an
      // application coding error, and is unrecoverable.
      if(DEBUG) e.printStackTrace();
      throw new SAXException(e);
    }
!!!5234946.java!!!	co_yield(inout moreRemains : boolean) : void
    // Horrendous kluge to run filter to completion. See below.
    if(fNoMoreEvents)
      return;

    try // Coroutine manager might throw no-such.
    {
      Object arg=Boolean.FALSE;
      if(moreRemains)
      {
        // Yield control, resume parsing when done
        arg = fCoroutineManager.co_resume(Boolean.TRUE, fSourceCoroutineID,
                                          fControllerCoroutineID);

      }

      // If we're at end of document or were told to stop early
      if(arg==Boolean.FALSE)
      {
        fNoMoreEvents=true;

        if(fXMLReader!=null)    // Running under startParseThread()
          throw new StopException(); // We'll co_exit from there.

        // Yield control. We do NOT expect anyone to ever ask us again.
        fCoroutineManager.co_exit_to(Boolean.FALSE, fSourceCoroutineID,
                                     fControllerCoroutineID);
      }
    }
    catch(NoSuchMethodException e)
    {
      // Shouldn't happen unless we've miscoded our coroutine logic
      // "Shut down the garbage smashers on the detention level!"
      fNoMoreEvents=true;
      fCoroutineManager.co_exit(fSourceCoroutineID);
      throw new SAXException(e);
    }
!!!5235074.java!!!	startParse(inout source : InputSource) : void
    if(fNoMoreEvents)
      throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_INCRSAXSRCFILTER_NOT_RESTARTABLE, null)); //"IncrmentalSAXSource_Filter not currently restartable.");
    if(fXMLReader==null)
      throw new SAXException(XMLMessages.createXMLMessage(XMLErrorResources.ER_XMLRDR_NOT_BEFORE_STARTPARSE, null)); //"XMLReader not before startParse request");

    fXMLReaderInputSource=source;

    // Xalan thread pooling...
    // com.sun.org.apache.xalan.internal.transformer.TransformerImpl.runTransformThread(this);
    ThreadControllerWrapper.runThread(this, -1);
!!!5235202.java!!!	run() : void
    // Guard against direct invocation of start().
    if(fXMLReader==null) return;

    if(DEBUG)System.out.println("IncrementalSAXSource_Filter parse thread launched");

    // Initially assume we'll run successfully.
    Object arg=Boolean.FALSE;

    // For the duration of this operation, all coroutine handshaking
    // will occur in the co_yield method. That's the nice thing about
    // coroutines; they give us a way to hand off control from the
    // middle of a synchronous method.
    try
    {
      fXMLReader.parse(fXMLReaderInputSource);
    }
    catch(IOException ex)
    {
      arg=ex;
    }
    catch(StopException ex)
    {
      // Expected and harmless
      if(DEBUG)System.out.println("Active IncrementalSAXSource_Filter normal stop exception");
    }
    catch (SAXException ex)
    {
      Exception inner=ex.getException();
      if(inner instanceof StopException){
        // Expected and harmless
        if(DEBUG)System.out.println("Active IncrementalSAXSource_Filter normal stop exception");
      }
      else
      {
        // Unexpected malfunction
        if(DEBUG)
        {
          System.out.println("Active IncrementalSAXSource_Filter UNEXPECTED SAX exception: "+inner);
          inner.printStackTrace();
        }
        arg=ex;
      }
    } // end parse

    // Mark as no longer running in thread.
    fXMLReader=null;

    try
    {
      // Mark as done and yield control to the controller coroutine
      fNoMoreEvents=true;
      fCoroutineManager.co_exit_to(arg, fSourceCoroutineID,
                                   fControllerCoroutineID);
    }
    catch(java.lang.NoSuchMethodException e)
    {
      // Shouldn't happen unless we've miscoded our coroutine logic
      // "CPO, shut down the garbage smashers on the detention level!"
      e.printStackTrace(System.err);
      fCoroutineManager.co_exit(fSourceCoroutineID);
    }
!!!5235330.java!!!	deliverMoreNodes(inout parsemore : boolean) : Object
    // If parsing is already done, we can immediately say so
    if(fNoMoreEvents)
      return Boolean.FALSE;

    try
    {
      Object result =
        fCoroutineManager.co_resume(parsemore?Boolean.TRUE:Boolean.FALSE,
                                    fControllerCoroutineID, fSourceCoroutineID);
      if(result==Boolean.FALSE)
        fCoroutineManager.co_exit(fControllerCoroutineID);

      return result;
    }

    // SHOULD NEVER OCCUR, since the coroutine number and coroutine manager
    // are those previously established for this IncrementalSAXSource_Filter...
    // So I'm just going to return it as a parsing exception, for now.
    catch(NoSuchMethodException e)
      {
        return e;
      }
