class OffsetTime
!!!8393218.java!!!	now() : OffsetTime
        return now(Clock.systemDefaultZone());
!!!8393346.java!!!	now(inout zone : ZoneId) : OffsetTime
        return now(Clock.system(zone));
!!!8393474.java!!!	now(inout clock : Clock) : OffsetTime
        Objects.requireNonNull(clock, "clock");
        final Instant now = clock.instant();  // called once
        return ofInstant(now, clock.getZone().getRules().getOffset(now));
!!!8393602.java!!!	of(inout time : LocalTime, inout offset : ZoneOffset) : OffsetTime
        return new OffsetTime(time, offset);
!!!8393730.java!!!	of(in hour : int, in minute : int, in second : int, in nanoOfSecond : int, inout offset : ZoneOffset) : OffsetTime
        return new OffsetTime(LocalTime.of(hour, minute, second, nanoOfSecond), offset);
!!!8393858.java!!!	ofInstant(inout instant : Instant, inout zone : ZoneId) : OffsetTime
        Objects.requireNonNull(instant, "instant");
        Objects.requireNonNull(zone, "zone");
        ZoneRules rules = zone.getRules();
        ZoneOffset offset = rules.getOffset(instant);
        long localSecond = instant.getEpochSecond() + offset.getTotalSeconds();  // overflow caught later
        int secsOfDay = (int) Math.floorMod(localSecond, SECONDS_PER_DAY);
        LocalTime time = LocalTime.ofNanoOfDay(secsOfDay * NANOS_PER_SECOND + instant.getNano());
        return new OffsetTime(time, offset);
!!!8393986.java!!!	from(inout temporal : TemporalAccessor) : OffsetTime
        if (temporal instanceof OffsetTime) {
            return (OffsetTime) temporal;
        }
        try {
            LocalTime time = LocalTime.from(temporal);
            ZoneOffset offset = ZoneOffset.from(temporal);
            return new OffsetTime(time, offset);
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain OffsetTime from TemporalAccessor: " +
                    temporal + " of type " + temporal.getClass().getName(), ex);
        }
!!!8394114.java!!!	parse(inout text : CharSequence) : OffsetTime
        return parse(text, DateTimeFormatter.ISO_OFFSET_TIME);
!!!8394242.java!!!	parse(inout text : CharSequence, inout formatter : DateTimeFormatter) : OffsetTime
        Objects.requireNonNull(formatter, "formatter");
        return formatter.parse(text, OffsetTime::from);
!!!8394370.java!!!	OffsetTime(inout time : LocalTime, inout offset : ZoneOffset)
        this.time = Objects.requireNonNull(time, "time");
        this.offset = Objects.requireNonNull(offset, "offset");
!!!8394498.java!!!	with(inout time : LocalTime, inout offset : ZoneOffset) : OffsetTime
        if (this.time == time && this.offset.equals(offset)) {
            return this;
        }
        return new OffsetTime(time, offset);
!!!8394626.java!!!	isSupported(inout field : TemporalField) : boolean
        if (field instanceof ChronoField) {
            return field.isTimeBased() || field == OFFSET_SECONDS;
        }
        return field != null && field.isSupportedBy(this);
!!!8394754.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        if (unit instanceof ChronoUnit) {
            return unit.isTimeBased();
        }
        return unit != null && unit.isSupportedBy(this);
!!!8394882.java!!!	range(inout field : TemporalField) : ValueRange
        if (field instanceof ChronoField) {
            if (field == OFFSET_SECONDS) {
                return field.range();
            }
            return time.range(field);
        }
        return field.rangeRefinedBy(this);
!!!8395010.java!!!	get(inout field : TemporalField) : int
        return Temporal.super.get(field);
!!!8395138.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            if (field == OFFSET_SECONDS) {
                return offset.getTotalSeconds();
            }
            return time.getLong(field);
        }
        return field.getFrom(this);
!!!8395266.java!!!	getOffset() : ZoneOffset
        return offset;
!!!8395394.java!!!	withOffsetSameLocal(inout offset : ZoneOffset) : OffsetTime
        return offset != null && offset.equals(this.offset) ? this : new OffsetTime(time, offset);
!!!8395522.java!!!	withOffsetSameInstant(inout offset : ZoneOffset) : OffsetTime
        if (offset.equals(this.offset)) {
            return this;
        }
        int difference = offset.getTotalSeconds() - this.offset.getTotalSeconds();
        LocalTime adjusted = time.plusSeconds(difference);
        return new OffsetTime(adjusted, offset);
!!!8395650.java!!!	toLocalTime() : LocalTime
        return time;
!!!8395778.java!!!	getHour() : int
        return time.getHour();
!!!8395906.java!!!	getMinute() : int
        return time.getMinute();
!!!8396034.java!!!	getSecond() : int
        return time.getSecond();
!!!8396162.java!!!	getNano() : int
        return time.getNano();
!!!8396290.java!!!	with(inout adjuster : TemporalAdjuster) : OffsetTime
        // optimizations
        if (adjuster instanceof LocalTime) {
            return with((LocalTime) adjuster, offset);
        } else if (adjuster instanceof ZoneOffset) {
            return with(time, (ZoneOffset) adjuster);
        } else if (adjuster instanceof OffsetTime) {
            return (OffsetTime) adjuster;
        }
        return (OffsetTime) adjuster.adjustInto(this);
!!!8396418.java!!!	with(inout field : TemporalField, in newValue : long) : OffsetTime
        if (field instanceof ChronoField) {
            if (field == OFFSET_SECONDS) {
                ChronoField f = (ChronoField) field;
                return with(time, ZoneOffset.ofTotalSeconds(f.checkValidIntValue(newValue)));
            }
            return with(time.with(field, newValue), offset);
        }
        return field.adjustInto(this, newValue);
!!!8396546.java!!!	withHour(in hour : int) : OffsetTime
        return with(time.withHour(hour), offset);
!!!8396674.java!!!	withMinute(in minute : int) : OffsetTime
        return with(time.withMinute(minute), offset);
!!!8396802.java!!!	withSecond(in second : int) : OffsetTime
        return with(time.withSecond(second), offset);
!!!8396930.java!!!	withNano(in nanoOfSecond : int) : OffsetTime
        return with(time.withNano(nanoOfSecond), offset);
!!!8397058.java!!!	truncatedTo(inout unit : TemporalUnit) : OffsetTime
        return with(time.truncatedTo(unit), offset);
!!!8397186.java!!!	plus(inout amountToAdd : TemporalAmount) : OffsetTime
        return (OffsetTime) amountToAdd.addTo(this);
!!!8397314.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : OffsetTime
        if (unit instanceof ChronoUnit) {
            return with(time.plus(amountToAdd, unit), offset);
        }
        return unit.addTo(this, amountToAdd);
!!!8397442.java!!!	plusHours(in hours : long) : OffsetTime
        return with(time.plusHours(hours), offset);
!!!8397570.java!!!	plusMinutes(in minutes : long) : OffsetTime
        return with(time.plusMinutes(minutes), offset);
!!!8397698.java!!!	plusSeconds(in seconds : long) : OffsetTime
        return with(time.plusSeconds(seconds), offset);
!!!8397826.java!!!	plusNanos(in nanos : long) : OffsetTime
        return with(time.plusNanos(nanos), offset);
!!!8397954.java!!!	minus(inout amountToSubtract : TemporalAmount) : OffsetTime
        return (OffsetTime) amountToSubtract.subtractFrom(this);
!!!8398082.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : OffsetTime
        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));
!!!8398210.java!!!	minusHours(in hours : long) : OffsetTime
        return with(time.minusHours(hours), offset);
!!!8398338.java!!!	minusMinutes(in minutes : long) : OffsetTime
        return with(time.minusMinutes(minutes), offset);
!!!8398466.java!!!	minusSeconds(in seconds : long) : OffsetTime
        return with(time.minusSeconds(seconds), offset);
!!!8398594.java!!!	minusNanos(in nanos : long) : OffsetTime
        return with(time.minusNanos(nanos), offset);
!!!8398722.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.offset() || query == TemporalQueries.zone()) {
            return (R) offset;
        } else if (query == TemporalQueries.zoneId() | query == TemporalQueries.chronology() || query == TemporalQueries.localDate()) {
            return null;
        } else if (query == TemporalQueries.localTime()) {
            return (R) time;
        } else if (query == TemporalQueries.precision()) {
            return (R) NANOS;
        }
        // inline TemporalAccessor.super.query(query) as an optimization
        // non-JDK classes are not permitted to make this optimization
        return query.queryFrom(this);
!!!8398850.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        return temporal
                .with(NANO_OF_DAY, time.toNanoOfDay())
                .with(OFFSET_SECONDS, offset.getTotalSeconds());
!!!8398978.java!!!	until(inout endExclusive : Temporal, inout unit : TemporalUnit) : long
        OffsetTime end = OffsetTime.from(endExclusive);
        if (unit instanceof ChronoUnit) {
            long nanosUntil = end.toEpochNano() - toEpochNano();  // no overflow
            switch ((ChronoUnit) unit) {
                case NANOS: return nanosUntil;
                case MICROS: return nanosUntil / 1000;
                case MILLIS: return nanosUntil / 1000_000;
                case SECONDS: return nanosUntil / NANOS_PER_SECOND;
                case MINUTES: return nanosUntil / NANOS_PER_MINUTE;
                case HOURS: return nanosUntil / NANOS_PER_HOUR;
                case HALF_DAYS: return nanosUntil / (12 * NANOS_PER_HOUR);
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return unit.between(this, end);
!!!8399106.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8399234.java!!!	atDate(inout date : LocalDate) : OffsetDateTime
        return OffsetDateTime.of(date, time, offset);
!!!8399362.java!!!	toEpochNano() : long
        long nod = time.toNanoOfDay();
        long offsetNanos = offset.getTotalSeconds() * NANOS_PER_SECOND;
        return nod - offsetNanos;
!!!8399490.java!!!	compareTo(inout other : OffsetTime) : int
        if (offset.equals(other.offset)) {
            return time.compareTo(other.time);
        }
        int compare = Long.compare(toEpochNano(), other.toEpochNano());
        if (compare == 0) {
            compare = time.compareTo(other.time);
        }
        return compare;
!!!8399618.java!!!	isAfter(inout other : OffsetTime) : boolean
        return toEpochNano() > other.toEpochNano();
!!!8399746.java!!!	isBefore(inout other : OffsetTime) : boolean
        return toEpochNano() < other.toEpochNano();
!!!8399874.java!!!	isEqual(inout other : OffsetTime) : boolean
        return toEpochNano() == other.toEpochNano();
!!!8400002.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof OffsetTime) {
            OffsetTime other = (OffsetTime) obj;
            return time.equals(other.time) && offset.equals(other.offset);
        }
        return false;
!!!8400130.java!!!	hashCode() : int
        return time.hashCode() ^ offset.hashCode();
!!!8400258.java!!!	toString() : String
        return time.toString() + offset.toString();
!!!8400386.java!!!	writeReplace() : Object
        return new Ser(Ser.OFFSET_TIME_TYPE, this);
!!!8400514.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8400642.java!!!	writeExternal(inout out : ObjectOutput) : void
        time.writeExternal(out);
        offset.writeExternal(out);
!!!8400770.java!!!	readExternal(inout in : ObjectInput) : OffsetTime
        LocalTime time = LocalTime.readExternal(in);
        ZoneOffset offset = ZoneOffset.readExternal(in);
        return OffsetTime.of(time, offset);
