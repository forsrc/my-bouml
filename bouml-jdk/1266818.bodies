class DefaultCellEditor
!!!10464258.java!!!	DefaultCellEditor(in textField : JTextField)
        editorComponent = textField;
        this.clickCountToStart = 2;
        delegate = new EditorDelegate() {
            public void setValue(Object value) {
                textField.setText((value != null) ? value.toString() : "");
            }

            public Object getCellEditorValue() {
                return textField.getText();
            }
        };
        textField.addActionListener(delegate);
!!!10464386.java!!!	DefaultCellEditor(in checkBox : JCheckBox)
        editorComponent = checkBox;
        delegate = new EditorDelegate() {
            public void setValue(Object value) {
                boolean selected = false;
                if (value instanceof Boolean) {
                    selected = ((Boolean)value).booleanValue();
                }
                else if (value instanceof String) {
                    selected = value.equals("true");
                }
                checkBox.setSelected(selected);
            }

            public Object getCellEditorValue() {
                return Boolean.valueOf(checkBox.isSelected());
            }
        };
        checkBox.addActionListener(delegate);
        checkBox.setRequestFocusEnabled(false);
!!!10464514.java!!!	DefaultCellEditor(in comboBox : JComboBox)
        editorComponent = comboBox;
        comboBox.putClientProperty("JComboBox.isTableCellEditor", Boolean.TRUE);
        delegate = new EditorDelegate() {
            public void setValue(Object value) {
                comboBox.setSelectedItem(value);
            }

            public Object getCellEditorValue() {
                return comboBox.getSelectedItem();
            }

            public boolean shouldSelectCell(EventObject anEvent) {
                if (anEvent instanceof MouseEvent) {
                    MouseEvent e = (MouseEvent)anEvent;
                    return e.getID() != MouseEvent.MOUSE_DRAGGED;
                }
                return true;
            }
            public boolean stopCellEditing() {
                if (comboBox.isEditable()) {
                    // Commit edited value.
                    comboBox.actionPerformed(new ActionEvent(
                                     DefaultCellEditor.this, 0, ""));
                }
                return super.stopCellEditing();
            }
        };
        comboBox.addActionListener(delegate);
!!!10464642.java!!!	getComponent() : Component
        return editorComponent;
!!!10464770.java!!!	setClickCountToStart(in count : int) : void
        clickCountToStart = count;
!!!10464898.java!!!	getClickCountToStart() : int
        return clickCountToStart;
!!!10465026.java!!!	getCellEditorValue() : Object
        return delegate.getCellEditorValue();
!!!10465154.java!!!	isCellEditable(inout anEvent : EventObject) : boolean
        return delegate.isCellEditable(anEvent);
!!!10465282.java!!!	shouldSelectCell(inout anEvent : EventObject) : boolean
        return delegate.shouldSelectCell(anEvent);
!!!10465410.java!!!	stopCellEditing() : boolean
        return delegate.stopCellEditing();
!!!10465538.java!!!	cancelCellEditing() : void
        delegate.cancelCellEditing();
!!!10465666.java!!!	getTreeCellEditorComponent(inout tree : JTree, inout value : Object, inout isSelected : boolean, inout expanded : boolean, inout leaf : boolean, in row : int) : Component
        String         stringValue = tree.convertValueToText(value, isSelected,
                                            expanded, leaf, row, false);

        delegate.setValue(stringValue);
        return editorComponent;
!!!10465794.java!!!	getTableCellEditorComponent(inout table : JTable, inout value : Object, inout isSelected : boolean, in row : int, in column : int) : Component
        delegate.setValue(value);
        if (editorComponent instanceof JCheckBox) {
            //in order to avoid a "flashing" effect when clicking a checkbox
            //in a table, it is important for the editor to have as a border
            //the same border that the renderer has, and have as the background
            //the same color as the renderer has. This is primarily only
            //needed for JCheckBox since this editor doesn't fill all the
            //visual space of the table cell, unlike a text field.
            TableCellRenderer renderer = table.getCellRenderer(row, column);
            Component c = renderer.getTableCellRendererComponent(table, value,
                    isSelected, true, row, column);
            if (c != null) {
                editorComponent.setOpaque(true);
                editorComponent.setBackground(c.getBackground());
                if (c instanceof JComponent) {
                    editorComponent.setBorder(((JComponent)c).getBorder());
                }
            } else {
                editorComponent.setOpaque(false);
            }
        }
        return editorComponent;
