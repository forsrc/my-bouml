class LineBreakMeasurer
!!!6463106.java!!!	LineBreakMeasurer(inout text : AttributedCharacterIterator, inout frc : FontRenderContext)
        this(text, BreakIterator.getLineInstance(), frc);
!!!6463234.java!!!	LineBreakMeasurer(inout text : AttributedCharacterIterator, inout breakIter : BreakIterator, inout frc : FontRenderContext)
        if (text.getEndIndex() - text.getBeginIndex() < 1) {
            throw new IllegalArgumentException("Text must contain at least one character.");
        }

        this.breakIter = breakIter;
        this.measurer = new TextMeasurer(text, frc);
        this.limit = text.getEndIndex();
        this.pos = this.start = text.getBeginIndex();

        charIter = new CharArrayIterator(measurer.getChars(), this.start);
        this.breakIter.setText(charIter);
!!!6463362.java!!!	nextOffset(in wrappingWidth : float) : int
        return nextOffset(wrappingWidth, limit, false);
!!!6463490.java!!!	nextOffset(in wrappingWidth : float, in offsetLimit : int, inout requireNextWord : boolean) : int

        int nextOffset = pos;

        if (pos < limit) {
            if (offsetLimit <= pos) {
                    throw new IllegalArgumentException("offsetLimit must be after current position");
            }

            int charAtMaxAdvance =
                            measurer.getLineBreakIndex(pos, wrappingWidth);

            if (charAtMaxAdvance == limit) {
                nextOffset = limit;
            }
            else if (Character.isWhitespace(measurer.getChars()[charAtMaxAdvance-start])) {
                nextOffset = breakIter.following(charAtMaxAdvance);
            }
            else {
            // Break is in a word;  back up to previous break.

                // NOTE:  I think that breakIter.preceding(limit) should be
                // equivalent to breakIter.last(), breakIter.previous() but
                // the authors of BreakIterator thought otherwise...
                // If they were equivalent then the first branch would be
                // unnecessary.
                int testPos = charAtMaxAdvance + 1;
                if (testPos == limit) {
                    breakIter.last();
                    nextOffset = breakIter.previous();
                }
                else {
                    nextOffset = breakIter.preceding(testPos);
                }

                if (nextOffset <= pos) {
                    // first word doesn't fit on line
                    if (requireNextWord) {
                        nextOffset = pos;
                    }
                    else {
                        nextOffset = Math.max(pos+1, charAtMaxAdvance);
                    }
                }
            }
        }

        if (nextOffset > offsetLimit) {
            nextOffset = offsetLimit;
        }

        return nextOffset;
!!!6463618.java!!!	nextLayout(in wrappingWidth : float) : TextLayout
        return nextLayout(wrappingWidth, limit, false);
!!!6463746.java!!!	nextLayout(in wrappingWidth : float, in offsetLimit : int, inout requireNextWord : boolean) : TextLayout

        if (pos < limit) {
            int layoutLimit = nextOffset(wrappingWidth, offsetLimit, requireNextWord);
            if (layoutLimit == pos) {
                return null;
            }

            TextLayout result = measurer.getLayout(pos, layoutLimit);
            pos = layoutLimit;

            return result;
        } else {
            return null;
        }
!!!6463874.java!!!	getPosition() : int
        return pos;
!!!6464002.java!!!	setPosition(in newPosition : int) : void
        if (newPosition < start || newPosition > limit) {
            throw new IllegalArgumentException("position is out of range");
        }
        pos = newPosition;
!!!6464130.java!!!	insertChar(inout newParagraph : AttributedCharacterIterator, in insertPos : int) : void

        measurer.insertChar(newParagraph, insertPos);

        limit = newParagraph.getEndIndex();
        pos = start = newParagraph.getBeginIndex();

        charIter.reset(measurer.getChars(), newParagraph.getBeginIndex());
        breakIter.setText(charIter);
!!!6464258.java!!!	deleteChar(inout newParagraph : AttributedCharacterIterator, in deletePos : int) : void

        measurer.deleteChar(newParagraph, deletePos);

        limit = newParagraph.getEndIndex();
        pos = start = newParagraph.getBeginIndex();

        charIter.reset(measurer.getChars(), start);
        breakIter.setText(charIter);
