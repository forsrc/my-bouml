class I18nFieldView
!!!2576514.java!!!	I18nFieldView(inout elem : Element)
            super(elem);
!!!2576642.java!!!	getFlowSpan(in index : int) : int
            return Integer.MAX_VALUE;
!!!2576770.java!!!	setJustification(in j : int) : void
            // Justification is done in adjustAllocation(), so disable
            // ParagraphView's justification handling by doing nothing here.
!!!2576898.java!!!	isLeftToRight(inout c : Component) : boolean
            return c.getComponentOrientation().isLeftToRight();
!!!2577026.java!!!	adjustAllocation(inout a : Shape) : Shape
            if (a != null) {
                Rectangle bounds = a.getBounds();
                int vspan = (int) getPreferredSpan(Y_AXIS);
                int hspan = (int) getPreferredSpan(X_AXIS);
                if (bounds.height != vspan) {
                    int slop = bounds.height - vspan;
                    bounds.y += slop / 2;
                    bounds.height -= slop;
                }

                // horizontal adjustments
                Component c = getContainer();
                if (c instanceof JTextField) {
                    JTextField field = (JTextField) c;
                    BoundedRangeModel vis = field.getHorizontalVisibility();
                    int max = Math.max(hspan, bounds.width);
                    int value = vis.getValue();
                    int extent = Math.min(max, bounds.width - 1);
                    if ((value + extent) > max) {
                        value = max - extent;
                    }
                    vis.setRangeProperties(value, extent, vis.getMinimum(),
                                           max, false);
                    if (hspan < bounds.width) {
                        // horizontally align the interior
                        int slop = bounds.width - 1 - hspan;

                        int align = ((JTextField)c).getHorizontalAlignment();
                        if(isLeftToRight(c)) {
                            if(align==LEADING) {
                                align = LEFT;
                            }
                            else if(align==TRAILING) {
                                align = RIGHT;
                            }
                        }
                        else {
                            if(align==LEADING) {
                                align = RIGHT;
                            }
                            else if(align==TRAILING) {
                                align = LEFT;
                            }
                        }

                        switch (align) {
                        case SwingConstants.CENTER:
                            bounds.x += slop / 2;
                            bounds.width -= slop;
                            break;
                        case SwingConstants.RIGHT:
                            bounds.x += slop;
                            bounds.width -= slop;
                            break;
                        }
                    } else {
                        // adjust the allocation to match the bounded range.
                        bounds.width = hspan;
                        bounds.x -= vis.getValue();
                    }
                }
                return bounds;
            }
            return null;
!!!2577154.java!!!	updateVisibilityModel() : void
            Component c = getContainer();
            if (c instanceof JTextField) {
                JTextField field = (JTextField) c;
                BoundedRangeModel vis = field.getHorizontalVisibility();
                int hspan = (int) getPreferredSpan(X_AXIS);
                int extent = vis.getExtent();
                int maximum = Math.max(hspan, extent);
                extent = (extent == 0) ? maximum : extent;
                int value = maximum - extent;
                int oldValue = vis.getValue();
                if ((oldValue + extent) > maximum) {
                    oldValue = maximum - extent;
                }
                value = Math.max(0, Math.min(value, oldValue));
                vis.setRangeProperties(value, extent, 0, maximum, false);
            }
!!!2577282.java!!!	paint(inout g : Graphics, inout a : Shape) : void
            Rectangle r = (Rectangle) a;
            g.clipRect(r.x, r.y, r.width, r.height);
            super.paint(g, adjustAllocation(a));
!!!2577410.java!!!	getResizeWeight(in axis : int) : int
            if (axis == View.X_AXIS) {
                return 1;
            }
            return 0;
!!!2577538.java!!!	modelToView(in pos : int, inout a : Shape, inout b : Position::Bias) : Shape
            return super.modelToView(pos, adjustAllocation(a), b);
!!!2577666.java!!!	modelToView(in p0 : int, inout b0 : Position::Bias, in p1 : int, inout b1 : Position::Bias, inout a : Shape) : Shape
            return super.modelToView(p0, b0, p1, b1, adjustAllocation(a));
!!!2577794.java!!!	viewToModel(in fx : float, in fy : float, inout a : Shape, inout bias : Position::Bias [[]]) : int
            return super.viewToModel(fx, fy, adjustAllocation(a), bias);
!!!2577922.java!!!	insertUpdate(inout changes : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
            super.insertUpdate(changes, adjustAllocation(a), f);
            updateVisibilityModel();
!!!2578050.java!!!	removeUpdate(inout changes : DocumentEvent, inout a : Shape, inout f : ViewFactory) : void
            super.removeUpdate(changes, adjustAllocation(a), f);
            updateVisibilityModel();
