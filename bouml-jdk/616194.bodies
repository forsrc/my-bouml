class Util
!!!3885442.java!!!	noExtName(inout name : String) : String
        final int index = name.lastIndexOf('.');
        return name.substring(0, index >= 0 ? index : name.length());
!!!3885570.java!!!	baseName(inout name : String) : String
        int index = name.lastIndexOf('\\');
        if (index < 0) {
            index = name.lastIndexOf('/');
        }

        if (index >= 0)
            return name.substring(index + 1);
        else {
            int lastColonIndex = name.lastIndexOf(':');
            if (lastColonIndex > 0)
                return name.substring(lastColonIndex + 1);
            else
                return name;
        }
!!!3885698.java!!!	pathName(inout name : String) : String
        int index = name.lastIndexOf('/');
        if (index < 0) {
            index = name.lastIndexOf('\\');
        }
        return name.substring(0, index + 1);
!!!3885826.java!!!	toJavaName(inout name : String) : String
        if (name.length() > 0) {
            final StringBuffer result = new StringBuffer();

            char ch = name.charAt(0);
            result.append(Character.isJavaIdentifierStart(ch) ? ch : '_');

            final int n = name.length();
            for (int i = 1; i < n; i++) {
                ch = name.charAt(i);
                result.append(Character.isJavaIdentifierPart(ch)  ? ch : '_');
            }
            return result.toString();
        }
        return name;
!!!3885954.java!!!	getJCRefType(inout signature : String) : Type
        return Type.getType(signature);
!!!3886082.java!!!	internalName(inout cname : String) : String
        return cname.replace('.', filesep);
!!!3886210.java!!!	println(inout s : String) : void
        System.out.println(s);
!!!3886338.java!!!	println(in ch : char) : void
        System.out.println(ch);
!!!3886466.java!!!	TRACE1() : void
        System.out.println("TRACE1");
!!!3886594.java!!!	TRACE2() : void
        System.out.println("TRACE2");
!!!3886722.java!!!	TRACE3() : void
        System.out.println("TRACE3");
!!!3886850.java!!!	replace(inout base : String, in ch : char, inout str : String) : String
        return (base.indexOf(ch) < 0) ? base :
            replace(base, String.valueOf(ch), new String[] { str });
!!!3886978.java!!!	replace(inout base : String, inout delim : String, inout str : String [[]]) : String
        final int len = base.length();
        final StringBuffer result = new StringBuffer();

        for (int i = 0; i < len; i++) {
            final char ch = base.charAt(i);
            final int k = delim.indexOf(ch);

            if (k >= 0) {
                result.append(str[k]);
            }
            else {
                result.append(ch);
            }
        }
        return result.toString();
!!!3887106.java!!!	escape(inout input : String) : String
        return replace(input, ".-/:",
            new String[] { "$dot$", "$dash$", "$slash$", "$colon$" });
!!!3887234.java!!!	getLocalName(inout qname : String) : String
        final int index = qname.lastIndexOf(":");
        return (index > 0) ? qname.substring(index + 1) : qname;
!!!3887362.java!!!	getPrefix(inout qname : String) : String
        final int index = qname.lastIndexOf(":");
        return (index > 0) ? qname.substring(0, index) :
            Constants.EMPTYSTRING;
!!!3887490.java!!!	isLiteral(inout str : String) : boolean
        final int length = str.length();
        for (int i = 0; i < length - 1; i++) {
            if (str.charAt(i) == '{' && str.charAt(i + 1) != '{') {
                return false;
            }
        }
        return true;
!!!3887618.java!!!	isValidQNames(inout str : String) : boolean
        if ((str != null) && (!str.equals(Constants.EMPTYSTRING))) {
            final StringTokenizer tokens = new StringTokenizer(str);
            while (tokens.hasMoreTokens()) {
                if (!XML11Char.isXML11ValidQName(tokens.nextToken())) {
                    return false;
                }
            }
        }
        return true;
