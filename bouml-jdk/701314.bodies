class XSParticleDecl
!!!4731266.java!!!	makeClone() : XSParticleDecl
        XSParticleDecl particle = new XSParticleDecl();
        particle.fType = fType;
        particle.fMinOccurs = fMinOccurs;
        particle.fMaxOccurs = fMaxOccurs;
        particle.fDescription = fDescription;
        particle.fValue = fValue;
        particle.fAnnotations = fAnnotations;
        return particle;
!!!4731394.java!!!	emptiable() : boolean
        return minEffectiveTotalRange() == 0;
!!!4731522.java!!!	isEmpty() : boolean
        if (fType == PARTICLE_EMPTY)
             return true;
        if (fType == PARTICLE_ELEMENT || fType == PARTICLE_WILDCARD)
            return false;

        return ((XSModelGroupImpl)fValue).isEmpty();
!!!4731650.java!!!	minEffectiveTotalRange() : int
        if (fType == XSParticleDecl.PARTICLE_EMPTY) {
            return 0;
        }
        if (fType == PARTICLE_MODELGROUP) {
            return ((XSModelGroupImpl)fValue).minEffectiveTotalRange() * fMinOccurs;
        }
        return fMinOccurs;
!!!4731778.java!!!	maxEffectiveTotalRange() : int
        if (fType == XSParticleDecl.PARTICLE_EMPTY) {
            return 0;
        }
        if (fType == PARTICLE_MODELGROUP) {
            int max = ((XSModelGroupImpl)fValue).maxEffectiveTotalRange();
            if (max == SchemaSymbols.OCCURRENCE_UNBOUNDED)
                return SchemaSymbols.OCCURRENCE_UNBOUNDED;
            if (max != 0 && fMaxOccurs == SchemaSymbols.OCCURRENCE_UNBOUNDED)
                return SchemaSymbols.OCCURRENCE_UNBOUNDED;
            return max * fMaxOccurs;
        }
        return fMaxOccurs;
!!!4731906.java!!!	toString() : String
        if (fDescription == null) {
            StringBuffer buffer = new StringBuffer();
            appendParticle(buffer);
            if (!(fMinOccurs == 0 && fMaxOccurs == 0 ||
                  fMinOccurs == 1 && fMaxOccurs == 1)) {
                buffer.append('{').append(fMinOccurs);
                if (fMaxOccurs == SchemaSymbols.OCCURRENCE_UNBOUNDED)
                    buffer.append("-UNBOUNDED");
                else if (fMinOccurs != fMaxOccurs)
                    buffer.append('-').append(fMaxOccurs);
                buffer.append('}');
            }
            fDescription = buffer.toString();
        }
        return fDescription;
!!!4732034.java!!!	appendParticle(inout buffer : StringBuffer) : void
        switch (fType) {
        case PARTICLE_EMPTY:
            buffer.append("EMPTY");
            break;
        case PARTICLE_ELEMENT:
            buffer.append(fValue.toString());
            break;
        case PARTICLE_WILDCARD:
            buffer.append('(');
            buffer.append(fValue.toString());
            buffer.append(')');
            break;
        case PARTICLE_MODELGROUP:
            buffer.append(fValue.toString());
            break;
        }
!!!4732162.java!!!	reset() : void
        fType = PARTICLE_EMPTY;
        fValue = null;
        fMinOccurs = 1;
        fMaxOccurs = 1;
        fDescription = null;
        fAnnotations = null;
!!!4732290.java!!!	getType() : short
        return XSConstants.PARTICLE;
!!!4732418.java!!!	getName() : String
        return null;
!!!4732546.java!!!	getNamespace() : String
        return null;
!!!4732674.java!!!	getMinOccurs() : int
        return fMinOccurs;
!!!4732802.java!!!	getMaxOccursUnbounded() : boolean
        return fMaxOccurs == SchemaSymbols.OCCURRENCE_UNBOUNDED;
!!!4732930.java!!!	getMaxOccurs() : int
        return fMaxOccurs;
!!!4733058.java!!!	getTerm() : XSTerm
        return fValue;
!!!4733186.java!!!	getNamespaceItem() : XSNamespaceItem
                return null;
!!!4733314.java!!!	getAnnotations() : XSObjectList
        return (fAnnotations != null) ? fAnnotations : XSObjectListImpl.EMPTY_LIST;
