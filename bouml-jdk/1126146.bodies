class SynchronousQueue
!!!9239298.java!!!	SynchronousQueue()
        this(false);
!!!9239426.java!!!	SynchronousQueue(inout fair : boolean)
        transferer = fair ? new TransferQueue<E>() : new TransferStack<E>();
!!!9239554.java!!!	put(inout e : E) : void
        if (e == null) throw new NullPointerException();
        if (transferer.transfer(e, false, 0) == null) {
            Thread.interrupted();
            throw new InterruptedException();
        }
!!!9239682.java!!!	offer(inout e : E, in timeout : long, inout unit : TimeUnit) : boolean
        if (e == null) throw new NullPointerException();
        if (transferer.transfer(e, true, unit.toNanos(timeout)) != null)
            return true;
        if (!Thread.interrupted())
            return false;
        throw new InterruptedException();
!!!9239810.java!!!	offer(inout e : E) : boolean
        if (e == null) throw new NullPointerException();
        return transferer.transfer(e, true, 0) != null;
!!!9239938.java!!!	take() : E
        E e = transferer.transfer(null, false, 0);
        if (e != null)
            return e;
        Thread.interrupted();
        throw new InterruptedException();
!!!9240066.java!!!	poll(in timeout : long, inout unit : TimeUnit) : E
        E e = transferer.transfer(null, true, unit.toNanos(timeout));
        if (e != null || !Thread.interrupted())
            return e;
        throw new InterruptedException();
!!!9240194.java!!!	poll() : E
        return transferer.transfer(null, true, 0);
!!!9240322.java!!!	isEmpty() : boolean
        return true;
!!!9240450.java!!!	size() : int
        return 0;
!!!9240578.java!!!	remainingCapacity() : int
        return 0;
!!!9240834.java!!!	contains(inout o : Object) : boolean
        return false;
!!!9240962.java!!!	remove(inout o : Object) : boolean
        return false;
!!!9241090.java!!!	containsAll(inout c : Collection) : boolean
        return c.isEmpty();
!!!9241218.java!!!	removeAll(inout c : Collection) : boolean
        return false;
!!!9241346.java!!!	retainAll(inout c : Collection) : boolean
        return false;
!!!9241474.java!!!	peek() : E
        return null;
!!!9241602.java!!!	iterator() : Iterator
        return Collections.emptyIterator();
!!!9241730.java!!!	spliterator() : Spliterator
        return Spliterators.emptySpliterator();
!!!9241858.java!!!	toArray() : Object
        return new Object[0];
!!!9241986.java!!!	toArray(inout a : T [[]]) : T
        if (a.length > 0)
            a[0] = null;
        return a;
!!!9242114.java!!!	drainTo(inout c : Collection) : int
        if (c == null)
            throw new NullPointerException();
        if (c == this)
            throw new IllegalArgumentException();
        int n = 0;
        for (E e; (e = poll()) != null;) {
            c.add(e);
            ++n;
        }
        return n;
!!!9242242.java!!!	drainTo(inout c : Collection, in maxElements : int) : int
        if (c == null)
            throw new NullPointerException();
        if (c == this)
            throw new IllegalArgumentException();
        int n = 0;
        for (E e; n < maxElements && (e = poll()) != null;) {
            c.add(e);
            ++n;
        }
        return n;
!!!9242370.java!!!	writeObject(inout s : ObjectOutputStream) : void
        boolean fair = transferer instanceof TransferQueue;
        if (fair) {
            qlock = new ReentrantLock(true);
            waitingProducers = new FifoWaitQueue();
            waitingConsumers = new FifoWaitQueue();
        }
        else {
            qlock = new ReentrantLock();
            waitingProducers = new LifoWaitQueue();
            waitingConsumers = new LifoWaitQueue();
        }
        s.defaultWriteObject();
!!!9242498.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
        if (waitingProducers instanceof FifoWaitQueue)
            transferer = new TransferQueue<E>();
        else
            transferer = new TransferStack<E>();
!!!9242626.java!!!	objectFieldOffset(inout UNSAFE : sun.misc.Unsafe, inout field : String, inout klazz : Class) : long
        try {
            return UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));
        } catch (NoSuchFieldException e) {
            // Convert Exception to corresponding Error
            NoSuchFieldError error = new NoSuchFieldError(field);
            error.initCause(e);
            throw error;
        }
