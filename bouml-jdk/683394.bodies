class DateTimeData
!!!4505858.java!!!	DateTimeData(inout originalValue : String, inout type : AbstractDateTimeDV)
            this.originalValue = originalValue;
            this.type = type;
!!!4505986.java!!!	DateTimeData(in year : int, in month : int, in day : int, in hour : int, in minute : int, in second : double, in utc : int, inout originalValue : String, inout normalized : boolean, inout type : AbstractDateTimeDV)
            this.year = year;
            this.month = month;
            this.day = day;
            this.hour = hour;
            this.minute = minute;
            this.second = second;
            this.utc = utc;
            this.type = type;
            this.originalValue = originalValue;
!!!4506114.java!!!	equals(inout obj : Object) : boolean
            if (!(obj instanceof DateTimeData)) {
                return false;
            }
            return type.compareDates(this, (DateTimeData) obj, true) == 0;
!!!4506242.java!!!	hashCode() : int
            final DateTimeData tempDate = new DateTimeData(null, type);
            type.cloneDate(this, tempDate);
            type.normalize(tempDate);
            return type.dateToString(tempDate).hashCode();
!!!4506370.java!!!	toString() : String
            if (canonical == null) {
                canonical = type.dateToString(this);
            }
            return canonical;
!!!4506498.java!!!	getYears() : int
            if (type instanceof DurationDV) {
                return 0;
            }
            return normalized ? year : unNormYear;
!!!4506626.java!!!	getMonths() : int
            if (type instanceof DurationDV) {
                return year * 12 + month;
            }
            return normalized ? month : unNormMonth;
!!!4506754.java!!!	getDays() : int
            if (type instanceof DurationDV) {
                return 0;
            }
            return normalized ? day : unNormDay;
!!!4506882.java!!!	getHours() : int
            if (type instanceof DurationDV) {
                return 0;
            }
            return normalized ? hour : unNormHour;
!!!4507010.java!!!	getMinutes() : int
            if (type instanceof DurationDV) {
                return 0;
            }
            return normalized ? minute : unNormMinute;
!!!4507138.java!!!	getSeconds() : double
            if (type instanceof DurationDV) {
                return day * 24 * 60 * 60 + hour * 60 * 60 + minute * 60 + second;
            }
            return normalized ? second : unNormSecond;
!!!4507266.java!!!	hasTimeZone() : boolean
            return utc != 0;
!!!4507394.java!!!	getTimeZoneHours() : int
            return timezoneHr;
!!!4507522.java!!!	getTimeZoneMinutes() : int
            return timezoneMin;
!!!4507650.java!!!	getLexicalValue() : String
            return originalValue;
!!!4507778.java!!!	normalize() : XSDateTime
            if (!normalized) {
                DateTimeData dt = (DateTimeData) this.clone();
                dt.normalized = true;
                return dt;
            }
            return this;
!!!4507906.java!!!	isNormalized() : boolean
            return normalized;
!!!4508034.java!!!	clone() : Object
            DateTimeData dt = new DateTimeData(this.year, this.month, this.day, this.hour,
                    this.minute, this.second, this.utc, this.originalValue, this.normalized, this.type);
            dt.canonical = this.canonical;
            dt.position = position;
            dt.timezoneHr = this.timezoneHr;
            dt.timezoneMin = this.timezoneMin;
            dt.unNormYear = this.unNormYear;
            dt.unNormMonth = this.unNormMonth;
            dt.unNormDay = this.unNormDay;
            dt.unNormHour = this.unNormHour;
            dt.unNormMinute = this.unNormMinute;
            dt.unNormSecond = this.unNormSecond;
            return dt;
!!!4508162.java!!!	getXMLGregorianCalendar() : XMLGregorianCalendar
            return type.getXMLGregorianCalendar(this);
!!!4508290.java!!!	getDuration() : Duration
            return type.getDuration(this);
