format 222
"chrono" // jdk1.8::java::time::chrono
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/time/chrono/"
  java_package "java.time.chrono"
  classview 176386 "chrono"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1052418 "ChronoLocalDate"
      visibility public stereotype "interface"
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date without time-of-day or time-zone in an arbitrary chronology, intended
for advanced globalization use cases.
<p>
<b>Most applications should declare method signatures, fields and variables
as {@link LocalDate}, not this interface.</b>
<p>
A {@code ChronoLocalDate} is the abstract representation of a date where the
{@code Chronology chronology}, or calendar system, is pluggable.
The date is defined in terms of fields expressed by {@link TemporalField},
where most common implementations are defined in {@link ChronoField}.
The chronology defines how the calendar system operates and the meaning of
the standard fields.

<h3>When to use this interface</h3>
The design of the API encourages the use of {@code LocalDate} rather than this
interface, even in the case where the application needs to deal with multiple
calendar systems.
<p>
This concept can seem surprising at first, as the natural way to globalize an
application might initially appear to be to abstract the calendar system.
However, as explored below, abstracting the calendar system is usually the wrong
approach, resulting in logic errors and hard to find bugs.
As such, it should be considered an application-wide architectural decision to choose
to use this interface as opposed to {@code LocalDate}.

<h3>Architectural issues to consider</h3>
These are some of the points that must be considered before using this interface
throughout an application.
<p>
1) Applications using this interface, as opposed to using just {@code LocalDate},
face a significantly higher probability of bugs. This is because the calendar system
in use is not known at development time. A key cause of bugs is where the developer
applies assumptions from their day-to-day knowledge of the ISO calendar system
to code that is intended to deal with any arbitrary calendar system.
The section below outlines how those assumptions can cause problems
The primary mechanism for reducing this increased risk of bugs is a strong code review process.
This should also be considered a extra cost in maintenance for the lifetime of the code.
<p>
2) This interface does not enforce immutability of implementations.
While the implementation notes indicate that all implementations must be immutable
there is nothing in the code or type system to enforce this. Any method declared
to accept a {@code ChronoLocalDate} could therefore be passed a poorly or
maliciously written mutable implementation.
<p>
3) Applications using this interface  must consider the impact of eras.
{@code LocalDate} shields users from the concept of eras, by ensuring that {@code getYear()}
returns the proleptic year. That decision ensures that developers can think of
{@code LocalDate} instances as consisting of three fields - year, month-of-year and day-of-month.
By contrast, users of this interface must think of dates as consisting of four fields -
era, year-of-era, month-of-year and day-of-month. The extra era field is frequently
forgotten, yet it is of vital importance to dates in an arbitrary calendar system.
For example, in the Japanese calendar system, the era represents the reign of an Emperor.
Whenever one reign ends and another starts, the year-of-era is reset to one.
<p>
4) The only agreed international standard for passing a date between two systems
is the ISO-8601 standard which requires the ISO calendar system. Using this interface
throughout the application will inevitably lead to the requirement to pass the date
across a network or component boundary, requiring an application specific protocol or format.
<p>
5) Long term persistence, such as a database, will almost always only accept dates in the
ISO-8601 calendar system (or the related Julian-Gregorian). Passing around dates in other
calendar systems increases the complications of interacting with persistence.
<p>
6) Most of the time, passing a {@code ChronoLocalDate} throughout an application
is unnecessary, as discussed in the last section below.

<h3>False assumptions causing bugs in multi-calendar system code</h3>
As indicated above, there are many issues to consider when try to use and manipulate a
date in an arbitrary calendar system. These are some of the key issues.
<p>
Code that queries the day-of-month and assumes that the value will never be more than
31 is invalid. Some calendar systems have more than 31 days in some months.
<p>
Code that adds 12 months to a date and assumes that a year has been added is invalid.
Some calendar systems have a different number of months, such as 13 in the Coptic or Ethiopic.
<p>
Code that adds one month to a date and assumes that the month-of-year value will increase
by one or wrap to the next year is invalid. Some calendar systems have a variable number
of months in a year, such as the Hebrew.
<p>
Code that adds one month, then adds a second one month and assumes that the day-of-month
will remain close to its original value is invalid. Some calendar systems have a large difference
between the length of the longest month and the length of the shortest month.
For example, the Coptic or Ethiopic have 12 months of 30 days and 1 month of 5 days.
<p>
Code that adds seven days and assumes that a week has been added is invalid.
Some calendar systems have weeks of other than seven days, such as the French Revolutionary.
<p>
Code that assumes that because the year of {@code date1} is greater than the year of {@code date2}
then {@code date1} is after {@code date2} is invalid. This is invalid for all calendar systems
when referring to the year-of-era, and especially untrue of the Japanese calendar system
where the year-of-era restarts with the reign of every new Emperor.
<p>
Code that treats month-of-year one and day-of-month one as the start of the year is invalid.
Not all calendar systems start the year when the month value is one.
<p>
In general, manipulating a date, and even querying a date, is wide open to bugs when the
calendar system is unknown at development time. This is why it is essential that code using
this interface is subjected to additional code reviews. It is also why an architectural
decision to avoid this interface type is usually the correct one.

<h3>Using LocalDate instead</h3>
The primary alternative to using this interface throughout your application is as follows.
<ul>
<li>Declare all method signatures referring to dates in terms of {@code LocalDate}.
<li>Either store the chronology (calendar system) in the user profile or lookup
 the chronology from the user locale
<li>Convert the ISO {@code LocalDate} to and from the user's preferred calendar system during
 printing and parsing
</ul>
This approach treats the problem of globalized calendar systems as a localization issue
and confines it to the UI layer. This approach is in keeping with other localization
issues in the java platform.
<p>
As discussed above, performing calculations on a date where the rules of the calendar system
are pluggable requires skill and is not recommended.
Fortunately, the need to perform calculations on a date in an arbitrary calendar system
is extremely rare. For example, it is highly unlikely that the business rules of a library
book rental scheme will allow rentals to be for one month, where meaning of the month
is dependent on the user's preferred calendar system.
<p>
A key use case for calculations on a date in an arbitrary calendar system is producing
a month-by-month calendar for display and user interaction. Again, this is a UI issue,
and use of this interface solely within a few methods of the UI layer may be justified.
<p>
In any other part of the system, where a date must be manipulated in a calendar system
other than ISO, the use case will generally specify the calendar system to use.
For example, an application may need to calculate the next Islamic or Hebrew holiday
which may require manipulating the date.
This kind of use case can be handled as follows:
<ul>
<li>start from the ISO {@code LocalDate} being passed to the method
<li>convert the date to the alternate calendar system, which for this use case is known
 rather than arbitrary
<li>perform the calculation
<li>convert back to {@code LocalDate}
</ul>
Developers writing low-level frameworks or libraries should also avoid this interface.
Instead, one of the two general purpose access interfaces should be used.
Use {@link TemporalAccessor} if read-only access is required, or use {@link Temporal}
if read-write access is required.

@implSpec
This interface must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
Subclasses should be Serializable wherever possible.
<p>
Additional calendar systems may be added to the system.
See {@link Chronology} for more details.

@since 1.8
"
      classrelation 3425794 // <generalisation>
	relation 3425794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3425794 // <generalisation>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3425922 // <generalisation>
	relation 3425922 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3425922 // <generalisation>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3426050 // <realization>
	relation 3426050 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3426050 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      operation 8340354 "timeLineOrder"
	class_operation public return_type class_ref 184962 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ChronoLocalDate> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a comparator that compares {@code ChronoLocalDate} in
time-line order ignoring the chronology.
<p>
This comparator differs from the comparison in {@link #compareTo} in that it
only compares the underlying date and not the chronology.
This allows dates in different calendar systems to be compared based
on the position of the date on the local time-line.
The underlying comparison is equivalent to comparing the epoch-day.

@return a comparator that compares in time-line order ignoring the chronology
@see #isAfter
@see #isBefore
@see #isEqual
"
      end

      operation 8340482 "from"
	class_operation public return_type class_ref 1052418 // ChronoLocalDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ChronoLocalDate} from a temporal object.
<p>
This obtains a local date based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ChronoLocalDate}.
<p>
The conversion extracts and combines the chronology and the date
from the temporal object. The behavior is equivalent to using
{@link Chronology#date(TemporalAccessor)} with the extracted chronology.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code ChronoLocalDate::from}.

@param temporal  the temporal object to convert, not null
@return the date, not null
@throws DateTimeException if unable to convert to a {@code ChronoLocalDate}
@see Chronology#date(TemporalAccessor)
"
      end

      operation 8340610 "getChronology"
	public return_type class_ref 1052546 // Chronology
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the chronology of this date.
<p>
The {@code Chronology} represents the calendar system in use.
The era and other fields in {@link ChronoField} are defined by the chronology.

@return the chronology, not null
"
      end

      operation 8340738 "getEra"
	public return_type class_ref 1052674 // Era
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the era, as defined by the chronology.
<p>
The era is, conceptually, the largest division of the time-line.
Most calendar systems have a single epoch dividing the time-line into two eras.
However, some have multiple eras, such as one for the reign of each leader.
The exact meaning is determined by the {@code Chronology}.
<p>
All correctly implemented {@code Era} classes are singletons, thus it
is valid code to write {@code date.getEra() == SomeChrono.ERA_NAME)}.
<p>
This default implementation uses {@link Chronology#eraOf(int)}.

@return the chronology specific era constant applicable at this date, not null
"
      end

      operation 8340866 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the year is a leap year, as defined by the calendar system.
<p>
A leap-year is a year of a longer length than normal.
The exact meaning is determined by the chronology with the constraint that
a leap-year must imply a year-length longer than a non leap-year.
<p>
This default implementation uses {@link Chronology#isLeapYear(long)}.

@return true if this date is in a leap year, false otherwise
"
      end

      operation 8340994 "lengthOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the month represented by this date, as defined by the calendar system.
<p>
This returns the length of the month in days.

@return the length of the month in days
"
      end

      operation 8341122 "lengthOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the year represented by this date, as defined by the calendar system.
<p>
This returns the length of the year in days.
<p>
The default implementation uses {@link #isLeapYear()} and returns 365 or 366.

@return the length of the year in days
"
      end

      operation 8341250 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified field is supported.
<p>
This checks if the specified field can be queried on this date.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
The set of supported fields is defined by the chronology and normally includes
all {@code ChronoField} date fields.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field can be queried, false if not
"
      end

      operation 8341378 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to or subtracted from this date.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
The set of supported units is defined by the chronology and normally includes
all {@code ChronoUnit} date units except {@code FOREVER}.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not
"
      end

      operation 8341506 "with"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------
 override for covariant return type

{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8341634 "with"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws UnsupportedTemporalTypeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8341762 "plus"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8341890 "plus"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8342018 "minus"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8342146 "minus"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws UnsupportedTemporalTypeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8342274 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this date using the specified query.
<p>
This queries this date using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8342402 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same date as this object.
<p>
This returns a temporal object of the same observable type as the input
with the date changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#EPOCH_DAY} as the field.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisLocalDate.adjustInto(temporal);
  temporal = temporal.with(thisLocalDate);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8342530 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another date in terms of the specified unit.
<p>
This calculates the amount of time between two {@code ChronoLocalDate}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified date.
The result will be negative if the end is before the start.
The {@code Temporal} passed to this method is converted to a
{@code ChronoLocalDate} using {@link Chronology#date(TemporalAccessor)}.
The calculation returns a whole number, representing the number of
complete units between the two dates.
For example, the amount in days between two dates can be calculated
using {@code startDate.until(endDate, DAYS)}.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, MONTHS);
  amount = MONTHS.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code DAYS}, {@code WEEKS}, {@code MONTHS}, {@code YEARS},
{@code DECADES}, {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS}
should be supported by all implementations.
Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal as
the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end date, exclusive, which is converted to a
 {@code ChronoLocalDate} in the same chronology, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this date and the end date
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to a {@code ChronoLocalDate}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc"
      end

      operation 8342658 "until"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "endDateExclusive" type class_ref 1052418 // ChronoLocalDate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the period between this date and another date as a {@code ChronoPeriod}.
<p>
This calculates the period between two dates. All supplied chronologies
calculate the period using years, months and days, however the
{@code ChronoPeriod} API allows the period to be represented using other units.
<p>
The start and end points are {@code this} and the specified date.
The result will be negative if the end is before the start.
The negative sign will be the same in each of year, month and day.
<p>
The calculation is performed using the chronology of this date.
If necessary, the input date will be converted to match.
<p>
This instance is immutable and unaffected by this method call.

@param endDateExclusive  the end date, exclusive, which may be in any chronology, not null
@return the period between this date and the end date, not null
@throws DateTimeException if the period cannot be calculated
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8342786 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this date using the specified formatter.
<p>
This date will be passed to the formatter to produce a string.
<p>
The default implementation must behave as follows:
<pre>
 return formatter.format(this);
</pre>

@param formatter  the formatter to use, not null
@return the formatted date string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8342914 "atTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "localTime" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this date with a time to create a {@code ChronoLocalDateTime}.
<p>
This returns a {@code ChronoLocalDateTime} formed from this date at the specified time.
All possible combinations of date and time are valid.

@param localTime  the local time to use, not null
@return the local date-time formed from this date and the specified time, not null
"
      end

      operation 8343042 "toEpochDay"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Converts this date to the Epoch Day.
<p>
The {@link ChronoField#EPOCH_DAY Epoch Day count} is a simple
incrementing count of days where day 0 is 1970-01-01 (ISO).
This definition is the same for all chronologies, enabling conversion.
<p>
This default implementation queries the {@code EPOCH_DAY} field.

@return the Epoch Day equivalent to this date
"
      end

      operation 8343170 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this date to another date, including the chronology.
<p>
The comparison is based first on the underlying time-line date, then
on the chronology.
It is \"consistent with equals\", as defined by {@link Comparable}.
<p>
For example, the following is the comparator order:
<ol>
<li>{@code 2012-12-03 (ISO)}</li>
<li>{@code 2012-12-04 (ISO)}</li>
<li>{@code 2555-12-04 (ThaiBuddhist)}</li>
<li>{@code 2012-12-05 (ISO)}</li>
</ol>
Values #2 and #3 represent the same date on the time-line.
When two values represent the same date, the chronology ID is compared to distinguish them.
This step is needed to make the ordering \"consistent with equals\".
<p>
If all the date objects being compared are in the same chronology, then the
additional chronology stage is not required and only the local date is used.
To compare the dates of two {@code TemporalAccessor} instances, including dates
in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.
<p>
This default implementation performs the comparison defined above.

@param other  the other date to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8343298 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this date is after the specified date ignoring the chronology.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the underlying date and not the chronology.
This allows dates in different calendar systems to be compared based
on the time-line position.
This is equivalent to using {@code date1.toEpochDay() > date2.toEpochDay()}.
<p>
This default implementation performs the comparison based on the epoch-day.

@param other  the other date to compare to, not null
@return true if this is after the specified date
"
      end

      operation 8343426 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this date is before the specified date ignoring the chronology.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the underlying date and not the chronology.
This allows dates in different calendar systems to be compared based
on the time-line position.
This is equivalent to using {@code date1.toEpochDay() < date2.toEpochDay()}.
<p>
This default implementation performs the comparison based on the epoch-day.

@param other  the other date to compare to, not null
@return true if this is before the specified date
"
      end

      operation 8343554 "isEqual"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this date is equal to the specified date ignoring the chronology.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the underlying date and not the chronology.
This allows dates in different calendar systems to be compared based
on the time-line position.
This is equivalent to using {@code date1.toEpochDay() == date2.toEpochDay()}.
<p>
This default implementation performs the comparison based on the epoch-day.

@param other  the other date to compare to, not null
@return true if the underlying date is equal to the specified date
"
      end

      operation 8343682 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this date is equal to another date, including the chronology.
<p>
Compares this date with another ensuring that the date and chronology are the same.
<p>
To compare the dates of two {@code TemporalAccessor} instances, including dates
in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.

@param obj  the object to check, null returns false
@return true if this is equal to the other date
"
      end

      operation 8343810 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date.

@return a suitable hash code
"
      end

      operation 8343938 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this date as a {@code String}.
<p>
The output will include the full local date.

@return the formatted date, not null
"
      end
    end

    class 1052546 "Chronology"
      visibility public stereotype "interface"
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A calendar system, used to organize and identify dates.
<p>
The main date and time API is built on the ISO calendar system.
The chronology operates behind the scenes to represent the general concept of a calendar system.
For example, the Japanese, Minguo, Thai Buddhist and others.
<p>
Most other calendar systems also operate on the shared concepts of year, month and day,
linked to the cycles of the Earth around the Sun, and the Moon around the Earth.
These shared concepts are defined by {@link ChronoField} and are available
for use by any {@code Chronology} implementation:
<pre>
  LocalDate isoDate = ...
  ThaiBuddhistDate thaiDate = ...
  int isoYear = isoDate.get(ChronoField.YEAR);
  int thaiYear = thaiDate.get(ChronoField.YEAR);
</pre>
As shown, although the date objects are in different calendar systems, represented by different
{@code Chronology} instances, both can be queried using the same constant on {@code ChronoField}.
For a full discussion of the implications of this, see {@link ChronoLocalDate}.
In general, the advice is to use the known ISO-based {@code LocalDate}, rather than
{@code ChronoLocalDate}.
<p>
While a {@code Chronology} object typically uses {@code ChronoField} and is based on
an era, year-of-era, month-of-year, day-of-month model of a date, this is not required.
A {@code Chronology} instance may represent a totally different kind of calendar system,
such as the Mayan.
<p>
In practical terms, the {@code Chronology} instance also acts as a factory.
The {@link #of(String)} method allows an instance to be looked up by identifier,
while the {@link #ofLocale(Locale)} method allows lookup by locale.
<p>
The {@code Chronology} instance provides a set of methods to create {@code ChronoLocalDate} instances.
The date classes are used to manipulate specific dates.
<ul>
<li> {@link #dateNow() dateNow()}
<li> {@link #dateNow(Clock) dateNow(clock)}
<li> {@link #dateNow(ZoneId) dateNow(zone)}
<li> {@link #date(int, int, int) date(yearProleptic, month, day)}
<li> {@link #date(Era, int, int, int) date(era, yearOfEra, month, day)}
<li> {@link #dateYearDay(int, int) dateYearDay(yearProleptic, dayOfYear)}
<li> {@link #dateYearDay(Era, int, int) dateYearDay(era, yearOfEra, dayOfYear)}
<li> {@link #date(TemporalAccessor) date(TemporalAccessor)}
</ul>

<h3 id=\"addcalendars\">Adding New Calendars</h3>
The set of available chronologies can be extended by applications.
Adding a new calendar system requires the writing of an implementation of
{@code Chronology}, {@code ChronoLocalDate} and {@code Era}.
The majority of the logic specific to the calendar system will be in the
{@code ChronoLocalDate} implementation.
The {@code Chronology} implementation acts as a factory.
<p>
To permit the discovery of additional chronologies, the {@link java.util.ServiceLoader ServiceLoader}
is used. A file must be added to the {@code META-INF/services} directory with the
name 'java.time.chrono.Chronology' listing the implementation classes.
See the ServiceLoader for more details on service loading.
For lookup by id or calendarType, the system provided calendars are found
first followed by application provided calendars.
<p>
Each chronology must define a chronology ID that is unique within the system.
If the chronology represents a calendar system defined by the
CLDR specification then the calendar type is the concatenation of the
CLDR type and, if applicable, the CLDR variant,

@implSpec
This interface must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
Subclasses should be Serializable wherever possible.

@since 1.8
"
      classrelation 3437826 // <realization>
	relation 3437826 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3437826 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      operation 8444674 "from"
	class_operation public return_type class_ref 1052546 // Chronology
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code Chronology} from a temporal object.
<p>
This obtains a chronology based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code Chronology}.
<p>
The conversion will obtain the chronology using {@link TemporalQueries#chronology()}.
If the specified temporal object does not have a chronology, {@link IsoChronology} is returned.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code Chronology::from}.

@param temporal  the temporal to convert, not null
@return the chronology, not null
@throws DateTimeException if unable to convert to an {@code Chronology}
"
      end

      operation 8444802 "ofLocale"
	class_operation public return_type class_ref 1052546 // Chronology
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Chronology} from a locale.
<p>
This returns a {@code Chronology} based on the specified locale,
typically returning {@code IsoChronology}. Other calendar systems
are only returned if they are explicitly selected within the locale.
<p>
The {@link Locale} class provide access to a range of information useful
for localizing an application. This includes the language and region,
such as \"en-GB\" for English as used in Great Britain.
<p>
The {@code Locale} class also supports an extension mechanism that
can be used to identify a calendar system. The mechanism is a form
of key-value pairs, where the calendar system has the key \"ca\".
For example, the locale \"en-JP-u-ca-japanese\" represents the English
language as used in Japan with the Japanese calendar system.
<p>
This method finds the desired calendar system by in a manner equivalent
to passing \"ca\" to {@link Locale#getUnicodeLocaleType(String)}.
If the \"ca\" key is not present, then {@code IsoChronology} is returned.
<p>
Note that the behavior of this method differs from the older
{@link java.util.Calendar#getInstance(Locale)} method.
If that method receives a locale of \"th_TH\" it will return {@code BuddhistCalendar}.
By contrast, this method will return {@code IsoChronology}.
Passing the locale \"th-TH-u-ca-buddhist\" into either method will
result in the Thai Buddhist calendar system and is therefore the
recommended approach going forward for Thai calendar system localization.
<p>
A similar, but simpler, situation occurs for the Japanese calendar system.
The locale \"jp_JP_JP\" has previously been used to access the calendar.
However, unlike the Thai locale, \"ja_JP_JP\" is automatically converted by
{@code Locale} to the modern and recommended form of \"ja-JP-u-ca-japanese\".
Thus, there is no difference in behavior between this method and
{@code Calendar#getInstance(Locale)}.

@param locale  the locale to use to obtain the calendar system, not null
@return the calendar system associated with the locale, not null
@throws DateTimeException if the locale-specified calendar cannot be found
"
      end

      operation 8444930 "of"
	class_operation public return_type class_ref 1052546 // Chronology
	nparams 1
	  param inout name "id" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Chronology} from a chronology ID or
calendar system type.
<p>
This returns a chronology based on either the ID or the type.
The {@link #getId() chronology ID} uniquely identifies the chronology.
The {@link #getCalendarType() calendar system type} is defined by the
CLDR specification.
<p>
The chronology may be a system chronology or a chronology
provided by the application via ServiceLoader configuration.
<p>
Since some calendars can be customized, the ID or type typically refers
to the default customization. For example, the Gregorian calendar can have multiple
cutover dates from the Julian, but the lookup only provides the default cutover date.

@param id  the chronology ID or calendar system type, not null
@return the chronology with the identifier requested, not null
@throws DateTimeException if the chronology cannot be found
"
      end

      operation 8445058 "getAvailableChronologies"
	class_operation public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Chronology> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the available chronologies.
<p>
Each returned {@code Chronology} is available for use in the system.
The set of chronologies includes the system chronologies and
any chronologies provided by the application via ServiceLoader
configuration.

@return the independent, modifiable set of the available chronology IDs, not null
"
      end

      operation 8445186 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the ID of the chronology.
<p>
The ID uniquely identifies the {@code Chronology}.
It can be used to lookup the {@code Chronology} using {@link #of(String)}.

@return the chronology ID, not null
@see #getCalendarType()
"
      end

      operation 8445314 "getCalendarType"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the calendar type of the calendar system.
<p>
The calendar type is an identifier defined by the CLDR and
<em>Unicode Locale Data Markup Language (LDML)</em> specifications
to uniquely identification a calendar.
The {@code getCalendarType} is the concatenation of the CLDR calendar type
and the variant, if applicable, is appended separated by \"-\".
The calendar type is used to lookup the {@code Chronology} using {@link #of(String)}.

@return the calendar system type, null if the calendar is not defined by CLDR/LDML
@see #getId()
"
      end

      operation 8445442 "date"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 4
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a local date in this chronology from the era, year-of-era,
month-of-year and day-of-month fields.

@implSpec
The default implementation combines the era and year-of-era into a proleptic
year before calling {@link #date(int, int, int)}.

@param era  the era of the correct type for the chronology, not null
@param yearOfEra  the chronology year-of-era
@param month  the chronology month-of-year
@param dayOfMonth  the chronology day-of-month
@return the local date in this chronology, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not of the correct type for the chronology
"
      end

      operation 8445570 "date"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a local date in this chronology from the proleptic-year,
month-of-year and day-of-month fields.

@param prolepticYear  the chronology proleptic-year
@param month  the chronology month-of-year
@param dayOfMonth  the chronology day-of-month
@return the local date in this chronology, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8445698 "dateYearDay"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 3
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a local date in this chronology from the era, year-of-era and
day-of-year fields.

@implSpec
The default implementation combines the era and year-of-era into a proleptic
year before calling {@link #dateYearDay(int, int)}.

@param era  the era of the correct type for the chronology, not null
@param yearOfEra  the chronology year-of-era
@param dayOfYear  the chronology day-of-year
@return the local date in this chronology, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not of the correct type for the chronology
"
      end

      operation 8445826 "dateYearDay"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a local date in this chronology from the proleptic-year and
day-of-year fields.

@param prolepticYear  the chronology proleptic-year
@param dayOfYear  the chronology day-of-year
@return the local date in this chronology, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8445954 "dateEpochDay"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 1
	  param in name "epochDay" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a local date in this chronology from the epoch-day.
<p>
The definition of {@link ChronoField#EPOCH_DAY EPOCH_DAY} is the same
for all calendar systems, thus it can be used for conversion.

@param epochDay  the epoch day
@return the local date in this chronology, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8446082 "dateNow"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current local date in this chronology from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@implSpec
The default implementation invokes {@link #dateNow(Clock)}.

@return the current local date using the system clock and default time-zone, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8446210 "dateNow"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current local date in this chronology from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@implSpec
The default implementation invokes {@link #dateNow(Clock)}.

@param zone  the zone ID to use, not null
@return the current local date using the system clock, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8446338 "dateNow"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current local date in this chronology from the specified clock.
<p>
This will query the specified clock to obtain the current date - today.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@implSpec
The default implementation invokes {@link #date(TemporalAccessor)}.

@param clock  the clock to use, not null
@return the current local date, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8446466 "date"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a local date in this chronology from another temporal object.
<p>
This obtains a date in this chronology based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ChronoLocalDate}.
<p>
The conversion typically uses the {@link ChronoField#EPOCH_DAY EPOCH_DAY}
field, which is standardized across calendar systems.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code aChronology::date}.

@param temporal  the temporal object to convert, not null
@return the local date in this chronology, not null
@throws DateTimeException if unable to create the date
@see ChronoLocalDate#from(TemporalAccessor)
"
      end

      operation 8446594 "localDateTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ChronoLocalDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a local date-time in this chronology from another temporal object.
<p>
This obtains a date-time in this chronology based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ChronoLocalDateTime}.
<p>
The conversion extracts and combines the {@code ChronoLocalDate} and the
{@code LocalTime} from the temporal object.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
The result uses this chronology.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code aChronology::localDateTime}.

@param temporal  the temporal object to convert, not null
@return the local date-time in this chronology, not null
@throws DateTimeException if unable to create the date-time
@see ChronoLocalDateTime#from(TemporalAccessor)
"
      end

      operation 8446722 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ChronoLocalDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code ChronoZonedDateTime} in this chronology from another temporal object.
<p>
This obtains a zoned date-time in this chronology based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ChronoZonedDateTime}.
<p>
The conversion will first obtain a {@code ZoneId} from the temporal object,
falling back to a {@code ZoneOffset} if necessary. It will then try to obtain
an {@code Instant}, falling back to a {@code ChronoLocalDateTime} if necessary.
The result will be either the combination of {@code ZoneId} or {@code ZoneOffset}
with {@code Instant} or {@code ChronoLocalDateTime}.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
The result uses this chronology.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code aChronology::zonedDateTime}.

@param temporal  the temporal object to convert, not null
@return the zoned date-time in this chronology, not null
@throws DateTimeException if unable to create the date-time
@see ChronoZonedDateTime#from(TemporalAccessor)
"
      end

      operation 8446850 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ChronoLocalDate> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code ChronoZonedDateTime} in this chronology from an {@code Instant}.
<p>
This obtains a zoned date-time with the same instant as that specified.

@param instant  the instant to create the date-time from, not null
@param zone  the time-zone, not null
@return the zoned date-time, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8446978 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "prolepticYear" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified year is a leap year.
<p>
A leap-year is a year of a longer length than normal.
The exact meaning is determined by the chronology according to the following constraints.
<ul>
<li>a leap-year must imply a year-length longer than a non leap-year.
<li>a chronology that does not support the concept of a year must return false.
</ul>

@param prolepticYear  the proleptic-year to check, not validated for range
@return true if the year is a leap year
"
      end

      operation 8447106 "prolepticYear"
	public explicit_return_type "int"
	nparams 2
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the proleptic-year given the era and year-of-era.
<p>
This combines the era and year-of-era into the single proleptic-year field.
<p>
If the chronology makes active use of eras, such as {@code JapaneseChronology}
then the year-of-era will be validated against the era.
For other chronologies, validation is optional.

@param era  the era of the correct type for the chronology, not null
@param yearOfEra  the chronology year-of-era
@return the proleptic-year
@throws DateTimeException if unable to convert to a proleptic-year,
 such as if the year is invalid for the era
@throws ClassCastException if the {@code era} is not of the correct type for the chronology
"
      end

      operation 8447234 "eraOf"
	public return_type class_ref 1052674 // Era
	nparams 1
	  param in name "eraValue" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the chronology era object from the numeric value.
<p>
The era is, conceptually, the largest division of the time-line.
Most calendar systems have a single epoch dividing the time-line into two eras.
However, some have multiple eras, such as one for the reign of each leader.
The exact meaning is determined by the chronology according to the following constraints.
<p>
The era in use at 1970-01-01 must have the value 1.
Later eras must have sequentially higher values.
Earlier eras must have sequentially lower values.
Each chronology must refer to an enum or similar singleton to provide the era values.
<p>
This method returns the singleton era of the correct type for the specified era value.

@param eraValue  the era value
@return the calendar system era, not null
@throws DateTimeException if unable to create the era
"
      end

      operation 8447362 "eras"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Era> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the list of eras for the chronology.
<p>
Most calendar systems have an era, within which the year has meaning.
If the calendar system does not support the concept of eras, an empty
list must be returned.

@return the list of eras for the chronology, may be immutable, not null
"
      end

      operation 8447490 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1054722 // ChronoField
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
All fields can be expressed as a {@code long} integer.
This method returns an object that describes the valid range for that value.
<p>
Note that the result only describes the minimum and maximum valid values
and it is important not to read too much into them. For example, there
could be values within the range that are invalid for the field.
<p>
This method will return a result whether or not the chronology supports the field.

@param field  the field to get the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
"
      end

      operation 8447618 "getDisplayName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the textual representation of this chronology.
<p>
This returns the textual name used to identify the chronology,
suitable for presentation to the user.
The parameters control the style of the returned text and the locale.

@implSpec
The default implementation behaves as though the formatter was used to
format the chronology textual name.

@param style  the style of the text required, not null
@param locale  the locale to use, not null
@return the text value of the chronology, not null
"
      end

      operation 8447746 "resolveDate"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Resolves parsed {@code ChronoField} values into a date during parsing.
<p>
Most {@code TemporalField} implementations are resolved using the
resolve method on the field. By contrast, the {@code ChronoField} class
defines fields that only have meaning relative to the chronology.
As such, {@code ChronoField} date fields are resolved here in the
context of a specific chronology.
<p>
The default implementation, which explains typical resolve behaviour,
is provided in {@link AbstractChronology}.

@param fieldValues  the map of fields to values, which can be updated, not null
@param resolverStyle  the requested type of resolve, not null
@return the resolved date, null if insufficient information to create a date
@throws DateTimeException if the date cannot be resolved, typically
 because of a conflict in the input data
"
      end

      operation 8447874 "period"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 3
	  param in name "years" explicit_type "int"
	  param in name "months" explicit_type "int"
	  param in name "days" explicit_type "int"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a period for this chronology based on years, months and days.
<p>
This returns a period tied to this chronology using the specified
years, months and days.  All supplied chronologies use periods
based on years, months and days, however the {@code ChronoPeriod} API
allows the period to be represented using other units.

@implSpec
The default implementation returns an implementation class suitable
for most calendar systems. It is based solely on the three units.
Normalization, addition and subtraction derive the number of months
in a year from the {@link #range(ChronoField)}. If the number of
months within a year is fixed, then the calculation approach for
addition, subtraction and normalization is slightly different.
<p>
If implementing an unusual calendar system that is not based on
years, months and days, or where you want direct control, then
the {@code ChronoPeriod} interface must be directly implemented.
<p>
The returned period is immutable and thread-safe.

@param years  the number of years, may be negative
@param months  the number of years, may be negative
@param days  the number of years, may be negative
@return the period in terms of this chronology, not null
"
      end

      operation 8448002 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1052546 // Chronology
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this chronology to another chronology.
<p>
The comparison order first by the chronology ID string, then by any
additional information specific to the subclass.
It is \"consistent with equals\", as defined by {@link Comparable}.

@param other  the other chronology to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8448130 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this chronology is equal to another chronology.
<p>
The comparison is based on the entire state of the object.

@param obj  the object to check, null returns false
@return true if this is equal to the other chronology
"
      end

      operation 8448258 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this chronology.
<p>
The hash code should be based on the entire state of the object.

@return a suitable hash code
"
      end

      operation 8448386 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this chronology as a {@code String}.
<p>
The format should include the entire state of the object.

@return a string representation of this chronology, not null
"
      end
    end

    class 1052674 "Era"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An era of the time-line.
<p>
Most calendar systems have a single epoch dividing the time-line into two eras.
However, some calendar systems, have multiple eras, such as one for the reign
of each leader.
In all cases, the era is conceptually the largest division of the time-line.
Each chronology defines the Era's that are known Eras and a
{@link Chronology#eras Chronology.eras} to get the valid eras.
<p>
For example, the Thai Buddhist calendar system divides time into two eras,
before and after a single date. By contrast, the Japanese calendar system
has one era for the reign of each Emperor.
<p>
Instances of {@code Era} may be compared using the {@code ==} operator.

@implSpec
This interface must be implemented with care to ensure other classes operate correctly.
All implementations must be singletons - final, immutable and thread-safe.
It is recommended to use an enum whenever possible.

@since 1.8
"
      classrelation 3441026 // <generalisation>
	relation 3441026 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3441026 // <generalisation>
	  b parent class_ref 1050754 // TemporalAccessor
      end

      classrelation 3441154 // <generalisation>
	relation 3441154 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3441154 // <generalisation>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      operation 8464130 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the numeric value associated with the era as defined by the chronology.
Each chronology defines the predefined Eras and methods to list the Eras
of the chronology.
<p>
All fields, including eras, have an associated numeric value.
The meaning of the numeric value for era is determined by the chronology
according to these principles:
<ul>
<li>The era in use at the epoch 1970-01-01 (ISO) has the value 1.
<li>Later eras have sequentially higher values.
<li>Earlier eras have sequentially lower values, which may be negative.
</ul>

@return the numeric era value
"
      end

      operation 8464258 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this era can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range} and
{@link #get(TemporalField) get} methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code ERA} field returns true.
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this era, false if not
"
      end

      operation 8464386 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This era is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code ERA} field returns the range.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.
<p>
The default implementation must return a range for {@code ERA} from
zero to one, suitable for two era calendar systems such as ISO.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the unit is not supported

 override for Javadoc"
      end

      operation 8464514 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this era as an {@code int}.
<p>
This queries this era for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code ERA} field returns the value of the era.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc and performance"
      end

      operation 8464642 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this era as a {@code long}.
<p>
This queries this era for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code ERA} field returns the value of the era.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8464770 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this era using the specified query.
<p>
This queries this era using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8464898 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same era as this object.
<p>
This returns a temporal object of the same observable type as the input
with the era changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#ERA} as the field.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisEra.adjustInto(temporal);
  temporal = temporal.with(thisEra);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8465026 "getDisplayName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the textual representation of this era.
<p>
This returns the textual name used to identify the era,
suitable for presentation to the user.
The parameters control the style of the returned text and the locale.
<p>
If no textual mapping is found then the {@link #getValue() numeric value} is returned.
<p>
This default implementation is suitable for all implementations.

@param style  the style of the text required, not null
@param locale  the locale to use, not null
@return the text value of the era, not null
"
      end
    end

    class 1052802 "ChronoPeriod"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-based amount of time, such as '3 years, 4 months and 5 days' in an
arbitrary chronology, intended for advanced globalization use cases.
<p>
This interface models a date-based amount of time in a calendar system.
While most calendar systems use years, months and days, some do not.
Therefore, this interface operates solely in terms of a set of supported
units that are defined by the {@code Chronology}.
The set of supported units is fixed for a given chronology.
The amount of a supported unit may be set to zero.
<p>
The period is modeled as a directed amount of time, meaning that individual
parts of the period may be negative.

@implSpec
This interface must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
Subclasses should be Serializable wherever possible.

@since 1.8
"
      classrelation 3432322 // <generalisation>
	relation 3432322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3432322 // <generalisation>
	  b parent class_ref 1051650 // TemporalAmount
      end

      operation 8400898 "between"
	class_operation public return_type class_ref 1052802 // ChronoPeriod
	nparams 2
	  param inout name "startDateInclusive" type class_ref 1052418 // ChronoLocalDate
	  param inout name "endDateExclusive" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code ChronoPeriod} consisting of amount of time between two dates.
<p>
The start date is included, but the end date is not.
The period is calculated using {@link ChronoLocalDate#until(ChronoLocalDate)}.
As such, the calculation is chronology specific.
<p>
The chronology of the first date is used.
The chronology of the second date is ignored, with the date being converted
to the target chronology system before the calculation starts.
<p>
The result of this method can be a negative period if the end is before the start.
In most cases, the positive/negative sign will be the same in each of the supported fields.

@param startDateInclusive  the start date, inclusive, specifying the chronology of the calculation, not null
@param endDateExclusive  the end date, exclusive, in any chronology, not null
@return the period between this date and the end date, not null
@see ChronoLocalDate#until(ChronoLocalDate)
"
      end

      operation 8401026 "get"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the value of the requested unit.
<p>
The supported units are chronology specific.
They will typically be {@link ChronoUnit#YEARS YEARS},
{@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.
Requesting an unsupported unit will throw an exception.

@param unit the {@code TemporalUnit} for which to return the value
@return the long value of the unit
@throws DateTimeException if the unit is not supported
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8401154 "getUnits"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TemporalUnit> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the set of units supported by this period.
<p>
The supported units are chronology specific.
They will typically be {@link ChronoUnit#YEARS YEARS},
{@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.
They are returned in order from largest to smallest.
<p>
This set can be used in conjunction with {@link #get(TemporalUnit)}
to access the entire state of the period.

@return a list containing the supported units, not null
"
      end

      operation 8401282 "getChronology"
	public return_type class_ref 1052546 // Chronology
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the chronology that defines the meaning of the supported units.
<p>
The period is defined by the chronology.
It controls the supported units and restricts addition/subtraction
to {@code ChronoLocalDate} instances of the same chronology.

@return the chronology defining the period, not null
"
      end

      operation 8401410 "isZero"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if all the supported units of this period are zero.

@return true if this period is zero-length
"
      end

      operation 8401538 "isNegative"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if any of the supported units of this period are negative.

@return true if any unit of this period is negative
"
      end

      operation 8401666 "plus"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this period with the specified period added.
<p>
If the specified amount is a {@code ChronoPeriod} then it must have
the same chronology as this period. Implementations may choose to
accept or reject other {@code TemporalAmount} implementations.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the period to add, not null
@return a {@code ChronoPeriod} based on this period with the requested period added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8401794 "minus"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified period subtracted.
<p>
If the specified amount is a {@code ChronoPeriod} then it must have
the same chronology as this period. Implementations may choose to
accept or reject other {@code TemporalAmount} implementations.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the period to subtract, not null
@return a {@code ChronoPeriod} based on this period with the requested period subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8401922 "multipliedBy"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param in name "scalar" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a new instance with each amount in this period in this period
multiplied by the specified scalar.
<p>
This returns a period with each supported unit individually multiplied.
For example, a period of \"2 years, -3 months and 4 days\" multiplied by
3 will return \"6 years, -9 months and 12 days\".
No normalization is performed.

@param scalar  the scalar to multiply by, not null
@return a {@code ChronoPeriod} based on this period with the amounts multiplied
 by the scalar, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8402050 "negated"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance with each amount in this period negated.
<p>
This returns a period with each supported unit individually negated.
For example, a period of \"2 years, -3 months and 4 days\" will be
negated to \"-2 years, 3 months and -4 days\".
No normalization is performed.

@return a {@code ChronoPeriod} based on this period with the amounts negated, not null
@throws ArithmeticException if numeric overflow occurs, which only happens if
 one of the units has the value {@code Long.MIN_VALUE}
"
      end

      operation 8402178 "normalized"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this period with the amounts of each unit normalized.
<p>
The process of normalization is specific to each calendar system.
For example, in the ISO calendar system, the years and months are
normalized but the days are not, such that \"15 months\" would be
normalized to \"1 year and 3 months\".
<p>
This instance is immutable and unaffected by this method call.

@return a {@code ChronoPeriod} based on this period with the amounts of each
 unit normalized, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8402306 "addTo"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Adds this period to the specified temporal object.
<p>
This returns a temporal object of the same observable type as the input
with this period added.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#plus(TemporalAmount)}.
<pre>
  // these two lines are equivalent, but the second approach is recommended
  dateTime = thisPeriod.addTo(dateTime);
  dateTime = dateTime.plus(thisPeriod);
</pre>
<p>
The specified temporal must have the same chronology as this period.
This returns a temporal with the non-zero supported units added.
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the temporal object to adjust, not null
@return an object of the same type with the adjustment made, not null
@throws DateTimeException if unable to add
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8402434 "subtractFrom"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Subtracts this period from the specified temporal object.
<p>
This returns a temporal object of the same observable type as the input
with this period subtracted.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#minus(TemporalAmount)}.
<pre>
  // these two lines are equivalent, but the second approach is recommended
  dateTime = thisPeriod.subtractFrom(dateTime);
  dateTime = dateTime.minus(thisPeriod);
</pre>
<p>
The specified temporal must have the same chronology as this period.
This returns a temporal with the non-zero supported units subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the temporal object to adjust, not null
@return an object of the same type with the adjustment made, not null
@throws DateTimeException if unable to subtract
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8402562 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this period is equal to another period, including the chronology.
<p>
Compares this period with another ensuring that the type, each amount and
the chronology are the same.
Note that this means that a period of \"15 Months\" is not equal to a period
of \"1 Year and 3 Months\".

@param obj  the object to check, null returns false
@return true if this is equal to the other period
"
      end

      operation 8402690 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this period.

@return a suitable hash code
"
      end

      operation 8402818 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this period as a {@code String}.
<p>
The output will include the period amounts and chronology.

@return a string representation of this period, not null
"
      end
    end

    class 1053058 "ChronoLocalDateTime"
      visibility public stereotype "interface"
      nformals 1
      formal name "D" type "" explicit_default_value ""
        extends class_ref 1052418 // ChronoLocalDate
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-time without a time-zone in an arbitrary chronology, intended
for advanced globalization use cases.
<p>
<b>Most applications should declare method signatures, fields and variables
as {@link LocalDateTime}, not this interface.</b>
<p>
A {@code ChronoLocalDateTime} is the abstract representation of a local date-time
where the {@code Chronology chronology}, or calendar system, is pluggable.
The date-time is defined in terms of fields expressed by {@link TemporalField},
where most common implementations are defined in {@link ChronoField}.
The chronology defines how the calendar system operates and the meaning of
the standard fields.

<h3>When to use this interface</h3>
The design of the API encourages the use of {@code LocalDateTime} rather than this
interface, even in the case where the application needs to deal with multiple
calendar systems. The rationale for this is explored in detail in {@link ChronoLocalDate}.
<p>
Ensure that the discussion in {@code ChronoLocalDate} has been read and understood
before using this interface.

@implSpec
This interface must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
Subclasses should be Serializable wherever possible.

@param <D> the concrete type for the date of this date-time
@since 1.8
"
      classrelation 3426946 // <generalisation>
	relation 3426946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3426946 // <generalisation>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3427074 // <generalisation>
	relation 3427074 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3427074 // <generalisation>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3427202 // <realization>
	relation 3427202 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3427202 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      operation 8353794 "timeLineOrder"
	class_operation cpp_inline public return_type class_ref 184962 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ChronoLocalDateTime<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a comparator that compares {@code ChronoLocalDateTime} in
time-line order ignoring the chronology.
<p>
This comparator differs from the comparison in {@link #compareTo} in that it
only compares the underlying date-time and not the chronology.
This allows dates in different calendar systems to be compared based
on the position of the date-time on the local time-line.
The underlying comparison is equivalent to comparing the epoch-day and nano-of-day.

@return a comparator that compares in time-line order ignoring the chronology
@see #isAfter
@see #isBefore
@see #isEqual
"
      end

      operation 8353922 "from"
	class_operation cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ChronoLocalDateTime} from a temporal object.
<p>
This obtains a local date-time based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ChronoLocalDateTime}.
<p>
The conversion extracts and combines the chronology and the date-time
from the temporal object. The behavior is equivalent to using
{@link Chronology#localDateTime(TemporalAccessor)} with the extracted chronology.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code ChronoLocalDateTime::from}.

@param temporal  the temporal object to convert, not null
@return the date-time, not null
@throws DateTimeException if unable to convert to a {@code ChronoLocalDateTime}
@see Chronology#localDateTime(TemporalAccessor)
"
      end

      operation 8354050 "getChronology"
	cpp_inline public return_type class_ref 1052546 // Chronology
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the chronology of this date-time.
<p>
The {@code Chronology} represents the calendar system in use.
The era and other fields in {@link ChronoField} are defined by the chronology.

@return the chronology, not null
"
      end

      operation 8354178 "toLocalDate"
	cpp_inline public explicit_return_type "D"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local date part of this date-time.
<p>
This returns a local date with the same year, month and day
as this date-time.

@return the date part of this date-time, not null
"
      end

      operation 8354306 "toLocalTime"
	cpp_inline public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local time part of this date-time.
<p>
This returns a local time with the same hour, minute, second and
nanosecond as this date-time.

@return the time part of this date-time, not null
"
      end

      operation 8354434 "isSupported"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified field is supported.
<p>
This checks if the specified field can be queried on this date-time.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
The set of supported fields is defined by the chronology and normally includes
all {@code ChronoField} date and time fields.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field can be queried, false if not
"
      end

      operation 8354562 "isSupported"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to or subtracted from this date-time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
The set of supported units is defined by the chronology and normally includes
all {@code ChronoUnit} units except {@code FOREVER}.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not
"
      end

      operation 8354690 "with"
	cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------
 override for covariant return type

{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8354818 "with"
	cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8354946 "plus"
	cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8355074 "plus"
	cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8355202 "minus"
	cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8355330 "minus"
	cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8355458 "query"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this date-time using the specified query.
<p>
This queries this date-time using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8355586 "adjustInto"
	cpp_inline public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same date and time as this object.
<p>
This returns a temporal object of the same observable type as the input
with the date and time changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
twice, passing {@link ChronoField#EPOCH_DAY} and
{@link ChronoField#NANO_OF_DAY} as the fields.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisLocalDateTime.adjustInto(temporal);
  temporal = temporal.with(thisLocalDateTime);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8355714 "format"
	cpp_inline public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this date-time using the specified formatter.
<p>
This date-time will be passed to the formatter to produce a string.
<p>
The default implementation must behave as follows:
<pre>
 return formatter.format(this);
</pre>

@param formatter  the formatter to use, not null
@return the formatted date-time string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8355842 "atZone"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this time with a time-zone to create a {@code ChronoZonedDateTime}.
<p>
This returns a {@code ChronoZonedDateTime} formed from this date-time at the
specified time-zone. The result will match this date-time as closely as possible.
Time-zone rules, such as daylight savings, mean that not every local date-time
is valid for the specified zone, thus the local date-time may be adjusted.
<p>
The local date-time is resolved to a single instant on the time-line.
This is achieved by finding a valid offset from UTC/Greenwich for the local
date-time as defined by the {@link ZoneRules rules} of the zone ID.
<p>
In most cases, there is only one valid offset for a local date-time.
In the case of an overlap, where clocks are set back, there are two valid offsets.
This method uses the earlier offset typically corresponding to \"summer\".
<p>
In the case of a gap, where clocks jump forward, there is no valid offset.
Instead, the local date-time is adjusted to be later by the length of the gap.
For a typical one hour daylight savings change, the local date-time will be
moved one hour later into the offset typically corresponding to \"summer\".
<p>
To obtain the later offset during an overlap, call
{@link ChronoZonedDateTime#withLaterOffsetAtOverlap()} on the result of this method.

@param zone  the time-zone to use, not null
@return the zoned date-time formed from this date-time, not null
"
      end

      operation 8355970 "toInstant"
	cpp_inline public return_type class_ref 1003778 // Instant
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Converts this date-time to an {@code Instant}.
<p>
This combines this local date-time and the specified offset to form
an {@code Instant}.
<p>
This default implementation calculates from the epoch-day of the date and the
second-of-day of the time.

@param offset  the offset to use for the conversion, not null
@return an {@code Instant} representing the same instant, not null
"
      end

      operation 8356098 "toEpochSecond"
	cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this date-time to the number of seconds from the epoch
of 1970-01-01T00:00:00Z.
<p>
This combines this local date-time and the specified offset to calculate the
epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z.
Instants on the time-line after the epoch are positive, earlier are negative.
<p>
This default implementation calculates from the epoch-day of the date and the
second-of-day of the time.

@param offset  the offset to use for the conversion, not null
@return the number of seconds from the epoch of 1970-01-01T00:00:00Z
"
      end

      operation 8356226 "compareTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1053058 // ChronoLocalDateTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this date-time to another date-time, including the chronology.
<p>
The comparison is based first on the underlying time-line date-time, then
on the chronology.
It is \"consistent with equals\", as defined by {@link Comparable}.
<p>
For example, the following is the comparator order:
<ol>
<li>{@code 2012-12-03T12:00 (ISO)}</li>
<li>{@code 2012-12-04T12:00 (ISO)}</li>
<li>{@code 2555-12-04T12:00 (ThaiBuddhist)}</li>
<li>{@code 2012-12-05T12:00 (ISO)}</li>
</ol>
Values #2 and #3 represent the same date-time on the time-line.
When two values represent the same date-time, the chronology ID is compared to distinguish them.
This step is needed to make the ordering \"consistent with equals\".
<p>
If all the date-time objects being compared are in the same chronology, then the
additional chronology stage is not required and only the local date-time is used.
<p>
This default implementation performs the comparison defined above.

@param other  the other date-time to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8356354 "isAfter"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053058 // ChronoLocalDateTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this date-time is after the specified date-time ignoring the chronology.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the underlying date-time and not the chronology.
This allows dates in different calendar systems to be compared based
on the time-line position.
<p>
This default implementation performs the comparison based on the epoch-day
and nano-of-day.

@param other  the other date-time to compare to, not null
@return true if this is after the specified date-time
"
      end

      operation 8356482 "isBefore"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053058 // ChronoLocalDateTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this date-time is before the specified date-time ignoring the chronology.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the underlying date-time and not the chronology.
This allows dates in different calendar systems to be compared based
on the time-line position.
<p>
This default implementation performs the comparison based on the epoch-day
and nano-of-day.

@param other  the other date-time to compare to, not null
@return true if this is before the specified date-time
"
      end

      operation 8356610 "isEqual"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053058 // ChronoLocalDateTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this date-time is equal to the specified date-time ignoring the chronology.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the underlying date and time and not the chronology.
This allows date-times in different calendar systems to be compared based
on the time-line position.
<p>
This default implementation performs the comparison based on the epoch-day
and nano-of-day.

@param other  the other date-time to compare to, not null
@return true if the underlying date-time is equal to the specified date-time on the timeline
"
      end

      operation 8356738 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this date-time is equal to another date-time, including the chronology.
<p>
Compares this date-time with another ensuring that the date-time and chronology are the same.

@param obj  the object to check, null returns false
@return true if this is equal to the other date
"
      end

      operation 8356866 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date-time.

@return a suitable hash code
"
      end

      operation 8356994 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this date-time as a {@code String}.
<p>
The output will include the full local date-time.

@return a string representation of this date-time, not null
"
      end
    end

    class 1053314 "IsoChronology"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The ISO calendar system.
<p>
This chronology defines the rules of the ISO calendar system.
This calendar system is based on the ISO-8601 standard, which is the
<i>de facto</i> world calendar.
<p>
The fields are defined as follows:
<ul>
<li>era - There are two eras, 'Current Era' (CE) and 'Before Current Era' (BCE).
<li>year-of-era - The year-of-era is the same as the proleptic-year for the current CE era.
 For the BCE era before the ISO epoch the year increases from 1 upwards as time goes backwards.
<li>proleptic-year - The proleptic year is the same as the year-of-era for the
 current era. For the previous era, years have zero, then negative values.
<li>month-of-year - There are 12 months in an ISO year, numbered from 1 to 12.
<li>day-of-month - There are between 28 and 31 days in each of the ISO month, numbered from 1 to 31.
 Months 4, 6, 9 and 11 have 30 days, Months 1, 3, 5, 7, 8, 10 and 12 have 31 days.
 Month 2 has 28 days, or 29 in a leap year.
<li>day-of-year - There are 365 days in a standard ISO year and 366 in a leap year.
 The days are numbered from 1 to 365 or 1 to 366.
<li>leap-year - Leap years occur every 4 years, except where the year is divisble by 100 and not divisble by 400.
</ul>

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3443458 // <generalisation>
	relation 3443458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3443458 // <generalisation>
	  b parent class_ref 1054594 // AbstractChronology
      end

      classrelation 3443586 // <realization>
	relation 3443586 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3443586 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3443714 // INSTANCE (<unidirectional association>)
	relation 3443714 --->
	  a role_name "INSTANCE" init_value " new IsoChronology()" class_relation const_relation public
	    comment "
Singleton instance of the ISO chronology.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3443714 // INSTANCE (<unidirectional association>)
	  b parent class_ref 1053314 // IsoChronology
      end

      attribute 1956226 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1440403870442975015L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      operation 8477826 "IsoChronology"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restricted constructor.
"
      end

      operation 8477954 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the ID of the chronology - 'ISO'.
<p>
The ID uniquely identifies the {@code Chronology}.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.

@return the chronology ID - 'ISO'
@see #getCalendarType()
"
      end

      operation 8478082 "getCalendarType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the calendar type of the underlying calendar system - 'iso8601'.
<p>
The calendar type is an identifier defined by the
<em>Unicode Locale Data Markup Language (LDML)</em> specification.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.
It can also be used as part of a locale, accessible via
{@link Locale#getUnicodeLocaleType(String)} with the key 'ca'.

@return the calendar system type - 'iso8601'
@see #getId()
"
      end

      operation 8478210 "date"
	public return_type class_ref 1040770 // LocalDate
	nparams 4
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an ISO local date from the era, year-of-era, month-of-year
and day-of-month fields.

@param era  the ISO era, not null
@param yearOfEra  the ISO year-of-era
@param month  the ISO month-of-year
@param dayOfMonth  the ISO day-of-month
@return the ISO local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the type of {@code era} is not {@code IsoEra}

 override with covariant return type"
      end

      operation 8478338 "date"
	public return_type class_ref 1040770 // LocalDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains an ISO local date from the proleptic-year, month-of-year
and day-of-month fields.
<p>
This is equivalent to {@link LocalDate#of(int, int, int)}.

@param prolepticYear  the ISO proleptic-year
@param month  the ISO month-of-year
@param dayOfMonth  the ISO day-of-month
@return the ISO local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8478466 "dateYearDay"
	public return_type class_ref 1040770 // LocalDate
	nparams 3
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains an ISO local date from the era, year-of-era and day-of-year fields.

@param era  the ISO era, not null
@param yearOfEra  the ISO year-of-era
@param dayOfYear  the ISO day-of-year
@return the ISO local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8478594 "dateYearDay"
	public return_type class_ref 1040770 // LocalDate
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains an ISO local date from the proleptic-year and day-of-year fields.
<p>
This is equivalent to {@link LocalDate#ofYearDay(int, int)}.

@param prolepticYear  the ISO proleptic-year
@param dayOfYear  the ISO day-of-year
@return the ISO local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8478722 "dateEpochDay"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "epochDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains an ISO local date from the epoch-day.
<p>
This is equivalent to {@link LocalDate#ofEpochDay(long)}.

@param epochDay  the epoch day
@return the ISO local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8478850 "date"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an ISO local date from another date-time object.
<p>
This is equivalent to {@link LocalDate#from(TemporalAccessor)}.

@param temporal  the date-time object to convert, not null
@return the ISO local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8478978 "localDateTime"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains an ISO local date-time from another date-time object.
<p>
This is equivalent to {@link LocalDateTime#from(TemporalAccessor)}.

@param temporal  the date-time object to convert, not null
@return the ISO local date-time, not null
@throws DateTimeException if unable to create the date-time

 override with covariant return type"
      end

      operation 8479106 "zonedDateTime"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains an ISO zoned date-time from another date-time object.
<p>
This is equivalent to {@link ZonedDateTime#from(TemporalAccessor)}.

@param temporal  the date-time object to convert, not null
@return the ISO zoned date-time, not null
@throws DateTimeException if unable to create the date-time

 override with covariant return type"
      end

      operation 8479234 "zonedDateTime"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains an ISO zoned date-time in this chronology from an {@code Instant}.
<p>
This is equivalent to {@link ZonedDateTime#ofInstant(Instant, ZoneId)}.

@param instant  the instant to create the date-time from, not null
@param zone  the time-zone, not null
@return the zoned date-time, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8479362 "dateNow"
	public return_type class_ref 1040770 // LocalDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current ISO local date from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current ISO local date using the system clock and default time-zone, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8479490 "dateNow"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains the current ISO local date from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current ISO local date using the system clock, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8479618 "dateNow"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains the current ISO local date from the specified clock.
<p>
This will query the specified clock to obtain the current date - today.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current ISO local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8479746 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "prolepticYear" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the year is a leap year, according to the ISO proleptic
calendar system rules.
<p>
This method applies the current rules for leap years across the whole time-line.
In general, a year is a leap year if it is divisible by four without
remainder. However, years divisible by 100, are not leap years, with
the exception of years divisible by 400 which are.
<p>
For example, 1904 is a leap year it is divisible by 4.
1900 was not a leap year as it is divisible by 100, however 2000 was a
leap year as it is divisible by 400.
<p>
The calculation is proleptic - applying the same rules into the far future and far past.
This is historically inaccurate, but is correct for the ISO-8601 standard.

@param prolepticYear  the ISO proleptic year to check
@return true if the year is leap, false otherwise
"
      end

      operation 8479874 "prolepticYear"
	public explicit_return_type "int"
	nparams 2
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8480002 "eraOf"
	public return_type class_ref 1055874 // IsoEra
	nparams 1
	  param in name "eraValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8480130 "eras"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Era> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8480258 "resolveDate"
	public return_type class_ref 1040770 // LocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Resolves parsed {@code ChronoField} values into a date during parsing.
<p>
Most {@code TemporalField} implementations are resolved using the
resolve method on the field. By contrast, the {@code ChronoField} class
defines fields that only have meaning relative to the chronology.
As such, {@code ChronoField} date fields are resolved here in the
context of a specific chronology.
<p>
{@code ChronoField} instances on the ISO calendar system are resolved
as follows.
<ul>
<li>{@code EPOCH_DAY} - If present, this is converted to a {@code LocalDate}
 and all other date fields are then cross-checked against the date.
<li>{@code PROLEPTIC_MONTH} - If present, then it is split into the
 {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart
 then the field is validated.
<li>{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they
 are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}
 range is not validated, in smart and strict mode it is. The {@code ERA} is
 validated for range in all three modes. If only the {@code YEAR_OF_ERA} is
 present, and the mode is smart or lenient, then the current era (CE/AD)
 is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is
 left untouched. If only the {@code ERA} is present, then it is left untouched.
<li>{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -
 If all three are present, then they are combined to form a {@code LocalDate}.
 In all three modes, the {@code YEAR} is validated. If the mode is smart or strict,
 then the month and day are validated, with the day validated from 1 to 31.
 If the mode is lenient, then the date is combined in a manner equivalent to
 creating a date on the first of January in the requested year, then adding
 the difference in months, then the difference in days.
 If the mode is smart, and the day-of-month is greater than the maximum for
 the year-month, then the day-of-month is adjusted to the last day-of-month.
 If the mode is strict, then the three fields must form a valid date.
<li>{@code YEAR} and {@code DAY_OF_YEAR} -
 If both are present, then they are combined to form a {@code LocalDate}.
 In all three modes, the {@code YEAR} is validated.
 If the mode is lenient, then the date is combined in a manner equivalent to
 creating a date on the first of January in the requested year, then adding
 the difference in days.
 If the mode is smart or strict, then the two fields must form a valid date.
<li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and
 {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -
 If all four are present, then they are combined to form a {@code LocalDate}.
 In all three modes, the {@code YEAR} is validated.
 If the mode is lenient, then the date is combined in a manner equivalent to
 creating a date on the first of January in the requested year, then adding
 the difference in months, then the difference in weeks, then in days.
 If the mode is smart or strict, then the all four fields are validated to
 their outer ranges. The date is then combined in a manner equivalent to
 creating a date on the first day of the requested year and month, then adding
 the amount in weeks and days to reach their values. If the mode is strict,
 the date is additionally validated to check that the day and week adjustment
 did not change the month.
<li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and
 {@code DAY_OF_WEEK} - If all four are present, then they are combined to
 form a {@code LocalDate}. The approach is the same as described above for
 years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.
 The day-of-week is adjusted as the next or same matching day-of-week once
 the years, months and weeks have been handled.
<li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -
 If all three are present, then they are combined to form a {@code LocalDate}.
 In all three modes, the {@code YEAR} is validated.
 If the mode is lenient, then the date is combined in a manner equivalent to
 creating a date on the first of January in the requested year, then adding
 the difference in weeks, then in days.
 If the mode is smart or strict, then the all three fields are validated to
 their outer ranges. The date is then combined in a manner equivalent to
 creating a date on the first day of the requested year, then adding
 the amount in weeks and days to reach their values. If the mode is strict,
 the date is additionally validated to check that the day and week adjustment
 did not change the year.
<li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -
 If all three are present, then they are combined to form a {@code LocalDate}.
 The approach is the same as described above for years and weeks in
 {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the
 next or same matching day-of-week once the years and weeks have been handled.
</ul>

@param fieldValues  the map of fields to values, which can be updated, not null
@param resolverStyle  the requested type of resolve, not null
@return the resolved date, null if insufficient information to create a date
@throws DateTimeException if the date cannot be resolved, typically
 because of a conflict in the input data

 override for performance"
      end

      operation 8480386 "resolveProlepticMonth"
	package explicit_return_type "void"
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " override for better proleptic algorithm"
      end

      operation 8480514 "resolveYearOfEra"
	package return_type class_ref 1040770 // LocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " override for enhanced behaviour"
      end

      operation 8480642 "resolveYMD"
	package return_type class_ref 1040770 // LocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " override for performance"
      end

      operation 8480770 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1054722 // ChronoField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8480898 "period"
	public return_type class_ref 1053442 // Period
	nparams 3
	  param in name "years" explicit_type "int"
	  param in name "months" explicit_type "int"
	  param in name "days" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a period for this chronology based on years, months and days.
<p>
This returns a period tied to the ISO chronology using the specified
years, months and days. See {@link Period} for further details.

@param years  the number of years, may be negative
@param months  the number of years, may be negative
@param days  the number of years, may be negative
@return the period in terms of this chronology, not null
@return the ISO period, not null

 override with covariant return type"
      end

      operation 8481026 "writeReplace"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the Chronology using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(1);     // identifies a Chronology
 out.writeUTF(getId());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8481154 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end
    end

    class 1053698 "ChronoZonedDateTime"
      visibility public stereotype "interface"
      nformals 1
      formal name "D" type "" explicit_default_value ""
        extends class_ref 1052418 // ChronoLocalDate
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-time with a time-zone in an arbitrary chronology,
intended for advanced globalization use cases.
<p>
<b>Most applications should declare method signatures, fields and variables
as {@link ZonedDateTime}, not this interface.</b>
<p>
A {@code ChronoZonedDateTime} is the abstract representation of an offset date-time
where the {@code Chronology chronology}, or calendar system, is pluggable.
The date-time is defined in terms of fields expressed by {@link TemporalField},
where most common implementations are defined in {@link ChronoField}.
The chronology defines how the calendar system operates and the meaning of
the standard fields.

<h3>When to use this interface</h3>
The design of the API encourages the use of {@code ZonedDateTime} rather than this
interface, even in the case where the application needs to deal with multiple
calendar systems. The rationale for this is explored in detail in {@link ChronoLocalDate}.
<p>
Ensure that the discussion in {@code ChronoLocalDate} has been read and understood
before using this interface.

@implSpec
This interface must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
Subclasses should be Serializable wherever possible.

@param <D> the concrete type for the date of this date-time
@since 1.8
"
      classrelation 3434754 // <generalisation>
	relation 3434754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3434754 // <generalisation>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3434882 // <realization>
	relation 3434882 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3434882 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      operation 8421762 "timeLineOrder"
	class_operation cpp_inline public return_type class_ref 184962 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ChronoZonedDateTime<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a comparator that compares {@code ChronoZonedDateTime} in
time-line order ignoring the chronology.
<p>
This comparator differs from the comparison in {@link #compareTo} in that it
only compares the underlying instant and not the chronology.
This allows dates in different calendar systems to be compared based
on the position of the date-time on the instant time-line.
The underlying comparison is equivalent to comparing the epoch-second and nano-of-second.

@return a comparator that compares in time-line order ignoring the chronology
@see #isAfter
@see #isBefore
@see #isEqual
"
      end

      operation 8421890 "from"
	class_operation cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ChronoZonedDateTime} from a temporal object.
<p>
This creates a zoned date-time based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ChronoZonedDateTime}.
<p>
The conversion extracts and combines the chronology, date, time and zone
from the temporal object. The behavior is equivalent to using
{@link Chronology#zonedDateTime(TemporalAccessor)} with the extracted chronology.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code ChronoZonedDateTime::from}.

@param temporal  the temporal object to convert, not null
@return the date-time, not null
@throws DateTimeException if unable to convert to a {@code ChronoZonedDateTime}
@see Chronology#zonedDateTime(TemporalAccessor)
"
      end

      operation 8422018 "range"
	cpp_inline public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8422146 "get"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8422274 "getLong"
	cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8422402 "toLocalDate"
	cpp_inline public explicit_return_type "D"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local date part of this date-time.
<p>
This returns a local date with the same year, month and day
as this date-time.

@return the date part of this date-time, not null
"
      end

      operation 8422530 "toLocalTime"
	cpp_inline public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local time part of this date-time.
<p>
This returns a local time with the same hour, minute, second and
nanosecond as this date-time.

@return the time part of this date-time, not null
"
      end

      operation 8422658 "toLocalDateTime"
	cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local date-time part of this date-time.
<p>
This returns a local date with the same year, month and day
as this date-time.

@return the local date-time part of this date-time, not null
"
      end

      operation 8422786 "getChronology"
	cpp_inline public return_type class_ref 1052546 // Chronology
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the chronology of this date-time.
<p>
The {@code Chronology} represents the calendar system in use.
The era and other fields in {@link ChronoField} are defined by the chronology.

@return the chronology, not null
"
      end

      operation 8422914 "getOffset"
	cpp_inline public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the zone offset, such as '+01:00'.
<p>
This is the offset of the local date-time from UTC/Greenwich.

@return the zone offset, not null
"
      end

      operation 8423042 "getZone"
	cpp_inline public return_type class_ref 1049730 // ZoneId
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the zone ID, such as 'Europe/Paris'.
<p>
This returns the stored time-zone id used to determine the time-zone rules.

@return the zone ID, not null
"
      end

      operation 8423170 "withEarlierOffsetAtOverlap"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date-time changing the zone offset to the
earlier of the two valid offsets at a local time-line overlap.
<p>
This method only has any effect when the local time-line overlaps, such as
at an autumn daylight savings cutover. In this scenario, there are two
valid offsets for the local date-time. Calling this method will return
a zoned date-time with the earlier of the two selected.
<p>
If this method is called when it is not an overlap, {@code this}
is returned.
<p>
This instance is immutable and unaffected by this method call.

@return a {@code ChronoZonedDateTime} based on this date-time with the earlier offset, not null
@throws DateTimeException if no rules can be found for the zone
@throws DateTimeException if no rules are valid for this date-time
"
      end

      operation 8423298 "withLaterOffsetAtOverlap"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date-time changing the zone offset to the
later of the two valid offsets at a local time-line overlap.
<p>
This method only has any effect when the local time-line overlaps, such as
at an autumn daylight savings cutover. In this scenario, there are two
valid offsets for the local date-time. Calling this method will return
a zoned date-time with the later of the two selected.
<p>
If this method is called when it is not an overlap, {@code this}
is returned.
<p>
This instance is immutable and unaffected by this method call.

@return a {@code ChronoZonedDateTime} based on this date-time with the later offset, not null
@throws DateTimeException if no rules can be found for the zone
@throws DateTimeException if no rules are valid for this date-time
"
      end

      operation 8423426 "withZoneSameLocal"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date-time with a different time-zone,
retaining the local date-time if possible.
<p>
This method changes the time-zone and retains the local date-time.
The local date-time is only changed if it is invalid for the new zone.
<p>
To change the zone and adjust the local date-time,
use {@link #withZoneSameInstant(ZoneId)}.
<p>
This instance is immutable and unaffected by this method call.

@param zone  the time-zone to change to, not null
@return a {@code ChronoZonedDateTime} based on this date-time with the requested zone, not null
"
      end

      operation 8423554 "withZoneSameInstant"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date-time with a different time-zone,
retaining the instant.
<p>
This method changes the time-zone and retains the instant.
This normally results in a change to the local date-time.
<p>
This method is based on retaining the same instant, thus gaps and overlaps
in the local time-line have no effect on the result.
<p>
To change the offset while keeping the local time,
use {@link #withZoneSameLocal(ZoneId)}.

@param zone  the time-zone to change to, not null
@return a {@code ChronoZonedDateTime} based on this date-time with the requested zone, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8423682 "isSupported"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified field is supported.
<p>
This checks if the specified field can be queried on this date-time.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
The set of supported fields is defined by the chronology and normally includes
all {@code ChronoField} fields.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field can be queried, false if not
"
      end

      operation 8423810 "isSupported"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to or subtracted from this date-time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
The set of supported units is defined by the chronology and normally includes
all {@code ChronoUnit} units except {@code FOREVER}.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not
"
      end

      operation 8423938 "with"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------
 override for covariant return type

{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8424066 "with"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8424194 "plus"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8424322 "plus"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8424450 "minus"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8424578 "minus"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8424706 "query"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this date-time using the specified query.
<p>
This queries this date-time using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8424834 "format"
	cpp_inline public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this date-time using the specified formatter.
<p>
This date-time will be passed to the formatter to produce a string.
<p>
The default implementation must behave as follows:
<pre>
 return formatter.format(this);
</pre>

@param formatter  the formatter to use, not null
@return the formatted date-time string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8424962 "toInstant"
	cpp_inline public return_type class_ref 1003778 // Instant
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Converts this date-time to an {@code Instant}.
<p>
This returns an {@code Instant} representing the same point on the
time-line as this date-time. The calculation combines the
{@linkplain #toLocalDateTime() local date-time} and
{@linkplain #getOffset() offset}.

@return an {@code Instant} representing the same instant, not null
"
      end

      operation 8425090 "toEpochSecond"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this date-time to the number of seconds from the epoch
of 1970-01-01T00:00:00Z.
<p>
This uses the {@linkplain #toLocalDateTime() local date-time} and
{@linkplain #getOffset() offset} to calculate the epoch-second value,
which is the number of elapsed seconds from 1970-01-01T00:00:00Z.
Instants on the time-line after the epoch are positive, earlier are negative.

@return the number of seconds from the epoch of 1970-01-01T00:00:00Z
"
      end

      operation 8425218 "compareTo"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1053698 // ChronoZonedDateTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this date-time to another date-time, including the chronology.
<p>
The comparison is based first on the instant, then on the local date-time,
then on the zone ID, then on the chronology.
It is \"consistent with equals\", as defined by {@link Comparable}.
<p>
If all the date-time objects being compared are in the same chronology, then the
additional chronology stage is not required.
<p>
This default implementation performs the comparison defined above.

@param other  the other date-time to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8425346 "isBefore"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053698 // ChronoZonedDateTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the instant of this date-time is before that of the specified date-time.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the instant of the date-time. This is equivalent to using
{@code dateTime1.toInstant().isBefore(dateTime2.toInstant());}.
<p>
This default implementation performs the comparison based on the epoch-second
and nano-of-second.

@param other  the other date-time to compare to, not null
@return true if this point is before the specified date-time
"
      end

      operation 8425474 "isAfter"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053698 // ChronoZonedDateTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the instant of this date-time is after that of the specified date-time.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the instant of the date-time. This is equivalent to using
{@code dateTime1.toInstant().isAfter(dateTime2.toInstant());}.
<p>
This default implementation performs the comparison based on the epoch-second
and nano-of-second.

@param other  the other date-time to compare to, not null
@return true if this is after the specified date-time
"
      end

      operation 8425602 "isEqual"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053698 // ChronoZonedDateTime
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the instant of this date-time is equal to that of the specified date-time.
<p>
This method differs from the comparison in {@link #compareTo} and {@link #equals}
in that it only compares the instant of the date-time. This is equivalent to using
{@code dateTime1.toInstant().equals(dateTime2.toInstant());}.
<p>
This default implementation performs the comparison based on the epoch-second
and nano-of-second.

@param other  the other date-time to compare to, not null
@return true if the instant equals the instant of the specified date-time
"
      end

      operation 8425730 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this date-time is equal to another date-time.
<p>
The comparison is based on the offset date-time and the zone.
To compare for the same instant on the time-line, use {@link #compareTo}.
Only objects of type {@code ChronoZonedDateTime} are compared, other types return false.

@param obj  the object to check, null returns false
@return true if this is equal to the other date-time
"
      end

      operation 8425858 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date-time.

@return a suitable hash code
"
      end

      operation 8425986 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this date-time as a {@code String}.
<p>
The output will include the full zoned date-time.

@return a string representation of this date-time, not null
"
      end
    end

    class 1054594 "AbstractChronology"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract implementation of a calendar system, used to organize and identify dates.
<p>
The main date and time API is built on the ISO calendar system.
The chronology operates behind the scenes to represent the general concept of a calendar system.
<p>
See {@link Chronology} for more details.

@implSpec
This class is separated from the {@code Chronology} interface so that the static methods
are not inherited. While {@code Chronology} can be implemented directly, it is strongly
recommended to extend this abstract class instead.
<p>
This class must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
Subclasses should be Serializable wherever possible.

@since 1.8
"
      classrelation 3437954 // <realization>
	relation 3437954 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3437954 // <realization>
	  b parent class_ref 1052546 // Chronology
      end

      classrelation 3438082 // DATE_ORDER (<unidirectional association>)
	relation 3438082 --->
	  a role_name "DATE_ORDER" init_value "
        (Comparator<ChronoLocalDate> & Serializable) (date1, date2) -> {
            return Long.compare(date1.toEpochDay(), date2.toEpochDay());
        }" class_relation const_relation package
	    comment "
ChronoLocalDate order constant.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ChronoLocalDate> ${name}${value};
"
	    classrelation_ref 3438082 // DATE_ORDER (<unidirectional association>)
	  b parent class_ref 184962 // Comparator
      end

      classrelation 3438210 // DATE_TIME_ORDER (<unidirectional association>)
	relation 3438210 --->
	  a role_name "DATE_TIME_ORDER" init_value "
        (Comparator<ChronoLocalDateTime<? extends ChronoLocalDate>> & Serializable) (dateTime1, dateTime2) -> {
            int cmp = Long.compare(dateTime1.toLocalDate().toEpochDay(), dateTime2.toLocalDate().toEpochDay());
            if (cmp == 0) {
                cmp = Long.compare(dateTime1.toLocalTime().toNanoOfDay(), dateTime2.toLocalTime().toNanoOfDay());
            }
            return cmp;
        }" class_relation const_relation package
	    comment "
ChronoLocalDateTime order constant.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ChronoLocalDateTime<? extends ChronoLocalDate>> ${name}${value};
"
	    classrelation_ref 3438210 // DATE_TIME_ORDER (<unidirectional association>)
	  b parent class_ref 184962 // Comparator
      end

      classrelation 3438338 // INSTANT_ORDER (<unidirectional association>)
	relation 3438338 --->
	  a role_name "INSTANT_ORDER" init_value "
            (Comparator<ChronoZonedDateTime<?>> & Serializable) (dateTime1, dateTime2) -> {
                int cmp = Long.compare(dateTime1.toEpochSecond(), dateTime2.toEpochSecond());
                if (cmp == 0) {
                    cmp = Long.compare(dateTime1.toLocalTime().getNano(), dateTime2.toLocalTime().getNano());
                }
                return cmp;
            }" class_relation const_relation package
	    comment "
ChronoZonedDateTime order constant.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ChronoZonedDateTime<?>> ${name}${value};
"
	    classrelation_ref 3438338 // INSTANT_ORDER (<unidirectional association>)
	  b parent class_ref 184962 // Comparator
      end

      classrelation 3438466 // CHRONOS_BY_ID (<unidirectional association>)
	relation 3438466 --->
	  a role_name "CHRONOS_BY_ID" init_value " new ConcurrentHashMap<>()" class_relation const_relation private
	    comment "
Map of available calendars by ID.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Chronology> ${name}${value};
"
	    classrelation_ref 3438466 // CHRONOS_BY_ID (<unidirectional association>)
	  b parent class_ref 319362 // ConcurrentHashMap
      end

      classrelation 3438594 // CHRONOS_BY_TYPE (<unidirectional association>)
	relation 3438594 --->
	  a role_name "CHRONOS_BY_TYPE" init_value " new ConcurrentHashMap<>()" class_relation const_relation private
	    comment "
Map of available calendars by calendar type.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Chronology> ${name}${value};
"
	    classrelation_ref 3438594 // CHRONOS_BY_TYPE (<unidirectional association>)
	  b parent class_ref 319362 // ConcurrentHashMap
      end

      operation 8448514 "registerChrono"
	class_operation package return_type class_ref 1052546 // Chronology
	nparams 1
	  param inout name "chrono" type class_ref 1052546 // Chronology
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a Chronology by its ID and type for lookup by {@link #of(String)}.
Chronologies must not be registered until they are completely constructed.
Specifically, not in the constructor of Chronology.

@param chrono the chronology to register; not null
@return the already registered Chronology if any, may be null
"
      end

      operation 8448642 "registerChrono"
	class_operation package return_type class_ref 1052546 // Chronology
	nparams 2
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "id" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Register a Chronology by ID and type for lookup by {@link #of(String)}.
Chronos must not be registered until they are completely constructed.
Specifically, not in the constructor of Chronology.

@param chrono the chronology to register; not null
@param id the ID to register the chronology; not null
@return the already registered Chronology if any, may be null
"
      end

      operation 8448770 "initCache"
	class_operation private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialization of the maps from id and type to Chronology.
The ServiceLoader is used to find and register any implementations
of {@link java.time.chrono.AbstractChronology} found in the bootclass loader.
The built-in chronologies are registered explicitly.
Calendars configured via the Thread's context classloader are local
to that thread and are ignored.
<p>
The initialization is done only once using the registration
of the IsoChronology as the test and the final step.
Multiple threads may perform the initialization concurrently.
Only the first registration of each Chronology is retained by the
ConcurrentHashMap.
@return true if the cache was initialized
"
      end

      operation 8448898 "ofLocale"
	class_operation package return_type class_ref 1052546 // Chronology
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Chronology} from a locale.
<p>
See {@link Chronology#ofLocale(Locale)}.

@param locale  the locale to use to obtain the calendar system, not null
@return the calendar system associated with the locale, not null
@throws java.time.DateTimeException if the locale-specified calendar cannot be found
"
      end

      operation 8449026 "of"
	class_operation package return_type class_ref 1052546 // Chronology
	nparams 1
	  param inout name "id" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Chronology} from a chronology ID or
calendar system type.
<p>
See {@link Chronology#of(String)}.

@param id  the chronology ID or calendar system type, not null
@return the chronology with the identifier requested, not null
@throws java.time.DateTimeException if the chronology cannot be found
"
      end

      operation 8449154 "of0"
	class_operation private return_type class_ref 1052546 // Chronology
	nparams 1
	  param inout name "id" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code Chronology} from a chronology ID or
calendar system type.

@param id  the chronology ID or calendar system type, not null
@return the chronology with the identifier requested, or {@code null} if not found
"
      end

      operation 8449282 "getAvailableChronologies"
	class_operation package return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Chronology> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the available chronologies.
<p>
Each returned {@code Chronology} is available for use in the system.
The set of chronologies includes the system chronologies and
any chronologies provided by the application via ServiceLoader
configuration.

@return the independent, modifiable set of the available chronology IDs, not null
"
      end

      operation 8449410 "AbstractChronology"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates an instance.
"
      end

      operation 8449538 "resolveDate"
	public return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Resolves parsed {@code ChronoField} values into a date during parsing.
<p>
Most {@code TemporalField} implementations are resolved using the
resolve method on the field. By contrast, the {@code ChronoField} class
defines fields that only have meaning relative to the chronology.
As such, {@code ChronoField} date fields are resolved here in the
context of a specific chronology.
<p>
{@code ChronoField} instances are resolved by this method, which may
be overridden in subclasses.
<ul>
<li>{@code EPOCH_DAY} - If present, this is converted to a date and
 all other date fields are then cross-checked against the date.
<li>{@code PROLEPTIC_MONTH} - If present, then it is split into the
 {@code YEAR} and {@code MONTH_OF_YEAR}. If the mode is strict or smart
 then the field is validated.
<li>{@code YEAR_OF_ERA} and {@code ERA} - If both are present, then they
 are combined to form a {@code YEAR}. In lenient mode, the {@code YEAR_OF_ERA}
 range is not validated, in smart and strict mode it is. The {@code ERA} is
 validated for range in all three modes. If only the {@code YEAR_OF_ERA} is
 present, and the mode is smart or lenient, then the last available era
 is assumed. In strict mode, no era is assumed and the {@code YEAR_OF_ERA} is
 left untouched. If only the {@code ERA} is present, then it is left untouched.
<li>{@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} -
 If all three are present, then they are combined to form a date.
 In all three modes, the {@code YEAR} is validated.
 If the mode is smart or strict, then the month and day are validated.
 If the mode is lenient, then the date is combined in a manner equivalent to
 creating a date on the first day of the first month in the requested year,
 then adding the difference in months, then the difference in days.
 If the mode is smart, and the day-of-month is greater than the maximum for
 the year-month, then the day-of-month is adjusted to the last day-of-month.
 If the mode is strict, then the three fields must form a valid date.
<li>{@code YEAR} and {@code DAY_OF_YEAR} -
 If both are present, then they are combined to form a date.
 In all three modes, the {@code YEAR} is validated.
 If the mode is lenient, then the date is combined in a manner equivalent to
 creating a date on the first day of the requested year, then adding
 the difference in days.
 If the mode is smart or strict, then the two fields must form a valid date.
<li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and
 {@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -
 If all four are present, then they are combined to form a date.
 In all three modes, the {@code YEAR} is validated.
 If the mode is lenient, then the date is combined in a manner equivalent to
 creating a date on the first day of the first month in the requested year, then adding
 the difference in months, then the difference in weeks, then in days.
 If the mode is smart or strict, then the all four fields are validated to
 their outer ranges. The date is then combined in a manner equivalent to
 creating a date on the first day of the requested year and month, then adding
 the amount in weeks and days to reach their values. If the mode is strict,
 the date is additionally validated to check that the day and week adjustment
 did not change the month.
<li>{@code YEAR}, {@code MONTH_OF_YEAR}, {@code ALIGNED_WEEK_OF_MONTH} and
 {@code DAY_OF_WEEK} - If all four are present, then they are combined to
 form a date. The approach is the same as described above for
 years, months and weeks in {@code ALIGNED_DAY_OF_WEEK_IN_MONTH}.
 The day-of-week is adjusted as the next or same matching day-of-week once
 the years, months and weeks have been handled.
<li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -
 If all three are present, then they are combined to form a date.
 In all three modes, the {@code YEAR} is validated.
 If the mode is lenient, then the date is combined in a manner equivalent to
 creating a date on the first day of the requested year, then adding
 the difference in weeks, then in days.
 If the mode is smart or strict, then the all three fields are validated to
 their outer ranges. The date is then combined in a manner equivalent to
 creating a date on the first day of the requested year, then adding
 the amount in weeks and days to reach their values. If the mode is strict,
 the date is additionally validated to check that the day and week adjustment
 did not change the year.
<li>{@code YEAR}, {@code ALIGNED_WEEK_OF_YEAR} and {@code DAY_OF_WEEK} -
 If all three are present, then they are combined to form a date.
 The approach is the same as described above for years and weeks in
 {@code ALIGNED_DAY_OF_WEEK_IN_YEAR}. The day-of-week is adjusted as the
 next or same matching day-of-week once the years and weeks have been handled.
</ul>
<p>
The default implementation is suitable for most calendar systems.
If {@link java.time.temporal.ChronoField#YEAR_OF_ERA} is found without an {@link java.time.temporal.ChronoField#ERA}
then the last era in {@link #eras()} is used.
The implementation assumes a 7 day week, that the first day-of-month
has the value 1, that first day-of-year has the value 1, and that the
first of the month and year always exists.

@param fieldValues  the map of fields to values, which can be updated, not null
@param resolverStyle  the requested type of resolve, not null
@return the resolved date, null if insufficient information to create a date
@throws java.time.DateTimeException if the date cannot be resolved, typically
 because of a conflict in the input data
"
      end

      operation 8449666 "resolveProlepticMonth"
	package explicit_return_type "void"
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8449794 "resolveYearOfEra"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8449922 "resolveYMD"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8450050 "resolveYD"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8450178 "resolveYMAA"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8450306 "resolveYMAD"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8450434 "resolveYAA"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8450562 "resolveYAD"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8450690 "resolveAligned"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 4
	  param inout name "base" type class_ref 1052418 // ChronoLocalDate
	  param in name "months" explicit_type "long"
	  param in name "weeks" explicit_type "long"
	  param in name "dow" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8450818 "addFieldValue"
	package explicit_return_type "void"
	nparams 3
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "field" type class_ref 1054722 // ChronoField
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a field-value pair to the map, checking for conflicts.
<p>
If the field is not already present, then the field-value pair is added to the map.
If the field is already present and it has the same value as that specified, no action occurs.
If the field is already present and it has a different value to that specified, then
an exception is thrown.

@param field  the field to add, not null
@param value  the value to add, not null
@throws java.time.DateTimeException if the field is already present with a different value
"
      end

      operation 8450946 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1052546 // Chronology
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this chronology to another chronology.
<p>
The comparison order first by the chronology ID string, then by any
additional information specific to the subclass.
It is \"consistent with equals\", as defined by {@link Comparable}.

@implSpec
This implementation compares the chronology ID.
Subclasses must compare any additional state that they store.

@param other  the other chronology to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8451074 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this chronology is equal to another chronology.
<p>
The comparison is based on the entire state of the object.

@implSpec
This implementation checks the type and calls
{@link #compareTo(java.time.chrono.Chronology)}.

@param obj  the object to check, null returns false
@return true if this is equal to the other chronology
"
      end

      operation 8451202 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this chronology.
<p>
The hash code should be based on the entire state of the object.

@implSpec
This implementation is based on the chronology ID and class.
Subclasses should add any additional state that they store.

@return a suitable hash code
"
      end

      operation 8451330 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this chronology as a {@code String}, using the chronology ID.

@return a string representation of this chronology, not null
"
      end

      operation 8451458 "writeReplace"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the Chronology using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
<pre>
 out.writeByte(1);  // identifies this as a Chronology
 out.writeUTF(getId());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8451586 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws java.io.InvalidObjectException always
"
      end

      operation 8451714 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8451842 "readExternal"
	class_operation package return_type class_ref 1052546 // Chronology
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1054978 "ChronoLocalDateImpl"
      abstract visibility package 
      nformals 1
      formal name "D" type "" explicit_default_value ""
        extends class_ref 1052418 // ChronoLocalDate
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date expressed in terms of a standard year-month-day calendar system.
<p>
This class is used by applications seeking to handle dates in non-ISO calendar systems.
For example, the Japanese, Minguo, Thai Buddhist and others.
<p>
{@code ChronoLocalDate} is built on the generic concepts of year, month and day.
The calendar system, represented by a {@link java.time.chrono.Chronology}, expresses the relationship between
the fields and this class allows the resulting date to be manipulated.
<p>
Note that not all calendar systems are suitable for use with this class.
For example, the Mayan calendar uses a system that bears no relation to years, months and days.
<p>
The API design encourages the use of {@code LocalDate} for the majority of the application.
This includes code to read and write from a persistent data store, such as a database,
and to send dates and times across a network. The {@code ChronoLocalDate} instance is then used
at the user interface level to deal with localized input/output.

<P>Example: </p>
<pre>
       System.out.printf(\"Example()%n\");
       // Enumerate the list of available calendars and print today for each
       Set&lt;Chronology&gt; chronos = Chronology.getAvailableChronologies();
       for (Chronology chrono : chronos) {
           ChronoLocalDate date = chrono.dateNow();
           System.out.printf(\"   %20s: %s%n\", chrono.getID(), date.toString());
       }

       // Print the Hijrah date and calendar
       ChronoLocalDate date = Chronology.of(\"Hijrah\").dateNow();
       int day = date.get(ChronoField.DAY_OF_MONTH);
       int dow = date.get(ChronoField.DAY_OF_WEEK);
       int month = date.get(ChronoField.MONTH_OF_YEAR);
       int year = date.get(ChronoField.YEAR);
       System.out.printf(\"  Today is %s %s %d-%s-%d%n\", date.getChronology().getID(),
               dow, day, month, year);

       // Print today's date and the last day of the year
       ChronoLocalDate now1 = Chronology.of(\"Hijrah\").dateNow();
       ChronoLocalDate first = now1.with(ChronoField.DAY_OF_MONTH, 1)
               .with(ChronoField.MONTH_OF_YEAR, 1);
       ChronoLocalDate last = first.plus(1, ChronoUnit.YEARS)
               .minus(1, ChronoUnit.DAYS);
       System.out.printf(\"  Today is %s: start: %s; end: %s%n\", last.getChronology().getID(),
               first, last);
</pre>

<h3>Adding Calendars</h3>
<p> The set of calendars is extensible by defining a subclass of {@link ChronoLocalDate}
to represent a date instance and an implementation of {@code Chronology}
to be the factory for the ChronoLocalDate subclass.
</p>
<p> To permit the discovery of the additional calendar types the implementation of
{@code Chronology} must be registered as a Service implementing the {@code Chronology} interface
in the {@code META-INF/Services} file as per the specification of {@link java.util.ServiceLoader}.
The subclass must function according to the {@code Chronology} class description and must provide its
{@link java.time.chrono.Chronology#getId() chronlogy ID} and {@link Chronology#getCalendarType() calendar type}. </p>

@implSpec
This abstract class must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
Subclasses should be Serializable wherever possible.

@param <D> the ChronoLocalDate of this date-time
@since 1.8
"
      classrelation 3438722 // <realization>
	relation 3438722 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3438722 // <realization>
	  b parent class_ref 1052418 // ChronoLocalDate
      end

      classrelation 3438850 // <realization>
	relation 3438850 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3438850 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3438978 // <realization>
	relation 3438978 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3438978 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3439106 // <realization>
	relation 3439106 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3439106 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1951746 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6282433883239719096L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      operation 8451970 "ensureValid"
	class_operation cpp_inline package explicit_return_type "D"
	nparams 2
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<D extends ChronoLocalDate> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Casts the {@code Temporal} to {@code ChronoLocalDate} ensuring it bas the specified chronology.

@param chrono  the chronology to check for, not null
@param temporal  a date-time to cast, not null
@return the date-time checked and cast to {@code ChronoLocalDate}, not null
@throws ClassCastException if the date-time cannot be cast to ChronoLocalDate
 or the chronology is not equal this Chronology
"
      end

      operation 8452098 "ChronoLocalDateImpl"
	cpp_inline package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates an instance.
"
      end

      operation 8452226 "with"
	cpp_inline public explicit_return_type "D"
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8452354 "with"
	cpp_inline public explicit_return_type "D"
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8452482 "plus"
	cpp_inline public explicit_return_type "D"
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8452610 "plus"
	cpp_inline public explicit_return_type "D"
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8452738 "minus"
	cpp_inline public explicit_return_type "D"
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8452866 "minus"
	cpp_inline public explicit_return_type "D"
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8452994 "plusYears"
	abstract cpp_inline package explicit_return_type "D"
	nparams 1
	  param in name "yearsToAdd" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date with the specified number of years added.
<p>
This adds the specified period in years to the date.
In some cases, adding years can cause the resulting date to become invalid.
If this occurs, then other fields, typically the day-of-month, will be adjusted to ensure
that the result is valid. Typically this will select the last valid day of the month.
<p>
This instance is immutable and unaffected by this method call.

@param yearsToAdd  the years to add, may be negative
@return a date based on this one with the years added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8453122 "plusMonths"
	abstract cpp_inline package explicit_return_type "D"
	nparams 1
	  param in name "monthsToAdd" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date with the specified number of months added.
<p>
This adds the specified period in months to the date.
In some cases, adding months can cause the resulting date to become invalid.
If this occurs, then other fields, typically the day-of-month, will be adjusted to ensure
that the result is valid. Typically this will select the last valid day of the month.
<p>
This instance is immutable and unaffected by this method call.

@param monthsToAdd  the months to add, may be negative
@return a date based on this one with the months added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8453250 "plusWeeks"
	cpp_inline package explicit_return_type "D"
	nparams 1
	  param in name "weeksToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date with the specified number of weeks added.
<p>
This adds the specified period in weeks to the date.
In some cases, adding weeks can cause the resulting date to become invalid.
If this occurs, then other fields will be adjusted to ensure that the result is valid.
<p>
The default implementation uses {@link #plusDays(long)} using a 7 day week.
<p>
This instance is immutable and unaffected by this method call.

@param weeksToAdd  the weeks to add, may be negative
@return a date based on this one with the weeks added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8453378 "plusDays"
	abstract cpp_inline package explicit_return_type "D"
	nparams 1
	  param in name "daysToAdd" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date with the specified number of days added.
<p>
This adds the specified period in days to the date.
<p>
This instance is immutable and unaffected by this method call.

@param daysToAdd  the days to add, may be negative
@return a date based on this one with the days added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8453506 "minusYears"
	cpp_inline package explicit_return_type "D"
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date with the specified number of years subtracted.
<p>
This subtracts the specified period in years to the date.
In some cases, subtracting years can cause the resulting date to become invalid.
If this occurs, then other fields, typically the day-of-month, will be adjusted to ensure
that the result is valid. Typically this will select the last valid day of the month.
<p>
The default implementation uses {@link #plusYears(long)}.
<p>
This instance is immutable and unaffected by this method call.

@param yearsToSubtract  the years to subtract, may be negative
@return a date based on this one with the years subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8453634 "minusMonths"
	cpp_inline package explicit_return_type "D"
	nparams 1
	  param in name "monthsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns a copy of this date with the specified number of months subtracted.
<p>
This subtracts the specified period in months to the date.
In some cases, subtracting months can cause the resulting date to become invalid.
If this occurs, then other fields, typically the day-of-month, will be adjusted to ensure
that the result is valid. Typically this will select the last valid day of the month.
<p>
The default implementation uses {@link #plusMonths(long)}.
<p>
This instance is immutable and unaffected by this method call.

@param monthsToSubtract  the months to subtract, may be negative
@return a date based on this one with the months subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8453762 "minusWeeks"
	cpp_inline package explicit_return_type "D"
	nparams 1
	  param in name "weeksToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns a copy of this date with the specified number of weeks subtracted.
<p>
This subtracts the specified period in weeks to the date.
In some cases, subtracting weeks can cause the resulting date to become invalid.
If this occurs, then other fields will be adjusted to ensure that the result is valid.
<p>
The default implementation uses {@link #plusWeeks(long)}.
<p>
This instance is immutable and unaffected by this method call.

@param weeksToSubtract  the weeks to subtract, may be negative
@return a date based on this one with the weeks subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8453890 "minusDays"
	cpp_inline package explicit_return_type "D"
	nparams 1
	  param in name "daysToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns a copy of this date with the specified number of days subtracted.
<p>
This subtracts the specified period in days to the date.
<p>
The default implementation uses {@link #plusDays(long)}.
<p>
This instance is immutable and unaffected by this method call.

@param daysToSubtract  the days to subtract, may be negative
@return a date based on this one with the days subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8454018 "until"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8454146 "daysUntil"
	cpp_inline private explicit_return_type "long"
	nparams 1
	  param inout name "end" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8454274 "monthsUntil"
	cpp_inline private explicit_return_type "long"
	nparams 1
	  param inout name "end" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8454402 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8454530 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8454658 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1055106 "ChronoLocalDateTimeImpl"
      visibility package 
      nformals 1
      formal name "D" type "" explicit_default_value ""
        extends class_ref 1052418 // ChronoLocalDate
      nactuals 1
      actual class class_ref 1053058 // ChronoLocalDateTime
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-time without a time-zone for the calendar neutral API.
<p>
{@code ChronoLocalDateTime} is an immutable date-time object that represents a date-time, often
viewed as year-month-day-hour-minute-second. This object can also access other
fields such as day-of-year, day-of-week and week-of-year.
<p>
This class stores all date and time fields, to a precision of nanoseconds.
It does not store or represent a time-zone. For example, the value
\"2nd October 2007 at 13:45.30.123456789\" can be stored in an {@code ChronoLocalDateTime}.

@implSpec
This class is immutable and thread-safe.
@serial
@param <D> the concrete type for the date of this date-time
@since 1.8
"
      classrelation 3439234 // <realization>
	relation 3439234 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3439234 // <realization>
	  b parent class_ref 1053058 // ChronoLocalDateTime
      end

      classrelation 3439362 // <realization>
	relation 3439362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3439362 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3439490 // <realization>
	relation 3439490 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3439490 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3439618 // <realization>
	relation 3439618 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3439618 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1951874 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4556003607393004514L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1952002 "HOURS_PER_DAY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 24"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Hours per day.

"
      end

      attribute 1952130 "MINUTES_PER_HOUR"
	class_attribute const_attribute package explicit_type "int"
	init_value " 60"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Minutes per hour.

"
      end

      attribute 1952258 "MINUTES_PER_DAY"
	class_attribute const_attribute package explicit_type "int"
	init_value " MINUTES_PER_HOUR * HOURS_PER_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Minutes per day.

"
      end

      attribute 1952386 "SECONDS_PER_MINUTE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 60"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Seconds per minute.

"
      end

      attribute 1952514 "SECONDS_PER_HOUR"
	class_attribute const_attribute package explicit_type "int"
	init_value " SECONDS_PER_MINUTE * MINUTES_PER_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Seconds per hour.

"
      end

      attribute 1952642 "SECONDS_PER_DAY"
	class_attribute const_attribute package explicit_type "int"
	init_value " SECONDS_PER_HOUR * HOURS_PER_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Seconds per day.

"
      end

      attribute 1952770 "MILLIS_PER_DAY"
	class_attribute const_attribute package explicit_type "long"
	init_value " SECONDS_PER_DAY * 1000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Milliseconds per day.

"
      end

      attribute 1952898 "MICROS_PER_DAY"
	class_attribute const_attribute package explicit_type "long"
	init_value " SECONDS_PER_DAY * 1000_000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Microseconds per day.

"
      end

      attribute 1953026 "NANOS_PER_SECOND"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1000_000_000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nanos per second.

"
      end

      attribute 1953154 "NANOS_PER_MINUTE"
	class_attribute const_attribute package explicit_type "long"
	init_value " NANOS_PER_SECOND * SECONDS_PER_MINUTE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nanos per minute.

"
      end

      attribute 1953282 "NANOS_PER_HOUR"
	class_attribute const_attribute package explicit_type "long"
	init_value " NANOS_PER_MINUTE * MINUTES_PER_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nanos per hour.

"
      end

      attribute 1953410 "NANOS_PER_DAY"
	class_attribute const_attribute package explicit_type "long"
	init_value " NANOS_PER_HOUR * HOURS_PER_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nanos per day.

"
      end

      attribute 1953538 "date"
	const_attribute private explicit_type "D"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The date part.

"
      end

      classrelation 3439746 // time (<unidirectional association>)
	relation 3439746 --->
	  a role_name "time" const_relation private
	    comment "
The time part.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3439746 // time (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      operation 8454786 "of"
	class_operation cpp_inline package return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 2
	  param inout name "date" explicit_type "R"
	  param inout name "time" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends ChronoLocalDate> ${type}<R> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ChronoLocalDateTime} from a date and time.

@param date  the local date, not null
@param time  the local time, not null
@return the local date-time, not null
"
      end

      operation 8454914 "ensureValid"
	class_operation cpp_inline package return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 2
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends ChronoLocalDate> ${type}<R> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Casts the {@code Temporal} to {@code ChronoLocalDateTime} ensuring it bas the specified chronology.

@param chrono  the chronology to check for, not null
@param temporal   a date-time to cast, not null
@return the date-time checked and cast to {@code ChronoLocalDateTime}, not null
@throws ClassCastException if the date-time cannot be cast to ChronoLocalDateTimeImpl
 or the chronology is not equal this Chronology
"
      end

      operation 8455042 "ChronoLocalDateTimeImpl"
	cpp_inline private explicit_return_type ""
	nparams 2
	  param inout name "date" explicit_type "D"
	  param inout name "time" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param date  the date part of the date-time, not null
@param time  the time part of the date-time, not null
"
      end

      operation 8455170 "with"
	cpp_inline private return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 2
	  param inout name "newDate" type class_ref 1051394 // Temporal
	  param inout name "newTime" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date-time with the new date and time, checking
to see if a new object is in fact required.

@param newDate  the date of the new date-time, not null
@param newTime  the time of the new date-time, not null
@return the date-time, not null
"
      end

      operation 8455298 "toLocalDate"
	cpp_inline public explicit_return_type "D"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8455426 "toLocalTime"
	cpp_inline public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8455554 "isSupported"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8455682 "range"
	cpp_inline public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8455810 "get"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8455938 "getLong"
	cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8456066 "with"
	cpp_inline public return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8456194 "with"
	cpp_inline public return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8456322 "plus"
	cpp_inline public return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8456450 "plusDays"
	cpp_inline private return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8456578 "plusHours"
	cpp_inline private return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8456706 "plusMinutes"
	cpp_inline private return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8456834 "plusSeconds"
	cpp_inline package return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8456962 "plusNanos"
	cpp_inline private return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8457090 "plusWithOverflow"
	cpp_inline private return_type class_ref 1055106 // ChronoLocalDateTimeImpl
	nparams 5
	  param inout name "newDate" explicit_type "D"
	  param in name "hours" explicit_type "long"
	  param in name "minutes" explicit_type "long"
	  param in name "seconds" explicit_type "long"
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8457218 "atZone"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8457346 "until"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8457474 "writeReplace"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the ChronoLocalDateTime using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(2);              // identifies a ChronoLocalDateTime
 out.writeObject(toLocalDate());
 out.witeObject(toLocalTime());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8457602 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8457730 "writeExternal"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8457858 "readExternal"
	class_operation cpp_inline package return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8457986 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8458114 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8458242 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1055234 "ChronoPeriodImpl"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A period expressed in terms of a standard year-month-day calendar system.
<p>
This class is used by applications seeking to handle dates in non-ISO calendar systems.
For example, the Japanese, Minguo, Thai Buddhist and others.

@implSpec
This class is immutable nad thread-safe.

@since 1.8
"
      classrelation 3439874 // <realization>
	relation 3439874 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3439874 // <realization>
	  b parent class_ref 1052802 // ChronoPeriod
      end

      classrelation 3440002 // <realization>
	relation 3440002 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3440002 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1953666 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 57387258289L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " this class is only used by JDK chronology implementations and makes assumptions based on that fact

Serialization version.

"
      end

      classrelation 3440130 // SUPPORTED_UNITS (<unidirectional association>)
	relation 3440130 --->
	  a role_name "SUPPORTED_UNITS" init_value "
            Collections.unmodifiableList(Arrays.<TemporalUnit>asList(YEARS, MONTHS, DAYS))" class_relation const_relation private
	    comment "
The set of supported units.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TemporalUnit> ${name}${value};
"
	    classrelation_ref 3440130 // SUPPORTED_UNITS (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3440258 // chrono (<unidirectional association>)
	relation 3440258 --->
	  a role_name "chrono" const_relation private
	    comment "
The chronology.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3440258 // chrono (<unidirectional association>)
	  b parent class_ref 1052546 // Chronology
      end

      attribute 1953794 "years"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of years.

"
      end

      attribute 1953922 "months"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of months.

"
      end

      attribute 1954050 "days"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of days.

"
      end

      operation 8458370 "ChronoPeriodImpl"
	package explicit_return_type ""
	nparams 4
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param in name "years" explicit_type "int"
	  param in name "months" explicit_type "int"
	  param in name "days" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance.
"
      end

      operation 8458498 "get"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8458626 "getUnits"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TemporalUnit> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8458754 "getChronology"
	public return_type class_ref 1052546 // Chronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8458882 "isZero"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8459010 "isNegative"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8459138 "plus"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8459266 "minus"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8459394 "validateAmount"
	private return_type class_ref 1055234 // ChronoPeriodImpl
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ChronoPeriodImpl} from a temporal amount.

@param amount  the temporal amount to convert, not null
@return the period, not null
"
      end

      operation 8459522 "multipliedBy"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param in name "scalar" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8459650 "normalized"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8459778 "monthRange"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the range of months.

@return the month range, -1 if not fixed range
"
      end

      operation 8459906 "addTo"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------"
      end

      operation 8460034 "subtractFrom"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8460162 "validateChrono"
	private explicit_return_type "void"
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates that the temporal has the correct chronology.
"
      end

      operation 8460290 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8460418 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8460546 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8460674 "writeReplace"
	protected return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the Chronology using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
<pre>
 out.writeByte(12);  // identifies this as a ChronoPeriodImpl
 out.writeUTF(getId());  // the chronology
 out.writeInt(years);
 out.writeInt(months);
 out.writeInt(days);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8460802 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8460930 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8461058 "readExternal"
	class_operation package return_type class_ref 1055234 // ChronoPeriodImpl
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1055362 "ChronoZonedDateTimeImpl"
      visibility package 
      nformals 1
      formal name "D" type "" explicit_default_value ""
        extends class_ref 1052418 // ChronoLocalDate
      nactuals 1
      actual class class_ref 1053698 // ChronoZonedDateTime
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-time with a time-zone in the calendar neutral API.
<p>
{@code ZoneChronoDateTime} is an immutable representation of a date-time with a time-zone.
This class stores all date and time fields, to a precision of nanoseconds,
as well as a time-zone and zone offset.
<p>
The purpose of storing the time-zone is to distinguish the ambiguous case where
the local time-line overlaps, typically as a result of the end of daylight time.
Information about the local-time can be obtained using methods on the time-zone.

@implSpec
This class is immutable and thread-safe.

@serial Document the delegation of this class in the serialized-form specification.
@param <D> the concrete type for the date of this date-time
@since 1.8
"
      classrelation 3440386 // <realization>
	relation 3440386 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3440386 // <realization>
	  b parent class_ref 1053698 // ChronoZonedDateTime
      end

      classrelation 3440514 // <realization>
	relation 3440514 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3440514 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1954178 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5261813987200935591L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3440642 // dateTime (<unidirectional association>)
	relation 3440642 --->
	  a role_name "dateTime" const_relation private
	    comment "
The local date-time.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<D> ${name}${value};
"
	    classrelation_ref 3440642 // dateTime (<unidirectional association>)
	  b parent class_ref 1055106 // ChronoLocalDateTimeImpl
      end

      classrelation 3440770 // offset (<unidirectional association>)
	relation 3440770 --->
	  a role_name "offset" const_relation private
	    comment "
The zone offset.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3440770 // offset (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      classrelation 3440898 // zone (<unidirectional association>)
	relation 3440898 --->
	  a role_name "zone" const_relation private
	    comment "
The zone ID.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3440898 // zone (<unidirectional association>)
	  b parent class_ref 1049730 // ZoneId
      end

      operation 8461186 "ofBest"
	class_operation cpp_inline package return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 3
	  param inout name "localDateTime" type class_ref 1055106 // ChronoLocalDateTimeImpl
	  param inout name "zone" type class_ref 1049730 // ZoneId
	  param inout name "preferredOffset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends ChronoLocalDate> ${type}<R> ${name}${(}${t0}<R> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance from a local date-time using the preferred offset if possible.

@param localDateTime  the local date-time, not null
@param zone  the zone identifier, not null
@param preferredOffset  the zone offset, null if no preference
@return the zoned date-time, not null
"
      end

      operation 8461314 "ofInstant"
	class_operation cpp_inline package return_type class_ref 1055362 // ChronoZonedDateTimeImpl
	nparams 3
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance from an instant using the specified time-zone.

@param chrono  the chronology, not null
@param instant  the instant, not null
@param zone  the zone identifier, not null
@return the zoned date-time, not null
"
      end

      operation 8461442 "create"
	cpp_inline private return_type class_ref 1055362 // ChronoZonedDateTimeImpl
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Obtains an instance from an {@code Instant}.

@param instant  the instant to create the date-time from, not null
@param zone  the time-zone to use, validated not null
@return the zoned date-time, validated not null
"
      end

      operation 8461570 "ensureValid"
	class_operation cpp_inline package return_type class_ref 1055362 // ChronoZonedDateTimeImpl
	nparams 2
	  param inout name "chrono" type class_ref 1052546 // Chronology
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends ChronoLocalDate> ${type}<R> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Casts the {@code Temporal} to {@code ChronoZonedDateTimeImpl} ensuring it bas the specified chronology.

@param chrono  the chronology to check for, not null
@param temporal  a date-time to cast, not null
@return the date-time checked and cast to {@code ChronoZonedDateTimeImpl}, not null
@throws ClassCastException if the date-time cannot be cast to ChronoZonedDateTimeImpl
 or the chronology is not equal this Chronology
"
      end

      operation 8461698 "ChronoZonedDateTimeImpl"
	cpp_inline private explicit_return_type ""
	nparams 3
	  param inout name "dateTime" type class_ref 1055106 // ChronoLocalDateTimeImpl
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<D> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param dateTime  the date-time, not null
@param offset  the zone offset, not null
@param zone  the zone ID, not null
"
      end

      operation 8461826 "getOffset"
	cpp_inline public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8461954 "withEarlierOffsetAtOverlap"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8462082 "withLaterOffsetAtOverlap"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8462210 "toLocalDateTime"
	cpp_inline public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8462338 "getZone"
	cpp_inline public return_type class_ref 1049730 // ZoneId
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8462466 "withZoneSameLocal"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8462594 "withZoneSameInstant"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8462722 "isSupported"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8462850 "with"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8462978 "plus"
	cpp_inline public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<D> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8463106 "until"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8463234 "writeReplace"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the ChronoZonedDateTime using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(3);                  // identifies a ChronoZonedDateTime
 out.writeObject(toLocalDateTime());
 out.writeObject(getOffset());
 out.writeObject(getZone());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8463362 "readObject"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8463490 "writeExternal"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8463618 "readExternal"
	class_operation cpp_inline package return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8463746 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------"
      end

      operation 8463874 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8464002 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1055490 "HijrahChronology"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Hijrah calendar is a lunar calendar supporting Islamic calendars.
<p>
The HijrahChronology follows the rules of the Hijrah calendar system. The Hijrah
calendar has several variants based on differences in when the new moon is
determined to have occurred and where the observation is made.
In some variants the length of each month is
computed algorithmically from the astronomical data for the moon and earth and
in others the length of the month is determined by an authorized sighting
of the new moon. For the algorithmically based calendars the calendar
can project into the future.
For sighting based calendars only historical data from past
sightings is available.
<p>
The length of each month is 29 or 30 days.
Ordinary years have 354 days; leap years have 355 days.

<p>
CLDR and LDML identify variants:
<table cellpadding=\"2\" summary=\"Variants of Hijrah Calendars\">
<thead>
<tr class=\"tableSubHeadingColor\">
<th class=\"colFirst\" align=\"left\" >Chronology ID</th>
<th class=\"colFirst\" align=\"left\" >Calendar Type</th>
<th class=\"colFirst\" align=\"left\" >Locale extension, see {@link java.util.Locale}</th>
<th class=\"colLast\" align=\"left\" >Description</th>
</tr>
</thead>
<tbody>
<tr class=\"altColor\">
<td>Hijrah-umalqura</td>
<td>islamic-umalqura</td>
<td>ca-islamic-umalqura</td>
<td>Islamic - Umm Al-Qura calendar of Saudi Arabia</td>
</tr>
</tbody>
</table>
<p>Additional variants may be available through {@link Chronology#getAvailableChronologies()}.

<p>Example</p>
<p>
Selecting the chronology from the locale uses {@link Chronology#ofLocale}
to find the Chronology based on Locale supported BCP 47 extension mechanism
to request a specific calendar (\"ca\"). For example,
</p>
<pre>
     Locale locale = Locale.forLanguageTag(\"en-US-u-ca-islamic-umalqura\");
     Chronology chrono = Chronology.ofLocale(locale);
</pre>

@implSpec
This class is immutable and thread-safe.

@implNote
Each Hijrah variant is configured individually. Each variant is defined by a
property resource that defines the {@code ID}, the {@code calendar type},
the start of the calendar, the alignment with the
ISO calendar, and the length of each month for a range of years.
The variants are identified in the {@code calendars.properties} file.
The new properties are prefixed with {@code \"calendars.hijrah.\"}:
<table cellpadding=\"2\" border=\"0\" summary=\"Configuration of Hijrah Calendar Variants\">
<thead>
<tr class=\"tableSubHeadingColor\">
<th class=\"colFirst\" align=\"left\">Property Name</th>
<th class=\"colFirst\" align=\"left\">Property value</th>
<th class=\"colLast\" align=\"left\">Description </th>
</tr>
</thead>
<tbody>
<tr class=\"altColor\">
<td>calendars.hijrah.{ID}</td>
<td>The property resource defining the {@code {ID}} variant</td>
<td>The property resource is located with the {@code calendars.properties} file</td>
</tr>
<tr class=\"rowColor\">
<td>calendars.hijrah.{ID}.type</td>
<td>The calendar type</td>
<td>LDML defines the calendar type names</td>
</tr>
</tbody>
</table>
<p>
The Hijrah property resource is a set of properties that describe the calendar.
The syntax is defined by {@code java.util.Properties#load(Reader)}.
<table cellpadding=\"2\" summary=\"Configuration of Hijrah Calendar\">
<thead>
<tr class=\"tableSubHeadingColor\">
<th class=\"colFirst\" align=\"left\" > Property Name</th>
<th class=\"colFirst\" align=\"left\" > Property value</th>
<th class=\"colLast\" align=\"left\" > Description </th>
</tr>
</thead>
<tbody>
<tr class=\"altColor\">
<td>id</td>
<td>Chronology Id, for example, \"Hijrah-umalqura\"</td>
<td>The Id of the calendar in common usage</td>
</tr>
<tr class=\"rowColor\">
<td>type</td>
<td>Calendar type, for example, \"islamic-umalqura\"</td>
<td>LDML defines the calendar types</td>
</tr>
<tr class=\"altColor\">
<td>version</td>
<td>Version, for example: \"1.8.0_1\"</td>
<td>The version of the Hijrah variant data</td>
</tr>
<tr class=\"rowColor\">
<td>iso-start</td>
<td>ISO start date, formatted as {@code yyyy-MM-dd}, for example: \"1900-04-30\"</td>
<td>The ISO date of the first day of the minimum Hijrah year.</td>
</tr>
<tr class=\"altColor\">
<td>yyyy - a numeric 4 digit year, for example \"1434\"</td>
<td>The value is a sequence of 12 month lengths,
for example: \"29 30 29 30 29 30 30 30 29 30 29 29\"</td>
<td>The lengths of the 12 months of the year separated by whitespace.
A numeric year property must be present for every year without any gaps.
The month lengths must be between 29-32 inclusive.
</td>
</tr>
</tbody>
</table>

@since 1.8
"
      classrelation 3441282 // <generalisation>
	relation 3441282 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3441282 // <generalisation>
	  b parent class_ref 1054594 // AbstractChronology
      end

      classrelation 3441410 // <realization>
	relation 3441410 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3441410 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3441538 // typeId (<unidirectional association>)
	relation 3441538 --->
	  a role_name "typeId" const_relation private
	    comment "
The Hijrah Calendar id.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3441538 // typeId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3441666 // calendarType (<unidirectional association>)
	relation 3441666 --->
	  a role_name "calendarType" const_relation private
	    comment "
The Hijrah calendarType.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3441666 // calendarType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1954306 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3127340209035924785L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3441794 // INSTANCE (<unidirectional association>)
	relation 3441794 --->
	  a role_name "INSTANCE" class_relation const_relation public
	    comment "
Singleton instance of the Islamic Umm Al-Qura calendar of Saudi Arabia.
Other Hijrah chronology variants may be available from
{@link Chronology#getAvailableChronologies}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3441794 // INSTANCE (<unidirectional association>)
	  b parent class_ref 1055490 // HijrahChronology
      end

      attribute 1954434 "initComplete"
	volatile private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag to indicate the initialization of configuration data is complete.
@see #checkCalendarInit()

"
      end

      attribute 1954562 "hijrahEpochMonthStartDays"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Array of epoch days indexed by Hijrah Epoch month.
Computed by {@link #loadCalendarData}.

"
      end

      attribute 1954690 "minEpochDay"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum epoch day of this Hijrah calendar.
Computed by {@link #loadCalendarData}.

"
      end

      attribute 1954818 "maxEpochDay"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum epoch day for which calendar data is available.
Computed by {@link #loadCalendarData}.

"
      end

      attribute 1954946 "hijrahStartEpochMonth"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum epoch month.
Computed by {@link #loadCalendarData}.

"
      end

      attribute 1955074 "minMonthLength"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum length of a month.
Computed by {@link #createEpochMonths}.

"
      end

      attribute 1955202 "maxMonthLength"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum length of a month.
Computed by {@link #createEpochMonths}.

"
      end

      attribute 1955330 "minYearLength"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum length of a year in days.
Computed by {@link #createEpochMonths}.

"
      end

      attribute 1955458 "maxYearLength"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum length of a year in days.
Computed by {@link #createEpochMonths}.

"
      end

      classrelation 3441922 // calendarProperties (<unidirectional association>)
	relation 3441922 --->
	  a role_name "calendarProperties" class_relation const_relation private
	    comment "
A reference to the properties stored in
${java.home}/lib/calendars.properties

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3441922 // calendarProperties (<unidirectional association>)
	  b parent class_ref 240130 // Properties
      end

      classrelation 3442050 // PROP_PREFIX (<unidirectional association>)
	relation 3442050 --->
	  a role_name "PROP_PREFIX" init_value " \"calendar.hijrah.\"" class_relation const_relation private
	    comment "
Prefix of property names for Hijrah calendar variants.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3442050 // PROP_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3442178 // PROP_TYPE_SUFFIX (<unidirectional association>)
	relation 3442178 --->
	  a role_name "PROP_TYPE_SUFFIX" init_value " \".type\"" class_relation const_relation private
	    comment "
Suffix of property names containing the calendar type of a variant.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3442178 // PROP_TYPE_SUFFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 168834 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            calendarProperties = sun.util.calendar.BaseCalendar.getCalendarProperties();
        } catch (IOException ioe) {
            throw new InternalError(\"Can't initialize lib/calendars.properties\", ioe);
        }

        try {
            INSTANCE = new HijrahChronology(\"Hijrah-umalqura\");
            // Register it by its aliases
            AbstractChronology.registerChrono(INSTANCE, \"Hijrah\");
            AbstractChronology.registerChrono(INSTANCE, \"islamic\");
        } catch (DateTimeException ex) {
            // Absence of Hijrah calendar is fatal to initializing this class.
            PlatformLogger logger = PlatformLogger.getLogger(\"java.time.chrono\");
            logger.severe(\"Unable to initialize Hijrah calendar: Hijrah-umalqura\", ex);
            throw new RuntimeException(\"Unable to initialize Hijrah-umalqura calendar\", ex.getCause());
        }
        registerVariants();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 8465154 "registerVariants"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For each Hijrah variant listed, create the HijrahChronology and register it.
Exceptions during initialization are logged but otherwise ignored.
"
      end

      operation 8465282 "HijrahChronology"
	private explicit_return_type ""
	nparams 1
	  param inout name "id" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1050498 // DateTimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a HijrahChronology for the named variant.
The resource and calendar type are retrieved from properties
in the {@code calendars.properties}.
The property names are {@code \"calendar.hijrah.\" + id}
and  {@code \"calendar.hijrah.\" + id + \".type\"}
@param id the id of the calendar
@throws DateTimeException if the calendar type is missing from the properties file.
@throws IllegalArgumentException if the id is empty
"
      end

      operation 8465410 "checkCalendarInit"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check and ensure that the calendar data has been initialized.
The initialization check is performed at the boundary between
public and package methods.  If a public calls another public method
a check is not necessary in the caller.
The constructors of HijrahDate call {@link #getEpochDay} or
{@link #getHijrahDateInfo} so every call from HijrahDate to a
HijrahChronology via package private methods has been checked.

@throws DateTimeException if the calendar data configuration is
    malformed or IOExceptions occur loading the data
"
      end

      operation 8465538 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the ID of the chronology.
<p>
The ID uniquely identifies the {@code Chronology}. It can be used to
lookup the {@code Chronology} using {@link Chronology#of(String)}.

@return the chronology ID, non-null
@see #getCalendarType()
"
      end

      operation 8465666 "getCalendarType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the calendar type of the Islamic calendar.
<p>
The calendar type is an identifier defined by the
<em>Unicode Locale Data Markup Language (LDML)</em> specification.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.

@return the calendar system type; non-null if the calendar has
   a standard type, otherwise null
@see #getId()
"
      end

      operation 8465794 "date"
	public return_type class_ref 1055618 // HijrahDate
	nparams 4
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a local date in Hijrah calendar system from the
era, year-of-era, month-of-year and day-of-month fields.

@param era  the Hijrah era, not null
@param yearOfEra  the year-of-era
@param month  the month-of-year
@param dayOfMonth  the day-of-month
@return the Hijrah local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not a {@code HijrahEra}
"
      end

      operation 8465922 "date"
	public return_type class_ref 1055618 // HijrahDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Hijrah calendar system from the
proleptic-year, month-of-year and day-of-month fields.

@param prolepticYear  the proleptic-year
@param month  the month-of-year
@param dayOfMonth  the day-of-month
@return the Hijrah local date, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8466050 "dateYearDay"
	public return_type class_ref 1055618 // HijrahDate
	nparams 3
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Hijrah calendar system from the
era, year-of-era and day-of-year fields.

@param era  the Hijrah era, not null
@param yearOfEra  the year-of-era
@param dayOfYear  the day-of-year
@return the Hijrah local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not a {@code HijrahEra}
"
      end

      operation 8466178 "dateYearDay"
	public return_type class_ref 1055618 // HijrahDate
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Hijrah calendar system from the
proleptic-year and day-of-year fields.

@param prolepticYear  the proleptic-year
@param dayOfYear  the day-of-year
@return the Hijrah local date, not null
@throws DateTimeException if the value of the year is out of range,
 or if the day-of-year is invalid for the year
"
      end

      operation 8466306 "dateEpochDay"
	public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "epochDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in the Hijrah calendar system from the epoch-day.

@param epochDay  the epoch day
@return the Hijrah local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8466434 "dateNow"
	public return_type class_ref 1055618 // HijrahDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8466562 "dateNow"
	public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8466690 "dateNow"
	public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8466818 "date"
	public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8466946 "localDateTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HijrahDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8467074 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HijrahDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8467202 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HijrahDate> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8467330 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "prolepticYear" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8467458 "prolepticYear"
	public explicit_return_type "int"
	nparams 2
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8467586 "eraOf"
	public return_type class_ref 1055746 // HijrahEra
	nparams 1
	  param in name "eraValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8467714 "eras"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Era> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8467842 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1054722 // ChronoField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8467970 "resolveDate"
	public return_type class_ref 1055618 // HijrahDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------
 override for return type"
      end

      operation 8468098 "checkValidYear"
	package explicit_return_type "int"
	nparams 1
	  param in name "prolepticYear" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Check the validity of a year.

@param prolepticYear the year to check
"
      end

      operation 8468226 "checkValidDayOfYear"
	package explicit_return_type "void"
	nparams 1
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8468354 "checkValidMonth"
	package explicit_return_type "void"
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8468482 "getHijrahDateInfo"
	package explicit_return_type "int"
	nparams 1
	  param in name "epochDay" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an array containing the Hijrah year, month and day
computed from the epoch day.

@param epochDay  the EpochDay
@return int[0] = YEAR, int[1] = MONTH, int[2] = DATE
"
      end

      operation 8468610 "getEpochDay"
	package explicit_return_type "long"
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "monthOfYear" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the epoch day computed from Hijrah year, month, and day.

@param prolepticYear the year to represent, 0-origin
@param monthOfYear the month-of-year to represent, 1-origin
@param dayOfMonth the day-of-month to represent, 1-origin
@return the epoch day
"
      end

      operation 8468738 "getDayOfYear"
	package explicit_return_type "int"
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns day of year for the year and month.

@param prolepticYear a proleptic year
@param month a month, 1-origin
@return the day of year, 1-origin
"
      end

      operation 8468866 "getMonthLength"
	package explicit_return_type "int"
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "monthOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns month length for the year and month.

@param prolepticYear a proleptic year
@param monthOfYear a month, 1-origin.
@return the length of the month
"
      end

      operation 8468994 "getYearLength"
	package explicit_return_type "int"
	nparams 1
	  param in name "prolepticYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns year length.
Note: The 12th month must exist in the data.

@param prolepticYear a proleptic year
@return year length in days
"
      end

      operation 8469122 "getMinimumYear"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the minimum supported Hijrah year.

@return the minimum
"
      end

      operation 8469250 "getMaximumYear"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the maximum supported Hijrah ear.

@return the minimum
"
      end

      operation 8469378 "getMaximumMonthLength"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns maximum day-of-month.

@return maximum day-of-month
"
      end

      operation 8469506 "getMinimumMonthLength"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns smallest maximum day-of-month.

@return smallest maximum day-of-month
"
      end

      operation 8469634 "getMaximumDayOfYear"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns maximum day-of-year.

@return maximum day-of-year
"
      end

      operation 8469762 "getSmallestMaximumDayOfYear"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns smallest maximum day-of-year.

@return smallest maximum day-of-year
"
      end

      operation 8469890 "epochDayToEpochMonth"
	private explicit_return_type "int"
	nparams 1
	  param in name "epochDay" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the epochMonth found by locating the epochDay in the table. The
epochMonth is the index in the table

@param epochDay
@return The index of the element of the start of the month containing the
epochDay.
"
      end

      operation 8470018 "epochMonthToYear"
	private explicit_return_type "int"
	nparams 1
	  param in name "epochMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the year computed from the epochMonth

@param epochMonth the epochMonth
@return the Hijrah Year
"
      end

      operation 8470146 "yearToEpochMonth"
	private explicit_return_type "int"
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the epochMonth for the Hijrah Year.

@param year the HijrahYear
@return the epochMonth for the beginning of the year.
"
      end

      operation 8470274 "epochMonthToMonth"
	private explicit_return_type "int"
	nparams 1
	  param in name "epochMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Hijrah month from the epochMonth.

@param epochMonth the epochMonth
@return the month of the Hijrah Year
"
      end

      operation 8470402 "epochMonthToEpochDay"
	private explicit_return_type "int"
	nparams 1
	  param in name "epochMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the epochDay for the start of the epochMonth.

@param epochMonth the epochMonth
@return the epochDay for the start of the epochMonth.
"
      end

      operation 8470530 "yearMonthToDayOfYear"
	private explicit_return_type "int"
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the day of year for the requested HijrahYear and month.

@param prolepticYear the Hijrah year
@param month the Hijrah month
@return the day of year for the start of the month of the year
"
      end

      operation 8470658 "epochMonthLength"
	private explicit_return_type "int"
	nparams 1
	  param in name "epochMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the epochMonth. It is computed from the start of
the following month minus the start of the requested month.

@param epochMonth the epochMonth; assumed to be within range
@return the length in days of the epochMonth
"
      end

      classrelation 3442306 // KEY_ID (<unidirectional association>)
	relation 3442306 --->
	  a role_name "KEY_ID" init_value " \"id\"" class_relation const_relation private
	    comment "-----------------------------------------------------------------------
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3442306 // KEY_ID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3442434 // KEY_TYPE (<unidirectional association>)
	relation 3442434 --->
	  a role_name "KEY_TYPE" init_value " \"type\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3442434 // KEY_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3442562 // KEY_VERSION (<unidirectional association>)
	relation 3442562 --->
	  a role_name "KEY_VERSION" init_value " \"version\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3442562 // KEY_VERSION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3442690 // KEY_ISO_START (<unidirectional association>)
	relation 3442690 --->
	  a role_name "KEY_ISO_START" init_value " \"iso-start\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3442690 // KEY_ISO_START (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8470786 "readConfigProperties"
	class_operation private return_type class_ref 240130 // Properties
	nparams 1
	  param in name "resource" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the configuration properties from the resource.
<p>
The default location of the variant configuration resource is:
<pre>
  \"$java.home/lib/\" + resource-name
</pre>

@param resource the name of the calendar property resource
@return a Properties containing the properties read from the resource.
@throws Exception if access to the property resource fails
"
      end

      operation 8470914 "loadCalendarData"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads and processes the Hijrah calendar properties file for this calendarType.
The starting Hijrah date and the corresponding ISO date are
extracted and used to calculate the epochDate offset.
The version number is identified and ignored.
Everything else is the data for a year with containing the length of each
of 12 months.

@throws DateTimeException if initialization of the calendar data from the
    resource fails
"
      end

      operation 8471042 "createEpochMonths"
	private explicit_return_type "int"
	nparams 4
	  param in name "epochDay" explicit_type "int"
	  param in name "minYear" explicit_type "int"
	  param in name "maxYear" explicit_type "int"
	  param inout name "years" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<Integer, int[]> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the map of year to month lengths ranging from minYear to maxYear
into a linear contiguous array of epochDays. The index is the hijrahMonth
computed from year and month and offset by minYear. The value of each
entry is the epochDay corresponding to the first day of the month.

@param minYear The minimum year for which data is provided
@param maxYear The maximum year for which data is provided
@param years a Map of year to the array of 12 month lengths
@return array of epochDays for each month from min to max
"
      end

      operation 8471170 "parseMonths"
	private explicit_return_type "int"
	nparams 1
	  param inout name "line" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the 12 months lengths from a property value for a specific year.

@param line the value of a year property
@return an array of int[12] containing the 12 month lengths
@throws IllegalArgumentException if the number of months is not 12
@throws NumberFormatException if the 12 tokens are not numbers
"
      end

      operation 8471298 "parseYMD"
	private explicit_return_type "int"
	nparams 1
	  param inout name "string" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse yyyy-MM-dd into a 3 element array [yyyy, mm, dd].

@param string the input string
@return the 3 element array with year, month, day
"
      end

      operation 8471426 "writeReplace"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the Chronology using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(1);     // identifies a Chronology
 out.writeUTF(getId());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8471554 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end
    end

    class 1055618 "HijrahDate"
      visibility public 
      nactuals 1
      actual class class_ref 1054978 // ChronoLocalDateImpl
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date in the Hijrah calendar system.
<p>
This date operates using one of several variants of the
{@linkplain HijrahChronology Hijrah calendar}.
<p>
The Hijrah calendar has a different total of days in a year than
Gregorian calendar, and the length of each month is based on the period
of a complete revolution of the moon around the earth
(as between successive new moons).
Refer to the {@link HijrahChronology} for details of supported variants.
<p>
Each HijrahDate is created bound to a particular HijrahChronology,
The same chronology is propagated to each HijrahDate computed from the date.
To use a different Hijrah variant, its HijrahChronology can be used
to create new HijrahDate instances.
Alternatively, the {@link #withVariant} method can be used to convert
to a new HijrahChronology.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code HijrahDate} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3442818 // <realization>
	relation 3442818 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3442818 // <realization>
	  b parent class_ref 1054978 // ChronoLocalDateImpl
      end

      classrelation 3442946 // <realization>
	relation 3442946 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3442946 // <realization>
	  b parent class_ref 1052418 // ChronoLocalDate
      end

      classrelation 3443074 // <realization>
	relation 3443074 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3443074 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1955586 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5207853542612002020L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3443202 // chrono (<unidirectional association>)
	relation 3443202 --->
	  a role_name "chrono" const_relation private
	    comment "
The Chronology of this HijrahDate.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3443202 // chrono (<unidirectional association>)
	  b parent class_ref 1055490 // HijrahChronology
      end

      attribute 1955714 "prolepticYear"
	const_attribute private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The proleptic year.

"
      end

      attribute 1955842 "monthOfYear"
	const_attribute private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The month-of-year.

"
      end

      attribute 1955970 "dayOfMonth"
	const_attribute private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The day-of-month.

"
      end

      operation 8471682 "of"
	class_operation package return_type class_ref 1055618 // HijrahDate
	nparams 4
	  param inout name "chrono" type class_ref 1055490 // HijrahChronology
	  param in name "prolepticYear" explicit_type "int"
	  param in name "monthOfYear" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Obtains an instance of {@code HijrahDate} from the Hijrah proleptic year,
month-of-year and day-of-month.

@param prolepticYear  the proleptic year to represent in the Hijrah calendar
@param monthOfYear  the month-of-year to represent, from 1 to 12
@param dayOfMonth  the day-of-month to represent, from 1 to 30
@return the Hijrah date, never null
@throws DateTimeException if the value of any field is out of range
"
      end

      operation 8471810 "ofEpochDay"
	class_operation package return_type class_ref 1055618 // HijrahDate
	nparams 2
	  param inout name "chrono" type class_ref 1055490 // HijrahChronology
	  param in name "epochDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a HijrahDate for the chronology and epochDay.
@param chrono The Hijrah chronology
@param epochDay the epoch day
@return a HijrahDate for the epoch day; non-null
"
      end

      operation 8471938 "now"
	class_operation public return_type class_ref 1055618 // HijrahDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar
in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current date using the system clock and default time-zone, not null
"
      end

      operation 8472066 "now"
	class_operation public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar
in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current date using the system clock, not null
"
      end

      operation 8472194 "now"
	class_operation public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current {@code HijrahDate} of the Islamic Umm Al-Qura calendar
from the specified clock.
<p>
This will query the specified clock to obtain the current date - today.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@linkplain Clock dependency injection}.

@param clock  the clock to use, not null
@return the current date, not null
@throws DateTimeException if the current date cannot be obtained
"
      end

      operation 8472322 "of"
	class_operation public return_type class_ref 1055618 // HijrahDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code HijrahDate} of the Islamic Umm Al-Qura calendar
from the proleptic-year, month-of-year and day-of-month fields.
<p>
This returns a {@code HijrahDate} with the specified fields.
The day must be valid for the year and month, otherwise an exception will be thrown.

@param prolepticYear  the Hijrah proleptic-year
@param month  the Hijrah month-of-year, from 1 to 12
@param dayOfMonth  the Hijrah day-of-month, from 1 to 30
@return the date in Hijrah calendar system, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8472450 "from"
	class_operation public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code HijrahDate} of the Islamic Umm Al-Qura calendar from a temporal object.
<p>
This obtains a date in the Hijrah calendar system based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code HijrahDate}.
<p>
The conversion typically uses the {@link ChronoField#EPOCH_DAY EPOCH_DAY}
field, which is standardized across calendar systems.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code HijrahDate::from}.

@param temporal  the temporal object to convert, not null
@return the date in Hijrah calendar system, not null
@throws DateTimeException if unable to convert to a {@code HijrahDate}
"
      end

      operation 8472578 "HijrahDate"
	private explicit_return_type ""
	nparams 4
	  param inout name "chrono" type class_ref 1055490 // HijrahChronology
	  param in name "prolepticYear" explicit_type "int"
	  param in name "monthOfYear" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructs an {@code HijrahDate} with the proleptic-year, month-of-year and
day-of-month fields.

@param chrono The chronology to create the date with
@param prolepticYear the proleptic year
@param monthOfYear the month of year
@param dayOfMonth the day of month
"
      end

      operation 8472706 "HijrahDate"
	private explicit_return_type ""
	nparams 2
	  param inout name "chrono" type class_ref 1055490 // HijrahChronology
	  param in name "epochDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance with the Epoch Day.

@param epochDay  the epochDay
"
      end

      operation 8472834 "getChronology"
	public return_type class_ref 1055490 // HijrahChronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the chronology of this date, which is the Hijrah calendar system.
<p>
The {@code Chronology} represents the calendar system in use.
The era and other fields in {@link ChronoField} are defined by the chronology.

@return the Hijrah chronology, not null
"
      end

      operation 8472962 "getEra"
	public return_type class_ref 1055746 // HijrahEra
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the era applicable at this date.
<p>
The Hijrah calendar system has one era, 'AH',
defined by {@link HijrahEra}.

@return the era applicable at this date, not null
"
      end

      operation 8473090 "lengthOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the length of the month represented by this date.
<p>
This returns the length of the month in days.
Month lengths in the Hijrah calendar system vary between 29 and 30 days.

@return the length of the month in days
"
      end

      operation 8473218 "lengthOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the length of the year represented by this date.
<p>
This returns the length of the year in days.
A Hijrah calendar system year is typically shorter than
that of the ISO calendar system.

@return the length of the year in days
"
      end

      operation 8473346 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8473474 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8473602 "getProlepticMonth"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473730 "with"
	public return_type class_ref 1055618 // HijrahDate
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8473858 "resolvePreviousValid"
	private return_type class_ref 1055618 // HijrahDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "day" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8473986 "with"
	public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException if unable to make the adjustment.
    For example, if the adjuster requires an ISO chronology
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8474114 "withVariant"
	public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "chronology" type class_ref 1055490 // HijrahChronology
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code HijrahDate} with the Chronology requested.
<p>
The year, month, and day are checked against the new requested
HijrahChronology.  If the chronology has a shorter month length
for the month, the day is reduced to be the last day of the month.

@param chronology the new HijrahChonology, non-null
@return a HijrahDate with the requested HijrahChronology, non-null
"
      end

      operation 8474242 "plus"
	public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8474370 "minus"
	public return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8474498 "toEpochDay"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8474626 "getDayOfYear"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-year field.
<p>
This method returns the primitive {@code int} value for the day-of-year.

@return the day-of-year
"
      end

      operation 8474754 "getDayOfWeek"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-week value.

@return the day-of-week; computed from the epochday
"
      end

      operation 8474882 "getEraValue"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Era of this date.

@return the Era of this date; computed from epochDay
"
      end

      operation 8475010 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the year is a leap year, according to the Hijrah calendar system rules.

@return true if this date is in a leap year
"
      end

      operation 8475138 "plusYears"
	package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8475266 "plusMonths"
	package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "monthsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8475394 "plusWeeks"
	package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "weeksToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8475522 "plusDays"
	package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8475650 "plus"
	public return_type class_ref 1055618 // HijrahDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8475778 "minus"
	public return_type class_ref 1055618 // HijrahDate
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8475906 "minusYears"
	package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8476034 "minusMonths"
	package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "monthsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8476162 "minusWeeks"
	package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "weeksToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8476290 "minusDays"
	package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param in name "daysToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8476418 "atTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "localTime" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<HijrahDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " for javadoc and covariant return type"
      end

      operation 8476546 "until"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "endDate" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8476674 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Compares this date to another date, including the chronology.
<p>
Compares this {@code HijrahDate} with another ensuring that the date is the same.
<p>
Only objects of type {@code HijrahDate} are compared, other types return false.
To compare the dates of two {@code TemporalAccessor} instances, including dates
in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.

@param obj  the object to check, null returns false
@return true if this is equal to the other date and the Chronologies are equal

 override for performance"
      end

      operation 8476802 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date.

@return a suitable hash code based only on the Chronology and the date

 override for performance"
      end

      operation 8476930 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8477058 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the object using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(6);                 // identifies a HijrahDate
 out.writeObject(chrono);          // the HijrahChronology variant
 out.writeInt(get(YEAR));
 out.writeByte(get(MONTH_OF_YEAR));
 out.writeByte(get(DAY_OF_MONTH));
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8477186 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8477314 "readExternal"
	class_operation package return_type class_ref 1055618 // HijrahDate
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1055746 "HijrahEra"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An era in the Hijrah calendar system.
<p>
The Hijrah calendar system has only one era covering the
proleptic years greater than zero.
<p>
<b>Do not use {@code ordinal()} to obtain the numeric representation of {@code HijrahEra}.
Use {@code getValue()} instead.</b>

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      classrelation 3443330 // <realization>
	relation 3443330 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3443330 // <realization>
	  b parent class_ref 1052674 // Era
      end

      attribute 1956098 "AH"
	public type class_ref 1055746 // HijrahEra
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the current era, 'Anno Hegirae',
which has the numeric value 1.
"
      end

      operation 8477442 "of"
	class_operation public return_type class_ref 1055746 // HijrahEra
	nparams 1
	  param in name "hijrahEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code HijrahEra} from an {@code int} value.
<p>
The current era, which is the only accepted value, has the value 1

@param hijrahEra  the era to represent, only 1 supported
@return the HijrahEra.AH singleton, not null
@throws DateTimeException if the value is invalid
"
      end

      operation 8477570 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the numeric era {@code int} value.
<p>
The era AH has the value 1.

@return the era value, 1 (AH)
"
      end

      operation 8477698 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This era is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code ERA} field returns the range.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.
<p>
The {@code ERA} field returns a range for the one valid Hijrah era.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the unit is not supported

 override as super would return range from 0 to 1"
      end
    end

    class 1055874 "IsoEra"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An era in the ISO calendar system.
<p>
The ISO-8601 standard does not define eras.
A definition has therefore been created with two eras - 'Current era' (CE) for
years on or after 0001-01-01 (ISO), and 'Before current era' (BCE) for years before that.

<table summary=\"ISO years and eras\" cellpadding=\"2\" cellspacing=\"3\" border=\"0\" >
<thead>
<tr class=\"tableSubHeadingColor\">
<th class=\"colFirst\" align=\"left\">year-of-era</th>
<th class=\"colFirst\" align=\"left\">era</th>
<th class=\"colLast\" align=\"left\">proleptic-year</th>
</tr>
</thead>
<tbody>
<tr class=\"rowColor\">
<td>2</td><td>CE</td><td>2</td>
</tr>
<tr class=\"altColor\">
<td>1</td><td>CE</td><td>1</td>
</tr>
<tr class=\"rowColor\">
<td>1</td><td>BCE</td><td>0</td>
</tr>
<tr class=\"altColor\">
<td>2</td><td>BCE</td><td>-1</td>
</tr>
</tbody>
</table>
<p>
<b>Do not use {@code ordinal()} to obtain the numeric representation of {@code IsoEra}.
Use {@code getValue()} instead.</b>

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      classrelation 3443842 // <realization>
	relation 3443842 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3443842 // <realization>
	  b parent class_ref 1052674 // Era
      end

      attribute 1956354 "BCE"
	public type class_ref 1055874 // IsoEra
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the era before the current one, 'Before Current Era',
which has the numeric value 0.

"
      end

      attribute 1956482 "CE"
	public type class_ref 1055874 // IsoEra
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the current era, 'Current Era',
which has the numeric value 1.
"
      end

      operation 8481282 "of"
	class_operation public return_type class_ref 1055874 // IsoEra
	nparams 1
	  param in name "isoEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code IsoEra} from an {@code int} value.
<p>
{@code IsoEra} is an enum representing the ISO eras of BCE/CE.
This factory allows the enum to be obtained from the {@code int} value.

@param isoEra  the BCE/CE value to represent, from 0 (BCE) to 1 (CE)
@return the era singleton, not null
@throws DateTimeException if the value is invalid
"
      end

      operation 8481410 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the numeric era {@code int} value.
<p>
The era BCE has the value 0, while the era CE has the value 1.

@return the era value, from 0 (BCE) to 1 (CE)
"
      end
    end

    class 1056002 "JapaneseChronology"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Japanese Imperial calendar system.
<p>
This chronology defines the rules of the Japanese Imperial calendar system.
This calendar system is primarily used in Japan.
The Japanese Imperial calendar system is the same as the ISO calendar system
apart from the era-based year numbering.
<p>
Japan introduced the Gregorian calendar starting with Meiji 6.
Only Meiji and later eras are supported;
dates before Meiji 6, January 1 are not supported.
<p>
The supported {@code ChronoField} instances are:
<ul>
<li>{@code DAY_OF_WEEK}
<li>{@code DAY_OF_MONTH}
<li>{@code DAY_OF_YEAR}
<li>{@code EPOCH_DAY}
<li>{@code MONTH_OF_YEAR}
<li>{@code PROLEPTIC_MONTH}
<li>{@code YEAR_OF_ERA}
<li>{@code YEAR}
<li>{@code ERA}
</ul>

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3443970 // <generalisation>
	relation 3443970 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3443970 // <generalisation>
	  b parent class_ref 1054594 // AbstractChronology
      end

      classrelation 3444098 // <realization>
	relation 3444098 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3444098 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1956610 "JCAL"
	class_attribute const_attribute package explicit_type "LocalGregorianCalendar"
	init_value "
        (LocalGregorianCalendar) CalendarSystem.forName(\"japanese\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3444226 // LOCALE (<unidirectional association>)
	relation 3444226 --->
	  a role_name "LOCALE" init_value " Locale.forLanguageTag(\"ja-JP-u-ca-japanese\")" class_relation const_relation package
	    comment " Locale for creating a JapaneseImpericalCalendar.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3444226 // LOCALE (<unidirectional association>)
	  b parent class_ref 312962 // Locale
      end

      classrelation 3444354 // INSTANCE (<unidirectional association>)
	relation 3444354 --->
	  a role_name "INSTANCE" init_value " new JapaneseChronology()" class_relation const_relation public
	    comment "
Singleton instance for Japanese chronology.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3444354 // INSTANCE (<unidirectional association>)
	  b parent class_ref 1056002 // JapaneseChronology
      end

      attribute 1956738 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 459996390165777884L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      operation 8481538 "JapaneseChronology"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Restricted constructor.
"
      end

      operation 8481666 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the ID of the chronology - 'Japanese'.
<p>
The ID uniquely identifies the {@code Chronology}.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.

@return the chronology ID - 'Japanese'
@see #getCalendarType()
"
      end

      operation 8481794 "getCalendarType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the calendar type of the underlying calendar system - 'japanese'.
<p>
The calendar type is an identifier defined by the
<em>Unicode Locale Data Markup Language (LDML)</em> specification.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.
It can also be used as part of a locale, accessible via
{@link Locale#getUnicodeLocaleType(String)} with the key 'ca'.

@return the calendar system type - 'japanese'
@see #getId()
"
      end

      operation 8481922 "date"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 4
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a local date in Japanese calendar system from the
era, year-of-era, month-of-year and day-of-month fields.
<p>
The Japanese month and day-of-month are the same as those in the
ISO calendar system. They are not reset when the era changes.
For example:
<pre>
 6th Jan Showa 64 = ISO 1989-01-06
 7th Jan Showa 64 = ISO 1989-01-07
 8th Jan Heisei 1 = ISO 1989-01-08
 9th Jan Heisei 1 = ISO 1989-01-09
</pre>

@param era  the Japanese era, not null
@param yearOfEra  the year-of-era
@param month  the month-of-year
@param dayOfMonth  the day-of-month
@return the Japanese local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not a {@code JapaneseEra}
"
      end

      operation 8482050 "date"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Japanese calendar system from the
proleptic-year, month-of-year and day-of-month fields.
<p>
The Japanese proleptic year, month and day-of-month are the same as those
in the ISO calendar system. They are not reset when the era changes.

@param prolepticYear  the proleptic-year
@param month  the month-of-year
@param dayOfMonth  the day-of-month
@return the Japanese local date, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8482178 "dateYearDay"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 3
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Japanese calendar system from the
era, year-of-era and day-of-year fields.
<p>
The day-of-year in this factory is expressed relative to the start of the year-of-era.
This definition changes the normal meaning of day-of-year only in those years
where the year-of-era is reset to one due to a change in the era.
For example:
<pre>
 6th Jan Showa 64 = day-of-year 6
 7th Jan Showa 64 = day-of-year 7
 8th Jan Heisei 1 = day-of-year 1
 9th Jan Heisei 1 = day-of-year 2
</pre>

@param era  the Japanese era, not null
@param yearOfEra  the year-of-era
@param dayOfYear  the day-of-year
@return the Japanese local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not a {@code JapaneseEra}
"
      end

      operation 8482306 "dateYearDay"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Japanese calendar system from the
proleptic-year and day-of-year fields.
<p>
The day-of-year in this factory is expressed relative to the start of the proleptic year.
The Japanese proleptic year and day-of-year are the same as those in the ISO calendar system.
They are not reset when the era changes.

@param prolepticYear  the proleptic-year
@param dayOfYear  the day-of-year
@return the Japanese local date, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8482434 "dateEpochDay"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "epochDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in the Japanese calendar system from the epoch-day.

@param epochDay  the epoch day
@return the Japanese local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8482562 "dateNow"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8482690 "dateNow"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8482818 "dateNow"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8482946 "date"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8483074 "localDateTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<JapaneseDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8483202 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<JapaneseDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8483330 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<JapaneseDate> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8483458 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "prolepticYear" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified year is a leap year.
<p>
Japanese calendar leap years occur exactly in line with ISO leap years.
This method does not validate the year passed in, and only has a
well-defined result for years in the supported range.

@param prolepticYear  the proleptic-year to check, not validated for range
@return true if the year is a leap year
"
      end

      operation 8483586 "prolepticYear"
	public explicit_return_type "int"
	nparams 2
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8483714 "eraOf"
	public return_type class_ref 1056258 // JapaneseEra
	nparams 1
	  param in name "eraValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the calendar system era object from the given numeric value.

See the description of each Era for the numeric values of:
{@link JapaneseEra#HEISEI}, {@link JapaneseEra#SHOWA},{@link JapaneseEra#TAISHO},
{@link JapaneseEra#MEIJI}), only Meiji and later eras are supported.

@param eraValue  the era value
@return the Japanese {@code Era} for the given numeric era value
@throws DateTimeException if {@code eraValue} is invalid
"
      end

      operation 8483842 "eras"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Era> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8483970 "getCurrentEra"
	package return_type class_ref 1056258 // JapaneseEra
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484098 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1054722 // ChronoField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8484226 "resolveDate"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------
 override for return type"
      end

      operation 8484354 "resolveYearOfEra"
	package return_type class_ref 1052418 // ChronoLocalDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " override for special Japanese behavior"
      end

      operation 8484482 "prolepticYearLenient"
	private explicit_return_type "int"
	nparams 2
	  param inout name "era" type class_ref 1056258 // JapaneseEra
	  param in name "yearOfEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484610 "resolveYMD"
	private return_type class_ref 1052418 // ChronoLocalDate
	nparams 4
	  param inout name "era" type class_ref 1056258 // JapaneseEra
	  param in name "yoe" explicit_type "int"
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<TemporalField,Long> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484738 "resolveYD"
	private return_type class_ref 1052418 // ChronoLocalDate
	nparams 4
	  param inout name "era" type class_ref 1056258 // JapaneseEra
	  param in name "yoe" explicit_type "int"
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<TemporalField,Long> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8484866 "writeReplace"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the Chronology using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(1);     // identifies a Chronology
 out.writeUTF(getId());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8484994 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end
    end

    class 1056130 "JapaneseDate"
      visibility public 
      nactuals 1
      actual class class_ref 1054978 // ChronoLocalDateImpl
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date in the Japanese Imperial calendar system.
<p>
This date operates using the {@linkplain JapaneseChronology Japanese Imperial calendar}.
This calendar system is primarily used in Japan.
<p>
The Japanese Imperial calendar system is the same as the ISO calendar system
apart from the era-based year numbering. The proleptic-year is defined to be
equal to the ISO proleptic-year.
<p>
Japan introduced the Gregorian calendar starting with Meiji 6.
Only Meiji and later eras are supported;
dates before Meiji 6, January 1 are not supported.
<p>
For example, the Japanese year \"Heisei 24\" corresponds to ISO year \"2012\".<br>
Calling {@code japaneseDate.get(YEAR_OF_ERA)} will return 24.<br>
Calling {@code japaneseDate.get(YEAR)} will return 2012.<br>
Calling {@code japaneseDate.get(ERA)} will return 2, corresponding to
{@code JapaneseChronology.ERA_HEISEI}.<br>

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code JapaneseDate} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3444482 // <realization>
	relation 3444482 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3444482 // <realization>
	  b parent class_ref 1054978 // ChronoLocalDateImpl
      end

      classrelation 3444610 // <realization>
	relation 3444610 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3444610 // <realization>
	  b parent class_ref 1052418 // ChronoLocalDate
      end

      classrelation 3444738 // <realization>
	relation 3444738 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3444738 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1956866 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -305327627230580483L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3444866 // isoDate (<unidirectional association>)
	relation 3444866 --->
	  a role_name "isoDate" const_relation private
	    comment "
The underlying ISO local date.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3444866 // isoDate (<unidirectional association>)
	  b parent class_ref 1040770 // LocalDate
      end

      classrelation 3444994 // era (<unidirectional association>)
	relation 3444994 --->
	  a role_name "era" private
	    comment "
The JapaneseEra of this date.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3444994 // era (<unidirectional association>)
	  b parent class_ref 1056258 // JapaneseEra
      end

      attribute 1956994 "yearOfEra"
	private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Japanese imperial calendar year of this date.

"
      end

      classrelation 3445122 // MEIJI_6_ISODATE (<unidirectional association>)
	relation 3445122 --->
	  a role_name "MEIJI_6_ISODATE" init_value " LocalDate.of(1873, 1, 1)" class_relation const_relation package
	    comment "
The first day supported by the JapaneseChronology is Meiji 6, January 1st.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3445122 // MEIJI_6_ISODATE (<unidirectional association>)
	  b parent class_ref 1040770 // LocalDate
      end

      operation 8485122 "now"
	class_operation public return_type class_ref 1056130 // JapaneseDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current {@code JapaneseDate} from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current date using the system clock and default time-zone, not null
"
      end

      operation 8485250 "now"
	class_operation public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current {@code JapaneseDate} from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current date using the system clock, not null
"
      end

      operation 8485378 "now"
	class_operation public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current {@code JapaneseDate} from the specified clock.
<p>
This will query the specified clock to obtain the current date - today.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@linkplain Clock dependency injection}.

@param clock  the clock to use, not null
@return the current date, not null
@throws DateTimeException if the current date cannot be obtained
"
      end

      operation 8485506 "of"
	class_operation public return_type class_ref 1056130 // JapaneseDate
	nparams 4
	  param inout name "era" type class_ref 1056258 // JapaneseEra
	  param in name "yearOfEra" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code JapaneseDate} representing a date in the Japanese calendar
system from the era, year-of-era, month-of-year and day-of-month fields.
<p>
This returns a {@code JapaneseDate} with the specified fields.
The day must be valid for the year and month, otherwise an exception will be thrown.
<p>
The Japanese month and day-of-month are the same as those in the
ISO calendar system. They are not reset when the era changes.
For example:
<pre>
 6th Jan Showa 64 = ISO 1989-01-06
 7th Jan Showa 64 = ISO 1989-01-07
 8th Jan Heisei 1 = ISO 1989-01-08
 9th Jan Heisei 1 = ISO 1989-01-09
</pre>

@param era  the Japanese era, not null
@param yearOfEra  the Japanese year-of-era
@param month  the Japanese month-of-year, from 1 to 12
@param dayOfMonth  the Japanese day-of-month, from 1 to 31
@return the date in Japanese calendar system, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year,
 or if the date is not a Japanese era
"
      end

      operation 8485634 "of"
	class_operation public return_type class_ref 1056130 // JapaneseDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code JapaneseDate} representing a date in the Japanese calendar
system from the proleptic-year, month-of-year and day-of-month fields.
<p>
This returns a {@code JapaneseDate} with the specified fields.
The day must be valid for the year and month, otherwise an exception will be thrown.
<p>
The Japanese proleptic year, month and day-of-month are the same as those
in the ISO calendar system. They are not reset when the era changes.

@param prolepticYear  the Japanese proleptic-year
@param month  the Japanese month-of-year, from 1 to 12
@param dayOfMonth  the Japanese day-of-month, from 1 to 31
@return the date in Japanese calendar system, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8485762 "ofYearDay"
	class_operation package return_type class_ref 1056130 // JapaneseDate
	nparams 3
	  param inout name "era" type class_ref 1056258 // JapaneseEra
	  param in name "yearOfEra" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code JapaneseDate} representing a date in the Japanese calendar
system from the era, year-of-era and day-of-year fields.
<p>
This returns a {@code JapaneseDate} with the specified fields.
The day must be valid for the year, otherwise an exception will be thrown.
<p>
The day-of-year in this factory is expressed relative to the start of the year-of-era.
This definition changes the normal meaning of day-of-year only in those years
where the year-of-era is reset to one due to a change in the era.
For example:
<pre>
 6th Jan Showa 64 = day-of-year 6
 7th Jan Showa 64 = day-of-year 7
 8th Jan Heisei 1 = day-of-year 1
 9th Jan Heisei 1 = day-of-year 2
</pre>

@param era  the Japanese era, not null
@param yearOfEra  the Japanese year-of-era
@param dayOfYear  the chronology day-of-year, from 1 to 366
@return the date in Japanese calendar system, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-year is invalid for the year
"
      end

      operation 8485890 "from"
	class_operation public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code JapaneseDate} from a temporal object.
<p>
This obtains a date in the Japanese calendar system based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code JapaneseDate}.
<p>
The conversion typically uses the {@link ChronoField#EPOCH_DAY EPOCH_DAY}
field, which is standardized across calendar systems.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code JapaneseDate::from}.

@param temporal  the temporal object to convert, not null
@return the date in Japanese calendar system, not null
@throws DateTimeException if unable to convert to a {@code JapaneseDate}
"
      end

      operation 8486018 "JapaneseDate"
	package explicit_return_type ""
	nparams 1
	  param inout name "isoDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates an instance from an ISO date.

@param isoDate  the standard local date, validated not null
"
      end

      operation 8486146 "JapaneseDate"
	package explicit_return_type ""
	nparams 3
	  param inout name "era" type class_ref 1056258 // JapaneseEra
	  param in name "year" explicit_type "int"
	  param inout name "isoDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code JapaneseDate}. This constructor does NOT validate the given parameters,
and {@code era} and {@code year} must agree with {@code isoDate}.

@param era  the era, validated not null
@param year  the year-of-era, validated
@param isoDate  the standard local date, validated not null
"
      end

      operation 8486274 "getChronology"
	public return_type class_ref 1056002 // JapaneseChronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the chronology of this date, which is the Japanese calendar system.
<p>
The {@code Chronology} represents the calendar system in use.
The era and other fields in {@link ChronoField} are defined by the chronology.

@return the Japanese chronology, not null
"
      end

      operation 8486402 "getEra"
	public return_type class_ref 1056258 // JapaneseEra
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the era applicable at this date.
<p>
The Japanese calendar system has multiple eras defined by {@link JapaneseEra}.

@return the era applicable at this date, not null
"
      end

      operation 8486530 "lengthOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the length of the month represented by this date.
<p>
This returns the length of the month in days.
Month lengths match those of the ISO calendar system.

@return the length of the month in days
"
      end

      operation 8486658 "lengthOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8486786 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this date can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range} and
{@link #get(TemporalField) get} methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code DAY_OF_WEEK}
<li>{@code DAY_OF_MONTH}
<li>{@code DAY_OF_YEAR}
<li>{@code EPOCH_DAY}
<li>{@code MONTH_OF_YEAR}
<li>{@code PROLEPTIC_MONTH}
<li>{@code YEAR_OF_ERA}
<li>{@code YEAR}
<li>{@code ERA}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this date, false if not
"
      end

      operation 8486914 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8487042 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8487170 "toPrivateJapaneseDate"
	class_operation private explicit_return_type "LocalGregorianCalendar.Date"
	nparams 1
	  param inout name "isoDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code LocalGregorianCalendar.Date} converted from the given {@code isoDate}.

@param isoDate  the local date, not null
@return a {@code LocalGregorianCalendar.Date}, not null
"
      end

      operation 8487298 "with"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8487426 "with"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8487554 "plus"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8487682 "minus"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8487810 "withYear"
	private return_type class_ref 1056130 // JapaneseDate
	nparams 2
	  param inout name "era" type class_ref 1056258 // JapaneseEra
	  param in name "yearOfEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date with the year altered.
<p>
This method changes the year of the date.
If the month-day is invalid for the year, then the previous valid day
will be selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param era  the era to set in the result, not null
@param yearOfEra  the year-of-era to set in the returned date
@return a {@code JapaneseDate} based on this date with the requested year, never null
@throws DateTimeException if {@code year} is invalid
"
      end

      operation 8487938 "withYear"
	private return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date with the year-of-era altered.
<p>
This method changes the year-of-era of the date.
If the month-day is invalid for the year, then the previous valid day
will be selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param year  the year to set in the returned date
@return a {@code JapaneseDate} based on this date with the requested year-of-era, never null
@throws DateTimeException if {@code year} is invalid
"
      end

      operation 8488066 "plusYears"
	package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8488194 "plusMonths"
	package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8488322 "plusWeeks"
	package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "weeksToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8488450 "plusDays"
	package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8488578 "plus"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8488706 "minus"
	public return_type class_ref 1056130 // JapaneseDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8488834 "minusYears"
	package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8488962 "minusMonths"
	package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "monthsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8489090 "minusWeeks"
	package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "weeksToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8489218 "minusDays"
	package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param in name "daysToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8489346 "with"
	private return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "newDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8489474 "atTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "localTime" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<JapaneseDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " for javadoc and covariant return type"
      end

      operation 8489602 "until"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "endDate" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8489730 "toEpochDay"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " override for performance"
      end

      operation 8489858 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Compares this date to another date, including the chronology.
<p>
Compares this {@code JapaneseDate} with another ensuring that the date is the same.
<p>
Only objects of type {@code JapaneseDate} are compared, other types return false.
To compare the dates of two {@code TemporalAccessor} instances, including dates
in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.

@param obj  the object to check, null returns false
@return true if this is equal to the other date

 override for performance"
      end

      operation 8489986 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date.

@return a suitable hash code based only on the Chronology and the date

 override for performance"
      end

      operation 8490114 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8490242 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the object using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(4);                 // identifies a JapaneseDate
 out.writeInt(get(YEAR));
 out.writeByte(get(MONTH_OF_YEAR));
 out.writeByte(get(DAY_OF_MONTH));
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8490370 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8490498 "readExternal"
	class_operation package return_type class_ref 1056130 // JapaneseDate
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1056258 "JapaneseEra"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An era in the Japanese Imperial calendar system.
<p>
This class defines the valid eras for the Japanese chronology.
Japan introduced the Gregorian calendar starting with Meiji 6.
Only Meiji and later eras are supported;
dates before Meiji 6, January 1 are not supported.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3445250 // <realization>
	relation 3445250 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3445250 // <realization>
	  b parent class_ref 1052674 // Era
      end

      classrelation 3445378 // <realization>
	relation 3445378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3445378 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1957122 "ERA_OFFSET"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The offset value to 0-based index from the era value.
 i.e., getValue() + ERA_OFFSET == 0-based index
"
      end

      attribute 1957250 "ERA_CONFIG"
	class_attribute const_attribute package explicit_type "sun.util.calendar.Era"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3445506 // MEIJI (<unidirectional association>)
	relation 3445506 --->
	  a role_name "MEIJI" init_value " new JapaneseEra(-1, LocalDate.of(1868, 1, 1))" class_relation const_relation public
	    comment "
The singleton instance for the 'Meiji' era (1868-01-01 - 1912-07-29)
which has the value -1.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3445506 // MEIJI (<unidirectional association>)
	  b parent class_ref 1056258 // JapaneseEra
      end

      classrelation 3445634 // TAISHO (<unidirectional association>)
	relation 3445634 --->
	  a role_name "TAISHO" init_value " new JapaneseEra(0, LocalDate.of(1912, 7, 30))" class_relation const_relation public
	    comment "
The singleton instance for the 'Taisho' era (1912-07-30 - 1926-12-24)
which has the value 0.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3445634 // TAISHO (<unidirectional association>)
	  b parent class_ref 1056258 // JapaneseEra
      end

      classrelation 3445762 // SHOWA (<unidirectional association>)
	relation 3445762 --->
	  a role_name "SHOWA" init_value " new JapaneseEra(1, LocalDate.of(1926, 12, 25))" class_relation const_relation public
	    comment "
The singleton instance for the 'Showa' era (1926-12-25 - 1989-01-07)
which has the value 1.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3445762 // SHOWA (<unidirectional association>)
	  b parent class_ref 1056258 // JapaneseEra
      end

      classrelation 3445890 // HEISEI (<unidirectional association>)
	relation 3445890 --->
	  a role_name "HEISEI" init_value " new JapaneseEra(2, LocalDate.of(1989, 1, 8))" class_relation const_relation public
	    comment "
The singleton instance for the 'Heisei' era (1989-01-08 - current)
which has the value 2.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3445890 // HEISEI (<unidirectional association>)
	  b parent class_ref 1056258 // JapaneseEra
      end

      attribute 1957378 "N_ERA_CONSTANTS"
	class_attribute const_attribute private explicit_type "int"
	init_value " HEISEI.getValue() + ERA_OFFSET"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " the number of defined JapaneseEra constants.
 There could be an extra era defined in its configuration.
"
      end

      attribute 1957506 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1466499369062886794L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3446018 // KNOWN_ERAS (<unidirectional association>)
	relation 3446018 --->
	  a role_name "KNOWN_ERAS" multiplicity "[]" class_relation const_relation private
	    comment " array for the singleton JapaneseEra instances
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3446018 // KNOWN_ERAS (<unidirectional association>)
	  b parent class_ref 1056258 // JapaneseEra
      end

      extra_member 168962 "initialization"
	
	cpp "" ""
	java "  static {
        ERA_CONFIG = JapaneseChronology.JCAL.getEras();

        KNOWN_ERAS = new JapaneseEra[ERA_CONFIG.length];
        KNOWN_ERAS[0] = MEIJI;
        KNOWN_ERAS[1] = TAISHO;
        KNOWN_ERAS[2] = SHOWA;
        KNOWN_ERAS[3] = HEISEI;
        for (int i = N_ERA_CONSTANTS; i < ERA_CONFIG.length; i++) {
            CalendarDate date = ERA_CONFIG[i].getSinceDate();
            LocalDate isoDate = LocalDate.of(date.getYear(), date.getMonth(), date.getDayOfMonth());
            KNOWN_ERAS[i] = new JapaneseEra(i - ERA_OFFSET + 1, isoDate);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1957634 "eraValue"
	const_attribute private explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The era value.
@serial

"
      end

      classrelation 3446146 // since (<unidirectional association>)
	relation 3446146 --->
	  a role_name "since" const_relation private
	    comment " the first day of the era
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3446146 // since (<unidirectional association>)
	  b parent class_ref 1040770 // LocalDate
      end

      operation 8490626 "JapaneseEra"
	private explicit_return_type ""
	nparams 2
	  param in name "eraValue" explicit_type "int"
	  param inout name "since" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance.

@param eraValue  the era value, validated
@param since  the date representing the first date of the era, validated not null
"
      end

      operation 8490754 "getPrivateEra"
	package explicit_return_type "sun.util.calendar.Era"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the Sun private Era instance corresponding to this {@code JapaneseEra}.

@return the Sun private Era instance for this {@code JapaneseEra}.
"
      end

      operation 8490882 "of"
	class_operation public return_type class_ref 1056258 // JapaneseEra
	nparams 1
	  param in name "japaneseEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code JapaneseEra} from an {@code int} value.
<p>
The {@link #SHOWA} era that contains 1970-01-01 (ISO calendar system) has the value 1
Later era is numbered 2 ({@link #HEISEI}). Earlier eras are numbered 0 ({@link #TAISHO}),
-1 ({@link #MEIJI}), only Meiji and later eras are supported.

@param japaneseEra  the era to represent
@return the {@code JapaneseEra} singleton, not null
@throws DateTimeException if the value is invalid
"
      end

      operation 8491010 "valueOf"
	class_operation public return_type class_ref 1056258 // JapaneseEra
	nparams 1
	  param inout name "japaneseEra" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code JapaneseEra} with the name.
<p>
The string must match exactly the name of the era.
(Extraneous whitespace characters are not permitted.)

@param japaneseEra  the japaneseEra name; non-null
@return the {@code JapaneseEra} singleton, never null
@throws IllegalArgumentException if there is not JapaneseEra with the specified name
"
      end

      operation 8491138 "values"
	class_operation public return_type class_ref 1056258 // JapaneseEra
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of JapaneseEras.
<p>
This method may be used to iterate over the JapaneseEras as follows:
<pre>
for (JapaneseEra c : JapaneseEra.values())
    System.out.println(c);
</pre>

@return an array of JapaneseEras
"
      end

      operation 8491266 "from"
	class_operation package return_type class_ref 1056258 // JapaneseEra
	nparams 1
	  param inout name "date" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code JapaneseEra} from a date.

@param date  the date, not null
@return the Era singleton, never null
"
      end

      operation 8491394 "toJapaneseEra"
	class_operation package return_type class_ref 1056258 // JapaneseEra
	nparams 1
	  param inout name "privateEra" explicit_type "sun.util.calendar.Era"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8491522 "privateEraFrom"
	class_operation package explicit_return_type "sun.util.calendar.Era"
	nparams 1
	  param inout name "isoDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8491650 "ordinal"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "eraValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index into the arrays from the Era value.
the eraValue is a valid Era number, -1..2.

@param eraValue  the era value to convert to the index
@return the index of the current Era
"
      end

      operation 8491778 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the numeric era {@code int} value.
<p>
The {@link #SHOWA} era that contains 1970-01-01 (ISO calendar system) has the value 1.
Later eras are numbered from 2 ({@link #HEISEI}).
Earlier eras are numbered 0 ({@link #TAISHO}), -1 ({@link #MEIJI})).

@return the era value
"
      end

      operation 8491906 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This era is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code ERA} field returns the range.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.
<p>
The range of valid Japanese eras can change over time due to the nature
of the Japanese calendar system.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the unit is not supported

 override as super would return range from 0 to 1"
      end

      operation 8492034 "getAbbreviation"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8492162 "getName"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8492290 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8492418 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8492546 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(5);        // identifies a JapaneseEra
 out.writeInt(getValue());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8492674 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8492802 "readExternal"
	class_operation package return_type class_ref 1056258 // JapaneseEra
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1056386 "MinguoChronology"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Minguo calendar system.
<p>
This chronology defines the rules of the Minguo calendar system.
This calendar system is primarily used in the Republic of China, often known as Taiwan.
Dates are aligned such that {@code 0001-01-01 (Minguo)} is {@code 1912-01-01 (ISO)}.
<p>
The fields are defined as follows:
<ul>
<li>era - There are two eras, the current 'Republic' (ERA_ROC) and the previous era (ERA_BEFORE_ROC).
<li>year-of-era - The year-of-era for the current era increases uniformly from the epoch at year one.
 For the previous era the year increases from one as time goes backwards.
 The value for the current era is equal to the ISO proleptic-year minus 1911.
<li>proleptic-year - The proleptic year is the same as the year-of-era for the
 current era. For the previous era, years have zero, then negative values.
 The value is equal to the ISO proleptic-year minus 1911.
<li>month-of-year - The Minguo month-of-year exactly matches ISO.
<li>day-of-month - The Minguo day-of-month exactly matches ISO.
<li>day-of-year - The Minguo day-of-year exactly matches ISO.
<li>leap-year - The Minguo leap-year pattern exactly matches ISO, such that the two calendars
 are never out of step.
</ul>

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3446274 // <generalisation>
	relation 3446274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3446274 // <generalisation>
	  b parent class_ref 1054594 // AbstractChronology
      end

      classrelation 3446402 // <realization>
	relation 3446402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3446402 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3446530 // INSTANCE (<unidirectional association>)
	relation 3446530 --->
	  a role_name "INSTANCE" init_value " new MinguoChronology()" class_relation const_relation public
	    comment "
Singleton instance for the Minguo chronology.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3446530 // INSTANCE (<unidirectional association>)
	  b parent class_ref 1056386 // MinguoChronology
      end

      attribute 1957762 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1039765215346859963L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1957890 "YEARS_DIFFERENCE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1911"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The difference in years between ISO and Minguo.

"
      end

      operation 8492930 "MinguoChronology"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restricted constructor.
"
      end

      operation 8493058 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the ID of the chronology - 'Minguo'.
<p>
The ID uniquely identifies the {@code Chronology}.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.

@return the chronology ID - 'Minguo'
@see #getCalendarType()
"
      end

      operation 8493186 "getCalendarType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the calendar type of the underlying calendar system - 'roc'.
<p>
The calendar type is an identifier defined by the
<em>Unicode Locale Data Markup Language (LDML)</em> specification.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.
It can also be used as part of a locale, accessible via
{@link Locale#getUnicodeLocaleType(String)} with the key 'ca'.

@return the calendar system type - 'roc'
@see #getId()
"
      end

      operation 8493314 "date"
	public return_type class_ref 1056514 // MinguoDate
	nparams 4
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a local date in Minguo calendar system from the
era, year-of-era, month-of-year and day-of-month fields.

@param era  the Minguo era, not null
@param yearOfEra  the year-of-era
@param month  the month-of-year
@param dayOfMonth  the day-of-month
@return the Minguo local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not a {@code MinguoEra}
"
      end

      operation 8493442 "date"
	public return_type class_ref 1056514 // MinguoDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Minguo calendar system from the
proleptic-year, month-of-year and day-of-month fields.

@param prolepticYear  the proleptic-year
@param month  the month-of-year
@param dayOfMonth  the day-of-month
@return the Minguo local date, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8493570 "dateYearDay"
	public return_type class_ref 1056514 // MinguoDate
	nparams 3
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Minguo calendar system from the
era, year-of-era and day-of-year fields.

@param era  the Minguo era, not null
@param yearOfEra  the year-of-era
@param dayOfYear  the day-of-year
@return the Minguo local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not a {@code MinguoEra}
"
      end

      operation 8493698 "dateYearDay"
	public return_type class_ref 1056514 // MinguoDate
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Minguo calendar system from the
proleptic-year and day-of-year fields.

@param prolepticYear  the proleptic-year
@param dayOfYear  the day-of-year
@return the Minguo local date, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8493826 "dateEpochDay"
	public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "epochDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in the Minguo calendar system from the epoch-day.

@param epochDay  the epoch day
@return the Minguo local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8493954 "dateNow"
	public return_type class_ref 1056514 // MinguoDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8494082 "dateNow"
	public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8494210 "dateNow"
	public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8494338 "date"
	public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8494466 "localDateTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MinguoDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8494594 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MinguoDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8494722 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MinguoDate> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8494850 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "prolepticYear" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified year is a leap year.
<p>
Minguo leap years occur exactly in line with ISO leap years.
This method does not validate the year passed in, and only has a
well-defined result for years in the supported range.

@param prolepticYear  the proleptic-year to check, not validated for range
@return true if the year is a leap year
"
      end

      operation 8494978 "prolepticYear"
	public explicit_return_type "int"
	nparams 2
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8495106 "eraOf"
	public return_type class_ref 1056642 // MinguoEra
	nparams 1
	  param in name "eraValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8495234 "eras"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Era> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8495362 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1054722 // ChronoField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8495490 "resolveDate"
	public return_type class_ref 1056514 // MinguoDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------
 override for return type"
      end

      operation 8495618 "writeReplace"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the Chronology using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(1);     // identifies a Chronology
 out.writeUTF(getId());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8495746 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end
    end

    class 1056514 "MinguoDate"
      visibility public 
      nactuals 1
      actual class class_ref 1054978 // ChronoLocalDateImpl
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date in the Minguo calendar system.
<p>
This date operates using the {@linkplain MinguoChronology Minguo calendar}.
This calendar system is primarily used in the Republic of China, often known as Taiwan.
Dates are aligned such that {@code 0001-01-01 (Minguo)} is {@code 1912-01-01 (ISO)}.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code MinguoDate} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3446658 // <realization>
	relation 3446658 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3446658 // <realization>
	  b parent class_ref 1054978 // ChronoLocalDateImpl
      end

      classrelation 3446786 // <realization>
	relation 3446786 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3446786 // <realization>
	  b parent class_ref 1052418 // ChronoLocalDate
      end

      classrelation 3446914 // <realization>
	relation 3446914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3446914 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1958018 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1300372329181994526L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3447042 // isoDate (<unidirectional association>)
	relation 3447042 --->
	  a role_name "isoDate" const_relation private
	    comment "
The underlying date.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3447042 // isoDate (<unidirectional association>)
	  b parent class_ref 1040770 // LocalDate
      end

      operation 8495874 "now"
	class_operation public return_type class_ref 1056514 // MinguoDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current {@code MinguoDate} from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current date using the system clock and default time-zone, not null
"
      end

      operation 8496002 "now"
	class_operation public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current {@code MinguoDate} from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current date using the system clock, not null
"
      end

      operation 8496130 "now"
	class_operation public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current {@code MinguoDate} from the specified clock.
<p>
This will query the specified clock to obtain the current date - today.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@linkplain Clock dependency injection}.

@param clock  the clock to use, not null
@return the current date, not null
@throws DateTimeException if the current date cannot be obtained
"
      end

      operation 8496258 "of"
	class_operation public return_type class_ref 1056514 // MinguoDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code MinguoDate} representing a date in the Minguo calendar
system from the proleptic-year, month-of-year and day-of-month fields.
<p>
This returns a {@code MinguoDate} with the specified fields.
The day must be valid for the year and month, otherwise an exception will be thrown.

@param prolepticYear  the Minguo proleptic-year
@param month  the Minguo month-of-year, from 1 to 12
@param dayOfMonth  the Minguo day-of-month, from 1 to 31
@return the date in Minguo calendar system, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8496386 "from"
	class_operation public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code MinguoDate} from a temporal object.
<p>
This obtains a date in the Minguo calendar system based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code MinguoDate}.
<p>
The conversion typically uses the {@link ChronoField#EPOCH_DAY EPOCH_DAY}
field, which is standardized across calendar systems.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code MinguoDate::from}.

@param temporal  the temporal object to convert, not null
@return the date in Minguo calendar system, not null
@throws DateTimeException if unable to convert to a {@code MinguoDate}
"
      end

      operation 8496514 "MinguoDate"
	package explicit_return_type ""
	nparams 1
	  param inout name "isoDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates an instance from an ISO date.

@param isoDate  the standard local date, validated not null
"
      end

      operation 8496642 "getChronology"
	public return_type class_ref 1056386 // MinguoChronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the chronology of this date, which is the Minguo calendar system.
<p>
The {@code Chronology} represents the calendar system in use.
The era and other fields in {@link ChronoField} are defined by the chronology.

@return the Minguo chronology, not null
"
      end

      operation 8496770 "getEra"
	public return_type class_ref 1056642 // MinguoEra
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the era applicable at this date.
<p>
The Minguo calendar system has two eras, 'ROC' and 'BEFORE_ROC',
defined by {@link MinguoEra}.

@return the era applicable at this date, not null
"
      end

      operation 8496898 "lengthOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the length of the month represented by this date.
<p>
This returns the length of the month in days.
Month lengths match those of the ISO calendar system.

@return the length of the month in days
"
      end

      operation 8497026 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8497154 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8497282 "getProlepticMonth"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8497410 "getProlepticYear"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8497538 "with"
	public return_type class_ref 1056514 // MinguoDate
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8497666 "with"
	public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8497794 "plus"
	public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8497922 "minus"
	public return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8498050 "plusYears"
	package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8498178 "plusMonths"
	package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8498306 "plusWeeks"
	package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "weeksToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8498434 "plusDays"
	package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8498562 "plus"
	public return_type class_ref 1056514 // MinguoDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8498690 "minus"
	public return_type class_ref 1056514 // MinguoDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8498818 "minusYears"
	package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8498946 "minusMonths"
	package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "monthsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8499074 "minusWeeks"
	package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "weeksToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8499202 "minusDays"
	package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param in name "daysToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8499330 "with"
	private return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "newDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8499458 "atTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "localTime" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MinguoDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " for javadoc and covariant return type"
      end

      operation 8499586 "until"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "endDate" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8499714 "toEpochDay"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " override for performance"
      end

      operation 8499842 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Compares this date to another date, including the chronology.
<p>
Compares this {@code MinguoDate} with another ensuring that the date is the same.
<p>
Only objects of type {@code MinguoDate} are compared, other types return false.
To compare the dates of two {@code TemporalAccessor} instances, including dates
in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.

@param obj  the object to check, null returns false
@return true if this is equal to the other date

 override for performance"
      end

      operation 8499970 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date.

@return a suitable hash code based only on the Chronology and the date

 override for performance"
      end

      operation 8500098 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8500226 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the object using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(8);                 // identifies a MinguoDate
 out.writeInt(get(YEAR));
 out.writeByte(get(MONTH_OF_YEAR));
 out.writeByte(get(DAY_OF_MONTH));
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8500354 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8500482 "readExternal"
	class_operation package return_type class_ref 1056514 // MinguoDate
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1056642 "MinguoEra"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An era in the Minguo calendar system.
<p>
The Minguo calendar system has two eras.
The current era, for years from 1 onwards, is known as the 'Republic of China' era.
All previous years, zero or earlier in the proleptic count or one and greater
in the year-of-era count, are part of the 'Before Republic of China' era.

<table summary=\"Minguo years and eras\" cellpadding=\"2\" cellspacing=\"3\" border=\"0\" >
<thead>
<tr class=\"tableSubHeadingColor\">
<th class=\"colFirst\" align=\"left\">year-of-era</th>
<th class=\"colFirst\" align=\"left\">era</th>
<th class=\"colFirst\" align=\"left\">proleptic-year</th>
<th class=\"colLast\" align=\"left\">ISO proleptic-year</th>
</tr>
</thead>
<tbody>
<tr class=\"rowColor\">
<td>2</td><td>ROC</td><td>2</td><td>1913</td>
</tr>
<tr class=\"altColor\">
<td>1</td><td>ROC</td><td>1</td><td>1912</td>
</tr>
<tr class=\"rowColor\">
<td>1</td><td>BEFORE_ROC</td><td>0</td><td>1911</td>
</tr>
<tr class=\"altColor\">
<td>2</td><td>BEFORE_ROC</td><td>-1</td><td>1910</td>
</tr>
</tbody>
</table>
<p>
<b>Do not use {@code ordinal()} to obtain the numeric representation of {@code MinguoEra}.
Use {@code getValue()} instead.</b>

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      classrelation 3447170 // <realization>
	relation 3447170 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3447170 // <realization>
	  b parent class_ref 1052674 // Era
      end

      attribute 1958146 "BEFORE_ROC"
	public type class_ref 1056642 // MinguoEra
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the era before the current one, 'Before Republic of China Era',
which has the numeric value 0.

"
      end

      attribute 1958274 "ROC"
	public type class_ref 1056642 // MinguoEra
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the current era, 'Republic of China Era',
which has the numeric value 1.
"
      end

      operation 8500610 "of"
	class_operation public return_type class_ref 1056642 // MinguoEra
	nparams 1
	  param in name "minguoEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code MinguoEra} from an {@code int} value.
<p>
{@code MinguoEra} is an enum representing the Minguo eras of BEFORE_ROC/ROC.
This factory allows the enum to be obtained from the {@code int} value.

@param minguoEra  the BEFORE_ROC/ROC value to represent, from 0 (BEFORE_ROC) to 1 (ROC)
@return the era singleton, not null
@throws DateTimeException if the value is invalid
"
      end

      operation 8500738 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the numeric era {@code int} value.
<p>
The era BEFORE_ROC has the value 0, while the era ROC has the value 1.

@return the era value, from 0 (BEFORE_ROC) to 1 (ROC)
"
      end
    end

    class 1056770 "Ser"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The shared serialization delegate for this package.

@implNote
This class wraps the object being serialized, and takes a byte representing the type of the class to
be serialized.  This byte can also be used for versioning the serialization format.  In this case another
byte flag would be used in order to specify an alternative version of the type format.
For example {@code CHRONO_TYPE_VERSION_2 = 21}
<p>
In order to serialize the object it writes its byte and then calls back to the appropriate class where
the serialization is performed.  In order to deserialize the object it read in the type byte, switching
in order to select which class to call back into.
<p>
The serialization format is determined on a per class basis.  In the case of field based classes each
of the fields is written out with an appropriate size format in descending order of the field's size.  For
example in the case of {@link LocalDate} year is written before month.  Composite classes, such as
{@link LocalDateTime} are serialized as one object.  Enum classes are serialized using the index of their
element.
<p>
This class is mutable and should be created once per serialization.

@serial include
@since 1.8
"
      classrelation 3447298 // <realization>
	relation 3447298 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3447298 // <realization>
	  b parent class_ref 172162 // Externalizable
      end

      attribute 1958402 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6103370247208168577L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1958530 "CHRONO_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1958658 "CHRONO_LOCAL_DATE_TIME_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1958786 "CHRONO_ZONE_DATE_TIME_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1958914 "JAPANESE_DATE_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1959042 "JAPANESE_ERA_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1959170 "HIJRAH_DATE_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1959298 "MINGUO_DATE_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1959426 "THAIBUDDHIST_DATE_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1959554 "CHRONO_PERIOD_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1959682 "type"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The type being serialized. 
"
      end

      classrelation 3447426 // object (<unidirectional association>)
	relation 3447426 --->
	  a role_name "object" private
	    comment " The object being serialized. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3447426 // object (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 8500866 "Ser"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for deserialization.
"
      end

      operation 8500994 "Ser"
	package explicit_return_type ""
	nparams 2
	  param in name "type" explicit_type "byte"
	  param inout name "object" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance for serialization.

@param type  the type
@param object  the object
"
      end

      operation 8501122 "writeExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Implements the {@code Externalizable} interface to write the object.
@serialData
Each serializable class is mapped to a type that is the first byte
in the stream.  Refer to each class {@code writeReplace}
serialized form for the value of the type and sequence of values for the type.
<ul>
<li><a href=\"../../../serialized-form.html#java.time.chrono.HijrahChronology\">HijrahChronology.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.IsoChronology\">IsoChronology.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.JapaneseChronology\">JapaneseChronology.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.MinguoChronology\">MinguoChronology.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.ThaiBuddhistChronology\">ThaiBuddhistChronology.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.ChronoLocalDateTimeImpl\">ChronoLocalDateTime.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.ChronoZonedDateTimeImpl\">ChronoZonedDateTime.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.JapaneseDate\">JapaneseDate.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.JapaneseEra\">JapaneseEra.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.HijrahDate\">HijrahDate.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.MinguoDate\">MinguoDate.writeReplace</a>
<li><a href=\"../../../serialized-form.html#java.time.chrono.ThaiBuddhistDate\">ThaiBuddhistDate.writeReplace</a>
</ul>

@param out  the data stream to write to, not null
"
      end

      operation 8501250 "writeInternal"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "type" explicit_type "byte"
	  param inout name "object" type class_ref 129538 // Object
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8501378 "readExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Implements the {@code Externalizable} interface to read the object.
@serialData
The streamed type and parameters defined by the type's {@code writeReplace}
method are read and passed to the corresponding static factory for the type
to create a new instance.  That instance is returned as the de-serialized
{@code Ser} object.

<ul>
<li><a href=\"../../../serialized-form.html#java.time.chrono.HijrahChronology\">HijrahChronology</a> - Chronology.of(id)
<li><a href=\"../../../serialized-form.html#java.time.chrono.IsoChronology\">IsoChronology</a> - Chronology.of(id)
<li><a href=\"../../../serialized-form.html#java.time.chrono.JapaneseChronology\">JapaneseChronology</a> - Chronology.of(id)
<li><a href=\"../../../serialized-form.html#java.time.chrono.MinguoChronology\">MinguoChronology</a> - Chronology.of(id)
<li><a href=\"../../../serialized-form.html#java.time.chrono.ThaiBuddhistChronology\">ThaiBuddhistChronology</a> - Chronology.of(id)
<li><a href=\"../../../serialized-form.html#java.time.chrono.ChronoLocalDateTimeImpl\">ChronoLocalDateTime</a> - date.atTime(time)
<li><a href=\"../../../serialized-form.html#java.time.chrono.ChronoZonedDateTimeImpl\">ChronoZonedDateTime</a> - dateTime.atZone(offset).withZoneSameLocal(zone)
<li><a href=\"../../../serialized-form.html#java.time.chrono.JapaneseDate\">JapaneseDate</a> - JapaneseChronology.INSTANCE.date(year, month, dayOfMonth)
<li><a href=\"../../../serialized-form.html#java.time.chrono.JapaneseEra\">JapaneseEra</a> - JapaneseEra.of(eraValue)
<li><a href=\"../../../serialized-form.html#java.time.chrono.HijrahDate\">HijrahDate</a> - HijrahChronology chrono.date(year, month, dayOfMonth)
<li><a href=\"../../../serialized-form.html#java.time.chrono.MinguoDate\">MinguoDate</a> - MinguoChronology.INSTANCE.date(year, month, dayOfMonth)
<li><a href=\"../../../serialized-form.html#java.time.chrono.ThaiBuddhistDate\">ThaiBuddhistDate</a> - ThaiBuddhistChronology.INSTANCE.date(year, month, dayOfMonth)
</ul>

@param in  the data stream to read from, not null
"
      end

      operation 8501506 "read"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8501634 "readInternal"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param in name "type" explicit_type "byte"
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8501762 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the object that will replace this one.

@return the read object, should never be null
"
      end
    end

    class 1056898 "ThaiBuddhistChronology"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Thai Buddhist calendar system.
<p>
This chronology defines the rules of the Thai Buddhist calendar system.
This calendar system is primarily used in Thailand.
Dates are aligned such that {@code 2484-01-01 (Buddhist)} is {@code 1941-01-01 (ISO)}.
<p>
The fields are defined as follows:
<ul>
<li>era - There are two eras, the current 'Buddhist' (ERA_BE) and the previous era (ERA_BEFORE_BE).
<li>year-of-era - The year-of-era for the current era increases uniformly from the epoch at year one.
 For the previous era the year increases from one as time goes backwards.
 The value for the current era is equal to the ISO proleptic-year plus 543.
<li>proleptic-year - The proleptic year is the same as the year-of-era for the
 current era. For the previous era, years have zero, then negative values.
 The value is equal to the ISO proleptic-year plus 543.
<li>month-of-year - The ThaiBuddhist month-of-year exactly matches ISO.
<li>day-of-month - The ThaiBuddhist day-of-month exactly matches ISO.
<li>day-of-year - The ThaiBuddhist day-of-year exactly matches ISO.
<li>leap-year - The ThaiBuddhist leap-year pattern exactly matches ISO, such that the two calendars
 are never out of step.
</ul>

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3447554 // <generalisation>
	relation 3447554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3447554 // <generalisation>
	  b parent class_ref 1054594 // AbstractChronology
      end

      classrelation 3447682 // <realization>
	relation 3447682 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3447682 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3447810 // INSTANCE (<unidirectional association>)
	relation 3447810 --->
	  a role_name "INSTANCE" init_value " new ThaiBuddhistChronology()" class_relation const_relation public
	    comment "
Singleton instance of the Buddhist chronology.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3447810 // INSTANCE (<unidirectional association>)
	  b parent class_ref 1056898 // ThaiBuddhistChronology
      end

      attribute 1959810 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2775954514031616474L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1959938 "YEARS_DIFFERENCE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 543"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Containing the offset to add to the ISO year.

"
      end

      classrelation 3447938 // ERA_NARROW_NAMES (<unidirectional association>)
	relation 3447938 --->
	  a role_name "ERA_NARROW_NAMES" init_value " new HashMap<>()" class_relation const_relation private
	    comment "
Narrow names for eras.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String[]> ${name}${value};
"
	    classrelation_ref 3447938 // ERA_NARROW_NAMES (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      classrelation 3448066 // ERA_SHORT_NAMES (<unidirectional association>)
	relation 3448066 --->
	  a role_name "ERA_SHORT_NAMES" init_value " new HashMap<>()" class_relation const_relation private
	    comment "
Short names for eras.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String[]> ${name}${value};
"
	    classrelation_ref 3448066 // ERA_SHORT_NAMES (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      classrelation 3448194 // ERA_FULL_NAMES (<unidirectional association>)
	relation 3448194 --->
	  a role_name "ERA_FULL_NAMES" init_value " new HashMap<>()" class_relation const_relation private
	    comment "
Full names for eras.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String[]> ${name}${value};
"
	    classrelation_ref 3448194 // ERA_FULL_NAMES (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      classrelation 3448322 // FALLBACK_LANGUAGE (<unidirectional association>)
	relation 3448322 --->
	  a role_name "FALLBACK_LANGUAGE" init_value " \"en\"" class_relation const_relation private
	    comment "
Fallback language for the era names.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3448322 // FALLBACK_LANGUAGE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3448450 // TARGET_LANGUAGE (<unidirectional association>)
	relation 3448450 --->
	  a role_name "TARGET_LANGUAGE" init_value " \"th\"" class_relation const_relation private
	    comment "
Language that has the era names.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3448450 // TARGET_LANGUAGE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 169090 "initialization"
	
	cpp "" ""
	java "  static {
        ERA_NARROW_NAMES.put(FALLBACK_LANGUAGE, new String[]{\"BB\", \"BE\"});
        ERA_NARROW_NAMES.put(TARGET_LANGUAGE, new String[]{\"BB\", \"BE\"});
        ERA_SHORT_NAMES.put(FALLBACK_LANGUAGE, new String[]{\"B.B.\", \"B.E.\"});
        ERA_SHORT_NAMES.put(TARGET_LANGUAGE,
                new String[]{\"\\u0e1e.\\u0e28.\",
                \"\\u0e1b\\u0e35\\u0e01\\u0e48\\u0e2d\\u0e19\\u0e04\\u0e23\\u0e34\\u0e2a\\u0e15\\u0e4c\\u0e01\\u0e32\\u0e25\\u0e17\\u0e35\\u0e48\"});
        ERA_FULL_NAMES.put(FALLBACK_LANGUAGE, new String[]{\"Before Buddhist\", \"Budhhist Era\"});
        ERA_FULL_NAMES.put(TARGET_LANGUAGE,
                new String[]{\"\\u0e1e\\u0e38\\u0e17\\u0e18\\u0e28\\u0e31\\u0e01\\u0e23\\u0e32\\u0e0a\",
                \"\\u0e1b\\u0e35\\u0e01\\u0e48\\u0e2d\\u0e19\\u0e04\\u0e23\\u0e34\\u0e2a\\u0e15\\u0e4c\\u0e01\\u0e32\\u0e25\\u0e17\\u0e35\\u0e48\"});
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 8501890 "ThaiBuddhistChronology"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restricted constructor.
"
      end

      operation 8502018 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the ID of the chronology - 'ThaiBuddhist'.
<p>
The ID uniquely identifies the {@code Chronology}.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.

@return the chronology ID - 'ThaiBuddhist'
@see #getCalendarType()
"
      end

      operation 8502146 "getCalendarType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the calendar type of the underlying calendar system - 'buddhist'.
<p>
The calendar type is an identifier defined by the
<em>Unicode Locale Data Markup Language (LDML)</em> specification.
It can be used to lookup the {@code Chronology} using {@link Chronology#of(String)}.
It can also be used as part of a locale, accessible via
{@link Locale#getUnicodeLocaleType(String)} with the key 'ca'.

@return the calendar system type - 'buddhist'
@see #getId()
"
      end

      operation 8502274 "date"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 4
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a local date in Thai Buddhist calendar system from the
era, year-of-era, month-of-year and day-of-month fields.

@param era  the Thai Buddhist era, not null
@param yearOfEra  the year-of-era
@param month  the month-of-year
@param dayOfMonth  the day-of-month
@return the Thai Buddhist local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not a {@code ThaiBuddhistEra}
"
      end

      operation 8502402 "date"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Thai Buddhist calendar system from the
proleptic-year, month-of-year and day-of-month fields.

@param prolepticYear  the proleptic-year
@param month  the month-of-year
@param dayOfMonth  the day-of-month
@return the Thai Buddhist local date, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8502530 "dateYearDay"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 3
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Thai Buddhist calendar system from the
era, year-of-era and day-of-year fields.

@param era  the Thai Buddhist era, not null
@param yearOfEra  the year-of-era
@param dayOfYear  the day-of-year
@return the Thai Buddhist local date, not null
@throws DateTimeException if unable to create the date
@throws ClassCastException if the {@code era} is not a {@code ThaiBuddhistEra}
"
      end

      operation 8502658 "dateYearDay"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 2
	  param in name "prolepticYear" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in Thai Buddhist calendar system from the
proleptic-year and day-of-year fields.

@param prolepticYear  the proleptic-year
@param dayOfYear  the day-of-year
@return the Thai Buddhist local date, not null
@throws DateTimeException if unable to create the date
"
      end

      operation 8502786 "dateEpochDay"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "epochDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Obtains a local date in the Thai Buddhist calendar system from the epoch-day.

@param epochDay  the epoch day
@return the Thai Buddhist local date, not null
@throws DateTimeException if unable to create the date

 override with covariant return type"
      end

      operation 8502914 "dateNow"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8503042 "dateNow"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8503170 "dateNow"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8503298 "date"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8503426 "localDateTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ThaiBuddhistDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8503554 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ThaiBuddhistDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8503682 "zonedDateTime"
	public return_type class_ref 1053698 // ChronoZonedDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ThaiBuddhistDate> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8503810 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "prolepticYear" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified year is a leap year.
<p>
Thai Buddhist leap years occur exactly in line with ISO leap years.
This method does not validate the year passed in, and only has a
well-defined result for years in the supported range.

@param prolepticYear  the proleptic-year to check, not validated for range
@return true if the year is a leap year
"
      end

      operation 8503938 "prolepticYear"
	public explicit_return_type "int"
	nparams 2
	  param inout name "era" type class_ref 1052674 // Era
	  param in name "yearOfEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8504066 "eraOf"
	public return_type class_ref 1057154 // ThaiBuddhistEra
	nparams 1
	  param in name "eraValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8504194 "eras"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Era> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8504322 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1054722 // ChronoField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8504450 "resolveDate"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 2
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------
 override for return type"
      end

      operation 8504578 "writeReplace"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the Chronology using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(1);     // identifies a Chronology
 out.writeUTF(getId());
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8504706 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end
    end

    class 1057026 "ThaiBuddhistDate"
      visibility public 
      nactuals 1
      actual class class_ref 1054978 // ChronoLocalDateImpl
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date in the Thai Buddhist calendar system.
<p>
This date operates using the {@linkplain ThaiBuddhistChronology Thai Buddhist calendar}.
This calendar system is primarily used in Thailand.
Dates are aligned such that {@code 2484-01-01 (Buddhist)} is {@code 1941-01-01 (ISO)}.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code ThaiBuddhistDate} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3448578 // <realization>
	relation 3448578 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3448578 // <realization>
	  b parent class_ref 1054978 // ChronoLocalDateImpl
      end

      classrelation 3448706 // <realization>
	relation 3448706 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3448706 // <realization>
	  b parent class_ref 1052418 // ChronoLocalDate
      end

      classrelation 3448834 // <realization>
	relation 3448834 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3448834 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1960066 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8722293800195731463L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3448962 // isoDate (<unidirectional association>)
	relation 3448962 --->
	  a role_name "isoDate" const_relation private
	    comment "
The underlying date.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3448962 // isoDate (<unidirectional association>)
	  b parent class_ref 1040770 // LocalDate
      end

      operation 8504834 "now"
	class_operation public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current {@code ThaiBuddhistDate} from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current date using the system clock and default time-zone, not null
"
      end

      operation 8504962 "now"
	class_operation public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current {@code ThaiBuddhistDate} from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current date using the system clock, not null
"
      end

      operation 8505090 "now"
	class_operation public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current {@code ThaiBuddhistDate} from the specified clock.
<p>
This will query the specified clock to obtain the current date - today.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@linkplain Clock dependency injection}.

@param clock  the clock to use, not null
@return the current date, not null
@throws DateTimeException if the current date cannot be obtained
"
      end

      operation 8505218 "of"
	class_operation public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 3
	  param in name "prolepticYear" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code ThaiBuddhistDate} representing a date in the Thai Buddhist calendar
system from the proleptic-year, month-of-year and day-of-month fields.
<p>
This returns a {@code ThaiBuddhistDate} with the specified fields.
The day must be valid for the year and month, otherwise an exception will be thrown.

@param prolepticYear  the Thai Buddhist proleptic-year
@param month  the Thai Buddhist month-of-year, from 1 to 12
@param dayOfMonth  the Thai Buddhist day-of-month, from 1 to 31
@return the date in Thai Buddhist calendar system, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8505346 "from"
	class_operation public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code ThaiBuddhistDate} from a temporal object.
<p>
This obtains a date in the Thai Buddhist calendar system based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ThaiBuddhistDate}.
<p>
The conversion typically uses the {@link ChronoField#EPOCH_DAY EPOCH_DAY}
field, which is standardized across calendar systems.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code ThaiBuddhistDate::from}.

@param temporal  the temporal object to convert, not null
@return the date in Thai Buddhist calendar system, not null
@throws DateTimeException if unable to convert to a {@code ThaiBuddhistDate}
"
      end

      operation 8505474 "ThaiBuddhistDate"
	package explicit_return_type ""
	nparams 1
	  param inout name "isoDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates an instance from an ISO date.

@param isoDate  the standard local date, validated not null
"
      end

      operation 8505602 "getChronology"
	public return_type class_ref 1056898 // ThaiBuddhistChronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the chronology of this date, which is the Thai Buddhist calendar system.
<p>
The {@code Chronology} represents the calendar system in use.
The era and other fields in {@link ChronoField} are defined by the chronology.

@return the Thai Buddhist chronology, not null
"
      end

      operation 8505730 "getEra"
	public return_type class_ref 1057154 // ThaiBuddhistEra
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the era applicable at this date.
<p>
The Thai Buddhist calendar system has two eras, 'BE' and 'BEFORE_BE',
defined by {@link ThaiBuddhistEra}.

@return the era applicable at this date, not null
"
      end

      operation 8505858 "lengthOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the length of the month represented by this date.
<p>
This returns the length of the month in days.
Month lengths match those of the ISO calendar system.

@return the length of the month in days
"
      end

      operation 8505986 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8506114 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8506242 "getProlepticMonth"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8506370 "getProlepticYear"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8506498 "with"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8506626 "with"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8506754 "plus"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8506882 "minus"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws DateTimeException {@inheritDoc}
@throws ArithmeticException {@inheritDoc}
"
      end

      operation 8507010 "plusYears"
	package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8507138 "plusMonths"
	package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8507266 "plusWeeks"
	package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "weeksToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8507394 "plusDays"
	package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8507522 "plus"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8507650 "minus"
	public return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8507778 "minusYears"
	package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8507906 "minusMonths"
	package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "monthsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8508034 "minusWeeks"
	package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "weeksToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8508162 "minusDays"
	package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param in name "daysToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8508290 "with"
	private return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "newDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8508418 "atTime"
	public return_type class_ref 1053058 // ChronoLocalDateTime
	nparams 1
	  param inout name "localTime" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ThaiBuddhistDate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " for javadoc and covariant return type"
      end

      operation 8508546 "until"
	public return_type class_ref 1052802 // ChronoPeriod
	nparams 1
	  param inout name "endDate" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8508674 "toEpochDay"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " override for performance"
      end

      operation 8508802 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Compares this date to another date, including the chronology.
<p>
Compares this {@code ThaiBuddhistDate} with another ensuring that the date is the same.
<p>
Only objects of type {@code ThaiBuddhistDate} are compared, other types return false.
To compare the dates of two {@code TemporalAccessor} instances, including dates
in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.

@param obj  the object to check, null returns false
@return true if this is equal to the other date

 override for performance"
      end

      operation 8508930 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date.

@return a suitable hash code based only on the Chronology and the date

 override for performance"
      end

      operation 8509058 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8509186 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the object using a
<a href=\"../../../serialized-form.html#java.time.chrono.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(10);                // identifies a ThaiBuddhistDate
 out.writeInt(get(YEAR));
 out.writeByte(get(MONTH_OF_YEAR));
 out.writeByte(get(DAY_OF_MONTH));
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8509314 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8509442 "readExternal"
	class_operation package return_type class_ref 1057026 // ThaiBuddhistDate
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1057154 "ThaiBuddhistEra"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An era in the Thai Buddhist calendar system.
<p>
The Thai Buddhist calendar system has two eras.
The current era, for years from 1 onwards, is known as the 'Buddhist' era.
All previous years, zero or earlier in the proleptic count or one and greater
in the year-of-era count, are part of the 'Before Buddhist' era.

<table summary=\"Buddhist years and eras\" cellpadding=\"2\" cellspacing=\"3\" border=\"0\" >
<thead>
<tr class=\"tableSubHeadingColor\">
<th class=\"colFirst\" align=\"left\">year-of-era</th>
<th class=\"colFirst\" align=\"left\">era</th>
<th class=\"colFirst\" align=\"left\">proleptic-year</th>
<th class=\"colLast\" align=\"left\">ISO proleptic-year</th>
</tr>
</thead>
<tbody>
<tr class=\"rowColor\">
<td>2</td><td>BE</td><td>2</td><td>-542</td>
</tr>
<tr class=\"altColor\">
<td>1</td><td>BE</td><td>1</td><td>-543</td>
</tr>
<tr class=\"rowColor\">
<td>1</td><td>BEFORE_BE</td><td>0</td><td>-544</td>
</tr>
<tr class=\"altColor\">
<td>2</td><td>BEFORE_BE</td><td>-1</td><td>-545</td>
</tr>
</tbody>
</table>
<p>
<b>Do not use {@code ordinal()} to obtain the numeric representation of {@code ThaiBuddhistEra}.
Use {@code getValue()} instead.</b>

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      classrelation 3449090 // <realization>
	relation 3449090 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3449090 // <realization>
	  b parent class_ref 1052674 // Era
      end

      attribute 1960194 "BEFORE_BE"
	public type class_ref 1057154 // ThaiBuddhistEra
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the era before the current one, 'Before Buddhist Era',
which has the numeric value 0.

"
      end

      attribute 1960322 "BE"
	public type class_ref 1057154 // ThaiBuddhistEra
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the current era, 'Buddhist Era',
which has the numeric value 1.
"
      end

      operation 8509570 "of"
	class_operation public return_type class_ref 1057154 // ThaiBuddhistEra
	nparams 1
	  param in name "thaiBuddhistEra" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ThaiBuddhistEra} from an {@code int} value.
<p>
{@code ThaiBuddhistEra} is an enum representing the Thai Buddhist eras of BEFORE_BE/BE.
This factory allows the enum to be obtained from the {@code int} value.

@param thaiBuddhistEra  the era to represent, from 0 to 1
@return the BuddhistEra singleton, never null
@throws DateTimeException if the era is invalid
"
      end

      operation 8509698 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the numeric era {@code int} value.
<p>
The era BEFORE_BE has the value 0, while the era BE has the value 1.

@return the era value, from 0 (BEFORE_BE) to 1 (BE)
"
      end
    end
  end

  deploymentview 170370 "chrono"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 782978 "ChronoLocalDate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Comparator;
import java.util.Objects;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoField.YEAR;
import static java.time.temporal.ChronoUnit.DAYS;
${definition}"
      associated_elems
	class_ref 1052418 // ChronoLocalDate
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 783234 "ChronoLocalDateTime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.zone.ZoneRules;
import java.util.Comparator;
import java.util.Objects;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoField.NANO_OF_DAY;
import static java.time.temporal.ChronoUnit.FOREVER;
import static java.time.temporal.ChronoUnit.NANOS;
${definition}"
      associated_elems
	class_ref 1053058 // ChronoLocalDateTime
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 784130 "ChronoPeriod"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.List;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1052802 // ChronoPeriod
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2013, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 784770 "ChronoZonedDateTime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Comparator;
import java.util.Objects;
import static java.time.temporal.ChronoField.INSTANT_SECONDS;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
import static java.time.temporal.ChronoUnit.FOREVER;
import static java.time.temporal.ChronoUnit.NANOS;
${definition}"
      associated_elems
	class_ref 1053698 // ChronoZonedDateTime
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 785410 "Chronology"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.ResolverStyle;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1052546 // Chronology
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 785538 "AbstractChronology"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import java.io.Serializable;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAdjusters;
import java.time.temporal.TemporalField;
import java.time.temporal.ValueRange;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import sun.util.logging.PlatformLogger;
${definition}"
      associated_elems
	class_ref 1054594 // AbstractChronology
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 785666 "ChronoLocalDateImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.time.DateTimeException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Objects;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.PROLEPTIC_MONTH;
import static java.time.temporal.ChronoField.YEAR_OF_ERA;
${definition}"
      associated_elems
	class_ref 1054978 // ChronoLocalDateImpl
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 785794 "ChronoLocalDateTimeImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.Serializable;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalUnit;
import java.time.temporal.ValueRange;
import java.util.Objects;
import static java.time.temporal.ChronoField.EPOCH_DAY;
${definition}"
      associated_elems
	class_ref 1055106 // ChronoLocalDateTimeImpl
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 785922 "ChronoPeriodImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import java.io.Serializable;
import java.time.DateTimeException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoUnit.DAYS;
import static java.time.temporal.ChronoUnit.MONTHS;
import static java.time.temporal.ChronoUnit.YEARS;
${definition}"
      associated_elems
	class_ref 1055234 // ChronoPeriodImpl
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2013, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 786050 "ChronoZonedDateTimeImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.Serializable;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalUnit;
import java.time.zone.ZoneOffsetTransition;
import java.time.zone.ZoneRules;
import java.util.List;
import java.util.Objects;
import static java.time.temporal.ChronoUnit.SECONDS;
${definition}"
      associated_elems
	class_ref 1055362 // ChronoZonedDateTimeImpl
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 786178 "Era"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.ValueRange;
import java.util.Locale;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoUnit.ERAS;
${definition}"
      associated_elems
	class_ref 1052674 // Era
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 786306 "HijrahChronology"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.ValueRange;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Properties;
import sun.util.logging.PlatformLogger;
import static java.time.temporal.ChronoField.EPOCH_DAY;
${definition}"
      associated_elems
	class_ref 1055490 // HijrahChronology
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 786434 "HijrahDate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInput;
import java.io.ObjectInputStream;
import java.io.ObjectOutput;
import java.io.Serializable;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import static java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
import static java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
import static java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
import static java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.YEAR;
${definition}"
      associated_elems
	class_ref 1055618 // HijrahDate
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 786562 "HijrahEra"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import static java.time.temporal.ChronoField.ERA;
${definition}"
      associated_elems
	class_ref 1055746 // HijrahEra
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 786690 "IsoChronology"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.Period;
import java.time.Year;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.ValueRange;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.PROLEPTIC_MONTH;
import static java.time.temporal.ChronoField.YEAR;
import static java.time.temporal.ChronoField.YEAR_OF_ERA;
${definition}"
      associated_elems
	class_ref 1053314 // IsoChronology
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 786818 "IsoEra"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1055874 // IsoEra
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 786946 "JapaneseChronology"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.Year;
import java.time.ZoneId;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjusters;
import java.time.temporal.TemporalField;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import sun.util.calendar.CalendarSystem;
import sun.util.calendar.LocalGregorianCalendar;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.DAY_OF_YEAR;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.YEAR;
import static java.time.temporal.ChronoField.YEAR_OF_ERA;
import static java.time.temporal.ChronoUnit.DAYS;
import static java.time.temporal.ChronoUnit.MONTHS;
${definition}"
      associated_elems
	class_ref 1056002 // JapaneseChronology
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 787074 "JapaneseDate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Calendar;
import java.util.Objects;
import sun.util.calendar.CalendarDate;
import sun.util.calendar.LocalGregorianCalendar;
import static java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
import static java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
import static java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
import static java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.YEAR;
${definition}"
      associated_elems
	class_ref 1056130 // JapaneseDate
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 787202 "JapaneseEra"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import java.io.Serializable;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalField;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Arrays;
import java.util.Objects;
import sun.util.calendar.CalendarDate;
import static java.time.chrono.JapaneseDate.MEIJI_6_ISODATE;
import static java.time.temporal.ChronoField.ERA;
${definition}"
      associated_elems
	class_ref 1056258 // JapaneseEra
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 787330 "MinguoChronology"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.ValueRange;
import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import static java.time.temporal.ChronoField.PROLEPTIC_MONTH;
import static java.time.temporal.ChronoField.YEAR;
${definition}"
      associated_elems
	class_ref 1056386 // MinguoChronology
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 787458 "MinguoDate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Objects;
import static java.time.chrono.MinguoChronology.YEARS_DIFFERENCE;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.YEAR;
${definition}"
      associated_elems
	class_ref 1056514 // MinguoDate
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 787586 "MinguoEra"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1056642 // MinguoEra
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 787714 "Ser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Externalizable;
import java.io.IOException;
import java.io.InvalidClassException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.StreamCorruptedException;
import java.time.LocalDate;
import java.time.LocalDateTime;
${definition}"
      associated_elems
	class_ref 1056770 // Ser
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2011-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 787842 "ThaiBuddhistChronology"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.ResolverStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.ValueRange;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import static java.time.temporal.ChronoField.PROLEPTIC_MONTH;
import static java.time.temporal.ChronoField.YEAR;
${definition}"
      associated_elems
	class_ref 1056898 // ThaiBuddhistChronology
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 787970 "ThaiBuddhistDate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Objects;
import static java.time.chrono.ThaiBuddhistChronology.YEARS_DIFFERENCE;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.YEAR;
${definition}"
      associated_elems
	class_ref 1057026 // ThaiBuddhistDate
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 788098 "ThaiBuddhistEra"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1057154 // ThaiBuddhistEra
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end
  end
end
