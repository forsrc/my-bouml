class LocalVariableGen
!!!3566850.java!!!	LocalVariableGen(in index : int, inout name : String, inout type : Type, inout start : InstructionHandle, inout end : InstructionHandle)
    if((index < 0) || (index > Constants.MAX_SHORT))
      throw new ClassGenException("Invalid index index: " + index);

    this.name  = name;
    this.type  = type;
    this.index  = index;
    setStart(start);
    setEnd(end);
!!!3566978.java!!!	getLocalVariable(inout cp : ConstantPoolGen) : LocalVariable
    int start_pc        = start.getPosition();
    int length          = end.getPosition() - start_pc;

    if(length > 0)
      length += end.getInstruction().getLength();

    int name_index      = cp.addUtf8(name);
    int signature_index = cp.addUtf8(type.getSignature());

    return new LocalVariable(start_pc, length, name_index,
                             signature_index, index, cp.getConstantPool());
!!!3567106.java!!!	getIndex() : int
 return index;
!!!3567234.java!!!	setName(inout name : String) : void
 this.name = name;
!!!3567362.java!!!	getName() : String
 return name;
!!!3567490.java!!!	setType(inout type : Type) : void
 this.type = type;
!!!3567618.java!!!	getType() : Type
 return type;
!!!3567746.java!!!	getStart() : InstructionHandle
 return start;
!!!3567874.java!!!	getEnd() : InstructionHandle
 return end;
!!!3568002.java!!!	notifyTargetChanging() : void
    // hashCode depends on 'index', 'start', and 'end'.
    // Therefore before changing any of these values we
    // need to unregister 'this' from any HashSet where
    // this is registered, and then we need to add it
    // back...

    // Unregister 'this' from the HashSet held by 'start'.
    BranchInstruction.notifyTargetChanging(this.start, this);
    if (this.end != this.start) {
        // Since hashCode() is going to change we need to unregister
        // 'this' both form 'start' and 'end'.
        // Unregister 'this' from the HashSet held by 'end'.
        BranchInstruction.notifyTargetChanging(this.end, this);
    }
!!!3568130.java!!!	notifyTargetChanged() : void
    // hashCode depends on 'index', 'start', and 'end'.
    // Therefore before changing any of these values we
    // need to unregister 'this' from any HashSet where
    // this is registered, and then we need to add it
    // back...

    // Register 'this' in the HashSet held by start.
    BranchInstruction.notifyTargetChanged(this.start, this);
    if (this.end != this.start) {
        // Since hashCode() has changed we need to register
        // 'this' again in 'end'.
        // Add back 'this' in the HashSet held by 'end'.
        BranchInstruction.notifyTargetChanged(this.end, this);
    }
!!!3568258.java!!!	setStart(inout start : InstructionHandle) : void

    // Call notifyTargetChanging *before* modifying this,
    // as the code triggered by notifyTargetChanging
    // depends on this pointing to the 'old' start.
    notifyTargetChanging();

    this.start = start;

    // call notifyTargetChanged *after* modifying this,
    // as the code triggered by notifyTargetChanged
    // depends on this pointing to the 'new' start.
    notifyTargetChanged();
!!!3568386.java!!!	setEnd(inout end : InstructionHandle) : void
    // call notifyTargetChanging *before* modifying this,
    // as the code triggered by notifyTargetChanging
    // depends on this pointing to the 'old' end.
    // Unregister 'this' from the HashSet held by the 'old' end.
    notifyTargetChanging();

    this.end = end;

    // call notifyTargetChanged *after* modifying this,
    // as the code triggered by notifyTargetChanged
    // depends on this pointing to the 'new' end.
    // Register 'this' in the HashSet held by the 'new' end.
    notifyTargetChanged();

!!!3568514.java!!!	updateTarget(inout old_ih : InstructionHandle, inout new_ih : InstructionHandle) : void
    boolean targeted = false;

    if(start == old_ih) {
      targeted = true;
      setStart(new_ih);
    }

    if(end == old_ih) {
      targeted = true;
      setEnd(new_ih);
    }

    if(!targeted)
      throw new ClassGenException("Not targeting " + old_ih + ", but {" + start + ", " +
                                  end + "}");
!!!3568642.java!!!	containsTarget(inout ih : InstructionHandle) : boolean
    return (start == ih) || (end == ih);
!!!3568770.java!!!	equals(inout o : Object) : boolean
    if (o==this)
      return true;

    if(!(o instanceof LocalVariableGen))
      return false;

    LocalVariableGen l = (LocalVariableGen)o;
    return (l.index == index) && (l.start == start) && (l.end == end);
!!!3568898.java!!!	hashCode() : int
    int hash = 7;
    hash = 59 * hash + this.index;
    hash = 59 * hash + Objects.hashCode(this.start);
    hash = 59 * hash + Objects.hashCode(this.end);
    return hash;
!!!3569026.java!!!	toString() : String
    return "LocalVariableGen(" + name +  ", " + type +  ", " + start + ", " + end + ")";
!!!3569154.java!!!	clone() : Object
    try {
      return super.clone();
    } catch(CloneNotSupportedException e) {
      System.err.println(e);
      return null;
    }
