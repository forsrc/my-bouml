class SecurityManager
!!!7080450.java!!!	hasAllPermission() : boolean
        try {
            checkPermission(SecurityConstants.ALL_PERMISSION);
            return true;
        } catch (SecurityException se) {
            return false;
        }
!!!7080578.java!!!	getInCheck() : boolean
        return inCheck;
!!!7080706.java!!!	SecurityManager()
        synchronized(SecurityManager.class) {
            SecurityManager sm = System.getSecurityManager();
            if (sm != null) {
                // ask the currently installed security manager if we
                // can create a new one.
                sm.checkPermission(new RuntimePermission
                                   ("createSecurityManager"));
            }
            initialized = true;
        }
!!!7080962.java!!!	currentClassLoader() : ClassLoader
        ClassLoader cl = currentClassLoader0();
        if ((cl != null) && hasAllPermission())
            cl = null;
        return cl;
!!!7081218.java!!!	currentLoadedClass() : Class
        Class<?> c = currentLoadedClass0();
        if ((c != null) && hasAllPermission())
            c = null;
        return c;
!!!7081474.java!!!	classLoaderDepth() : int
        int depth = classLoaderDepth0();
        if (depth != -1) {
            if (hasAllPermission())
                depth = -1;
            else
                depth--; // make sure we don't include ourself
        }
        return depth;
!!!7081730.java!!!	inClass(inout name : String) : boolean
        return classDepth(name) >= 0;
!!!7081858.java!!!	inClassLoader() : boolean
        return currentClassLoader() != null;
!!!7081986.java!!!	getSecurityContext() : Object
        return AccessController.getContext();
!!!7082114.java!!!	checkPermission(inout perm : Permission) : void
        java.security.AccessController.checkPermission(perm);
!!!7082242.java!!!	checkPermission(inout perm : Permission, inout context : Object) : void
        if (context instanceof AccessControlContext) {
            ((AccessControlContext)context).checkPermission(perm);
        } else {
            throw new SecurityException();
        }
!!!7082370.java!!!	checkCreateClassLoader() : void
        checkPermission(SecurityConstants.CREATE_CLASSLOADER_PERMISSION);
!!!7082498.java!!!	getRootGroup() : ThreadGroup
        ThreadGroup root =  Thread.currentThread().getThreadGroup();
        while (root.getParent() != null) {
            root = root.getParent();
        }
        return root;
!!!7082626.java!!!	checkAccess(inout t : Thread) : void
        if (t == null) {
            throw new NullPointerException("thread can't be null");
        }
        if (t.getThreadGroup() == rootGroup) {
            checkPermission(SecurityConstants.MODIFY_THREAD_PERMISSION);
        } else {
            // just return
        }
!!!7082754.java!!!	checkAccess(inout g : ThreadGroup) : void
        if (g == null) {
            throw new NullPointerException("thread group can't be null");
        }
        if (g == rootGroup) {
            checkPermission(SecurityConstants.MODIFY_THREADGROUP_PERMISSION);
        } else {
            // just return
        }
!!!7082882.java!!!	checkExit(in status : int) : void
        checkPermission(new RuntimePermission("exitVM."+status));
!!!7083010.java!!!	checkExec(inout cmd : String) : void
        File f = new File(cmd);
        if (f.isAbsolute()) {
            checkPermission(new FilePermission(cmd,
                SecurityConstants.FILE_EXECUTE_ACTION));
        } else {
            checkPermission(new FilePermission("<<ALL FILES>>",
                SecurityConstants.FILE_EXECUTE_ACTION));
        }
!!!7083138.java!!!	checkLink(inout lib : String) : void
        if (lib == null) {
            throw new NullPointerException("library can't be null");
        }
        checkPermission(new RuntimePermission("loadLibrary."+lib));
!!!7083266.java!!!	checkRead(inout fd : FileDescriptor) : void
        if (fd == null) {
            throw new NullPointerException("file descriptor can't be null");
        }
        checkPermission(new RuntimePermission("readFileDescriptor"));
!!!7083394.java!!!	checkRead(inout file : String) : void
        checkPermission(new FilePermission(file,
            SecurityConstants.FILE_READ_ACTION));
!!!7083522.java!!!	checkRead(inout file : String, inout context : Object) : void
        checkPermission(
            new FilePermission(file, SecurityConstants.FILE_READ_ACTION),
            context);
!!!7083650.java!!!	checkWrite(inout fd : FileDescriptor) : void
        if (fd == null) {
            throw new NullPointerException("file descriptor can't be null");
        }
        checkPermission(new RuntimePermission("writeFileDescriptor"));

!!!7083778.java!!!	checkWrite(inout file : String) : void
        checkPermission(new FilePermission(file,
            SecurityConstants.FILE_WRITE_ACTION));
!!!7083906.java!!!	checkDelete(inout file : String) : void
        checkPermission(new FilePermission(file,
            SecurityConstants.FILE_DELETE_ACTION));
!!!7084034.java!!!	checkConnect(inout host : String, in port : int) : void
        if (host == null) {
            throw new NullPointerException("host can't be null");
        }
        if (!host.startsWith("[") && host.indexOf(':') != -1) {
            host = "[" + host + "]";
        }
        if (port == -1) {
            checkPermission(new SocketPermission(host,
                SecurityConstants.SOCKET_RESOLVE_ACTION));
        } else {
            checkPermission(new SocketPermission(host+":"+port,
                SecurityConstants.SOCKET_CONNECT_ACTION));
        }
!!!7084162.java!!!	checkConnect(inout host : String, in port : int, inout context : Object) : void
        if (host == null) {
            throw new NullPointerException("host can't be null");
        }
        if (!host.startsWith("[") && host.indexOf(':') != -1) {
            host = "[" + host + "]";
        }
        if (port == -1)
            checkPermission(new SocketPermission(host,
                SecurityConstants.SOCKET_RESOLVE_ACTION),
                context);
        else
            checkPermission(new SocketPermission(host+":"+port,
                SecurityConstants.SOCKET_CONNECT_ACTION),
                context);
!!!7084290.java!!!	checkListen(in port : int) : void
        checkPermission(new SocketPermission("localhost:"+port,
            SecurityConstants.SOCKET_LISTEN_ACTION));
!!!7084418.java!!!	checkAccept(inout host : String, in port : int) : void
        if (host == null) {
            throw new NullPointerException("host can't be null");
        }
        if (!host.startsWith("[") && host.indexOf(':') != -1) {
            host = "[" + host + "]";
        }
        checkPermission(new SocketPermission(host+":"+port,
            SecurityConstants.SOCKET_ACCEPT_ACTION));
!!!7084546.java!!!	checkMulticast(inout maddr : InetAddress) : void
        String host = maddr.getHostAddress();
        if (!host.startsWith("[") && host.indexOf(':') != -1) {
            host = "[" + host + "]";
        }
        checkPermission(new SocketPermission(host,
            SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION));
!!!7084674.java!!!	checkMulticast(inout maddr : InetAddress, in ttl : byte) : void
        String host = maddr.getHostAddress();
        if (!host.startsWith("[") && host.indexOf(':') != -1) {
            host = "[" + host + "]";
        }
        checkPermission(new SocketPermission(host,
            SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION));
!!!7084802.java!!!	checkPropertiesAccess() : void
        checkPermission(new PropertyPermission("*",
            SecurityConstants.PROPERTY_RW_ACTION));
!!!7084930.java!!!	checkPropertyAccess(inout key : String) : void
        checkPermission(new PropertyPermission(key,
            SecurityConstants.PROPERTY_READ_ACTION));
!!!7085058.java!!!	checkTopLevelWindow(inout window : Object) : boolean
        if (window == null) {
            throw new NullPointerException("window can't be null");
        }
        Permission perm = SecurityConstants.AWT.TOPLEVEL_WINDOW_PERMISSION;
        if (perm == null) {
            perm = SecurityConstants.ALL_PERMISSION;
        }
        try {
            checkPermission(perm);
            return true;
        } catch (SecurityException se) {
            // just return false
        }
        return false;
!!!7085186.java!!!	checkPrintJobAccess() : void
        checkPermission(new RuntimePermission("queuePrintJob"));
!!!7085314.java!!!	checkSystemClipboardAccess() : void
        Permission perm = SecurityConstants.AWT.ACCESS_CLIPBOARD_PERMISSION;
        if (perm == null) {
            perm = SecurityConstants.ALL_PERMISSION;
        }
        checkPermission(perm);
!!!7085442.java!!!	checkAwtEventQueueAccess() : void
        Permission perm = SecurityConstants.AWT.CHECK_AWT_EVENTQUEUE_PERMISSION;
        if (perm == null) {
            perm = SecurityConstants.ALL_PERMISSION;
        }
        checkPermission(perm);
!!!7085570.java!!!	getPackages(inout p : String) : String
        String packages[] = null;
        if (p != null && !p.equals("")) {
            java.util.StringTokenizer tok =
                new java.util.StringTokenizer(p, ",");
            int n = tok.countTokens();
            if (n > 0) {
                packages = new String[n];
                int i = 0;
                while (tok.hasMoreElements()) {
                    String s = tok.nextToken().trim();
                    packages[i++] = s;
                }
            }
        }

        if (packages == null)
            packages = new String[0];
        return packages;
!!!7085698.java!!!	checkPackageAccess(inout pkg : String) : void
        if (pkg == null) {
            throw new NullPointerException("package name can't be null");
        }

        String[] pkgs;
        synchronized (packageAccessLock) {
            /*
             * Do we need to update our property array?
             */
            if (!packageAccessValid) {
                String tmpPropertyStr =
                    AccessController.doPrivileged(
                        new PrivilegedAction<String>() {
                            public String run() {
                                return java.security.Security.getProperty(
                                    "package.access");
                            }
                        }
                    );
                packageAccess = getPackages(tmpPropertyStr);
                packageAccessValid = true;
            }

            // Using a snapshot of packageAccess -- don't care if static field
            // changes afterwards; array contents won't change.
            pkgs = packageAccess;
        }

        /*
         * Traverse the list of packages, check for any matches.
         */
        for (int i = 0; i < pkgs.length; i++) {
            if (pkg.startsWith(pkgs[i]) || pkgs[i].equals(pkg + ".")) {
                checkPermission(
                    new RuntimePermission("accessClassInPackage."+pkg));
                break;  // No need to continue; only need to check this once
            }
        }
!!!7085826.java!!!	checkPackageDefinition(inout pkg : String) : void
        if (pkg == null) {
            throw new NullPointerException("package name can't be null");
        }

        String[] pkgs;
        synchronized (packageDefinitionLock) {
            /*
             * Do we need to update our property array?
             */
            if (!packageDefinitionValid) {
                String tmpPropertyStr =
                    AccessController.doPrivileged(
                        new PrivilegedAction<String>() {
                            public String run() {
                                return java.security.Security.getProperty(
                                    "package.definition");
                            }
                        }
                    );
                packageDefinition = getPackages(tmpPropertyStr);
                packageDefinitionValid = true;
            }
            // Using a snapshot of packageDefinition -- don't care if static
            // field changes afterwards; array contents won't change.
            pkgs = packageDefinition;
        }

        /*
         * Traverse the list of packages, check for any matches.
         */
        for (int i = 0; i < pkgs.length; i++) {
            if (pkg.startsWith(pkgs[i]) || pkgs[i].equals(pkg + ".")) {
                checkPermission(
                    new RuntimePermission("defineClassInPackage."+pkg));
                break; // No need to continue; only need to check this once
            }
        }
!!!7085954.java!!!	checkSetFactory() : void
        checkPermission(new RuntimePermission("setFactory"));
!!!7086082.java!!!	checkMemberAccess(inout clazz : Class, in which : int) : void
        if (clazz == null) {
            throw new NullPointerException("class can't be null");
        }
        if (which != Member.PUBLIC) {
            Class<?> stack[] = getClassContext();
            /*
             * stack depth of 4 should be the caller of one of the
             * methods in java.lang.Class that invoke checkMember
             * access. The stack should look like:
             *
             * someCaller                        [3]
             * java.lang.Class.someReflectionAPI [2]
             * java.lang.Class.checkMemberAccess [1]
             * SecurityManager.checkMemberAccess [0]
             *
             */
            if ((stack.length<4) ||
                (stack[3].getClassLoader() != clazz.getClassLoader())) {
                checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);
            }
        }
!!!7086210.java!!!	checkSecurityAccess(inout target : String) : void
        checkPermission(new SecurityPermission(target));
!!!7086466.java!!!	getThreadGroup() : ThreadGroup
        return Thread.currentThread().getThreadGroup();
