class ZoneOffsetTransition
!!!8574466.java!!!	of(inout transition : LocalDateTime, inout offsetBefore : ZoneOffset, inout offsetAfter : ZoneOffset) : ZoneOffsetTransition
        Objects.requireNonNull(transition, "transition");
        Objects.requireNonNull(offsetBefore, "offsetBefore");
        Objects.requireNonNull(offsetAfter, "offsetAfter");
        if (offsetBefore.equals(offsetAfter)) {
            throw new IllegalArgumentException("Offsets must not be equal");
        }
        if (transition.getNano() != 0) {
            throw new IllegalArgumentException("Nano-of-second must be zero");
        }
        return new ZoneOffsetTransition(transition, offsetBefore, offsetAfter);
!!!8574594.java!!!	ZoneOffsetTransition(inout transition : LocalDateTime, inout offsetBefore : ZoneOffset, inout offsetAfter : ZoneOffset)
        this.transition = transition;
        this.offsetBefore = offsetBefore;
        this.offsetAfter = offsetAfter;
!!!8574722.java!!!	ZoneOffsetTransition(in epochSecond : long, inout offsetBefore : ZoneOffset, inout offsetAfter : ZoneOffset)
        this.transition = LocalDateTime.ofEpochSecond(epochSecond, 0, offsetBefore);
        this.offsetBefore = offsetBefore;
        this.offsetAfter = offsetAfter;
!!!8574850.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8574978.java!!!	writeReplace() : Object
        return new Ser(Ser.ZOT, this);
!!!8575106.java!!!	writeExternal(inout out : DataOutput) : void
        Ser.writeEpochSec(toEpochSecond(), out);
        Ser.writeOffset(offsetBefore, out);
        Ser.writeOffset(offsetAfter, out);
!!!8575234.java!!!	readExternal(inout in : DataInput) : ZoneOffsetTransition
        long epochSecond = Ser.readEpochSec(in);
        ZoneOffset before = Ser.readOffset(in);
        ZoneOffset after = Ser.readOffset(in);
        if (before.equals(after)) {
            throw new IllegalArgumentException("Offsets must not be equal");
        }
        return new ZoneOffsetTransition(epochSecond, before, after);
!!!8575362.java!!!	getInstant() : Instant
        return transition.toInstant(offsetBefore);
!!!8575490.java!!!	toEpochSecond() : long
        return transition.toEpochSecond(offsetBefore);
!!!8575618.java!!!	getDateTimeBefore() : LocalDateTime
        return transition;
!!!8575746.java!!!	getDateTimeAfter() : LocalDateTime
        return transition.plusSeconds(getDurationSeconds());
!!!8575874.java!!!	getOffsetBefore() : ZoneOffset
        return offsetBefore;
!!!8576002.java!!!	getOffsetAfter() : ZoneOffset
        return offsetAfter;
!!!8576130.java!!!	getDuration() : Duration
        return Duration.ofSeconds(getDurationSeconds());
!!!8576258.java!!!	getDurationSeconds() : int
        return getOffsetAfter().getTotalSeconds() - getOffsetBefore().getTotalSeconds();
!!!8576386.java!!!	isGap() : boolean
        return getOffsetAfter().getTotalSeconds() > getOffsetBefore().getTotalSeconds();
!!!8576514.java!!!	isOverlap() : boolean
        return getOffsetAfter().getTotalSeconds() < getOffsetBefore().getTotalSeconds();
!!!8576642.java!!!	isValidOffset(inout offset : ZoneOffset) : boolean
        return isGap() ? false : (getOffsetBefore().equals(offset) || getOffsetAfter().equals(offset));
!!!8576770.java!!!	getValidOffsets() : List
        if (isGap()) {
            return Collections.emptyList();
        }
        return Arrays.asList(getOffsetBefore(), getOffsetAfter());
!!!8576898.java!!!	compareTo(inout transition : ZoneOffsetTransition) : int
        return this.getInstant().compareTo(transition.getInstant());
!!!8577026.java!!!	equals(inout other : Object) : boolean
        if (other == this) {
            return true;
        }
        if (other instanceof ZoneOffsetTransition) {
            ZoneOffsetTransition d = (ZoneOffsetTransition) other;
            return transition.equals(d.transition) &&
                offsetBefore.equals(d.offsetBefore) && offsetAfter.equals(d.offsetAfter);
        }
        return false;
!!!8577154.java!!!	hashCode() : int
        return transition.hashCode() ^ offsetBefore.hashCode() ^ Integer.rotateLeft(offsetAfter.hashCode(), 16);
!!!8577282.java!!!	toString() : String
        StringBuilder buf = new StringBuilder();
        buf.append("Transition[")
            .append(isGap() ? "Gap" : "Overlap")
            .append(" at ")
            .append(transition)
            .append(offsetBefore)
            .append(" to ")
            .append(offsetAfter)
            .append(']');
        return buf.toString();
