class ComponentSpring
!!!10528002.java!!!	ComponentSpring(inout component : Component, in min : int, in pref : int, in max : int)
            this.component = component;
            if (component == null) {
                throw new IllegalArgumentException(
                        "Component must be non-null");
            }

            checkSize(min, pref, max, true);

            this.min = min;
            this.max = max;
            this.pref = pref;

            // getComponentInfo makes sure component is a child of the
            // Container GroupLayout is the LayoutManager for.
            getComponentInfo(component);
!!!10528130.java!!!	calculateMinimumSize(in axis : int) : int
            if (isLinked(axis)) {
                return getLinkSize(axis, MIN_SIZE);
            }
            return calculateNonlinkedMinimumSize(axis);
!!!10528258.java!!!	calculatePreferredSize(in axis : int) : int
            if (isLinked(axis)) {
                return getLinkSize(axis, PREF_SIZE);
            }
            int min = getMinimumSize(axis);
            int pref = calculateNonlinkedPreferredSize(axis);
            int max = getMaximumSize(axis);
            return Math.min(max, Math.max(min, pref));
!!!10528386.java!!!	calculateMaximumSize(in axis : int) : int
            if (isLinked(axis)) {
                return getLinkSize(axis, MAX_SIZE);
            }
            return Math.max(getMinimumSize(axis),
                    calculateNonlinkedMaximumSize(axis));
!!!10528514.java!!!	isVisible() : boolean
            return getComponentInfo(getComponent()).isVisible();
!!!10528642.java!!!	calculateNonlinkedMinimumSize(in axis : int) : int
            if (!isVisible()) {
                return 0;
            }
            if (min >= 0) {
                return min;
            }
            if (min == PREFERRED_SIZE) {
                return calculateNonlinkedPreferredSize(axis);
            }
            assert (min == DEFAULT_SIZE);
            return getSizeAlongAxis(axis, component.getMinimumSize());
!!!10528770.java!!!	calculateNonlinkedPreferredSize(in axis : int) : int
            if (!isVisible()) {
                return 0;
            }
            if (pref >= 0) {
                return pref;
            }
            assert (pref == DEFAULT_SIZE || pref == PREFERRED_SIZE);
            return getSizeAlongAxis(axis, component.getPreferredSize());
!!!10528898.java!!!	calculateNonlinkedMaximumSize(in axis : int) : int
            if (!isVisible()) {
                return 0;
            }
            if (max >= 0) {
                return max;
            }
            if (max == PREFERRED_SIZE) {
                return calculateNonlinkedPreferredSize(axis);
            }
            assert (max == DEFAULT_SIZE);
            return getSizeAlongAxis(axis, component.getMaximumSize());
!!!10529026.java!!!	getSizeAlongAxis(in axis : int, inout size : Dimension) : int
            return (axis == HORIZONTAL) ? size.width : size.height;
!!!10529154.java!!!	getLinkSize(in axis : int, in type : int) : int
            if (!isVisible()) {
                return 0;
            }
            ComponentInfo ci = getComponentInfo(component);
            return ci.getLinkSize(axis, type);
!!!10529282.java!!!	setSize(in axis : int, in origin : int, in size : int) : void
            super.setSize(axis, origin, size);
            this.origin = origin;
            if (size == UNSET) {
                baseline = -1;
            }
!!!10529410.java!!!	getOrigin() : int
            return origin;
!!!10529538.java!!!	setComponent(inout component : Component) : void
            this.component = component;
!!!10529666.java!!!	getComponent() : Component
            return component;
!!!10529794.java!!!	getBaseline() : int
            if (baseline == -1) {
                Spring horizontalSpring = getComponentInfo(component).
                        horizontalSpring;
                int width = horizontalSpring.getPreferredSize(HORIZONTAL);
                int height = getPreferredSize(VERTICAL);
                if (width > 0 && height > 0) {
                    baseline = component.getBaseline(width, height);
                }
            }
            return baseline;
!!!10529922.java!!!	getBaselineResizeBehavior() : BaselineResizeBehavior
            return getComponent().getBaselineResizeBehavior();
!!!10530050.java!!!	isLinked(in axis : int) : boolean
            return getComponentInfo(component).isLinked(axis);
!!!10530178.java!!!	installIfNecessary(in axis : int) : void
            if (!installed) {
                installed = true;
                if (axis == HORIZONTAL) {
                    getComponentInfo(component).horizontalSpring = this;
                } else {
                    getComponentInfo(component).verticalSpring = this;
                }
            }
!!!10530306.java!!!	willHaveZeroSize(inout treatAutopaddingAsZeroSized : boolean) : boolean
            return !isVisible();
