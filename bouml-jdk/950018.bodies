class BasicType
!!!7198082.java!!!	BasicType(in btChar : char, inout btClass : Class, inout wrapper : Wrapper)
            this.btChar = btChar;
            this.btClass = btClass;
            this.btWrapper = wrapper;
!!!7198210.java!!!	basicTypeChar() : char
            return btChar;
!!!7198338.java!!!	basicTypeClass() : Class
            return btClass;
!!!7198466.java!!!	basicTypeWrapper() : Wrapper
            return btWrapper;
!!!7198594.java!!!	basicTypeSlots() : int
            return btWrapper.stackSlots();
!!!7198722.java!!!	basicType(in type : byte) : LambdaForm::BasicType
            return ALL_TYPES[type];
!!!7198850.java!!!	basicType(in type : char) : LambdaForm::BasicType
            switch (type) {
                case 'L': return L_TYPE;
                case 'I': return I_TYPE;
                case 'J': return J_TYPE;
                case 'F': return F_TYPE;
                case 'D': return D_TYPE;
                case 'V': return V_TYPE;
                // all subword types are represented as ints
                case 'Z':
                case 'B':
                case 'S':
                case 'C':
                    return I_TYPE;
                default:
                    throw newInternalError("Unknown type char: '"+type+"'");
            }
!!!7198978.java!!!	basicType(inout type : Wrapper) : LambdaForm::BasicType
            char c = type.basicTypeChar();
            return basicType(c);
!!!7199106.java!!!	basicType(inout type : Class) : LambdaForm::BasicType
            if (!type.isPrimitive())  return L_TYPE;
            return basicType(Wrapper.forPrimitiveType(type));
!!!7199234.java!!!	basicTypeChar(inout type : Class) : char
            return basicType(type).btChar;
!!!7199362.java!!!	basicTypes(inout types : List) : LambdaForm::BasicType
            BasicType[] btypes = new BasicType[types.size()];
            for (int i = 0; i < btypes.length; i++) {
                btypes[i] = basicType(types.get(i));
            }
            return btypes;
!!!7199490.java!!!	basicTypes(inout types : String) : LambdaForm::BasicType
            BasicType[] btypes = new BasicType[types.length()];
            for (int i = 0; i < btypes.length; i++) {
                btypes[i] = basicType(types.charAt(i));
            }
            return btypes;
!!!7199618.java!!!	basicTypesOrd(inout btypes : LambdaForm::BasicType [[]]) : byte
            byte[] ords = new byte[btypes.length];
            for (int i = 0; i < btypes.length; i++) {
                ords[i] = (byte)btypes[i].ordinal();
            }
            return ords;
!!!7199746.java!!!	isBasicTypeChar(in c : char) : boolean
            return "LIJFDV".indexOf(c) >= 0;
!!!7199874.java!!!	isArgBasicTypeChar(in c : char) : boolean
            return "LIJFD".indexOf(c) >= 0;
!!!7200002.java!!!	checkBasicType() : boolean
            for (int i = 0; i < ARG_TYPE_LIMIT; i++) {
                assert ARG_TYPES[i].ordinal() == i;
                assert ARG_TYPES[i] == ALL_TYPES[i];
            }
            for (int i = 0; i < TYPE_LIMIT; i++) {
                assert ALL_TYPES[i].ordinal() == i;
            }
            assert ALL_TYPES[TYPE_LIMIT - 1] == V_TYPE;
            assert !Arrays.asList(ARG_TYPES).contains(V_TYPE);
            return true;
