class FeatureDescriptor
!!!6745602.java!!!	getName() : String
        return name;
!!!6745730.java!!!	setName(inout name : String) : void
        this.name = name;
!!!6745858.java!!!	getDisplayName() : String
        if (displayName == null) {
            return getName();
        }
        return displayName;
!!!6745986.java!!!	setDisplayName(inout displayName : String) : void
        this.displayName = displayName;
!!!6746114.java!!!	isExpert() : boolean
        return expert;
!!!6746242.java!!!	setExpert(inout expert : boolean) : void
        this.expert = expert;
!!!6746370.java!!!	isHidden() : boolean
        return hidden;
!!!6746498.java!!!	setHidden(inout hidden : boolean) : void
        this.hidden = hidden;
!!!6746626.java!!!	isPreferred() : boolean
        return preferred;
!!!6746754.java!!!	setPreferred(inout preferred : boolean) : void
        this.preferred = preferred;
!!!6746882.java!!!	getShortDescription() : String
        if (shortDescription == null) {
            return getDisplayName();
        }
        return shortDescription;
!!!6747010.java!!!	setShortDescription(inout text : String) : void
        shortDescription = text;
!!!6747138.java!!!	setValue(inout attributeName : String, inout value : Object) : void
        getTable().put(attributeName, value);
!!!6747266.java!!!	getValue(inout attributeName : String) : Object
        return (this.table != null)
                ? this.table.get(attributeName)
                : null;
!!!6747394.java!!!	attributeNames() : Enumeration
        return getTable().keys();
!!!6747522.java!!!	FeatureDescriptor(inout x : FeatureDescriptor, inout y : FeatureDescriptor)
        expert = x.expert | y.expert;
        hidden = x.hidden | y.hidden;
        preferred = x.preferred | y.preferred;
        name = y.name;
        shortDescription = x.shortDescription;
        if (y.shortDescription != null) {
            shortDescription = y.shortDescription;
        }
        displayName = x.displayName;
        if (y.displayName != null) {
            displayName = y.displayName;
        }
        classRef = x.classRef;
        if (y.classRef != null) {
            classRef = y.classRef;
        }
        addTable(x.table);
        addTable(y.table);
!!!6747650.java!!!	FeatureDescriptor(inout old : FeatureDescriptor)
        expert = old.expert;
        hidden = old.hidden;
        preferred = old.preferred;
        name = old.name;
        shortDescription = old.shortDescription;
        displayName = old.displayName;
        classRef = old.classRef;

        addTable(old.table);
!!!6747778.java!!!	addTable(inout table : Hashtable) : void
        if ((table != null) && !table.isEmpty()) {
            getTable().putAll(table);
        }
!!!6747906.java!!!	getTable() : Hashtable
        if (this.table == null) {
            this.table = new Hashtable<>();
        }
        return this.table;
!!!6748034.java!!!	setTransient(inout annotation : Transient) : void
        if ((annotation != null) && (null == getValue(TRANSIENT))) {
            setValue(TRANSIENT, annotation.value());
        }
!!!6748162.java!!!	isTransient() : boolean
        Object value = getValue(TRANSIENT);
        return (value instanceof Boolean)
                ? (Boolean) value
                : false;
!!!6748290.java!!!	setClass0(inout cls : Class) : void
        this.classRef = getWeakReference(cls);
!!!6748418.java!!!	getClass0() : Class
        return (this.classRef != null)
                ? this.classRef.get()
                : null;
!!!6748546.java!!!	getSoftReference(inout object : T) : Reference
        return (object != null)
                ? new SoftReference<>(object)
                : null;
!!!6748674.java!!!	getWeakReference(inout object : T) : Reference
        return (object != null)
                ? new WeakReference<>(object)
                : null;
!!!6748802.java!!!	getReturnType(inout base : Class, inout method : Method) : Class
        if (base == null) {
            base = method.getDeclaringClass();
        }
        return TypeResolver.erase(TypeResolver.resolveInClass(base, method.getGenericReturnType()));
!!!6748930.java!!!	getParameterTypes(inout base : Class, inout method : Method) : Class
        if (base == null) {
            base = method.getDeclaringClass();
        }
        return TypeResolver.erase(TypeResolver.resolveInClass(base, method.getGenericParameterTypes()));
!!!6749058.java!!!	toString() : String
        StringBuilder sb = new StringBuilder(getClass().getName());
        sb.append("[name=").append(this.name);
        appendTo(sb, "displayName", this.displayName);
        appendTo(sb, "shortDescription", this.shortDescription);
        appendTo(sb, "preferred", this.preferred);
        appendTo(sb, "hidden", this.hidden);
        appendTo(sb, "expert", this.expert);
        if ((this.table != null) && !this.table.isEmpty()) {
            sb.append("; values={");
            for (Entry<String, Object> entry : this.table.entrySet()) {
                sb.append(entry.getKey()).append("=").append(entry.getValue()).append("; ");
            }
            sb.setLength(sb.length() - 2);
            sb.append("}");
        }
        appendTo(sb);
        return sb.append("]").toString();
!!!6749314.java!!!	appendTo(inout sb : StringBuilder, inout name : String, inout reference : Reference) : void
        if (reference != null) {
            appendTo(sb, name, reference.get());
        }
!!!6749442.java!!!	appendTo(inout sb : StringBuilder, inout name : String, inout value : Object) : void
        if (value != null) {
            sb.append("; ").append(name).append("=").append(value);
        }
!!!6749570.java!!!	appendTo(inout sb : StringBuilder, inout name : String, inout value : boolean) : void
        if (value) {
            sb.append("; ").append(name);
        }
