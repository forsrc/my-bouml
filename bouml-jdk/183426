format 222
"temporal" // jdk1.8::java::time::temporal
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/time/temporal/"
  java_package "java.time.temporal"
  classview 176130 "temporal"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1050754 "TemporalAccessor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Framework-level interface defining read-only access to a temporal object,
such as a date, time, offset or some combination of these.
<p>
This is the base interface type for date, time and offset objects.
It is implemented by those classes that can provide information
as {@linkplain TemporalField fields} or {@linkplain TemporalQuery queries}.
<p>
Most date and time information can be represented as a number.
These are modeled using {@code TemporalField} with the number held using
a {@code long} to handle large values. Year, month and day-of-month are
simple examples of fields, but they also include instant and offsets.
See {@link ChronoField} for the standard set of fields.
<p>
Two pieces of date/time information cannot be represented by numbers,
the {@linkplain java.time.chrono.Chronology chronology} and the
{@linkplain java.time.ZoneId time-zone}.
These can be accessed via {@linkplain #query(TemporalQuery) queries} using
the static methods defined on {@link TemporalQuery}.
<p>
A sub-interface, {@link Temporal}, extends this definition to one that also
supports adjustment and manipulation on more complete temporal objects.
<p>
This interface is a framework-level interface that should not be widely
used in application code. Instead, applications should create and pass
around instances of concrete types, such as {@code LocalDate}.
There are many reasons for this, part of which is that implementations
of this interface may be in calendar systems other than ISO.
See {@link java.time.chrono.ChronoLocalDate} for a fuller discussion of the issues.

@implSpec
This interface places no restrictions on the mutability of implementations,
however immutability is strongly recommended.

@since 1.8
"
      operation 8322434 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified field is supported.
<p>
This checks if the date-time can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range} and {@link #get(TemporalField) get}
methods will throw an exception.

@implSpec
Implementations must check and handle all fields defined in {@link ChronoField}.
If the field is supported, then true must be returned, otherwise false must be returned.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
<p>
Implementations must ensure that no observable state is altered when this
read-only method is invoked.

@param field  the field to check, null returns false
@return true if this date-time can be queried for the field, false if not
"
      end

      operation 8322562 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the range of valid values for the specified field.
<p>
All fields can be expressed as a {@code long} integer.
This method returns an object that describes the valid range for that value.
The value of this temporal object is used to enhance the accuracy of the returned range.
If the date-time cannot return the range, because the field is unsupported or for
some other reason, an exception will be thrown.
<p>
Note that the result only describes the minimum and maximum valid values
and it is important not to read too much into them. For example, there
could be values within the range that are invalid for the field.

@implSpec
Implementations must check and handle all fields defined in {@link ChronoField}.
If the field is supported, then the range of the field must be returned.
If unsupported, then an {@code UnsupportedTemporalTypeException} must be thrown.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessorl)}
passing {@code this} as the argument.
<p>
Implementations must ensure that no observable state is altered when this
read-only method is invoked.
<p>
The default implementation must behave equivalent to this code:
<pre>
 if (field instanceof ChronoField) {
   if (isSupported(field)) {
     return field.range();
   }
   throw new UnsupportedTemporalTypeException(\"Unsupported field: \" + field);
 }
 return field.rangeRefinedBy(this);
</pre>

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8322690 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified field as an {@code int}.
<p>
This queries the date-time for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If the date-time cannot return the value, because the field is unsupported or for
some other reason, an exception will be thrown.

@implSpec
Implementations must check and handle all fields defined in {@link ChronoField}.
If the field is supported and has an {@code int} range, then the value of
the field must be returned.
If unsupported, then an {@code UnsupportedTemporalTypeException} must be thrown.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument.
<p>
Implementations must ensure that no observable state is altered when this
read-only method is invoked.
<p>
The default implementation must behave equivalent to this code:
<pre>
 if (range(field).isIntValue()) {
   return range(field).checkValidIntValue(getLong(field), field);
 }
 throw new UnsupportedTemporalTypeException(\"Invalid field \" + field + \" + for get() method, use getLong() instead\");
</pre>

@param field  the field to get, not null
@return the value for the field, within the valid range of values
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8322818 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the specified field as a {@code long}.
<p>
This queries the date-time for the value of the specified field.
The returned value may be outside the valid range of values for the field.
If the date-time cannot return the value, because the field is unsupported or for
some other reason, an exception will be thrown.

@implSpec
Implementations must check and handle all fields defined in {@link ChronoField}.
If the field is supported, then the value of the field must be returned.
If unsupported, then an {@code UnsupportedTemporalTypeException} must be thrown.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument.
<p>
Implementations must ensure that no observable state is altered when this
read-only method is invoked.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8322946 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries this date-time.
<p>
This queries this date-time using the specified query strategy object.
<p>
Queries are a key tool for extracting information from date-times.
They exists to externalize the process of querying, permitting different
approaches, as per the strategy design pattern.
Examples might be a query that checks if the date is the day before February 29th
in a leap year, or calculates the number of days to your next birthday.
<p>
The most common query implementations are method references, such as
{@code LocalDate::from} and {@code ZoneId::from}.
Additional implementations are provided as static methods on {@link TemporalQuery}.

@implSpec
The default implementation must behave equivalent to this code:
<pre>
 if (query == TemporalQueries.zoneId() ||
       query == TemporalQueries.chronology() || query == TemporalQueries.precision()) {
   return null;
 }
 return query.queryFrom(this);
</pre>
Future versions are permitted to add further queries to the if statement.
<p>
All classes implementing this interface and overriding this method must call
{@code TemporalAccessor.super.query(query)}. JDK classes may avoid calling
super if they provide behavior equivalent to the default behaviour, however
non-JDK classes may not utilize this optimization and must call {@code super}.
<p>
If the implementation can supply a value for one of the queries listed in the
if statement of the default implementation, then it must do so.
For example, an application-defined {@code HourMin} class storing the hour
and minute must override this method as follows:
<pre>
 if (query == TemporalQueries.precision()) {
   return MINUTES;
 }
 return TemporalAccessor.super.query(query);
</pre>
<p>
Implementations must ensure that no observable state is altered when this
read-only method is invoked.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query
@throws ArithmeticException if numeric overflow occurs
"
      end
    end

    class 1050882 "TemporalField"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A field of date-time, such as month-of-year or hour-of-minute.
<p>
Date and time is expressed using fields which partition the time-line into something
meaningful for humans. Implementations of this interface represent those fields.
<p>
The most commonly used units are defined in {@link ChronoField}.
Further fields are supplied in {@link IsoFields}, {@link WeekFields} and {@link JulianFields}.
Fields can also be written by application code by implementing this interface.
<p>
The field works using double dispatch. Client code calls methods on a date-time like
{@code LocalDateTime} which check if the field is a {@code ChronoField}.
If it is, then the date-time must handle it.
Otherwise, the method call is re-dispatched to the matching method in this interface.

@implSpec
This interface must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
Implementations should be {@code Serializable} where possible.
An enum is as effective implementation choice.

@since 1.8
"
      operation 8548994 "getDisplayName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the display name for the field in the requested locale.
<p>
If there is no display name for the locale then a suitable default must be returned.
<p>
The default implementation must check the locale is not null
and return {@code toString()}.

@param locale  the locale to use, not null
@return the display name for the locale or a suitable default, not null
"
      end

      operation 8549122 "getBaseUnit"
	public return_type class_ref 1051778 // TemporalUnit
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the unit that the field is measured in.
<p>
The unit of the field is the period that varies within the range.
For example, in the field 'MonthOfYear', the unit is 'Months'.
See also {@link #getRangeUnit()}.

@return the unit defining the base unit of the field, not null
"
      end

      operation 8549250 "getRangeUnit"
	public return_type class_ref 1051778 // TemporalUnit
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the range that the field is bound by.
<p>
The range of the field is the period that the field varies within.
For example, in the field 'MonthOfYear', the range is 'Years'.
See also {@link #getBaseUnit()}.
<p>
The range is never null. For example, the 'Year' field is shorthand for
'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.

@return the unit defining the range of the field, not null
"
      end

      operation 8549378 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the range of valid values for the field.
<p>
All fields can be expressed as a {@code long} integer.
This method returns an object that describes the valid range for that value.
This method is generally only applicable to the ISO-8601 calendar system.
<p>
Note that the result only describes the minimum and maximum valid values
and it is important not to read too much into them. For example, there
could be values within the range that are invalid for the field.

@return the range of valid values for the field, not null
"
      end

      operation 8549506 "isDateBased"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this field represents a component of a date.
<p>
A field is date-based if it can be derived from
{@link ChronoField#EPOCH_DAY EPOCH_DAY}.
Note that it is valid for both {@code isDateBased()} and {@code isTimeBased()}
to return false, such as when representing a field like minute-of-week.

@return true if this field is a component of a date
"
      end

      operation 8549634 "isTimeBased"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this field represents a component of a time.
<p>
A field is time-based if it can be derived from
{@link ChronoField#NANO_OF_DAY NANO_OF_DAY}.
Note that it is valid for both {@code isDateBased()} and {@code isTimeBased()}
to return false, such as when representing a field like minute-of-week.

@return true if this field is a component of a time
"
      end

      operation 8549762 "isSupportedBy"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this field is supported by the temporal object.
<p>
This determines whether the temporal accessor supports this field.
If this returns false, then the temporal cannot be queried for this field.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link TemporalAccessor#isSupported(TemporalField)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisField.isSupportedBy(temporal);
  temporal = temporal.isSupported(thisField);
</pre>
It is recommended to use the second approach, {@code isSupported(TemporalField)},
as it is a lot clearer to read in code.
<p>
Implementations should determine whether they are supported using the fields
available in {@link ChronoField}.

@param temporal  the temporal object to query, not null
@return true if the date-time can be queried for this field, false if not
"
      end

      operation 8549890 "rangeRefinedBy"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the range of valid values for this field using the temporal object to
refine the result.
<p>
This uses the temporal object to find the range of valid values for the field.
This is similar to {@link #range()}, however this method refines the result
using the temporal. For example, if the field is {@code DAY_OF_MONTH} the
{@code range} method is not accurate as there are four possible month lengths,
28, 29, 30 and 31 days. Using this method with a date allows the range to be
accurate, returning just one of those four options.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link TemporalAccessor#range(TemporalField)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisField.rangeRefinedBy(temporal);
  temporal = temporal.range(thisField);
</pre>
It is recommended to use the second approach, {@code range(TemporalField)},
as it is a lot clearer to read in code.
<p>
Implementations should perform any queries or calculations using the fields
available in {@link ChronoField}.
If the field is not supported an {@code UnsupportedTemporalTypeException} must be thrown.

@param temporal  the temporal object used to refine the result, not null
@return the range of valid values for this field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported by the temporal
"
      end

      operation 8550018 "getFrom"
	public explicit_return_type "long"
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of this field from the specified temporal object.
<p>
This queries the temporal object for the value of this field.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link TemporalAccessor#getLong(TemporalField)}
(or {@link TemporalAccessor#get(TemporalField)}):
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisField.getFrom(temporal);
  temporal = temporal.getLong(thisField);
</pre>
It is recommended to use the second approach, {@code getLong(TemporalField)},
as it is a lot clearer to read in code.
<p>
Implementations should perform any queries or calculations using the fields
available in {@link ChronoField}.
If the field is not supported an {@code UnsupportedTemporalTypeException} must be thrown.

@param temporal  the temporal object to query, not null
@return the value of this field, not null
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported by the temporal
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8550146 "adjustInto"
	public explicit_return_type "R"
	nparams 2
	  param inout name "temporal" explicit_type "R"
	  param in name "newValue" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends Temporal> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the specified temporal object with the value of this field set.
<p>
This returns a new temporal object based on the specified one with the value for
this field changed. For example, on a {@code LocalDate}, this could be used to
set the year, month or day-of-month.
The returned object has the same observable type as the specified object.
<p>
In some cases, changing a field is not fully defined. For example, if the target object is
a date representing the 31st January, then changing the month to February would be unclear.
In cases like this, the implementation is responsible for resolving the result.
Typically it will choose the previous valid date, which would be the last valid
day of February in this example.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link Temporal#with(TemporalField, long)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisField.adjustInto(temporal);
  temporal = temporal.with(thisField);
</pre>
It is recommended to use the second approach, {@code with(TemporalField)},
as it is a lot clearer to read in code.
<p>
Implementations should perform any queries or calculations using the fields
available in {@link ChronoField}.
If the field is not supported an {@code UnsupportedTemporalTypeException} must be thrown.
<p>
Implementations must not alter the specified temporal object.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable implementations.

@param <R>  the type of the Temporal object
@param temporal the temporal object to adjust, not null
@param newValue the new value of the field
@return the adjusted temporal object, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported by the temporal
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8550274 "resolve"
	public return_type class_ref 1050754 // TemporalAccessor
	nparams 3
	  param inout name "fieldValues" type class_ref 130178 // Map
	  param inout name "partialTemporal" type class_ref 1050754 // TemporalAccessor
	  param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves this field to provide a simpler alternative or a date.
<p>
This method is invoked during the resolve phase of parsing.
It is designed to allow application defined fields to be simplified into
more standard fields, such as those on {@code ChronoField}, or into a date.
<p>
Applications should not normally invoke this method directly.

@implSpec
If an implementation represents a field that can be simplified, or
combined with others, then this method must be implemented.
<p>
The specified map contains the current state of the parse.
The map is mutable and must be mutated to resolve the field and
any related fields. This method will only be invoked during parsing
if the map contains this field, and implementations should therefore
assume this field is present.
<p>
Resolving a field will consist of looking at the value of this field,
and potentially other fields, and either updating the map with a
simpler value, such as a {@code ChronoField}, or returning a
complete {@code ChronoLocalDate}. If a resolve is successful,
the code must remove all the fields that were resolved from the map,
including this field.
<p>
For example, the {@code IsoFields} class contains the quarter-of-year
and day-of-quarter fields. The implementation of this method in that class
resolves the two fields plus the {@link ChronoField#YEAR YEAR} into a
complete {@code LocalDate}. The resolve method will remove all three
fields from the map before returning the {@code LocalDate}.
<p>
A partially complete temporal is used to allow the chronology and zone
to be queried. In general, only the chronology will be needed.
Querying items other than the zone or chronology is undefined and
must not be relied on.
The behavior of other methods such as {@code get}, {@code getLong},
{@code range} and {@code isSupported} is unpredictable and the results undefined.
<p>
If resolution should be possible, but the data is invalid, the resolver
style should be used to determine an appropriate level of leniency, which
may require throwing a {@code DateTimeException} or {@code ArithmeticException}.
If no resolution is possible, the resolve method must return null.
<p>
When resolving time fields, the map will be altered and null returned.
When resolving date fields, the date is normally returned from the method,
with the map altered to remove the resolved fields. However, it would also
be acceptable for the date fields to be resolved into other {@code ChronoField}
instances that can produce a date, such as {@code EPOCH_DAY}.
<p>
Not all {@code TemporalAccessor} implementations are accepted as return values.
Implementations that call this method must accept {@code ChronoLocalDate},
{@code ChronoLocalDateTime}, {@code ChronoZonedDateTime} and {@code LocalTime}.
<p>
The default implementation must return null.

@param fieldValues  the map of fields to values, which can be updated, not null
@param partialTemporal  the partially complete temporal to query for zone and
 chronology; querying for other things is undefined and not recommended, not null
@param resolverStyle  the requested type of resolve, not null
@return the resolved temporal object; null if resolving only
 changed the map, or no resolve occurred
@throws ArithmeticException if numeric overflow occurs
@throws DateTimeException if resolving results in an error. This must not be thrown
 by querying a field on the temporal without first checking if it is supported
"
      end

      operation 8550402 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets a descriptive name for the field.
<p>
The should be of the format 'BaseOfRange', such as 'MonthOfYear',
unless the field has a range of {@code FOREVER}, when only
the base unit is mentioned, such as 'Year' or 'Era'.

@return the name of the field, not null
"
      end
    end

    class 1051010 "ValueRange"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The range of valid values for a date-time field.
<p>
All {@link TemporalField} instances have a valid range of values.
For example, the ISO day-of-month runs from 1 to somewhere between 28 and 31.
This class captures that valid range.
<p>
It is important to be aware of the limitations of this class.
Only the minimum and maximum values are provided.
It is possible for there to be invalid values within the outer range.
For example, a weird field may have valid values of 1, 2, 4, 6, 7, thus
have a range of '1 - 7', despite that fact that values 3 and 5 are invalid.
<p>
Instances of this class are not tied to a specific field.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3468546 // <realization>
	relation 3468546 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3468546 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1975938 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7317881728594519368L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1976066 "minSmallest"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The smallest minimum value.

"
      end

      attribute 1976194 "minLargest"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The largest minimum value.

"
      end

      attribute 1976322 "maxSmallest"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The smallest maximum value.

"
      end

      attribute 1976450 "maxLargest"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The largest maximum value.

"
      end

      operation 8562050 "of"
	class_operation public return_type class_ref 1051010 // ValueRange
	nparams 2
	  param in name "min" explicit_type "long"
	  param in name "max" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a fixed value range.
<p>
This factory obtains a range where the minimum and maximum values are fixed.
For example, the ISO month-of-year always runs from 1 to 12.

@param min  the minimum value
@param max  the maximum value
@return the ValueRange for min, max, not null
@throws IllegalArgumentException if the minimum is greater than the maximum
"
      end

      operation 8562178 "of"
	class_operation public return_type class_ref 1051010 // ValueRange
	nparams 3
	  param in name "min" explicit_type "long"
	  param in name "maxSmallest" explicit_type "long"
	  param in name "maxLargest" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a variable value range.
<p>
This factory obtains a range where the minimum value is fixed and the maximum value may vary.
For example, the ISO day-of-month always starts at 1, but ends between 28 and 31.

@param min  the minimum value
@param maxSmallest  the smallest maximum value
@param maxLargest  the largest maximum value
@return the ValueRange for min, smallest max, largest max, not null
@throws IllegalArgumentException if
    the minimum is greater than the smallest maximum,
 or the smallest maximum is greater than the largest maximum
"
      end

      operation 8562306 "of"
	class_operation public return_type class_ref 1051010 // ValueRange
	nparams 4
	  param in name "minSmallest" explicit_type "long"
	  param in name "minLargest" explicit_type "long"
	  param in name "maxSmallest" explicit_type "long"
	  param in name "maxLargest" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a fully variable value range.
<p>
This factory obtains a range where both the minimum and maximum value may vary.

@param minSmallest  the smallest minimum value
@param minLargest  the largest minimum value
@param maxSmallest  the smallest maximum value
@param maxLargest  the largest maximum value
@return the ValueRange for smallest min, largest min, smallest max, largest max, not null
@throws IllegalArgumentException if
    the smallest minimum is greater than the smallest maximum,
 or the smallest maximum is greater than the largest maximum
 or the largest minimum is greater than the largest maximum
"
      end

      operation 8562434 "ValueRange"
	private explicit_return_type ""
	nparams 4
	  param in name "minSmallest" explicit_type "long"
	  param in name "minLargest" explicit_type "long"
	  param in name "maxSmallest" explicit_type "long"
	  param in name "maxLargest" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restrictive constructor.

@param minSmallest  the smallest minimum value
@param minLargest  the largest minimum value
@param maxSmallest  the smallest minimum value
@param maxLargest  the largest minimum value
"
      end

      operation 8562562 "isFixed"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Is the value range fixed and fully known.
<p>
For example, the ISO day-of-month runs from 1 to between 28 and 31.
Since there is uncertainty about the maximum value, the range is not fixed.
However, for the month of January, the range is always 1 to 31, thus it is fixed.

@return true if the set of values is fixed
"
      end

      operation 8562690 "getMinimum"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the minimum value that the field can take.
<p>
For example, the ISO day-of-month always starts at 1.
The minimum is therefore 1.

@return the minimum value for this field
"
      end

      operation 8562818 "getLargestMinimum"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the largest possible minimum value that the field can take.
<p>
For example, the ISO day-of-month always starts at 1.
The largest minimum is therefore 1.

@return the largest possible minimum value for this field
"
      end

      operation 8562946 "getSmallestMaximum"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the smallest possible maximum value that the field can take.
<p>
For example, the ISO day-of-month runs to between 28 and 31 days.
The smallest maximum is therefore 28.

@return the smallest possible maximum value for this field
"
      end

      operation 8563074 "getMaximum"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum value that the field can take.
<p>
For example, the ISO day-of-month runs to between 28 and 31 days.
The maximum is therefore 31.

@return the maximum value for this field
"
      end

      operation 8563202 "isIntValue"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if all values in the range fit in an {@code int}.
<p>
This checks that all valid values are within the bounds of an {@code int}.
<p>
For example, the ISO month-of-year has values from 1 to 12, which fits in an {@code int}.
By comparison, ISO nano-of-day runs from 1 to 86,400,000,000,000 which does not fit in an {@code int}.
<p>
This implementation uses {@link #getMinimum()} and {@link #getMaximum()}.

@return true if a valid value always fits in an {@code int}
"
      end

      operation 8563330 "isValidValue"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the value is within the valid range.
<p>
This checks that the value is within the stored range of values.

@param value  the value to check
@return true if the value is valid
"
      end

      operation 8563458 "isValidIntValue"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the value is within the valid range and that all values
in the range fit in an {@code int}.
<p>
This method combines {@link #isIntValue()} and {@link #isValidValue(long)}.

@param value  the value to check
@return true if the value is valid and fits in an {@code int}
"
      end

      operation 8563586 "checkValidValue"
	public explicit_return_type "long"
	nparams 2
	  param in name "value" explicit_type "long"
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the specified value is valid.
<p>
This validates that the value is within the valid range of values.
The field is only used to improve the error message.

@param value  the value to check
@param field  the field being checked, may be null
@return the value that was passed in
@see #isValidValue(long)
"
      end

      operation 8563714 "checkValidIntValue"
	public explicit_return_type "int"
	nparams 2
	  param in name "value" explicit_type "long"
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the specified value is valid and fits in an {@code int}.
<p>
This validates that the value is within the valid range of values and that
all valid values are within the bounds of an {@code int}.
The field is only used to improve the error message.

@param value  the value to check
@param field  the field being checked, may be null
@return the value that was passed in
@see #isValidIntValue(long)
"
      end

      operation 8563842 "genInvalidFieldMessage"
	private return_type class_ref 128130 // String
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8563970 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Restore the state of an ValueRange from the stream.
Check that the values are valid.

@param s the stream to read
@throws InvalidObjectException if
    the smallest minimum is greater than the smallest maximum,
 or the smallest maximum is greater than the largest maximum
 or the largest minimum is greater than the largest maximum
@throws ClassNotFoundException if a class cannot be resolved
"
      end

      operation 8564098 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this range is equal to another range.
<p>
The comparison is based on the four values, minimum, largest minimum,
smallest maximum and maximum.
Only objects of type {@code ValueRange} are compared, other types return false.

@param obj  the object to check, null returns false
@return true if this is equal to the other range
"
      end

      operation 8564226 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this range.

@return a suitable hash code
"
      end

      operation 8564354 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this range as a {@code String}.
<p>
The format will be '{min}/{largestMin} - {smallestMax}/{max}',
where the largestMin or smallestMax sections may be omitted, together
with associated slash, if they are the same as the min or max.

@return a string representation of this range, not null
"
      end
    end

    class 1051138 "TemporalQuery"
      visibility public stereotype "interface"
      nformals 1
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Strategy for querying a temporal object.
<p>
Queries are a key tool for extracting information from temporal objects.
They exist to externalize the process of querying, permitting different
approaches, as per the strategy design pattern.
Examples might be a query that checks if the date is the day before February 29th
in a leap year, or calculates the number of days to your next birthday.
<p>
The {@link TemporalField} interface provides another mechanism for querying
temporal objects. That interface is limited to returning a {@code long}.
By contrast, queries can return any type.
<p>
There are two equivalent ways of using a {@code TemporalQuery}.
The first is to invoke the method on this interface directly.
The second is to use {@link TemporalAccessor#query(TemporalQuery)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisQuery.queryFrom(temporal);
  temporal = temporal.query(thisQuery);
</pre>
It is recommended to use the second approach, {@code query(TemporalQuery)},
as it is a lot clearer to read in code.
<p>
The most common implementations are method references, such as
{@code LocalDate::from} and {@code ZoneId::from}.
Additional common queries are provided as static methods in {@link TemporalQueries}.

@implSpec
This interface places no restrictions on the mutability of implementations,
however immutability is strongly recommended.

@param <R> the type returned from the query

@since 1.8
"
      operation 8561666 "queryFrom"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries the specified temporal object.
<p>
This queries the specified temporal object to return an object using the logic
encapsulated in the implementing class.
Examples might be a query that checks if the date is the day before February 29th
in a leap year, or calculates the number of days to your next birthday.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link TemporalAccessor#query(TemporalQuery)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisQuery.queryFrom(temporal);
  temporal = temporal.query(thisQuery);
</pre>
It is recommended to use the second approach, {@code query(TemporalQuery)},
as it is a lot clearer to read in code.

@implSpec
The implementation must take the input object and query it.
The implementation defines the logic of the query and is responsible for
documenting that logic.
It may use any method on {@code TemporalAccessor} to determine the result.
The input object must not be altered.
<p>
The input temporal object may be in a calendar system other than ISO.
Implementations may choose to document compatibility with other calendar systems,
or reject non-ISO temporal objects by {@link TemporalQueries#chronology() querying the chronology}.
<p>
This method may be called from multiple threads in parallel.
It must be thread-safe when invoked.

@param temporal  the temporal object to query, not null
@return the queried value, may return null to indicate not found
@throws DateTimeException if unable to query
@throws ArithmeticException if numeric overflow occurs
"
      end
    end

    class 1051266 "TemporalAdjuster"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Strategy for adjusting a temporal object.
<p>
Adjusters are a key tool for modifying temporal objects.
They exist to externalize the process of adjustment, permitting different
approaches, as per the strategy design pattern.
Examples might be an adjuster that sets the date avoiding weekends, or one that
sets the date to the last day of the month.
<p>
There are two equivalent ways of using a {@code TemporalAdjuster}.
The first is to invoke the method on this interface directly.
The second is to use {@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisAdjuster.adjustInto(temporal);
  temporal = temporal.with(thisAdjuster);
</pre>
It is recommended to use the second approach, {@code with(TemporalAdjuster)},
as it is a lot clearer to read in code.
<p>
The {@link TemporalAdjusters} class contains a standard set of adjusters,
available as static methods.
These include:
<ul>
<li>finding the first or last day of the month
<li>finding the first day of next month
<li>finding the first or last day of the year
<li>finding the first day of next year
<li>finding the first or last day-of-week within a month, such as \"first Wednesday in June\"
<li>finding the next or previous day-of-week, such as \"next Thursday\"
</ul>

@implSpec
This interface places no restrictions on the mutability of implementations,
however immutability is strongly recommended.

@see TemporalAdjusters
@since 1.8
"
      operation 8323074 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjusts the specified temporal object.
<p>
This adjusts the specified temporal object using the logic
encapsulated in the implementing class.
Examples might be an adjuster that sets the date avoiding weekends, or one that
sets the date to the last day of the month.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisAdjuster.adjustInto(temporal);
  temporal = temporal.with(thisAdjuster);
</pre>
It is recommended to use the second approach, {@code with(TemporalAdjuster)},
as it is a lot clearer to read in code.

@implSpec
The implementation must take the input object and adjust it.
The implementation defines the logic of the adjustment and is responsible for
documenting that logic. It may use any method on {@code Temporal} to
query the temporal object and perform the adjustment.
The returned object must have the same observable type as the input object
<p>
The input object must not be altered.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable temporal objects.
<p>
The input temporal object may be in a calendar system other than ISO.
Implementations may choose to document compatibility with other calendar systems,
or reject non-ISO temporal objects by {@link TemporalQueries#chronology() querying the chronology}.
<p>
This method may be called from multiple threads in parallel.
It must be thread-safe when invoked.

@param temporal  the temporal object to adjust, not null
@return an object of the same observable type with the adjustment made, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end
    end

    class 1051394 "Temporal"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Framework-level interface defining read-write access to a temporal object,
such as a date, time, offset or some combination of these.
<p>
This is the base interface type for date, time and offset objects that
are complete enough to be manipulated using plus and minus.
It is implemented by those classes that can provide and manipulate information
as {@linkplain TemporalField fields} or {@linkplain TemporalQuery queries}.
See {@link TemporalAccessor} for the read-only version of this interface.
<p>
Most date and time information can be represented as a number.
These are modeled using {@code TemporalField} with the number held using
a {@code long} to handle large values. Year, month and day-of-month are
simple examples of fields, but they also include instant and offsets.
See {@link ChronoField} for the standard set of fields.
<p>
Two pieces of date/time information cannot be represented by numbers,
the {@linkplain java.time.chrono.Chronology chronology} and the
{@linkplain java.time.ZoneId time-zone}.
These can be accessed via {@link #query(TemporalQuery) queries} using
the static methods defined on {@link TemporalQuery}.
<p>
This interface is a framework-level interface that should not be widely
used in application code. Instead, applications should create and pass
around instances of concrete types, such as {@code LocalDate}.
There are many reasons for this, part of which is that implementations
of this interface may be in calendar systems other than ISO.
See {@link java.time.chrono.ChronoLocalDate} for a fuller discussion of the issues.

<h3>When to implement</h3>
<p>
A class should implement this interface if it meets three criteria:
<ul>
<li>it provides access to date/time/offset information, as per {@code TemporalAccessor}
<li>the set of fields are contiguous from the largest to the smallest
<li>the set of fields are complete, such that no other field is needed to define the
 valid range of values for the fields that are represented
</ul>
<p>
Four examples make this clear:
<ul>
<li>{@code LocalDate} implements this interface as it represents a set of fields
 that are contiguous from days to forever and require no external information to determine
 the validity of each date. It is therefore able to implement plus/minus correctly.
<li>{@code LocalTime} implements this interface as it represents a set of fields
 that are contiguous from nanos to within days and require no external information to determine
 validity. It is able to implement plus/minus correctly, by wrapping around the day.
<li>{@code MonthDay}, the combination of month-of-year and day-of-month, does not implement
 this interface.  While the combination is contiguous, from days to months within years,
 the combination does not have sufficient information to define the valid range of values
 for day-of-month.  As such, it is unable to implement plus/minus correctly.
<li>The combination day-of-week and day-of-month (\"Friday the 13th\") should not implement
 this interface. It does not represent a contiguous set of fields, as days to weeks overlaps
 days to months.
</ul>

@implSpec
This interface places no restrictions on the mutability of implementations,
however immutability is strongly recommended.
All implementations must be {@link Comparable}.

@since 1.8
"
      classrelation 3424514 // <generalisation>
	relation 3424514 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3424514 // <generalisation>
	  b parent class_ref 1050754 // TemporalAccessor
      end

      operation 8333186 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this date-time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.

@implSpec
Implementations must check and handle all units defined in {@link ChronoUnit}.
If the unit is supported, then true must be returned, otherwise false must be returned.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
<p>
Implementations must ensure that no observable state is altered when this
read-only method is invoked.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not
"
      end

      operation 8333314 "with"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an adjusted object of the same type as this object with the adjustment made.
<p>
This adjusts this date-time according to the rules of the specified adjuster.
A simple adjuster might simply set the one of the fields, such as the year field.
A more complex adjuster might set the date to the last day of the month.
A selection of common adjustments is provided in
{@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.
These include finding the \"last day of the month\" and \"next Wednesday\".
The adjuster is responsible for handling special cases, such as the varying
lengths of month and leap years.
<p>
Some example code indicating how and why this method is used:
<pre>
 date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster
 date = date.with(lastDayOfMonth());  // static import from Adjusters
 date = date.with(next(WEDNESDAY));   // static import from Adjusters and DayOfWeek
</pre>

@implSpec
<p>
Implementations must not alter either this object or the specified temporal object.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable implementations.
<p>
The default implementation must behave equivalent to this code:
<pre>
 return adjuster.adjustInto(this);
</pre>

@param adjuster  the adjuster to use, not null
@return an object of the same type with the specified adjustment made, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8333442 "with"
	public return_type class_ref 1051394 // Temporal
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object of the same type as this object with the specified field altered.
<p>
This returns a new object based on this one with the value for the specified field changed.
For example, on a {@code LocalDate}, this could be used to set the year, month or day-of-month.
The returned object will have the same observable type as this object.
<p>
In some cases, changing a field is not fully defined. For example, if the target object is
a date representing the 31st January, then changing the month to February would be unclear.
In cases like this, the field is responsible for resolving the result. Typically it will choose
the previous valid date, which would be the last valid day of February in this example.

@implSpec
Implementations must check and handle all fields defined in {@link ChronoField}.
If the field is supported, then the adjustment must be performed.
If unsupported, then an {@code UnsupportedTemporalTypeException} must be thrown.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the first argument.
<p>
Implementations must not alter this object.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable implementations.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return an object of the same type with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8333570 "plus"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an object of the same type as this object with an amount added.
<p>
This adjusts this temporal, adding according to the rules of the specified amount.
The amount is typically a {@link java.time.Period} but may be any other type implementing
the {@link TemporalAmount} interface, such as {@link java.time.Duration}.
<p>
Some example code indicating how and why this method is used:
<pre>
 date = date.plus(period);                // add a Period instance
 date = date.plus(duration);              // add a Duration instance
 date = date.plus(workingDays(6));        // example user-written workingDays method
</pre>
<p>
Note that calling {@code plus} followed by {@code minus} is not guaranteed to
return the same date-time.

@implSpec
<p>
Implementations must not alter either this object or the specified temporal object.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable implementations.
<p>
The default implementation must behave equivalent to this code:
<pre>
 return amount.addTo(this);
</pre>

@param amount  the amount to add, not null
@return an object of the same type with the specified adjustment made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8333698 "plus"
	public return_type class_ref 1051394 // Temporal
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object of the same type as this object with the specified period added.
<p>
This method returns a new object based on this one with the specified period added.
For example, on a {@code LocalDate}, this could be used to add a number of years, months or days.
The returned object will have the same observable type as this object.
<p>
In some cases, changing a field is not fully defined. For example, if the target object is
a date representing the 31st January, then adding one month would be unclear.
In cases like this, the field is responsible for resolving the result. Typically it will choose
the previous valid date, which would be the last valid day of February in this example.

@implSpec
Implementations must check and handle all units defined in {@link ChronoUnit}.
If the unit is supported, then the addition must be performed.
If unsupported, then an {@code UnsupportedTemporalTypeException} must be thrown.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the first argument.
<p>
Implementations must not alter this object.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable implementations.

@param amountToAdd  the amount of the specified unit to add, may be negative
@param unit  the unit of the amount to add, not null
@return an object of the same type with the specified period added, not null
@throws DateTimeException if the unit cannot be added
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8333826 "minus"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an object of the same type as this object with an amount subtracted.
<p>
This adjusts this temporal, subtracting according to the rules of the specified amount.
The amount is typically a {@link java.time.Period} but may be any other type implementing
the {@link TemporalAmount} interface, such as {@link java.time.Duration}.
<p>
Some example code indicating how and why this method is used:
<pre>
 date = date.minus(period);               // subtract a Period instance
 date = date.minus(duration);             // subtract a Duration instance
 date = date.minus(workingDays(6));       // example user-written workingDays method
</pre>
<p>
Note that calling {@code plus} followed by {@code minus} is not guaranteed to
return the same date-time.

@implSpec
<p>
Implementations must not alter either this object or the specified temporal object.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable implementations.
<p>
The default implementation must behave equivalent to this code:
<pre>
 return amount.subtractFrom(this);
</pre>

@param amount  the amount to subtract, not null
@return an object of the same type with the specified adjustment made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8333954 "minus"
	public return_type class_ref 1051394 // Temporal
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object of the same type as this object with the specified period subtracted.
<p>
This method returns a new object based on this one with the specified period subtracted.
For example, on a {@code LocalDate}, this could be used to subtract a number of years, months or days.
The returned object will have the same observable type as this object.
<p>
In some cases, changing a field is not fully defined. For example, if the target object is
a date representing the 31st March, then subtracting one month would be unclear.
In cases like this, the field is responsible for resolving the result. Typically it will choose
the previous valid date, which would be the last valid day of February in this example.

@implSpec
Implementations must behave in a manor equivalent to the default method behavior.
<p>
Implementations must not alter this object.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable implementations.
<p>
The default implementation must behave equivalent to this code:
<pre>
 return (amountToSubtract == Long.MIN_VALUE ?
     plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));
</pre>

@param amountToSubtract  the amount of the specified unit to subtract, may be negative
@param unit  the unit of the amount to subtract, not null
@return an object of the same type with the specified period subtracted, not null
@throws DateTimeException if the unit cannot be subtracted
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8334082 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Calculates the amount of time until another temporal in terms of the specified unit.
<p>
This calculates the amount of time between two temporal objects
in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified temporal.
The end point is converted to be of the same type as the start point if different.
The result will be negative if the end is before the start.
For example, the amount in hours between two temporal objects can be
calculated using {@code startTime.until(endTime, HOURS)}.
<p>
The calculation returns a whole number, representing the number of
complete units between the two temporals.
For example, the amount in hours between the times 11:30 and 13:29
will only be one hour as it is one minute short of two hours.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  temporal = start.until(end, unit);
  temporal = unit.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
For example, this method allows the number of days between two dates to
be calculated:
<pre>
 long daysBetween = start.until(end, DAYS);
 // or alternatively
 long daysBetween = DAYS.between(start, end);
</pre>

@implSpec
Implementations must begin by checking to ensure that the input temporal
object is of the same observable type as the implementation.
They must then perform the calculation for all instances of {@link ChronoUnit}.
An {@code UnsupportedTemporalTypeException} must be thrown for {@code ChronoUnit}
instances that are unsupported.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal as
the second argument.
<p>
In summary, implementations must behave in a manner equivalent to this pseudo-code:
<pre>
 // convert the end temporal to the same type as this class
 if (unit instanceof ChronoUnit) {
   // if unit is supported, then calculate and return result
   // else throw UnsupportedTemporalTypeException for unsupported units
 }
 return unit.between(this, convertedEndTemporal);
</pre>
<p>
Note that the unit's {@code between} method must only be invoked if the
two temporal objects have exactly the same type evaluated by {@code getClass()}.
<p>
Implementations must ensure that no observable state is altered when this
read-only method is invoked.

@param endExclusive  the end temporal, exclusive, converted to be of the
 same type as this object, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this temporal object and the specified one
 in terms of the unit; positive if the specified object is later than this one,
 negative if it is earlier than this one
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to the same type as this temporal
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end
    end

    class 1051650 "TemporalAmount"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Framework-level interface defining an amount of time, such as
\"6 hours\", \"8 days\" or \"2 years and 3 months\".
<p>
This is the base interface type for amounts of time.
An amount is distinct from a date or time-of-day in that it is not tied
to any specific point on the time-line.
<p>
The amount can be thought of as a {@code Map} of {@link TemporalUnit} to
{@code long}, exposed via {@link #getUnits()} and {@link #get(TemporalUnit)}.
A simple case might have a single unit-value pair, such as \"6 hours\".
A more complex case may have multiple unit-value pairs, such as
\"7 years, 3 months and 5 days\".
<p>
There are two common implementations.
{@link Period} is a date-based implementation, storing years, months and days.
{@link Duration} is a time-based implementation, storing seconds and nanoseconds,
but providing some access using other duration based units such as minutes,
hours and fixed 24-hour days.
<p>
This interface is a framework-level interface that should not be widely
used in application code. Instead, applications should create and pass
around instances of concrete types, such as {@code Period} and {@code Duration}.

@implSpec
This interface places no restrictions on the mutability of implementations,
however immutability is strongly recommended.

@since 1.8
"
      operation 8324738 "get"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the requested unit.
The units returned from {@link #getUnits()} uniquely define the
value of the {@code TemporalAmount}.  A value must be returned
for each unit listed in {@code getUnits}.

@implSpec
Implementations may declare support for units not listed by {@link #getUnits()}.
Typically, the implementation would define additional units
as conversions for the convenience of developers.

@param unit the {@code TemporalUnit} for which to return the value
@return the long value of the unit
@throws DateTimeException if a value for the unit cannot be obtained
@throws UnsupportedTemporalTypeException if the {@code unit} is not supported
"
      end

      operation 8324866 "getUnits"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TemporalUnit> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of units uniquely defining the value of this TemporalAmount.
The list of {@code TemporalUnits} is defined by the implementation class.
The list is a snapshot of the units at the time {@code getUnits}
is called and is not mutable.
The units are ordered from longest duration to the shortest duration
of the unit.

@implSpec
The list of units completely and uniquely represents the
state of the object without omissions, overlaps or duplication.
The units are in order from longest duration to shortest.

@return the List of {@code TemporalUnits}; not null
"
      end

      operation 8324994 "addTo"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds to the specified temporal object.
<p>
Adds the amount to the specified temporal object using the logic
encapsulated in the implementing class.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link Temporal#plus(TemporalAmount)}:
<pre>
  // These two lines are equivalent, but the second approach is recommended
  dateTime = amount.addTo(dateTime);
  dateTime = dateTime.plus(adder);
</pre>
It is recommended to use the second approach, {@code plus(TemporalAmount)},
as it is a lot clearer to read in code.

@implSpec
The implementation must take the input object and add to it.
The implementation defines the logic of the addition and is responsible for
documenting that logic. It may use any method on {@code Temporal} to
query the temporal object and perform the addition.
The returned object must have the same observable type as the input object
<p>
The input object must not be altered.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable temporal objects.
<p>
The input temporal object may be in a calendar system other than ISO.
Implementations may choose to document compatibility with other calendar systems,
or reject non-ISO temporal objects by {@link TemporalQueries#chronology() querying the chronology}.
<p>
This method may be called from multiple threads in parallel.
It must be thread-safe when invoked.

@param temporal  the temporal object to add the amount to, not null
@return an object of the same observable type with the addition made, not null
@throws DateTimeException if unable to add
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8325122 "subtractFrom"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subtracts this object from the specified temporal object.
<p>
Subtracts the amount from the specified temporal object using the logic
encapsulated in the implementing class.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link Temporal#minus(TemporalAmount)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  dateTime = amount.subtractFrom(dateTime);
  dateTime = dateTime.minus(amount);
</pre>
It is recommended to use the second approach, {@code minus(TemporalAmount)},
as it is a lot clearer to read in code.

@implSpec
The implementation must take the input object and subtract from it.
The implementation defines the logic of the subtraction and is responsible for
documenting that logic. It may use any method on {@code Temporal} to
query the temporal object and perform the subtraction.
The returned object must have the same observable type as the input object
<p>
The input object must not be altered.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable temporal objects.
<p>
The input temporal object may be in a calendar system other than ISO.
Implementations may choose to document compatibility with other calendar systems,
or reject non-ISO temporal objects by {@link TemporalQueries#chronology() querying the chronology}.
<p>
This method may be called from multiple threads in parallel.
It must be thread-safe when invoked.

@param temporal  the temporal object to subtract the amount from, not null
@return an object of the same observable type with the subtraction made, not null
@throws DateTimeException if unable to subtract
@throws ArithmeticException if numeric overflow occurs
"
      end
    end

    class 1051778 "TemporalUnit"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A unit of date-time, such as Days or Hours.
<p>
Measurement of time is built on units, such as years, months, days, hours, minutes and seconds.
Implementations of this interface represent those units.
<p>
An instance of this interface represents the unit itself, rather than an amount of the unit.
See {@link Period} for a class that represents an amount in terms of the common units.
<p>
The most commonly used units are defined in {@link ChronoUnit}.
Further units are supplied in {@link IsoFields}.
Units can also be written by application code by implementing this interface.
<p>
The unit works using double dispatch. Client code calls methods on a date-time like
{@code LocalDateTime} which check if the unit is a {@code ChronoUnit}.
If it is, then the date-time must handle it.
Otherwise, the method call is re-dispatched to the matching method in this interface.

@implSpec
This interface must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
It is recommended to use an enum where possible.

@since 1.8
"
      operation 8552450 "getDuration"
	public return_type class_ref 1049858 // Duration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the duration of this unit, which may be an estimate.
<p>
All units return a duration measured in standard nanoseconds from this method.
The duration will be positive and non-zero.
For example, an hour has a duration of {@code 60 * 60 * 1,000,000,000ns}.
<p>
Some units may return an accurate duration while others return an estimate.
For example, days have an estimated duration due to the possibility of
daylight saving time changes.
To determine if the duration is an estimate, use {@link #isDurationEstimated()}.

@return the duration of this unit, which may be an estimate, not null
"
      end

      operation 8552578 "isDurationEstimated"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the duration of the unit is an estimate.
<p>
All units have a duration, however the duration is not always accurate.
For example, days have an estimated duration due to the possibility of
daylight saving time changes.
This method returns true if the duration is an estimate and false if it is
accurate. Note that accurate/estimated ignores leap seconds.

@return true if the duration is estimated, false if accurate
"
      end

      operation 8552706 "isDateBased"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this unit represents a component of a date.
<p>
A date is time-based if it can be used to imply meaning from a date.
It must have a {@linkplain #getDuration() duration} that is an integral
multiple of the length of a standard day.
Note that it is valid for both {@code isDateBased()} and {@code isTimeBased()}
to return false, such as when representing a unit like 36 hours.

@return true if this unit is a component of a date
"
      end

      operation 8552834 "isTimeBased"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this unit represents a component of a time.
<p>
A unit is time-based if it can be used to imply meaning from a time.
It must have a {@linkplain #getDuration() duration} that divides into
the length of a standard day without remainder.
Note that it is valid for both {@code isDateBased()} and {@code isTimeBased()}
to return false, such as when representing a unit like 36 hours.

@return true if this unit is a component of a time
"
      end

      operation 8552962 "isSupportedBy"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this unit is supported by the specified temporal object.
<p>
This checks that the implementing date-time can add/subtract this unit.
This can be used to avoid throwing an exception.
<p>
This default implementation derives the value using
{@link Temporal#plus(long, TemporalUnit)}.

@param temporal  the temporal object to check, not null
@return true if the unit is supported
"
      end

      operation 8553090 "addTo"
	public explicit_return_type "R"
	nparams 2
	  param inout name "temporal" explicit_type "R"
	  param in name "amount" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends Temporal> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the specified temporal object with the specified period added.
<p>
The period added is a multiple of this unit. For example, this method
could be used to add \"3 days\" to a date by calling this method on the
instance representing \"days\", passing the date and the period \"3\".
The period to be added may be negative, which is equivalent to subtraction.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link Temporal#plus(long, TemporalUnit)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisUnit.addTo(temporal);
  temporal = temporal.plus(thisUnit);
</pre>
It is recommended to use the second approach, {@code plus(TemporalUnit)},
as it is a lot clearer to read in code.
<p>
Implementations should perform any queries or calculations using the units
available in {@link ChronoUnit} or the fields available in {@link ChronoField}.
If the unit is not supported an {@code UnsupportedTemporalTypeException} must be thrown.
<p>
Implementations must not alter the specified temporal object.
Instead, an adjusted copy of the original must be returned.
This provides equivalent, safe behavior for immutable and mutable implementations.

@param <R>  the type of the Temporal object
@param temporal  the temporal object to adjust, not null
@param amount  the amount of this unit to add, positive or negative
@return the adjusted temporal object, not null
@throws DateTimeException if the amount cannot be added
@throws UnsupportedTemporalTypeException if the unit is not supported by the temporal
"
      end

      operation 8553218 "between"
	public explicit_return_type "long"
	nparams 2
	  param inout name "temporal1Inclusive" type class_ref 1051394 // Temporal
	  param inout name "temporal2Exclusive" type class_ref 1051394 // Temporal
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Calculates the amount of time between two temporal objects.
<p>
This calculates the amount in terms of this unit. The start and end
points are supplied as temporal objects and must be of compatible types.
The implementation will convert the second type to be an instance of the
first type before the calculating the amount.
The result will be negative if the end is before the start.
For example, the amount in hours between two temporal objects can be
calculated using {@code HOURS.between(startTime, endTime)}.
<p>
The calculation returns a whole number, representing the number of
complete units between the two temporals.
For example, the amount in hours between the times 11:30 and 13:29
will only be one hour as it is one minute short of two hours.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method directly.
The second is to use {@link Temporal#until(Temporal, TemporalUnit)}:
<pre>
  // these two lines are equivalent
  between = thisUnit.between(start, end);
  between = start.until(end, thisUnit);
</pre>
The choice should be made based on which makes the code more readable.
<p>
For example, this method allows the number of days between two dates to
be calculated:
<pre>
 long daysBetween = DAYS.between(start, end);
 // or alternatively
 long daysBetween = start.until(end, DAYS);
</pre>
<p>
Implementations should perform any queries or calculations using the units
available in {@link ChronoUnit} or the fields available in {@link ChronoField}.
If the unit is not supported an {@code UnsupportedTemporalTypeException} must be thrown.
Implementations must not alter the specified temporal objects.

@implSpec
Implementations must begin by checking to if the two temporals have the
same type using {@code getClass()}. If they do not, then the result must be
obtained by calling {@code temporal1Inclusive.until(temporal2Exclusive, this)}.

@param temporal1Inclusive  the base temporal object, not null
@param temporal2Exclusive  the other temporal object, exclusive, not null
@return the amount of time between temporal1Inclusive and temporal2Exclusive
 in terms of this unit; positive if temporal2Exclusive is later than
 temporal1Inclusive, negative if earlier
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to the same type as the start temporal
@throws UnsupportedTemporalTypeException if the unit is not supported by the temporal
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8553346 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets a descriptive name for the unit.
<p>
This should be in the plural and upper-first camel case, such as 'Days' or 'Minutes'.

@return the name of this unit, not null
"
      end
    end

    class 1054722 "ChronoField"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A standard set of fields.
<p>
This set of fields provide field-based access to manipulate a date, time or date-time.
The standard set of fields can be extended by implementing {@link TemporalField}.
<p>
These fields are intended to be applicable in multiple calendar systems.
For example, most non-ISO calendar systems define dates as a year, month and day,
just with slightly different rules.
The documentation of each field explains how it operates.

@implSpec
This is a final, immutable and thread-safe enum.

@since 1.8
"
      classrelation 3464066 // <realization>
	relation 3464066 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3464066 // <realization>
	  b parent class_ref 1050882 // TemporalField
      end

      attribute 1968258 "NANO_OF_SECOND"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"NanoOfSecond\", NANOS, SECONDS, ValueRange.of(0, 999_999_999)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The nano-of-second.
<p>
This counts the nanosecond within the second, from 0 to 999,999,999.
This field has the same meaning for all calendar systems.
<p>
This field is used to represent the nano-of-second handling any fraction of the second.
Implementations of {@code TemporalAccessor} should provide a value for this field if
they can return a value for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or
{@link #INSTANT_SECONDS} filling unknown precision with zero.
<p>
When this field is used for setting a value, it should set as much precision as the
object stores, using integer division to remove excess precision.
For example, if the {@code TemporalAccessor} stores time to millisecond precision,
then the nano-of-second must be divided by 1,000,000 before replacing the milli-of-second.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The field is resolved in combination with {@code MILLI_OF_SECOND} and {@code MICRO_OF_SECOND}.
"
      end

      attribute 1968386 "NANO_OF_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"NanoOfDay\", NANOS, DAYS, ValueRange.of(0, 86400L * 1000_000_000L - 1)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The nano-of-day.
<p>
This counts the nanosecond within the day, from 0 to (24 * 60 * 60 * 1,000,000,000) - 1.
This field has the same meaning for all calendar systems.
<p>
This field is used to represent the nano-of-day handling any fraction of the second.
Implementations of {@code TemporalAccessor} should provide a value for this field if
they can return a value for {@link #SECOND_OF_DAY} filling unknown precision with zero.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The value is split to form {@code NANO_OF_SECOND}, {@code SECOND_OF_MINUTE},
{@code MINUTE_OF_HOUR} and {@code HOUR_OF_DAY} fields.
"
      end

      attribute 1968514 "MICRO_OF_SECOND"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"MicroOfSecond\", MICROS, SECONDS, ValueRange.of(0, 999_999)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The micro-of-second.
<p>
This counts the microsecond within the second, from 0 to 999,999.
This field has the same meaning for all calendar systems.
<p>
This field is used to represent the micro-of-second handling any fraction of the second.
Implementations of {@code TemporalAccessor} should provide a value for this field if
they can return a value for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or
{@link #INSTANT_SECONDS} filling unknown precision with zero.
<p>
When this field is used for setting a value, it should behave in the same way as
setting {@link #NANO_OF_SECOND} with the value multiplied by 1,000.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The field is resolved in combination with {@code MILLI_OF_SECOND} to produce
{@code NANO_OF_SECOND}.
"
      end

      attribute 1968642 "MICRO_OF_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"MicroOfDay\", MICROS, DAYS, ValueRange.of(0, 86400L * 1000_000L - 1)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The micro-of-day.
<p>
This counts the microsecond within the day, from 0 to (24 * 60 * 60 * 1,000,000) - 1.
This field has the same meaning for all calendar systems.
<p>
This field is used to represent the micro-of-day handling any fraction of the second.
Implementations of {@code TemporalAccessor} should provide a value for this field if
they can return a value for {@link #SECOND_OF_DAY} filling unknown precision with zero.
<p>
When this field is used for setting a value, it should behave in the same way as
setting {@link #NANO_OF_DAY} with the value multiplied by 1,000.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The value is split to form {@code MICRO_OF_SECOND}, {@code SECOND_OF_MINUTE},
{@code MINUTE_OF_HOUR} and {@code HOUR_OF_DAY} fields.
"
      end

      attribute 1968770 "MILLI_OF_SECOND"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"MilliOfSecond\", MILLIS, SECONDS, ValueRange.of(0, 999)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The milli-of-second.
<p>
This counts the millisecond within the second, from 0 to 999.
This field has the same meaning for all calendar systems.
<p>
This field is used to represent the milli-of-second handling any fraction of the second.
Implementations of {@code TemporalAccessor} should provide a value for this field if
they can return a value for {@link #SECOND_OF_MINUTE}, {@link #SECOND_OF_DAY} or
{@link #INSTANT_SECONDS} filling unknown precision with zero.
<p>
When this field is used for setting a value, it should behave in the same way as
setting {@link #NANO_OF_SECOND} with the value multiplied by 1,000,000.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The field is resolved in combination with {@code MICRO_OF_SECOND} to produce
{@code NANO_OF_SECOND}.
"
      end

      attribute 1968898 "MILLI_OF_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"MilliOfDay\", MILLIS, DAYS, ValueRange.of(0, 86400L * 1000L - 1)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The milli-of-day.
<p>
This counts the millisecond within the day, from 0 to (24 * 60 * 60 * 1,000) - 1.
This field has the same meaning for all calendar systems.
<p>
This field is used to represent the milli-of-day handling any fraction of the second.
Implementations of {@code TemporalAccessor} should provide a value for this field if
they can return a value for {@link #SECOND_OF_DAY} filling unknown precision with zero.
<p>
When this field is used for setting a value, it should behave in the same way as
setting {@link #NANO_OF_DAY} with the value multiplied by 1,000,000.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The value is split to form {@code MILLI_OF_SECOND}, {@code SECOND_OF_MINUTE},
{@code MINUTE_OF_HOUR} and {@code HOUR_OF_DAY} fields.
"
      end

      attribute 1969026 "SECOND_OF_MINUTE"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"SecondOfMinute\", SECONDS, MINUTES, ValueRange.of(0, 59), \"second\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The second-of-minute.
<p>
This counts the second within the minute, from 0 to 59.
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
"
      end

      attribute 1969154 "SECOND_OF_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"SecondOfDay\", SECONDS, DAYS, ValueRange.of(0, 86400L - 1)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The second-of-day.
<p>
This counts the second within the day, from 0 to (24 * 60 * 60) - 1.
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The value is split to form {@code SECOND_OF_MINUTE}, {@code MINUTE_OF_HOUR}
and {@code HOUR_OF_DAY} fields.
"
      end

      attribute 1969282 "MINUTE_OF_HOUR"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"MinuteOfHour\", MINUTES, HOURS, ValueRange.of(0, 59), \"minute\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minute-of-hour.
<p>
This counts the minute within the hour, from 0 to 59.
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
"
      end

      attribute 1969410 "MINUTE_OF_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"MinuteOfDay\", MINUTES, DAYS, ValueRange.of(0, (24 * 60) - 1)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minute-of-day.
<p>
This counts the minute within the day, from 0 to (24 * 60) - 1.
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The value is split to form {@code MINUTE_OF_HOUR} and {@code HOUR_OF_DAY} fields.
"
      end

      attribute 1969538 "HOUR_OF_AMPM"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"HourOfAmPm\", HOURS, HALF_DAYS, ValueRange.of(0, 11)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The hour-of-am-pm.
<p>
This counts the hour within the AM/PM, from 0 to 11.
This is the hour that would be observed on a standard 12-hour digital clock.
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated from 0 to 11 in strict and smart mode.
In lenient mode the value is not validated. It is combined with
{@code AMPM_OF_DAY} to form {@code HOUR_OF_DAY} by multiplying
the {AMPM_OF_DAY} value by 12.
"
      end

      attribute 1969666 "CLOCK_HOUR_OF_AMPM"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"ClockHourOfAmPm\", HOURS, HALF_DAYS, ValueRange.of(1, 12)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The clock-hour-of-am-pm.
<p>
This counts the hour within the AM/PM, from 1 to 12.
This is the hour that would be observed on a standard 12-hour analog wall clock.
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated from 1 to 12 in strict mode and from
0 to 12 in smart mode. In lenient mode the value is not validated.
The field is converted to an {@code HOUR_OF_AMPM} with the same value,
unless the value is 12, in which case it is converted to 0.
"
      end

      attribute 1969794 "HOUR_OF_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"HourOfDay\", HOURS, DAYS, ValueRange.of(0, 23), \"hour\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The hour-of-day.
<p>
This counts the hour within the day, from 0 to 23.
This is the hour that would be observed on a standard 24-hour digital clock.
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated in strict and smart mode but not in lenient mode.
The field is combined with {@code MINUTE_OF_HOUR}, {@code SECOND_OF_MINUTE} and
{@code NANO_OF_SECOND} to produce a {@code LocalTime}.
In lenient mode, any excess days are added to the parsed date, or
made available via {@link java.time.format.DateTimeFormatter#parsedExcessDays()}.
"
      end

      attribute 1969922 "CLOCK_HOUR_OF_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"ClockHourOfDay\", HOURS, DAYS, ValueRange.of(1, 24)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The clock-hour-of-day.
<p>
This counts the hour within the AM/PM, from 1 to 24.
This is the hour that would be observed on a 24-hour analog wall clock.
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated from 1 to 24 in strict mode and from
0 to 24 in smart mode. In lenient mode the value is not validated.
The field is converted to an {@code HOUR_OF_DAY} with the same value,
unless the value is 24, in which case it is converted to 0.
"
      end

      attribute 1970050 "AMPM_OF_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"AmPmOfDay\", HALF_DAYS, DAYS, ValueRange.of(0, 1), \"dayperiod\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The am-pm-of-day.
<p>
This counts the AM/PM within the day, from 0 (AM) to 1 (PM).
This field has the same meaning for all calendar systems.
<p>
When parsing this field it behaves equivalent to the following:
The value is validated from 0 to 1 in strict and smart mode.
In lenient mode the value is not validated. It is combined with
{@code HOUR_OF_AMPM} to form {@code HOUR_OF_DAY} by multiplying
the {AMPM_OF_DAY} value by 12.
"
      end

      attribute 1970178 "DAY_OF_WEEK"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"DayOfWeek\", DAYS, WEEKS, ValueRange.of(1, 7), \"weekday\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The day-of-week, such as Tuesday.
<p>
This represents the standard concept of the day of the week.
In the default ISO calendar system, this has values from Monday (1) to Sunday (7).
The {@link DayOfWeek} class can be used to interpret the result.
<p>
Most non-ISO calendar systems also define a seven day week that aligns with ISO.
Those calendar systems must also use the same numbering system, from Monday (1) to
Sunday (7), which allows {@code DayOfWeek} to be used.
<p>
Calendar systems that do not have a standard seven day week should implement this field
if they have a similar concept of named or numbered days within a period similar
to a week. It is recommended that the numbering starts from 1.
"
      end

      attribute 1970306 "ALIGNED_DAY_OF_WEEK_IN_MONTH"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"AlignedDayOfWeekInMonth\", DAYS, WEEKS, ValueRange.of(1, 7)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The aligned day-of-week within a month.
<p>
This represents concept of the count of days within the period of a week
where the weeks are aligned to the start of the month.
This field is typically used with {@link #ALIGNED_WEEK_OF_MONTH}.
<p>
For example, in a calendar systems with a seven day week, the first aligned-week-of-month
starts on day-of-month 1, the second aligned-week starts on day-of-month 8, and so on.
Within each of these aligned-weeks, the days are numbered from 1 to 7 and returned
as the value of this field.
As such, day-of-month 1 to 7 will have aligned-day-of-week values from 1 to 7.
And day-of-month 8 to 14 will repeat this with aligned-day-of-week values from 1 to 7.
<p>
Calendar systems that do not have a seven day week should typically implement this
field in the same way, but using the alternate week length.
"
      end

      attribute 1970434 "ALIGNED_DAY_OF_WEEK_IN_YEAR"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"AlignedDayOfWeekInYear\", DAYS, WEEKS, ValueRange.of(1, 7)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The aligned day-of-week within a year.
<p>
This represents concept of the count of days within the period of a week
where the weeks are aligned to the start of the year.
This field is typically used with {@link #ALIGNED_WEEK_OF_YEAR}.
<p>
For example, in a calendar systems with a seven day week, the first aligned-week-of-year
starts on day-of-year 1, the second aligned-week starts on day-of-year 8, and so on.
Within each of these aligned-weeks, the days are numbered from 1 to 7 and returned
as the value of this field.
As such, day-of-year 1 to 7 will have aligned-day-of-week values from 1 to 7.
And day-of-year 8 to 14 will repeat this with aligned-day-of-week values from 1 to 7.
<p>
Calendar systems that do not have a seven day week should typically implement this
field in the same way, but using the alternate week length.
"
      end

      attribute 1970562 "DAY_OF_MONTH"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"DayOfMonth\", DAYS, MONTHS, ValueRange.of(1, 28, 31), \"day\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The day-of-month.
<p>
This represents the concept of the day within the month.
In the default ISO calendar system, this has values from 1 to 31 in most months.
April, June, September, November have days from 1 to 30, while February has days
from 1 to 28, or 29 in a leap year.
<p>
Non-ISO calendar systems should implement this field using the most recognized
day-of-month values for users of the calendar system.
Normally, this is a count of days from 1 to the length of the month.
"
      end

      attribute 1970690 "DAY_OF_YEAR"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"DayOfYear\", DAYS, YEARS, ValueRange.of(1, 365, 366)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The day-of-year.
<p>
This represents the concept of the day within the year.
In the default ISO calendar system, this has values from 1 to 365 in standard
years and 1 to 366 in leap years.
<p>
Non-ISO calendar systems should implement this field using the most recognized
day-of-year values for users of the calendar system.
Normally, this is a count of days from 1 to the length of the year.
<p>
Note that a non-ISO calendar system may have year numbering system that changes
at a different point to the natural reset in the month numbering. An example
of this is the Japanese calendar system where a change of era, which resets
the year number to 1, can happen on any date. The era and year reset also cause
the day-of-year to be reset to 1, but not the month-of-year or day-of-month.
"
      end

      attribute 1970818 "EPOCH_DAY"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"EpochDay\", DAYS, FOREVER, ValueRange.of((long) (Year.MIN_VALUE * 365.25), (long) (Year.MAX_VALUE * 365.25))),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The epoch-day, based on the Java epoch of 1970-01-01 (ISO).
<p>
This field is the sequential count of days where 1970-01-01 (ISO) is zero.
Note that this uses the <i>local</i> time-line, ignoring offset and time-zone.
<p>
This field is strictly defined to have the same meaning in all calendar systems.
This is necessary to ensure interoperation between calendars.
"
      end

      attribute 1970946 "ALIGNED_WEEK_OF_MONTH"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"AlignedWeekOfMonth\", WEEKS, MONTHS, ValueRange.of(1, 4, 5)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The aligned week within a month.
<p>
This represents concept of the count of weeks within the period of a month
where the weeks are aligned to the start of the month.
This field is typically used with {@link #ALIGNED_DAY_OF_WEEK_IN_MONTH}.
<p>
For example, in a calendar systems with a seven day week, the first aligned-week-of-month
starts on day-of-month 1, the second aligned-week starts on day-of-month 8, and so on.
Thus, day-of-month values 1 to 7 are in aligned-week 1, while day-of-month values
8 to 14 are in aligned-week 2, and so on.
<p>
Calendar systems that do not have a seven day week should typically implement this
field in the same way, but using the alternate week length.
"
      end

      attribute 1971074 "ALIGNED_WEEK_OF_YEAR"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"AlignedWeekOfYear\", WEEKS, YEARS, ValueRange.of(1, 53)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The aligned week within a year.
<p>
This represents concept of the count of weeks within the period of a year
where the weeks are aligned to the start of the year.
This field is typically used with {@link #ALIGNED_DAY_OF_WEEK_IN_YEAR}.
<p>
For example, in a calendar systems with a seven day week, the first aligned-week-of-year
starts on day-of-year 1, the second aligned-week starts on day-of-year 8, and so on.
Thus, day-of-year values 1 to 7 are in aligned-week 1, while day-of-year values
8 to 14 are in aligned-week 2, and so on.
<p>
Calendar systems that do not have a seven day week should typically implement this
field in the same way, but using the alternate week length.
"
      end

      attribute 1971202 "MONTH_OF_YEAR"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"MonthOfYear\", MONTHS, YEARS, ValueRange.of(1, 12), \"month\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The month-of-year, such as March.
<p>
This represents the concept of the month within the year.
In the default ISO calendar system, this has values from January (1) to December (12).
<p>
Non-ISO calendar systems should implement this field using the most recognized
month-of-year values for users of the calendar system.
Normally, this is a count of months starting from 1.
"
      end

      attribute 1971330 "PROLEPTIC_MONTH"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"ProlepticMonth\", MONTHS, FOREVER, ValueRange.of(Year.MIN_VALUE * 12L, Year.MAX_VALUE * 12L + 11)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The proleptic-month based, counting months sequentially from year 0.
<p>
This field is the sequential count of months where the first month
in proleptic-year zero has the value zero.
Later months have increasingly larger values.
Earlier months have increasingly small values.
There are no gaps or breaks in the sequence of months.
Note that this uses the <i>local</i> time-line, ignoring offset and time-zone.
<p>
In the default ISO calendar system, June 2012 would have the value
{@code (2012 * 12 + 6 - 1)}. This field is primarily for internal use.
<p>
Non-ISO calendar systems must implement this field as per the definition above.
It is just a simple zero-based count of elapsed months from the start of proleptic-year 0.
All calendar systems with a full proleptic-year definition will have a year zero.
If the calendar system has a minimum year that excludes year zero, then one must
be extrapolated in order for this method to be defined.
"
      end

      attribute 1971458 "YEAR_OF_ERA"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"YearOfEra\", YEARS, FOREVER, ValueRange.of(1, Year.MAX_VALUE, Year.MAX_VALUE + 1)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The year within the era.
<p>
This represents the concept of the year within the era.
This field is typically used with {@link #ERA}.
<p>
The standard mental model for a date is based on three concepts - year, month and day.
These map onto the {@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} fields.
Note that there is no reference to eras.
The full model for a date requires four concepts - era, year, month and day. These map onto
the {@code ERA}, {@code YEAR_OF_ERA}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} fields.
Whether this field or {@code YEAR} is used depends on which mental model is being used.
See {@link ChronoLocalDate} for more discussion on this topic.
<p>
In the default ISO calendar system, there are two eras defined, 'BCE' and 'CE'.
The era 'CE' is the one currently in use and year-of-era runs from 1 to the maximum value.
The era 'BCE' is the previous era, and the year-of-era runs backwards.
<p>
For example, subtracting a year each time yield the following:<br>
- year-proleptic 2  = 'CE' year-of-era 2<br>
- year-proleptic 1  = 'CE' year-of-era 1<br>
- year-proleptic 0  = 'BCE' year-of-era 1<br>
- year-proleptic -1 = 'BCE' year-of-era 2<br>
<p>
Note that the ISO-8601 standard does not actually define eras.
Note also that the ISO eras do not align with the well-known AD/BC eras due to the
change between the Julian and Gregorian calendar systems.
<p>
Non-ISO calendar systems should implement this field using the most recognized
year-of-era value for users of the calendar system.
Since most calendar systems have only two eras, the year-of-era numbering approach
will typically be the same as that used by the ISO calendar system.
The year-of-era value should typically always be positive, however this is not required.
"
      end

      attribute 1971586 "YEAR"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"Year\", YEARS, FOREVER, ValueRange.of(Year.MIN_VALUE, Year.MAX_VALUE), \"year\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The proleptic year, such as 2012.
<p>
This represents the concept of the year, counting sequentially and using negative numbers.
The proleptic year is not interpreted in terms of the era.
See {@link #YEAR_OF_ERA} for an example showing the mapping from proleptic year to year-of-era.
<p>
The standard mental model for a date is based on three concepts - year, month and day.
These map onto the {@code YEAR}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} fields.
Note that there is no reference to eras.
The full model for a date requires four concepts - era, year, month and day. These map onto
the {@code ERA}, {@code YEAR_OF_ERA}, {@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH} fields.
Whether this field or {@code YEAR_OF_ERA} is used depends on which mental model is being used.
See {@link ChronoLocalDate} for more discussion on this topic.
<p>
Non-ISO calendar systems should implement this field as follows.
If the calendar system has only two eras, before and after a fixed date, then the
proleptic-year value must be the same as the year-of-era value for the later era,
and increasingly negative for the earlier era.
If the calendar system has more than two eras, then the proleptic-year value may be
defined with any appropriate value, although defining it to be the same as ISO may be
the best option.
"
      end

      attribute 1971714 "ERA"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"Era\", ERAS, FOREVER, ValueRange.of(0, 1), \"era\"),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The era.
<p>
This represents the concept of the era, which is the largest division of the time-line.
This field is typically used with {@link #YEAR_OF_ERA}.
<p>
In the default ISO calendar system, there are two eras defined, 'BCE' and 'CE'.
The era 'CE' is the one currently in use and year-of-era runs from 1 to the maximum value.
The era 'BCE' is the previous era, and the year-of-era runs backwards.
See {@link #YEAR_OF_ERA} for a full example.
<p>
Non-ISO calendar systems should implement this field to define eras.
The value of the era that was active on 1970-01-01 (ISO) must be assigned the value 1.
Earlier eras must have sequentially smaller values.
Later eras must have sequentially larger values,
"
      end

      attribute 1971842 "INSTANT_SECONDS"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"InstantSeconds\", SECONDS, FOREVER, ValueRange.of(Long.MIN_VALUE, Long.MAX_VALUE)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The instant epoch-seconds.
<p>
This represents the concept of the sequential count of seconds where
1970-01-01T00:00Z (ISO) is zero.
This field may be used with {@link #NANO_OF_SECOND} to represent the fraction of the second.
<p>
An {@link Instant} represents an instantaneous point on the time-line.
On their own, an instant has insufficient information to allow a local date-time to be obtained.
Only when paired with an offset or time-zone can the local date or time be calculated.
<p>
This field is strictly defined to have the same meaning in all calendar systems.
This is necessary to ensure interoperation between calendars.
"
      end

      attribute 1971970 "OFFSET_SECONDS"
	public type class_ref 1054722 // ChronoField
	cpp_decl ""
	java_decl "  ${@}${name}(\"OffsetSeconds\", SECONDS, FOREVER, ValueRange.of(-18 * 3600, 18 * 3600)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The offset from UTC/Greenwich.
<p>
This represents the concept of the offset in seconds of local time from UTC/Greenwich.
<p>
A {@link ZoneOffset} represents the period of time that local time differs from UTC/Greenwich.
This is usually a fixed number of hours and minutes.
It is equivalent to the {@link ZoneOffset#getTotalSeconds() total amount} of the offset in seconds.
For example, during the winter Paris has an offset of {@code +01:00}, which is 3600 seconds.
<p>
This field is strictly defined to have the same meaning in all calendar systems.
This is necessary to ensure interoperation between calendars.
"
      end

      classrelation 3464194 // name (<unidirectional association>)
	relation 3464194 --->
	  a role_name "name" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3464194 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3464322 // baseUnit (<unidirectional association>)
	relation 3464322 --->
	  a role_name "baseUnit" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3464322 // baseUnit (<unidirectional association>)
	  b parent class_ref 1051778 // TemporalUnit
      end

      classrelation 3464450 // rangeUnit (<unidirectional association>)
	relation 3464450 --->
	  a role_name "rangeUnit" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3464450 // rangeUnit (<unidirectional association>)
	  b parent class_ref 1051778 // TemporalUnit
      end

      classrelation 3464578 // range (<unidirectional association>)
	relation 3464578 --->
	  a role_name "range" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3464578 // range (<unidirectional association>)
	  b parent class_ref 1051010 // ValueRange
      end

      classrelation 3464706 // displayNameKey (<unidirectional association>)
	relation 3464706 --->
	  a role_name "displayNameKey" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3464706 // displayNameKey (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8550530 "ChronoField"
	private explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "baseUnit" type class_ref 1051778 // TemporalUnit
	  param inout name "rangeUnit" type class_ref 1051778 // TemporalUnit
	  param inout name "range" type class_ref 1051010 // ValueRange
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8550658 "ChronoField"
	private explicit_return_type ""
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "baseUnit" type class_ref 1051778 // TemporalUnit
	  param inout name "rangeUnit" type class_ref 1051778 // TemporalUnit
	  param inout name "range" type class_ref 1051010 // ValueRange
	  param inout name "displayNameKey" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8550786 "getDisplayName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8550914 "getBaseUnit"
	public return_type class_ref 1051778 // TemporalUnit
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8551042 "getRangeUnit"
	public return_type class_ref 1051778 // TemporalUnit
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8551170 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the range of valid values for the field.
<p>
All fields can be expressed as a {@code long} integer.
This method returns an object that describes the valid range for that value.
<p>
This method returns the range of the field in the ISO-8601 calendar system.
This range may be incorrect for other calendar systems.
Use {@link Chronology#range(ChronoField)} to access the correct range
for a different calendar system.
<p>
Note that the result only describes the minimum and maximum valid values
and it is important not to read too much into them. For example, there
could be values within the range that are invalid for the field.

@return the range of valid values for the field, not null
"
      end

      operation 8551298 "isDateBased"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this field represents a component of a date.
<p>
Fields from day-of-week to era are date-based.

@return true if it is a component of a date
"
      end

      operation 8551426 "isTimeBased"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this field represents a component of a time.
<p>
Fields from nano-of-second to am-pm-of-day are time-based.

@return true if it is a component of a time
"
      end

      operation 8551554 "checkValidValue"
	public explicit_return_type "long"
	nparams 1
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks that the specified value is valid for this field.
<p>
This validates that the value is within the outer range of valid values
returned by {@link #range()}.
<p>
This method checks against the range of the field in the ISO-8601 calendar system.
This range may be incorrect for other calendar systems.
Use {@link Chronology#range(ChronoField)} to access the correct range
for a different calendar system.

@param value  the value to check
@return the value that was passed in
"
      end

      operation 8551682 "checkValidIntValue"
	public explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the specified value is valid and fits in an {@code int}.
<p>
This validates that the value is within the outer range of valid values
returned by {@link #range()}.
It also checks that all valid values are within the bounds of an {@code int}.
<p>
This method checks against the range of the field in the ISO-8601 calendar system.
This range may be incorrect for other calendar systems.
Use {@link Chronology#range(ChronoField)} to access the correct range
for a different calendar system.

@param value  the value to check
@return the value that was passed in
"
      end

      operation 8551810 "isSupportedBy"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8551938 "rangeRefinedBy"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8552066 "getFrom"
	public explicit_return_type "long"
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8552194 "adjustInto"
	public explicit_return_type "R"
	nparams 2
	  param inout name "temporal" explicit_type "R"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends Temporal> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
      end

      operation 8552322 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end
    end

    class 1061634 "ChronoUnit"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A standard set of date periods units.
<p>
This set of units provide unit-based access to manipulate a date, time or date-time.
The standard set of units can be extended by implementing {@link TemporalUnit}.
<p>
These units are intended to be applicable in multiple calendar systems.
For example, most non-ISO calendar systems define units of years, months and days,
just with slightly different rules.
The documentation of each unit explains how it operates.

@implSpec
This is a final, immutable and thread-safe enum.

@since 1.8
"
      classrelation 3464834 // <realization>
	relation 3464834 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3464834 // <realization>
	  b parent class_ref 1051778 // TemporalUnit
      end

      attribute 1972098 "NANOS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Nanos\", Duration.ofNanos(1)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a nanosecond, the smallest supported unit of time.
For the ISO calendar system, it is equal to the 1,000,000,000th part of the second unit.
"
      end

      attribute 1972226 "MICROS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Micros\", Duration.ofNanos(1000)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a microsecond.
For the ISO calendar system, it is equal to the 1,000,000th part of the second unit.
"
      end

      attribute 1972354 "MILLIS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Millis\", Duration.ofNanos(1000_000)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a millisecond.
For the ISO calendar system, it is equal to the 1000th part of the second unit.
"
      end

      attribute 1972482 "SECONDS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Seconds\", Duration.ofSeconds(1)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a second.
For the ISO calendar system, it is equal to the second in the SI system
of units, except around a leap-second.
"
      end

      attribute 1972610 "MINUTES"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Minutes\", Duration.ofSeconds(60)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a minute.
For the ISO calendar system, it is equal to 60 seconds.
"
      end

      attribute 1972738 "HOURS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Hours\", Duration.ofSeconds(3600)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of an hour.
For the ISO calendar system, it is equal to 60 minutes.
"
      end

      attribute 1972866 "HALF_DAYS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"HalfDays\", Duration.ofSeconds(43200)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of half a day, as used in AM/PM.
For the ISO calendar system, it is equal to 12 hours.
"
      end

      attribute 1972994 "DAYS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Days\", Duration.ofSeconds(86400)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a day.
For the ISO calendar system, it is the standard day from midnight to midnight.
The estimated duration of a day is {@code 24 Hours}.
<p>
When used with other calendar systems it must correspond to the day defined by
the rising and setting of the Sun on Earth. It is not required that days begin
at midnight - when converting between calendar systems, the date should be
equivalent at midday.
"
      end

      attribute 1973122 "WEEKS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Weeks\", Duration.ofSeconds(7 * 86400L)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a week.
For the ISO calendar system, it is equal to 7 days.
<p>
When used with other calendar systems it must correspond to an integral number of days.
"
      end

      attribute 1973250 "MONTHS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Months\", Duration.ofSeconds(31556952L / 12)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a month.
For the ISO calendar system, the length of the month varies by month-of-year.
The estimated duration of a month is one twelfth of {@code 365.2425 Days}.
<p>
When used with other calendar systems it must correspond to an integral number of days.
"
      end

      attribute 1973378 "YEARS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Years\", Duration.ofSeconds(31556952L)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a year.
For the ISO calendar system, it is equal to 12 months.
The estimated duration of a year is {@code 365.2425 Days}.
<p>
When used with other calendar systems it must correspond to an integral number of days
or months roughly equal to a year defined by the passage of the Earth around the Sun.
"
      end

      attribute 1973506 "DECADES"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Decades\", Duration.ofSeconds(31556952L * 10L)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a decade.
For the ISO calendar system, it is equal to 10 years.
<p>
When used with other calendar systems it must correspond to an integral number of days
and is normally an integral number of years.
"
      end

      attribute 1973634 "CENTURIES"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Centuries\", Duration.ofSeconds(31556952L * 100L)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a century.
For the ISO calendar system, it is equal to 100 years.
<p>
When used with other calendar systems it must correspond to an integral number of days
and is normally an integral number of years.
"
      end

      attribute 1973762 "MILLENNIA"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Millennia\", Duration.ofSeconds(31556952L * 1000L)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of a millennium.
For the ISO calendar system, it is equal to 1000 years.
<p>
When used with other calendar systems it must correspond to an integral number of days
and is normally an integral number of years.
"
      end

      attribute 1973890 "ERAS"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Eras\", Duration.ofSeconds(31556952L * 1000_000_000L)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unit that represents the concept of an era.
The ISO calendar system doesn't have eras thus it is impossible to add
an era to a date or date-time.
The estimated duration of the era is artificially defined as {@code 1,000,000,000 Years}.
<p>
When used with other calendar systems there are no restrictions on the unit.
"
      end

      attribute 1974018 "FOREVER"
	public type class_ref 1061634 // ChronoUnit
	cpp_decl ""
	java_decl "  ${@}${name}(\"Forever\", Duration.ofSeconds(Long.MAX_VALUE, 999_999_999)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Artificial unit that represents the concept of forever.
This is primarily used with {@link TemporalField} to represent unbounded fields
such as the year or era.
The estimated duration of the era is artificially defined as the largest duration
supported by {@code Duration}.
"
      end

      classrelation 3464962 // name (<unidirectional association>)
	relation 3464962 --->
	  a role_name "name" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3464962 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3465090 // duration (<unidirectional association>)
	relation 3465090 --->
	  a role_name "duration" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3465090 // duration (<unidirectional association>)
	  b parent class_ref 1049858 // Duration
      end

      operation 8553474 "ChronoUnit"
	private explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "estimatedDuration" type class_ref 1049858 // Duration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8553602 "getDuration"
	public return_type class_ref 1049858 // Duration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the estimated duration of this unit in the ISO calendar system.
<p>
All of the units in this class have an estimated duration.
Days vary due to daylight saving time, while months have different lengths.

@return the estimated duration of this unit, not null
"
      end

      operation 8553730 "isDurationEstimated"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the duration of the unit is an estimate.
<p>
All time units in this class are considered to be accurate, while all date
units in this class are considered to be estimated.
<p>
This definition ignores leap seconds, but considers that Days vary due to
daylight saving time and months have different lengths.

@return true if the duration is estimated, false if accurate
"
      end

      operation 8553858 "isDateBased"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this unit is a date unit.
<p>
All units from days to eras inclusive are date-based.
Time-based units and {@code FOREVER} return false.

@return true if a date unit, false if a time unit
"
      end

      operation 8553986 "isTimeBased"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this unit is a time unit.
<p>
All units from nanos to half-days inclusive are time-based.
Date-based units and {@code FOREVER} return false.

@return true if a time unit, false if a date unit
"
      end

      operation 8554114 "isSupportedBy"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8554242 "addTo"
	public explicit_return_type "R"
	nparams 2
	  param inout name "temporal" explicit_type "R"
	  param in name "amount" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends Temporal> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
      end

      operation 8554370 "between"
	public explicit_return_type "long"
	nparams 2
	  param inout name "temporal1Inclusive" type class_ref 1051394 // Temporal
	  param inout name "temporal2Exclusive" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8554498 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end
    end

    class 1061762 "IsoFields"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Fields and units specific to the ISO-8601 calendar system,
including quarter-of-year and week-based-year.
<p>
This class defines fields and units that are specific to the ISO calendar system.

<h3>Quarter of year</h3>
The ISO-8601 standard is based on the standard civic 12 month year.
This is commonly divided into four quarters, often abbreviated as Q1, Q2, Q3 and Q4.
<p>
January, February and March are in Q1.
April, May and June are in Q2.
July, August and September are in Q3.
October, November and December are in Q4.
<p>
The complete date is expressed using three fields:
<ul>
<li>{@link #DAY_OF_QUARTER DAY_OF_QUARTER} - the day within the quarter, from 1 to 90, 91 or 92
<li>{@link #QUARTER_OF_YEAR QUARTER_OF_YEAR} - the week within the week-based-year
<li>{@link ChronoField#YEAR YEAR} - the standard ISO year
</ul>

<h3>Week based years</h3>
The ISO-8601 standard was originally intended as a data interchange format,
defining a string format for dates and times. However, it also defines an
alternate way of expressing the date, based on the concept of week-based-year.
<p>
The date is expressed using three fields:
<ul>
<li>{@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} - the standard field defining the
 day-of-week from Monday (1) to Sunday (7)
<li>{@link #WEEK_OF_WEEK_BASED_YEAR} - the week within the week-based-year
<li>{@link #WEEK_BASED_YEAR WEEK_BASED_YEAR} - the week-based-year
</ul>
The week-based-year itself is defined relative to the standard ISO proleptic year.
It differs from the standard year in that it always starts on a Monday.
<p>
The first week of a week-based-year is the first Monday-based week of the standard
ISO year that has at least 4 days in the new year.
<ul>
<li>If January 1st is Monday then week 1 starts on January 1st
<li>If January 1st is Tuesday then week 1 starts on December 31st of the previous standard year
<li>If January 1st is Wednesday then week 1 starts on December 30th of the previous standard year
<li>If January 1st is Thursday then week 1 starts on December 29th of the previous standard year
<li>If January 1st is Friday then week 1 starts on January 4th
<li>If January 1st is Saturday then week 1 starts on January 3rd
<li>If January 1st is Sunday then week 1 starts on January 2nd
</ul>
There are 52 weeks in most week-based years, however on occasion there are 53 weeks.
<p>
For example:

<table cellpadding=\"0\" cellspacing=\"3\" border=\"0\" style=\"text-align: left; width: 50%;\">
<caption>Examples of Week based Years</caption>
<tr><th>Date</th><th>Day-of-week</th><th>Field values</th></tr>
<tr><th>2008-12-28</th><td>Sunday</td><td>Week 52 of week-based-year 2008</td></tr>
<tr><th>2008-12-29</th><td>Monday</td><td>Week 1 of week-based-year 2009</td></tr>
<tr><th>2008-12-31</th><td>Wednesday</td><td>Week 1 of week-based-year 2009</td></tr>
<tr><th>2009-01-01</th><td>Thursday</td><td>Week 1 of week-based-year 2009</td></tr>
<tr><th>2009-01-04</th><td>Sunday</td><td>Week 1 of week-based-year 2009</td></tr>
<tr><th>2009-01-05</th><td>Monday</td><td>Week 2 of week-based-year 2009</td></tr>
</table>

@implSpec
<p>
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3465218 // DAY_OF_QUARTER (<unidirectional association>)
	relation 3465218 --->
	  a role_name "DAY_OF_QUARTER" init_value " Field.DAY_OF_QUARTER" class_relation const_relation public
	    comment "
The field that represents the day-of-quarter.
<p>
This field allows the day-of-quarter value to be queried and set.
The day-of-quarter has values from 1 to 90 in Q1 of a standard year, from 1 to 91
in Q1 of a leap year, from 1 to 91 in Q2 and from 1 to 92 in Q3 and Q4.
<p>
The day-of-quarter can only be calculated if the day-of-year, month-of-year and year
are available.
<p>
When setting this field, the value is allowed to be partially lenient, taking any
value from 1 to 92. If the quarter has less than 92 days, then day 92, and
potentially day 91, is in the following quarter.
<p>
In the resolving phase of parsing, a date can be created from a year,
quarter-of-year and day-of-quarter.
<p>
In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are
validated against their range of valid values. The day-of-quarter field
is validated from 1 to 90, 91 or 92 depending on the year and quarter.
<p>
In {@linkplain ResolverStyle#SMART smart mode}, all three fields are
validated against their range of valid values. The day-of-quarter field is
validated between 1 and 92, ignoring the actual range based on the year and quarter.
If the day-of-quarter exceeds the actual range by one day, then the resulting date
is one day later. If the day-of-quarter exceeds the actual range by two days,
then the resulting date is two days later.
<p>
In {@linkplain ResolverStyle#LENIENT lenient mode}, only the year is validated
against the range of valid values. The resulting date is calculated equivalent to
the following three stage approach. First, create a date on the first of January
in the requested year. Then take the quarter-of-year, subtract one, and add the
amount in quarters to the date. Finally, take the day-of-quarter, subtract one,
and add the amount in days to the date.
<p>
This unit is an immutable and thread-safe singleton.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3465218 // DAY_OF_QUARTER (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3465346 // QUARTER_OF_YEAR (<unidirectional association>)
	relation 3465346 --->
	  a role_name "QUARTER_OF_YEAR" init_value " Field.QUARTER_OF_YEAR" class_relation const_relation public
	    comment "
The field that represents the quarter-of-year.
<p>
This field allows the quarter-of-year value to be queried and set.
The quarter-of-year has values from 1 to 4.
<p>
The quarter-of-year can only be calculated if the month-of-year is available.
<p>
In the resolving phase of parsing, a date can be created from a year,
quarter-of-year and day-of-quarter.
See {@link #DAY_OF_QUARTER} for details.
<p>
This unit is an immutable and thread-safe singleton.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3465346 // QUARTER_OF_YEAR (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3465474 // WEEK_OF_WEEK_BASED_YEAR (<unidirectional association>)
	relation 3465474 --->
	  a role_name "WEEK_OF_WEEK_BASED_YEAR" init_value " Field.WEEK_OF_WEEK_BASED_YEAR" class_relation const_relation public
	    comment "
The field that represents the week-of-week-based-year.
<p>
This field allows the week of the week-based-year value to be queried and set.
The week-of-week-based-year has values from 1 to 52, or 53 if the
week-based-year has 53 weeks.
<p>
In the resolving phase of parsing, a date can be created from a
week-based-year, week-of-week-based-year and day-of-week.
<p>
In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are
validated against their range of valid values. The week-of-week-based-year
field is validated from 1 to 52 or 53 depending on the week-based-year.
<p>
In {@linkplain ResolverStyle#SMART smart mode}, all three fields are
validated against their range of valid values. The week-of-week-based-year
field is validated between 1 and 53, ignoring the week-based-year.
If the week-of-week-based-year is 53, but the week-based-year only has
52 weeks, then the resulting date is in week 1 of the following week-based-year.
<p>
In {@linkplain ResolverStyle#LENIENT lenient mode}, only the week-based-year
is validated against the range of valid values. If the day-of-week is outside
the range 1 to 7, then the resulting date is adjusted by a suitable number of
weeks to reduce the day-of-week to the range 1 to 7. If the week-of-week-based-year
value is outside the range 1 to 52, then any excess weeks are added or subtracted
from the resulting date.
<p>
This unit is an immutable and thread-safe singleton.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3465474 // WEEK_OF_WEEK_BASED_YEAR (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3465602 // WEEK_BASED_YEAR (<unidirectional association>)
	relation 3465602 --->
	  a role_name "WEEK_BASED_YEAR" init_value " Field.WEEK_BASED_YEAR" class_relation const_relation public
	    comment "
The field that represents the week-based-year.
<p>
This field allows the week-based-year value to be queried and set.
<p>
The field has a range that matches {@link LocalDate#MAX} and {@link LocalDate#MIN}.
<p>
In the resolving phase of parsing, a date can be created from a
week-based-year, week-of-week-based-year and day-of-week.
See {@link #WEEK_OF_WEEK_BASED_YEAR} for details.
<p>
This unit is an immutable and thread-safe singleton.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3465602 // WEEK_BASED_YEAR (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3465730 // WEEK_BASED_YEARS (<unidirectional association>)
	relation 3465730 --->
	  a role_name "WEEK_BASED_YEARS" init_value " Unit.WEEK_BASED_YEARS" class_relation const_relation public
	    comment "
The unit that represents week-based-years for the purpose of addition and subtraction.
<p>
This allows a number of week-based-years to be added to, or subtracted from, a date.
The unit is equal to either 52 or 53 weeks.
The estimated duration of a week-based-year is the same as that of a standard ISO
year at {@code 365.2425 Days}.
<p>
The rules for addition add the number of week-based-years to the existing value
for the week-based-year field. If the resulting week-based-year only has 52 weeks,
then the date will be in week 1 of the following week-based-year.
<p>
This unit is an immutable and thread-safe singleton.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3465730 // WEEK_BASED_YEARS (<unidirectional association>)
	  b parent class_ref 1051778 // TemporalUnit
      end

      classrelation 3465858 // QUARTER_YEARS (<unidirectional association>)
	relation 3465858 --->
	  a role_name "QUARTER_YEARS" init_value " Unit.QUARTER_YEARS" class_relation const_relation public
	    comment "
Unit that represents the concept of a quarter-year.
For the ISO calendar system, it is equal to 3 months.
The estimated duration of a quarter-year is one quarter of {@code 365.2425 Days}.
<p>
This unit is an immutable and thread-safe singleton.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3465858 // QUARTER_YEARS (<unidirectional association>)
	  b parent class_ref 1051778 // TemporalUnit
      end

      operation 8554626 "IsoFields"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restricted constructor.
"
      end

      class 1061890 "Field"
	visibility private stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3465986 // <realization>
	  relation 3465986 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3465986 // <realization>
	    b parent class_ref 1050882 // TemporalField
	end

	attribute 1974146 "DAY_OF_QUARTER"
	  public type class_ref 1061890 // Field
	  cpp_decl ""
	  java_decl "  ${@}${name} {
            @Override
            public TemporalUnit getBaseUnit() {
                return DAYS;
            }
            @Override
            public TemporalUnit getRangeUnit() {
                return QUARTER_YEARS;
            }
            @Override
            public ValueRange range() {
                return ValueRange.of(1, 90, 92);
            }
            @Override
            public boolean isSupportedBy(TemporalAccessor temporal) {
                return temporal.isSupported(DAY_OF_YEAR) && temporal.isSupported(MONTH_OF_YEAR) &&
                        temporal.isSupported(YEAR) && isIso(temporal);
            }
            @Override
            public ValueRange rangeRefinedBy(TemporalAccessor temporal) {
                if (isSupportedBy(temporal) == false) {
                    throw new UnsupportedTemporalTypeException(\"Unsupported field: DayOfQuarter\");
                }
                long qoy = temporal.getLong(QUARTER_OF_YEAR);
                if (qoy == 1) {
                    long year = temporal.getLong(YEAR);
                    return (IsoChronology.INSTANCE.isLeapYear(year) ? ValueRange.of(1, 91) : ValueRange.of(1, 90));
                } else if (qoy == 2) {
                    return ValueRange.of(1, 91);
                } else if (qoy == 3 || qoy == 4) {
                    return ValueRange.of(1, 92);
                } // else value not from 1 to 4, so drop through
                return range();
            }
            @Override
            public long getFrom(TemporalAccessor temporal) {
                if (isSupportedBy(temporal) == false) {
                    throw new UnsupportedTemporalTypeException(\"Unsupported field: DayOfQuarter\");
                }
                int doy = temporal.get(DAY_OF_YEAR);
                int moy = temporal.get(MONTH_OF_YEAR);
                long year = temporal.getLong(YEAR);
                return doy - QUARTER_DAYS[((moy - 1) / 3) + (IsoChronology.INSTANCE.isLeapYear(year) ? 4 : 0)];
            }
            @SuppressWarnings(\"unchecked\")
            @Override
            public <R extends Temporal> R adjustInto(R temporal, long newValue) {
                // calls getFrom() to check if supported
                long curValue = getFrom(temporal);
                range().checkValidValue(newValue, this);  // leniently check from 1 to 92 TODO: check
                return (R) temporal.with(DAY_OF_YEAR, temporal.getLong(DAY_OF_YEAR) + (newValue - curValue));
            }
            @Override
            public ChronoLocalDate resolve(
                    Map<TemporalField, Long> fieldValues, TemporalAccessor partialTemporal, ResolverStyle resolverStyle) {
                Long yearLong = fieldValues.get(YEAR);
                Long qoyLong = fieldValues.get(QUARTER_OF_YEAR);
                if (yearLong == null || qoyLong == null) {
                    return null;
                }
                int y = YEAR.checkValidIntValue(yearLong);  // always validate
                long doq = fieldValues.get(DAY_OF_QUARTER);
                ensureIso(partialTemporal);
                LocalDate date;
                if (resolverStyle == ResolverStyle.LENIENT) {
                    date = LocalDate.of(y, 1, 1).plusMonths(Math.multiplyExact(Math.subtractExact(qoyLong, 1), 3));
                    doq = Math.subtractExact(doq, 1);
                } else {
                    int qoy = QUARTER_OF_YEAR.range().checkValidIntValue(qoyLong, QUARTER_OF_YEAR);  // validated
                    date = LocalDate.of(y, ((qoy - 1) * 3) + 1, 1);
                    if (doq < 1 || doq > 90) {
                        if (resolverStyle == ResolverStyle.STRICT) {
                            rangeRefinedBy(date).checkValidValue(doq, this);  // only allow exact range
                        } else {  // SMART
                            range().checkValidValue(doq, this);  // allow 1-92 rolling into next quarter
                        }
                    }
                    doq--;
                }
                fieldValues.remove(this);
                fieldValues.remove(YEAR);
                fieldValues.remove(QUARTER_OF_YEAR);
                return date.plusDays(doq);
            }
            @Override
            public String toString() {
                return \"DayOfQuarter\";
            }
        },${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1974274 "QUARTER_OF_YEAR"
	  public type class_ref 1061890 // Field
	  cpp_decl ""
	  java_decl "  ${@}${name} {
            @Override
            public TemporalUnit getBaseUnit() {
                return QUARTER_YEARS;
            }
            @Override
            public TemporalUnit getRangeUnit() {
                return YEARS;
            }
            @Override
            public ValueRange range() {
                return ValueRange.of(1, 4);
            }
            @Override
            public boolean isSupportedBy(TemporalAccessor temporal) {
                return temporal.isSupported(MONTH_OF_YEAR) && isIso(temporal);
            }
            @Override
            public long getFrom(TemporalAccessor temporal) {
                if (isSupportedBy(temporal) == false) {
                    throw new UnsupportedTemporalTypeException(\"Unsupported field: QuarterOfYear\");
                }
                long moy = temporal.getLong(MONTH_OF_YEAR);
                return ((moy + 2) / 3);
            }
            @SuppressWarnings(\"unchecked\")
            @Override
            public <R extends Temporal> R adjustInto(R temporal, long newValue) {
                // calls getFrom() to check if supported
                long curValue = getFrom(temporal);
                range().checkValidValue(newValue, this);  // strictly check from 1 to 4
                return (R) temporal.with(MONTH_OF_YEAR, temporal.getLong(MONTH_OF_YEAR) + (newValue - curValue) * 3);
            }
            @Override
            public String toString() {
                return \"QuarterOfYear\";
            }
        },${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1974402 "WEEK_OF_WEEK_BASED_YEAR"
	  public type class_ref 1061890 // Field
	  cpp_decl ""
	  java_decl "  ${@}${name} {
            @Override
            public String getDisplayName(Locale locale) {
                Objects.requireNonNull(locale, \"locale\");
                LocaleResources lr = LocaleProviderAdapter.getResourceBundleBased()
                                            .getLocaleResources(locale);
                ResourceBundle rb = lr.getJavaTimeFormatData();
                return rb.containsKey(\"field.week\") ? rb.getString(\"field.week\") : toString();
            }

            @Override
            public TemporalUnit getBaseUnit() {
                return WEEKS;
            }
            @Override
            public TemporalUnit getRangeUnit() {
                return WEEK_BASED_YEARS;
            }
            @Override
            public ValueRange range() {
                return ValueRange.of(1, 52, 53);
            }
            @Override
            public boolean isSupportedBy(TemporalAccessor temporal) {
                return temporal.isSupported(EPOCH_DAY) && isIso(temporal);
            }
            @Override
            public ValueRange rangeRefinedBy(TemporalAccessor temporal) {
                if (isSupportedBy(temporal) == false) {
                    throw new UnsupportedTemporalTypeException(\"Unsupported field: WeekOfWeekBasedYear\");
                }
                return getWeekRange(LocalDate.from(temporal));
            }
            @Override
            public long getFrom(TemporalAccessor temporal) {
                if (isSupportedBy(temporal) == false) {
                    throw new UnsupportedTemporalTypeException(\"Unsupported field: WeekOfWeekBasedYear\");
                }
                return getWeek(LocalDate.from(temporal));
            }
            @SuppressWarnings(\"unchecked\")
            @Override
            public <R extends Temporal> R adjustInto(R temporal, long newValue) {
                // calls getFrom() to check if supported
                range().checkValidValue(newValue, this);  // lenient range
                return (R) temporal.plus(Math.subtractExact(newValue, getFrom(temporal)), WEEKS);
            }
            @Override
            public ChronoLocalDate resolve(
                    Map<TemporalField, Long> fieldValues, TemporalAccessor partialTemporal, ResolverStyle resolverStyle) {
                Long wbyLong = fieldValues.get(WEEK_BASED_YEAR);
                Long dowLong = fieldValues.get(DAY_OF_WEEK);
                if (wbyLong == null || dowLong == null) {
                    return null;
                }
                int wby = WEEK_BASED_YEAR.range().checkValidIntValue(wbyLong, WEEK_BASED_YEAR);  // always validate
                long wowby = fieldValues.get(WEEK_OF_WEEK_BASED_YEAR);
                ensureIso(partialTemporal);
                LocalDate date = LocalDate.of(wby, 1, 4);
                if (resolverStyle == ResolverStyle.LENIENT) {
                    long dow = dowLong;  // unvalidated
                    if (dow > 7) {
                        date = date.plusWeeks((dow - 1) / 7);
                        dow = ((dow - 1) % 7) + 1;
                    } else if (dow < 1) {
                        date = date.plusWeeks(Math.subtractExact(dow,  7) / 7);
                        dow = ((dow + 6) % 7) + 1;
                    }
                    date = date.plusWeeks(Math.subtractExact(wowby, 1)).with(DAY_OF_WEEK, dow);
                } else {
                    int dow = DAY_OF_WEEK.checkValidIntValue(dowLong);  // validated
                    if (wowby < 1 || wowby > 52) {
                        if (resolverStyle == ResolverStyle.STRICT) {
                            getWeekRange(date).checkValidValue(wowby, this);  // only allow exact range
                        } else {  // SMART
                            range().checkValidValue(wowby, this);  // allow 1-53 rolling into next year
                        }
                    }
                    date = date.plusWeeks(wowby - 1).with(DAY_OF_WEEK, dow);
                }
                fieldValues.remove(this);
                fieldValues.remove(WEEK_BASED_YEAR);
                fieldValues.remove(DAY_OF_WEEK);
                return date;
            }
            @Override
            public String toString() {
                return \"WeekOfWeekBasedYear\";
            }
        },${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1974530 "WEEK_BASED_YEAR"
	  public type class_ref 1061890 // Field
	  cpp_decl ""
	  java_decl "  ${@}${name} {
            @Override
            public TemporalUnit getBaseUnit() {
                return WEEK_BASED_YEARS;
            }
            @Override
            public TemporalUnit getRangeUnit() {
                return FOREVER;
            }
            @Override
            public ValueRange range() {
                return YEAR.range();
            }
            @Override
            public boolean isSupportedBy(TemporalAccessor temporal) {
                return temporal.isSupported(EPOCH_DAY) && isIso(temporal);
            }
            @Override
            public long getFrom(TemporalAccessor temporal) {
                if (isSupportedBy(temporal) == false) {
                    throw new UnsupportedTemporalTypeException(\"Unsupported field: WeekBasedYear\");
                }
                return getWeekBasedYear(LocalDate.from(temporal));
            }
            @SuppressWarnings(\"unchecked\")
            @Override
            public <R extends Temporal> R adjustInto(R temporal, long newValue) {
                if (isSupportedBy(temporal) == false) {
                    throw new UnsupportedTemporalTypeException(\"Unsupported field: WeekBasedYear\");
                }
                int newWby = range().checkValidIntValue(newValue, WEEK_BASED_YEAR);  // strict check
                LocalDate date = LocalDate.from(temporal);
                int dow = date.get(DAY_OF_WEEK);
                int week = getWeek(date);
                if (week == 53 && getWeekRange(newWby) == 52) {
                    week = 52;
                }
                LocalDate resolved = LocalDate.of(newWby, 1, 4);  // 4th is guaranteed to be in week one
                int days = (dow - resolved.get(DAY_OF_WEEK)) + ((week - 1) * 7);
                resolved = resolved.plusDays(days);
                return (R) temporal.with(resolved);
            }
            @Override
            public String toString() {
                return \"WeekBasedYear\";
            }
        },${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8554754 "isDateBased"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8554882 "isTimeBased"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8555010 "rangeRefinedBy"
	  public return_type class_ref 1051010 // ValueRange
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	attribute 1974658 "QUARTER_DAYS"
	  class_attribute const_attribute private explicit_type "int"
	  multiplicity "[]"
	  init_value " {0, 90, 181, 273, 0, 91, 182, 274}"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "-------------------------------------------------------------------------
"
	end

	operation 8555138 "isIso"
	  class_operation private explicit_return_type "boolean"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8555266 "ensureIso"
	  class_operation private explicit_return_type "void"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8555394 "getWeekRange"
	  class_operation private return_type class_ref 1051010 // ValueRange
	  nparams 1
	    param inout name "date" type class_ref 1040770 // LocalDate
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8555522 "getWeekRange"
	  class_operation private explicit_return_type "int"
	  nparams 1
	    param in name "wby" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8555650 "getWeek"
	  class_operation private explicit_return_type "int"
	  nparams 1
	    param inout name "date" type class_ref 1040770 // LocalDate
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8555778 "getWeekBasedYear"
	  class_operation private explicit_return_type "int"
	  nparams 1
	    param inout name "date" type class_ref 1040770 // LocalDate
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1062018 "Unit"
	visibility private stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3466114 // <realization>
	  relation 3466114 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3466114 // <realization>
	    b parent class_ref 1051778 // TemporalUnit
	end

	attribute 1974786 "WEEK_BASED_YEARS"
	  public type class_ref 1062018 // Unit
	  cpp_decl ""
	  java_decl "  ${@}${name}(\"WeekBasedYears\", Duration.ofSeconds(31556952L)),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Unit that represents the concept of a week-based-year.
"
	end

	attribute 1974914 "QUARTER_YEARS"
	  public type class_ref 1062018 // Unit
	  cpp_decl ""
	  java_decl "  ${@}${name}(\"QuarterYears\", Duration.ofSeconds(31556952L / 4)),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Unit that represents the concept of a quarter-year.
"
	end

	classrelation 3466242 // name (<unidirectional association>)
	  relation 3466242 --->
	    a role_name "name" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3466242 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3466370 // duration (<unidirectional association>)
	  relation 3466370 --->
	    a role_name "duration" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3466370 // duration (<unidirectional association>)
	    b parent class_ref 1049858 // Duration
	end

	operation 8555906 "Unit"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "estimatedDuration" type class_ref 1049858 // Duration
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8556034 "getDuration"
	  public return_type class_ref 1049858 // Duration
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8556162 "isDurationEstimated"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8556290 "isDateBased"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8556418 "isTimeBased"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8556546 "isSupportedBy"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "temporal" type class_ref 1051394 // Temporal
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8556674 "addTo"
	  public explicit_return_type "R"
	  nparams 2
	    param inout name "temporal" explicit_type "R"
	    param in name "amount" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends Temporal> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	  
	  
	  
	end

	operation 8556802 "between"
	  public explicit_return_type "long"
	  nparams 2
	    param inout name "temporal1Inclusive" type class_ref 1051394 // Temporal
	    param inout name "temporal2Exclusive" type class_ref 1051394 // Temporal
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8556930 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1062146 "JulianFields"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A set of date fields that provide access to Julian Days.
<p>
The Julian Day is a standard way of expressing date and time commonly used in the scientific community.
It is expressed as a decimal number of whole days where days start at midday.
This class represents variations on Julian Days that count whole days from midnight.
<p>
The fields are implemented relative to {@link ChronoField#EPOCH_DAY EPOCH_DAY}.
The fields are supported, and can be queried and set if {@code EPOCH_DAY} is available.
The fields work with all chronologies.

@implSpec
This is an immutable and thread-safe class.

@since 1.8
"
      attribute 1975042 "JULIAN_DAY_OFFSET"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2440588L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The offset from Julian to EPOCH DAY.

"
      end

      classrelation 3466498 // JULIAN_DAY (<unidirectional association>)
	relation 3466498 --->
	  a role_name "JULIAN_DAY" init_value " Field.JULIAN_DAY" class_relation const_relation public
	    comment "
Julian Day field.
<p>
This is an integer-based version of the Julian Day Number.
Julian Day is a well-known system that represents the count of whole days since day 0,
which is defined to be January 1, 4713 BCE in the Julian calendar, and -4713-11-24 Gregorian.
The field  has \"JulianDay\" as 'name', and 'DAYS' as 'baseUnit'.
The field always refers to the local date-time, ignoring the offset or zone.
<p>
For date-times, 'JULIAN_DAY.getFrom()' assumes the same value from
midnight until just before the next midnight.
When 'JULIAN_DAY.adjustInto()' is applied to a date-time, the time of day portion remains unaltered.
'JULIAN_DAY.adjustInto()' and 'JULIAN_DAY.getFrom()' only apply to {@code Temporal} objects that
can be converted into {@link ChronoField#EPOCH_DAY}.
An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.
<p>
In the resolving phase of parsing, a date can be created from a Julian Day field.
In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}
the Julian Day value is validated against the range of valid values.
In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.

<h3>Astronomical and Scientific Notes</h3>
The standard astronomical definition uses a fraction to indicate the time-of-day,
thus 3.25 would represent the time 18:00, since days start at midday.
This implementation uses an integer and days starting at midnight.
The integer value for the Julian Day Number is the astronomical Julian Day value at midday
of the date in question.
This amounts to the astronomical Julian Day, rounded to an integer {@code JDN = floor(JD + 0.5)}.

<pre>
 | ISO date          |  Julian Day Number | Astronomical Julian Day |
 | 1970-01-01T00:00  |         2,440,588  |         2,440,587.5     |
 | 1970-01-01T06:00  |         2,440,588  |         2,440,587.75    |
 | 1970-01-01T12:00  |         2,440,588  |         2,440,588.0     |
 | 1970-01-01T18:00  |         2,440,588  |         2,440,588.25    |
 | 1970-01-02T00:00  |         2,440,589  |         2,440,588.5     |
 | 1970-01-02T06:00  |         2,440,589  |         2,440,588.75    |
 | 1970-01-02T12:00  |         2,440,589  |         2,440,589.0     |
</pre>
<p>
Julian Days are sometimes taken to imply Universal Time or UTC, but this
implementation always uses the Julian Day number for the local date,
regardless of the offset or time-zone.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3466498 // JULIAN_DAY (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3466626 // MODIFIED_JULIAN_DAY (<unidirectional association>)
	relation 3466626 --->
	  a role_name "MODIFIED_JULIAN_DAY" init_value " Field.MODIFIED_JULIAN_DAY" class_relation const_relation public
	    comment "
Modified Julian Day field.
<p>
This is an integer-based version of the Modified Julian Day Number.
Modified Julian Day (MJD) is a well-known system that counts days continuously.
It is defined relative to astronomical Julian Day as  {@code MJD = JD - 2400000.5}.
Each Modified Julian Day runs from midnight to midnight.
The field always refers to the local date-time, ignoring the offset or zone.
<p>
For date-times, 'MODIFIED_JULIAN_DAY.getFrom()' assumes the same value from
midnight until just before the next midnight.
When 'MODIFIED_JULIAN_DAY.adjustInto()' is applied to a date-time, the time of day portion remains unaltered.
'MODIFIED_JULIAN_DAY.adjustInto()' and 'MODIFIED_JULIAN_DAY.getFrom()' only apply to {@code Temporal} objects
that can be converted into {@link ChronoField#EPOCH_DAY}.
An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.
<p>
This implementation is an integer version of MJD with the decimal part rounded to floor.
<p>
In the resolving phase of parsing, a date can be created from a Modified Julian Day field.
In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}
the Modified Julian Day value is validated against the range of valid values.
In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.

<h3>Astronomical and Scientific Notes</h3>
<pre>
 | ISO date          | Modified Julian Day |      Decimal MJD |
 | 1970-01-01T00:00  |             40,587  |       40,587.0   |
 | 1970-01-01T06:00  |             40,587  |       40,587.25  |
 | 1970-01-01T12:00  |             40,587  |       40,587.5   |
 | 1970-01-01T18:00  |             40,587  |       40,587.75  |
 | 1970-01-02T00:00  |             40,588  |       40,588.0   |
 | 1970-01-02T06:00  |             40,588  |       40,588.25  |
 | 1970-01-02T12:00  |             40,588  |       40,588.5   |
</pre>

Modified Julian Days are sometimes taken to imply Universal Time or UTC, but this
implementation always uses the Modified Julian Day for the local date,
regardless of the offset or time-zone.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3466626 // MODIFIED_JULIAN_DAY (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3466754 // RATA_DIE (<unidirectional association>)
	relation 3466754 --->
	  a role_name "RATA_DIE" init_value " Field.RATA_DIE" class_relation const_relation public
	    comment "
Rata Die field.
<p>
Rata Die counts whole days continuously starting day 1 at midnight at the beginning of 0001-01-01 (ISO).
The field always refers to the local date-time, ignoring the offset or zone.
<p>
For date-times, 'RATA_DIE.getFrom()' assumes the same value from
midnight until just before the next midnight.
When 'RATA_DIE.adjustInto()' is applied to a date-time, the time of day portion remains unaltered.
'RATA_DIE.adjustInto()' and 'RATA_DIE.getFrom()' only apply to {@code Temporal} objects
that can be converted into {@link ChronoField#EPOCH_DAY}.
An {@link UnsupportedTemporalTypeException} is thrown for any other type of object.
<p>
In the resolving phase of parsing, a date can be created from a Rata Die field.
In {@linkplain ResolverStyle#STRICT strict mode} and {@linkplain ResolverStyle#SMART smart mode}
the Rata Die value is validated against the range of valid values.
In {@linkplain ResolverStyle#LENIENT lenient mode} no validation occurs.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3466754 // RATA_DIE (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      operation 8557058 "JulianFields"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Restricted constructor.
"
      end

      class 1062274 "Field"
	visibility private stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3466882 // <realization>
	  relation 3466882 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3466882 // <realization>
	    b parent class_ref 1050882 // TemporalField
	end

	attribute 1975170 "JULIAN_DAY"
	  public type class_ref 1062274 // Field
	  cpp_decl ""
	  java_decl "  ${@}${name}(\"JulianDay\", DAYS, FOREVER, JULIAN_DAY_OFFSET),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1975298 "MODIFIED_JULIAN_DAY"
	  public type class_ref 1062274 // Field
	  cpp_decl ""
	  java_decl "  ${@}${name}(\"ModifiedJulianDay\", DAYS, FOREVER, 40587L),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1975426 "RATA_DIE"
	  public type class_ref 1062274 // Field
	  cpp_decl ""
	  java_decl "  ${@}${name}(\"RataDie\", DAYS, FOREVER, 719163L),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1975554 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -7501623920830201812L"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3467010 // name (<unidirectional association>)
	  relation 3467010 --->
	    a role_name "name" const_relation private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3467010 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3467138 // baseUnit (<unidirectional association>)
	  relation 3467138 --->
	    a role_name "baseUnit" const_relation private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3467138 // baseUnit (<unidirectional association>)
	    b parent class_ref 1051778 // TemporalUnit
	end

	classrelation 3467266 // rangeUnit (<unidirectional association>)
	  relation 3467266 --->
	    a role_name "rangeUnit" const_relation private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3467266 // rangeUnit (<unidirectional association>)
	    b parent class_ref 1051778 // TemporalUnit
	end

	classrelation 3467394 // range (<unidirectional association>)
	  relation 3467394 --->
	    a role_name "range" const_relation private
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3467394 // range (<unidirectional association>)
	    b parent class_ref 1051010 // ValueRange
	end

	attribute 1975682 "offset"
	  const_attribute private explicit_type "long"
	  stereotype "attribute"
	  cpp_decl ""
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8557186 "Field"
	  private explicit_return_type ""
	  nparams 4
	    param inout name "name" type class_ref 128130 // String
	    param inout name "baseUnit" type class_ref 1051778 // TemporalUnit
	    param inout name "rangeUnit" type class_ref 1051778 // TemporalUnit
	    param in name "offset" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8557314 "getBaseUnit"
	  public return_type class_ref 1051778 // TemporalUnit
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "-----------------------------------------------------------------------"
	end

	operation 8557442 "getRangeUnit"
	  public return_type class_ref 1051778 // TemporalUnit
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8557570 "isDateBased"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8557698 "isTimeBased"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8557826 "range"
	  public return_type class_ref 1051010 // ValueRange
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8557954 "isSupportedBy"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "-----------------------------------------------------------------------"
	end

	operation 8558082 "rangeRefinedBy"
	  public return_type class_ref 1051010 // ValueRange
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8558210 "getFrom"
	  public explicit_return_type "long"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8558338 "adjustInto"
	  public explicit_return_type "R"
	  nparams 2
	    param inout name "temporal" explicit_type "R"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends Temporal> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	  
	  
	  
	end

	operation 8558466 "resolve"
	  public return_type class_ref 1052418 // ChronoLocalDate
	  nparams 3
	    param inout name "fieldValues" type class_ref 130178 // Map
	    param inout name "partialTemporal" type class_ref 1050754 // TemporalAccessor
	    param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "-----------------------------------------------------------------------"
	end

	operation 8558594 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "-----------------------------------------------------------------------"
	end
      end
    end

    class 1062402 "TemporalAdjusters"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Common and useful TemporalAdjusters.
<p>
Adjusters are a key tool for modifying temporal objects.
They exist to externalize the process of adjustment, permitting different
approaches, as per the strategy design pattern.
Examples might be an adjuster that sets the date avoiding weekends, or one that
sets the date to the last day of the month.
<p>
There are two equivalent ways of using a {@code TemporalAdjuster}.
The first is to invoke the method on the interface directly.
The second is to use {@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisAdjuster.adjustInto(temporal);
  temporal = temporal.with(thisAdjuster);
</pre>
It is recommended to use the second approach, {@code with(TemporalAdjuster)},
as it is a lot clearer to read in code.
<p>
This class contains a standard set of adjusters, available as static methods.
These include:
<ul>
<li>finding the first or last day of the month
<li>finding the first day of next month
<li>finding the first or last day of the year
<li>finding the first day of next year
<li>finding the first or last day-of-week within a month, such as \"first Wednesday in June\"
<li>finding the next or previous day-of-week, such as \"next Thursday\"
</ul>

@implSpec
All the implementations supplied by the static methods are immutable.

@see TemporalAdjuster
@since 1.8
"
      operation 8558722 "TemporalAdjusters"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private constructor since this is a utility class.
"
      end

      operation 8558850 "ofDateAdjuster"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 1
	  param inout name "dateBasedAdjuster" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<LocalDate> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code TemporalAdjuster} that wraps a date adjuster.
<p>
The {@code TemporalAdjuster} is based on the low level {@code Temporal} interface.
This method allows an adjustment from {@code LocalDate} to {@code LocalDate}
to be wrapped to match the temporal-based interface.
This is provided for convenience to make user-written adjusters simpler.
<p>
In general, user-written adjusters should be static constants:
<pre>{@code
 static TemporalAdjuster TWO_DAYS_LATER =
      TemporalAdjusters.ofDateAdjuster(date -> date.plusDays(2));
}</pre>

@param dateBasedAdjuster  the date-based adjuster, not null
@return the temporal adjuster wrapping on the date adjuster, not null
"
      end

      operation 8558978 "firstDayOfMonth"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the \"first day of month\" adjuster, which returns a new date set to
the first day of the current month.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 will return 2011-01-01.<br>
The input 2011-02-15 will return 2011-02-01.
<p>
The behavior is suitable for use with most calendar systems.
It is equivalent to:
<pre>
 temporal.with(DAY_OF_MONTH, 1);
</pre>

@return the first day-of-month adjuster, not null
"
      end

      operation 8559106 "lastDayOfMonth"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"last day of month\" adjuster, which returns a new date set to
the last day of the current month.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 will return 2011-01-31.<br>
The input 2011-02-15 will return 2011-02-28.<br>
The input 2012-02-15 will return 2012-02-29 (leap year).<br>
The input 2011-04-15 will return 2011-04-30.
<p>
The behavior is suitable for use with most calendar systems.
It is equivalent to:
<pre>
 long lastDay = temporal.range(DAY_OF_MONTH).getMaximum();
 temporal.with(DAY_OF_MONTH, lastDay);
</pre>

@return the last day-of-month adjuster, not null
"
      end

      operation 8559234 "firstDayOfNextMonth"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"first day of next month\" adjuster, which returns a new date set to
the first day of the next month.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 will return 2011-02-01.<br>
The input 2011-02-15 will return 2011-03-01.
<p>
The behavior is suitable for use with most calendar systems.
It is equivalent to:
<pre>
 temporal.with(DAY_OF_MONTH, 1).plus(1, MONTHS);
</pre>

@return the first day of next month adjuster, not null
"
      end

      operation 8559362 "firstDayOfYear"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the \"first day of year\" adjuster, which returns a new date set to
the first day of the current year.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 will return 2011-01-01.<br>
The input 2011-02-15 will return 2011-01-01.<br>
<p>
The behavior is suitable for use with most calendar systems.
It is equivalent to:
<pre>
 temporal.with(DAY_OF_YEAR, 1);
</pre>

@return the first day-of-year adjuster, not null
"
      end

      operation 8559490 "lastDayOfYear"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"last day of year\" adjuster, which returns a new date set to
the last day of the current year.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 will return 2011-12-31.<br>
The input 2011-02-15 will return 2011-12-31.<br>
<p>
The behavior is suitable for use with most calendar systems.
It is equivalent to:
<pre>
 long lastDay = temporal.range(DAY_OF_YEAR).getMaximum();
 temporal.with(DAY_OF_YEAR, lastDay);
</pre>

@return the last day-of-year adjuster, not null
"
      end

      operation 8559618 "firstDayOfNextYear"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the \"first day of next year\" adjuster, which returns a new date set to
the first day of the next year.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 will return 2012-01-01.
<p>
The behavior is suitable for use with most calendar systems.
It is equivalent to:
<pre>
 temporal.with(DAY_OF_YEAR, 1).plus(1, YEARS);
</pre>

@return the first day of next month adjuster, not null
"
      end

      operation 8559746 "firstInMonth"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 1
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the first in month adjuster, which returns a new date
in the same month with the first matching day-of-week.
This is used for expressions like 'first Tuesday in March'.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-12-15 for (MONDAY) will return 2011-12-05.<br>
The input 2011-12-15 for (FRIDAY) will return 2011-12-02.<br>
<p>
The behavior is suitable for use with most calendar systems.
It uses the {@code DAY_OF_WEEK} and {@code DAY_OF_MONTH} fields
and the {@code DAYS} unit, and assumes a seven day week.

@param dayOfWeek  the day-of-week, not null
@return the first in month adjuster, not null
"
      end

      operation 8559874 "lastInMonth"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 1
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last in month adjuster, which returns a new date
in the same month with the last matching day-of-week.
This is used for expressions like 'last Tuesday in March'.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-12-15 for (MONDAY) will return 2011-12-26.<br>
The input 2011-12-15 for (FRIDAY) will return 2011-12-30.<br>
<p>
The behavior is suitable for use with most calendar systems.
It uses the {@code DAY_OF_WEEK} and {@code DAY_OF_MONTH} fields
and the {@code DAYS} unit, and assumes a seven day week.

@param dayOfWeek  the day-of-week, not null
@return the first in month adjuster, not null
"
      end

      operation 8560002 "dayOfWeekInMonth"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 2
	  param in name "ordinal" explicit_type "int"
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the day-of-week in month adjuster, which returns a new date
in the same month with the ordinal day-of-week.
This is used for expressions like the 'second Tuesday in March'.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-12-15 for (1,TUESDAY) will return 2011-12-06.<br>
The input 2011-12-15 for (2,TUESDAY) will return 2011-12-13.<br>
The input 2011-12-15 for (3,TUESDAY) will return 2011-12-20.<br>
The input 2011-12-15 for (4,TUESDAY) will return 2011-12-27.<br>
The input 2011-12-15 for (5,TUESDAY) will return 2012-01-03.<br>
The input 2011-12-15 for (-1,TUESDAY) will return 2011-12-27 (last in month).<br>
The input 2011-12-15 for (-4,TUESDAY) will return 2011-12-06 (3 weeks before last in month).<br>
The input 2011-12-15 for (-5,TUESDAY) will return 2011-11-29 (4 weeks before last in month).<br>
The input 2011-12-15 for (0,TUESDAY) will return 2011-11-29 (last in previous month).<br>
<p>
For a positive or zero ordinal, the algorithm is equivalent to finding the first
day-of-week that matches within the month and then adding a number of weeks to it.
For a negative ordinal, the algorithm is equivalent to finding the last
day-of-week that matches within the month and then subtracting a number of weeks to it.
The ordinal number of weeks is not validated and is interpreted leniently
according to this algorithm. This definition means that an ordinal of zero finds
the last matching day-of-week in the previous month.
<p>
The behavior is suitable for use with most calendar systems.
It uses the {@code DAY_OF_WEEK} and {@code DAY_OF_MONTH} fields
and the {@code DAYS} unit, and assumes a seven day week.

@param ordinal  the week within the month, unbounded but typically from -5 to 5
@param dayOfWeek  the day-of-week, not null
@return the day-of-week in month adjuster, not null
"
      end

      operation 8560130 "next"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 1
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the next day-of-week adjuster, which adjusts the date to the
first occurrence of the specified day-of-week after the date being adjusted.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-17 (two days later).<br>
The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-19 (four days later).<br>
The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-22 (seven days later).
<p>
The behavior is suitable for use with most calendar systems.
It uses the {@code DAY_OF_WEEK} field and the {@code DAYS} unit,
and assumes a seven day week.

@param dayOfWeek  the day-of-week to move the date to, not null
@return the next day-of-week adjuster, not null
"
      end

      operation 8560258 "nextOrSame"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 1
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next-or-same day-of-week adjuster, which adjusts the date to the
first occurrence of the specified day-of-week after the date being adjusted
unless it is already on that day in which case the same object is returned.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-17 (two days later).<br>
The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-19 (four days later).<br>
The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-15 (same as input).
<p>
The behavior is suitable for use with most calendar systems.
It uses the {@code DAY_OF_WEEK} field and the {@code DAYS} unit,
and assumes a seven day week.

@param dayOfWeek  the day-of-week to check for or move the date to, not null
@return the next-or-same day-of-week adjuster, not null
"
      end

      operation 8560386 "previous"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 1
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the previous day-of-week adjuster, which adjusts the date to the
first occurrence of the specified day-of-week before the date being adjusted.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-10 (five days earlier).<br>
The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-12 (three days earlier).<br>
The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-08 (seven days earlier).
<p>
The behavior is suitable for use with most calendar systems.
It uses the {@code DAY_OF_WEEK} field and the {@code DAYS} unit,
and assumes a seven day week.

@param dayOfWeek  the day-of-week to move the date to, not null
@return the previous day-of-week adjuster, not null
"
      end

      operation 8560514 "previousOrSame"
	class_operation public return_type class_ref 1051266 // TemporalAdjuster
	nparams 1
	  param inout name "dayOfWeek" type class_ref 1050626 // DayOfWeek
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the previous-or-same day-of-week adjuster, which adjusts the date to the
first occurrence of the specified day-of-week before the date being adjusted
unless it is already on that day in which case the same object is returned.
<p>
The ISO calendar system behaves as follows:<br>
The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-10 (five days earlier).<br>
The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-12 (three days earlier).<br>
The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-15 (same as input).
<p>
The behavior is suitable for use with most calendar systems.
It uses the {@code DAY_OF_WEEK} field and the {@code DAYS} unit,
and assumes a seven day week.

@param dayOfWeek  the day-of-week to check for or move the date to, not null
@return the previous-or-same day-of-week adjuster, not null
"
      end
    end

    class 1062530 "TemporalQueries"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Common implementations of {@code TemporalQuery}.
<p>
This class provides common implementations of {@link TemporalQuery}.
These are defined here as they must be constants, and the definition
of lambdas does not guarantee that. By assigning them once here,
they become 'normal' Java constants.
<p>
Queries are a key tool for extracting information from temporal objects.
They exist to externalize the process of querying, permitting different
approaches, as per the strategy design pattern.
Examples might be a query that checks if the date is the day before February 29th
in a leap year, or calculates the number of days to your next birthday.
<p>
The {@link TemporalField} interface provides another mechanism for querying
temporal objects. That interface is limited to returning a {@code long}.
By contrast, queries can return any type.
<p>
There are two equivalent ways of using a {@code TemporalQuery}.
The first is to invoke the method on this interface directly.
The second is to use {@link TemporalAccessor#query(TemporalQuery)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisQuery.queryFrom(temporal);
  temporal = temporal.query(thisQuery);
</pre>
It is recommended to use the second approach, {@code query(TemporalQuery)},
as it is a lot clearer to read in code.
<p>
The most common implementations are method references, such as
{@code LocalDate::from} and {@code ZoneId::from}.
Additional common queries are provided to return:
<ul>
<li> a Chronology,
<li> a LocalDate,
<li> a LocalTime,
<li> a ZoneOffset,
<li> a precision,
<li> a zone, or
<li> a zoneId.
</ul>

@since 1.8
"
      operation 8560642 "TemporalQueries"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " note that it is vital that each method supplies a constant, not a
 calculated value, as they will be checked for using ==
 it is also vital that each constant is different (due to the == checking)
 as such, alterations to this code must be done with care

Private constructor since this is a utility class.
"
      end

      operation 8560770 "zoneId"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ZoneId> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 special constants should be used to extract information from a TemporalAccessor
 that cannot be derived in other ways
 Javadoc added here, so as to pretend they are more normal than they really are

A strict query for the {@code ZoneId}.
<p>
This queries a {@code TemporalAccessor} for the zone.
The zone is only returned if the date-time conceptually contains a {@code ZoneId}.
It will not be returned if the date-time only conceptually has an {@code ZoneOffset}.
Thus a {@link java.time.ZonedDateTime} will return the result of {@code getZone()},
but an {@link java.time.OffsetDateTime} will return null.
<p>
In most cases, applications should use {@link #zone()} as this query is too strict.
<p>
The result from JDK classes implementing {@code TemporalAccessor} is as follows:<br>
{@code LocalDate} returns null<br>
{@code LocalTime} returns null<br>
{@code LocalDateTime} returns null<br>
{@code ZonedDateTime} returns the associated zone<br>
{@code OffsetTime} returns null<br>
{@code OffsetDateTime} returns null<br>
{@code ChronoLocalDate} returns null<br>
{@code ChronoLocalDateTime} returns null<br>
{@code ChronoZonedDateTime} returns the associated zone<br>
{@code Era} returns null<br>
{@code DayOfWeek} returns null<br>
{@code Month} returns null<br>
{@code Year} returns null<br>
{@code YearMonth} returns null<br>
{@code MonthDay} returns null<br>
{@code ZoneOffset} returns null<br>
{@code Instant} returns null<br>

@return a query that can obtain the zone ID of a temporal, not null
"
      end

      operation 8560898 "chronology"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Chronology> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A query for the {@code Chronology}.
<p>
This queries a {@code TemporalAccessor} for the chronology.
If the target {@code TemporalAccessor} represents a date, or part of a date,
then it should return the chronology that the date is expressed in.
As a result of this definition, objects only representing time, such as
{@code LocalTime}, will return null.
<p>
The result from JDK classes implementing {@code TemporalAccessor} is as follows:<br>
{@code LocalDate} returns {@code IsoChronology.INSTANCE}<br>
{@code LocalTime} returns null (does not represent a date)<br>
{@code LocalDateTime} returns {@code IsoChronology.INSTANCE}<br>
{@code ZonedDateTime} returns {@code IsoChronology.INSTANCE}<br>
{@code OffsetTime} returns null (does not represent a date)<br>
{@code OffsetDateTime} returns {@code IsoChronology.INSTANCE}<br>
{@code ChronoLocalDate} returns the associated chronology<br>
{@code ChronoLocalDateTime} returns the associated chronology<br>
{@code ChronoZonedDateTime} returns the associated chronology<br>
{@code Era} returns the associated chronology<br>
{@code DayOfWeek} returns null (shared across chronologies)<br>
{@code Month} returns {@code IsoChronology.INSTANCE}<br>
{@code Year} returns {@code IsoChronology.INSTANCE}<br>
{@code YearMonth} returns {@code IsoChronology.INSTANCE}<br>
{@code MonthDay} returns null {@code IsoChronology.INSTANCE}<br>
{@code ZoneOffset} returns null (does not represent a date)<br>
{@code Instant} returns null (does not represent a date)<br>
<p>
The method {@link java.time.chrono.Chronology#from(TemporalAccessor)} can be used as a
{@code TemporalQuery} via a method reference, {@code Chronology::from}.
That method is equivalent to this query, except that it throws an
exception if a chronology cannot be obtained.

@return a query that can obtain the chronology of a temporal, not null
"
      end

      operation 8561026 "precision"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TemporalUnit> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A query for the smallest supported unit.
<p>
This queries a {@code TemporalAccessor} for the time precision.
If the target {@code TemporalAccessor} represents a consistent or complete date-time,
date or time then this must return the smallest precision actually supported.
Note that fields such as {@code NANO_OF_DAY} and {@code NANO_OF_SECOND}
are defined to always return ignoring the precision, thus this is the only
way to find the actual smallest supported unit.
For example, were {@code GregorianCalendar} to implement {@code TemporalAccessor}
it would return a precision of {@code MILLIS}.
<p>
The result from JDK classes implementing {@code TemporalAccessor} is as follows:<br>
{@code LocalDate} returns {@code DAYS}<br>
{@code LocalTime} returns {@code NANOS}<br>
{@code LocalDateTime} returns {@code NANOS}<br>
{@code ZonedDateTime} returns {@code NANOS}<br>
{@code OffsetTime} returns {@code NANOS}<br>
{@code OffsetDateTime} returns {@code NANOS}<br>
{@code ChronoLocalDate} returns {@code DAYS}<br>
{@code ChronoLocalDateTime} returns {@code NANOS}<br>
{@code ChronoZonedDateTime} returns {@code NANOS}<br>
{@code Era} returns {@code ERAS}<br>
{@code DayOfWeek} returns {@code DAYS}<br>
{@code Month} returns {@code MONTHS}<br>
{@code Year} returns {@code YEARS}<br>
{@code YearMonth} returns {@code MONTHS}<br>
{@code MonthDay} returns null (does not represent a complete date or time)<br>
{@code ZoneOffset} returns null (does not represent a date or time)<br>
{@code Instant} returns {@code NANOS}<br>

@return a query that can obtain the precision of a temporal, not null
"
      end

      operation 8561154 "zone"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ZoneId> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------
 non-special constants are standard queries that derive information from other information

A lenient query for the {@code ZoneId}, falling back to the {@code ZoneOffset}.
<p>
This queries a {@code TemporalAccessor} for the zone.
It first tries to obtain the zone, using {@link #zoneId()}.
If that is not found it tries to obtain the {@link #offset()}.
Thus a {@link java.time.ZonedDateTime} will return the result of {@code getZone()},
while an {@link java.time.OffsetDateTime} will return the result of {@code getOffset()}.
<p>
In most cases, applications should use this query rather than {@code #zoneId()}.
<p>
The method {@link ZoneId#from(TemporalAccessor)} can be used as a
{@code TemporalQuery} via a method reference, {@code ZoneId::from}.
That method is equivalent to this query, except that it throws an
exception if a zone cannot be obtained.

@return a query that can obtain the zone ID or offset of a temporal, not null
"
      end

      operation 8561282 "offset"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ZoneOffset> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A query for {@code ZoneOffset} returning null if not found.
<p>
This returns a {@code TemporalQuery} that can be used to query a temporal
object for the offset. The query will return null if the temporal
object cannot supply an offset.
<p>
The query implementation examines the {@link ChronoField#OFFSET_SECONDS OFFSET_SECONDS}
field and uses it to create a {@code ZoneOffset}.
<p>
The method {@link java.time.ZoneOffset#from(TemporalAccessor)} can be used as a
{@code TemporalQuery} via a method reference, {@code ZoneOffset::from}.
This query and {@code ZoneOffset::from} will return the same result if the
temporal object contains an offset. If the temporal object does not contain
an offset, then the method reference will throw an exception, whereas this
query will return null.

@return a query that can obtain the offset of a temporal, not null
"
      end

      operation 8561410 "localDate"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<LocalDate> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A query for {@code LocalDate} returning null if not found.
<p>
This returns a {@code TemporalQuery} that can be used to query a temporal
object for the local date. The query will return null if the temporal
object cannot supply a local date.
<p>
The query implementation examines the {@link ChronoField#EPOCH_DAY EPOCH_DAY}
field and uses it to create a {@code LocalDate}.
<p>
The method {@link ZoneOffset#from(TemporalAccessor)} can be used as a
{@code TemporalQuery} via a method reference, {@code LocalDate::from}.
This query and {@code LocalDate::from} will return the same result if the
temporal object contains a date. If the temporal object does not contain
a date, then the method reference will throw an exception, whereas this
query will return null.

@return a query that can obtain the date of a temporal, not null
"
      end

      operation 8561538 "localTime"
	class_operation public return_type class_ref 1051138 // TemporalQuery
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<LocalTime> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A query for {@code LocalTime} returning null if not found.
<p>
This returns a {@code TemporalQuery} that can be used to query a temporal
object for the local time. The query will return null if the temporal
object cannot supply a local time.
<p>
The query implementation examines the {@link ChronoField#NANO_OF_DAY NANO_OF_DAY}
field and uses it to create a {@code LocalTime}.
<p>
The method {@link ZoneOffset#from(TemporalAccessor)} can be used as a
{@code TemporalQuery} via a method reference, {@code LocalTime::from}.
This query and {@code LocalTime::from} will return the same result if the
temporal object contains a time. If the temporal object does not contain
a time, then the method reference will throw an exception, whereas this
query will return null.

@return a query that can obtain the time of a temporal, not null
"
      end

      classrelation 3467522 // ZONE_ID (<unidirectional association>)
	relation 3467522 --->
	  a role_name "ZONE_ID" init_value " (temporal) ->
        temporal.query(TemporalQueries.ZONE_ID)" class_relation const_relation package
	    comment "-----------------------------------------------------------------------

A strict query for the {@code ZoneId}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ZoneId> ${name}${value};
"
	    classrelation_ref 3467522 // ZONE_ID (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      classrelation 3467650 // CHRONO (<unidirectional association>)
	relation 3467650 --->
	  a role_name "CHRONO" init_value " (temporal) ->
        temporal.query(TemporalQueries.CHRONO)" class_relation const_relation package
	    comment "
A query for the {@code Chronology}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Chronology> ${name}${value};
"
	    classrelation_ref 3467650 // CHRONO (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      classrelation 3467778 // PRECISION (<unidirectional association>)
	relation 3467778 --->
	  a role_name "PRECISION" init_value " (temporal) ->
        temporal.query(TemporalQueries.PRECISION)" class_relation const_relation package
	    comment "
A query for the smallest supported unit.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TemporalUnit> ${name}${value};
"
	    classrelation_ref 3467778 // PRECISION (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      classrelation 3467906 // OFFSET (<unidirectional association>)
	relation 3467906 --->
	  a role_name "OFFSET" init_value " (temporal) -> {
        if (temporal.isSupported(OFFSET_SECONDS)) {
            return ZoneOffset.ofTotalSeconds(temporal.get(OFFSET_SECONDS));
        }
        return null;
    }" class_relation const_relation package
	    comment "-----------------------------------------------------------------------

A query for {@code ZoneOffset} returning null if not found.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ZoneOffset> ${name}${value};
"
	    classrelation_ref 3467906 // OFFSET (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      classrelation 3468034 // ZONE (<unidirectional association>)
	relation 3468034 --->
	  a role_name "ZONE" init_value " (temporal) -> {
        ZoneId zone = temporal.query(ZONE_ID);
        return (zone != null ? zone : temporal.query(OFFSET));
    }" class_relation const_relation package
	    comment "
A lenient query for the {@code ZoneId}, falling back to the {@code ZoneOffset}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ZoneId> ${name}${value};
"
	    classrelation_ref 3468034 // ZONE (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      classrelation 3468162 // LOCAL_DATE (<unidirectional association>)
	relation 3468162 --->
	  a role_name "LOCAL_DATE" init_value " (temporal) -> {
        if (temporal.isSupported(EPOCH_DAY)) {
            return LocalDate.ofEpochDay(temporal.getLong(EPOCH_DAY));
        }
        return null;
    }" class_relation const_relation package
	    comment "
A query for {@code LocalDate} returning null if not found.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<LocalDate> ${name}${value};
"
	    classrelation_ref 3468162 // LOCAL_DATE (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end

      classrelation 3468290 // LOCAL_TIME (<unidirectional association>)
	relation 3468290 --->
	  a role_name "LOCAL_TIME" init_value " (temporal) -> {
        if (temporal.isSupported(NANO_OF_DAY)) {
            return LocalTime.ofNanoOfDay(temporal.getLong(NANO_OF_DAY));
        }
        return null;
    }" class_relation const_relation package
	    comment "
A query for {@code LocalTime} returning null if not found.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<LocalTime> ${name}${value};
"
	    classrelation_ref 3468290 // LOCAL_TIME (<unidirectional association>)
	  b parent class_ref 1051138 // TemporalQuery
      end
    end

    class 1062658 "UnsupportedTemporalTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "UnsupportedTemporalTypeException indicates that a ChronoField or ChronoUnit is
not supported for a Temporal class.

@implSpec
This class is intended for use in a single thread.

@since 1.8
"
      classrelation 3468418 // <generalisation>
	relation 3468418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3468418 // <generalisation>
	  b parent class_ref 1050498 // DateTimeException
      end

      attribute 1975810 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6158898438688206006L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      operation 8561794 "UnsupportedTemporalTypeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new UnsupportedTemporalTypeException with the specified message.

@param message  the message to use for this exception, may be null
"
      end

      operation 8561922 "UnsupportedTemporalTypeException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new UnsupportedTemporalTypeException with the specified message and cause.

@param message  the message to use for this exception, may be null
@param cause  the cause of the exception, may be null
"
      end
    end

    class 1062786 "WeekFields"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Localized definitions of the day-of-week, week-of-month and week-of-year fields.
<p>
A standard week is seven days long, but cultures have different definitions for some
other aspects of a week. This class represents the definition of the week, for the
purpose of providing {@link TemporalField} instances.
<p>
WeekFields provides five fields,
{@link #dayOfWeek()}, {@link #weekOfMonth()}, {@link #weekOfYear()},
{@link #weekOfWeekBasedYear()}, and {@link #weekBasedYear()}
that provide access to the values from any {@linkplain Temporal temporal object}.
<p>
The computations for day-of-week, week-of-month, and week-of-year are based
on the  {@linkplain ChronoField#YEAR proleptic-year},
{@linkplain ChronoField#MONTH_OF_YEAR month-of-year},
{@linkplain ChronoField#DAY_OF_MONTH day-of-month}, and
{@linkplain ChronoField#DAY_OF_WEEK ISO day-of-week} which are based on the
{@linkplain ChronoField#EPOCH_DAY epoch-day} and the chronology.
The values may not be aligned with the {@linkplain ChronoField#YEAR_OF_ERA year-of-Era}
depending on the Chronology.
<p>A week is defined by:
<ul>
<li>The first day-of-week.
For example, the ISO-8601 standard considers Monday to be the first day-of-week.
<li>The minimal number of days in the first week.
For example, the ISO-8601 standard counts the first week as needing at least 4 days.
</ul>
Together these two values allow a year or month to be divided into weeks.

<h3>Week of Month</h3>
One field is used: week-of-month.
The calculation ensures that weeks never overlap a month boundary.
The month is divided into periods where each period starts on the defined first day-of-week.
The earliest period is referred to as week 0 if it has less than the minimal number of days
and week 1 if it has at least the minimal number of days.

<table cellpadding=\"0\" cellspacing=\"3\" border=\"0\" style=\"text-align: left; width: 50%;\">
<caption>Examples of WeekFields</caption>
<tr><th>Date</th><td>Day-of-week</td>
 <td>First day: Monday<br>Minimal days: 4</td><td>First day: Monday<br>Minimal days: 5</td></tr>
<tr><th>2008-12-31</th><td>Wednesday</td>
 <td>Week 5 of December 2008</td><td>Week 5 of December 2008</td></tr>
<tr><th>2009-01-01</th><td>Thursday</td>
 <td>Week 1 of January 2009</td><td>Week 0 of January 2009</td></tr>
<tr><th>2009-01-04</th><td>Sunday</td>
 <td>Week 1 of January 2009</td><td>Week 0 of January 2009</td></tr>
<tr><th>2009-01-05</th><td>Monday</td>
 <td>Week 2 of January 2009</td><td>Week 1 of January 2009</td></tr>
</table>

<h3>Week of Year</h3>
One field is used: week-of-year.
The calculation ensures that weeks never overlap a year boundary.
The year is divided into periods where each period starts on the defined first day-of-week.
The earliest period is referred to as week 0 if it has less than the minimal number of days
and week 1 if it has at least the minimal number of days.

<h3>Week Based Year</h3>
Two fields are used for week-based-year, one for the
{@link #weekOfWeekBasedYear() week-of-week-based-year} and one for
{@link #weekBasedYear() week-based-year}.  In a week-based-year, each week
belongs to only a single year.  Week 1 of a year is the first week that
starts on the first day-of-week and has at least the minimum number of days.
The first and last weeks of a year may contain days from the
previous calendar year or next calendar year respectively.

<table cellpadding=\"0\" cellspacing=\"3\" border=\"0\" style=\"text-align: left; width: 50%;\">
<caption>Examples of WeekFields for week-based-year</caption>
<tr><th>Date</th><td>Day-of-week</td>
 <td>First day: Monday<br>Minimal days: 4</td><td>First day: Monday<br>Minimal days: 5</td></tr>
<tr><th>2008-12-31</th><td>Wednesday</td>
 <td>Week 1 of 2009</td><td>Week 53 of 2008</td></tr>
<tr><th>2009-01-01</th><td>Thursday</td>
 <td>Week 1 of 2009</td><td>Week 53 of 2008</td></tr>
<tr><th>2009-01-04</th><td>Sunday</td>
 <td>Week 1 of 2009</td><td>Week 53 of 2008</td></tr>
<tr><th>2009-01-05</th><td>Monday</td>
 <td>Week 2 of 2009</td><td>Week 1 of 2009</td></tr>
</table>

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3468674 // <realization>
	relation 3468674 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3468674 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3468802 // CACHE (<unidirectional association>)
	relation 3468802 --->
	  a role_name "CACHE" init_value " new ConcurrentHashMap<>(4, 0.75f, 2)" class_relation const_relation private
	    comment " implementation notes
 querying week-of-month or week-of-year should return the week value bound within the month/year
 however, setting the week value should be lenient (use plus/minus weeks)
 allow week-of-month outer range [0 to 6]
 allow week-of-year outer range [0 to 54]
 this is because callers shouldn't be expected to know the details of validity

The cache of rules by firstDayOfWeek plus minimalDays.
Initialized first to be available for definition of ISO, etc.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, WeekFields> ${name}${value};
"
	    classrelation_ref 3468802 // CACHE (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      classrelation 3468930 // ISO (<unidirectional association>)
	relation 3468930 --->
	  a role_name "ISO" init_value " new WeekFields(DayOfWeek.MONDAY, 4)" class_relation const_relation public
	    comment "
The ISO-8601 definition, where a week starts on Monday and the first week
has a minimum of 4 days.
<p>
The ISO-8601 standard defines a calendar system based on weeks.
It uses the week-based-year and week-of-week-based-year concepts to split
up the passage of days instead of the standard year/month/day.
<p>
Note that the first week may start in the previous calendar year.
Note also that the first few days of a calendar year may be in the
week-based-year corresponding to the previous calendar year.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3468930 // ISO (<unidirectional association>)
	  b parent class_ref 1062786 // WeekFields
      end

      classrelation 3469058 // SUNDAY_START (<unidirectional association>)
	relation 3469058 --->
	  a role_name "SUNDAY_START" init_value " WeekFields.of(DayOfWeek.SUNDAY, 1)" class_relation const_relation public
	    comment "
The common definition of a week that starts on Sunday and the first week
has a minimum of 1 day.
<p>
Defined as starting on Sunday and with a minimum of 1 day in the month.
This week definition is in use in the US and other European countries.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3469058 // SUNDAY_START (<unidirectional association>)
	  b parent class_ref 1062786 // WeekFields
      end

      classrelation 3469186 // WEEK_BASED_YEARS (<unidirectional association>)
	relation 3469186 --->
	  a role_name "WEEK_BASED_YEARS" init_value " IsoFields.WEEK_BASED_YEARS" class_relation const_relation public
	    comment "
The unit that represents week-based-years for the purpose of addition and subtraction.
<p>
This allows a number of week-based-years to be added to, or subtracted from, a date.
The unit is equal to either 52 or 53 weeks.
The estimated duration of a week-based-year is the same as that of a standard ISO
year at {@code 365.2425 Days}.
<p>
The rules for addition add the number of week-based-years to the existing value
for the week-based-year field retaining the week-of-week-based-year
and day-of-week, unless the week number it too large for the target year.
In that case, the week is set to the last week of the year
with the same day-of-week.
<p>
This unit is an immutable and thread-safe singleton.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3469186 // WEEK_BASED_YEARS (<unidirectional association>)
	  b parent class_ref 1051778 // TemporalUnit
      end

      attribute 1976578 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1177360819670808121L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3469314 // firstDayOfWeek (<unidirectional association>)
	relation 3469314 --->
	  a role_name "firstDayOfWeek" const_relation private
	    comment "
The first day-of-week.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3469314 // firstDayOfWeek (<unidirectional association>)
	  b parent class_ref 1050626 // DayOfWeek
      end

      attribute 1976706 "minimalDays"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimal number of days in the first week.

"
      end

      classrelation 3469442 // dayOfWeek (<unidirectional association>)
	relation 3469442 --->
	  a role_name "dayOfWeek" init_value " ComputedDayOfField.ofDayOfWeekField(this)" const_relation private
	    comment "
The field used to access the computed DayOfWeek.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3469442 // dayOfWeek (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3469570 // weekOfMonth (<unidirectional association>)
	relation 3469570 --->
	  a role_name "weekOfMonth" init_value " ComputedDayOfField.ofWeekOfMonthField(this)" const_relation private
	    comment "
The field used to access the computed WeekOfMonth.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3469570 // weekOfMonth (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3469698 // weekOfYear (<unidirectional association>)
	relation 3469698 --->
	  a role_name "weekOfYear" init_value " ComputedDayOfField.ofWeekOfYearField(this)" const_relation private
	    comment "
The field used to access the computed WeekOfYear.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3469698 // weekOfYear (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3469826 // weekOfWeekBasedYear (<unidirectional association>)
	relation 3469826 --->
	  a role_name "weekOfWeekBasedYear" init_value " ComputedDayOfField.ofWeekOfWeekBasedYearField(this)" const_relation private
	    comment "
The field that represents the week-of-week-based-year.
<p>
This field allows the week of the week-based-year value to be queried and set.
<p>
This unit is an immutable and thread-safe singleton.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3469826 // weekOfWeekBasedYear (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      classrelation 3469954 // weekBasedYear (<unidirectional association>)
	relation 3469954 --->
	  a role_name "weekBasedYear" init_value " ComputedDayOfField.ofWeekBasedYearField(this)" const_relation private
	    comment "
The field that represents the week-based-year.
<p>
This field allows the week-based-year value to be queried and set.
<p>
This unit is an immutable and thread-safe singleton.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3469954 // weekBasedYear (<unidirectional association>)
	  b parent class_ref 1050882 // TemporalField
      end

      operation 8564482 "of"
	class_operation public return_type class_ref 1062786 // WeekFields
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code WeekFields} appropriate for a locale.
<p>
This will look up appropriate values from the provider of localization data.

@param locale  the locale to use, not null
@return the week-definition, not null
"
      end

      operation 8564610 "of"
	class_operation public return_type class_ref 1062786 // WeekFields
	nparams 2
	  param inout name "firstDayOfWeek" type class_ref 1050626 // DayOfWeek
	  param in name "minimalDaysInFirstWeek" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code WeekFields} from the first day-of-week and minimal days.
<p>
The first day-of-week defines the ISO {@code DayOfWeek} that is day 1 of the week.
The minimal number of days in the first week defines how many days must be present
in a month or year, starting from the first day-of-week, before the week is counted
as the first week. A value of 1 will count the first day of the month or year as part
of the first week, whereas a value of 7 will require the whole seven days to be in
the new month or year.
<p>
WeekFields instances are singletons; for each unique combination
of {@code firstDayOfWeek} and {@code minimalDaysInFirstWeek} the
the same instance will be returned.

@param firstDayOfWeek  the first day of the week, not null
@param minimalDaysInFirstWeek  the minimal number of days in the first week, from 1 to 7
@return the week-definition, not null
@throws IllegalArgumentException if the minimal days value is less than one
     or greater than 7
"
      end

      operation 8564738 "WeekFields"
	private explicit_return_type ""
	nparams 2
	  param inout name "firstDayOfWeek" type class_ref 1050626 // DayOfWeek
	  param in name "minimalDaysInFirstWeek" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates an instance of the definition.

@param firstDayOfWeek  the first day of the week, not null
@param minimalDaysInFirstWeek  the minimal number of days in the first week, from 1 to 7
@throws IllegalArgumentException if the minimal days value is invalid
"
      end

      operation 8564866 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 3
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Restore the state of a WeekFields from the stream.
Check that the values are valid.

@param s the stream to read
@throws InvalidObjectException if the serialized object has an invalid
    value for firstDayOfWeek or minimalDays.
@throws ClassNotFoundException if a class cannot be resolved
"
      end

      operation 8564994 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the singleton WeekFields associated with the
{@code firstDayOfWeek} and {@code minimalDays}.
@return the singleton WeekFields for the firstDayOfWeek and minimalDays.
@throws InvalidObjectException if the serialized object has invalid
    values for firstDayOfWeek or minimalDays.
"
      end

      operation 8565122 "getFirstDayOfWeek"
	public return_type class_ref 1050626 // DayOfWeek
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the first day-of-week.
<p>
The first day-of-week varies by culture.
For example, the US uses Sunday, while France and the ISO-8601 standard use Monday.
This method returns the first day using the standard {@code DayOfWeek} enum.

@return the first day-of-week, not null
"
      end

      operation 8565250 "getMinimalDaysInFirstWeek"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minimal number of days in the first week.
<p>
The number of days considered to define the first week of a month or year
varies by culture.
For example, the ISO-8601 requires 4 days (more than half a week) to
be present before counting the first week.

@return the minimal number of days in the first week of a month or year, from 1 to 7
"
      end

      operation 8565378 "dayOfWeek"
	public return_type class_ref 1050882 // TemporalField
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a field to access the day of week based on this {@code WeekFields}.
<p>
This is similar to {@link ChronoField#DAY_OF_WEEK} but uses values for
the day-of-week based on this {@code WeekFields}.
The days are numbered from 1 to 7 where the
{@link #getFirstDayOfWeek() first day-of-week} is assigned the value 1.
<p>
For example, if the first day-of-week is Sunday, then that will have the
value 1, with other days ranging from Monday as 2 to Saturday as 7.
<p>
In the resolving phase of parsing, a localized day-of-week will be converted
to a standardized {@code ChronoField} day-of-week.
The day-of-week must be in the valid range 1 to 7.
Other fields in this class build dates using the standardized day-of-week.

@return a field providing access to the day-of-week with localized numbering, not null
"
      end

      operation 8565506 "weekOfMonth"
	public return_type class_ref 1050882 // TemporalField
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a field to access the week of month based on this {@code WeekFields}.
<p>
This represents the concept of the count of weeks within the month where weeks
start on a fixed day-of-week, such as Monday.
This field is typically used with {@link WeekFields#dayOfWeek()}.
<p>
Week one (1) is the week starting on the {@link WeekFields#getFirstDayOfWeek}
where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the month.
Thus, week one may start up to {@code minDays} days before the start of the month.
If the first week starts after the start of the month then the period before is week zero (0).
<p>
For example:<br>
- if the 1st day of the month is a Monday, week one starts on the 1st and there is no week zero<br>
- if the 2nd day of the month is a Monday, week one starts on the 2nd and the 1st is in week zero<br>
- if the 4th day of the month is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero<br>
- if the 5th day of the month is a Monday, week two starts on the 5th and the 1st to 4th is in week one<br>
<p>
This field can be used with any calendar system.
<p>
In the resolving phase of parsing, a date can be created from a year,
week-of-month, month-of-year and day-of-week.
<p>
In {@linkplain ResolverStyle#STRICT strict mode}, all four fields are
validated against their range of valid values. The week-of-month field
is validated to ensure that the resulting month is the month requested.
<p>
In {@linkplain ResolverStyle#SMART smart mode}, all four fields are
validated against their range of valid values. The week-of-month field
is validated from 0 to 6, meaning that the resulting date can be in a
different month to that specified.
<p>
In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week
are validated against the range of valid values. The resulting date is calculated
equivalent to the following four stage approach.
First, create a date on the first day of the first week of January in the requested year.
Then take the month-of-year, subtract one, and add the amount in months to the date.
Then take the week-of-month, subtract one, and add the amount in weeks to the date.
Finally, adjust to the correct day-of-week within the localized week.

@return a field providing access to the week-of-month, not null
"
      end

      operation 8565634 "weekOfYear"
	public return_type class_ref 1050882 // TemporalField
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a field to access the week of year based on this {@code WeekFields}.
<p>
This represents the concept of the count of weeks within the year where weeks
start on a fixed day-of-week, such as Monday.
This field is typically used with {@link WeekFields#dayOfWeek()}.
<p>
Week one(1) is the week starting on the {@link WeekFields#getFirstDayOfWeek}
where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.
Thus, week one may start up to {@code minDays} days before the start of the year.
If the first week starts after the start of the year then the period before is week zero (0).
<p>
For example:<br>
- if the 1st day of the year is a Monday, week one starts on the 1st and there is no week zero<br>
- if the 2nd day of the year is a Monday, week one starts on the 2nd and the 1st is in week zero<br>
- if the 4th day of the year is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero<br>
- if the 5th day of the year is a Monday, week two starts on the 5th and the 1st to 4th is in week one<br>
<p>
This field can be used with any calendar system.
<p>
In the resolving phase of parsing, a date can be created from a year,
week-of-year and day-of-week.
<p>
In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are
validated against their range of valid values. The week-of-year field
is validated to ensure that the resulting year is the year requested.
<p>
In {@linkplain ResolverStyle#SMART smart mode}, all three fields are
validated against their range of valid values. The week-of-year field
is validated from 0 to 54, meaning that the resulting date can be in a
different year to that specified.
<p>
In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week
are validated against the range of valid values. The resulting date is calculated
equivalent to the following three stage approach.
First, create a date on the first day of the first week in the requested year.
Then take the week-of-year, subtract one, and add the amount in weeks to the date.
Finally, adjust to the correct day-of-week within the localized week.

@return a field providing access to the week-of-year, not null
"
      end

      operation 8565762 "weekOfWeekBasedYear"
	public return_type class_ref 1050882 // TemporalField
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a field to access the week of a week-based-year based on this {@code WeekFields}.
<p>
This represents the concept of the count of weeks within the year where weeks
start on a fixed day-of-week, such as Monday and each week belongs to exactly one year.
This field is typically used with {@link WeekFields#dayOfWeek()} and
{@link WeekFields#weekBasedYear()}.
<p>
Week one(1) is the week starting on the {@link WeekFields#getFirstDayOfWeek}
where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.
If the first week starts after the start of the year then the period before
is in the last week of the previous year.
<p>
For example:<br>
- if the 1st day of the year is a Monday, week one starts on the 1st<br>
- if the 2nd day of the year is a Monday, week one starts on the 2nd and
  the 1st is in the last week of the previous year<br>
- if the 4th day of the year is a Monday, week one starts on the 4th and
  the 1st to 3rd is in the last week of the previous year<br>
- if the 5th day of the year is a Monday, week two starts on the 5th and
  the 1st to 4th is in week one<br>
<p>
This field can be used with any calendar system.
<p>
In the resolving phase of parsing, a date can be created from a week-based-year,
week-of-year and day-of-week.
<p>
In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are
validated against their range of valid values. The week-of-year field
is validated to ensure that the resulting week-based-year is the
week-based-year requested.
<p>
In {@linkplain ResolverStyle#SMART smart mode}, all three fields are
validated against their range of valid values. The week-of-week-based-year field
is validated from 1 to 53, meaning that the resulting date can be in the
following week-based-year to that specified.
<p>
In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week
are validated against the range of valid values. The resulting date is calculated
equivalent to the following three stage approach.
First, create a date on the first day of the first week in the requested week-based-year.
Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.
Finally, adjust to the correct day-of-week within the localized week.

@return a field providing access to the week-of-week-based-year, not null
"
      end

      operation 8565890 "weekBasedYear"
	public return_type class_ref 1050882 // TemporalField
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a field to access the year of a week-based-year based on this {@code WeekFields}.
<p>
This represents the concept of the year where weeks start on a fixed day-of-week,
such as Monday and each week belongs to exactly one year.
This field is typically used with {@link WeekFields#dayOfWeek()} and
{@link WeekFields#weekOfWeekBasedYear()}.
<p>
Week one(1) is the week starting on the {@link WeekFields#getFirstDayOfWeek}
where there are at least {@link WeekFields#getMinimalDaysInFirstWeek()} days in the year.
Thus, week one may start before the start of the year.
If the first week starts after the start of the year then the period before
is in the last week of the previous year.
<p>
This field can be used with any calendar system.
<p>
In the resolving phase of parsing, a date can be created from a week-based-year,
week-of-year and day-of-week.
<p>
In {@linkplain ResolverStyle#STRICT strict mode}, all three fields are
validated against their range of valid values. The week-of-year field
is validated to ensure that the resulting week-based-year is the
week-based-year requested.
<p>
In {@linkplain ResolverStyle#SMART smart mode}, all three fields are
validated against their range of valid values. The week-of-week-based-year field
is validated from 1 to 53, meaning that the resulting date can be in the
following week-based-year to that specified.
<p>
In {@linkplain ResolverStyle#LENIENT lenient mode}, the year and day-of-week
are validated against the range of valid values. The resulting date is calculated
equivalent to the following three stage approach.
First, create a date on the first day of the first week in the requested week-based-year.
Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date.
Finally, adjust to the correct day-of-week within the localized week.

@return a field providing access to the week-based-year, not null
"
      end

      operation 8566018 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this {@code WeekFields} is equal to the specified object.
<p>
The comparison is based on the entire state of the rules, which is
the first day-of-week and minimal days.

@param object  the other rules to compare to, null returns false
@return true if this is equal to the specified rules
"
      end

      operation 8566146 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this {@code WeekFields}.

@return a suitable hash code
"
      end

      operation 8566274 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

A string representation of this {@code WeekFields} instance.

@return the string representation, not null
"
      end

      class 1062914 "ComputedDayOfField"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3470082 // <realization>
	  relation 3470082 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3470082 // <realization>
	    b parent class_ref 1050882 // TemporalField
	end

	operation 8566402 "ofDayOfWeekField"
	  class_operation package return_type class_ref 1062914 // ComputedDayOfField
	  nparams 1
	    param inout name "weekDef" type class_ref 1062786 // WeekFields
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a field to access the day of week,
computed based on a WeekFields.
<p>
The WeekDefintion of the first day of the week is used with
the ISO DAY_OF_WEEK field to compute week boundaries.
"
	end

	operation 8566530 "ofWeekOfMonthField"
	  class_operation package return_type class_ref 1062914 // ComputedDayOfField
	  nparams 1
	    param inout name "weekDef" type class_ref 1062786 // WeekFields
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a field to access the week of month,
computed based on a WeekFields.
@see WeekFields#weekOfMonth()
"
	end

	operation 8566658 "ofWeekOfYearField"
	  class_operation package return_type class_ref 1062914 // ComputedDayOfField
	  nparams 1
	    param inout name "weekDef" type class_ref 1062786 // WeekFields
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a field to access the week of year,
computed based on a WeekFields.
@see WeekFields#weekOfYear()
"
	end

	operation 8566786 "ofWeekOfWeekBasedYearField"
	  class_operation package return_type class_ref 1062914 // ComputedDayOfField
	  nparams 1
	    param inout name "weekDef" type class_ref 1062786 // WeekFields
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a field to access the week of week-based-year,
computed based on a WeekFields.
@see WeekFields#weekOfWeekBasedYear()
"
	end

	operation 8566914 "ofWeekBasedYearField"
	  class_operation package return_type class_ref 1062914 // ComputedDayOfField
	  nparams 1
	    param inout name "weekDef" type class_ref 1062786 // WeekFields
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a field to access the week of week-based-year,
computed based on a WeekFields.
@see WeekFields#weekBasedYear()
"
	end

	operation 8567042 "ofWeekBasedYear"
	  private return_type class_ref 1052418 // ChronoLocalDate
	  nparams 4
	    param inout name "chrono" type class_ref 1052546 // Chronology
	    param in name "yowby" explicit_type "int"
	    param in name "wowby" explicit_type "int"
	    param in name "dow" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return a new week-based-year date of the Chronology, year, week-of-year,
and dow of week.
@param chrono The chronology of the new date
@param yowby the year of the week-based-year
@param wowby the week of the week-based-year
@param dow the day of the week
@return a ChronoLocalDate for the requested year, week of year, and day of week
"
	end

	classrelation 3470210 // name (<unidirectional association>)
	  relation 3470210 --->
	    a role_name "name" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3470210 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3470338 // weekDef (<unidirectional association>)
	  relation 3470338 --->
	    a role_name "weekDef" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3470338 // weekDef (<unidirectional association>)
	    b parent class_ref 1062786 // WeekFields
	end

	classrelation 3470466 // baseUnit (<unidirectional association>)
	  relation 3470466 --->
	    a role_name "baseUnit" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3470466 // baseUnit (<unidirectional association>)
	    b parent class_ref 1051778 // TemporalUnit
	end

	classrelation 3470594 // rangeUnit (<unidirectional association>)
	  relation 3470594 --->
	    a role_name "rangeUnit" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3470594 // rangeUnit (<unidirectional association>)
	    b parent class_ref 1051778 // TemporalUnit
	end

	classrelation 3470722 // range (<unidirectional association>)
	  relation 3470722 --->
	    a role_name "range" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3470722 // range (<unidirectional association>)
	    b parent class_ref 1051010 // ValueRange
	end

	operation 8567170 "ComputedDayOfField"
	  private explicit_return_type ""
	  nparams 5
	    param inout name "name" type class_ref 128130 // String
	    param inout name "weekDef" type class_ref 1062786 // WeekFields
	    param inout name "baseUnit" type class_ref 1051778 // TemporalUnit
	    param inout name "rangeUnit" type class_ref 1051778 // TemporalUnit
	    param inout name "range" type class_ref 1051010 // ValueRange
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3470850 // DAY_OF_WEEK_RANGE (<unidirectional association>)
	  relation 3470850 --->
	    a role_name "DAY_OF_WEEK_RANGE" init_value " ValueRange.of(1, 7)" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3470850 // DAY_OF_WEEK_RANGE (<unidirectional association>)
	    b parent class_ref 1051010 // ValueRange
	end

	classrelation 3470978 // WEEK_OF_MONTH_RANGE (<unidirectional association>)
	  relation 3470978 --->
	    a role_name "WEEK_OF_MONTH_RANGE" init_value " ValueRange.of(0, 1, 4, 6)" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3470978 // WEEK_OF_MONTH_RANGE (<unidirectional association>)
	    b parent class_ref 1051010 // ValueRange
	end

	classrelation 3471106 // WEEK_OF_YEAR_RANGE (<unidirectional association>)
	  relation 3471106 --->
	    a role_name "WEEK_OF_YEAR_RANGE" init_value " ValueRange.of(0, 1, 52, 54)" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3471106 // WEEK_OF_YEAR_RANGE (<unidirectional association>)
	    b parent class_ref 1051010 // ValueRange
	end

	classrelation 3471234 // WEEK_OF_WEEK_BASED_YEAR_RANGE (<unidirectional association>)
	  relation 3471234 --->
	    a role_name "WEEK_OF_WEEK_BASED_YEAR_RANGE" init_value " ValueRange.of(1, 52, 53)" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3471234 // WEEK_OF_WEEK_BASED_YEAR_RANGE (<unidirectional association>)
	    b parent class_ref 1051010 // ValueRange
	end

	operation 8567298 "getFrom"
	  public explicit_return_type "long"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8567426 "localizedDayOfWeek"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8567554 "localizedDayOfWeek"
	  private explicit_return_type "int"
	  nparams 1
	    param in name "isoDow" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8567682 "localizedWeekOfMonth"
	  private explicit_return_type "long"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8567810 "localizedWeekOfYear"
	  private explicit_return_type "long"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8567938 "localizedWeekBasedYear"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the year of week-based-year for the temporal.
The year can be the previous year, the current year, or the next year.
@param temporal a date of any chronology, not null
@return the year of week-based-year for the date
"
	end

	operation 8568066 "localizedWeekOfWeekBasedYear"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the week of week-based-year for the temporal.
The week can be part of the previous year, the current year,
or the next year depending on the week start and minimum number
of days.
@param temporal  a date of any chronology
@return the week of the year
@see #localizedWeekBasedYear(java.time.temporal.TemporalAccessor)
"
	end

	operation 8568194 "startOfWeekOffset"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "day" explicit_type "int"
	    param in name "dow" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns an offset to align week start with a day of month or day of year.

@param day  the day; 1 through infinity
@param dow  the day of the week of that day; 1 through 7
@return  an offset in days to align a day with the start of the first 'full' week
"
	end

	operation 8568322 "computeWeek"
	  private explicit_return_type "int"
	  nparams 2
	    param in name "offset" explicit_type "int"
	    param in name "day" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the week number computed from the reference day and reference dayOfWeek.

@param offset the offset to align a date with the start of week
    from {@link #startOfWeekOffset}.
@param day  the day for which to compute the week number
@return the week number where zero is used for a partial week and 1 for the first full week
"
	end

	operation 8568450 "adjustInto"
	  public explicit_return_type "R"
	  nparams 2
	    param inout name "temporal" explicit_type "R"
	    param in name "newValue" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R extends Temporal> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	  
	  
	  
	end

	operation 8568578 "resolve"
	  public return_type class_ref 1052418 // ChronoLocalDate
	  nparams 3
	    param inout name "fieldValues" type class_ref 130178 // Map
	    param inout name "partialTemporal" type class_ref 1050754 // TemporalAccessor
	    param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8568706 "resolveWoM"
	  private return_type class_ref 1052418 // ChronoLocalDate
	  nparams 7
	    param inout name "fieldValues" type class_ref 130178 // Map
	    param inout name "chrono" type class_ref 1052546 // Chronology
	    param in name "year" explicit_type "int"
	    param in name "month" explicit_type "long"
	    param in name "wom" explicit_type "long"
	    param in name "localDow" explicit_type "int"
	    param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8568834 "resolveWoY"
	  private return_type class_ref 1052418 // ChronoLocalDate
	  nparams 6
	    param inout name "fieldValues" type class_ref 130178 // Map
	    param inout name "chrono" type class_ref 1052546 // Chronology
	    param in name "year" explicit_type "int"
	    param in name "woy" explicit_type "long"
	    param in name "localDow" explicit_type "int"
	    param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8568962 "resolveWBY"
	  private return_type class_ref 1052418 // ChronoLocalDate
	  nparams 4
	    param inout name "fieldValues" type class_ref 130178 // Map
	    param inout name "chrono" type class_ref 1052546 // Chronology
	    param in name "localDow" explicit_type "int"
	    param inout name "resolverStyle" type class_ref 1054850 // ResolverStyle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TemporalField, Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8569090 "getDisplayName"
	  public return_type class_ref 128130 // String
	  nparams 1
	    param inout name "locale" type class_ref 312962 // Locale
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "-----------------------------------------------------------------------"
	end

	operation 8569218 "getBaseUnit"
	  public return_type class_ref 1051778 // TemporalUnit
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8569346 "getRangeUnit"
	  public return_type class_ref 1051778 // TemporalUnit
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8569474 "isDateBased"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8569602 "isTimeBased"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8569730 "range"
	  public return_type class_ref 1051010 // ValueRange
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8569858 "isSupportedBy"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "-----------------------------------------------------------------------"
	end

	operation 8569986 "rangeRefinedBy"
	  public return_type class_ref 1051010 // ValueRange
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8570114 "rangeByWeek"
	  private return_type class_ref 1051010 // ValueRange
	  nparams 2
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	    param inout name "field" type class_ref 1050882 // TemporalField
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Map the field range to a week range
@param temporal the temporal
@param field the field to get the range of
@return the ValueRange with the range adjusted to weeks.
"
	end

	operation 8570242 "rangeWeekOfWeekBasedYear"
	  private return_type class_ref 1051010 // ValueRange
	  nparams 1
	    param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Map the field range to a week range of a week year.
@param temporal  the temporal
@return the ValueRange with the range adjusted to weeks.
"
	end

	operation 8570370 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "-----------------------------------------------------------------------"
	end
      end
    end
  end

  deploymentview 170242 "temporal"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 782082 "TemporalAccessor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1050754 // TemporalAccessor
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 782210 "TemporalAdjuster"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1051266 // TemporalAdjuster
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 782466 "TemporalAmount"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.Duration;
import java.time.Period;
import java.util.List;
${definition}"
      associated_elems
	class_ref 1051650 // TemporalAmount
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, 2013 Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 782722 "Temporal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1051394 // Temporal
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 789890 "TemporalField"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.chrono.Chronology;
import java.time.format.ResolverStyle;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1050882 // TemporalField
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 790018 "ChronoField"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DayOfWeek;
import java.time.Instant;
import java.time.Year;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.util.Locale;
import java.util.Objects;
import java.util.ResourceBundle;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleResources;
${definition}"
      associated_elems
	class_ref 1054722 // ChronoField
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 790146 "TemporalUnit"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalTime;
import java.time.Period;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoLocalDateTime;
import java.time.chrono.ChronoZonedDateTime;
${definition}"
      associated_elems
	class_ref 1051778 // TemporalUnit
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 790274 "ChronoUnit"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.Duration;
${definition}"
      associated_elems
	class_ref 1061634 // ChronoUnit
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 790402 "IsoFields"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.ResolverStyle;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.ResourceBundle;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleResources;
import static java.time.DayOfWeek.THURSDAY;
import static java.time.DayOfWeek.WEDNESDAY;
import static java.time.temporal.ChronoField.DAY_OF_WEEK;
import static java.time.temporal.ChronoField.DAY_OF_YEAR;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.YEAR;
import static java.time.temporal.ChronoUnit.DAYS;
import static java.time.temporal.ChronoUnit.FOREVER;
import static java.time.temporal.ChronoUnit.MONTHS;
import static java.time.temporal.ChronoUnit.WEEKS;
import static java.time.temporal.ChronoUnit.YEARS;
${definition}"
      associated_elems
	class_ref 1061762 // IsoFields
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2011-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 790530 "JulianFields"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.format.ResolverStyle;
import java.util.Map;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoUnit.DAYS;
import static java.time.temporal.ChronoUnit.FOREVER;
${definition}"
      associated_elems
	class_ref 1062146 // JulianFields
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 790658 "TemporalAdjusters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.util.Objects;
import java.util.function.UnaryOperator;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.DAY_OF_WEEK;
import static java.time.temporal.ChronoField.DAY_OF_YEAR;
import static java.time.temporal.ChronoUnit.DAYS;
import static java.time.temporal.ChronoUnit.MONTHS;
import static java.time.temporal.ChronoUnit.YEARS;
${definition}"
      associated_elems
	class_ref 1062402 // TemporalAdjusters
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012-2013, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 790786 "TemporalQueries"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.Chronology;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoField.NANO_OF_DAY;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
${definition}"
      associated_elems
	class_ref 1062530 // TemporalQueries
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 790914 "TemporalQuery"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1051138 // TemporalQuery
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 791042 "UnsupportedTemporalTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1062658 // UnsupportedTemporalTypeException
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2013, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 791170 "ValueRange"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.DateTimeException;
${definition}"
      associated_elems
	class_ref 1051010 // ValueRange
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2011-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 791298 "WeekFields"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.DateTimeException;
import java.time.DayOfWeek;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Chronology;
import java.time.format.ResolverStyle;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import sun.util.locale.provider.CalendarDataUtility;
import sun.util.locale.provider.LocaleProviderAdapter;
import sun.util.locale.provider.LocaleResources;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.DAY_OF_WEEK;
import static java.time.temporal.ChronoField.DAY_OF_YEAR;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.YEAR;
import static java.time.temporal.ChronoUnit.DAYS;
import static java.time.temporal.ChronoUnit.FOREVER;
import static java.time.temporal.ChronoUnit.MONTHS;
import static java.time.temporal.ChronoUnit.WEEKS;
import static java.time.temporal.ChronoUnit.YEARS;
${definition}"
      associated_elems
	class_ref 1062786 // WeekFields
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2011-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end
  end
end
