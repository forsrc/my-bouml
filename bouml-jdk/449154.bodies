class AbstractLayoutCache
!!!2723330.java!!!	setNodeDimensions(inout nd : AbstractLayoutCache::NodeDimensions) : void
        this.nodeDimensions = nd;
!!!2723458.java!!!	getNodeDimensions() : AbstractLayoutCache::NodeDimensions
        return nodeDimensions;
!!!2723586.java!!!	setModel(inout newModel : TreeModel) : void
        treeModel = newModel;
!!!2723714.java!!!	getModel() : TreeModel
        return treeModel;
!!!2723842.java!!!	setRootVisible(inout rootVisible : boolean) : void
        this.rootVisible = rootVisible;
!!!2723970.java!!!	isRootVisible() : boolean
        return rootVisible;
!!!2724098.java!!!	setRowHeight(in rowHeight : int) : void
        this.rowHeight = rowHeight;
!!!2724226.java!!!	getRowHeight() : int
        return rowHeight;
!!!2724354.java!!!	setSelectionModel(inout newLSM : TreeSelectionModel) : void
        if(treeSelectionModel != null)
            treeSelectionModel.setRowMapper(null);
        treeSelectionModel = newLSM;
        if(treeSelectionModel != null)
            treeSelectionModel.setRowMapper(this);
!!!2724482.java!!!	getSelectionModel() : TreeSelectionModel
        return treeSelectionModel;
!!!2724610.java!!!	getPreferredHeight() : int
        // Get the height
        int           rowCount = getRowCount();

        if(rowCount > 0) {
            Rectangle     bounds = getBounds(getPathForRow(rowCount - 1),
                                             null);

            if(bounds != null)
                return bounds.y + bounds.height;
        }
        return 0;
!!!2724738.java!!!	getPreferredWidth(inout bounds : Rectangle) : int
        int           rowCount = getRowCount();

        if(rowCount > 0) {
            // Get the width
            TreePath      firstPath;
            int           endY;

            if(bounds == null) {
                firstPath = getPathForRow(0);
                endY = Integer.MAX_VALUE;
            }
            else {
                firstPath = getPathClosestTo(bounds.x, bounds.y);
                endY = bounds.height + bounds.y;
            }

            Enumeration   paths = getVisiblePathsFrom(firstPath);

            if(paths != null && paths.hasMoreElements()) {
                Rectangle   pBounds = getBounds((TreePath)paths.nextElement(),
                                                null);
                int         width;

                if(pBounds != null) {
                    width = pBounds.x + pBounds.width;
                    if (pBounds.y >= endY) {
                        return width;
                    }
                }
                else
                    width = 0;
                while (pBounds != null && paths.hasMoreElements()) {
                    pBounds = getBounds((TreePath)paths.nextElement(),
                                        pBounds);
                    if (pBounds != null && pBounds.y < endY) {
                        width = Math.max(width, pBounds.x + pBounds.width);
                    }
                    else {
                        pBounds = null;
                    }
                }
                return width;
            }
        }
        return 0;
!!!2726914.java!!!	getRowsForPaths(inout paths : TreePath [[]]) : int
        if(paths == null)
            return null;

        int               numPaths = paths.length;
        int[]             rows = new int[numPaths];

        for(int counter = 0; counter < numPaths; counter++)
            rows[counter] = getRowForPath(paths[counter]);
        return rows;
!!!2727042.java!!!	getNodeDimensions(inout value : Object, in row : int, in depth : int, inout expanded : boolean, inout placeIn : Rectangle) : Rectangle
        NodeDimensions            nd = getNodeDimensions();

        if(nd != null) {
            return nd.getNodeDimensions(value, row, depth, expanded, placeIn);
        }
        return null;
!!!2727170.java!!!	isFixedRowHeight() : boolean
        return (rowHeight > 0);
