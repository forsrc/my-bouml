class EventDispatchThread
!!!6179970.java!!!	EventDispatchThread(inout group : ThreadGroup, inout name : String, inout queue : EventQueue)
        super(group, name);
        setEventQueue(queue);
!!!6180098.java!!!	stopDispatching() : void
        doDispatch = false;
!!!6180226.java!!!	run() : void
        try {
            pumpEvents(new Conditional() {
                public boolean evaluate() {
                    return true;
                }
            });
        } finally {
            getEventQueue().detachDispatchThread(this);
        }
!!!6180354.java!!!	pumpEvents(inout cond : Conditional) : void
        pumpEvents(ANY_EVENT, cond);
!!!6180482.java!!!	pumpEventsForHierarchy(inout cond : Conditional, inout modalComponent : Component) : void
        pumpEventsForHierarchy(ANY_EVENT, cond, modalComponent);
!!!6180610.java!!!	pumpEvents(in id : int, inout cond : Conditional) : void
        pumpEventsForHierarchy(id, cond, null);
!!!6180738.java!!!	pumpEventsForHierarchy(in id : int, inout cond : Conditional, inout modalComponent : Component) : void
        pumpEventsForFilter(id, cond, new HierarchyEventFilter(modalComponent));
!!!6180866.java!!!	pumpEventsForFilter(inout cond : Conditional, inout filter : EventFilter) : void
        pumpEventsForFilter(ANY_EVENT, cond, filter);
!!!6180994.java!!!	pumpEventsForFilter(in id : int, inout cond : Conditional, inout filter : EventFilter) : void
        addEventFilter(filter);
        doDispatch = true;
        while (doDispatch && !isInterrupted() && cond.evaluate()) {
            pumpOneEventForFilters(id);
        }
        removeEventFilter(filter);
!!!6181122.java!!!	addEventFilter(inout filter : EventFilter) : void
        if (eventLog.isLoggable(PlatformLogger.Level.FINEST)) {
            eventLog.finest("adding the event filter: " + filter);
        }
        synchronized (eventFilters) {
            if (!eventFilters.contains(filter)) {
                if (filter instanceof ModalEventFilter) {
                    ModalEventFilter newFilter = (ModalEventFilter)filter;
                    int k = 0;
                    for (k = 0; k < eventFilters.size(); k++) {
                        EventFilter f = eventFilters.get(k);
                        if (f instanceof ModalEventFilter) {
                            ModalEventFilter cf = (ModalEventFilter)f;
                            if (cf.compareTo(newFilter) > 0) {
                                break;
                            }
                        }
                    }
                    eventFilters.add(k, filter);
                } else {
                    eventFilters.add(filter);
                }
            }
        }
!!!6181250.java!!!	removeEventFilter(inout filter : EventFilter) : void
        if (eventLog.isLoggable(PlatformLogger.Level.FINEST)) {
            eventLog.finest("removing the event filter: " + filter);
        }
        synchronized (eventFilters) {
            eventFilters.remove(filter);
        }
!!!6181378.java!!!	pumpOneEventForFilters(in id : int) : void
        AWTEvent event = null;
        boolean eventOK = false;
        try {
            EventQueue eq = null;
            EventQueueDelegate.Delegate delegate = null;
            do {
                // EventQueue may change during the dispatching
                eq = getEventQueue();
                delegate = EventQueueDelegate.getDelegate();

                if (delegate != null && id == ANY_EVENT) {
                    event = delegate.getNextEvent(eq);
                } else {
                    event = (id == ANY_EVENT) ? eq.getNextEvent() : eq.getNextEvent(id);
                }

                eventOK = true;
                synchronized (eventFilters) {
                    for (int i = eventFilters.size() - 1; i >= 0; i--) {
                        EventFilter f = eventFilters.get(i);
                        EventFilter.FilterAction accept = f.acceptEvent(event);
                        if (accept == EventFilter.FilterAction.REJECT) {
                            eventOK = false;
                            break;
                        } else if (accept == EventFilter.FilterAction.ACCEPT_IMMEDIATELY) {
                            break;
                        }
                    }
                }
                eventOK = eventOK && SunDragSourceContextPeer.checkEvent(event);
                if (!eventOK) {
                    event.consume();
                }
            }
            while (eventOK == false);

            if (eventLog.isLoggable(PlatformLogger.Level.FINEST)) {
                eventLog.finest("Dispatching: " + event);
            }

            Object handle = null;
            if (delegate != null) {
                handle = delegate.beforeDispatch(event);
            }
            eq.dispatchEvent(event);
            if (delegate != null) {
                delegate.afterDispatch(event, handle);
            }
        }
        catch (ThreadDeath death) {
            doDispatch = false;
            throw death;
        }
        catch (InterruptedException interruptedException) {
            doDispatch = false; // AppContext.dispose() interrupts all
                                // Threads in the AppContext
        }
        catch (Throwable e) {
            processException(e);
        }
!!!6181506.java!!!	processException(inout e : Throwable) : void
        if (eventLog.isLoggable(PlatformLogger.Level.FINE)) {
            eventLog.fine("Processing exception: " + e);
        }
        getUncaughtExceptionHandler().uncaughtException(this, e);
!!!6181634.java!!!	getEventQueue() : EventQueue
        return theQueue;
!!!6181762.java!!!	setEventQueue(inout eq : EventQueue) : void
        theQueue = eq;
