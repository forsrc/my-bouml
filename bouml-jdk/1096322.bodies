class PrivateEntryIterator
!!!8949762.java!!!	PrivateEntryIterator(inout first : Map::Entry)
            expectedModCount = modCount;
            lastReturned = null;
            next = first;
!!!8949890.java!!!	hasNext() : boolean
            return next != null;
!!!8950018.java!!!	nextEntry() : Map::Entry
            Entry<K,V> e = next;
            if (e == null)
                throw new NoSuchElementException();
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
            next = successor(e);
            lastReturned = e;
            return e;
!!!8950146.java!!!	prevEntry() : Map::Entry
            Entry<K,V> e = next;
            if (e == null)
                throw new NoSuchElementException();
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
            next = predecessor(e);
            lastReturned = e;
            return e;
!!!8950274.java!!!	remove() : void
            if (lastReturned == null)
                throw new IllegalStateException();
            if (modCount != expectedModCount)
                throw new ConcurrentModificationException();
            // deleted entries are replaced by their successors
            if (lastReturned.left != null && lastReturned.right != null)
                next = lastReturned;
            deleteEntry(lastReturned);
            expectedModCount = modCount;
            lastReturned = null;
