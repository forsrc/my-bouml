class EntrySet
!!!8820994.java!!!	iterator() : Iterator
            return new EntryIterator();
!!!8821122.java!!!	contains(inout o : Object) : boolean
            if (!(o instanceof Map.Entry))
                return false;
            Map.Entry<?,?> entry = (Map.Entry<?,?>)o;
            return containsMapping(entry.getKey(), entry.getValue());
!!!8821250.java!!!	remove(inout o : Object) : boolean
            if (!(o instanceof Map.Entry))
                return false;
            Map.Entry<?,?> entry = (Map.Entry<?,?>)o;
            return removeMapping(entry.getKey(), entry.getValue());
!!!8821378.java!!!	size() : int
            return size;
!!!8821506.java!!!	clear() : void
            IdentityHashMap.this.clear();
!!!8821634.java!!!	removeAll(inout c : Collection) : boolean
            Objects.requireNonNull(c);
            boolean modified = false;
            for (Iterator<Map.Entry<K,V>> i = iterator(); i.hasNext(); ) {
                if (c.contains(i.next())) {
                    i.remove();
                    modified = true;
                }
            }
            return modified;
!!!8821762.java!!!	toArray() : Object
            return toArray(new Object[0]);
!!!8821890.java!!!	toArray(inout a : T [[]]) : T
            int expectedModCount = modCount;
            int size = size();
            if (a.length < size)
                a = (T[]) Array.newInstance(a.getClass().getComponentType(), size);
            Object[] tab = table;
            int ti = 0;
            for (int si = 0; si < tab.length; si += 2) {
                Object key;
                if ((key = tab[si]) != null) { // key present ?
                    // more elements than expected -> concurrent modification from other thread
                    if (ti >= size) {
                        throw new ConcurrentModificationException();
                    }
                    a[ti++] = (T) new AbstractMap.SimpleEntry<>(unmaskNull(key), tab[si + 1]);
                }
            }
            // fewer elements than expected or concurrent modification from other thread detected
            if (ti < size || expectedModCount != modCount) {
                throw new ConcurrentModificationException();
            }
            // final null marker as per spec
            if (ti < a.length) {
                a[ti] = null;
            }
            return a;
!!!8822018.java!!!	spliterator() : Spliterator
            return new EntrySpliterator<>(IdentityHashMap.this, 0, -1, 0, 0);
