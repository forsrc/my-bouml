class BasicAttributes
!!!10043394.java!!!	BasicAttributes(inout ignoreCase : boolean)
        this.ignoreCase = ignoreCase;
!!!10043522.java!!!	BasicAttributes(inout attrID : String, inout val : Object)
        this();
        this.put(new BasicAttribute(attrID, val));
!!!10043650.java!!!	BasicAttributes(inout attrID : String, inout val : Object, inout ignoreCase : boolean)
        this(ignoreCase);
        this.put(new BasicAttribute(attrID, val));
!!!10043778.java!!!	clone() : Object
        BasicAttributes attrset;
        try {
            attrset = (BasicAttributes)super.clone();
        } catch (CloneNotSupportedException e) {
            attrset = new BasicAttributes(ignoreCase);
        }
        attrset.attrs = (Hashtable<String,Attribute>)attrs.clone();
        return attrset;
!!!10043906.java!!!	isCaseIgnored() : boolean
        return ignoreCase;
!!!10044034.java!!!	size() : int
        return attrs.size();
!!!10044162.java!!!	get(inout attrID : String) : Attribute
        Attribute attr = attrs.get(
                ignoreCase ? attrID.toLowerCase(Locale.ENGLISH) : attrID);
        return (attr);
!!!10044290.java!!!	getAll() : NamingEnumeration
        return new AttrEnumImpl();
!!!10044418.java!!!	getIDs() : NamingEnumeration
        return new IDEnumImpl();
!!!10044546.java!!!	put(inout attrID : String, inout val : Object) : Attribute
        return this.put(new BasicAttribute(attrID, val));
!!!10044674.java!!!	put(inout attr : Attribute) : Attribute
        String id = attr.getID();
        if (ignoreCase) {
            id = id.toLowerCase(Locale.ENGLISH);
        }
        return attrs.put(id, attr);
!!!10044802.java!!!	remove(inout attrID : String) : Attribute
        String id = (ignoreCase ? attrID.toLowerCase(Locale.ENGLISH) : attrID);
        return attrs.remove(id);
!!!10044930.java!!!	toString() : String
        if (attrs.size() == 0) {
            return("No attributes");
        } else {
            return attrs.toString();
        }
!!!10045058.java!!!	equals(inout obj : Object) : boolean
        if ((obj != null) && (obj instanceof Attributes)) {
            Attributes target = (Attributes)obj;

            // Check case first
            if (ignoreCase != target.isCaseIgnored()) {
                return false;
            }

            if (size() == target.size()) {
                Attribute their, mine;
                try {
                    NamingEnumeration<?> theirs = target.getAll();
                    while (theirs.hasMore()) {
                        their = (Attribute)theirs.next();
                        mine = get(their.getID());
                        if (!their.equals(mine)) {
                            return false;
                        }
                    }
                } catch (NamingException e) {
                    return false;
                }
                return true;
            }
        }
        return false;
!!!10045186.java!!!	hashCode() : int
        int hash = (ignoreCase ? 1 : 0);
        try {
            NamingEnumeration<?> all = getAll();
            while (all.hasMore()) {
                hash += all.next().hashCode();
            }
        } catch (NamingException e) {}
        return hash;
!!!10045314.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject(); // write out the ignoreCase flag
        s.writeInt(attrs.size());
        Enumeration<Attribute> attrEnum = attrs.elements();
        while (attrEnum.hasMoreElements()) {
            s.writeObject(attrEnum.nextElement());
        }
!!!10045442.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();  // read in the ignoreCase flag
        int n = s.readInt();    // number of attributes
        attrs = (n >= 1)
            ? new Hashtable<String,Attribute>(n * 2)
            : new Hashtable<String,Attribute>(2); // can't have initial size of 0 (grrr...)
        while (--n >= 0) {
            put((Attribute)s.readObject());
        }
