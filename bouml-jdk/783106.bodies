class XMLUtils
!!!5499650.java!!!	XMLUtils()
        // we don't allow instantiation
!!!5499778.java!!!	setDsPrefix(inout prefix : String) : void
        JavaUtils.checkRegisterPermission();
        dsPrefix = prefix;
!!!5499906.java!!!	setDs11Prefix(inout prefix : String) : void
        JavaUtils.checkRegisterPermission();
        ds11Prefix = prefix;
!!!5500034.java!!!	setXencPrefix(inout prefix : String) : void
        JavaUtils.checkRegisterPermission();
        xencPrefix = prefix;
!!!5500162.java!!!	setXenc11Prefix(inout prefix : String) : void
        JavaUtils.checkRegisterPermission();
        xenc11Prefix = prefix;
!!!5500290.java!!!	getNextElement(inout el : Node) : Element
        Node node = el;
        while ((node != null) && (node.getNodeType() != Node.ELEMENT_NODE)) {
            node = node.getNextSibling();
        }
        return (Element)node;
!!!5500418.java!!!	getSet(inout rootNode : Node, inout result : Set, inout exclude : Node, inout com : boolean) : void
        if ((exclude != null) && isDescendantOrSelf(exclude, rootNode)) {
            return;
        }
        getSetRec(rootNode, result, exclude, com);
!!!5500546.java!!!	getSetRec(in rootNode : Node, in result : Set, in exclude : Node, in com : boolean) : void
        if (rootNode == exclude) {
            return;
        }
        switch (rootNode.getNodeType()) {
        case Node.ELEMENT_NODE:
            result.add(rootNode);
            Element el = (Element)rootNode;
            if (el.hasAttributes()) {
                NamedNodeMap nl = el.getAttributes();
                for (int i = 0;i < nl.getLength(); i++) {
                    result.add(nl.item(i));
                }
            }
            //no return keep working
        case Node.DOCUMENT_NODE:
            for (Node r = rootNode.getFirstChild(); r != null; r = r.getNextSibling()) {
                if (r.getNodeType() == Node.TEXT_NODE) {
                    result.add(r);
                    while ((r != null) && (r.getNodeType() == Node.TEXT_NODE)) {
                        r = r.getNextSibling();
                    }
                    if (r == null) {
                        return;
                    }
                }
                getSetRec(r, result, exclude, com);
            }
            return;
        case Node.COMMENT_NODE:
            if (com) {
                result.add(rootNode);
            }
            return;
        case Node.DOCUMENT_TYPE_NODE:
            return;
        default:
            result.add(rootNode);
        }
!!!5500674.java!!!	outputDOM(inout contextNode : Node, inout os : OutputStream) : void
        XMLUtils.outputDOM(contextNode, os, false);
!!!5500802.java!!!	outputDOM(inout contextNode : Node, inout os : OutputStream, inout addPreamble : boolean) : void
        try {
            if (addPreamble) {
                os.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n".getBytes("UTF-8"));
            }

            os.write(Canonicalizer.getInstance(
                Canonicalizer.ALGO_ID_C14N_WITH_COMMENTS).canonicalizeSubtree(contextNode)
            );
        } catch (IOException ex) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, ex.getMessage(), ex);
            }
        }
        catch (InvalidCanonicalizerException ex) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, ex.getMessage(), ex);
            }
        } catch (CanonicalizationException ex) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, ex.getMessage(), ex);
            }
        }
!!!5500930.java!!!	outputDOMc14nWithComments(inout contextNode : Node, inout os : OutputStream) : void
        try {
            os.write(Canonicalizer.getInstance(
                Canonicalizer.ALGO_ID_C14N_WITH_COMMENTS).canonicalizeSubtree(contextNode)
            );
        } catch (IOException ex) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, ex.getMessage(), ex);
            }
            // throw new RuntimeException(ex.getMessage());
        } catch (InvalidCanonicalizerException ex) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, ex.getMessage(), ex);
            }
            // throw new RuntimeException(ex.getMessage());
        } catch (CanonicalizationException ex) {
            if (log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, ex.getMessage(), ex);
            }
            // throw new RuntimeException(ex.getMessage());
        }
!!!5501058.java!!!	getFullTextChildrenFromElement(inout element : Element) : String
        StringBuilder sb = new StringBuilder();

        Node child = element.getFirstChild();
        while (child != null) {
            if (child.getNodeType() == Node.TEXT_NODE) {
                sb.append(((Text)child).getData());
            }
            child = child.getNextSibling();
        }

        return sb.toString();
!!!5501186.java!!!	createElementInSignatureSpace(inout doc : Document, inout elementName : String) : Element
        if (doc == null) {
            throw new RuntimeException("Document is null");
        }

        if ((dsPrefix == null) || (dsPrefix.length() == 0)) {
            return doc.createElementNS(Constants.SignatureSpecNS, elementName);
        }
        return doc.createElementNS(Constants.SignatureSpecNS, dsPrefix + ":" + elementName);
!!!5501314.java!!!	createElementInSignature11Space(inout doc : Document, inout elementName : String) : Element
        if (doc == null) {
            throw new RuntimeException("Document is null");
        }

        if ((ds11Prefix == null) || (ds11Prefix.length() == 0)) {
            return doc.createElementNS(Constants.SignatureSpec11NS, elementName);
        }
        return doc.createElementNS(Constants.SignatureSpec11NS, ds11Prefix + ":" + elementName);
!!!5501442.java!!!	createElementInEncryptionSpace(inout doc : Document, inout elementName : String) : Element
        if (doc == null) {
            throw new RuntimeException("Document is null");
        }

        if ((xencPrefix == null) || (xencPrefix.length() == 0)) {
            return doc.createElementNS(EncryptionConstants.EncryptionSpecNS, elementName);
        }
        return
            doc.createElementNS(
                EncryptionConstants.EncryptionSpecNS, xencPrefix + ":" + elementName
            );
!!!5501570.java!!!	createElementInEncryption11Space(inout doc : Document, inout elementName : String) : Element
        if (doc == null) {
            throw new RuntimeException("Document is null");
        }

        if ((xenc11Prefix == null) || (xenc11Prefix.length() == 0)) {
            return doc.createElementNS(EncryptionConstants.EncryptionSpec11NS, elementName);
        }
        return
            doc.createElementNS(
                EncryptionConstants.EncryptionSpec11NS, xenc11Prefix + ":" + elementName
            );
!!!5501698.java!!!	elementIsInSignatureSpace(inout element : Element, inout localName : String) : boolean
        if (element == null){
            return false;
        }

        return Constants.SignatureSpecNS.equals(element.getNamespaceURI())
            && element.getLocalName().equals(localName);
!!!5501826.java!!!	elementIsInSignature11Space(inout element : Element, inout localName : String) : boolean
        if (element == null) {
            return false;
        }

        return Constants.SignatureSpec11NS.equals(element.getNamespaceURI())
            && element.getLocalName().equals(localName);
!!!5501954.java!!!	elementIsInEncryptionSpace(inout element : Element, inout localName : String) : boolean
        if (element == null){
            return false;
        }
        return EncryptionConstants.EncryptionSpecNS.equals(element.getNamespaceURI())
            && element.getLocalName().equals(localName);
!!!5502082.java!!!	elementIsInEncryption11Space(inout element : Element, inout localName : String) : boolean
        if (element == null){
            return false;
        }
        return EncryptionConstants.EncryptionSpec11NS.equals(element.getNamespaceURI())
            && element.getLocalName().equals(localName);
!!!5502210.java!!!	getOwnerDocument(inout node : Node) : Document
        if (node.getNodeType() == Node.DOCUMENT_NODE) {
            return (Document) node;
        }
        try {
            return node.getOwnerDocument();
        } catch (NullPointerException npe) {
            throw new NullPointerException(I18n.translate("endorsed.jdk1.4.0")
                                           + " Original message was \""
                                           + npe.getMessage() + "\"");
        }
!!!5502338.java!!!	getOwnerDocument(inout xpathNodeSet : Set) : Document
        NullPointerException npe = null;
        for (Node node : xpathNodeSet) {
            int nodeType = node.getNodeType();
            if (nodeType == Node.DOCUMENT_NODE) {
                return (Document) node;
            }
            try {
                if (nodeType == Node.ATTRIBUTE_NODE) {
                    return ((Attr)node).getOwnerElement().getOwnerDocument();
                }
                return node.getOwnerDocument();
            } catch (NullPointerException e) {
                npe = e;
            }
        }

        throw new NullPointerException(I18n.translate("endorsed.jdk1.4.0")
                                       + " Original message was \""
                                       + (npe == null ? "" : npe.getMessage()) + "\"");
!!!5502466.java!!!	createDSctx(inout doc : Document, inout prefix : String, inout namespace : String) : Element
        if ((prefix == null) || (prefix.trim().length() == 0)) {
            throw new IllegalArgumentException("You must supply a prefix");
        }

        Element ctx = doc.createElementNS(null, "namespaceContext");

        ctx.setAttributeNS(Constants.NamespaceSpecNS, "xmlns:" + prefix.trim(), namespace);

        return ctx;
!!!5502594.java!!!	addReturnToElement(inout e : Element) : void
        if (!ignoreLineBreaks) {
            Document doc = e.getOwnerDocument();
            e.appendChild(doc.createTextNode("\n"));
        }
!!!5502722.java!!!	addReturnToElement(inout doc : Document, inout nl : HelperNodeList) : void
        if (!ignoreLineBreaks) {
            nl.appendChild(doc.createTextNode("\n"));
        }
!!!5502850.java!!!	addReturnBeforeChild(inout e : Element, inout child : Node) : void
        if (!ignoreLineBreaks) {
            Document doc = e.getOwnerDocument();
            e.insertBefore(doc.createTextNode("\n"), child);
        }
!!!5502978.java!!!	convertNodelistToSet(inout xpathNodeSet : NodeList) : Set
        if (xpathNodeSet == null) {
            return new HashSet<Node>();
        }

        int length = xpathNodeSet.getLength();
        Set<Node> set = new HashSet<Node>(length);

        for (int i = 0; i < length; i++) {
            set.add(xpathNodeSet.item(i));
        }

        return set;
!!!5503106.java!!!	circumventBug2650(inout doc : Document) : void

        Element documentElement = doc.getDocumentElement();

        // if the document element has no xmlns definition, we add xmlns=""
        Attr xmlnsAttr =
            documentElement.getAttributeNodeNS(Constants.NamespaceSpecNS, "xmlns");

        if (xmlnsAttr == null) {
            documentElement.setAttributeNS(Constants.NamespaceSpecNS, "xmlns", "");
        }

        XMLUtils.circumventBug2650internal(doc);
!!!5503234.java!!!	circumventBug2650internal(inout node : Node) : void
        Node parent = null;
        Node sibling = null;
        final String namespaceNs = Constants.NamespaceSpecNS;
        do {
            switch (node.getNodeType()) {
            case Node.ELEMENT_NODE :
                Element element = (Element) node;
                if (!element.hasChildNodes()) {
                    break;
                }
                if (element.hasAttributes()) {
                    NamedNodeMap attributes = element.getAttributes();
                    int attributesLength = attributes.getLength();

                    for (Node child = element.getFirstChild(); child!=null;
                        child = child.getNextSibling()) {

                        if (child.getNodeType() != Node.ELEMENT_NODE) {
                            continue;
                        }
                        Element childElement = (Element) child;

                        for (int i = 0; i < attributesLength; i++) {
                            Attr currentAttr = (Attr) attributes.item(i);
                            if (!namespaceNs.equals(currentAttr.getNamespaceURI())) {
                                continue;
                            }
                            if (childElement.hasAttributeNS(namespaceNs,
                                                            currentAttr.getLocalName())) {
                                continue;
                            }
                            childElement.setAttributeNS(namespaceNs,
                                                        currentAttr.getName(),
                                                        currentAttr.getNodeValue());
                        }
                    }
                }
            case Node.ENTITY_REFERENCE_NODE :
            case Node.DOCUMENT_NODE :
                parent = node;
                sibling = node.getFirstChild();
                break;
            }
            while ((sibling == null) && (parent != null)) {
                sibling = parent.getNextSibling();
                parent = parent.getParentNode();
            }
            if (sibling == null) {
                return;
            }

            node = sibling;
            sibling = node.getNextSibling();
        } while (true);
!!!5503362.java!!!	selectDsNode(inout sibling : Node, inout nodeName : String, in number : int) : Element
        while (sibling != null) {
            if (Constants.SignatureSpecNS.equals(sibling.getNamespaceURI())
                && sibling.getLocalName().equals(nodeName)) {
                if (number == 0){
                    return (Element)sibling;
                }
                number--;
            }
            sibling = sibling.getNextSibling();
        }
        return null;
!!!5503490.java!!!	selectDs11Node(inout sibling : Node, inout nodeName : String, in number : int) : Element
        while (sibling != null) {
            if (Constants.SignatureSpec11NS.equals(sibling.getNamespaceURI())
                && sibling.getLocalName().equals(nodeName)) {
                if (number == 0){
                    return (Element)sibling;
                }
                number--;
            }
            sibling = sibling.getNextSibling();
        }
        return null;
!!!5503618.java!!!	selectXencNode(inout sibling : Node, inout nodeName : String, in number : int) : Element
        while (sibling != null) {
            if (EncryptionConstants.EncryptionSpecNS.equals(sibling.getNamespaceURI())
                && sibling.getLocalName().equals(nodeName)) {
                if (number == 0){
                    return (Element)sibling;
                }
                number--;
            }
            sibling = sibling.getNextSibling();
        }
        return null;
!!!5503746.java!!!	selectDsNodeText(inout sibling : Node, inout nodeName : String, in number : int) : Text
        Node n = selectDsNode(sibling,nodeName,number);
        if (n == null) {
            return null;
        }
        n = n.getFirstChild();
        while (n != null && n.getNodeType() != Node.TEXT_NODE) {
            n = n.getNextSibling();
        }
        return (Text)n;
!!!5503874.java!!!	selectDs11NodeText(inout sibling : Node, inout nodeName : String, in number : int) : Text
        Node n = selectDs11Node(sibling,nodeName,number);
        if (n == null) {
            return null;
        }
        n = n.getFirstChild();
        while (n != null && n.getNodeType() != Node.TEXT_NODE) {
            n = n.getNextSibling();
        }
        return (Text)n;
!!!5504002.java!!!	selectNodeText(inout sibling : Node, inout uri : String, inout nodeName : String, in number : int) : Text
        Node n = selectNode(sibling,uri,nodeName,number);
        if (n == null) {
            return null;
        }
        n = n.getFirstChild();
        while (n != null && n.getNodeType() != Node.TEXT_NODE) {
            n = n.getNextSibling();
        }
        return (Text)n;
!!!5504130.java!!!	selectNode(inout sibling : Node, inout uri : String, inout nodeName : String, in number : int) : Element
        while (sibling != null) {
            if (sibling.getNamespaceURI() != null && sibling.getNamespaceURI().equals(uri)
                && sibling.getLocalName().equals(nodeName)) {
                if (number == 0){
                    return (Element)sibling;
                }
                number--;
            }
            sibling = sibling.getNextSibling();
        }
        return null;
!!!5504258.java!!!	selectDsNodes(inout sibling : Node, inout nodeName : String) : Element
        return selectNodes(sibling, Constants.SignatureSpecNS, nodeName);
!!!5504386.java!!!	selectDs11Nodes(inout sibling : Node, inout nodeName : String) : Element
        return selectNodes(sibling, Constants.SignatureSpec11NS, nodeName);
!!!5504514.java!!!	selectNodes(inout sibling : Node, inout uri : String, inout nodeName : String) : Element
        List<Element> list = new ArrayList<Element>();
        while (sibling != null) {
            if (sibling.getNamespaceURI() != null && sibling.getNamespaceURI().equals(uri)
                && sibling.getLocalName().equals(nodeName)) {
                list.add((Element)sibling);
            }
            sibling = sibling.getNextSibling();
        }
        return list.toArray(new Element[list.size()]);
!!!5504642.java!!!	excludeNodeFromSet(inout signatureElement : Node, inout inputSet : Set) : Set
        Set<Node> resultSet = new HashSet<Node>();
        Iterator<Node> iterator = inputSet.iterator();

        while (iterator.hasNext()) {
            Node inputNode = iterator.next();

            if (!XMLUtils.isDescendantOrSelf(signatureElement, inputNode)) {
                resultSet.add(inputNode);
            }
        }
        return resultSet;
!!!5504770.java!!!	getStrFromNode(inout xpathnode : Node) : String
        if (xpathnode.getNodeType() == Node.TEXT_NODE) {
            // we iterate over all siblings of the context node because eventually,
            // the text is "polluted" with pi's or comments
            StringBuilder sb = new StringBuilder();

            for (Node currentSibling = xpathnode.getParentNode().getFirstChild();
                currentSibling != null;
                currentSibling = currentSibling.getNextSibling()) {
                if (currentSibling.getNodeType() == Node.TEXT_NODE) {
                    sb.append(((Text) currentSibling).getData());
                }
            }

            return sb.toString();
        } else if (xpathnode.getNodeType() == Node.ATTRIBUTE_NODE) {
            return ((Attr) xpathnode).getNodeValue();
        } else if (xpathnode.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) {
            return ((ProcessingInstruction) xpathnode).getNodeValue();
        }

        return null;
!!!5504898.java!!!	isDescendantOrSelf(inout ctx : Node, inout descendantOrSelf : Node) : boolean
        if (ctx == descendantOrSelf) {
            return true;
        }

        Node parent = descendantOrSelf;

        while (true) {
            if (parent == null) {
                return false;
            }

            if (parent == ctx) {
                return true;
            }

            if (parent.getNodeType() == Node.ATTRIBUTE_NODE) {
                parent = ((Attr) parent).getOwnerElement();
            } else {
                parent = parent.getParentNode();
            }
        }
!!!5505026.java!!!	ignoreLineBreaks() : boolean
        return ignoreLineBreaks;
!!!5505154.java!!!	getAttributeValue(inout elem : Element, inout name : String) : String
        Attr attr = elem.getAttributeNodeNS(null, name);
        return (attr == null) ? null : attr.getValue();
!!!5505282.java!!!	protectAgainstWrappingAttack(inout startNode : Node, inout value : String) : boolean
        Node startParent = startNode.getParentNode();
        Node processedNode = null;
        Element foundElement = null;

        String id = value.trim();
        if (!id.isEmpty() && id.charAt(0) == '#') {
            id = id.substring(1);
        }

        while (startNode != null) {
            if (startNode.getNodeType() == Node.ELEMENT_NODE) {
                Element se = (Element) startNode;

                NamedNodeMap attributes = se.getAttributes();
                if (attributes != null) {
                    for (int i = 0; i < attributes.getLength(); i++) {
                        Attr attr = (Attr)attributes.item(i);
                        if (attr.isId() && id.equals(attr.getValue())) {
                            if (foundElement == null) {
                                // Continue searching to find duplicates
                                foundElement = attr.getOwnerElement();
                            } else {
                                log.log(java.util.logging.Level.FINE, "Multiple elements with the same 'Id' attribute value!");
                                return false;
                            }
                        }
                    }
                }
            }

            processedNode = startNode;
            startNode = startNode.getFirstChild();

            // no child, this node is done.
            if (startNode == null) {
                // close node processing, get sibling
                startNode = processedNode.getNextSibling();
            }

            // no more siblings, get parent, all children
            // of parent are processed.
            while (startNode == null) {
                processedNode = processedNode.getParentNode();
                if (processedNode == startParent) {
                    return true;
                }
                // close parent node processing (processed node now)
                startNode = processedNode.getNextSibling();
            }
        }
        return true;
!!!5505410.java!!!	protectAgainstWrappingAttack(inout startNode : Node, inout knownElement : Element, inout value : String) : boolean
        Node startParent = startNode.getParentNode();
        Node processedNode = null;

        String id = value.trim();
        if (!id.isEmpty() && id.charAt(0) == '#') {
            id = id.substring(1);
        }

        while (startNode != null) {
            if (startNode.getNodeType() == Node.ELEMENT_NODE) {
                Element se = (Element) startNode;

                NamedNodeMap attributes = se.getAttributes();
                if (attributes != null) {
                    for (int i = 0; i < attributes.getLength(); i++) {
                        Attr attr = (Attr)attributes.item(i);
                        if (attr.isId() && id.equals(attr.getValue()) && se != knownElement) {
                            log.log(java.util.logging.Level.FINE, "Multiple elements with the same 'Id' attribute value!");
                            return false;
                        }
                    }
                }
            }

            processedNode = startNode;
            startNode = startNode.getFirstChild();

            // no child, this node is done.
            if (startNode == null) {
                // close node processing, get sibling
                startNode = processedNode.getNextSibling();
            }

            // no more siblings, get parent, all children
            // of parent are processed.
            while (startNode == null) {
                processedNode = processedNode.getParentNode();
                if (processedNode == startParent) {
                    return true;
                }
                // close parent node processing (processed node now)
                startNode = processedNode.getNextSibling();
            }
        }
        return true;
