class Htable
!!!1794306.java!!!	Htable(inout buffer : JPEGBuffer)
            tableClass = buffer.buf[buffer.bufPtr] >>> 4;
            tableID = buffer.buf[buffer.bufPtr++] & 0xf;
            for (int i = 0; i < NUM_LENGTHS; i++) {
                numCodes[i] = (short) (buffer.buf[buffer.bufPtr++] & 0xff);
            }

            int numValues = 0;
            for (int i = 0; i < NUM_LENGTHS; i++) {
                numValues += numCodes[i];
            }
            values = new short[numValues];
            for (int i = 0; i < numValues; i++) {
                values[i] = (short) (buffer.buf[buffer.bufPtr++] & 0xff);
            }
!!!1794434.java!!!	Htable(inout table : JPEGHuffmanTable, inout isDC : boolean, in id : int)
            tableClass = isDC ? 0 : 1;
            tableID = id;
            numCodes = table.getLengths();
            values = table.getValues();
!!!1794562.java!!!	Htable(inout node : Node)
            if (node.getNodeName().equals("dhtable")) {
                NamedNodeMap attrs = node.getAttributes();
                int count = attrs.getLength();
                if (count != 2) {
                    throw new IIOInvalidTreeException
                        ("dhtable node must have 2 attributes", node);
                }
                tableClass = getAttributeValue(node, attrs, "class", 0, 1, true);
                tableID = getAttributeValue(node, attrs, "htableId", 0, 3, true);
                if (node instanceof IIOMetadataNode) {
                    IIOMetadataNode ourNode = (IIOMetadataNode) node;
                    JPEGHuffmanTable table =
                        (JPEGHuffmanTable) ourNode.getUserObject();
                    if (table == null) {
                        throw new IIOInvalidTreeException
                            ("dhtable node must have user object", node);
                    }
                    numCodes = table.getLengths();
                    values = table.getValues();
                } else {
                    throw new IIOInvalidTreeException
                        ("dhtable node must have user object", node);
                }
            } else {
                throw new IIOInvalidTreeException
                    ("Invalid node, expected dqtable", node);
            }

!!!1794690.java!!!	clone() : Object
            Htable newGuy = null;
            try {
                newGuy = (Htable) super.clone();
            } catch (CloneNotSupportedException e) {} // won't happen
            if (numCodes != null) {
                newGuy.numCodes = (short []) numCodes.clone();
            }
            if (values != null) {
                newGuy.values = (short []) values.clone();
            }
            return newGuy;
!!!1794818.java!!!	getNativeNode() : IIOMetadataNode
            IIOMetadataNode node = new IIOMetadataNode("dhtable");
            node.setAttribute("class", Integer.toString(tableClass));
            node.setAttribute("htableId", Integer.toString(tableID));

            node.setUserObject(new JPEGHuffmanTable(numCodes, values));

            return node;
!!!1794946.java!!!	print() : void
            System.out.println("Huffman Table");
            System.out.println("table class: "
                               + ((tableClass == 0) ? "DC":"AC"));
            System.out.println("table id: " + Integer.toString(tableID));

            (new JPEGHuffmanTable(numCodes, values)).toString();
            /*
              System.out.print("Lengths:");
              for (int i=0; i<16; i++) {
              System.out.print(" " + Integer.toString(numCodes[i]));
              }
              int count = 0;
              if (values.length > 16) {
              System.out.println("\nFirst 16 Values:");
              count = 16;
              } else {
              System.out.println("\nValues:");
              count = values.length;
              }
              for (int i=0; i<count; i++) {
              System.out.println(Integer.toString(values[i]&0xff));
              }
            */
