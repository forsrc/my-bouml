class StringReader
!!!6936834.java!!!	StringReader(inout s : String)
        this.str = s;
        this.length = s.length();
!!!6936962.java!!!	ensureOpen() : void
        if (str == null)
            throw new IOException("Stream closed");
!!!6937090.java!!!	read() : int
        synchronized (lock) {
            ensureOpen();
            if (next >= length)
                return -1;
            return str.charAt(next++);
        }
!!!6937218.java!!!	read(inout cbuf : char [[]], in off : int, in len : int) : int
        synchronized (lock) {
            ensureOpen();
            if ((off < 0) || (off > cbuf.length) || (len < 0) ||
                ((off + len) > cbuf.length) || ((off + len) < 0)) {
                throw new IndexOutOfBoundsException();
            } else if (len == 0) {
                return 0;
            }
            if (next >= length)
                return -1;
            int n = Math.min(length - next, len);
            str.getChars(next, next + n, cbuf, off);
            next += n;
            return n;
        }
!!!6937346.java!!!	skip(in ns : long) : long
        synchronized (lock) {
            ensureOpen();
            if (next >= length)
                return 0;
            // Bound skip by beginning and end of the source
            long n = Math.min(length - next, ns);
            n = Math.max(-next, n);
            next += n;
            return n;
        }
!!!6937474.java!!!	ready() : boolean
        synchronized (lock) {
        ensureOpen();
        return true;
        }
!!!6937602.java!!!	markSupported() : boolean
        return true;
!!!6937730.java!!!	mark(in readAheadLimit : int) : void
        if (readAheadLimit < 0){
            throw new IllegalArgumentException("Read-ahead limit < 0");
        }
        synchronized (lock) {
            ensureOpen();
            mark = next;
        }
!!!6937858.java!!!	reset() : void
        synchronized (lock) {
            ensureOpen();
            next = mark;
        }
!!!6937986.java!!!	close() : void
        str = null;
