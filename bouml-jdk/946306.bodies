class NamedFunction
!!!7207682.java!!!	NamedFunction(inout resolvedHandle : MethodHandle)
            this(resolvedHandle.internalMemberName(), resolvedHandle);
!!!7207810.java!!!	NamedFunction(inout member : MemberName, inout resolvedHandle : MethodHandle)
            this.member = member;
            this.resolvedHandle = resolvedHandle;
             // The following assert is almost always correct, but will fail for corner cases, such as PrivateInvokeTest.
             //assert(!isInvokeBasic(member));
!!!7207938.java!!!	NamedFunction(inout basicInvokerType : MethodType)
            assert(basicInvokerType == basicInvokerType.basicType()) : basicInvokerType;
            if (basicInvokerType.parameterSlotCount() < MethodType.MAX_MH_INVOKER_ARITY) {
                this.resolvedHandle = basicInvokerType.invokers().basicInvoker();
                this.member = resolvedHandle.internalMemberName();
            } else {
                // necessary to pass BigArityTest
                this.member = Invokers.invokeBasicMethod(basicInvokerType);
            }
            assert(isInvokeBasic(member));
!!!7208066.java!!!	isInvokeBasic(inout member : MemberName) : boolean
            return member != null &&
                   member.getDeclaringClass() == MethodHandle.class &&
                  "invokeBasic".equals(member.getName());
!!!7208194.java!!!	NamedFunction(inout method : Method)
            this(new MemberName(method));
!!!7208322.java!!!	NamedFunction(inout field : Field)
            this(new MemberName(field));
!!!7208450.java!!!	NamedFunction(inout member : MemberName)
            this.member = member;
            this.resolvedHandle = null;
!!!7208578.java!!!	resolvedHandle() : MethodHandle
            if (resolvedHandle == null)  resolve();
            return resolvedHandle;
!!!7208706.java!!!	resolve() : void
            resolvedHandle = DirectMethodHandle.make(member);
!!!7208834.java!!!	equals(inout other : Object) : boolean
            if (this == other) return true;
            if (other == null) return false;
            if (!(other instanceof NamedFunction)) return false;
            NamedFunction that = (NamedFunction) other;
            return this.member != null && this.member.equals(that.member);
!!!7208962.java!!!	hashCode() : int
            if (member != null)
                return member.hashCode();
            return super.hashCode();
!!!7209090.java!!!	initializeInvokers() : void
            for (MemberName m : MemberName.getFactory().getMethods(NamedFunction.class, false, null, null, null)) {
                if (!m.isStatic() || !m.isPackage())  continue;
                MethodType type = m.getMethodType();
                if (type.equals(INVOKER_METHOD_TYPE) &&
                    m.getName().startsWith("invoke_")) {
                    String sig = m.getName().substring("invoke_".length());
                    int arity = LambdaForm.signatureArity(sig);
                    MethodType srcType = MethodType.genericMethodType(arity);
                    if (LambdaForm.signatureReturn(sig) == V_TYPE)
                        srcType = srcType.changeReturnType(void.class);
                    MethodTypeForm typeForm = srcType.form();
                    typeForm.setCachedMethodHandle(MethodTypeForm.MH_NF_INV, DirectMethodHandle.make(m));
                }
            }
!!!7209218.java!!!	invoke__V(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(0, void.class, mh, a));
            mh.invokeBasic();
            return null;
!!!7209346.java!!!	invoke_L_V(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(1, void.class, mh, a));
            mh.invokeBasic(a[0]);
            return null;
!!!7209474.java!!!	invoke_LL_V(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(2, void.class, mh, a));
            mh.invokeBasic(a[0], a[1]);
            return null;
!!!7209602.java!!!	invoke_LLL_V(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(3, void.class, mh, a));
            mh.invokeBasic(a[0], a[1], a[2]);
            return null;
!!!7209730.java!!!	invoke_LLLL_V(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(4, void.class, mh, a));
            mh.invokeBasic(a[0], a[1], a[2], a[3]);
            return null;
!!!7209858.java!!!	invoke_LLLLL_V(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(5, void.class, mh, a));
            mh.invokeBasic(a[0], a[1], a[2], a[3], a[4]);
            return null;
!!!7209986.java!!!	invoke__L(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(0, mh, a));
            return mh.invokeBasic();
!!!7210114.java!!!	invoke_L_L(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(1, mh, a));
            return mh.invokeBasic(a[0]);
!!!7210242.java!!!	invoke_LL_L(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(2, mh, a));
            return mh.invokeBasic(a[0], a[1]);
!!!7210370.java!!!	invoke_LLL_L(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(3, mh, a));
            return mh.invokeBasic(a[0], a[1], a[2]);
!!!7210498.java!!!	invoke_LLLL_L(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(4, mh, a));
            return mh.invokeBasic(a[0], a[1], a[2], a[3]);
!!!7210626.java!!!	invoke_LLLLL_L(inout mh : MethodHandle, inout a : Object [[]]) : Object
            assert(arityCheck(5, mh, a));
            return mh.invokeBasic(a[0], a[1], a[2], a[3], a[4]);
!!!7210754.java!!!	arityCheck(in arity : int, inout mh : MethodHandle, inout a : Object [[]]) : boolean
            return arityCheck(arity, Object.class, mh, a);
!!!7210882.java!!!	arityCheck(in arity : int, inout rtype : Class, inout mh : MethodHandle, inout a : Object [[]]) : boolean
            assert(a.length == arity)
                    : Arrays.asList(a.length, arity);
            assert(mh.type().basicType() == MethodType.genericMethodType(arity).changeReturnType(rtype))
                    : Arrays.asList(mh, rtype, arity);
            MemberName member = mh.internalMemberName();
            if (isInvokeBasic(member)) {
                assert(arity > 0);
                assert(a[0] instanceof MethodHandle);
                MethodHandle mh2 = (MethodHandle) a[0];
                assert(mh2.type().basicType() == MethodType.genericMethodType(arity-1).changeReturnType(rtype))
                        : Arrays.asList(member, mh2, rtype, arity);
            }
            return true;
!!!7211010.java!!!	computeInvoker(inout typeForm : MethodTypeForm) : MethodHandle
            typeForm = typeForm.basicType().form();  // normalize to basic type
            MethodHandle mh = typeForm.cachedMethodHandle(MethodTypeForm.MH_NF_INV);
            if (mh != null)  return mh;
            MemberName invoker = InvokerBytecodeGenerator.generateNamedFunctionInvoker(typeForm);  // this could take a while
            mh = DirectMethodHandle.make(invoker);
            MethodHandle mh2 = typeForm.cachedMethodHandle(MethodTypeForm.MH_NF_INV);
            if (mh2 != null)  return mh2;  // benign race
            if (!mh.type().equals(INVOKER_METHOD_TYPE))
                throw newInternalError(mh.debugString());
            return typeForm.setCachedMethodHandle(MethodTypeForm.MH_NF_INV, mh);
!!!7211138.java!!!	invokeWithArguments(inout  : Object...arguments) : Object
            // If we have a cached invoker, call it right away.
            // NOTE: The invoker always returns a reference value.
            if (TRACE_INTERPRETER)  return invokeWithArgumentsTracing(arguments);
            assert(checkArgumentTypes(arguments, methodType()));
            return invoker().invokeBasic(resolvedHandle(), arguments);
!!!7211266.java!!!	invokeWithArgumentsTracing(inout arguments : Object [[]]) : Object
            Object rval;
            try {
                traceInterpreter("[ call", this, arguments);
                if (invoker == null) {
                    traceInterpreter("| getInvoker", this);
                    invoker();
                }
                if (resolvedHandle == null) {
                    traceInterpreter("| resolve", this);
                    resolvedHandle();
                }
                assert(checkArgumentTypes(arguments, methodType()));
                rval = invoker().invokeBasic(resolvedHandle(), arguments);
            } catch (Throwable ex) {
                traceInterpreter("] throw =>", ex);
                throw ex;
            }
            traceInterpreter("] return =>", rval);
            return rval;
!!!7211394.java!!!	invoker() : MethodHandle
            if (invoker != null)  return invoker;
            // Get an invoker and cache it.
            return invoker = computeInvoker(methodType().form());
!!!7211522.java!!!	checkArgumentTypes(inout arguments : Object [[]], inout methodType : MethodType) : boolean
            if (true)  return true;  // FIXME
            MethodType dstType = methodType.form().erasedType();
            MethodType srcType = dstType.basicType().wrap();
            Class<?>[] ptypes = new Class<?>[arguments.length];
            for (int i = 0; i < arguments.length; i++) {
                Object arg = arguments[i];
                Class<?> ptype = arg == null ? Object.class : arg.getClass();
                // If the dest. type is a primitive we keep the
                // argument type.
                ptypes[i] = dstType.parameterType(i).isPrimitive() ? ptype : Object.class;
            }
            MethodType argType = MethodType.methodType(srcType.returnType(), ptypes).wrap();
            assert(argType.isConvertibleTo(srcType)) : "wrong argument types: cannot convert " + argType + " to " + srcType;
            return true;
!!!7211650.java!!!	methodType() : MethodType
            if (resolvedHandle != null)
                return resolvedHandle.type();
            else
                // only for certain internal LFs during bootstrapping
                return member.getInvocationType();
!!!7211778.java!!!	member() : MemberName
            assert(assertMemberIsConsistent());
            return member;
!!!7211906.java!!!	assertMemberIsConsistent() : boolean
            if (resolvedHandle instanceof DirectMethodHandle) {
                MemberName m = resolvedHandle.internalMemberName();
                assert(m.equals(member));
            }
            return true;
!!!7212034.java!!!	memberDeclaringClassOrNull() : Class
            return (member == null) ? null : member.getDeclaringClass();
!!!7212162.java!!!	returnType() : LambdaForm::BasicType
            return basicType(methodType().returnType());
!!!7212290.java!!!	parameterType(in n : int) : LambdaForm::BasicType
            return basicType(methodType().parameterType(n));
!!!7212418.java!!!	arity() : int
            return methodType().parameterCount();
!!!7212546.java!!!	toString() : String
            if (member == null)  return String.valueOf(resolvedHandle);
            return member.getDeclaringClass().getSimpleName()+"."+member.getName();
!!!7212674.java!!!	isIdentity() : boolean
            return this.equals(identity(returnType()));
!!!7212802.java!!!	isConstantZero() : boolean
            return this.equals(constantZero(returnType()));
!!!7212930.java!!!	intrinsicName() : MethodHandleImpl::Intrinsic
            return resolvedHandle == null ? MethodHandleImpl.Intrinsic.NONE
                                          : resolvedHandle.intrinsicName();
