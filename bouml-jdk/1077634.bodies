class CheckedNavigableMap
!!!8738690.java!!!	CheckedNavigableMap(inout m : NavigableMap, inout keyType : Class, inout valueType : Class)
            super(m, keyType, valueType);
            nm = m;
!!!8738818.java!!!	comparator() : Comparator
 return nm.comparator();
!!!8738946.java!!!	firstKey() : K
 return nm.firstKey();
!!!8739074.java!!!	lastKey() : K
 return nm.lastKey();
!!!8739202.java!!!	lowerEntry(inout key : K) : Map::Entry
            Entry<K,V> lower = nm.lowerEntry(key);
            return (null != lower)
                ? new CheckedMap.CheckedEntrySet.CheckedEntry<>(lower, valueType)
                : null;
!!!8739330.java!!!	lowerKey(inout key : K) : K
 return nm.lowerKey(key);
!!!8739458.java!!!	floorEntry(inout key : K) : Map::Entry
            Entry<K,V> floor = nm.floorEntry(key);
            return (null != floor)
                ? new CheckedMap.CheckedEntrySet.CheckedEntry<>(floor, valueType)
                : null;
!!!8739586.java!!!	floorKey(inout key : K) : K
 return nm.floorKey(key);
!!!8739714.java!!!	ceilingEntry(inout key : K) : Map::Entry
            Entry<K,V> ceiling = nm.ceilingEntry(key);
            return (null != ceiling)
                ? new CheckedMap.CheckedEntrySet.CheckedEntry<>(ceiling, valueType)
                : null;
!!!8739842.java!!!	ceilingKey(inout key : K) : K
 return nm.ceilingKey(key);
!!!8739970.java!!!	higherEntry(inout key : K) : Map::Entry
            Entry<K,V> higher = nm.higherEntry(key);
            return (null != higher)
                ? new CheckedMap.CheckedEntrySet.CheckedEntry<>(higher, valueType)
                : null;
!!!8740098.java!!!	higherKey(inout key : K) : K
 return nm.higherKey(key);
!!!8740226.java!!!	firstEntry() : Map::Entry
            Entry<K,V> first = nm.firstEntry();
            return (null != first)
                ? new CheckedMap.CheckedEntrySet.CheckedEntry<>(first, valueType)
                : null;
!!!8740354.java!!!	lastEntry() : Map::Entry
            Entry<K,V> last = nm.lastEntry();
            return (null != last)
                ? new CheckedMap.CheckedEntrySet.CheckedEntry<>(last, valueType)
                : null;
!!!8740482.java!!!	pollFirstEntry() : Map::Entry
            Entry<K,V> entry = nm.pollFirstEntry();
            return (null == entry)
                ? null
                : new CheckedMap.CheckedEntrySet.CheckedEntry<>(entry, valueType);
!!!8740610.java!!!	pollLastEntry() : Map::Entry
            Entry<K,V> entry = nm.pollLastEntry();
            return (null == entry)
                ? null
                : new CheckedMap.CheckedEntrySet.CheckedEntry<>(entry, valueType);
!!!8740738.java!!!	descendingMap() : NavigableMap
            return checkedNavigableMap(nm.descendingMap(), keyType, valueType);
!!!8740866.java!!!	keySet() : NavigableSet
            return navigableKeySet();
!!!8740994.java!!!	navigableKeySet() : NavigableSet
            return checkedNavigableSet(nm.navigableKeySet(), keyType);
!!!8741122.java!!!	descendingKeySet() : NavigableSet
            return checkedNavigableSet(nm.descendingKeySet(), keyType);
!!!8741250.java!!!	subMap(inout fromKey : K, inout toKey : K) : NavigableMap
            return checkedNavigableMap(nm.subMap(fromKey, true, toKey, false),
                                    keyType, valueType);
!!!8741378.java!!!	headMap(inout toKey : K) : NavigableMap
            return checkedNavigableMap(nm.headMap(toKey, false), keyType, valueType);
!!!8741506.java!!!	tailMap(inout fromKey : K) : NavigableMap
            return checkedNavigableMap(nm.tailMap(fromKey, true), keyType, valueType);
!!!8741634.java!!!	subMap(inout fromKey : K, inout fromInclusive : boolean, inout toKey : K, inout toInclusive : boolean) : NavigableMap
            return checkedNavigableMap(nm.subMap(fromKey, fromInclusive, toKey, toInclusive), keyType, valueType);
!!!8741762.java!!!	headMap(inout toKey : K, inout inclusive : boolean) : NavigableMap
            return checkedNavigableMap(nm.headMap(toKey, inclusive), keyType, valueType);
!!!8741890.java!!!	tailMap(inout fromKey : K, inout inclusive : boolean) : NavigableMap
            return checkedNavigableMap(nm.tailMap(fromKey, inclusive), keyType, valueType);
