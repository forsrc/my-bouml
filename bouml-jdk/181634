format 222
"invoke" // jdk1.8::java::lang::invoke
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/lang/invoke/"
  java_package "java.lang.invoke"
  classview 174338 "invoke"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 944130 "AbstractValidatingLambdaMetafactory"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract implementation of a lambda metafactory which provides parameter
unrolling and input validation.

@see LambdaMetafactory

 package "
      classrelation 3178882 // targetClass (<unidirectional association>)
	relation 3178882 --->
	  a role_name "targetClass" const_relation package
	    comment "
For context, the comments for the following fields are marked in quotes
with their values, given this program:
interface II<T> {  Object foo(T x); }
interface JJ<R extends Number> extends II<R> { }
class CC {  String impl(int i) { return \"impl:\"+i; }}
class X {
    public static void main(String[] args) {
        JJ<Integer> iii = (new CC())::impl;
        System.out.printf(\">>> %s\\n\", iii.foo(44));
}}

 The class calling the meta-factory via invokedynamic \"class X\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3178882 // targetClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3179010 // invokedType (<unidirectional association>)
	relation 3179010 --->
	  a role_name "invokedType" const_relation package
	    comment " The type of the invoked method \"(CC)II\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3179010 // invokedType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      classrelation 3179138 // samBase (<unidirectional association>)
	relation 3179138 --->
	  a role_name "samBase" const_relation package
	    comment " The type of the returned instance \"interface JJ\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3179138 // samBase (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3179266 // samMethodName (<unidirectional association>)
	relation 3179266 --->
	  a role_name "samMethodName" const_relation package
	    comment " Name of the SAM method \"foo\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3179266 // samMethodName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3179394 // samMethodType (<unidirectional association>)
	relation 3179394 --->
	  a role_name "samMethodType" const_relation package
	    comment " Type of the SAM method \"(Object)Object\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3179394 // samMethodType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      classrelation 3179522 // implMethod (<unidirectional association>)
	relation 3179522 --->
	  a role_name "implMethod" const_relation package
	    comment " Raw method handle for the implementation method"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3179522 // implMethod (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      classrelation 3179650 // implInfo (<unidirectional association>)
	relation 3179650 --->
	  a role_name "implInfo" const_relation package
	    comment " Info about the implementation method handle \"MethodHandleInfo[5 CC.impl(int)String]\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3179650 // implInfo (<unidirectional association>)
	  b parent class_ref 944514 // MethodHandleInfo
      end

      attribute 1691906 "implKind"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Invocation kind for implementation \"5\"=invokevirtual"
      end

      attribute 1692034 "implIsInstanceMethod"
	const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Is the implementation an instance method \"true\""
      end

      classrelation 3179778 // implDefiningClass (<unidirectional association>)
	relation 3179778 --->
	  a role_name "implDefiningClass" const_relation package
	    comment " Type defining the implementation \"class CC\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3179778 // implDefiningClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3179906 // implMethodType (<unidirectional association>)
	relation 3179906 --->
	  a role_name "implMethodType" const_relation package
	    comment " Type of the implementation method \"(int)String\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3179906 // implMethodType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      classrelation 3180034 // instantiatedMethodType (<unidirectional association>)
	relation 3180034 --->
	  a role_name "instantiatedMethodType" const_relation package
	    comment " Instantiated erased functional interface method type \"(Integer)Object\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3180034 // instantiatedMethodType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      attribute 1692162 "isSerializable"
	const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Should the returned instance be serializable"
      end

      classrelation 3180162 // markerInterfaces (<unidirectional association>)
	relation 3180162 --->
	  a role_name "markerInterfaces" multiplicity "[]" const_relation package
	    comment " Additional marker interfaces to be implemented"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3180162 // markerInterfaces (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3180290 // additionalBridges (<unidirectional association>)
	relation 3180290 --->
	  a role_name "additionalBridges" multiplicity "[]" const_relation package
	    comment " Signatures of additional methods to bridge"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3180290 // additionalBridges (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      operation 7152258 "AbstractValidatingLambdaMetafactory"
	package explicit_return_type ""
	nparams 9
	  param inout name "caller" type class_ref 944770 // Lookup
	  param inout name "invokedType" type class_ref 944258 // MethodType
	  param inout name "samMethodName" type class_ref 128130 // String
	  param inout name "samMethodType" type class_ref 944258 // MethodType
	  param inout name "implMethod" type class_ref 944386 // MethodHandle
	  param inout name "instantiatedMethodType" type class_ref 944258 // MethodType
	  param inout name "isSerializable" explicit_type "boolean"
	  param inout name "markerInterfaces" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "additionalBridges" type class_ref 944258 // MethodType
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 944898 // LambdaConversionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}<?>[] ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Meta-factory constructor.

@param caller Stacked automatically by VM; represents a lookup context
              with the accessibility privileges of the caller.
@param invokedType Stacked automatically by VM; the signature of the
                   invoked method, which includes the expected static
                   type of the returned lambda object, and the static
                   types of the captured arguments for the lambda.  In
                   the event that the implementation method is an
                   instance method, the first argument in the invocation
                   signature will correspond to the receiver.
@param samMethodName Name of the method in the functional interface to
                     which the lambda or method reference is being
                     converted, represented as a String.
@param samMethodType Type of the method in the functional interface to
                     which the lambda or method reference is being
                     converted, represented as a MethodType.
@param implMethod The implementation method which should be called
                  (with suitable adaptation of argument types, return
                  types, and adjustment for captured arguments) when
                  methods of the resulting functional interface instance
                  are invoked.
@param instantiatedMethodType The signature of the primary functional
                              interface method after type variables are
                              substituted with their instantiation from
                              the capture site
@param isSerializable Should the lambda be made serializable?  If set,
                      either the target type or one of the additional SAM
                      types must extend {@code Serializable}.
@param markerInterfaces Additional interfaces which the lambda object
                      should implement.
@param additionalBridges Method types for additional signatures to be
                         bridged to the implementation method
@throws LambdaConversionException If any of the meta-factory protocol
invariants are violated
"
      end

      operation 7152386 "buildCallSite"
	abstract package return_type class_ref 945026 // CallSite
	nparams 0
	nexceptions 1
	  exception class_ref 944898 // LambdaConversionException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Build the CallSite.

@return a CallSite, which, when invoked, will return an instance of the
functional interface
@throws ReflectiveOperationException
"
      end

      operation 7152514 "validateMetafactoryArgs"
	package explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 944898 // LambdaConversionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check the meta-factory arguments for errors
@throws LambdaConversionException if there are improper conversions
"
      end

      operation 7152642 "isAdaptableTo"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "fromType" type class_ref 130818 // Class
	  param inout name "toType" type class_ref 130818 // Class
	  param inout name "strict" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check type adaptability for parameter types.
@param fromType Type to convert from
@param toType Type to convert to
@param strict If true, do strict checks, else allow that fromType may be parameterized
@return True if 'fromType' can be passed to an argument of 'toType'
"
      end

      operation 7152770 "isAdaptableToAsReturn"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "fromType" type class_ref 130818 // Class
	  param inout name "toType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check type adaptability for return types --
special handling of void type) and parameterized fromType
@return True if 'fromType' can be converted to 'toType'
"
      end

      operation 7152898 "isAdaptableToAsReturnStrict"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "fromType" type class_ref 130818 // Class
	  param inout name "toType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 944258 "MethodType"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A method type represents the arguments and return type accepted and
returned by a method handle, or the arguments and return type passed
and expected  by a method handle caller.  Method types must be properly
matched between a method handle and all its callers,
and the JVM's operations enforce this matching at, specifically
during calls to {@link MethodHandle#invokeExact MethodHandle.invokeExact}
and {@link MethodHandle#invoke MethodHandle.invoke}, and during execution
of {@code invokedynamic} instructions.
<p>
The structure is a return type accompanied by any number of parameter types.
The types (primitive, {@code void}, and reference) are represented by {@link Class} objects.
(For ease of exposition, we treat {@code void} as if it were a type.
In fact, it denotes the absence of a return type.)
<p>
All instances of {@code MethodType} are immutable.
Two instances are completely interchangeable if they compare equal.
Equality depends on pairwise correspondence of the return and parameter types and on nothing else.
<p>
This type can be created only by factory methods.
All factory methods may cache values, though caching is not guaranteed.
Some factory methods are static, while others are virtual methods which
modify precursor method types, e.g., by changing a selected parameter.
<p>
Factory methods which operate on groups of parameter types
are systematically presented in two versions, so that both Java arrays and
Java lists can be used to work with groups of parameter types.
The query methods {@code parameterArray} and {@code parameterList}
also provide a choice between arrays and lists.
<p>
{@code MethodType} objects are sometimes derived from bytecode instructions
such as {@code invokedynamic}, specifically from the type descriptor strings associated
with the instructions in a class file's constant pool.
<p>
Like classes and strings, method types can also be represented directly
in a class file's constant pool as constants.
A method type may be loaded by an {@code ldc} instruction which refers
to a suitable {@code CONSTANT_MethodType} constant pool entry.
The entry refers to a {@code CONSTANT_Utf8} spelling for the descriptor string.
(For full details on method type constants,
see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)
<p>
When the JVM materializes a {@code MethodType} from a descriptor string,
all classes named in the descriptor must be accessible, and will be loaded.
(But the classes need not be initialized, as is the case with a {@code CONSTANT_Class}.)
This loading may occur at any time before the {@code MethodType} object is first derived.
@author John Rose, JSR 292 EG
"
      classrelation 3206530 // <realization>
	relation 3206530 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3206530 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1724546 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 292L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " {rtype, {ptype...}}"
      end

      classrelation 3206658 // rtype (<unidirectional association>)
	relation 3206658 --->
	  a role_name "rtype" const_relation private
	    comment " The rtype and ptypes fields define the structural identity of the method type:
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3206658 // rtype (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3206786 // ptypes (<unidirectional association>)
	relation 3206786 --->
	  a role_name "ptypes" multiplicity "[]" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3206786 // ptypes (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3206914 // form (<unidirectional association>)
	relation 3206914 --->
	  a role_name "form" private
	    comment " The remaining fields are caches of various sorts:
 erased form, plus cached data about primitives"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Stable
"
	    classrelation_ref 3206914 // form (<unidirectional association>)
	  b parent class_ref 949506 // MethodTypeForm
      end

      classrelation 3207042 // wrapAlt (<unidirectional association>)
	relation 3207042 --->
	  a role_name "wrapAlt" private
	    comment " alternative wrapped/unwrapped version"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Stable
"
	    classrelation_ref 3207042 // wrapAlt (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      classrelation 3207170 // invokers (<unidirectional association>)
	relation 3207170 --->
	  a role_name "invokers" private
	    comment " cache of handy higher-order adapters"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Stable
"
	    classrelation_ref 3207170 // invokers (<unidirectional association>)
	  b parent class_ref 949634 // Invokers
      end

      classrelation 3207298 // methodDescriptor (<unidirectional association>)
	relation 3207298 --->
	  a role_name "methodDescriptor" private
	    comment " cache for toMethodDescriptorString"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@Stable
"
	    classrelation_ref 3207298 // methodDescriptor (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7280642 "MethodType"
	private explicit_return_type ""
	nparams 3
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "trusted" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<?>[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check the given parameters for validity and store them into the final fields.
"
      end

      operation 7280770 "MethodType"
	private explicit_return_type ""
	nparams 2
	  param inout name "ptypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "rtype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?>[] ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a temporary unchecked instance of MethodType for use only as a key to the intern table.
Does not check the given parameters for validity, and must be discarded after it is used as a searching key.
The parameters are reversed for this constructor, so that is is not accidentally used.
"
      end

      operation 7280898 "form"
	package return_type class_ref 949506 // MethodTypeForm
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "trusted"
      end

      operation 7281026 "rtype"
	package return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "trusted"
      end

      operation 7281154 "ptypes"
	package return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "trusted"
      end

      operation 7281282 "setForm"
	package explicit_return_type "void"
	nparams 1
	  param inout name "f" type class_ref 949506 // MethodTypeForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1724674 "MAX_JVM_ARITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 255"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This number, mandated by the JVM spec as 255,
 is the maximum number of <em>slots</em>
 that any Java method can receive in its argument list.
 It limits both JVM signatures and method type objects.
 The longest possible invocation will look like
 {@code staticMethod(arg1, arg2, ..., arg255)} or
 {@code x.virtualMethod(arg1, arg2, ..., arg254)}.

non-public
 this is mandated by the JVM spec."
      end

      attribute 1724802 "MAX_MH_ARITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " MAX_JVM_ARITY-1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This number is the maximum arity of a method handle, 254.
 It is derived from the absolute JVM-imposed arity by subtracting one,
 which is the slot occupied by the method handle itself at the
 beginning of the argument list used to invoke the method handle.
 The longest possible invocation will look like
 {@code mh.invoke(arg1, arg2, ..., arg254)}.

 Issue:  Should we allow MH.invokeWithArguments to go to the full 255?
non-public
 deduct one for mh receiver"
      end

      attribute 1724930 "MAX_MH_INVOKER_ARITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " MAX_MH_ARITY-1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This number is the maximum arity of a method handle invoker, 253.
 It is derived from the absolute JVM-imposed arity by subtracting two,
 which are the slots occupied by invoke method handle, and the
 target method handle, which are both at the beginning of the argument
 list used to invoke the target method handle.
 The longest possible invocation will look like
 {@code invokermh.invoke(targetmh, arg1, arg2, ..., arg253)}.

non-public
 deduct one more for invoker"
      end

      operation 7281410 "checkRtype"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "rtype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7281538 "checkPtype"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "ptype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7281666 "checkPtypes"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "ptypes" type class_ref 130818 // Class
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?>[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return number of extra slots (count of long/double args). "
      end

      operation 7281794 "checkSlotCount"
	class_operation package explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7281922 "newIndexOutOfBoundsException"
	class_operation private return_type class_ref 881154 // IndexOutOfBoundsException
	nparams 1
	  param inout name "num" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 952450 "ConcurrentWeakInternSet"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	class 952578 "WeakEntry"
	  visibility private 
	  nformals 1
	  formal name "T" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 1
	  actual class class_ref 131330 // WeakReference
	    rank 0 explicit_value ""
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3208194 // <realization>
	    relation 3208194 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3208194 // <realization>
	      b parent class_ref 131330 // WeakReference
	  end

	  attribute 1725314 "hashcode"
	    const_attribute public explicit_type "int"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  operation 7290370 "WeakEntry"
	    cpp_inline public explicit_return_type ""
	    nparams 2
	      param inout name "key" explicit_type "T"
	      param inout name "queue" type class_ref 130946 // ReferenceQueue
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 7290498 "WeakEntry"
	    cpp_inline public explicit_return_type ""
	    nparams 1
	      param inout name "key" explicit_type "T"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 7290626 "equals"
	    cpp_inline public explicit_return_type "boolean"
	    nparams 1
	      param inout name "obj" type class_ref 129538 // Object
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end

	  operation 7290754 "hashCode"
	    cpp_inline public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end
	end

	classrelation 3207938 // map (<unidirectional association>)
	  relation 3207938 --->
	    a role_name "map" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakEntry<T>, WeakEntry<T>> ${name}${value};
"
	      classrelation_ref 3207938 // map (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	classrelation 3208066 // stale (<unidirectional association>)
	  relation 3208066 --->
	    a role_name "stale" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3208066 // stale (<unidirectional association>)
	    b parent class_ref 130946 // ReferenceQueue
	end

	operation 7289858 "ConcurrentWeakInternSet"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7289986 "get"
	  cpp_inline public explicit_return_type "T"
	  nparams 1
	    param inout name "elem" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the existing interned element.
This method returns null if no element is interned.

@param elem element to look up
@return the interned element
"
	end

	operation 7290114 "add"
	  cpp_inline public explicit_return_type "T"
	  nparams 1
	    param inout name "elem" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Interns the element.
Always returns non-null element, matching the one in the intern set.
Under the race against another add(), it can return <i>different</i>
element, if another thread beats us to interning it.

@param elem element to add
@return element that was actually added
"
	end

	operation 7290242 "expungeStaleElements"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3207426 // internTable (<unidirectional association>)
	relation 3207426 --->
	  a role_name "internTable" init_value " new ConcurrentWeakInternSet<>()" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodType> ${name}${value};
"
	    classrelation_ref 3207426 // internTable (<unidirectional association>)
	  b parent class_ref 952450 // ConcurrentWeakInternSet
      end

      classrelation 3207554 // NO_PTYPES (<unidirectional association>)
	relation 3207554 --->
	  a role_name "NO_PTYPES" multiplicity "[]" init_value " {}" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3207554 // NO_PTYPES (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 7282050 "methodType"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptypes" type class_ref 130818 // Class
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates an instance of the given method type.
@param rtype  the return type
@param ptypes the parameter types
@return a method type with the given components
@throws NullPointerException if {@code rtype} or {@code ptypes} or any element of {@code ptypes} is null
@throws IllegalArgumentException if any element of {@code ptypes} is {@code void.class}
"
      end

      operation 7282178 "methodType"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptypes" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with the given components.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param rtype  the return type
@param ptypes the parameter types
@return a method type with the given components
@throws NullPointerException if {@code rtype} or {@code ptypes} or any element of {@code ptypes} is null
@throws IllegalArgumentException if any element of {@code ptypes} is {@code void.class}
"
      end

      operation 7282306 "listToArray"
	class_operation private return_type class_ref 130818 // Class
	nparams 1
	  param inout name "ptypes" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${t0}<Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7282434 "methodType"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 3
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptype0" type class_ref 130818 // Class
	  param inout name "ptypes" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with the given components.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
The leading parameter type is prepended to the remaining array.
@param rtype  the return type
@param ptype0 the first parameter type
@param ptypes the remaining parameter types
@return a method type with the given components
@throws NullPointerException if {@code rtype} or {@code ptype0} or {@code ptypes} or any element of {@code ptypes} is null
@throws IllegalArgumentException if {@code ptype0} or {@code ptypes} or any element of {@code ptypes} is {@code void.class}
"
      end

      operation 7282562 "methodType"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 1
	  param inout name "rtype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with the given components.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
The resulting method has no parameter types.
@param rtype  the return type
@return a method type with the given return value
@throws NullPointerException if {@code rtype} is null
"
      end

      operation 7282690 "methodType"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptype0" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with the given components.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
The resulting method has the single given parameter type.
@param rtype  the return type
@param ptype0 the parameter type
@return a method type with the given return value and parameter type
@throws NullPointerException if {@code rtype} or {@code ptype0} is null
@throws IllegalArgumentException if {@code ptype0} is {@code void.class}
"
      end

      operation 7282818 "methodType"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptypes" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with the given components.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
The resulting method has the same parameter types as {@code ptypes},
and the specified return type.
@param rtype  the return type
@param ptypes the method type which supplies the parameter types
@return a method type with the given components
@throws NullPointerException if {@code rtype} or {@code ptypes} is null
"
      end

      operation 7282946 "makeImpl"
	class_operation package return_type class_ref 944258 // MethodType
	nparams 3
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "trusted" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?>[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sole factory method to find or create an interned method type.
@param rtype desired return type
@param ptypes desired parameter types
@param trusted whether the ptypes can be used without cloning
@return the unique method type of the desired structure

trusted"
      end

      classrelation 3207682 // objectOnlyTypes (<unidirectional association>)
	relation 3207682 --->
	  a role_name "objectOnlyTypes" multiplicity "[]" init_value " new MethodType[20]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3207682 // objectOnlyTypes (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      operation 7283074 "genericMethodType"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 2
	  param in name "objectArgCount" explicit_type "int"
	  param inout name "finalArray" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type whose components are {@code Object} with an optional trailing {@code Object[]} array.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
All parameters and the return type will be {@code Object},
except the final array parameter if any, which will be {@code Object[]}.
@param objectArgCount number of parameters (excluding the final array parameter if any)
@param finalArray whether there will be a trailing array parameter, of type {@code Object[]}
@return a generally applicable method type, for all calls of the given fixed argument count and a collected array of further arguments
@throws IllegalArgumentException if {@code objectArgCount} is negative or greater than 255 (or 254, if {@code finalArray} is true)
@see #genericMethodType(int)
"
      end

      operation 7283202 "genericMethodType"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 1
	  param in name "objectArgCount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type whose components are all {@code Object}.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
All parameters and the return type will be Object.
@param objectArgCount number of parameters
@return a generally applicable method type, for all calls of the given argument count
@throws IllegalArgumentException if {@code objectArgCount} is negative or greater than 255
@see #genericMethodType(int, boolean)
"
      end

      operation 7283330 "changeParameterType"
	public return_type class_ref 944258 // MethodType
	nparams 2
	  param in name "num" explicit_type "int"
	  param inout name "nptype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with a single different parameter type.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param num    the index (zero-based) of the parameter type to change
@param nptype a new parameter type to replace the old one with
@return the same type, except with the selected parameter changed
@throws IndexOutOfBoundsException if {@code num} is not a valid index into {@code parameterArray()}
@throws IllegalArgumentException if {@code nptype} is {@code void.class}
@throws NullPointerException if {@code nptype} is null
"
      end

      operation 7283458 "insertParameterTypes"
	public return_type class_ref 944258 // MethodType
	nparams 2
	  param in name "num" explicit_type "int"
	  param inout name "ptypesToInsert" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with additional parameter types.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param num    the position (zero-based) of the inserted parameter type(s)
@param ptypesToInsert zero or more new parameter types to insert into the parameter list
@return the same type, except with the selected parameter(s) inserted
@throws IndexOutOfBoundsException if {@code num} is negative or greater than {@code parameterCount()}
@throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}
                                 or if the resulting method type would have more than 255 parameter slots
@throws NullPointerException if {@code ptypesToInsert} or any of its elements is null
"
      end

      operation 7283586 "appendParameterTypes"
	public return_type class_ref 944258 // MethodType
	nparams 1
	  param inout name "ptypesToInsert" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with additional parameter types.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param ptypesToInsert zero or more new parameter types to insert after the end of the parameter list
@return the same type, except with the selected parameter(s) appended
@throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}
                                 or if the resulting method type would have more than 255 parameter slots
@throws NullPointerException if {@code ptypesToInsert} or any of its elements is null
"
      end

      operation 7283714 "insertParameterTypes"
	public return_type class_ref 944258 // MethodType
	nparams 2
	  param in name "num" explicit_type "int"
	  param inout name "ptypesToInsert" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with additional parameter types.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param num    the position (zero-based) of the inserted parameter type(s)
@param ptypesToInsert zero or more new parameter types to insert into the parameter list
@return the same type, except with the selected parameter(s) inserted
@throws IndexOutOfBoundsException if {@code num} is negative or greater than {@code parameterCount()}
@throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}
                                 or if the resulting method type would have more than 255 parameter slots
@throws NullPointerException if {@code ptypesToInsert} or any of its elements is null
"
      end

      operation 7283842 "appendParameterTypes"
	public return_type class_ref 944258 // MethodType
	nparams 1
	  param inout name "ptypesToInsert" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with additional parameter types.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param ptypesToInsert zero or more new parameter types to insert after the end of the parameter list
@return the same type, except with the selected parameter(s) appended
@throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}
                                 or if the resulting method type would have more than 255 parameter slots
@throws NullPointerException if {@code ptypesToInsert} or any of its elements is null
"
      end

      operation 7283970 "replaceParameterTypes"
	package return_type class_ref 944258 // MethodType
	nparams 3
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param inout name "ptypesToInsert" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with modified parameter types.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param start  the position (zero-based) of the first replaced parameter type(s)
@param end    the position (zero-based) after the last replaced parameter type(s)
@param ptypesToInsert zero or more new parameter types to insert into the parameter list
@return the same type, except with the selected parameter(s) replaced
@throws IndexOutOfBoundsException if {@code start} is negative or greater than {@code parameterCount()}
                                 or if {@code end} is negative or greater than {@code parameterCount()}
                                 or if {@code start} is greater than {@code end}
@throws IllegalArgumentException if any element of {@code ptypesToInsert} is {@code void.class}
                                 or if the resulting method type would have more than 255 parameter slots
@throws NullPointerException if {@code ptypesToInsert} or any of its elements is null

non-public"
      end

      operation 7284098 "asSpreaderType"
	package return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace the last arrayLength parameter types with the component type of arrayType.
@param arrayType any array type
@param arrayLength the number of parameter types to change
@return the resulting type

non-public"
      end

      operation 7284226 "leadingReferenceParameter"
	package return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the leading parameter type, which must exist and be a reference.
 @return the leading parameter type, after error checks

non-public"
      end

      operation 7284354 "asCollectorType"
	package return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Delete the last parameter type and replace it with arrayLength copies of the component type of arrayType.
@param arrayType any array type
@param arrayLength the number of parameter types to insert
@return the resulting type

non-public"
      end

      operation 7284482 "dropParameterTypes"
	public return_type class_ref 944258 // MethodType
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with some parameter types omitted.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param start  the index (zero-based) of the first parameter type to remove
@param end    the index (greater than {@code start}) of the first parameter type after not to remove
@return the same type, except with the selected parameter(s) removed
@throws IndexOutOfBoundsException if {@code start} is negative or greater than {@code parameterCount()}
                                 or if {@code end} is negative or greater than {@code parameterCount()}
                                 or if {@code start} is greater than {@code end}
"
      end

      operation 7284610 "changeReturnType"
	public return_type class_ref 944258 // MethodType
	nparams 1
	  param inout name "nrtype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates a method type with a different return type.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
@param nrtype a return parameter type to replace the old one with
@return the same type, except with the return type change
@throws NullPointerException if {@code nrtype} is null
"
      end

      operation 7284738 "hasPrimitives"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports if this type contains a primitive argument or return value.
The return type {@code void} counts as a primitive.
@return true if any of the types are primitives
"
      end

      operation 7284866 "hasWrappers"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reports if this type contains a wrapper argument or return value.
Wrappers are types which box primitive values, such as {@link Integer}.
The reference type {@code java.lang.Void} counts as a wrapper,
if it occurs as a return type.
@return true if any of the types are wrappers
"
      end

      operation 7284994 "erase"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Erases all reference types to {@code Object}.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
All primitive types (including {@code void}) will remain unchanged.
@return a version of the original type with all reference types replaced
"
      end

      operation 7285122 "basicType"
	package return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Erases all reference types to {@code Object}, and all subword types to {@code int}.
This is the reduced type polymorphism used by private methods
such as {@link MethodHandle#invokeBasic invokeBasic}.
@return a version of the original type with all reference and subword types replaced

non-public"
      end

      operation 7285250 "invokerType"
	package return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return a version of the original type with MethodHandle prepended as the first argument

non-public"
      end

      operation 7285378 "generic"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all types, both reference and primitive, to {@code Object}.
Convenience method for {@link #genericMethodType(int) genericMethodType}.
The expression {@code type.wrap().erase()} produces the same value
as {@code type.generic()}.
@return a version of the original type with all types replaced
"
      end

      operation 7285506 "isGeneric"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7285634 "wrap"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all primitive types to their corresponding wrapper types.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
All reference types (including wrapper types) will remain unchanged.
A {@code void} return type is changed to the type {@code java.lang.Void}.
The expression {@code type.wrap().erase()} produces the same value
as {@code type.generic()}.
@return a version of the original type with all primitive types replaced
"
      end

      operation 7285762 "unwrap"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts all wrapper types to their corresponding primitive types.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
All primitive types (including {@code void}) will remain unchanged.
A return type of {@code java.lang.Void} is changed to {@code void}.
@return a version of the original type with all wrapper types replaced
"
      end

      operation 7285890 "wrapWithPrims"
	class_operation private return_type class_ref 944258 // MethodType
	nparams 1
	  param inout name "pt" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7286018 "unwrapWithNoPrims"
	class_operation private return_type class_ref 944258 // MethodType
	nparams 1
	  param inout name "wt" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7286146 "parameterType"
	public return_type class_ref 130818 // Class
	nparams 1
	  param in name "num" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameter type at the specified index, within this method type.
@param num the index (zero-based) of the desired parameter type
@return the selected parameter type
@throws IndexOutOfBoundsException if {@code num} is not a valid index into {@code parameterArray()}
"
      end

      operation 7286274 "parameterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parameter types in this method type.
@return the number of parameter types
"
      end

      operation 7286402 "returnType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the return type of this method type.
@return the return type
"
      end

      operation 7286530 "parameterList"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Presents the parameter types as a list (a convenience method).
The list will be immutable.
@return the parameter types (as an immutable list)
"
      end

      operation 7286658 "lastParameterType"
	package return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7286786 "parameterArray"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Presents the parameter types as an array (a convenience method).
Changes to the array will not result in changes to the type.
@return the parameter types (as a fresh copy if necessary)
"
      end

      operation 7286914 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object with this type for equality.
That is, it returns <tt>true</tt> if and only if the specified object
is also a method type with exactly the same parameters and return type.
@param x object to compare
@see Object#equals(Object)
"
      end

      operation 7287042 "equals"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7287170 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hash code value for this method type.
It is defined to be the same as the hashcode of a List
whose elements are the return type followed by the
parameter types.
@return the hash code value for this method type
@see Object#hashCode()
@see #equals(Object)
@see List#hashCode()
"
      end

      operation 7287298 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of the method type,
of the form {@code \"(PT0,PT1...)RT\"}.
The string representation of a method type is a
parenthesis enclosed, comma separated list of type names,
followed immediately by the return type.
<p>
Each type is represented by its
{@link java.lang.Class#getSimpleName simple name}.
"
      end

      operation 7287426 "isViewableAs"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "newType" type class_ref 944258 // MethodType
	  param inout name "keepInterfaces" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " True if the old return type can always be viewed (w/o casting) under new return type,
 and the new parameters can be viewed (w/o casting) under the old parameter types.

non-public"
      end

      operation 7287554 "parametersAreViewableAs"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "newType" type class_ref 944258 // MethodType
	  param inout name "keepInterfaces" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " True if the new parameters can be viewed (w/o casting) under the old parameter types. 
non-public"
      end

      operation 7287682 "isConvertibleTo"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "newType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7287810 "explicitCastEquivalentToAsType"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "newType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns true if MHs.explicitCastArguments produces the same result as MH.asType.
 If the type conversion is impossible for either, the result should be false.

non-public"
      end

      operation 7287938 "explicitCastEquivalentToAsType"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "src" type class_ref 130818 // Class
	  param inout name "dst" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reports true if the src can be converted to the dst, by both asType and MHs.eCE,
 and with the same effect.
 MHs.eCA has the following \"upgrades\" to MH.asType:
 1. interfaces are unchecked (that is, treated as if aliased to Object)
    Therefore, {@code Object->CharSequence} is possible in both cases but has different semantics
 2. the full matrix of primitive-to-primitive conversions is supported
    Narrowing like {@code long->byte} and basic-typing like {@code boolean->int}
    are not supported by asType, but anything supported by asType is equivalent
    with MHs.eCE.
 3a. unboxing conversions can be followed by the full matrix of primitive conversions
 3b. unboxing of null is permitted (creates a zero primitive value)
Other than interfaces, reference-to-reference conversions are the same.
Boxing primitives to references is the same for both operators.
"
      end

      operation 7288066 "canConvertParameters"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "srcTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "dstTypes" type class_ref 130818 // Class
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?>[] ${p0}, ${t1}<?>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7288194 "canConvert"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "src" type class_ref 130818 // Class
	  param inout name "dst" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7288322 "parameterSlotCount"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Queries which have to do with the bytecode architecture
 Reports the number of JVM stack slots required to invoke a method
of this type.  Note that (for historical reasons) the JVM requires
a second stack slot to pass long and double arguments.
So this method returns {@link #parameterCount() parameterCount} plus the
number of long and double parameters (if any).
<p>
This method is included for the benefit of applications that must
generate bytecodes that process method handles and invokedynamic.
@return the number of JVM stack slots for this type's parameters

non-public"
      end

      operation 7288450 "invokers"
	package return_type class_ref 949634 // Invokers
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7288578 "parameterSlotDepth"
	package explicit_return_type "int"
	nparams 1
	  param in name "num" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reports the number of JVM stack slots which carry all parameters including and after
the given position, which must be in the range of 0 to
{@code parameterCount} inclusive.  Successive parameters are
more shallowly stacked, and parameters are indexed in the bytecodes
according to their trailing edge.  Thus, to obtain the depth
in the outgoing call stack of parameter {@code N}, obtain
the {@code parameterSlotDepth} of its trailing edge
at position {@code N+1}.
<p>
Parameters of type {@code long} and {@code double} occupy
two stack slots (for historical reasons) and all others occupy one.
Therefore, the number returned is the number of arguments
<em>including</em> and <em>after</em> the given parameter,
<em>plus</em> the number of long or double arguments
at or after after the argument for the given parameter.
<p>
This method is included for the benefit of applications that must
generate bytecodes that process method handles and invokedynamic.
@param num an index (zero-based, inclusive) within the parameter types
@return the index of the (shallowest) JVM stack slot transmitting the
        given parameter
@throws IllegalArgumentException if {@code num} is negative or greater than {@code parameterCount()}

non-public"
      end

      operation 7288706 "returnSlotCount"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reports the number of JVM stack slots required to receive a return value
from a method of this type.
If the {@link #returnType() return type} is void, it will be zero,
else if the return type is long or double, it will be two, else one.
<p>
This method is included for the benefit of applications that must
generate bytecodes that process method handles and invokedynamic.
@return the number of JVM stack slots (0, 1, or 2) for this type's return value
Will be removed for PFD.

non-public"
      end

      operation 7288834 "fromMethodDescriptorString"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "descriptor" type class_ref 128130 // String
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 940418 // TypeNotPresentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds or creates an instance of a method type, given the spelling of its bytecode descriptor.
Convenience method for {@link #methodType(java.lang.Class, java.lang.Class[]) methodType}.
Any class or interface name embedded in the descriptor string
will be resolved by calling {@link ClassLoader#loadClass(java.lang.String)}
on the given loader (or if it is null, on the system class loader).
<p>
Note that it is possible to encounter method types which cannot be
constructed by this method, because their component types are
not all reachable from a common class loader.
<p>
This method is included for the benefit of applications that must
generate bytecodes that process method handles and {@code invokedynamic}.
@param descriptor a bytecode-level type descriptor string \"(T...)T\"
@param loader the class loader in which to look up the types
@return a method type matching the bytecode-level type descriptor
@throws NullPointerException if the string is null
@throws IllegalArgumentException if the string is not well-formed
@throws TypeNotPresentException if a named type cannot be found
"
      end

      operation 7288962 "toMethodDescriptorString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a bytecode descriptor representation of the method type.
<p>
Note that this is not a strict inverse of {@link #fromMethodDescriptorString fromMethodDescriptorString}.
Two distinct classes which share a common name but have different class loaders
will appear identical when viewed within descriptor strings.
<p>
This method is included for the benefit of applications that must
generate bytecodes that process method handles and {@code invokedynamic}.
{@link #fromMethodDescriptorString(java.lang.String, java.lang.ClassLoader) fromMethodDescriptorString},
because the latter requires a suitable class loader argument.
@return the bytecode type descriptor representation
"
      end

      operation 7289090 "toFieldDescriptorString"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "cls" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      classrelation 3207810 // serialPersistentFields (<unidirectional association>)
	relation 3207810 --->
	  a role_name "serialPersistentFields" multiplicity "[]" init_value " { }" class_relation const_relation private
	    comment "/ Serialization.

There are no serializable fields for {@code MethodType}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3207810 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      operation 7289218 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Save the {@code MethodType} instance to a stream.

@serialData
For portability, the serialized format does not refer to named fields.
Instead, the return type and parameter type arrays are written directly
from the {@code writeObject} method, using two calls to {@code s.writeObject}
as follows:
<blockquote><pre>{@code
s.writeObject(this.returnType());
s.writeObject(this.parameterArray());
}</pre></blockquote>
<p>
The deserialized field values are checked as if they were
provided to the factory method {@link #methodType(Class,Class[]) methodType}.
For example, null values, or {@code void} parameter types,
will lead to exceptions during deserialization.
@param s the stream to write the object to
@throws java.io.IOException if there is a problem writing the object
"
      end

      operation 7289346 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitute the {@code MethodType} instance from a stream (that is,
deserialize it).
This instance is a scratch object with bogus final fields.
It provides the parameters to the factory method called by
{@link #readResolve readResolve}.
After that call it is discarded.
@param s the stream to read the object from
@throws java.io.IOException if there is a problem reading the object
@throws ClassNotFoundException if one of the component classes cannot be resolved
@see #MethodType()
@see #readResolve
@see #writeObject
"
      end

      operation 7289474 "MethodType"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For serialization only.
Sets the final fields to null, pending {@code Unsafe.putObject}.
"
      end

      operation 7289602 "MethodType_init"
	private explicit_return_type "void"
	nparams 2
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptypes" type class_ref 130818 // Class
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1725058 "rtypeOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Support for resetting final fields while deserializing
"
      end

      attribute 1725186 "ptypesOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Support for resetting final fields while deserializing
"
      end

      extra_member 162306 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            rtypeOffset = UNSAFE.objectFieldOffset
                (MethodType.class.getDeclaredField(\"rtype\"));
            ptypesOffset = UNSAFE.objectFieldOffset
                (MethodType.class.getDeclaredField(\"ptypes\"));
        } catch (Exception ex) {
            throw new Error(ex);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7289730 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves and initializes a {@code MethodType} object
after serialization.
@return the fully initialized {@code MethodType} object
"
      end
    end

    class 944386 "MethodHandle"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A method handle is a typed, directly executable reference to an underlying method,
constructor, field, or similar low-level operation, with optional
transformations of arguments or return values.
These transformations are quite general, and include such patterns as
{@linkplain #asType conversion},
{@linkplain #bindTo insertion},
{@linkplain java.lang.invoke.MethodHandles#dropArguments deletion},
and {@linkplain java.lang.invoke.MethodHandles#filterArguments substitution}.

<h1>Method handle contents</h1>
Method handles are dynamically and strongly typed according to their parameter and return types.
They are not distinguished by the name or the defining class of their underlying methods.
A method handle must be invoked using a symbolic type descriptor which matches
the method handle's own {@linkplain #type type descriptor}.
<p>
Every method handle reports its type descriptor via the {@link #type type} accessor.
This type descriptor is a {@link java.lang.invoke.MethodType MethodType} object,
whose structure is a series of classes, one of which is
the return type of the method (or {@code void.class} if none).
<p>
A method handle's type controls the types of invocations it accepts,
and the kinds of transformations that apply to it.
<p>
A method handle contains a pair of special invoker methods
called {@link #invokeExact invokeExact} and {@link #invoke invoke}.
Both invoker methods provide direct access to the method handle's
underlying method, constructor, field, or other operation,
as modified by transformations of arguments and return values.
Both invokers accept calls which exactly match the method handle's own type.
The plain, inexact invoker also accepts a range of other call types.
<p>
Method handles are immutable and have no visible state.
Of course, they can be bound to underlying methods or data which exhibit state.
With respect to the Java Memory Model, any method handle will behave
as if all of its (internal) fields are final variables.  This means that any method
handle made visible to the application will always be fully formed.
This is true even if the method handle is published through a shared
variable in a data race.
<p>
Method handles cannot be subclassed by the user.
Implementations may (or may not) create internal subclasses of {@code MethodHandle}
which may be visible via the {@link java.lang.Object#getClass Object.getClass}
operation.  The programmer should not draw conclusions about a method handle
from its specific class, as the method handle class hierarchy (if any)
may change from time to time or across implementations from different vendors.

<h1>Method handle compilation</h1>
A Java method call expression naming {@code invokeExact} or {@code invoke}
can invoke a method handle from Java source code.
From the viewpoint of source code, these methods can take any arguments
and their result can be cast to any return type.
Formally this is accomplished by giving the invoker methods
{@code Object} return types and variable arity {@code Object} arguments,
but they have an additional quality called <em>signature polymorphism</em>
which connects this freedom of invocation directly to the JVM execution stack.
<p>
As is usual with virtual methods, source-level calls to {@code invokeExact}
and {@code invoke} compile to an {@code invokevirtual} instruction.
More unusually, the compiler must record the actual argument types,
and may not perform method invocation conversions on the arguments.
Instead, it must push them on the stack according to their own unconverted types.
The method handle object itself is pushed on the stack before the arguments.
The compiler then calls the method handle with a symbolic type descriptor which
describes the argument and return types.
<p>
To issue a complete symbolic type descriptor, the compiler must also determine
the return type.  This is based on a cast on the method invocation expression,
if there is one, or else {@code Object} if the invocation is an expression
or else {@code void} if the invocation is a statement.
The cast may be to a primitive type (but not {@code void}).
<p>
As a corner case, an uncasted {@code null} argument is given
a symbolic type descriptor of {@code java.lang.Void}.
The ambiguity with the type {@code Void} is harmless, since there are no references of type
{@code Void} except the null reference.

<h1>Method handle invocation</h1>
The first time a {@code invokevirtual} instruction is executed
it is linked, by symbolically resolving the names in the instruction
and verifying that the method call is statically legal.
This is true of calls to {@code invokeExact} and {@code invoke}.
In this case, the symbolic type descriptor emitted by the compiler is checked for
correct syntax and names it contains are resolved.
Thus, an {@code invokevirtual} instruction which invokes
a method handle will always link, as long
as the symbolic type descriptor is syntactically well-formed
and the types exist.
<p>
When the {@code invokevirtual} is executed after linking,
the receiving method handle's type is first checked by the JVM
to ensure that it matches the symbolic type descriptor.
If the type match fails, it means that the method which the
caller is invoking is not present on the individual
method handle being invoked.
<p>
In the case of {@code invokeExact}, the type descriptor of the invocation
(after resolving symbolic type names) must exactly match the method type
of the receiving method handle.
In the case of plain, inexact {@code invoke}, the resolved type descriptor
must be a valid argument to the receiver's {@link #asType asType} method.
Thus, plain {@code invoke} is more permissive than {@code invokeExact}.
<p>
After type matching, a call to {@code invokeExact} directly
and immediately invoke the method handle's underlying method
(or other behavior, as the case may be).
<p>
A call to plain {@code invoke} works the same as a call to
{@code invokeExact}, if the symbolic type descriptor specified by the caller
exactly matches the method handle's own type.
If there is a type mismatch, {@code invoke} attempts
to adjust the type of the receiving method handle,
as if by a call to {@link #asType asType},
to obtain an exactly invokable method handle {@code M2}.
This allows a more powerful negotiation of method type
between caller and callee.
<p>
(<em>Note:</em> The adjusted method handle {@code M2} is not directly observable,
and implementations are therefore not required to materialize it.)

<h1>Invocation checking</h1>
In typical programs, method handle type matching will usually succeed.
But if a match fails, the JVM will throw a {@link WrongMethodTypeException},
either directly (in the case of {@code invokeExact}) or indirectly as if
by a failed call to {@code asType} (in the case of {@code invoke}).
<p>
Thus, a method type mismatch which might show up as a linkage error
in a statically typed program can show up as
a dynamic {@code WrongMethodTypeException}
in a program which uses method handles.
<p>
Because method types contain \"live\" {@code Class} objects,
method type matching takes into account both types names and class loaders.
Thus, even if a method handle {@code M} is created in one
class loader {@code L1} and used in another {@code L2},
method handle calls are type-safe, because the caller's symbolic type
descriptor, as resolved in {@code L2},
is matched against the original callee method's symbolic type descriptor,
as resolved in {@code L1}.
The resolution in {@code L1} happens when {@code M} is created
and its type is assigned, while the resolution in {@code L2} happens
when the {@code invokevirtual} instruction is linked.
<p>
Apart from the checking of type descriptors,
a method handle's capability to call its underlying method is unrestricted.
If a method handle is formed on a non-public method by a class
that has access to that method, the resulting handle can be used
in any place by any caller who receives a reference to it.
<p>
Unlike with the Core Reflection API, where access is checked every time
a reflective method is invoked,
method handle access checking is performed
<a href=\"MethodHandles.Lookup.html#access\">when the method handle is created</a>.
In the case of {@code ldc} (see below), access checking is performed as part of linking
the constant pool entry underlying the constant method handle.
<p>
Thus, handles to non-public methods, or to methods in non-public classes,
should generally be kept secret.
They should not be passed to untrusted code unless their use from
the untrusted code would be harmless.

<h1>Method handle creation</h1>
Java code can create a method handle that directly accesses
any method, constructor, or field that is accessible to that code.
This is done via a reflective, capability-based API called
{@link java.lang.invoke.MethodHandles.Lookup MethodHandles.Lookup}
For example, a static method handle can be obtained
from {@link java.lang.invoke.MethodHandles.Lookup#findStatic Lookup.findStatic}.
There are also conversion methods from Core Reflection API objects,
such as {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}.
<p>
Like classes and strings, method handles that correspond to accessible
fields, methods, and constructors can also be represented directly
in a class file's constant pool as constants to be loaded by {@code ldc} bytecodes.
A new type of constant pool entry, {@code CONSTANT_MethodHandle},
refers directly to an associated {@code CONSTANT_Methodref},
{@code CONSTANT_InterfaceMethodref}, or {@code CONSTANT_Fieldref}
constant pool entry.
(For full details on method handle constants,
see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)
<p>
Method handles produced by lookups or constant loads from methods or
constructors with the variable arity modifier bit ({@code 0x0080})
have a corresponding variable arity, as if they were defined with
the help of {@link #asVarargsCollector asVarargsCollector}.
<p>
A method reference may refer either to a static or non-static method.
In the non-static case, the method handle type includes an explicit
receiver argument, prepended before any other arguments.
In the method handle's type, the initial receiver argument is typed
according to the class under which the method was initially requested.
(E.g., if a non-static method handle is obtained via {@code ldc},
the type of the receiver is the class named in the constant pool entry.)
<p>
Method handle constants are subject to the same link-time access checks
their corresponding bytecode instructions, and the {@code ldc} instruction
will throw corresponding linkage errors if the bytecode behaviors would
throw such errors.
<p>
As a corollary of this, access to protected members is restricted
to receivers only of the accessing class, or one of its subclasses,
and the accessing class must in turn be a subclass (or package sibling)
of the protected member's defining class.
If a method reference refers to a protected non-static method or field
of a class outside the current package, the receiver argument will
be narrowed to the type of the accessing class.
<p>
When a method handle to a virtual method is invoked, the method is
always looked up in the receiver (that is, the first argument).
<p>
A non-virtual method handle to a specific virtual method implementation
can also be created.  These do not perform virtual lookup based on
receiver type.  Such a method handle simulates the effect of
an {@code invokespecial} instruction to the same method.

<h1>Usage examples</h1>
Here are some examples of usage:
<blockquote><pre>{@code
Object x, y; String s; int i;
MethodType mt; MethodHandle mh;
MethodHandles.Lookup lookup = MethodHandles.lookup();
// mt is (char,char)String
mt = MethodType.methodType(String.class, char.class, char.class);
mh = lookup.findVirtual(String.class, \"replace\", mt);
s = (String) mh.invokeExact(\"daddy\",'d','n');
// invokeExact(Ljava/lang/String;CC)Ljava/lang/String;
assertEquals(s, \"nanny\");
// weakly typed invocation (using MHs.invoke)
s = (String) mh.invokeWithArguments(\"sappy\", 'p', 'v');
assertEquals(s, \"savvy\");
// mt is (Object[])List
mt = MethodType.methodType(java.util.List.class, Object[].class);
mh = lookup.findStatic(java.util.Arrays.class, \"asList\", mt);
assert(mh.isVarargsCollector());
x = mh.invoke(\"one\", \"two\");
// invoke(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
assertEquals(x, java.util.Arrays.asList(\"one\",\"two\"));
// mt is (Object,Object,Object)Object
mt = MethodType.genericMethodType(3);
mh = mh.asType(mt);
x = mh.invokeExact((Object)1, (Object)2, (Object)3);
// invokeExact(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
assertEquals(x, java.util.Arrays.asList(1,2,3));
// mt is ()int
mt = MethodType.methodType(int.class);
mh = lookup.findVirtual(java.util.List.class, \"size\", mt);
i = (int) mh.invokeExact(java.util.Arrays.asList(1,2,3));
// invokeExact(Ljava/util/List;)I
assert(i == 3);
mt = MethodType.methodType(void.class, String.class);
mh = lookup.findVirtual(java.io.PrintStream.class, \"println\", mt);
mh.invokeExact(System.out, \"Hello, world.\");
// invokeExact(Ljava/io/PrintStream;Ljava/lang/String;)V
}</pre></blockquote>
Each of the above calls to {@code invokeExact} or plain {@code invoke}
generates a single invokevirtual instruction with
the symbolic type descriptor indicated in the following comment.
In these examples, the helper method {@code assertEquals} is assumed to
be a method which calls {@link java.util.Objects#equals(Object,Object) Objects.equals}
on its arguments, and asserts that the result is true.

<h1>Exceptions</h1>
The methods {@code invokeExact} and {@code invoke} are declared
to throw {@link java.lang.Throwable Throwable},
which is to say that there is no static restriction on what a method handle
can throw.  Since the JVM does not distinguish between checked
and unchecked exceptions (other than by their class, of course),
there is no particular effect on bytecode shape from ascribing
checked exceptions to method handle invocations.  But in Java source
code, methods which perform method handle calls must either explicitly
throw {@code Throwable}, or else must catch all
throwables locally, rethrowing only those which are legal in the context,
and wrapping ones which are illegal.

<h1><a name=\"sigpoly\"></a>Signature polymorphism</h1>
The unusual compilation and linkage behavior of
{@code invokeExact} and plain {@code invoke}
is referenced by the term <em>signature polymorphism</em>.
As defined in the Java Language Specification,
a signature polymorphic method is one which can operate with
any of a wide range of call signatures and return types.
<p>
In source code, a call to a signature polymorphic method will
compile, regardless of the requested symbolic type descriptor.
As usual, the Java compiler emits an {@code invokevirtual}
instruction with the given symbolic type descriptor against the named method.
The unusual part is that the symbolic type descriptor is derived from
the actual argument and return types, not from the method declaration.
<p>
When the JVM processes bytecode containing signature polymorphic calls,
it will successfully link any such call, regardless of its symbolic type descriptor.
(In order to retain type safety, the JVM will guard such calls with suitable
dynamic type checks, as described elsewhere.)
<p>
Bytecode generators, including the compiler back end, are required to emit
untransformed symbolic type descriptors for these methods.
Tools which determine symbolic linkage are required to accept such
untransformed descriptors, without reporting linkage errors.

<h1>Interoperation between method handles and the Core Reflection API</h1>
Using factory methods in the {@link java.lang.invoke.MethodHandles.Lookup Lookup} API,
any class member represented by a Core Reflection API object
can be converted to a behaviorally equivalent method handle.
For example, a reflective {@link java.lang.reflect.Method Method} can
be converted to a method handle using
{@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}.
The resulting method handles generally provide more direct and efficient
access to the underlying class members.
<p>
As a special case,
when the Core Reflection API is used to view the signature polymorphic
methods {@code invokeExact} or plain {@code invoke} in this class,
they appear as ordinary non-polymorphic methods.
Their reflective appearance, as viewed by
{@link java.lang.Class#getDeclaredMethod Class.getDeclaredMethod},
is unaffected by their special status in this API.
For example, {@link java.lang.reflect.Method#getModifiers Method.getModifiers}
will report exactly those modifier bits required for any similarly
declared method, including in this case {@code native} and {@code varargs} bits.
<p>
As with any reflected method, these methods (when reflected) may be
invoked via {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}.
However, such reflective calls do not result in method handle invocations.
Such a call, if passed the required argument
(a single one, of type {@code Object[]}), will ignore the argument and
will throw an {@code UnsupportedOperationException}.
<p>
Since {@code invokevirtual} instructions can natively
invoke method handles under any symbolic type descriptor, this reflective view conflicts
with the normal presentation of these methods via bytecodes.
Thus, these two native methods, when reflectively viewed by
{@code Class.getDeclaredMethod}, may be regarded as placeholders only.
<p>
In order to obtain an invoker method for a particular type descriptor,
use {@link java.lang.invoke.MethodHandles#exactInvoker MethodHandles.exactInvoker},
or {@link java.lang.invoke.MethodHandles#invoker MethodHandles.invoker}.
The {@link java.lang.invoke.MethodHandles.Lookup#findVirtual Lookup.findVirtual}
API is also able to return a method handle
to call {@code invokeExact} or plain {@code invoke},
for any specified type descriptor .

<h1>Interoperation between method handles and Java generics</h1>
A method handle can be obtained on a method, constructor, or field
which is declared with Java generic types.
As with the Core Reflection API, the type of the method handle
will constructed from the erasure of the source-level type.
When a method handle is invoked, the types of its arguments
or the return value cast type may be generic types or type instances.
If this occurs, the compiler will replace those
types by their erasures when it constructs the symbolic type descriptor
for the {@code invokevirtual} instruction.
<p>
Method handles do not represent
their function-like types in terms of Java parameterized (generic) types,
because there are three mismatches between function-like types and parameterized
Java types.
<ul>
<li>Method types range over all possible arities,
from no arguments to up to the  <a href=\"MethodHandle.html#maxarity\">maximum number</a> of allowed arguments.
Generics are not variadic, and so cannot represent this.</li>
<li>Method types can specify arguments of primitive types,
which Java generic types cannot range over.</li>
<li>Higher order functions over method handles (combinators) are
often generic across a wide range of function types, including
those of multiple arities.  It is impossible to represent such
genericity with a Java type parameter.</li>
</ul>

<h1><a name=\"maxarity\"></a>Arity limits</h1>
The JVM imposes on all methods and constructors of any kind an absolute
limit of 255 stacked arguments.  This limit can appear more restrictive
in certain cases:
<ul>
<li>A {@code long} or {@code double} argument counts (for purposes of arity limits) as two argument slots.
<li>A non-static method consumes an extra argument for the object on which the method is called.
<li>A constructor consumes an extra argument for the object which is being constructed.
<li>Since a method handle&rsquo;s {@code invoke} method (or other signature-polymorphic method) is non-virtual,
    it consumes an extra argument for the method handle itself, in addition to any non-virtual receiver object.
</ul>
These limits imply that certain method handles cannot be created, solely because of the JVM limit on stacked arguments.
For example, if a static JVM method accepts exactly 255 arguments, a method handle cannot be created for it.
Attempts to create method handles with impossible method types lead to an {@link IllegalArgumentException}.
In particular, a method handle&rsquo;s type must not have an arity of the exact maximum 255.

@see MethodType
@see MethodHandles
@author John Rose, JSR 292 EG
"
      extra_member 158466 "initialization"
	
	cpp "" ""
	java "  static { MethodHandleImpl.initStatics(); }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 945282 "PolymorphicSignature"
	visibility package stereotype "@interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
	java_annotation "@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 3180418 // type (<unidirectional association>)
	relation 3180418 --->
	  a role_name "type" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3180418 // type (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      classrelation 3180546 // form (<unidirectional association>)
	relation 3180546 --->
	  a role_name "form" const_relation package
	    comment "private
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3180546 // form (<unidirectional association>)
	  b parent class_ref 945410 // LambdaForm
      end

      classrelation 3180674 // asTypeCache (<unidirectional association>)
	relation 3180674 --->
	  a role_name "asTypeCache" package
	    comment " form is not private so that invokers can easily fetch it
private
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3180674 // asTypeCache (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      attribute 1692290 "customizationCount"
	package explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " asTypeCache is not private so that invokers can easily fetch it
non-public
"
      end

      operation 7153026 "type"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " customizationCount should be accessible from invokers

Reports the type of this method handle.
Every invocation of this method handle via {@code invokeExact} must exactly match this type.
@return the method handle type
"
      end

      operation 7153154 "MethodHandle"
	package explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor for the method handle implementation hierarchy.
Method handle inheritance will be contained completely within
the {@code java.lang.invoke} package.

 @param type type (permanently assigned) of the new method handle
non-public"
      end

      operation 7153282 "invokeExact"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...args"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	java_annotation "@PolymorphicSignature
"
	
	
	
	comment "Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match.
The symbolic type descriptor at the call site of {@code invokeExact} must
exactly match this method handle's {@link #type type}.
No conversions are allowed on arguments or return values.
<p>
When this method is observed via the Core Reflection API,
it will appear as a single native method, taking an object array and returning an object.
If this native method is invoked directly via
{@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}, via JNI,
or indirectly via {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect},
it will throw an {@code UnsupportedOperationException}.
@param args the signature-polymorphic parameter list, statically represented using varargs
@return the signature-polymorphic result, statically represented using {@code Object}
@throws WrongMethodTypeException if the target's type is not identical with the caller's symbolic type descriptor
@throws Throwable anything thrown by the underlying method propagates unchanged through the method handle call
"
      end

      operation 7153410 "invoke"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...args"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	java_annotation "@PolymorphicSignature
"
	
	
	
	comment "Invokes the method handle, allowing any caller type descriptor,
and optionally performing conversions on arguments and return values.
<p>
If the call site's symbolic type descriptor exactly matches this method handle's {@link #type type},
the call proceeds as if by {@link #invokeExact invokeExact}.
<p>
Otherwise, the call proceeds as if this method handle were first
adjusted by calling {@link #asType asType} to adjust this method handle
to the required type, and then the call proceeds as if by
{@link #invokeExact invokeExact} on the adjusted method handle.
<p>
There is no guarantee that the {@code asType} call is actually made.
If the JVM can predict the results of making the call, it may perform
adaptations directly on the caller's arguments,
and call the target method handle according to its own exact type.
<p>
The resolved type descriptor at the call site of {@code invoke} must
be a valid argument to the receivers {@code asType} method.
In particular, the caller must specify the same argument arity
as the callee's type,
if the callee is not a {@linkplain #asVarargsCollector variable arity collector}.
<p>
When this method is observed via the Core Reflection API,
it will appear as a single native method, taking an object array and returning an object.
If this native method is invoked directly via
{@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}, via JNI,
or indirectly via {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect},
it will throw an {@code UnsupportedOperationException}.
@param args the signature-polymorphic parameter list, statically represented using varargs
@return the signature-polymorphic result, statically represented using {@code Object}
@throws WrongMethodTypeException if the target's type cannot be adjusted to the caller's symbolic type descriptor
@throws ClassCastException if the target's type can be adjusted to the caller, but a reference cast fails
@throws Throwable anything thrown by the underlying method propagates unchanged through the method handle call
"
      end

      operation 7153538 "invokeBasic"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...args"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	java_annotation "@PolymorphicSignature
"
	
	
	
	comment "Private method for trusted invocation of a method handle respecting simplified signatures.
Type mismatches will not throw {@code WrongMethodTypeException}, but could crash the JVM.
<p>
The caller signature is restricted to the following basic types:
Object, int, long, float, double, and void return.
<p>
The caller is responsible for maintaining type correctness by ensuring
that the each outgoing argument value is a member of the range of the corresponding
callee argument type.
(The caller should therefore issue appropriate casts and integer narrowing
operations on outgoing argument values.)
The caller can assume that the incoming result value is part of the range
of the callee's return type.
@param args the signature-polymorphic parameter list, statically represented using varargs
@return the signature-polymorphic result, statically represented using {@code Object}

non-public"
      end

      operation 7153666 "linkToVirtual"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...args"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	java_annotation "@PolymorphicSignature
"
	
	
	
	comment "Private method for trusted invocation of a MemberName of kind {@code REF_invokeVirtual}.
The caller signature is restricted to basic types as with {@code invokeBasic}.
The trailing (not leading) argument must be a MemberName.
@param args the signature-polymorphic parameter list, statically represented using varargs
@return the signature-polymorphic result, statically represented using {@code Object}

non-public"
      end

      operation 7153794 "linkToStatic"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...args"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	java_annotation "@PolymorphicSignature
"
	
	
	
	comment "Private method for trusted invocation of a MemberName of kind {@code REF_invokeStatic}.
The caller signature is restricted to basic types as with {@code invokeBasic}.
The trailing (not leading) argument must be a MemberName.
@param args the signature-polymorphic parameter list, statically represented using varargs
@return the signature-polymorphic result, statically represented using {@code Object}

non-public"
      end

      operation 7153922 "linkToSpecial"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...args"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	java_annotation "@PolymorphicSignature
"
	
	
	
	comment "Private method for trusted invocation of a MemberName of kind {@code REF_invokeSpecial}.
The caller signature is restricted to basic types as with {@code invokeBasic}.
The trailing (not leading) argument must be a MemberName.
@param args the signature-polymorphic parameter list, statically represented using varargs
@return the signature-polymorphic result, statically represented using {@code Object}

non-public"
      end

      operation 7154050 "linkToInterface"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...args"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	java_annotation "@PolymorphicSignature
"
	
	
	
	comment "Private method for trusted invocation of a MemberName of kind {@code REF_invokeInterface}.
The caller signature is restricted to basic types as with {@code invokeBasic}.
The trailing (not leading) argument must be a MemberName.
@param args the signature-polymorphic parameter list, statically represented using varargs
@return the signature-polymorphic result, statically represented using {@code Object}

non-public"
      end

      operation 7154178 "invokeWithArguments"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...arguments"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a variable arity invocation, passing the arguments in the given list
to the method handle, as if via an inexact {@link #invoke invoke} from a call site
which mentions only the type {@code Object}, and whose arity is the length
of the argument list.
<p>
Specifically, execution proceeds as if by the following steps,
although the methods are not guaranteed to be called if the JVM
can predict their effects.
<ul>
<li>Determine the length of the argument array as {@code N}.
    For a null reference, {@code N=0}. </li>
<li>Determine the general type {@code TN} of {@code N} arguments as
    as {@code TN=MethodType.genericMethodType(N)}.</li>
<li>Force the original target method handle {@code MH0} to the
    required type, as {@code MH1 = MH0.asType(TN)}. </li>
<li>Spread the array into {@code N} separate arguments {@code A0, ...}. </li>
<li>Invoke the type-adjusted method handle on the unpacked arguments:
    MH1.invokeExact(A0, ...). </li>
<li>Take the return value as an {@code Object} reference. </li>
</ul>
<p>
Because of the action of the {@code asType} step, the following argument
conversions are applied as necessary:
<ul>
<li>reference casting
<li>unboxing
<li>widening primitive conversions
</ul>
<p>
The result returned by the call is boxed if it is a primitive,
or forced to null if the return type is void.
<p>
This call is equivalent to the following code:
<blockquote><pre>{@code
MethodHandle invoker = MethodHandles.spreadInvoker(this.type(), 0);
Object result = invoker.invokeExact(this, arguments);
}</pre></blockquote>
<p>
Unlike the signature polymorphic methods {@code invokeExact} and {@code invoke},
{@code invokeWithArguments} can be accessed normally via the Core Reflection API and JNI.
It can therefore be used as a bridge between native or reflective code and method handles.

@param arguments the arguments to pass to the target
@return the result returned by the target
@throws ClassCastException if an argument cannot be converted by reference casting
@throws WrongMethodTypeException if the target's type cannot be adjusted to take the given number of {@code Object} arguments
@throws Throwable anything thrown by the target method invocation
@see MethodHandles#spreadInvoker
"
      end

      operation 7154306 "invokeWithArguments"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "arguments" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a variable arity invocation, passing the arguments in the given array
to the method handle, as if via an inexact {@link #invoke invoke} from a call site
which mentions only the type {@code Object}, and whose arity is the length
of the argument array.
<p>
This method is also equivalent to the following code:
<blockquote><pre>{@code
  invokeWithArguments(arguments.toArray()
}</pre></blockquote>

@param arguments the arguments to pass to the target
@return the result returned by the target
@throws NullPointerException if {@code arguments} is a null reference
@throws ClassCastException if an argument cannot be converted by reference casting
@throws WrongMethodTypeException if the target's type cannot be adjusted to take the given number of {@code Object} arguments
@throws Throwable anything thrown by the target method invocation
"
      end

      operation 7154434 "asType"
	public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "newType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces an adapter method handle which adapts the type of the
current method handle to a new type.
The resulting method handle is guaranteed to report a type
which is equal to the desired new type.
<p>
If the original type and new type are equal, returns {@code this}.
<p>
The new method handle, when invoked, will perform the following
steps:
<ul>
<li>Convert the incoming argument list to match the original
    method handle's argument list.
<li>Invoke the original method handle on the converted argument list.
<li>Convert any result returned by the original method handle
    to the return type of new method handle.
</ul>
<p>
This method provides the crucial behavioral difference between
{@link #invokeExact invokeExact} and plain, inexact {@link #invoke invoke}.
The two methods
perform the same steps when the caller's type descriptor exactly m atches
the callee's, but when the types differ, plain {@link #invoke invoke}
also calls {@code asType} (or some internal equivalent) in order
to match up the caller's and callee's types.
<p>
If the current method is a variable arity method handle
argument list conversion may involve the conversion and collection
of several arguments into an array, as
{@linkplain #asVarargsCollector described elsewhere}.
In every other case, all conversions are applied <em>pairwise</em>,
which means that each argument or return value is converted to
exactly one argument or return value (or no return value).
The applied conversions are defined by consulting the
the corresponding component types of the old and new
method handle types.
<p>
Let <em>T0</em> and <em>T1</em> be corresponding new and old parameter types,
or old and new return types.  Specifically, for some valid index {@code i}, let
<em>T0</em>{@code =newType.parameterType(i)} and <em>T1</em>{@code =this.type().parameterType(i)}.
Or else, going the other way for return values, let
<em>T0</em>{@code =this.type().returnType()} and <em>T1</em>{@code =newType.returnType()}.
If the types are the same, the new method handle makes no change
to the corresponding argument or return value (if any).
Otherwise, one of the following conversions is applied
if possible:
<ul>
<li>If <em>T0</em> and <em>T1</em> are references, then a cast to <em>T1</em> is applied.
    (The types do not need to be related in any particular way.
    This is because a dynamic value of null can convert to any reference type.)
<li>If <em>T0</em> and <em>T1</em> are primitives, then a Java method invocation
    conversion (JLS 5.3) is applied, if one exists.
    (Specifically, <em>T0</em> must convert to <em>T1</em> by a widening primitive conversion.)
<li>If <em>T0</em> is a primitive and <em>T1</em> a reference,
    a Java casting conversion (JLS 5.5) is applied if one exists.
    (Specifically, the value is boxed from <em>T0</em> to its wrapper class,
    which is then widened as needed to <em>T1</em>.)
<li>If <em>T0</em> is a reference and <em>T1</em> a primitive, an unboxing
    conversion will be applied at runtime, possibly followed
    by a Java method invocation conversion (JLS 5.3)
    on the primitive value.  (These are the primitive widening conversions.)
    <em>T0</em> must be a wrapper class or a supertype of one.
    (In the case where <em>T0</em> is Object, these are the conversions
    allowed by {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}.)
    The unboxing conversion must have a possibility of success, which means that
    if <em>T0</em> is not itself a wrapper class, there must exist at least one
    wrapper class <em>TW</em> which is a subtype of <em>T0</em> and whose unboxed
    primitive value can be widened to <em>T1</em>.
<li>If the return type <em>T1</em> is marked as void, any returned value is discarded
<li>If the return type <em>T0</em> is void and <em>T1</em> a reference, a null value is introduced.
<li>If the return type <em>T0</em> is void and <em>T1</em> a primitive,
    a zero value is introduced.
</ul>
(<em>Note:</em> Both <em>T0</em> and <em>T1</em> may be regarded as static types,
because neither corresponds specifically to the <em>dynamic type</em> of any
actual argument or return value.)
<p>
The method handle conversion cannot be made if any one of the required
pairwise conversions cannot be made.
<p>
At runtime, the conversions applied to reference arguments
or return values may require additional runtime checks which can fail.
An unboxing operation may fail because the original reference is null,
causing a {@link java.lang.NullPointerException NullPointerException}.
An unboxing operation or a reference cast may also fail on a reference
to an object of the wrong type,
causing a {@link java.lang.ClassCastException ClassCastException}.
Although an unboxing operation may accept several kinds of wrappers,
if none are available, a {@code ClassCastException} will be thrown.

@param newType the expected type of the new method handle
@return a method handle which delegates to {@code this} after performing
          any necessary argument conversions, and arranges for any
          necessary return value conversions
@throws NullPointerException if {@code newType} is a null reference
@throws WrongMethodTypeException if the conversion cannot be made
@see MethodHandles#explicitCastArguments
"
      end

      operation 7154562 "asTypeCached"
	private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "newType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7154690 "asTypeUncached"
	package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "newType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Override this to change asType behavior. 
non-public"
      end

      operation 7154818 "asSpreader"
	public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes an <em>array-spreading</em> method handle, which accepts a trailing array argument
and spreads its elements as positional arguments.
The new method handle adapts, as its <i>target</i>,
the current method handle.  The type of the adapter will be
the same as the type of the target, except that the final
{@code arrayLength} parameters of the target's type are replaced
by a single array parameter of type {@code arrayType}.
<p>
If the array element type differs from any of the corresponding
argument types on the original target,
the original target is adapted to take the array elements directly,
as if by a call to {@link #asType asType}.
<p>
When called, the adapter replaces a trailing array argument
by the array's elements, each as its own argument to the target.
(The order of the arguments is preserved.)
They are converted pairwise by casting and/or unboxing
to the types of the trailing parameters of the target.
Finally the target is called.
What the target eventually returns is returned unchanged by the adapter.
<p>
Before calling the target, the adapter verifies that the array
contains exactly enough elements to provide a correct argument count
to the target method handle.
(The array may also be null when zero elements are required.)
<p>
If, when the adapter is called, the supplied array argument does
not have the correct number of elements, the adapter will throw
an {@link IllegalArgumentException} instead of invoking the target.
<p>
Here are some simple examples of array-spreading method handles:
<blockquote><pre>{@code
MethodHandle equals = publicLookup()
.findVirtual(String.class, \"equals\", methodType(boolean.class, Object.class));
assert( (boolean) equals.invokeExact(\"me\", (Object)\"me\"));
assert(!(boolean) equals.invokeExact(\"me\", (Object)\"thee\"));
// spread both arguments from a 2-array:
MethodHandle eq2 = equals.asSpreader(Object[].class, 2);
assert( (boolean) eq2.invokeExact(new Object[]{ \"me\", \"me\" }));
assert(!(boolean) eq2.invokeExact(new Object[]{ \"me\", \"thee\" }));
// try to spread from anything but a 2-array:
for (int n = 0; n <= 10; n++) {
Object[] badArityArgs = (n == 2 ? null : new Object[n]);
try { assert((boolean) eq2.invokeExact(badArityArgs) && false); }
catch (IllegalArgumentException ex) { } // OK
}
// spread both arguments from a String array:
MethodHandle eq2s = equals.asSpreader(String[].class, 2);
assert( (boolean) eq2s.invokeExact(new String[]{ \"me\", \"me\" }));
assert(!(boolean) eq2s.invokeExact(new String[]{ \"me\", \"thee\" }));
// spread second arguments from a 1-array:
MethodHandle eq1 = equals.asSpreader(Object[].class, 1);
assert( (boolean) eq1.invokeExact(\"me\", new Object[]{ \"me\" }));
assert(!(boolean) eq1.invokeExact(\"me\", new Object[]{ \"thee\" }));
// spread no arguments from a 0-array or null:
MethodHandle eq0 = equals.asSpreader(Object[].class, 0);
assert( (boolean) eq0.invokeExact(\"me\", (Object)\"me\", new Object[0]));
assert(!(boolean) eq0.invokeExact(\"me\", (Object)\"thee\", (Object[])null));
// asSpreader and asCollector are approximate inverses:
for (int n = 0; n <= 2; n++) {
for (Class<?> a : new Class<?>[]{Object[].class, String[].class, CharSequence[].class}) {
MethodHandle equals2 = equals.asSpreader(a, n).asCollector(a, n);
assert( (boolean) equals2.invokeWithArguments(\"me\", \"me\"));
assert(!(boolean) equals2.invokeWithArguments(\"me\", \"thee\"));
}
}
MethodHandle caToString = publicLookup()
.findStatic(Arrays.class, \"toString\", methodType(String.class, char[].class));
assertEquals(\"[A, B, C]\", (String) caToString.invokeExact(\"ABC\".toCharArray()));
MethodHandle caString3 = caToString.asCollector(char[].class, 3);
assertEquals(\"[A, B, C]\", (String) caString3.invokeExact('A', 'B', 'C'));
MethodHandle caToString2 = caString3.asSpreader(char[].class, 2);
assertEquals(\"[A, B, C]\", (String) caToString2.invokeExact('A', \"BC\".toCharArray()));
}</pre></blockquote>
@param arrayType usually {@code Object[]}, the type of the array argument from which to extract the spread arguments
@param arrayLength the number of arguments to spread from an incoming array argument
@return a new method handle which spreads its final array argument,
        before calling the original method handle
@throws NullPointerException if {@code arrayType} is a null reference
@throws IllegalArgumentException if {@code arrayType} is not an array type,
        or if target does not have at least
        {@code arrayLength} parameter types,
        or if {@code arrayLength} is negative,
        or if the resulting method handle's type would have
        <a href=\"MethodHandle.html#maxarity\">too many parameters</a>
@throws WrongMethodTypeException if the implied {@code asType} call fails
@see #asCollector
"
      end

      operation 7154946 "asSpreaderChecks"
	private return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See if {@code asSpreader} can be validly called with the given arguments.
Return the type of the method handle call after spreading but before conversions.
"
      end

      operation 7155074 "spreadArrayChecks"
	private explicit_return_type "void"
	nparams 2
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7155202 "asCollector"
	public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes an <em>array-collecting</em> method handle, which accepts a given number of trailing
positional arguments and collects them into an array argument.
The new method handle adapts, as its <i>target</i>,
the current method handle.  The type of the adapter will be
the same as the type of the target, except that a single trailing
parameter (usually of type {@code arrayType}) is replaced by
{@code arrayLength} parameters whose type is element type of {@code arrayType}.
<p>
If the array type differs from the final argument type on the original target,
the original target is adapted to take the array type directly,
as if by a call to {@link #asType asType}.
<p>
When called, the adapter replaces its trailing {@code arrayLength}
arguments by a single new array of type {@code arrayType}, whose elements
comprise (in order) the replaced arguments.
Finally the target is called.
What the target eventually returns is returned unchanged by the adapter.
<p>
(The array may also be a shared constant when {@code arrayLength} is zero.)
<p>
(<em>Note:</em> The {@code arrayType} is often identical to the last
parameter type of the original target.
It is an explicit argument for symmetry with {@code asSpreader}, and also
to allow the target to use a simple {@code Object} as its last parameter type.)
<p>
In order to create a collecting adapter which is not restricted to a particular
number of collected arguments, use {@link #asVarargsCollector asVarargsCollector} instead.
<p>
Here are some examples of array-collecting method handles:
<blockquote><pre>{@code
MethodHandle deepToString = publicLookup()
.findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));
assertEquals(\"[won]\",   (String) deepToString.invokeExact(new Object[]{\"won\"}));
MethodHandle ts1 = deepToString.asCollector(Object[].class, 1);
assertEquals(methodType(String.class, Object.class), ts1.type());
//assertEquals(\"[won]\", (String) ts1.invokeExact(         new Object[]{\"won\"})); //FAIL
assertEquals(\"[[won]]\", (String) ts1.invokeExact((Object) new Object[]{\"won\"}));
// arrayType can be a subtype of Object[]
MethodHandle ts2 = deepToString.asCollector(String[].class, 2);
assertEquals(methodType(String.class, String.class, String.class), ts2.type());
assertEquals(\"[two, too]\", (String) ts2.invokeExact(\"two\", \"too\"));
MethodHandle ts0 = deepToString.asCollector(Object[].class, 0);
assertEquals(\"[]\", (String) ts0.invokeExact());
// collectors can be nested, Lisp-style
MethodHandle ts22 = deepToString.asCollector(Object[].class, 3).asCollector(String[].class, 2);
assertEquals(\"[A, B, [C, D]]\", ((String) ts22.invokeExact((Object)'A', (Object)\"B\", \"C\", \"D\")));
// arrayType can be any primitive array type
MethodHandle bytesToString = publicLookup()
.findStatic(Arrays.class, \"toString\", methodType(String.class, byte[].class))
.asCollector(byte[].class, 3);
assertEquals(\"[1, 2, 3]\", (String) bytesToString.invokeExact((byte)1, (byte)2, (byte)3));
MethodHandle longsToString = publicLookup()
.findStatic(Arrays.class, \"toString\", methodType(String.class, long[].class))
.asCollector(long[].class, 1);
assertEquals(\"[123]\", (String) longsToString.invokeExact((long)123));
}</pre></blockquote>
@param arrayType often {@code Object[]}, the type of the array argument which will collect the arguments
@param arrayLength the number of arguments to collect into a new array argument
@return a new method handle which collects some trailing argument
        into an array, before calling the original method handle
@throws NullPointerException if {@code arrayType} is a null reference
@throws IllegalArgumentException if {@code arrayType} is not an array type
        or {@code arrayType} is not assignable to this method handle's trailing parameter type,
        or {@code arrayLength} is not a legal array size,
        or the resulting method handle's type would have
        <a href=\"MethodHandle.html#maxarity\">too many parameters</a>
@throws WrongMethodTypeException if the implied {@code asType} call fails
@see #asSpreader
@see #asVarargsCollector
"
      end

      operation 7155330 "asCollectorChecks"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See if {@code asCollector} can be validly called with the given arguments.
Return false if the last parameter is not an exact match to arrayType.

non-public"
      end

      operation 7155458 "asVarargsCollector"
	public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "arrayType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a <em>variable arity</em> adapter which is able to accept
any number of trailing positional arguments and collect them
into an array argument.
<p>
The type and behavior of the adapter will be the same as
the type and behavior of the target, except that certain
{@code invoke} and {@code asType} requests can lead to
trailing positional arguments being collected into target's
trailing parameter.
Also, the last parameter type of the adapter will be
{@code arrayType}, even if the target has a different
last parameter type.
<p>
This transformation may return {@code this} if the method handle is
already of variable arity and its trailing parameter type
is identical to {@code arrayType}.
<p>
When called with {@link #invokeExact invokeExact}, the adapter invokes
the target with no argument changes.
(<em>Note:</em> This behavior is different from a
{@linkplain #asCollector fixed arity collector},
since it accepts a whole array of indeterminate length,
rather than a fixed number of arguments.)
<p>
When called with plain, inexact {@link #invoke invoke}, if the caller
type is the same as the adapter, the adapter invokes the target as with
{@code invokeExact}.
(This is the normal behavior for {@code invoke} when types match.)
<p>
Otherwise, if the caller and adapter arity are the same, and the
trailing parameter type of the caller is a reference type identical to
or assignable to the trailing parameter type of the adapter,
the arguments and return values are converted pairwise,
as if by {@link #asType asType} on a fixed arity
method handle.
<p>
Otherwise, the arities differ, or the adapter's trailing parameter
type is not assignable from the corresponding caller type.
In this case, the adapter replaces all trailing arguments from
the original trailing argument position onward, by
a new array of type {@code arrayType}, whose elements
comprise (in order) the replaced arguments.
<p>
The caller type must provides as least enough arguments,
and of the correct type, to satisfy the target's requirement for
positional arguments before the trailing array argument.
Thus, the caller must supply, at a minimum, {@code N-1} arguments,
where {@code N} is the arity of the target.
Also, there must exist conversions from the incoming arguments
to the target's arguments.
As with other uses of plain {@code invoke}, if these basic
requirements are not fulfilled, a {@code WrongMethodTypeException}
may be thrown.
<p>
In all cases, what the target eventually returns is returned unchanged by the adapter.
<p>
In the final case, it is exactly as if the target method handle were
temporarily adapted with a {@linkplain #asCollector fixed arity collector}
to the arity required by the caller type.
(As with {@code asCollector}, if the array length is zero,
a shared constant may be used instead of a new array.
If the implied call to {@code asCollector} would throw
an {@code IllegalArgumentException} or {@code WrongMethodTypeException},
the call to the variable arity adapter must throw
{@code WrongMethodTypeException}.)
<p>
The behavior of {@link #asType asType} is also specialized for
variable arity adapters, to maintain the invariant that
plain, inexact {@code invoke} is always equivalent to an {@code asType}
call to adjust the target type, followed by {@code invokeExact}.
Therefore, a variable arity adapter responds
to an {@code asType} request by building a fixed arity collector,
if and only if the adapter and requested type differ either
in arity or trailing argument type.
The resulting fixed arity collector has its type further adjusted
(if necessary) to the requested type by pairwise conversion,
as if by another application of {@code asType}.
<p>
When a method handle is obtained by executing an {@code ldc} instruction
of a {@code CONSTANT_MethodHandle} constant, and the target method is marked
as a variable arity method (with the modifier bit {@code 0x0080}),
the method handle will accept multiple arities, as if the method handle
constant were created by means of a call to {@code asVarargsCollector}.
<p>
In order to create a collecting adapter which collects a predetermined
number of arguments, and whose type reflects this predetermined number,
use {@link #asCollector asCollector} instead.
<p>
No method handle transformations produce new method handles with
variable arity, unless they are documented as doing so.
Therefore, besides {@code asVarargsCollector},
all methods in {@code MethodHandle} and {@code MethodHandles}
will return a method handle with fixed arity,
except in the cases where they are specified to return their original
operand (e.g., {@code asType} of the method handle's own type).
<p>
Calling {@code asVarargsCollector} on a method handle which is already
of variable arity will produce a method handle with the same type and behavior.
It may (or may not) return the original variable arity method handle.
<p>
Here is an example, of a list-making variable arity method handle:
<blockquote><pre>{@code
MethodHandle deepToString = publicLookup()
.findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));
MethodHandle ts1 = deepToString.asVarargsCollector(Object[].class);
assertEquals(\"[won]\",   (String) ts1.invokeExact(    new Object[]{\"won\"}));
assertEquals(\"[won]\",   (String) ts1.invoke(         new Object[]{\"won\"}));
assertEquals(\"[won]\",   (String) ts1.invoke(                      \"won\" ));
assertEquals(\"[[won]]\", (String) ts1.invoke((Object) new Object[]{\"won\"}));
// findStatic of Arrays.asList(...) produces a variable arity method handle:
MethodHandle asList = publicLookup()
.findStatic(Arrays.class, \"asList\", methodType(List.class, Object[].class));
assertEquals(methodType(List.class, Object[].class), asList.type());
assert(asList.isVarargsCollector());
assertEquals(\"[]\", asList.invoke().toString());
assertEquals(\"[1]\", asList.invoke(1).toString());
assertEquals(\"[two, too]\", asList.invoke(\"two\", \"too\").toString());
String[] argv = { \"three\", \"thee\", \"tee\" };
assertEquals(\"[three, thee, tee]\", asList.invoke(argv).toString());
assertEquals(\"[three, thee, tee]\", asList.invoke((Object[])argv).toString());
List ls = (List) asList.invoke((Object)argv);
assertEquals(1, ls.size());
assertEquals(\"[three, thee, tee]\", Arrays.toString((Object[])ls.get(0)));
}</pre></blockquote>
<p style=\"font-size:smaller;\">
<em>Discussion:</em>
These rules are designed as a dynamically-typed variation
of the Java rules for variable arity methods.
In both cases, callers to a variable arity method or method handle
can either pass zero or more positional arguments, or else pass
pre-collected arrays of any length.  Users should be aware of the
special role of the final argument, and of the effect of a
type match on that final argument, which determines whether
or not a single trailing argument is interpreted as a whole
array or a single element of an array to be collected.
Note that the dynamic type of the trailing argument has no
effect on this decision, only a comparison between the symbolic
type descriptor of the call site and the type descriptor of the method handle.)

@param arrayType often {@code Object[]}, the type of the array argument which will collect the arguments
@return a new method handle which can collect any number of trailing arguments
        into an array, before calling the original method handle
@throws NullPointerException if {@code arrayType} is a null reference
@throws IllegalArgumentException if {@code arrayType} is not an array type
        or {@code arrayType} is not assignable to this method handle's trailing parameter type
@see #asCollector
@see #isVarargsCollector
@see #asFixedArity
"
      end

      operation 7155586 "isVarargsCollector"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this method handle
supports {@linkplain #asVarargsCollector variable arity} calls.
Such method handles arise from the following sources:
<ul>
<li>a call to {@linkplain #asVarargsCollector asVarargsCollector}
<li>a call to a {@linkplain java.lang.invoke.MethodHandles.Lookup lookup method}
    which resolves to a variable arity Java method or constructor
<li>an {@code ldc} instruction of a {@code CONSTANT_MethodHandle}
    which resolves to a variable arity Java method or constructor
</ul>
@return true if this method handle accepts more than one arity of plain, inexact {@code invoke} calls
@see #asVarargsCollector
@see #asFixedArity
"
      end

      operation 7155714 "asFixedArity"
	public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a <em>fixed arity</em> method handle which is otherwise
equivalent to the current method handle.
<p>
If the current method handle is not of
{@linkplain #asVarargsCollector variable arity},
the current method handle is returned.
This is true even if the current method handle
could not be a valid input to {@code asVarargsCollector}.
<p>
Otherwise, the resulting fixed-arity method handle has the same
type and behavior of the current method handle,
except that {@link #isVarargsCollector isVarargsCollector}
will be false.
The fixed-arity method handle may (or may not) be the
a previous argument to {@code asVarargsCollector}.
<p>
Here is an example, of a list-making variable arity method handle:
<blockquote><pre>{@code
MethodHandle asListVar = publicLookup()
.findStatic(Arrays.class, \"asList\", methodType(List.class, Object[].class))
.asVarargsCollector(Object[].class);
MethodHandle asListFix = asListVar.asFixedArity();
assertEquals(\"[1]\", asListVar.invoke(1).toString());
Exception caught = null;
try { asListFix.invoke((Object)1); }
catch (Exception ex) { caught = ex; }
assert(caught instanceof ClassCastException);
assertEquals(\"[two, too]\", asListVar.invoke(\"two\", \"too\").toString());
try { asListFix.invoke(\"two\", \"too\"); }
catch (Exception ex) { caught = ex; }
assert(caught instanceof WrongMethodTypeException);
Object[] argv = { \"three\", \"thee\", \"tee\" };
assertEquals(\"[three, thee, tee]\", asListVar.invoke(argv).toString());
assertEquals(\"[three, thee, tee]\", asListFix.invoke(argv).toString());
assertEquals(1, ((List) asListVar.invoke((Object)argv)).size());
assertEquals(\"[three, thee, tee]\", asListFix.invoke((Object)argv).toString());
}</pre></blockquote>

@return a new method handle which accepts only a fixed number of arguments
@see #asVarargsCollector
@see #isVarargsCollector
"
      end

      operation 7155842 "bindTo"
	public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a value {@code x} to the first argument of a method handle, without invoking it.
The new method handle adapts, as its <i>target</i>,
the current method handle by binding it to the given argument.
The type of the bound handle will be
the same as the type of the target, except that a single leading
reference parameter will be omitted.
<p>
When called, the bound handle inserts the given value {@code x}
as a new leading argument to the target.  The other arguments are
also passed unchanged.
What the target eventually returns is returned unchanged by the bound handle.
<p>
The reference {@code x} must be convertible to the first parameter
type of the target.
<p>
(<em>Note:</em>  Because method handles are immutable, the target method handle
retains its original type and behavior.)
@param x  the value to bind to the first argument of the target
@return a new method handle which prepends the given value to the incoming
        argument list, before calling the original method handle
@throws IllegalArgumentException if the target does not have a
        leading parameter type that is a reference type
@throws ClassCastException if {@code x} cannot be converted
        to the leading parameter type of the target
@see MethodHandles#insertArguments
"
      end

      operation 7155970 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string representation of the method handle,
starting with the string {@code \"MethodHandle\"} and
ending with the string representation of the method handle's type.
In other words, this method returns a string equal to the value of:
<blockquote><pre>{@code
\"MethodHandle\" + type().toString()
}</pre></blockquote>
<p>
(<em>Note:</em>  Future releases of this API may add further information
to the string representation.
Therefore, the present syntax should not be parsed by applications.)

@return a string representation of the method handle
"
      end

      operation 7156098 "standardString"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7156226 "debugString"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a string with a several lines describing the method handle structure.
 This string would be suitable for display in an IDE debugger.
"
      end

      operation 7156354 "bindArgumentL"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "// Implementation methods.
// Sub-classes can override these default implementations.
// All these methods assume arguments are already validated.
 Other transforms to do:  convert, explicitCast, permute, drop, filter, fold, GWT, catch"
      end

      operation 7156482 "setVarargs"
	package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "member" type class_ref 945538 // MemberName
	nexceptions 1
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7156610 "viewAsType"
	package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "newType" type class_ref 944258 // MethodType
	  param inout name "strict" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7156738 "viewAsTypeChecks"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "newType" type class_ref 944258 // MethodType
	  param inout name "strict" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7156866 "internalForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Decoding
non-public"
      end

      operation 7156994 "internalMemberName"
	package return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7157122 "internalCallerClass"
	package return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7157250 "intrinsicName"
	package return_type class_ref 945794 // Intrinsic
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7157378 "withInternalMemberName"
	package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "member" type class_ref 945538 // MemberName
	  param inout name "isInvokeSpecial" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7157506 "isInvokeSpecial"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7157634 "internalValues"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7157762 "internalProperties"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7157890 "copyWith"
	abstract package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "// Method handle implementation methods.
// Sub-classes can override these default implementations.
// All these methods assume arguments are already validated.
non-public"
      end

      operation 7158018 "rebind"
	abstract package return_type class_ref 945154 // BoundMethodHandle
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Require this method handle to be a BMH, or else replace it with a \"wrapper\" BMH.
 Many transforms are implemented only for BMHs.
 @return a behaviorally equivalent BMH
"
      end

      operation 7158146 "updateForm"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newForm" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace the old lambda form of this method handle with a new one.
The new one must be functionally equivalent to the old one.
Threads may continue running the old form indefinitely,
but it is likely that the new one will be preferred for new executions.
Use with discretion.

non-public"
      end

      operation 7158274 "customize"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Craft a LambdaForm customized for this particular MethodHandle 
non-public"
      end

      attribute 1692418 "FORM_OFFSET"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 158594 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            FORM_OFFSET = UNSAFE.objectFieldOffset(MethodHandle.class.getDeclaredField(\"form\"));
        } catch (ReflectiveOperationException ex) {
            throw newInternalError(ex);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 944514 "MethodHandleInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A symbolic reference obtained by cracking a direct method handle
into its consitutent symbolic parts.
To crack a direct method handle, call {@link Lookup#revealDirect Lookup.revealDirect}.
<h1><a name=\"directmh\"></a>Direct Method Handles</h1>
A <em>direct method handle</em> represents a method, constructor, or field without
any intervening argument bindings or other transformations.
The method, constructor, or field referred to by a direct method handle is called
its <em>underlying member</em>.
Direct method handles may be obtained in any of these ways:
<ul>
<li>By executing an {@code ldc} instruction on a {@code CONSTANT_MethodHandle} constant.
    (See the Java Virtual Machine Specification, sections 4.4.8 and 5.4.3.)
<li>By calling one of the <a href=\"MethodHandles.Lookup.html#lookups\">Lookup Factory Methods</a>,
    such as {@link Lookup#findVirtual Lookup.findVirtual},
    to resolve a symbolic reference into a method handle.
    A symbolic reference consists of a class, name string, and type.
<li>By calling the factory method {@link Lookup#unreflect Lookup.unreflect}
    or {@link Lookup#unreflectSpecial Lookup.unreflectSpecial}
    to convert a {@link Method} into a method handle.
<li>By calling the factory method {@link Lookup#unreflectConstructor Lookup.unreflectConstructor}
    to convert a {@link Constructor} into a method handle.
<li>By calling the factory method {@link Lookup#unreflectGetter Lookup.unreflectGetter}
    or {@link Lookup#unreflectSetter Lookup.unreflectSetter}
    to convert a {@link Field} into a method handle.
</ul>

<h1>Restrictions on Cracking</h1>
Given a suitable {@code Lookup} object, it is possible to crack any direct method handle
to recover a symbolic reference for the underlying method, constructor, or field.
Cracking must be done via a {@code Lookup} object equivalent to that which created
the target method handle, or which has enough access permissions to recreate
an equivalent method handle.
<p>
If the underlying method is <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a>,
the direct method handle will have been \"bound\" to a particular caller class, the
{@linkplain java.lang.invoke.MethodHandles.Lookup#lookupClass() lookup class}
of the lookup object used to create it.
Cracking this method handle with a different lookup class will fail
even if the underlying method is public (like {@code Class.forName}).
<p>
The requirement of lookup object matching provides a \"fast fail\" behavior
for programs which may otherwise trust erroneous revelation of a method
handle with symbolic information (or caller binding) from an unexpected scope.
Use {@link java.lang.invoke.MethodHandles#reflectAs} to override this limitation.

<h1><a name=\"refkinds\"></a>Reference kinds</h1>
The <a href=\"MethodHandles.Lookup.html#lookups\">Lookup Factory Methods</a>
correspond to all major use cases for methods, constructors, and fields.
These use cases may be distinguished using small integers as follows:
<table border=1 cellpadding=5 summary=\"reference kinds\">
<tr><th>reference kind</th><th>descriptive name</th><th>scope</th><th>member</th><th>behavior</th></tr>
<tr>
    <td>{@code 1}</td><td>{@code REF_getField}</td><td>{@code class}</td>
    <td>{@code FT f;}</td><td>{@code (T) this.f;}</td>
</tr>
<tr>
    <td>{@code 2}</td><td>{@code REF_getStatic}</td><td>{@code class} or {@code interface}</td>
    <td>{@code static}<br>{@code FT f;}</td><td>{@code (T) C.f;}</td>
</tr>
<tr>
    <td>{@code 3}</td><td>{@code REF_putField}</td><td>{@code class}</td>
    <td>{@code FT f;}</td><td>{@code this.f = x;}</td>
</tr>
<tr>
    <td>{@code 4}</td><td>{@code REF_putStatic}</td><td>{@code class}</td>
    <td>{@code static}<br>{@code FT f;}</td><td>{@code C.f = arg;}</td>
</tr>
<tr>
    <td>{@code 5}</td><td>{@code REF_invokeVirtual}</td><td>{@code class}</td>
    <td>{@code T m(A*);}</td><td>{@code (T) this.m(arg*);}</td>
</tr>
<tr>
    <td>{@code 6}</td><td>{@code REF_invokeStatic}</td><td>{@code class} or {@code interface}</td>
    <td>{@code static}<br>{@code T m(A*);}</td><td>{@code (T) C.m(arg*);}</td>
</tr>
<tr>
    <td>{@code 7}</td><td>{@code REF_invokeSpecial}</td><td>{@code class} or {@code interface}</td>
    <td>{@code T m(A*);}</td><td>{@code (T) super.m(arg*);}</td>
</tr>
<tr>
    <td>{@code 8}</td><td>{@code REF_newInvokeSpecial}</td><td>{@code class}</td>
    <td>{@code C(A*);}</td><td>{@code new C(arg*);}</td>
</tr>
<tr>
    <td>{@code 9}</td><td>{@code REF_invokeInterface}</td><td>{@code interface}</td>
    <td>{@code T m(A*);}</td><td>{@code (T) this.m(arg*);}</td>
</tr>
</table>
@since 1.8
"
      attribute 1696386 "REF_getField"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_getField"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      attribute 1696514 "REF_getStatic"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_getStatic"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      attribute 1696642 "REF_putField"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_putField"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      attribute 1696770 "REF_putStatic"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_putStatic"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      attribute 1696898 "REF_invokeVirtual"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_invokeVirtual"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      attribute 1697026 "REF_invokeStatic"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_invokeStatic"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      attribute 1697154 "REF_invokeSpecial"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_invokeSpecial"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      attribute 1697282 "REF_newInvokeSpecial"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_newInvokeSpecial"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      attribute 1697410 "REF_invokeInterface"
	class_attribute const_attribute public explicit_type "int"
	init_value " Constants.REF_invokeInterface"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A direct method handle reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.

"
      end

      operation 7178370 "getReferenceKind"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the reference kind of the cracked method handle, which in turn
determines whether the method handle's underlying member was a constructor, method, or field.
See the <a href=\"MethodHandleInfo.html#refkinds\">table above</a> for definitions.
@return the integer code for the kind of reference used to access the underlying member
"
      end

      operation 7178498 "getDeclaringClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the class in which the cracked method handle's underlying member was defined.
@return the declaring class of the underlying member
"
      end

      operation 7178626 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the cracked method handle's underlying member.
This is {@code \"<init>\"} if the underlying member was a constructor,
else it is a simple method name or field name.
@return the simple name of the underlying member
"
      end

      operation 7178754 "getMethodType"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the nominal type of the cracked symbolic reference, expressed as a method type.
If the reference is to a constructor, the return type will be {@code void}.
If it is to a non-static method, the method type will not mention the {@code this} parameter.
If it is to a field and the requested access is to read the field,
the method type will have no parameters and return the field type.
If it is to a field and the requested access is to write the field,
the method type will have one parameter of the field type and return {@code void}.
<p>
Note that original direct method handle may include a leading {@code this} parameter,
or (in the case of a constructor) will replace the {@code void} return type
with the constructed class.
The nominal type does not include any {@code this} parameter,
and (in the case of a constructor) will return {@code void}.
@return the type of the underlying member, expressed as a method type
"
      end

      operation 7178882 "reflectAs"
	public explicit_return_type "T"
	nparams 2
	  param inout name "expected" type class_ref 130818 // Class
	  param inout name "lookup" type class_ref 944770 // Lookup
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Member> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility methods.
 NOTE: class/name/type and reference kind constitute a symbolic reference
 member and modifiers are an add-on, derived from Core Reflection (or the equivalent)

Reflects the underlying member as a method, constructor, or field object.
If the underlying member is public, it is reflected as if by
{@code getMethod}, {@code getConstructor}, or {@code getField}.
Otherwise, it is reflected as if by
{@code getDeclaredMethod}, {@code getDeclaredConstructor}, or {@code getDeclaredField}.
The underlying member must be accessible to the given lookup object.
@param <T> the desired type of the result, either {@link Member} or a subtype
@param expected a class object representing the desired result type {@code T}
@param lookup the lookup object that created this MethodHandleInfo, or one with equivalent access privileges
@return a reference to the method, constructor, or field object
@exception ClassCastException if the member is not of the expected type
@exception NullPointerException if either argument is {@code null}
@exception IllegalArgumentException if the underlying member is not accessible to the given lookup object
"
      end

      operation 7179010 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the access modifiers of the underlying member.
@return the Java language modifiers for underlying member,
        or -1 if the member cannot be accessed
@see Modifier
@see #reflectAs
"
      end

      operation 7179138 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the underlying member was a variable arity method or constructor.
Such members are represented by method handles that are varargs collectors.
@implSpec
This produces a result equivalent to:
<pre>{@code
    getReferenceKind() >= REF_invokeVirtual && Modifier.isTransient(getModifiers())
}</pre>


@return {@code true} if and only if the underlying member was declared with variable arity.

 spelling derived from java.lang.reflect.Executable, not MethodHandle.isVarargsCollector"
      end

      operation 7179266 "referenceKindToString"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "referenceKind" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the descriptive name of the given reference kind,
as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.
The conventional prefix \"REF_\" is omitted.
@param referenceKind an integer code for a kind of reference used to access a class member
@return a mixed-case string such as {@code \"getField\"}
@exception IllegalArgumentException if the argument is not a valid
           <a href=\"MethodHandleInfo.html#refkinds\">reference kind number</a>
"
      end

      operation 7179394 "toString"
	class_operation public return_type class_ref 128130 // String
	nparams 4
	  param in name "kind" explicit_type "int"
	  param inout name "defc" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation for a {@code MethodHandleInfo},
given the four parts of its symbolic reference.
This is defined to be of the form {@code \"RK C.N:MT\"}, where {@code RK} is the
{@linkplain #referenceKindToString reference kind string} for {@code kind},
{@code C} is the {@linkplain java.lang.Class#getName name} of {@code defc}
{@code N} is the {@code name}, and
{@code MT} is the {@code type}.
These four values may be obtained from the
{@linkplain #getReferenceKind reference kind},
{@linkplain #getDeclaringClass declaring class},
{@linkplain #getName member name},
and {@linkplain #getMethodType method type}
of a {@code MethodHandleInfo} object.

@implSpec
This produces a result equivalent to:
<pre>{@code
    String.format(\"%s %s.%s:%s\", referenceKindToString(kind), defc.getName(), name, type)
}</pre>

@param kind the {@linkplain #getReferenceKind reference kind} part of the symbolic reference
@param defc the {@linkplain #getDeclaringClass declaring class} part of the symbolic reference
@param name the {@linkplain #getName member name} part of the symbolic reference
@param type the {@linkplain #getMethodType method type} part of the symbolic reference
@return a string of the form {@code \"RK C.N:MT\"}
@exception IllegalArgumentException if the first argument is not a valid
           <a href=\"MethodHandleInfo.html#refkinds\">reference kind number</a>
@exception NullPointerException if any reference argument is {@code null}
"
      end
    end

    class 944642 "MethodHandles"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class consists exclusively of static methods that operate on or return
method handles. They fall into several categories:
<ul>
<li>Lookup methods which help create method handles for methods and fields.
<li>Combinator methods, which combine or transform pre-existing method handles into new ones.
<li>Other factory methods to create method handles that emulate other common JVM operations or control flow patterns.
</ul>
<p>
@author John Rose, JSR 292 EG
@since 1.7
"
      class 944770 "Lookup"
	visibility public 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3205762 // lookupClass (<unidirectional association>)
	  relation 3205762 --->
	    a role_name "lookupClass" const_relation private
	      comment " The class on behalf of whom the lookup is being performed. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3205762 // lookupClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	attribute 1722242 "allowedModes"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The allowed sorts of members which may be looked up (PUBLIC, etc.). 
"
	end

	attribute 1722370 "PUBLIC"
	  class_attribute const_attribute public explicit_type "int"
	  init_value " Modifier.PUBLIC"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " A single-bit mask representing {@code public} access,
 which may contribute to the result of {@link #lookupModes lookupModes}.
 The value, {@code 0x01}, happens to be the same as the value of the
 {@code public} {@linkplain java.lang.reflect.Modifier#PUBLIC modifier bit}.

"
	end

	attribute 1722498 "PRIVATE"
	  class_attribute const_attribute public explicit_type "int"
	  init_value " Modifier.PRIVATE"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " A single-bit mask representing {@code private} access,
 which may contribute to the result of {@link #lookupModes lookupModes}.
 The value, {@code 0x02}, happens to be the same as the value of the
 {@code private} {@linkplain java.lang.reflect.Modifier#PRIVATE modifier bit}.

"
	end

	attribute 1722626 "PROTECTED"
	  class_attribute const_attribute public explicit_type "int"
	  init_value " Modifier.PROTECTED"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " A single-bit mask representing {@code protected} access,
 which may contribute to the result of {@link #lookupModes lookupModes}.
 The value, {@code 0x04}, happens to be the same as the value of the
 {@code protected} {@linkplain java.lang.reflect.Modifier#PROTECTED modifier bit}.

"
	end

	attribute 1722754 "PACKAGE"
	  class_attribute const_attribute public explicit_type "int"
	  init_value " Modifier.STATIC"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " A single-bit mask representing {@code package} access (default access),
 which may contribute to the result of {@link #lookupModes lookupModes}.
 The value is {@code 0x08}, which does not correspond meaningfully to
 any particular {@linkplain java.lang.reflect.Modifier modifier bit}.

"
	end

	attribute 1722882 "ALL_MODES"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " (PUBLIC | PRIVATE | PROTECTED | PACKAGE)"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1723010 "TRUSTED"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " -1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7266306 "fixmods"
	  class_operation private explicit_return_type "int"
	  nparams 1
	    param in name "mods" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7266434 "lookupClass"
	  public return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Tells which class is performing the lookup.  It is this class against
 which checks are performed for visibility and access permissions.
 <p>
 The class implies a maximum level of access permission,
 but the permissions may be additionally limited by the bitmask
 {@link #lookupModes lookupModes}, which controls whether non-public members
 can be accessed.
 @return the lookup class, on behalf of which this lookup object finds members
"
	end

	operation 7266562 "lookupClassOrNull"
	  private return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " This is just for calling out to MethodHandleImpl."
	end

	operation 7266690 "lookupModes"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Tells which access-protection classes of members this lookup object can produce.
 The result is a bit-mask of the bits
 {@linkplain #PUBLIC PUBLIC (0x01)},
 {@linkplain #PRIVATE PRIVATE (0x02)},
 {@linkplain #PROTECTED PROTECTED (0x04)},
 and {@linkplain #PACKAGE PACKAGE (0x08)}.
 <p>
 A freshly-created lookup object
 on the {@linkplain java.lang.invoke.MethodHandles#lookup() caller's class}
 has all possible bits set, since the caller class can access all its own members.
 A lookup object on a new lookup class
 {@linkplain java.lang.invoke.MethodHandles.Lookup#in created from a previous lookup object}
 may have some mode bits set to zero.
 The purpose of this is to restrict access via the new lookup object,
 so that it can access only names which can be reached by the original
 lookup object, and also by the new lookup class.
 @return the lookup modes, which limit the kinds of access performed by this lookup object
"
	end

	operation 7266818 "Lookup"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Embody the current class (the lookupClass) as a lookup class
for method handle creation.
Must be called by from a method in this package,
which in turn is called by a method not in this package.
"
	end

	operation 7266946 "Lookup"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "lookupClass" type class_ref 130818 // Class
	    param in name "allowedModes" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7267074 "in"
	  public return_type class_ref 944770 // Lookup
	  nparams 1
	    param inout name "requestedLookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a lookup on the specified new lookup class.
The resulting object will report the specified
class as its own {@link #lookupClass lookupClass}.
<p>
However, the resulting {@code Lookup} object is guaranteed
to have no more access capabilities than the original.
In particular, access capabilities can be lost as follows:<ul>
<li>If the new lookup class differs from the old one,
protected members will not be accessible by virtue of inheritance.
(Protected members may continue to be accessible because of package sharing.)
<li>If the new lookup class is in a different package
than the old one, protected and default (package) members will not be accessible.
<li>If the new lookup class is not within the same package member
as the old one, private members will not be accessible.
<li>If the new lookup class is not accessible to the old lookup class,
then no members, not even public members, will be accessible.
(In all other cases, public members will continue to be accessible.)
</ul>

@param requestedLookupClass the desired lookup class for the new lookup object
@return a lookup object which reports the desired lookup class
@throws NullPointerException if the argument is null
"
	end

	extra_member 162050 "initialization"
	  
	  cpp "" ""
	  java "  static { IMPL_NAMES.getClass(); }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	classrelation 3205890 // PUBLIC_LOOKUP (<unidirectional association>)
	  relation 3205890 --->
	    a role_name "PUBLIC_LOOKUP" init_value " new Lookup(Object.class, PUBLIC)" class_relation const_relation package
	      comment " Version of lookup which is trusted minimally.
 It can only be used to create method handles to
 publicly accessible members.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3205890 // PUBLIC_LOOKUP (<unidirectional association>)
	    b parent class_ref 944770 // Lookup
	end

	classrelation 3206018 // IMPL_LOOKUP (<unidirectional association>)
	  relation 3206018 --->
	    a role_name "IMPL_LOOKUP" init_value " new Lookup(Object.class, TRUSTED)" class_relation const_relation package
	      comment " Package-private version of lookup which is trusted. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3206018 // IMPL_LOOKUP (<unidirectional association>)
	    b parent class_ref 944770 // Lookup
	end

	operation 7267202 "checkUnprivilegedlookupClass"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "lookupClass" type class_ref 130818 // Class
	    param in name "allowedModes" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7267330 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Displays the name of the class from which lookups are to be made.
(The name is the one reported by {@link java.lang.Class#getName() Class.getName}.)
If there are restrictions on the access permitted to this lookup,
this is indicated by adding a suffix to the class name, consisting
of a slash and a keyword.  The keyword represents the strongest
allowed access, and is chosen as follows:
<ul>
<li>If no access is allowed, the suffix is \"/noaccess\".
<li>If only public access is allowed, the suffix is \"/public\".
<li>If only public and package access are allowed, the suffix is \"/package\".
<li>If only public, package, and private access are allowed, the suffix is \"/private\".
</ul>
If none of the above cases apply, it is the case that full
access (public, package, private, and protected) is allowed.
In this case, no suffix is added.
This is true only of an object obtained originally from
{@link java.lang.invoke.MethodHandles#lookup MethodHandles.lookup}.
Objects created by {@link java.lang.invoke.MethodHandles.Lookup#in Lookup.in}
always have restricted access, and will display a suffix.
<p>
(It may seem strange that protected access should be
stronger than private access.  Viewed independently from
package access, protected access is the first to be lost,
because it requires a direct subclass relationship between
caller and callee.)
@see #in
"
	end

	operation 7267458 "findStatic"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 944258 // MethodType
	  nexceptions 2
	    exception class_ref 742530 // NoSuchMethodException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle for a static method.
The type of the method handle will be that of the method.
(Since static methods do not take receivers, there is no
additional receiver argument inserted into the method handle type,
as there would be with {@link #findVirtual findVirtual} or {@link #findSpecial findSpecial}.)
The method and all its argument types must be accessible to the lookup object.
<p>
The returned method handle will have
{@linkplain MethodHandle#asVarargsCollector variable arity} if and only if
the method's variable arity modifier bit ({@code 0x0080}) is set.
<p>
If the returned method handle is invoked, the method's class will
be initialized, if it has not already been initialized.
<p><b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle MH_asList = publicLookup().findStatic(Arrays.class,
\"asList\", methodType(List.class, Object[].class));
assertEquals(\"[x, y]\", MH_asList.invoke(\"x\", \"y\").toString());
}</pre></blockquote>
@param refc the class from which the method is accessed
@param name the name of the method
@param type the type of the method
@return the desired method handle
@throws NoSuchMethodException if the method does not exist
@throws IllegalAccessException if access checking fails,
                               or if the method is not {@code static},
                               or if the method's variable arity modifier bit
                               is set and {@code asVarargsCollector} fails
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
"
	end

	operation 7267586 "findVirtual"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 944258 // MethodType
	  nexceptions 2
	    exception class_ref 742530 // NoSuchMethodException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle for a virtual method.
The type of the method handle will be that of the method,
with the receiver type (usually {@code refc}) prepended.
The method and all its argument types must be accessible to the lookup object.
<p>
When called, the handle will treat the first argument as a receiver
and dispatch on the receiver's type to determine which method
implementation to enter.
(The dispatching action is identical with that performed by an
{@code invokevirtual} or {@code invokeinterface} instruction.)
<p>
The first argument will be of type {@code refc} if the lookup
class has full privileges to access the member.  Otherwise
the member must be {@code protected} and the first argument
will be restricted in type to the lookup class.
<p>
The returned method handle will have
{@linkplain MethodHandle#asVarargsCollector variable arity} if and only if
the method's variable arity modifier bit ({@code 0x0080}) is set.
<p>
Because of the general <a href=\"MethodHandles.Lookup.html#equiv\">equivalence</a> between {@code invokevirtual}
instructions and method handles produced by {@code findVirtual},
if the class is {@code MethodHandle} and the name string is
{@code invokeExact} or {@code invoke}, the resulting
method handle is equivalent to one produced by
{@link java.lang.invoke.MethodHandles#exactInvoker MethodHandles.exactInvoker} or
{@link java.lang.invoke.MethodHandles#invoker MethodHandles.invoker}
with the same {@code type} argument.

<b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle MH_concat = publicLookup().findVirtual(String.class,
\"concat\", methodType(String.class, String.class));
MethodHandle MH_hashCode = publicLookup().findVirtual(Object.class,
\"hashCode\", methodType(int.class));
MethodHandle MH_hashCode_String = publicLookup().findVirtual(String.class,
\"hashCode\", methodType(int.class));
assertEquals(\"xy\", (String) MH_concat.invokeExact(\"x\", \"y\"));
assertEquals(\"xy\".hashCode(), (int) MH_hashCode.invokeExact((Object)\"xy\"));
assertEquals(\"xy\".hashCode(), (int) MH_hashCode_String.invokeExact(\"xy\"));
// interface method:
MethodHandle MH_subSequence = publicLookup().findVirtual(CharSequence.class,
\"subSequence\", methodType(CharSequence.class, int.class, int.class));
assertEquals(\"def\", MH_subSequence.invoke(\"abcdefghi\", 3, 6).toString());
// constructor \"internal method\" must be accessed differently:
MethodType MT_newString = methodType(void.class); //()V for new String()
try { assertEquals(\"impossible\", lookup()
.findVirtual(String.class, \"<init>\", MT_newString));
} catch (NoSuchMethodException ex) { } // OK
MethodHandle MH_newString = publicLookup()
.findConstructor(String.class, MT_newString);
assertEquals(\"\", (String) MH_newString.invokeExact());
}</pre></blockquote>

@param refc the class or interface from which the method is accessed
@param name the name of the method
@param type the type of the method, with the receiver argument omitted
@return the desired method handle
@throws NoSuchMethodException if the method does not exist
@throws IllegalAccessException if access checking fails,
                               or if the method is {@code static}
                               or if the method's variable arity modifier bit
                               is set and {@code asVarargsCollector} fails
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
"
	end

	operation 7267714 "findVirtualForMH"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7267842 "findConstructor"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "type" type class_ref 944258 // MethodType
	  nexceptions 2
	    exception class_ref 742530 // NoSuchMethodException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle which creates an object and initializes it, using
the constructor of the specified type.
The parameter types of the method handle will be those of the constructor,
while the return type will be a reference to the constructor's class.
The constructor and all its argument types must be accessible to the lookup object.
<p>
The requested type must have a return type of {@code void}.
(This is consistent with the JVM's treatment of constructor type descriptors.)
<p>
The returned method handle will have
{@linkplain MethodHandle#asVarargsCollector variable arity} if and only if
the constructor's variable arity modifier bit ({@code 0x0080}) is set.
<p>
If the returned method handle is invoked, the constructor's class will
be initialized, if it has not already been initialized.
<p><b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle MH_newArrayList = publicLookup().findConstructor(
ArrayList.class, methodType(void.class, Collection.class));
Collection orig = Arrays.asList(\"x\", \"y\");
Collection copy = (ArrayList) MH_newArrayList.invokeExact(orig);
assert(orig != copy);
assertEquals(orig, copy);
// a variable-arity constructor:
MethodHandle MH_newProcessBuilder = publicLookup().findConstructor(
ProcessBuilder.class, methodType(void.class, String[].class));
ProcessBuilder pb = (ProcessBuilder)
MH_newProcessBuilder.invoke(\"x\", \"y\", \"z\");
assertEquals(\"[x, y, z]\", pb.command().toString());
}</pre></blockquote>
@param refc the class or interface from which the method is accessed
@param type the type of the method, with the receiver argument omitted, and a void return type
@return the desired method handle
@throws NoSuchMethodException if the constructor does not exist
@throws IllegalAccessException if access checking fails
                               or if the method's variable arity modifier bit
                               is set and {@code asVarargsCollector} fails
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
"
	end

	operation 7267970 "findSpecial"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 4
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 944258 // MethodType
	    param inout name "specialCaller" type class_ref 130818 // Class
	  nexceptions 2
	    exception class_ref 742530 // NoSuchMethodException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces an early-bound method handle for a virtual method.
It will bypass checks for overriding methods on the receiver,
<a href=\"MethodHandles.Lookup.html#equiv\">as if called</a> from an {@code invokespecial}
instruction from within the explicitly specified {@code specialCaller}.
The type of the method handle will be that of the method,
with a suitably restricted receiver type prepended.
(The receiver type will be {@code specialCaller} or a subtype.)
The method and all its argument types must be accessible
to the lookup object.
<p>
Before method resolution,
if the explicitly specified caller class is not identical with the
lookup class, or if this lookup object does not have
<a href=\"MethodHandles.Lookup.html#privacc\">private access</a>
privileges, the access fails.
<p>
The returned method handle will have
{@linkplain MethodHandle#asVarargsCollector variable arity} if and only if
the method's variable arity modifier bit ({@code 0x0080}) is set.
<p style=\"font-size:smaller;\">
<em>(Note:  JVM internal methods named {@code \"<init>\"} are not visible to this API,
even though the {@code invokespecial} instruction can refer to them
in special circumstances.  Use {@link #findConstructor findConstructor}
to access instance initialization methods in a safe manner.)</em>
<p><b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
static class Listie extends ArrayList {
public String toString() { return \"[wee Listie]\"; }
static Lookup lookup() { return MethodHandles.lookup(); }
}
...
// no access to constructor via invokeSpecial:
MethodHandle MH_newListie = Listie.lookup()
.findConstructor(Listie.class, methodType(void.class));
Listie l = (Listie) MH_newListie.invokeExact();
try { assertEquals(\"impossible\", Listie.lookup().findSpecial(
Listie.class, \"<init>\", methodType(void.class), Listie.class));
} catch (NoSuchMethodException ex) { } // OK
// access to super and self methods via invokeSpecial:
MethodHandle MH_super = Listie.lookup().findSpecial(
ArrayList.class, \"toString\" , methodType(String.class), Listie.class);
MethodHandle MH_this = Listie.lookup().findSpecial(
Listie.class, \"toString\" , methodType(String.class), Listie.class);
MethodHandle MH_duper = Listie.lookup().findSpecial(
Object.class, \"toString\" , methodType(String.class), Listie.class);
assertEquals(\"[]\", (String) MH_super.invokeExact(l));
assertEquals(\"\"+l, (String) MH_this.invokeExact(l));
assertEquals(\"[]\", (String) MH_duper.invokeExact(l)); // ArrayList method
try { assertEquals(\"inaccessible\", Listie.lookup().findSpecial(
String.class, \"toString\", methodType(String.class), Listie.class));
} catch (IllegalAccessException ex) { } // OK
Listie subl = new Listie() { public String toString() { return \"[subclass]\"; } };
assertEquals(\"\"+l, (String) MH_this.invokeExact(subl)); // Listie method
}</pre></blockquote>

@param refc the class or interface from which the method is accessed
@param name the name of the method (which must not be \"&lt;init&gt;\")
@param type the type of the method, with the receiver argument omitted
@param specialCaller the proposed calling class to perform the {@code invokespecial}
@return the desired method handle
@throws NoSuchMethodException if the method does not exist
@throws IllegalAccessException if access checking fails
                               or if the method's variable arity modifier bit
                               is set and {@code asVarargsCollector} fails
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
"
	end

	operation 7268098 "findGetter"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  nexceptions 2
	    exception class_ref 189954 // NoSuchFieldException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle giving read access to a non-static field.
The type of the method handle will have a return type of the field's
value type.
The method handle's single argument will be the instance containing
the field.
Access checking is performed immediately on behalf of the lookup class.
@param refc the class or interface from which the method is accessed
@param name the field's name
@param type the field's type
@return a method handle which can load values from the field
@throws NoSuchFieldException if the field does not exist
@throws IllegalAccessException if access checking fails, or if the field is {@code static}
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
"
	end

	operation 7268226 "findSetter"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  nexceptions 2
	    exception class_ref 189954 // NoSuchFieldException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle giving write access to a non-static field.
The type of the method handle will have a void return type.
The method handle will take two arguments, the instance containing
the field, and the value to be stored.
The second argument will be of the field's value type.
Access checking is performed immediately on behalf of the lookup class.
@param refc the class or interface from which the method is accessed
@param name the field's name
@param type the field's type
@return a method handle which can store values into the field
@throws NoSuchFieldException if the field does not exist
@throws IllegalAccessException if access checking fails, or if the field is {@code static}
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
"
	end

	operation 7268354 "findStaticGetter"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  nexceptions 2
	    exception class_ref 189954 // NoSuchFieldException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle giving read access to a static field.
The type of the method handle will have a return type of the field's
value type.
The method handle will take no arguments.
Access checking is performed immediately on behalf of the lookup class.
<p>
If the returned method handle is invoked, the field's class will
be initialized, if it has not already been initialized.
@param refc the class or interface from which the method is accessed
@param name the field's name
@param type the field's type
@return a method handle which can load values from the field
@throws NoSuchFieldException if the field does not exist
@throws IllegalAccessException if access checking fails, or if the field is not {@code static}
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
"
	end

	operation 7268482 "findStaticSetter"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  nexceptions 2
	    exception class_ref 189954 // NoSuchFieldException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle giving write access to a static field.
The type of the method handle will have a void return type.
The method handle will take a single
argument, of the field's value type, the value to be stored.
Access checking is performed immediately on behalf of the lookup class.
<p>
If the returned method handle is invoked, the field's class will
be initialized, if it has not already been initialized.
@param refc the class or interface from which the method is accessed
@param name the field's name
@param type the field's type
@return a method handle which can store values into the field
@throws NoSuchFieldException if the field does not exist
@throws IllegalAccessException if access checking fails, or if the field is not {@code static}
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
"
	end

	operation 7268610 "bind"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "receiver" type class_ref 129538 // Object
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 944258 // MethodType
	  nexceptions 2
	    exception class_ref 742530 // NoSuchMethodException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces an early-bound method handle for a non-static method.
The receiver must have a supertype {@code defc} in which a method
of the given name and type is accessible to the lookup class.
The method and all its argument types must be accessible to the lookup object.
The type of the method handle will be that of the method,
without any insertion of an additional receiver parameter.
The given receiver will be bound into the method handle,
so that every call to the method handle will invoke the
requested method on the given receiver.
<p>
The returned method handle will have
{@linkplain MethodHandle#asVarargsCollector variable arity} if and only if
the method's variable arity modifier bit ({@code 0x0080}) is set
<em>and</em> the trailing array argument is not the only argument.
(If the trailing array argument is the only argument,
the given receiver value will be bound to it.)
<p>
This is equivalent to the following code:
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle mh0 = lookup().findVirtual(defc, name, type);
MethodHandle mh1 = mh0.bindTo(receiver);
MethodType mt1 = mh1.type();
if (mh0.isVarargsCollector())
mh1 = mh1.asVarargsCollector(mt1.parameterType(mt1.parameterCount()-1));
return mh1;
}</pre></blockquote>
where {@code defc} is either {@code receiver.getClass()} or a super
type of that class, in which the requested method is accessible
to the lookup class.
(Note that {@code bindTo} does not preserve variable arity.)
@param receiver the object from which the method is accessed
@param name the name of the method
@param type the type of the method, with the receiver argument omitted
@return the desired method handle
@throws NoSuchMethodException if the method does not exist
@throws IllegalAccessException if access checking fails
                               or if the method's variable arity modifier bit
                               is set and {@code asVarargsCollector} fails
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws NullPointerException if any argument is null
@see MethodHandle#bindTo
@see #findVirtual
"
	end

	operation 7268738 "unreflect"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "m" type class_ref 137858 // Method
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Makes a <a href=\"MethodHandleInfo.html#directmh\">direct method handle</a>
to <i>m</i>, if the lookup class has permission.
If <i>m</i> is non-static, the receiver argument is treated as an initial argument.
If <i>m</i> is virtual, overriding is respected on every call.
Unlike the Core Reflection API, exceptions are <em>not</em> wrapped.
The type of the method handle will be that of the method,
with the receiver type prepended (but only if it is non-static).
If the method's {@code accessible} flag is not set,
access checking is performed immediately on behalf of the lookup class.
If <i>m</i> is not public, do not share the resulting handle with untrusted parties.
<p>
The returned method handle will have
{@linkplain MethodHandle#asVarargsCollector variable arity} if and only if
the method's variable arity modifier bit ({@code 0x0080}) is set.
<p>
If <i>m</i> is static, and
if the returned method handle is invoked, the method's class will
be initialized, if it has not already been initialized.
@param m the reflected method
@return a method handle which can invoke the reflected method
@throws IllegalAccessException if access checking fails
                               or if the method's variable arity modifier bit
                               is set and {@code asVarargsCollector} fails
@throws NullPointerException if the argument is null
"
	end

	operation 7268866 "unreflectForMH"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "m" type class_ref 137858 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7268994 "unreflectSpecial"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "m" type class_ref 137858 // Method
	    param inout name "specialCaller" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle for a reflected method.
It will bypass checks for overriding methods on the receiver,
<a href=\"MethodHandles.Lookup.html#equiv\">as if called</a> from an {@code invokespecial}
instruction from within the explicitly specified {@code specialCaller}.
The type of the method handle will be that of the method,
with a suitably restricted receiver type prepended.
(The receiver type will be {@code specialCaller} or a subtype.)
If the method's {@code accessible} flag is not set,
access checking is performed immediately on behalf of the lookup class,
as if {@code invokespecial} instruction were being linked.
<p>
Before method resolution,
if the explicitly specified caller class is not identical with the
lookup class, or if this lookup object does not have
<a href=\"MethodHandles.Lookup.html#privacc\">private access</a>
privileges, the access fails.
<p>
The returned method handle will have
{@linkplain MethodHandle#asVarargsCollector variable arity} if and only if
the method's variable arity modifier bit ({@code 0x0080}) is set.
@param m the reflected method
@param specialCaller the class nominally calling the method
@return a method handle which can invoke the reflected method
@throws IllegalAccessException if access checking fails
                               or if the method's variable arity modifier bit
                               is set and {@code asVarargsCollector} fails
@throws NullPointerException if any argument is null
"
	end

	operation 7269122 "unreflectConstructor"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "c" type class_ref 189186 // Constructor
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle for a reflected constructor.
The type of the method handle will be that of the constructor,
with the return type changed to the declaring class.
The method handle will perform a {@code newInstance} operation,
creating a new instance of the constructor's class on the
arguments passed to the method handle.
<p>
If the constructor's {@code accessible} flag is not set,
access checking is performed immediately on behalf of the lookup class.
<p>
The returned method handle will have
{@linkplain MethodHandle#asVarargsCollector variable arity} if and only if
the constructor's variable arity modifier bit ({@code 0x0080}) is set.
<p>
If the returned method handle is invoked, the constructor's class will
be initialized, if it has not already been initialized.
@param c the reflected constructor
@return a method handle which can invoke the reflected constructor
@throws IllegalAccessException if access checking fails
                               or if the method's variable arity modifier bit
                               is set and {@code asVarargsCollector} fails
@throws NullPointerException if the argument is null
"
	end

	operation 7269250 "unreflectGetter"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "f" type class_ref 189698 // Field
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle giving read access to a reflected field.
The type of the method handle will have a return type of the field's
value type.
If the field is static, the method handle will take no arguments.
Otherwise, its single argument will be the instance containing
the field.
If the field's {@code accessible} flag is not set,
access checking is performed immediately on behalf of the lookup class.
<p>
If the field is static, and
if the returned method handle is invoked, the field's class will
be initialized, if it has not already been initialized.
@param f the reflected field
@return a method handle which can load values from the reflected field
@throws IllegalAccessException if access checking fails
@throws NullPointerException if the argument is null
"
	end

	operation 7269378 "unreflectField"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "f" type class_ref 189698 // Field
	    param inout name "isSetter" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7269506 "unreflectSetter"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "f" type class_ref 189698 // Field
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Produces a method handle giving write access to a reflected field.
The type of the method handle will have a void return type.
If the field is static, the method handle will take a single
argument, of the field's value type, the value to be stored.
Otherwise, the two arguments will be the instance containing
the field, and the value to be stored.
If the field's {@code accessible} flag is not set,
access checking is performed immediately on behalf of the lookup class.
<p>
If the field is static, and
if the returned method handle is invoked, the field's class will
be initialized, if it has not already been initialized.
@param f the reflected field
@return a method handle which can store values into the reflected field
@throws IllegalAccessException if access checking fails
@throws NullPointerException if the argument is null
"
	end

	operation 7269634 "revealDirect"
	  public return_type class_ref 944514 // MethodHandleInfo
	  nparams 1
	    param inout name "target" type class_ref 944386 // MethodHandle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Cracks a <a href=\"MethodHandleInfo.html#directmh\">direct method handle</a>
created by this lookup object or a similar one.
Security and access checks are performed to ensure that this lookup object
is capable of reproducing the target method handle.
This means that the cracking may fail if target is a direct method handle
but was created by an unrelated lookup object.
This can happen if the method handle is <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a>
and was created by a lookup object for a different class.
@param target a direct method handle to crack into symbolic reference components
@return a symbolic reference which can be used to reconstruct this method handle from this lookup object
@exception SecurityException if a security manager is present and it
                             <a href=\"MethodHandles.Lookup.html#secmgr\">refuses access</a>
@throws IllegalArgumentException if the target is not a direct method handle or if access checking fails
@exception NullPointerException if the target is {@code null}
@see MethodHandleInfo
@since 1.8
"
	end

	operation 7269762 "resolveOrFail"
	  package return_type class_ref 945538 // MemberName
	  nparams 4
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	  nexceptions 2
	    exception class_ref 189954 // NoSuchFieldException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ Helper methods, all package-private."
	end

	operation 7269890 "resolveOrFail"
	  package return_type class_ref 945538 // MemberName
	  nparams 4
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 944258 // MethodType
	  nexceptions 2
	    exception class_ref 742530 // NoSuchMethodException
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7270018 "resolveOrFail"
	  package return_type class_ref 945538 // MemberName
	  nparams 2
	    param in name "refKind" explicit_type "byte"
	    param inout name "member" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 932226 // ReflectiveOperationException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7270146 "checkSymbolicClass"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "refc" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7270274 "checkMethodName"
	  package explicit_return_type "void"
	  nparams 2
	    param in name "refKind" explicit_type "byte"
	    param inout name "name" type class_ref 128130 // String
	  nexceptions 1
	    exception class_ref 742530 // NoSuchMethodException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check name for an illegal leading \"&lt;\" character. "
	end

	operation 7270402 "findBoundCallerClass"
	  package return_type class_ref 130818 // Class
	  nparams 1
	    param inout name "m" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Find my trustable caller class if m is a caller sensitive method.
If this lookup object has private access, then the caller class is the lookupClass.
Otherwise, if m is caller-sensitive, throw IllegalAccessException.
"
	end

	operation 7270530 "hasPrivateAccess"
	  private explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7270658 "checkSecurityManager"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "m" type class_ref 945538 // MemberName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Perform necessary <a href=\"MethodHandles.Lookup.html#secmgr\">access checks</a>.
Determines a trustable caller class to compare with refc, the symbolic reference class.
If this lookup object has private access, then the caller class is the lookupClass.
"
	end

	operation 7270786 "checkMethod"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "m" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7270914 "checkField"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "m" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7271042 "checkAccess"
	  package explicit_return_type "void"
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "m" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check public/protected/private bits on the symbolic reference class and its member. "
	end

	operation 7271170 "accessFailedMessage"
	  package return_type class_ref 128130 // String
	  nparams 2
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "m" type class_ref 945538 // MemberName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1723138 "ALLOW_NESTMATE_ACCESS"
	  class_attribute const_attribute private explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7271298 "checkSpecialCaller"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "specialCaller" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7271426 "restrictProtectedReceiver"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "method" type class_ref 945538 // MemberName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7271554 "restrictReceiver"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "method" type class_ref 945538 // MemberName
	    param inout name "mh" type class_ref 946946 // DirectMethodHandle
	    param inout name "caller" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7271682 "getDirectMethod"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 4
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "method" type class_ref 945538 // MemberName
	    param inout name "callerClass" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check access and get the requested method. "
	end

	operation 7271810 "getDirectMethodNoRestrict"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 4
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "method" type class_ref 945538 // MemberName
	    param inout name "callerClass" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check access and get the requested method, eliding receiver narrowing rules. "
	end

	operation 7271938 "getDirectMethodNoSecurityManager"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 4
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "method" type class_ref 945538 // MemberName
	    param inout name "callerClass" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check access and get the requested method, eliding security manager checks. "
	end

	operation 7272066 "getDirectMethodCommon"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 6
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "method" type class_ref 945538 // MemberName
	    param inout name "checkSecurity" explicit_type "boolean"
	    param inout name "doRestrict" explicit_type "boolean"
	    param inout name "callerClass" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}<?> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Common code for all methods; do not call directly except from immediately above. "
	end

	operation 7272194 "maybeBindCaller"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "method" type class_ref 945538 // MemberName
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "callerClass" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7272322 "getDirectField"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "field" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check access and get the requested field. "
	end

	operation 7272450 "getDirectFieldNoSecurityManager"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "field" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check access and get the requested field, eliding security manager checks. "
	end

	operation 7272578 "getDirectFieldCommon"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 4
	    param in name "refKind" explicit_type "byte"
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "field" type class_ref 945538 // MemberName
	    param inout name "checkSecurity" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Common code for all fields; do not call directly except from immediately above. "
	end

	operation 7272706 "getDirectConstructor"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "ctor" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check access and get the requested constructor. "
	end

	operation 7272834 "getDirectConstructorNoSecurityManager"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "ctor" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Check access and get the requested constructor, eliding security manager checks. "
	end

	operation 7272962 "getDirectConstructorCommon"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "refc" type class_ref 130818 // Class
	    param inout name "ctor" type class_ref 945538 // MemberName
	    param inout name "checkSecurity" explicit_type "boolean"
	  nexceptions 1
	    exception class_ref 321538 // IllegalAccessException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Common code for all constructors; do not call directly except from immediately above. "
	end

	operation 7273090 "linkMethodHandleConstant"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 4
	    param in name "refKind" explicit_type "byte"
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 932226 // ReflectiveOperationException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Hook called from the JVM (via MethodHandleNatives) to link MH constants:

non-public"
	end

	operation 7273218 "canBeCached"
	  private explicit_return_type "boolean"
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "member" type class_ref 945538 // MemberName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7273346 "getDirectMethodForConstant"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "member" type class_ref 945538 // MemberName
	  nexceptions 1
	    exception class_ref 932226 // ReflectiveOperationException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3206146 // LOOKASIDE_TABLE (<unidirectional association>)
	  relation 3206146 --->
	    a role_name "LOOKASIDE_TABLE" init_value " new ConcurrentHashMap<>()" class_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MemberName, DirectMethodHandle> ${name}${value};
"
	      classrelation_ref 3206146 // LOOKASIDE_TABLE (<unidirectional association>)
	    b parent class_ref 319362 // ConcurrentHashMap
	end
      end

      operation 7265794 "MethodHandles"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3205506 // IMPL_NAMES (<unidirectional association>)
	relation 3205506 --->
	  a role_name "IMPL_NAMES" init_value " MemberName.getFactory()" class_relation const_relation private
	    comment " do not instantiate
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3205506 // IMPL_NAMES (<unidirectional association>)
	  b parent class_ref 947074 // Factory
      end

      extra_member 161922 "initialization"
	
	cpp "" ""
	java "  static { MethodHandleImpl.initStatics(); }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7265922 "lookup"
	class_operation public return_type class_ref 944770 // Lookup
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment " See IMPL_LOOKUP below.
// Method handle creation from ordinary methods.

Returns a {@link Lookup lookup object} with
full capabilities to emulate all supported bytecode behaviors of the caller.
These capabilities include <a href=\"MethodHandles.Lookup.html#privacc\">private access</a> to the caller.
Factory methods on the lookup object can create
<a href=\"MethodHandleInfo.html#directmh\">direct method handles</a>
for any member that the caller has access to via bytecodes,
including protected and private fields and methods.
This lookup object is a <em>capability</em> which may be delegated to trusted agents.
Do not store it in place where untrusted code can access it.
<p>
This method is caller sensitive, which means that it may return different
values to different callers.
<p>
For any given caller class {@code C}, the lookup object returned by this call
has equivalent capabilities to any lookup object
supplied by the JVM to the bootstrap method of an
<a href=\"package-summary.html#indyinsn\">invokedynamic instruction</a>
executing in the same caller class {@code C}.
@return a lookup object for the caller of this method, with private access
"
      end

      operation 7266050 "publicLookup"
	class_operation public return_type class_ref 944770 // Lookup
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Lookup lookup object} which is trusted minimally.
It can only be used to create method handles to
publicly accessible fields and methods.
<p>
As a matter of pure convention, the {@linkplain Lookup#lookupClass lookup class}
of this lookup object will be {@link java.lang.Object}.

<p style=\"font-size:smaller;\">
<em>Discussion:</em>
The lookup class can be changed to any other class {@code C} using an expression of the form
{@link Lookup#in publicLookup().in(C.class)}.
Since all classes have equal access to public names,
such a change would confer no new access rights.
A public lookup object is always subject to
<a href=\"MethodHandles.Lookup.html#secmgr\">security manager checks</a>.
Also, it cannot access
<a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive methods</a>.
@return a lookup object which is trusted minimally
"
      end

      operation 7266178 "reflectAs"
	class_operation public explicit_return_type "T"
	nparams 2
	  param inout name "expected" type class_ref 130818 // Class
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Member> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an unchecked \"crack\" of a
<a href=\"MethodHandleInfo.html#directmh\">direct method handle</a>.
The result is as if the user had obtained a lookup object capable enough
to crack the target method handle, called
{@link java.lang.invoke.MethodHandles.Lookup#revealDirect Lookup.revealDirect}
on the target to obtain its symbolic reference, and then called
{@link java.lang.invoke.MethodHandleInfo#reflectAs MethodHandleInfo.reflectAs}
to resolve the symbolic reference to a member.
<p>
If there is a security manager, its {@code checkPermission} method
is called with a {@code ReflectPermission(\"suppressAccessChecks\")} permission.
@param <T> the desired type of the result, either {@link Member} or a subtype
@param target a direct method handle to crack into symbolic reference components
@param expected a class object representing the desired result type {@code T}
@return a reference to the method, constructor, or field object
@exception SecurityException if the caller is not privileged to call {@code setAccessible}
@exception NullPointerException if either argument is {@code null}
@exception IllegalArgumentException if the target is not a direct method handle
@exception ClassCastException if the member is not of the expected type
@since 1.8
"
      end

      classrelation 3205634 // ACCESS_PERMISSION (<unidirectional association>)
	relation 3205634 --->
	  a role_name "ACCESS_PERMISSION" init_value "
        new ReflectPermission(\"suppressAccessChecks\")" class_relation const_relation private
	    comment " Copied from AccessibleObject, as used by Method.setAccessible, etc.:
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3205634 // ACCESS_PERMISSION (<unidirectional association>)
	  b parent class_ref 257538 // Permission
      end

      operation 7273474 "arrayElementGetter"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "arrayClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle giving read access to elements of an array.
The type of the method handle will have a return type of the array's
element type.  Its first argument will be the array type,
and the second will be {@code int}.
@param arrayClass an array type
@return a method handle which can load values from the given array type
@throws NullPointerException if the argument is null
@throws  IllegalArgumentException if arrayClass is not an array type
"
      end

      operation 7273602 "arrayElementSetter"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "arrayClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle giving write access to elements of an array.
The type of the method handle will have a void return type.
Its last argument will be the array's element type.
The first and second arguments will be the array type and int.
@param arrayClass the class of an array
@return a method handle which can store values into the array type
@throws NullPointerException if the argument is null
@throws IllegalArgumentException if arrayClass is not an array type
"
      end

      operation 7273730 "spreadInvoker"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "type" type class_ref 944258 // MethodType
	  param in name "leadingArgCount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ method handle invocation (reflective style)

Produces a method handle which will invoke any method handle of the
given {@code type}, with a given number of trailing arguments replaced by
a single trailing {@code Object[]} array.
The resulting invoker will be a method handle with the following
arguments:
<ul>
<li>a single {@code MethodHandle} target
<li>zero or more leading values (counted by {@code leadingArgCount})
<li>an {@code Object[]} array containing trailing arguments
</ul>
<p>
The invoker will invoke its target like a call to {@link MethodHandle#invoke invoke} with
the indicated {@code type}.
That is, if the target is exactly of the given {@code type}, it will behave
like {@code invokeExact}; otherwise it behave as if {@link MethodHandle#asType asType}
is used to convert the target to the required {@code type}.
<p>
The type of the returned invoker will not be the given {@code type}, but rather
will have all parameters except the first {@code leadingArgCount}
replaced by a single array of type {@code Object[]}, which will be
the final parameter.
<p>
Before invoking its target, the invoker will spread the final array, apply
reference casts as necessary, and unbox and widen primitive arguments.
If, when the invoker is called, the supplied array argument does
not have the correct number of elements, the invoker will throw
an {@link IllegalArgumentException} instead of invoking the target.
<p>
This method is equivalent to the following code (though it may be more efficient):
<blockquote><pre>{@code
MethodHandle invoker = MethodHandles.invoker(type);
int spreadArgCount = type.parameterCount() - leadingArgCount;
invoker = invoker.asSpreader(Object[].class, spreadArgCount);
return invoker;
}</pre></blockquote>
This method throws no reflective or security exceptions.
@param type the desired target type
@param leadingArgCount number of fixed arguments, to be passed unchanged to the target
@return a method handle suitable for invoking any method handle of the given type
@throws NullPointerException if {@code type} is null
@throws IllegalArgumentException if {@code leadingArgCount} is not in
                 the range from 0 to {@code type.parameterCount()} inclusive,
                 or if the resulting method handle's type would have
         <a href=\"MethodHandle.html#maxarity\">too many parameters</a>
"
      end

      operation 7273858 "exactInvoker"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a special <em>invoker method handle</em> which can be used to
invoke any method handle of the given type, as if by {@link MethodHandle#invokeExact invokeExact}.
The resulting invoker will have a type which is
exactly equal to the desired type, except that it will accept
an additional leading argument of type {@code MethodHandle}.
<p>
This method is equivalent to the following code (though it may be more efficient):
{@code publicLookup().findVirtual(MethodHandle.class, \"invokeExact\", type)}

<p style=\"font-size:smaller;\">
<em>Discussion:</em>
Invoker method handles can be useful when working with variable method handles
of unknown types.
For example, to emulate an {@code invokeExact} call to a variable method
handle {@code M}, extract its type {@code T},
look up the invoker method {@code X} for {@code T},
and call the invoker method, as {@code X.invoke(T, A...)}.
(It would not work to call {@code X.invokeExact}, since the type {@code T}
is unknown.)
If spreading, collecting, or other argument transformations are required,
they can be applied once to the invoker {@code X} and reused on many {@code M}
method handle values, as long as they are compatible with the type of {@code X}.
<p style=\"font-size:smaller;\">
<em>(Note:  The invoker method is not available via the Core Reflection API.
An attempt to call {@linkplain java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}
on the declared {@code invokeExact} or {@code invoke} method will raise an
{@link java.lang.UnsupportedOperationException UnsupportedOperationException}.)</em>
<p>
This method throws no reflective or security exceptions.
@param type the desired target type
@return a method handle suitable for invoking any method handle of the given type
@throws IllegalArgumentException if the resulting method handle's type would have
         <a href=\"MethodHandle.html#maxarity\">too many parameters</a>
"
      end

      operation 7273986 "invoker"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a special <em>invoker method handle</em> which can be used to
invoke any method handle compatible with the given type, as if by {@link MethodHandle#invoke invoke}.
The resulting invoker will have a type which is
exactly equal to the desired type, except that it will accept
an additional leading argument of type {@code MethodHandle}.
<p>
Before invoking its target, if the target differs from the expected type,
the invoker will apply reference casts as
necessary and box, unbox, or widen primitive values, as if by {@link MethodHandle#asType asType}.
Similarly, the return value will be converted as necessary.
If the target is a {@linkplain MethodHandle#asVarargsCollector variable arity method handle},
the required arity conversion will be made, again as if by {@link MethodHandle#asType asType}.
<p>
This method is equivalent to the following code (though it may be more efficient):
{@code publicLookup().findVirtual(MethodHandle.class, \"invoke\", type)}
<p style=\"font-size:smaller;\">
<em>Discussion:</em>
A {@linkplain MethodType#genericMethodType general method type} is one which
mentions only {@code Object} arguments and return values.
An invoker for such a type is capable of calling any method handle
of the same arity as the general type.
<p style=\"font-size:smaller;\">
<em>(Note:  The invoker method is not available via the Core Reflection API.
An attempt to call {@linkplain java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}
on the declared {@code invokeExact} or {@code invoke} method will raise an
{@link java.lang.UnsupportedOperationException UnsupportedOperationException}.)</em>
<p>
This method throws no reflective or security exceptions.
@param type the desired target type
@return a method handle suitable for invoking any method handle convertible to the given type
@throws IllegalArgumentException if the resulting method handle's type would have
         <a href=\"MethodHandle.html#maxarity\">too many parameters</a>
"
      end

      operation 7274114 "basicInvoker"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7274242 "explicitCastArguments"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "newType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ method handle modification (creation from other method handles)

Produces a method handle which adapts the type of the
given method handle to a new type by pairwise argument and return type conversion.
The original type and new type must have the same number of arguments.
The resulting method handle is guaranteed to report a type
which is equal to the desired new type.
<p>
If the original type and new type are equal, returns target.
<p>
The same conversions are allowed as for {@link MethodHandle#asType MethodHandle.asType},
and some additional conversions are also applied if those conversions fail.
Given types <em>T0</em>, <em>T1</em>, one of the following conversions is applied
if possible, before or instead of any conversions done by {@code asType}:
<ul>
<li>If <em>T0</em> and <em>T1</em> are references, and <em>T1</em> is an interface type,
    then the value of type <em>T0</em> is passed as a <em>T1</em> without a cast.
    (This treatment of interfaces follows the usage of the bytecode verifier.)
<li>If <em>T0</em> is boolean and <em>T1</em> is another primitive,
    the boolean is converted to a byte value, 1 for true, 0 for false.
    (This treatment follows the usage of the bytecode verifier.)
<li>If <em>T1</em> is boolean and <em>T0</em> is another primitive,
    <em>T0</em> is converted to byte via Java casting conversion (JLS 5.5),
    and the low order bit of the result is tested, as if by {@code (x & 1) != 0}.
<li>If <em>T0</em> and <em>T1</em> are primitives other than boolean,
    then a Java casting conversion (JLS 5.5) is applied.
    (Specifically, <em>T0</em> will convert to <em>T1</em> by
    widening and/or narrowing.)
<li>If <em>T0</em> is a reference and <em>T1</em> a primitive, an unboxing
    conversion will be applied at runtime, possibly followed
    by a Java casting conversion (JLS 5.5) on the primitive value,
    possibly followed by a conversion from byte to boolean by testing
    the low-order bit.
<li>If <em>T0</em> is a reference and <em>T1</em> a primitive,
    and if the reference is null at runtime, a zero value is introduced.
</ul>
@param target the method handle to invoke after arguments are retyped
@param newType the expected type of the new method handle
@return a method handle which delegates to the target after performing
          any necessary argument conversions, and arranges for any
          necessary return value conversions
@throws NullPointerException if either argument is null
@throws WrongMethodTypeException if the conversion cannot be made
@see MethodHandle#asType
"
      end

      operation 7274370 "explicitCastArgumentsChecks"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "newType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7274498 "permuteArguments"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "newType" type class_ref 944258 // MethodType
	  param inout name "" explicit_type "int...reorder"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle which adapts the calling sequence of the
given method handle to a new type, by reordering the arguments.
The resulting method handle is guaranteed to report a type
which is equal to the desired new type.
<p>
The given array controls the reordering.
Call {@code #I} the number of incoming parameters (the value
{@code newType.parameterCount()}, and call {@code #O} the number
of outgoing parameters (the value {@code target.type().parameterCount()}).
Then the length of the reordering array must be {@code #O},
and each element must be a non-negative number less than {@code #I}.
For every {@code N} less than {@code #O}, the {@code N}-th
outgoing argument will be taken from the {@code I}-th incoming
argument, where {@code I} is {@code reorder[N]}.
<p>
No argument or return value conversions are applied.
The type of each incoming argument, as determined by {@code newType},
must be identical to the type of the corresponding outgoing parameter
or parameters in the target method handle.
The return type of {@code newType} must be identical to the return
type of the original target.
<p>
The reordering array need not specify an actual permutation.
An incoming argument will be duplicated if its index appears
more than once in the array, and an incoming argument will be dropped
if its index does not appear in the array.
As in the case of {@link #dropArguments(MethodHandle,int,List) dropArguments},
incoming arguments which are not mentioned in the reordering array
are may be any type, as determined only by {@code newType}.
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodType intfn1 = methodType(int.class, int.class);
MethodType intfn2 = methodType(int.class, int.class, int.class);
MethodHandle sub = ... (int x, int y) -> (x-y) ...;
assert(sub.type().equals(intfn2));
MethodHandle sub1 = permuteArguments(sub, intfn2, 0, 1);
MethodHandle rsub = permuteArguments(sub, intfn2, 1, 0);
assert((int)rsub.invokeExact(1, 100) == 99);
MethodHandle add = ... (int x, int y) -> (x+y) ...;
assert(add.type().equals(intfn2));
MethodHandle twice = permuteArguments(add, intfn1, 0, 0);
assert(twice.type().equals(intfn1));
assert((int)twice.invokeExact(21) == 42);
}</pre></blockquote>
@param target the method handle to invoke after arguments are reordered
@param newType the expected type of the new method handle
@param reorder an index array which controls the reordering
@return a method handle which delegates to the target after it
          drops unused arguments and moves and/or duplicates the other arguments
@throws NullPointerException if any argument is null
@throws IllegalArgumentException if the index array length is not equal to
                 the arity of the target, or if any index array element
                 not a valid index for a parameter of {@code newType},
                 or if two corresponding parameter types in
                 {@code target.type()} and {@code newType} are not identical,
"
      end

      operation 7274626 "findFirstDupOrDrop"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "reorder" explicit_type "int"
	multiplicity "[]"
	  param in name "newArity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an indication of any duplicate or omission in reorder.
If the reorder contains a duplicate entry, return the index of the second occurrence.
Otherwise, return ~(n), for the first n in [0..newArity-1] that is not present in reorder.
Otherwise, return zero.
If an element not in [0..newArity-1] is encountered, return reorder.length.
"
      end

      operation 7274754 "permuteArgumentChecks"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "reorder" explicit_type "int"
	multiplicity "[]"
	  param inout name "newType" type class_ref 944258 // MethodType
	  param inout name "oldType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7274882 "constant"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle of the requested return type which returns the given
constant value every time it is invoked.
<p>
Before the method handle is returned, the passed-in value is converted to the requested type.
If the requested type is primitive, widening primitive conversions are attempted,
else reference conversions are attempted.
<p>The returned method handle is equivalent to {@code identity(type).bindTo(value)}.
@param type the return type of the desired method handle
@param value the value to return
@return a method handle of the given return type and no arguments, which always returns the given value
@throws NullPointerException if the {@code type} argument is null
@throws ClassCastException if the value cannot be converted to the required return type
@throws IllegalArgumentException if the given type is {@code void.class}
"
      end

      operation 7275010 "identity"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle which returns its sole argument when invoked.
@param type the type of the sole parameter and return value of the desired method handle
@return a unary method handle which accepts and returns the given type
@throws NullPointerException if the argument is null
@throws IllegalArgumentException if the given type is {@code void.class}
"
      end

      classrelation 3206274 // IDENTITY_MHS (<unidirectional association>)
	relation 3206274 --->
	  a role_name "IDENTITY_MHS" multiplicity "[]" init_value " new MethodHandle[Wrapper.values().length]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3206274 // IDENTITY_MHS (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      operation 7275138 "makeIdentity"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "ptype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7275266 "zero"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "btw" explicit_type "Wrapper"
	  param inout name "rtype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3206402 // ZERO_MHS (<unidirectional association>)
	relation 3206402 --->
	  a role_name "ZERO_MHS" multiplicity "[]" init_value " new MethodHandle[Wrapper.values().length]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3206402 // ZERO_MHS (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      operation 7275394 "makeZero"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "rtype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7275522 "setCachedMethodHandle"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "cache" type class_ref 944386 // MethodHandle
	multiplicity "[]"
	  param in name "pos" explicit_type "int"
	  param inout name "value" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7275650 "insertArguments"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "" explicit_type "Object...values"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a target method handle with one or more <em>bound arguments</em>
in advance of the method handle's invocation.
The formal parameters to the target corresponding to the bound
arguments are called <em>bound parameters</em>.
Returns a new method handle which saves away the bound arguments.
When it is invoked, it receives arguments for any non-bound parameters,
binds the saved arguments to their corresponding parameters,
and calls the original target.
<p>
The type of the new method handle will drop the types for the bound
parameters from the original target type, since the new method handle
will no longer require those arguments to be supplied by its callers.
<p>
Each given argument object must match the corresponding bound parameter type.
If a bound parameter type is a primitive, the argument object
must be a wrapper, and will be unboxed to produce the primitive value.
<p>
The {@code pos} argument selects which parameters are to be bound.
It may range between zero and <i>N-L</i> (inclusively),
where <i>N</i> is the arity of the target method handle
and <i>L</i> is the length of the values array.
@param target the method handle to invoke after the argument is inserted
@param pos where to insert the argument (zero for the first)
@param values the series of arguments to insert
@return a method handle which inserts an additional argument,
        before calling the original method handle
@throws NullPointerException if the target or the {@code values} array is null
@see MethodHandle#bindTo
"
      end

      operation 7275778 "insertArgumentPrimitive"
	class_operation private return_type class_ref 945154 // BoundMethodHandle
	nparams 4
	  param inout name "result" type class_ref 945154 // BoundMethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "ptype" type class_ref 130818 // Class
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7275906 "insertArgumentsChecks"
	class_operation private return_type class_ref 130818 // Class
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "insCount" explicit_type "int"
	  param in name "pos" explicit_type "int"
	nexceptions 1
	  exception class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7276034 "dropArguments"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "valueTypes" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle which will discard some dummy arguments
before calling some other specified <i>target</i> method handle.
The type of the new method handle will be the same as the target's type,
except it will also include the dummy argument types,
at some given position.
<p>
The {@code pos} argument may range between zero and <i>N</i>,
where <i>N</i> is the arity of the target.
If {@code pos} is zero, the dummy arguments will precede
the target's real arguments; if {@code pos} is <i>N</i>
they will come after.
<p>
<b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle cat = lookup().findVirtual(String.class,
\"concat\", methodType(String.class, String.class));
assertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\"));
MethodType bigType = cat.type().insertParameterTypes(0, int.class, String.class);
MethodHandle d0 = dropArguments(cat, 0, bigType.parameterList().subList(0,2));
assertEquals(bigType, d0.type());
assertEquals(\"yz\", (String) d0.invokeExact(123, \"x\", \"y\", \"z\"));
}</pre></blockquote>
<p>
This method is also equivalent to the following code:
<blockquote><pre>
{@link #dropArguments(MethodHandle,int,Class...) dropArguments}{@code (target, pos, valueTypes.toArray(new Class[0]))}
</pre></blockquote>
@param target the method handle to invoke after the arguments are dropped
@param valueTypes the type(s) of the argument(s) to drop
@param pos position of first argument to drop (zero for the leftmost)
@return a method handle which drops arguments of the given types,
        before calling the original method handle
@throws NullPointerException if the target is null,
                             or if the {@code valueTypes} list or any of its elements is null
@throws IllegalArgumentException if any element of {@code valueTypes} is {@code void.class},
                 or if {@code pos} is negative or greater than the arity of the target,
                 or if the new method handle's type would have too many parameters
"
      end

      operation 7276162 "copyTypes"
	class_operation private return_type class_ref 175362 // List
	nparams 1
	  param inout name "types" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<?>> ${name}${(}${t0}<Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7276290 "dropArgumentChecks"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "oldType" type class_ref 944258 // MethodType
	  param in name "pos" explicit_type "int"
	  param inout name "valueTypes" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<Class<?>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7276418 "dropArguments"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "valueTypes" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle which will discard some dummy arguments
before calling some other specified <i>target</i> method handle.
The type of the new method handle will be the same as the target's type,
except it will also include the dummy argument types,
at some given position.
<p>
The {@code pos} argument may range between zero and <i>N</i>,
where <i>N</i> is the arity of the target.
If {@code pos} is zero, the dummy arguments will precede
the target's real arguments; if {@code pos} is <i>N</i>
they will come after.
<p>
<b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle cat = lookup().findVirtual(String.class,
\"concat\", methodType(String.class, String.class));
assertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\"));
MethodHandle d0 = dropArguments(cat, 0, String.class);
assertEquals(\"yz\", (String) d0.invokeExact(\"x\", \"y\", \"z\"));
MethodHandle d1 = dropArguments(cat, 1, String.class);
assertEquals(\"xz\", (String) d1.invokeExact(\"x\", \"y\", \"z\"));
MethodHandle d2 = dropArguments(cat, 2, String.class);
assertEquals(\"xy\", (String) d2.invokeExact(\"x\", \"y\", \"z\"));
MethodHandle d12 = dropArguments(cat, 1, int.class, boolean.class);
assertEquals(\"xz\", (String) d12.invokeExact(\"x\", 12, true, \"z\"));
}</pre></blockquote>
<p>
This method is also equivalent to the following code:
<blockquote><pre>
{@link #dropArguments(MethodHandle,int,List) dropArguments}{@code (target, pos, Arrays.asList(valueTypes))}
</pre></blockquote>
@param target the method handle to invoke after the arguments are dropped
@param valueTypes the type(s) of the argument(s) to drop
@param pos position of first argument to drop (zero for the leftmost)
@return a method handle which drops arguments of the given types,
        before calling the original method handle
@throws NullPointerException if the target is null,
                             or if the {@code valueTypes} array or any of its elements is null
@throws IllegalArgumentException if any element of {@code valueTypes} is {@code void.class},
                 or if {@code pos} is negative or greater than the arity of the target,
                 or if the new method handle's type would have
                 <a href=\"MethodHandle.html#maxarity\">too many parameters</a>
"
      end

      operation 7276546 "filterArguments"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "" explicit_type "MethodHandle...filters"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapts a target method handle by pre-processing
one or more of its arguments, each with its own unary filter function,
and then calling the target with each pre-processed argument
replaced by the result of its corresponding filter function.
<p>
The pre-processing is performed by one or more method handles,
specified in the elements of the {@code filters} array.
The first element of the filter array corresponds to the {@code pos}
argument of the target, and so on in sequence.
<p>
Null arguments in the array are treated as identity functions,
and the corresponding arguments left unchanged.
(If there are no non-null elements in the array, the original target is returned.)
Each filter is applied to the corresponding argument of the adapter.
<p>
If a filter {@code F} applies to the {@code N}th argument of
the target, then {@code F} must be a method handle which
takes exactly one argument.  The type of {@code F}'s sole argument
replaces the corresponding argument type of the target
in the resulting adapted method handle.
The return type of {@code F} must be identical to the corresponding
parameter type of the target.
<p>
It is an error if there are elements of {@code filters}
(null or not)
which do not correspond to argument positions in the target.
<p><b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle cat = lookup().findVirtual(String.class,
\"concat\", methodType(String.class, String.class));
MethodHandle upcase = lookup().findVirtual(String.class,
\"toUpperCase\", methodType(String.class));
assertEquals(\"xy\", (String) cat.invokeExact(\"x\", \"y\"));
MethodHandle f0 = filterArguments(cat, 0, upcase);
assertEquals(\"Xy\", (String) f0.invokeExact(\"x\", \"y\")); // Xy
MethodHandle f1 = filterArguments(cat, 1, upcase);
assertEquals(\"xY\", (String) f1.invokeExact(\"x\", \"y\")); // xY
MethodHandle f2 = filterArguments(cat, 0, upcase, upcase);
assertEquals(\"XY\", (String) f2.invokeExact(\"x\", \"y\")); // XY
}</pre></blockquote>
<p> Here is pseudocode for the resulting adapter:
<blockquote><pre>{@code
V target(P... p, A[i]... a[i], B... b);
A[i] filter[i](V[i]);
T adapter(P... p, V[i]... v[i], B... b) {
  return target(p..., f[i](v[i])..., b...);
}
}</pre></blockquote>

@param target the method handle to invoke after arguments are filtered
@param pos the position of the first argument to filter
@param filters method handles to call initially on filtered arguments
@return method handle which incorporates the specified argument filtering logic
@throws NullPointerException if the target is null
                             or if the {@code filters} array is null
@throws IllegalArgumentException if a non-null element of {@code filters}
         does not match a corresponding argument type of target as described above,
         or if the {@code pos+filters.length} is greater than {@code target.type().parameterCount()},
         or if the resulting method handle's type would have
         <a href=\"MethodHandle.html#maxarity\">too many parameters</a>
"
      end

      operation 7276674 "filterArgument"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "filter" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7276802 "filterArgumentsCheckArity"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "filters" type class_ref 944386 // MethodHandle
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7276930 "filterArgumentChecks"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "filter" type class_ref 944386 // MethodHandle
	nexceptions 1
	  exception class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7277058 "collectArguments"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "filter" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapts a target method handle by pre-processing
a sub-sequence of its arguments with a filter (another method handle).
The pre-processed arguments are replaced by the result (if any) of the
filter function.
The target is then called on the modified (usually shortened) argument list.
<p>
If the filter returns a value, the target must accept that value as
its argument in position {@code pos}, preceded and/or followed by
any arguments not passed to the filter.
If the filter returns void, the target must accept all arguments
not passed to the filter.
No arguments are reordered, and a result returned from the filter
replaces (in order) the whole subsequence of arguments originally
passed to the adapter.
<p>
The argument types (if any) of the filter
replace zero or one argument types of the target, at position {@code pos},
in the resulting adapted method handle.
The return type of the filter (if any) must be identical to the
argument type of the target at position {@code pos}, and that target argument
is supplied by the return value of the filter.
<p>
In all cases, {@code pos} must be greater than or equal to zero, and
{@code pos} must also be less than or equal to the target's arity.
<p><b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle deepToString = publicLookup()
.findStatic(Arrays.class, \"deepToString\", methodType(String.class, Object[].class));

MethodHandle ts1 = deepToString.asCollector(String[].class, 1);
assertEquals(\"[strange]\", (String) ts1.invokeExact(\"strange\"));

MethodHandle ts2 = deepToString.asCollector(String[].class, 2);
assertEquals(\"[up, down]\", (String) ts2.invokeExact(\"up\", \"down\"));

MethodHandle ts3 = deepToString.asCollector(String[].class, 3);
MethodHandle ts3_ts2 = collectArguments(ts3, 1, ts2);
assertEquals(\"[top, [up, down], strange]\",
(String) ts3_ts2.invokeExact(\"top\", \"up\", \"down\", \"strange\"));

MethodHandle ts3_ts2_ts1 = collectArguments(ts3_ts2, 3, ts1);
assertEquals(\"[top, [up, down], [strange]]\",
(String) ts3_ts2_ts1.invokeExact(\"top\", \"up\", \"down\", \"strange\"));

MethodHandle ts3_ts2_ts3 = collectArguments(ts3_ts2, 1, ts3);
assertEquals(\"[top, [[up, down, strange], charm], bottom]\",
(String) ts3_ts2_ts3.invokeExact(\"top\", \"up\", \"down\", \"strange\", \"charm\", \"bottom\"));
}</pre></blockquote>
<p> Here is pseudocode for the resulting adapter:
<blockquote><pre>{@code
T target(A...,V,C...);
V filter(B...);
T adapter(A... a,B... b,C... c) {
  V v = filter(b...);
  return target(a...,v,c...);
}
// and if the filter has no arguments:
T target2(A...,V,C...);
V filter2();
T adapter2(A... a,C... c) {
  V v = filter2();
  return target2(a...,v,c...);
}
// and if the filter has a void return:
T target3(A...,C...);
void filter3(B...);
void adapter3(A... a,B... b,C... c) {
  filter3(b...);
  return target3(a...,c...);
}
}</pre></blockquote>
<p>
A collection adapter {@code collectArguments(mh, 0, coll)} is equivalent to
one which first \"folds\" the affected arguments, and then drops them, in separate
steps as follows:
<blockquote><pre>{@code
mh = MethodHandles.dropArguments(mh, 1, coll.type().parameterList()); //step 2
mh = MethodHandles.foldArguments(mh, coll); //step 1
}</pre></blockquote>
If the target method handle consumes no arguments besides than the result
(if any) of the filter {@code coll}, then {@code collectArguments(mh, 0, coll)}
is equivalent to {@code filterReturnValue(coll, mh)}.
If the filter method handle {@code coll} consumes one argument and produces
a non-void result, then {@code collectArguments(mh, N, coll)}
is equivalent to {@code filterArguments(mh, N, coll)}.
Other equivalences are possible but would require argument permutation.

@param target the method handle to invoke after filtering the subsequence of arguments
@param pos the position of the first adapter argument to pass to the filter,
           and/or the target argument which receives the result of the filter
@param filter method handle to call on the subsequence of arguments
@return method handle which incorporates the specified argument subsequence filtering logic
@throws NullPointerException if either argument is null
@throws IllegalArgumentException if the return type of {@code filter}
         is non-void and is not the same as the {@code pos} argument of the target,
         or if {@code pos} is not between 0 and the target's arity, inclusive,
         or if the resulting method handle's type would have
         <a href=\"MethodHandle.html#maxarity\">too many parameters</a>
@see MethodHandles#foldArguments
@see MethodHandles#filterArguments
@see MethodHandles#filterReturnValue
"
      end

      operation 7277186 "collectArgumentsChecks"
	class_operation private return_type class_ref 944258 // MethodType
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "filter" type class_ref 944386 // MethodHandle
	nexceptions 1
	  exception class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7277314 "filterReturnValue"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "filter" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapts a target method handle by post-processing
its return value (if any) with a filter (another method handle).
The result of the filter is returned from the adapter.
<p>
If the target returns a value, the filter must accept that value as
its only argument.
If the target returns void, the filter must accept no arguments.
<p>
The return type of the filter
replaces the return type of the target
in the resulting adapted method handle.
The argument type of the filter (if any) must be identical to the
return type of the target.
<p><b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle cat = lookup().findVirtual(String.class,
\"concat\", methodType(String.class, String.class));
MethodHandle length = lookup().findVirtual(String.class,
\"length\", methodType(int.class));
System.out.println((String) cat.invokeExact(\"x\", \"y\")); // xy
MethodHandle f0 = filterReturnValue(cat, length);
System.out.println((int) f0.invokeExact(\"x\", \"y\")); // 2
}</pre></blockquote>
<p> Here is pseudocode for the resulting adapter:
<blockquote><pre>{@code
V target(A...);
T filter(V);
T adapter(A... a) {
  V v = target(a...);
  return filter(v);
}
// and if the target has a void return:
void target2(A...);
T filter2();
T adapter2(A... a) {
  target2(a...);
  return filter2();
}
// and if the filter has a void return:
V target3(A...);
void filter3(V);
void adapter3(A... a) {
  V v = target3(a...);
  filter3(v);
}
}</pre></blockquote>
@param target the method handle to invoke before filtering the return value
@param filter method handle to call on the return value
@return method handle which incorporates the specified return value filtering logic
@throws NullPointerException if either argument is null
@throws IllegalArgumentException if the argument list of {@code filter}
         does not match the return type of target as described above
"
      end

      operation 7277442 "filterReturnValueChecks"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "targetType" type class_ref 944258 // MethodType
	  param inout name "filterType" type class_ref 944258 // MethodType
	nexceptions 1
	  exception class_ref 214786 // RuntimeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7277570 "foldArguments"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "combiner" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapts a target method handle by pre-processing
some of its arguments, and then calling the target with
the result of the pre-processing, inserted into the original
sequence of arguments.
<p>
The pre-processing is performed by {@code combiner}, a second method handle.
Of the arguments passed to the adapter, the first {@code N} arguments
are copied to the combiner, which is then called.
(Here, {@code N} is defined as the parameter count of the combiner.)
After this, control passes to the target, with any result
from the combiner inserted before the original {@code N} incoming
arguments.
<p>
If the combiner returns a value, the first parameter type of the target
must be identical with the return type of the combiner, and the next
{@code N} parameter types of the target must exactly match the parameters
of the combiner.
<p>
If the combiner has a void return, no result will be inserted,
and the first {@code N} parameter types of the target
must exactly match the parameters of the combiner.
<p>
The resulting adapter is the same type as the target, except that the
first parameter type is dropped,
if it corresponds to the result of the combiner.
<p>
(Note that {@link #dropArguments(MethodHandle,int,List) dropArguments} can be used to remove any arguments
that either the combiner or the target does not wish to receive.
If some of the incoming arguments are destined only for the combiner,
consider using {@link MethodHandle#asCollector asCollector} instead, since those
arguments will not need to be live on the stack on entry to the
target.)
<p><b>Example:</b>
<blockquote><pre>{@code
import static java.lang.invoke.MethodHandles.*;
import static java.lang.invoke.MethodType.*;
...
MethodHandle trace = publicLookup().findVirtual(java.io.PrintStream.class,
\"println\", methodType(void.class, String.class))
.bindTo(System.out);
MethodHandle cat = lookup().findVirtual(String.class,
\"concat\", methodType(String.class, String.class));
assertEquals(\"boojum\", (String) cat.invokeExact(\"boo\", \"jum\"));
MethodHandle catTrace = foldArguments(cat, trace);
// also prints \"boo\":
assertEquals(\"boojum\", (String) catTrace.invokeExact(\"boo\", \"jum\"));
}</pre></blockquote>
<p> Here is pseudocode for the resulting adapter:
<blockquote><pre>{@code
// there are N arguments in A...
T target(V, A[N]..., B...);
V combiner(A...);
T adapter(A... a, B... b) {
  V v = combiner(a...);
  return target(v, a..., b...);
}
// and if the combiner has a void return:
T target2(A[N]..., B...);
void combiner2(A...);
T adapter2(A... a, B... b) {
  combiner2(a...);
  return target2(a..., b...);
}
}</pre></blockquote>
@param target the method handle to invoke after arguments are combined
@param combiner method handle to call initially on the incoming arguments
@return method handle which incorporates the specified argument folding logic
@throws NullPointerException if either argument is null
@throws IllegalArgumentException if {@code combiner}'s return type
         is non-void and not the same as the first argument type of
         the target, or if the initial {@code N} argument types
         of the target
         (skipping one matching the {@code combiner}'s return type)
         are not identical with the argument types of {@code combiner}
"
      end

      operation 7277698 "foldArgumentChecks"
	class_operation private return_type class_ref 130818 // Class
	nparams 3
	  param in name "foldPos" explicit_type "int"
	  param inout name "targetType" type class_ref 944258 // MethodType
	  param inout name "combinerType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7277826 "guardWithTest"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "test" type class_ref 944386 // MethodHandle
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "fallback" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a method handle which adapts a target method handle,
by guarding it with a test, a boolean-valued method handle.
If the guard fails, a fallback handle is called instead.
All three method handles must have the same corresponding
argument and return types, except that the return type
of the test must be boolean, and the test is allowed
to have fewer arguments than the other two method handles.
<p> Here is pseudocode for the resulting adapter:
<blockquote><pre>{@code
boolean test(A...);
T target(A...,B...);
T fallback(A...,B...);
T adapter(A... a,B... b) {
  if (test(a...))
    return target(a..., b...);
  else
    return fallback(a..., b...);
}
}</pre></blockquote>
Note that the test arguments ({@code a...} in the pseudocode) cannot
be modified by execution of the test, and so are passed unchanged
from the caller to the target or fallback as appropriate.
@param test method handle used for test, must return boolean
@param target method handle to call if test passes
@param fallback method handle to call if test fails
@return method handle which incorporates the specified if/then/else logic
@throws NullPointerException if any argument is null
@throws IllegalArgumentException if {@code test} does not return boolean,
         or if all three method types do not match (with the return
         type of {@code test} changed to match that of the target).
"
      end

      operation 7277954 "misMatchedTypes"
	class_operation package return_type class_ref 214786 // RuntimeException
	nparams 3
	  param inout name "what" type class_ref 128130 // String
	  param inout name "t1" type class_ref 944258 // MethodType
	  param inout name "t2" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7278082 "catchException"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "exType" type class_ref 130818 // Class
	  param inout name "handler" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Throwable> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a method handle which adapts a target method handle,
by running it inside an exception handler.
If the target returns normally, the adapter returns that value.
If an exception matching the specified type is thrown, the fallback
handle is called instead on the exception, plus the original arguments.
<p>
The target and handler must have the same corresponding
argument and return types, except that handler may omit trailing arguments
(similarly to the predicate in {@link #guardWithTest guardWithTest}).
Also, the handler must have an extra leading parameter of {@code exType} or a supertype.
<p> Here is pseudocode for the resulting adapter:
<blockquote><pre>{@code
T target(A..., B...);
T handler(ExType, A...);
T adapter(A... a, B... b) {
  try {
    return target(a..., b...);
  } catch (ExType ex) {
    return handler(ex, a...);
  }
}
}</pre></blockquote>
Note that the saved arguments ({@code a...} in the pseudocode) cannot
be modified by execution of the target, and so are passed unchanged
from the caller to the handler, if the handler is invoked.
<p>
The target and handler must return the same type, even if the handler
always throws.  (This might happen, for instance, because the handler
is simulating a {@code finally} clause).
To create such a throwing handler, compose the handler creation logic
with {@link #throwException throwException},
in order to create a method handle of the correct return type.
@param target method handle to call
@param exType the type of exception which the handler will catch
@param handler method handle to call if a matching exception is thrown
@return method handle which incorporates the specified try/catch logic
@throws NullPointerException if any argument is null
@throws IllegalArgumentException if {@code handler} does not accept
         the given exception type, or if the method handle types do
         not match in their return types and their
         corresponding parameters
"
      end

      operation 7278210 "throwException"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "returnType" type class_ref 130818 // Class
	  param inout name "exType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<? extends Throwable> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle which will throw exceptions of the given {@code exType}.
The method handle will accept a single argument of {@code exType},
and immediately throw it as an exception.
The method type will nominally specify a return of {@code returnType}.
The return type may be anything convenient:  It doesn't matter to the
method handle's behavior, since it will never return normally.
@param returnType the return type of the desired method handle
@param exType the parameter type of the desired method handle
@return method handle which can throw the given exceptions
@throws NullPointerException if either argument is null
"
      end
    end

    class 944898 "LambdaConversionException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "LambdaConversionException
"
      classrelation 3196162 // <generalisation>
	relation 3196162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3196162 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      attribute 1700482 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 292L + 8L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7197442 "LambdaConversionException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code LambdaConversionException}.
"
      end

      operation 7197570 "LambdaConversionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code LambdaConversionException} with a message.
@param message the detail message
"
      end

      operation 7197698 "LambdaConversionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code LambdaConversionException} with a message and cause.
@param message the detail message
@param cause the cause
"
      end

      operation 7197826 "LambdaConversionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code LambdaConversionException} with a cause.
@param cause the cause
"
      end

      operation 7197954 "LambdaConversionException"
	public explicit_return_type ""
	nparams 4
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	  param inout name "enableSuppression" explicit_type "boolean"
	  param inout name "writableStackTrace" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code LambdaConversionException} with a message,
cause, and other settings.
@param message the detail message
@param cause the cause
@param enableSuppression whether or not suppressed exceptions are enabled
@param writableStackTrace whether or not the stack trace is writable
"
      end
    end

    class 945026 "CallSite"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code CallSite} is a holder for a variable {@link MethodHandle},
which is called its {@code target}.
An {@code invokedynamic} instruction linked to a {@code CallSite} delegates
all calls to the site's current target.
A {@code CallSite} may be associated with several {@code invokedynamic}
instructions, or it may be \"free floating\", associated with none.
In any case, it may be invoked through an associated method handle
called its {@linkplain #dynamicInvoker dynamic invoker}.
<p>
{@code CallSite} is an abstract class which does not allow
direct subclassing by users.  It has three immediate,
concrete subclasses that may be either instantiated or subclassed.
<ul>
<li>If a mutable target is not required, an {@code invokedynamic} instruction
may be permanently bound by means of a {@linkplain ConstantCallSite constant call site}.
<li>If a mutable target is required which has volatile variable semantics,
because updates to the target must be immediately and reliably witnessed by other threads,
a {@linkplain VolatileCallSite volatile call site} may be used.
<li>Otherwise, if a mutable target is required,
a {@linkplain MutableCallSite mutable call site} may be used.
</ul>
<p>
A non-constant call site may be <em>relinked</em> by changing its target.
The new target must have the same {@linkplain MethodHandle#type() type}
as the previous target.
Thus, though a call site can be relinked to a series of
successive targets, it cannot change its type.
<p>
Here is a sample use of call sites and bootstrap methods which links every
dynamic call site to print its arguments:
<blockquote><pre>{@code
static void test() throws Throwable {
// THE FOLLOWING LINE IS PSEUDOCODE FOR A JVM INSTRUCTION
InvokeDynamic[#bootstrapDynamic].baz(\"baz arg\", 2, 3.14);
}
private static void printArgs(Object... args) {
System.out.println(java.util.Arrays.deepToString(args));
}
private static final MethodHandle printArgs;
static {
MethodHandles.Lookup lookup = MethodHandles.lookup();
Class thisClass = lookup.lookupClass();  // (who am I?)
printArgs = lookup.findStatic(thisClass,
\"printArgs\", MethodType.methodType(void.class, Object[].class));
}
private static CallSite bootstrapDynamic(MethodHandles.Lookup caller, String name, MethodType type) {
// ignore caller and name, but match the type:
return new ConstantCallSite(printArgs.asType(type));
}
}</pre></blockquote>
@author John Rose, JSR 292 EG
"
      extra_member 158850 "initialization"
	
	cpp "" ""
	java "  static { MethodHandleImpl.initStatics(); }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3185282 // target (<unidirectional association>)
	relation 3185282 --->
	  a role_name "target" package
	    comment " The actual payload of this call site:
package-private
 Note: This field is known to the JVM.  Do not change."
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3185282 // target (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      operation 7167490 "CallSite"
	package explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a blank call site object with the given method type.
An initial target method is supplied which will throw
an {@link IllegalStateException} if called.
<p>
Before this {@code CallSite} object is returned from a bootstrap method,
it is usually provided with a more useful target method,
via a call to {@link CallSite#setTarget(MethodHandle) setTarget}.
@throws NullPointerException if the proposed type is null

package-private"
      end

      operation 7167618 "CallSite"
	package explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a call site object equipped with an initial target method handle.
@param target the method handle which will be the initial target of the call site
@throws NullPointerException if the proposed target is null

package-private"
      end

      operation 7167746 "CallSite"
	package explicit_return_type ""
	nparams 2
	  param inout name "targetType" type class_ref 944258 // MethodType
	  param inout name "createTargetHook" type class_ref 944386 // MethodHandle
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a call site object equipped with an initial target method handle.
@param targetType the desired type of the call site
@param createTargetHook a hook which will bind the call site to the target method handle
@throws WrongMethodTypeException if the hook cannot be invoked on the required arguments,
        or if the target returned by the hook is not of the given {@code targetType}
@throws NullPointerException if the hook returns a null value
@throws ClassCastException if the hook returns something other than a {@code MethodHandle}
@throws Throwable anything else thrown by the hook function

package-private"
      end

      operation 7167874 "type"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this call site's target.
Although targets may change, any call site's type is permanent, and can never change to an unequal type.
The {@code setTarget} method enforces this invariant by refusing any new target that does
not have the previous target's type.
@return the type of the current target, which is also the type of any future target
"
      end

      operation 7168002 "getTarget"
	abstract public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the target method of the call site, according to the
behavior defined by this call site's specific class.
The immediate subclasses of {@code CallSite} document the
class-specific behaviors of this method.

@return the current linkage state of the call site, its target method handle
@see ConstantCallSite
@see VolatileCallSite
@see #setTarget
@see ConstantCallSite#getTarget
@see MutableCallSite#getTarget
@see VolatileCallSite#getTarget
"
      end

      operation 7168130 "setTarget"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "newTarget" type class_ref 944386 // MethodHandle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the target method of this call site, according to the
behavior defined by this call site's specific class.
The immediate subclasses of {@code CallSite} document the
class-specific behaviors of this method.
<p>
The type of the new target must be {@linkplain MethodType#equals equal to}
the type of the old target.

@param newTarget the new target
@throws NullPointerException if the proposed new target is null
@throws WrongMethodTypeException if the proposed new target
        has a method type that differs from the previous target
@see CallSite#getTarget
@see ConstantCallSite#setTarget
@see MutableCallSite#setTarget
@see VolatileCallSite#setTarget
"
      end

      operation 7168258 "checkTargetChange"
	package explicit_return_type "void"
	nparams 2
	  param inout name "oldTarget" type class_ref 944386 // MethodHandle
	  param inout name "newTarget" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7168386 "wrongTargetType"
	class_operation private return_type class_ref 946562 // WrongMethodTypeException
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7168514 "dynamicInvoker"
	abstract public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a method handle equivalent to an invokedynamic instruction
which has been linked to this call site.
<p>
This method is equivalent to the following code:
<blockquote><pre>{@code
MethodHandle getTarget, invoker, result;
getTarget = MethodHandles.publicLookup().bind(this, \"getTarget\", MethodType.methodType(MethodHandle.class));
invoker = MethodHandles.exactInvoker(this.type());
result = MethodHandles.foldArguments(invoker, getTarget)
}</pre></blockquote>

@return a method handle which always invokes this call site's current target
"
      end

      operation 7168642 "makeDynamicInvoker"
	package return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      classrelation 3185410 // GET_TARGET (<unidirectional association>)
	relation 3185410 --->
	  a role_name "GET_TARGET" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3185410 // GET_TARGET (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      classrelation 3185538 // THROW_UCS (<unidirectional association>)
	relation 3185538 --->
	  a role_name "THROW_UCS" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3185538 // THROW_UCS (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      extra_member 158978 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GET_TARGET = IMPL_LOOKUP.
                findVirtual(CallSite.class, \"getTarget\", MethodType.methodType(MethodHandle.class));
            THROW_UCS = IMPL_LOOKUP.
                findStatic(CallSite.class, \"uninitializedCallSite\", MethodType.methodType(Object.class, Object[].class));
        } catch (ReflectiveOperationException e) {
            throw newInternalError(e);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7168770 "uninitializedCallSite"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...ignore"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This guy is rolled into the default target if a MethodType is supplied to the constructor. "
      end

      operation 7168898 "makeUninitializedCallSite"
	private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "targetType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1693058 "TARGET_OFFSET"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " unsafe stuff:
"
      end

      extra_member 159106 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            TARGET_OFFSET = UNSAFE.objectFieldOffset(CallSite.class.getDeclaredField(\"target\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7169026 "setTargetNormal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newTarget" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package-private"
      end

      operation 7169154 "getTargetVolatile"
	package return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package-private"
      end

      operation 7169282 "setTargetVolatile"
	package explicit_return_type "void"
	nparams 1
	  param inout name "newTarget" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "package-private"
      end

      operation 7169410 "makeSite"
	class_operation package return_type class_ref 945026 // CallSite
	nparams 5
	  param inout name "bootstrapMethod" type class_ref 944386 // MethodHandle
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "info" type class_ref 129538 // Object
	  param inout name "callerClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this implements the upcall from the JVM, MethodHandleNatives.makeDynamicCallSite:"
      end

      operation 7169538 "maybeReBox"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7169666 "maybeReBoxElements"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "xa" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 945154 "BoundMethodHandle"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The flavor of method handle which emulates an invoke instruction
on a predetermined argument.  The JVM dispatches to the correct method
when the handle is created, not when it is invoked.

All bound arguments are encapsulated in dedicated species.

non-public"
      classrelation 3180802 // <generalisation>
	relation 3180802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3180802 // <generalisation>
	  b parent class_ref 944386 // MethodHandle
      end

      operation 7158402 "BoundMethodHandle"
	package explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7158530 "bindSingle"
	class_operation package return_type class_ref 945154 // BoundMethodHandle
	nparams 4
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	  param inout name "xtype" explicit_type "BasicType"
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BMH API and internals
"
      end

      operation 7158658 "editor"
	package return_type class_ref 945922 // LambdaFormEditor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7158786 "bindSingle"
	class_operation package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7158914 "bindArgumentL"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " there is a default binder in the super class, for 'L' types only
non-public"
      end

      operation 7159042 "bindArgumentI"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param in name "pos" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7159170 "bindArgumentJ"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param in name "pos" explicit_type "int"
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7159298 "bindArgumentF"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param in name "pos" explicit_type "int"
	  param in name "value" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7159426 "bindArgumentD"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param in name "pos" explicit_type "int"
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7159554 "rebind"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7159682 "tooComplex"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1692546 "FIELD_COUNT_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " largest convenient BMH field count"
      end

      attribute 1692674 "FORM_EXPRESSION_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	init_value " 24"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " largest convenient BMH expression count"
      end

      operation 7159810 "makeReinvoker"
	class_operation package return_type class_ref 945154 // BoundMethodHandle
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A reinvoker MH has this form:
{@code lambda (bmh, arg*) { thismh = bmh[0]; invokeBasic(thismh, arg*) }}
"
      end

      class 946050 "SpeciesData"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3181314 // typeChars (<unidirectional association>)
	  relation 3181314 --->
	    a role_name "typeChars" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3181314 // typeChars (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1692802 "typeCodes"
	  const_attribute private explicit_type "BasicType"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3181442 // clazz (<unidirectional association>)
	  relation 3181442 --->
	    a role_name "clazz" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends BoundMethodHandle> ${name}${value};
"
	      classrelation_ref 3181442 // clazz (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3181570 // constructor (<unidirectional association>)
	  relation 3181570 --->
	    a role_name "constructor" multiplicity "[]" const_relation private
	      comment " Bootstrapping requires circular relations MH -> BMH -> SpeciesData -> MH
 Therefore, we need a non-final link in the chain.  Use array elements.
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      java_annotation "@Stable
"
	      classrelation_ref 3181570 // constructor (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3181698 // getters (<unidirectional association>)
	  relation 3181698 --->
	    a role_name "getters" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      java_annotation "@Stable
"
	      classrelation_ref 3181698 // getters (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3181826 // nominalGetters (<unidirectional association>)
	  relation 3181826 --->
	    a role_name "nominalGetters" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      java_annotation "@Stable
"
	      classrelation_ref 3181826 // nominalGetters (<unidirectional association>)
	    b parent class_ref 946306 // NamedFunction
	end

	classrelation 3181954 // extensions (<unidirectional association>)
	  relation 3181954 --->
	    a role_name "extensions" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      java_annotation "@Stable
"
	      classrelation_ref 3181954 // extensions (<unidirectional association>)
	    b parent class_ref 946050 // SpeciesData
	end

	operation 7162754 "fieldCount"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7162882 "fieldType"
	  package explicit_return_type "BasicType"
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7163010 "fieldTypeChar"
	  package explicit_return_type "char"
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7163138 "fieldSignature"
	  package return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7163266 "fieldHolder"
	  public return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends BoundMethodHandle> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7163394 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7163522 "getterFunction"
	  package return_type class_ref 946306 // NamedFunction
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return a {@link LambdaForm.Name} containing a {@link LambdaForm.NamedFunction} that
represents a MH bound to a generic invoker, which in turn forwards to the corresponding
getter.
"
	end

	operation 7163650 "getterFunctions"
	  package return_type class_ref 946306 // NamedFunction
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7163778 "getterHandles"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7163906 "constructor"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3182082 // EMPTY (<unidirectional association>)
	  relation 3182082 --->
	    a role_name "EMPTY" init_value " new SpeciesData(\"\", BoundMethodHandle.class)" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3182082 // EMPTY (<unidirectional association>)
	    b parent class_ref 946050 // SpeciesData
	end

	operation 7164034 "SpeciesData"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "types" type class_ref 128130 // String
	    param inout name "clazz" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? extends BoundMethodHandle> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7164162 "initForBootstrap"
	  private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3182210 // CACHE (<unidirectional association>)
	  relation 3182210 --->
	    a role_name "CACHE" init_value " new ConcurrentHashMap<>()" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, SpeciesData> ${name}${value};
"
	      classrelation_ref 3182210 // CACHE (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	attribute 1692930 "INIT_DONE"
	  class_attribute const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " set after <clinit> finishes..."
	end

	operation 7164290 "extendWith"
	  package return_type class_ref 946050 // SpeciesData
	  nparams 1
	    param in name "type" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7164418 "extendWith"
	  package return_type class_ref 946050 // SpeciesData
	  nparams 1
	    param inout name "type" explicit_type "BasicType"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7164546 "get"
	  class_operation private return_type class_ref 946050 // SpeciesData
	  nparams 1
	    param inout name "types" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7164674 "speciesDataCachePopulated"
	  class_operation package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "This is to be called when assertions are enabled. It checks whether SpeciesData for all of the statically
defined species subclasses of BoundMethodHandle has been added to the SpeciesData cache. See below in the
static initializer for
"
	end

	extra_member 158722 "initialization"
	  
	  cpp "" ""
	  java "  static {
            // Pre-fill the BMH species-data cache with EMPTY and all BMH's inner subclasses.
            EMPTY.initForBootstrap();
            Species_L.SPECIES_DATA.initForBootstrap();
            // check that all static SpeciesData instances have been initialized
            assert speciesDataCachePopulated();
            // Note:  Do not simplify this, because INIT_DONE must not be
            // a compile-time constant during bootstrapping.
            INIT_DONE = Boolean.TRUE;
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      operation 7159938 "speciesData"
	abstract package return_type class_ref 946050 // SpeciesData
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the {@link SpeciesData} instance representing this BMH species. All subclasses must provide a
static field containing this value, and they must accordingly implement this method.

non-public"
      end

      operation 7160066 "speciesData"
	class_operation package return_type class_ref 946050 // SpeciesData
	nparams 1
	  param inout name "form" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7160194 "fieldCount"
	abstract package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the number of fields in this BMH.  Equivalent to speciesData().fieldCount().

non-public"
      end

      operation 7160322 "internalProperties"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7160450 "internalValues"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7160578 "arg"
	package return_type class_ref 129538 // Object
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7160706 "copyWith"
	abstract package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " cloning API

non-public"
      end

      operation 7160834 "copyWithExtendL"
	abstract package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param inout name "narg" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7160962 "copyWithExtendI"
	abstract package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param in name "narg" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7161090 "copyWithExtendJ"
	abstract package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param in name "narg" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7161218 "copyWithExtendF"
	abstract package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param in name "narg" explicit_type "float"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7161346 "copyWithExtendD"
	abstract package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param in name "narg" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      class 946178 "Species_L"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	comment " make it private to force users to access the enclosing class first"
	classrelation 3180930 // <generalisation>
	  relation 3180930 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3180930 // <generalisation>
	    b parent class_ref 945154 // BoundMethodHandle
	end

	classrelation 3181058 // argL0 (<unidirectional association>)
	  relation 3181058 --->
	    a role_name "argL0" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3181058 // argL0 (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 7161474 "Species_L"
	  private explicit_return_type ""
	  nparams 3
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	    param inout name "argL0" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7161602 "speciesData"
	  package return_type class_ref 946050 // SpeciesData
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7161730 "fieldCount"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "non-public"
	end

	classrelation 3181186 // SPECIES_DATA (<unidirectional association>)
	  relation 3181186 --->
	    a role_name "SPECIES_DATA" init_value " new SpeciesData(\"L\", Species_L.class)" class_relation const_relation package
	      comment "non-public
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3181186 // SPECIES_DATA (<unidirectional association>)
	    b parent class_ref 946050 // SpeciesData
	end

	operation 7161858 "make"
	  class_operation package return_type class_ref 945154 // BoundMethodHandle
	  nparams 3
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	    param inout name "argL0" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7161986 "copyWith"
	  package return_type class_ref 945154 // BoundMethodHandle
	  nparams 2
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7162114 "copyWithExtendL"
	  package return_type class_ref 945154 // BoundMethodHandle
	  nparams 3
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	    param inout name "narg" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7162242 "copyWithExtendI"
	  package return_type class_ref 945154 // BoundMethodHandle
	  nparams 3
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	    param in name "narg" explicit_type "int"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7162370 "copyWithExtendJ"
	  package return_type class_ref 945154 // BoundMethodHandle
	  nparams 3
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	    param in name "narg" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7162498 "copyWithExtendF"
	  package return_type class_ref 945154 // BoundMethodHandle
	  nparams 3
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	    param in name "narg" explicit_type "float"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "non-public"
	end

	operation 7162626 "copyWithExtendD"
	  package return_type class_ref 945154 // BoundMethodHandle
	  nparams 3
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	    param in name "narg" explicit_type "double"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "non-public"
	end
      end

      operation 7164802 "getSpeciesData"
	class_operation package return_type class_ref 946050 // SpeciesData
	nparams 1
	  param inout name "types" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 946434 "Factory"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3182338 // JLO_SIG (<unidirectional association>)
	  relation 3182338 --->
	    a role_name "JLO_SIG" init_value " \"Ljava/lang/Object;\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3182338 // JLO_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3182466 // JLS_SIG (<unidirectional association>)
	  relation 3182466 --->
	    a role_name "JLS_SIG" init_value " \"Ljava/lang/String;\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3182466 // JLS_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3182594 // JLC_SIG (<unidirectional association>)
	  relation 3182594 --->
	    a role_name "JLC_SIG" init_value " \"Ljava/lang/Class;\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3182594 // JLC_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3182722 // MH (<unidirectional association>)
	  relation 3182722 --->
	    a role_name "MH" init_value " \"java/lang/invoke/MethodHandle\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3182722 // MH (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3182850 // MH_SIG (<unidirectional association>)
	  relation 3182850 --->
	    a role_name "MH_SIG" init_value " \"L\"+MH+\";\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3182850 // MH_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3182978 // BMH (<unidirectional association>)
	  relation 3182978 --->
	    a role_name "BMH" init_value " \"java/lang/invoke/BoundMethodHandle\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3182978 // BMH (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3183106 // BMH_SIG (<unidirectional association>)
	  relation 3183106 --->
	    a role_name "BMH_SIG" init_value " \"L\"+BMH+\";\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3183106 // BMH_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3183234 // SPECIES_DATA (<unidirectional association>)
	  relation 3183234 --->
	    a role_name "SPECIES_DATA" init_value " \"java/lang/invoke/BoundMethodHandle$SpeciesData\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3183234 // SPECIES_DATA (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3183362 // SPECIES_DATA_SIG (<unidirectional association>)
	  relation 3183362 --->
	    a role_name "SPECIES_DATA_SIG" init_value " \"L\"+SPECIES_DATA+\";\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3183362 // SPECIES_DATA_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3183490 // STABLE_SIG (<unidirectional association>)
	  relation 3183490 --->
	    a role_name "STABLE_SIG" init_value " \"Ljava/lang/invoke/Stable;\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3183490 // STABLE_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3183618 // SPECIES_PREFIX_NAME (<unidirectional association>)
	  relation 3183618 --->
	    a role_name "SPECIES_PREFIX_NAME" init_value " \"Species_\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3183618 // SPECIES_PREFIX_NAME (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3183746 // SPECIES_PREFIX_PATH (<unidirectional association>)
	  relation 3183746 --->
	    a role_name "SPECIES_PREFIX_PATH" init_value " BMH + \"$\" + SPECIES_PREFIX_NAME" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3183746 // SPECIES_PREFIX_PATH (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3183874 // BMHSPECIES_DATA_EWI_SIG (<unidirectional association>)
	  relation 3183874 --->
	    a role_name "BMHSPECIES_DATA_EWI_SIG" init_value " \"(B)\" + SPECIES_DATA_SIG" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3183874 // BMHSPECIES_DATA_EWI_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3184002 // BMHSPECIES_DATA_GFC_SIG (<unidirectional association>)
	  relation 3184002 --->
	    a role_name "BMHSPECIES_DATA_GFC_SIG" init_value " \"(\" + JLS_SIG + JLC_SIG + \")\" + SPECIES_DATA_SIG" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3184002 // BMHSPECIES_DATA_GFC_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3184130 // MYSPECIES_DATA_SIG (<unidirectional association>)
	  relation 3184130 --->
	    a role_name "MYSPECIES_DATA_SIG" init_value " \"()\" + SPECIES_DATA_SIG" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3184130 // MYSPECIES_DATA_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3184258 // VOID_SIG (<unidirectional association>)
	  relation 3184258 --->
	    a role_name "VOID_SIG" init_value " \"()V\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3184258 // VOID_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3184386 // INT_SIG (<unidirectional association>)
	  relation 3184386 --->
	    a role_name "INT_SIG" init_value " \"()I\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3184386 // INT_SIG (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3184514 // SIG_INCIPIT (<unidirectional association>)
	  relation 3184514 --->
	    a role_name "SIG_INCIPIT" init_value " \"(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;\"" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3184514 // SIG_INCIPIT (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3184642 // E_THROWABLE (<unidirectional association>)
	  relation 3184642 --->
	    a role_name "E_THROWABLE" multiplicity "[]" init_value " new String[] { \"java/lang/Throwable\" }" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3184642 // E_THROWABLE (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3184770 // CLASS_CACHE (<unidirectional association>)
	  relation 3184770 --->
	    a role_name "CLASS_CACHE" init_value " new ConcurrentHashMap<>()" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Class<? extends BoundMethodHandle>> ${name}${value};
"
	      classrelation_ref 3184770 // CLASS_CACHE (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	operation 7164930 "getConcreteBMHClass"
	  class_operation package return_type class_ref 130818 // Class
	  nparams 1
	    param inout name "types" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends BoundMethodHandle> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get a concrete subclass of BMH for a given combination of bound types.

@param types the type signature, wherein reference types are erased to 'L'
@return the concrete BMH class
"
	end

	operation 7165058 "generateConcreteBMHClass"
	  class_operation package return_type class_ref 130818 // Class
	  nparams 1
	    param inout name "types" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends BoundMethodHandle> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Generate a concrete subclass of BMH for a given combination of bound types.

A concrete BMH species adheres to the following schema:

<pre>
class Species_[[types]] extends BoundMethodHandle {
    [[fields]]
    final SpeciesData speciesData() { return SpeciesData.get(\"[[types]]\"); }
}
</pre>

The {@code [[types]]} signature is precisely the string that is passed to this
method.

The {@code [[fields]]} section consists of one field definition per character in
the type signature, adhering to the naming schema described in the definition of
{@link #makeFieldName}.

For example, a concrete BMH species for two reference and one integral bound values
would have the following shape:

<pre>
class BoundMethodHandle { ... private static
final class Species_LLI extends BoundMethodHandle {
    final Object argL0;
    final Object argL1;
    final int argI2;
    private Species_LLI(MethodType mt, LambdaForm lf, Object argL0, Object argL1, int argI2) {
        super(mt, lf);
        this.argL0 = argL0;
        this.argL1 = argL1;
        this.argI2 = argI2;
    }
    final SpeciesData speciesData() { return SPECIES_DATA; }
    final int fieldCount() { return 3; }
    &#64;Stable static SpeciesData SPECIES_DATA; // injected afterwards
    static BoundMethodHandle make(MethodType mt, LambdaForm lf, Object argL0, Object argL1, int argI2) {
        return new Species_LLI(mt, lf, argL0, argL1, argI2);
    }
    final BoundMethodHandle copyWith(MethodType mt, LambdaForm lf) {
        return new Species_LLI(mt, lf, argL0, argL1, argI2);
    }
    final BoundMethodHandle copyWithExtendL(MethodType mt, LambdaForm lf, Object narg) {
        return SPECIES_DATA.extendWith(L_TYPE).constructor().invokeBasic(mt, lf, argL0, argL1, argI2, narg);
    }
    final BoundMethodHandle copyWithExtendI(MethodType mt, LambdaForm lf, int narg) {
        return SPECIES_DATA.extendWith(I_TYPE).constructor().invokeBasic(mt, lf, argL0, argL1, argI2, narg);
    }
    final BoundMethodHandle copyWithExtendJ(MethodType mt, LambdaForm lf, long narg) {
        return SPECIES_DATA.extendWith(J_TYPE).constructor().invokeBasic(mt, lf, argL0, argL1, argI2, narg);
    }
    final BoundMethodHandle copyWithExtendF(MethodType mt, LambdaForm lf, float narg) {
        return SPECIES_DATA.extendWith(F_TYPE).constructor().invokeBasic(mt, lf, argL0, argL1, argI2, narg);
    }
    public final BoundMethodHandle copyWithExtendD(MethodType mt, LambdaForm lf, double narg) {
        return SPECIES_DATA.extendWith(D_TYPE).constructor().invokeBasic(mt, lf, argL0, argL1, argI2, narg);
    }
}
</pre>

@param types the type signature, wherein reference types are erased to 'L'
@return the generated concrete BMH class
"
	end

	operation 7165186 "typeLoadOp"
	  class_operation private explicit_return_type "int"
	  nparams 1
	    param in name "t" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7165314 "emitPushFields"
	  class_operation private explicit_return_type "void"
	  nparams 3
	    param inout name "types" type class_ref 128130 // String
	    param inout name "className" type class_ref 128130 // String
	    param inout name "mv" explicit_type "MethodVisitor"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7165442 "typeSig"
	  class_operation package return_type class_ref 128130 // String
	  nparams 1
	    param in name "t" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7165570 "makeGetter"
	  class_operation private return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "cbmhClass" type class_ref 130818 // Class
	    param inout name "types" type class_ref 128130 // String
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Getter MH generation.
"
	end

	operation 7165698 "makeGetters"
	  class_operation package return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "cbmhClass" type class_ref 130818 // Class
	    param inout name "types" type class_ref 128130 // String
	    param inout name "mhs" type class_ref 944386 // MethodHandle
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7165826 "makeCtors"
	  class_operation package return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "cbmh" type class_ref 130818 // Class
	    param inout name "types" type class_ref 128130 // String
	    param inout name "mhs" type class_ref 944386 // MethodHandle
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<? extends BoundMethodHandle> ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7165954 "makeNominalGetters"
	  class_operation package return_type class_ref 946306 // NamedFunction
	  nparams 3
	    param inout name "types" type class_ref 128130 // String
	    param inout name "nfs" type class_ref 946306 // NamedFunction
	  multiplicity "[]"
	    param inout name "getters" type class_ref 944386 // MethodHandle
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7166082 "getSpeciesDataFromConcreteBMHClass"
	  class_operation package return_type class_ref 946050 // SpeciesData
	  nparams 1
	    param inout name "cbmh" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends BoundMethodHandle> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Auxiliary methods.
"
	end

	operation 7166210 "setSpeciesDataToConcreteBMHClass"
	  class_operation package explicit_return_type "void"
	  nparams 2
	    param inout name "cbmh" type class_ref 130818 // Class
	    param inout name "speciesData" type class_ref 946050 // SpeciesData
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends BoundMethodHandle> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7166338 "makeFieldName"
	  class_operation private return_type class_ref 128130 // String
	  nparams 2
	    param inout name "types" type class_ref 128130 // String
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Field names in concrete BMHs adhere to this pattern:
arg + type + index
where type is a single character (L, I, J, F, D).
"
	end

	operation 7166466 "makeSignature"
	  class_operation private return_type class_ref 128130 // String
	  nparams 2
	    param inout name "types" type class_ref 128130 // String
	    param inout name "ctor" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7166594 "makeCbmhCtor"
	  class_operation package return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "cbmh" type class_ref 130818 // Class
	    param inout name "types" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends BoundMethodHandle> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3184898 // LOOKUP (<unidirectional association>)
	relation 3184898 --->
	  a role_name "LOOKUP" init_value " Lookup.IMPL_LOOKUP" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3184898 // LOOKUP (<unidirectional association>)
	  b parent class_ref 944770 // Lookup
      end

      classrelation 3185026 // SPECIES_DATA (<unidirectional association>)
	relation 3185026 --->
	  a role_name "SPECIES_DATA" init_value " SpeciesData.EMPTY" class_relation const_relation package
	    comment "
All subclasses must provide such a value describing their type signature.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3185026 // SPECIES_DATA (<unidirectional association>)
	  b parent class_ref 946050 // SpeciesData
      end

      classrelation 3185154 // SPECIES_DATA_CACHE (<unidirectional association>)
	relation 3185154 --->
	  a role_name "SPECIES_DATA_CACHE" multiplicity "[]" init_value " new SpeciesData[5]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3185154 // SPECIES_DATA_CACHE (<unidirectional association>)
	  b parent class_ref 946050 // SpeciesData
      end

      operation 7166722 "checkCache"
	class_operation private return_type class_ref 946050 // SpeciesData
	nparams 2
	  param in name "size" explicit_type "int"
	  param inout name "types" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7166850 "speciesData_L"
	class_operation package return_type class_ref 946050 // SpeciesData
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7166978 "speciesData_LL"
	class_operation package return_type class_ref 946050 // SpeciesData
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7167106 "speciesData_LLL"
	class_operation package return_type class_ref 946050 // SpeciesData
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7167234 "speciesData_LLLL"
	class_operation package return_type class_ref 946050 // SpeciesData
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7167362 "speciesData_LLLLL"
	class_operation package return_type class_ref 946050 // SpeciesData
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 945410 "LambdaForm"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The symbolic, non-executable form of a method handle's invocation semantics.
It consists of a series of names.
The first N (N=arity) names are parameters,
while any remaining names are temporary values.
Each temporary specifies the application of a function to some arguments.
The functions are method handles, while the arguments are mixes of
constant values and local names.
The result of the lambda is defined as one of the names, often the last one.
<p>
Here is an approximate grammar:
<blockquote><pre>{@code
LambdaForm = \"(\" ArgName* \")=>{\" TempName* Result \"}\"
ArgName = \"a\" N \":\" T
TempName = \"t\" N \":\" T \"=\" Function \"(\" Argument* \");\"
Function = ConstantValue
Argument = NameRef | ConstantValue
Result = NameRef | \"void\"
NameRef = \"a\" N | \"t\" N
N = (any whole number)
T = \"L\" | \"I\" | \"J\" | \"F\" | \"D\" | \"V\"
}</pre></blockquote>
Names are numbered consecutively from left to right starting at zero.
(The letters are merely a taste of syntax sugar.)
Thus, the first temporary (if any) is always numbered N (where N=arity).
Every occurrence of a name reference in an argument list must refer to
a name previously defined within the same lambda.
A lambda has a void result if and only if its result index is -1.
If a temporary has the type \"V\", it cannot be the subject of a NameRef,
even though possesses a number.
Note that all reference types are erased to \"L\", which stands for {@code Object}.
All subword types (boolean, byte, short, char) are erased to \"I\" which is {@code int}.
The other types stand for the usual primitive types.
<p>
Function invocation closely follows the static rules of the Java verifier.
Arguments and return values must exactly match when their \"Name\" types are
considered.
Conversions are allowed only if they do not change the erased type.
<ul>
<li>L = Object: casts are used freely to convert into and out of reference types
<li>I = int: subword types are forcibly narrowed when passed as arguments (see {@code explicitCastArguments})
<li>J = long: no implicit conversions
<li>F = float: no implicit conversions
<li>D = double: no implicit conversions
<li>V = void: a function result may be void if and only if its Name is of type \"V\"
</ul>
Although implicit conversions are not allowed, explicit ones can easily be
encoded by using temporary expressions which call type-transformed identity functions.
<p>
Examples:
<blockquote><pre>{@code
(a0:J)=>{ a0 }
    == identity(long)
(a0:I)=>{ t1:V = System.out#println(a0); void }
    == System.out#println(int)
(a0:L)=>{ t1:V = System.out#println(a0); a0 }
    == identity, with printing side-effect
(a0:L, a1:L)=>{ t2:L = BoundMethodHandle#argument(a0);
                t3:L = BoundMethodHandle#target(a0);
                t4:L = MethodHandle#invoke(t3, t2, a1); t4 }
    == general invoker for unary insertArgument combination
(a0:L, a1:L)=>{ t2:L = FilterMethodHandle#filter(a0);
                t3:L = MethodHandle#invoke(t2, a1);
                t4:L = FilterMethodHandle#target(a0);
                t5:L = MethodHandle#invoke(t4, t3); t5 }
    == general invoker for unary filterArgument combination
(a0:L, a1:L)=>{ ...(same as previous example)...
                t5:L = MethodHandle#invoke(t4, t3, a1); t5 }
    == general invoker for unary/unary foldArgument combination
(a0:L, a1:I)=>{ t2:I = identity(long).asType((int)->long)(a1); t2 }
    == invoker for identity method handle which performs i2l
(a0:L, a1:L)=>{ t2:L = BoundMethodHandle#argument(a0);
                t3:L = Class#cast(t2,a1); t3 }
    == invoker for identity method handle which performs cast
}</pre></blockquote>
<p>
@author John Rose, JSR 292 EG
"
      class 946306 "NamedFunction"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3197314 // member (<unidirectional association>)
	  relation 3197314 --->
	    a role_name "member" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3197314 // member (<unidirectional association>)
	    b parent class_ref 945538 // MemberName
	end

	classrelation 3197442 // resolvedHandle (<unidirectional association>)
	  relation 3197442 --->
	    a role_name "resolvedHandle" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      java_annotation "@Stable
"
	      classrelation_ref 3197442 // resolvedHandle (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3197570 // invoker (<unidirectional association>)
	  relation 3197570 --->
	    a role_name "invoker" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      java_annotation "@Stable
"
	      classrelation_ref 3197570 // invoker (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	operation 7207682 "NamedFunction"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "resolvedHandle" type class_ref 944386 // MethodHandle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7207810 "NamedFunction"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "member" type class_ref 945538 // MemberName
	    param inout name "resolvedHandle" type class_ref 944386 // MethodHandle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7207938 "NamedFunction"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "basicInvokerType" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7208066 "isInvokeBasic"
	  class_operation private explicit_return_type "boolean"
	  nparams 1
	    param inout name "member" type class_ref 945538 // MemberName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7208194 "NamedFunction"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "method" type class_ref 137858 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " The next 3 constructors are used to break circular dependencies on MH.invokeStatic, etc.
 Any LambdaForm containing such a member is not interpretable.
 This is OK, since all such LFs are prepared with special primitive vmentry points.
 And even without the resolvedHandle, the name can still be compiled and optimized."
	end

	operation 7208322 "NamedFunction"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "field" type class_ref 189698 // Field
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7208450 "NamedFunction"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "member" type class_ref 945538 // MemberName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7208578 "resolvedHandle"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7208706 "resolve"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7208834 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "other" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7208962 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7209090 "initializeInvokers"
	  class_operation package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Put the predefined NamedFunction invokers into the table."
	end

	operation 7209218 "invoke__V"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	  comment " The following are predefined NamedFunction invokers.  The system must build
 a separate invoker for each distinct signature.
 void return type invokers. "
	end

	operation 7209346 "invoke_L_V"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7209474 "invoke_LL_V"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7209602 "invoke_LLL_V"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7209730 "invoke_LLLL_V"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7209858 "invoke_LLLLL_V"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7209986 "invoke__L"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	  comment " Object return type invokers. "
	end

	operation 7210114 "invoke_L_L"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7210242 "invoke_LL_L"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7210370 "invoke_LLL_L"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7210498 "invoke_LLLL_L"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7210626 "invoke_LLLLL_L"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7210754 "arityCheck"
	  class_operation private explicit_return_type "boolean"
	  nparams 3
	    param in name "arity" explicit_type "int"
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7210882 "arityCheck"
	  class_operation private explicit_return_type "boolean"
	  nparams 4
	    param in name "arity" explicit_type "int"
	    param inout name "rtype" type class_ref 130818 // Class
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3197698 // INVOKER_METHOD_TYPE (<unidirectional association>)
	  relation 3197698 --->
	    a role_name "INVOKER_METHOD_TYPE" init_value "
            MethodType.methodType(Object.class, MethodHandle.class, Object[].class)" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3197698 // INVOKER_METHOD_TYPE (<unidirectional association>)
	    b parent class_ref 944258 // MethodType
	end

	operation 7211010 "computeInvoker"
	  class_operation private return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "typeForm" type class_ref 949506 // MethodTypeForm
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7211138 "invokeWithArguments"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "" explicit_type "Object...arguments"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7211266 "invokeWithArgumentsTracing"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "arguments" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 129922 // Throwable
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	operation 7211394 "invoker"
	  private return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7211522 "checkArgumentTypes"
	  class_operation private explicit_return_type "boolean"
	  nparams 2
	    param inout name "arguments" type class_ref 129538 // Object
	  multiplicity "[]"
	    param inout name "methodType" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7211650 "methodType"
	  package return_type class_ref 944258 // MethodType
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7211778 "member"
	  package return_type class_ref 945538 // MemberName
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7211906 "assertMemberIsConsistent"
	  private explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Called only from assert."
	end

	operation 7212034 "memberDeclaringClassOrNull"
	  package return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7212162 "returnType"
	  package return_type class_ref 950018 // BasicType
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7212290 "parameterType"
	  package return_type class_ref 950018 // BasicType
	  nparams 1
	    param in name "n" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7212418 "arity"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7212546 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7212674 "isIdentity"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7212802 "isConstantZero"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7212930 "intrinsicName"
	  public return_type class_ref 945794 // Intrinsic
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 1700610 "arity"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1700738 "result"
	const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1700866 "forceInline"
	const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3196290 // customized (<unidirectional association>)
	relation 3196290 --->
	  a role_name "customized" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3196290 // customized (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      class 949890 "Name"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3197826 // type (<unidirectional association>)
	  relation 3197826 --->
	    a role_name "type" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3197826 // type (<unidirectional association>)
	    b parent class_ref 950018 // BasicType
	end

	attribute 1703042 "index"
	  private explicit_type "short"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3197954 // function (<unidirectional association>)
	  relation 3197954 --->
	    a role_name "function" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3197954 // function (<unidirectional association>)
	    b parent class_ref 946306 // NamedFunction
	end

	classrelation 3198082 // constraint (<unidirectional association>)
	  relation 3198082 --->
	    a role_name "constraint" const_relation package
	      comment " additional type information, if not null"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3198082 // constraint (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3198210 // arguments (<unidirectional association>)
	  relation 3198210 --->
	    a role_name "arguments" multiplicity "[]" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      java_annotation "@Stable
"
	      classrelation_ref 3198210 // arguments (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 7213314 "Name"
	  private explicit_return_type ""
	  nparams 4
	    param in name "index" explicit_type "int"
	    param inout name "type" type class_ref 950018 // BasicType
	    param inout name "function" type class_ref 946306 // NamedFunction
	    param inout name "arguments" type class_ref 129538 // Object
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7213442 "Name"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "that" type class_ref 949890 // Name
	    param inout name "constraint" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7213570 "Name"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "function" type class_ref 944386 // MethodHandle
	    param inout name "" explicit_type "Object...arguments"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7213698 "Name"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "functionType" type class_ref 944258 // MethodType
	    param inout name "" explicit_type "Object...arguments"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7213826 "Name"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "function" type class_ref 945538 // MemberName
	    param inout name "" explicit_type "Object...arguments"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7213954 "Name"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "function" type class_ref 946306 // NamedFunction
	    param inout name "" explicit_type "Object...arguments"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7214082 "Name"
	  package explicit_return_type ""
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "type" type class_ref 950018 // BasicType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Create a raw parameter of the given type, with an expected index. "
	end

	operation 7214210 "Name"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "type" type class_ref 950018 // BasicType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Create a raw parameter of the given type. "
	end

	operation 7214338 "type"
	  package return_type class_ref 950018 // BasicType
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7214466 "index"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7214594 "initIndex"
	  package explicit_return_type "boolean"
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7214722 "typeChar"
	  package explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7214850 "resolve"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7214978 "newIndex"
	  package return_type class_ref 949890 // Name
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7215106 "cloneWithIndex"
	  package return_type class_ref 949890 // Name
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7215234 "withConstraint"
	  package return_type class_ref 949890 // Name
	  nparams 1
	    param inout name "constraint" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7215362 "replaceName"
	  package return_type class_ref 949890 // Name
	  nparams 2
	    param inout name "oldName" type class_ref 949890 // Name
	    param inout name "newName" type class_ref 949890 // Name
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7215490 "replaceNames"
	  package return_type class_ref 949890 // Name
	  nparams 4
	    param inout name "oldNames" type class_ref 949890 // Name
	  multiplicity "[]"
	    param inout name "newNames" type class_ref 949890 // Name
	  multiplicity "[]"
	    param in name "start" explicit_type "int"
	    param in name "end" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " In the arguments of this Name, replace oldNames[i] pairwise by newNames[i].
 Limit such replacements to {@code start<=i<end}.  Return possibly changed self.
"
	end

	operation 7215618 "internArguments"
	  package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7215746 "isParam"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7215874 "isConstantZero"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7216002 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7216130 "debugString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7216258 "paramString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7216386 "exprString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7216514 "typesMatch"
	  class_operation package explicit_return_type "boolean"
	  nparams 2
	    param inout name "parameterType" type class_ref 950018 // BasicType
	    param inout name "object" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7216642 "lastUseIndex"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "n" type class_ref 949890 // Name
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return the index of the last occurrence of n in the argument array.
 Return -1 if the name is not used.
"
	end

	operation 7216770 "useCount"
	  package explicit_return_type "int"
	  nparams 1
	    param inout name "n" type class_ref 949890 // Name
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return the number of occurrences of n in the argument array.
 Return 0 if the name is not used.
"
	end

	operation 7216898 "contains"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "n" type class_ref 949890 // Name
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7217026 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "that" type class_ref 949890 // Name
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7217154 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7217282 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3196418 // names (<unidirectional association>)
	relation 3196418 --->
	  a role_name "names" multiplicity "[]" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    java_annotation "@Stable
"
	    classrelation_ref 3196418 // names (<unidirectional association>)
	  b parent class_ref 949890 // Name
      end

      classrelation 3196546 // debugName (<unidirectional association>)
	relation 3196546 --->
	  a role_name "debugName" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3196546 // debugName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3196674 // vmentry (<unidirectional association>)
	relation 3196674 --->
	  a role_name "vmentry" package
	    comment " low-level behavior, or null if not yet prepared"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3196674 // vmentry (<unidirectional association>)
	  b parent class_ref 945538 // MemberName
      end

      attribute 1700994 "isCompiled"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3196802 // transformCache (<unidirectional association>)
	relation 3196802 --->
	  a role_name "transformCache" volatile package
	    comment " Either a LambdaForm cache (managed by LambdaFormEditor) or a link to uncustomized version (for customized LF)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3196802 // transformCache (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1701122 "VOID_RESULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1701250 "LAST_RESULT"
	class_attribute const_attribute public explicit_type "int"
	init_value " -2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      class 950018 "BasicType"
	visibility package stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1701378 "L_TYPE"
	  public type class_ref 950018 // BasicType
	  cpp_decl ""
	  java_decl "  ${@}${name}('L', Object.class, Wrapper.OBJECT),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1701506 "I_TYPE"
	  public type class_ref 950018 // BasicType
	  cpp_decl ""
	  java_decl "  ${@}${name}('I', int.class,    Wrapper.INT),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " all reference types"
	end

	attribute 1701634 "J_TYPE"
	  public type class_ref 950018 // BasicType
	  cpp_decl ""
	  java_decl "  ${@}${name}('J', long.class,   Wrapper.LONG),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1701762 "F_TYPE"
	  public type class_ref 950018 // BasicType
	  cpp_decl ""
	  java_decl "  ${@}${name}('F', float.class,  Wrapper.FLOAT),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1701890 "D_TYPE"
	  public type class_ref 950018 // BasicType
	  cpp_decl ""
	  java_decl "  ${@}${name}('D', double.class, Wrapper.DOUBLE),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1702018 "V_TYPE"
	  public type class_ref 950018 // BasicType
	  cpp_decl ""
	  java_decl "  ${@}${name}('V', void.class,   Wrapper.VOID),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " all primitive types"
	end

	classrelation 3196930 // ALL_TYPES (<unidirectional association>)
	  relation 3196930 --->
	    a role_name "ALL_TYPES" multiplicity "[]" init_value " BasicType.values()" class_relation const_relation package
	      comment " not valid in all contexts
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3196930 // ALL_TYPES (<unidirectional association>)
	    b parent class_ref 950018 // BasicType
	end

	classrelation 3197058 // ARG_TYPES (<unidirectional association>)
	  relation 3197058 --->
	    a role_name "ARG_TYPES" multiplicity "[]" init_value " Arrays.copyOf(ALL_TYPES, ALL_TYPES.length-1)" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3197058 // ARG_TYPES (<unidirectional association>)
	    b parent class_ref 950018 // BasicType
	end

	attribute 1702146 "ARG_TYPE_LIMIT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " ARG_TYPES.length"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1702274 "TYPE_LIMIT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " ALL_TYPES.length"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1702402 "btChar"
	  const_attribute private explicit_type "char"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3197186 // btClass (<unidirectional association>)
	  relation 3197186 --->
	    a role_name "btClass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3197186 // btClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	attribute 1702530 "btWrapper"
	  const_attribute private explicit_type "Wrapper"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7198082 "BasicType"
	  private explicit_return_type ""
	  nparams 3
	    param in name "btChar" explicit_type "char"
	    param inout name "btClass" type class_ref 130818 // Class
	    param inout name "wrapper" explicit_type "Wrapper"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7198210 "basicTypeChar"
	  package explicit_return_type "char"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7198338 "basicTypeClass"
	  package return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7198466 "basicTypeWrapper"
	  package explicit_return_type "Wrapper"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7198594 "basicTypeSlots"
	  package explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7198722 "basicType"
	  class_operation package return_type class_ref 950018 // BasicType
	  nparams 1
	    param in name "type" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7198850 "basicType"
	  class_operation package return_type class_ref 950018 // BasicType
	  nparams 1
	    param in name "type" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7198978 "basicType"
	  class_operation package return_type class_ref 950018 // BasicType
	  nparams 1
	    param inout name "type" explicit_type "Wrapper"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7199106 "basicType"
	  class_operation package return_type class_ref 950018 // BasicType
	  nparams 1
	    param inout name "type" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7199234 "basicTypeChar"
	  class_operation package explicit_return_type "char"
	  nparams 1
	    param inout name "type" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7199362 "basicTypes"
	  class_operation package return_type class_ref 950018 // BasicType
	  nparams 1
	    param inout name "types" type class_ref 175362 // List
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<Class<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7199490 "basicTypes"
	  class_operation package return_type class_ref 950018 // BasicType
	  nparams 1
	    param inout name "types" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7199618 "basicTypesOrd"
	  class_operation package explicit_return_type "byte"
	  nparams 1
	    param inout name "btypes" type class_ref 950018 // BasicType
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7199746 "isBasicTypeChar"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7199874 "isArgBasicTypeChar"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "c" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	extra_member 160130 "initialization"
	  
	  cpp "" ""
	  java "  static { assert(checkBasicType()); }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	operation 7200002 "checkBasicType"
	  class_operation private explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7200130 "LambdaForm"
	package explicit_return_type ""
	nparams 4
	  param inout name "debugName" type class_ref 128130 // String
	  param in name "arity" explicit_type "int"
	  param inout name "names" type class_ref 949890 // Name
	multiplicity "[]"
	  param in name "result" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7200258 "LambdaForm"
	package explicit_return_type ""
	nparams 6
	  param inout name "debugName" type class_ref 128130 // String
	  param in name "arity" explicit_type "int"
	  param inout name "names" type class_ref 949890 // Name
	multiplicity "[]"
	  param in name "result" explicit_type "int"
	  param inout name "forceInline" explicit_type "boolean"
	  param inout name "customized" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7200386 "LambdaForm"
	package explicit_return_type ""
	nparams 3
	  param inout name "debugName" type class_ref 128130 // String
	  param in name "arity" explicit_type "int"
	  param inout name "names" type class_ref 949890 // Name
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7200514 "LambdaForm"
	package explicit_return_type ""
	nparams 4
	  param inout name "debugName" type class_ref 128130 // String
	  param in name "arity" explicit_type "int"
	  param inout name "names" type class_ref 949890 // Name
	multiplicity "[]"
	  param inout name "forceInline" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7200642 "LambdaForm"
	package explicit_return_type ""
	nparams 4
	  param inout name "debugName" type class_ref 128130 // String
	  param inout name "formals" type class_ref 949890 // Name
	multiplicity "[]"
	  param inout name "temps" type class_ref 949890 // Name
	multiplicity "[]"
	  param inout name "result" type class_ref 949890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7200770 "LambdaForm"
	package explicit_return_type ""
	nparams 5
	  param inout name "debugName" type class_ref 128130 // String
	  param inout name "formals" type class_ref 949890 // Name
	multiplicity "[]"
	  param inout name "temps" type class_ref 949890 // Name
	multiplicity "[]"
	  param inout name "result" type class_ref 949890 // Name
	  param inout name "forceInline" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7200898 "buildNames"
	class_operation private return_type class_ref 949890 // Name
	nparams 3
	  param inout name "formals" type class_ref 949890 // Name
	multiplicity "[]"
	  param inout name "temps" type class_ref 949890 // Name
	multiplicity "[]"
	  param inout name "result" type class_ref 949890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7201026 "LambdaForm"
	private explicit_return_type ""
	nparams 1
	  param inout name "sig" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7201154 "buildEmptyNames"
	class_operation private return_type class_ref 949890 // Name
	nparams 2
	  param in name "arity" explicit_type "int"
	  param inout name "basicTypeSignature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7201282 "fixResult"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "result" explicit_type "int"
	  param inout name "names" type class_ref 949890 // Name
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7201410 "fixDebugName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "debugName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7201538 "namesOK"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "arity" explicit_type "int"
	  param inout name "names" type class_ref 949890 // Name
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7201666 "customize"
	package return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "mh" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Customize LambdaForm for a particular MethodHandle "
      end

      operation 7201794 "uncustomize"
	package return_type class_ref 945410 // LambdaForm
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get uncustomized flavor of the LambdaForm "
      end

      operation 7201922 "normalize"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Renumber and/or replace params so that they are interned and canonically numbered.
 @return maximum argument list length among the names (since we have to pass over them anyway)
"
      end

      operation 7202050 "nameRefsAreLegal"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check that all embedded Name references are localizable to this lambda,
and are properly ordered after their corresponding definitions.
<p>
Note that a Name can be local to multiple lambdas, as long as
it possesses the same index in each use site.
This allows Name references to be freely reused to construct
fresh lambdas, without confusion.
"
      end

      operation 7202178 "returnType"
	package return_type class_ref 950018 // BasicType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Invoke this form on the given arguments. 
 final Object invoke(Object... args) throws Throwable {
     // NYI: fit this into the fast path?
     return interpretWithArguments(args);
 }
 Report the return type. "
      end

      operation 7202306 "parameterType"
	package return_type class_ref 950018 // BasicType
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Report the N-th argument type. "
      end

      operation 7202434 "parameter"
	package return_type class_ref 949890 // Name
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Report the N-th argument name. "
      end

      operation 7202562 "parameterConstraint"
	package return_type class_ref 129538 // Object
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Report the N-th argument type constraint. "
      end

      operation 7202690 "arity"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Report the arity. "
      end

      operation 7202818 "expressionCount"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Report the number of expressions (non-parameter names). "
      end

      operation 7202946 "methodType"
	package return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the method type corresponding to my basic type signature. "
      end

      operation 7203074 "basicTypeSignature"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return ABC_Z, where the ABC are parameter type characters, and Z is the return type character. "
      end

      operation 7203202 "signatureArity"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "sig" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7203330 "signatureReturn"
	class_operation package return_type class_ref 950018 // BasicType
	nparams 1
	  param inout name "sig" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7203458 "isValidSignature"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "sig" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7203586 "signatureType"
	class_operation package return_type class_ref 944258 // MethodType
	nparams 1
	  param inout name "sig" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7203714 "prepare"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Code generation issues:

Compiled LFs should be reusable in general.
The biggest issue is how to decide when to pull a name into
the bytecode, versus loading a reified form from the MH data.

For example, an asType wrapper may require execution of a cast
after a call to a MH.  The target type of the cast can be placed
as a constant in the LF itself.  This will force the cast type
to be compiled into the bytecodes and native code for the MH.
Or, the target type of the cast can be erased in the LF, and
loaded from the MH data.  (Later on, if the MH as a whole is
inlined, the data will flow into the inlined instance of the LF,
as a constant, and the end result will be an optimal cast.)

This erasure of cast types can be done with any use of
reference types.  It can also be done with whole method
handles.  Erasing a method handle might leave behind
LF code that executes correctly for any MH of a given
type, and load the required MH from the enclosing MH's data.
Or, the erasure might even erase the expected MT.

Also, for direct MHs, the MemberName of the target
could be erased, and loaded from the containing direct MH.
As a simple case, a LF for all int-valued non-static
field getters would perform a cast on its input argument
(to non-constant base type derived from the MemberName)
and load an integer value from the input object
(at a non-constant offset also derived from the MemberName).
Such MN-erased LFs would be inlinable back to optimized
code, whenever a constant enclosing DMH is available
to supply a constant MN from its data.

The main problem here is to keep LFs reasonably generic,
while ensuring that hot spots will inline good instances.
\"Reasonably generic\" means that we don't end up with
repeated versions of bytecode or machine code that do
not differ in their optimized form.  Repeated versions
of machine would have the undesirable overheads of
(a) redundant compilation work and (b) extra I$ pressure.
To control repeated versions, we need to be ready to
erase details from LFs and move them into MH data,
whevener those details are not relevant to significant
optimization.  \"Significant\" means optimization of
code that is actually hot.

Achieving this may require dynamic splitting of MHs, by replacing
a generic LF with a more specialized one, on the same MH,
if (a) the MH is frequently executed and (b) the MH cannot
be inlined into a containing caller, such as an invokedynamic.

Compiled LFs that are no longer used should be GC-able.
If they contain non-BCP references, they should be properly
interlinked with the class loader(s) that their embedded types
depend on.  This probably means that reusable compiled LFs
will be tabulated (indexed) on relevant class loaders,
or else that the tables that cache them will have weak links.


Make this LF directly executable, as part of a MethodHandle.
Invariant:  Every MH which is invoked must prepare its LF
before invocation.
(In principle, the JVM could do this very lazily,
as a sort of pre-invocation linkage step.)
"
      end

      operation 7203842 "compileToBytecode"
	package return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generate optimizable bytecode for this form. "
      end

      operation 7203970 "computeInitialPreparedForms"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1702658 "USE_PREDEFINED_INTERPRET_METHODS"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Set this false to disable use of the interpret_L methods defined in this file.
"
      end

      operation 7204098 "interpret_L"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "mh" type class_ref 944386 // MethodHandle
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The following are predefined exact invokers.  The system must build
 a separate invoker for each distinct signature."
      end

      operation 7204226 "interpret_L"
	class_operation package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "mh" type class_ref 944386 // MethodHandle
	  param inout name "x1" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7204354 "interpret_L"
	class_operation package return_type class_ref 129538 // Object
	nparams 3
	  param inout name "mh" type class_ref 944386 // MethodHandle
	  param inout name "x1" type class_ref 129538 // Object
	  param inout name "x2" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7204482 "getPreparedForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "sig" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7204610 "argumentTypesMatch"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "sig" type class_ref 128130 // String
	  param inout name "av" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The next few routines are called only from assert expressions
 They verify that the built-in invokers process the correct raw data types."
      end

      operation 7204738 "valueMatches"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "tc" type class_ref 950018 // BasicType
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7204866 "returnTypesMatch"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "sig" type class_ref 128130 // String
	  param inout name "av" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "res" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7204994 "checkInt"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7205122 "checkRef"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1702786 "COMPILE_THRESHOLD"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If the invocation count hits the threshold we spin bytecodes and call that subsequently. 
"
      end

      extra_member 160258 "initialization"
	
	cpp "" ""
	java "  static {
        COMPILE_THRESHOLD = Math.max(-1, MethodHandleStatics.COMPILE_THRESHOLD);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1702914 "invocationCounter"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7205250 "interpretWithArguments"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...argumentValues"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Hidden
@DontInline
"
	
	
	
      end

      operation 7205378 "interpretName"
	package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 949890 // Name
	  param inout name "values" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Hidden
@DontInline
"
	
	
	
      end

      operation 7205506 "checkInvocationCounter"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7205634 "interpretWithArgumentsTracing"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...argumentValues"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7205762 "traceInterpreter"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "event" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "" explicit_type "Object...args"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7205890 "traceInterpreter"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "event" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7206018 "arityCheck"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "argumentValues" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7206146 "resultCheck"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "argumentValues" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "result" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7206274 "isEmpty"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7206402 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7206530 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7206658 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7206786 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7206914 "editor"
	package return_type class_ref 945922 // LambdaFormEditor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7207042 "contains"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 949890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7207170 "addArguments"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "" explicit_type "BasicType...types"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7207298 "addArguments"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "types" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7207426 "permuteArguments"
	package return_type class_ref 945410 // LambdaForm
	nparams 3
	  param in name "skip" explicit_type "int"
	  param inout name "reorder" explicit_type "int"
	multiplicity "[]"
	  param inout name "types" type class_ref 950018 // BasicType
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7207554 "permutedTypesMatch"
	class_operation package explicit_return_type "boolean"
	nparams 4
	  param inout name "reorder" explicit_type "int"
	multiplicity "[]"
	  param inout name "types" type class_ref 950018 // BasicType
	multiplicity "[]"
	  param inout name "names" type class_ref 949890 // Name
	multiplicity "[]"
	  param in name "skip" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7213058 "basicTypeSignature"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7213186 "shortenSignature"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "signature" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7217410 "lastUseIndex"
	package explicit_return_type "int"
	nparams 1
	  param inout name "n" type class_ref 949890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the index of the last name which contains n as an argument.
 Return -1 if the name is not used.  Return names.length if it is the return value.
"
      end

      operation 7217538 "useCount"
	package explicit_return_type "int"
	nparams 1
	  param inout name "n" type class_ref 949890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the number of times n is used as an argument or return value. "
      end

      operation 7217666 "argument"
	class_operation package return_type class_ref 949890 // Name
	nparams 2
	  param in name "which" explicit_type "int"
	  param in name "type" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7217794 "argument"
	class_operation package return_type class_ref 949890 // Name
	nparams 2
	  param in name "which" explicit_type "int"
	  param inout name "type" type class_ref 950018 // BasicType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7217922 "internArgument"
	class_operation package return_type class_ref 949890 // Name
	nparams 1
	  param inout name "n" type class_ref 949890 // Name
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7218050 "arguments"
	class_operation package return_type class_ref 949890 // Name
	nparams 2
	  param in name "extra" explicit_type "int"
	  param inout name "types" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7218178 "arguments"
	class_operation package return_type class_ref 949890 // Name
	nparams 2
	  param in name "extra" explicit_type "int"
	  param inout name "" explicit_type "char...types"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7218306 "arguments"
	class_operation package return_type class_ref 949890 // Name
	nparams 2
	  param in name "extra" explicit_type "int"
	  param inout name "types" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}<Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7218434 "arguments"
	class_operation package return_type class_ref 949890 // Name
	nparams 2
	  param in name "extra" explicit_type "int"
	  param inout name "types" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7218562 "arguments"
	class_operation package return_type class_ref 949890 // Name
	nparams 2
	  param in name "extra" explicit_type "int"
	  param inout name "types" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1703170 "INTERNED_ARGUMENT_LIMIT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3198338 // INTERNED_ARGUMENTS (<unidirectional association>)
	relation 3198338 --->
	  a role_name "INTERNED_ARGUMENTS" multiplicity "[][]" init_value " new Name[ARG_TYPE_LIMIT][INTERNED_ARGUMENT_LIMIT]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3198338 // INTERNED_ARGUMENTS (<unidirectional association>)
	  b parent class_ref 949890 // Name
      end

      extra_member 160386 "initialization"
	
	cpp "" ""
	java "  static {
        for (BasicType type : BasicType.ARG_TYPES) {
            int ord = type.ordinal();
            for (int i = 0; i < INTERNED_ARGUMENTS[ord].length; i++) {
                INTERNED_ARGUMENTS[ord][i] = new Name(i, type);
            }
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3198466 // IMPL_NAMES (<unidirectional association>)
	relation 3198466 --->
	  a role_name "IMPL_NAMES" init_value " MemberName.getFactory()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3198466 // IMPL_NAMES (<unidirectional association>)
	  b parent class_ref 947074 // Factory
      end

      operation 7218690 "identityForm"
	class_operation package return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "type" type class_ref 950018 // BasicType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7218818 "zeroForm"
	class_operation package return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "type" type class_ref 950018 // BasicType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7218946 "identity"
	class_operation package return_type class_ref 946306 // NamedFunction
	nparams 1
	  param inout name "type" type class_ref 950018 // BasicType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7219074 "constantZero"
	class_operation package return_type class_ref 946306 // NamedFunction
	nparams 1
	  param inout name "type" type class_ref 950018 // BasicType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3198594 // LF_identityForm (<unidirectional association>)
	relation 3198594 --->
	  a role_name "LF_identityForm" multiplicity "[]" init_value " new LambdaForm[TYPE_LIMIT]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3198594 // LF_identityForm (<unidirectional association>)
	  b parent class_ref 945410 // LambdaForm
      end

      classrelation 3198722 // LF_zeroForm (<unidirectional association>)
	relation 3198722 --->
	  a role_name "LF_zeroForm" multiplicity "[]" init_value " new LambdaForm[TYPE_LIMIT]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3198722 // LF_zeroForm (<unidirectional association>)
	  b parent class_ref 945410 // LambdaForm
      end

      classrelation 3198850 // NF_identity (<unidirectional association>)
	relation 3198850 --->
	  a role_name "NF_identity" multiplicity "[]" init_value " new NamedFunction[TYPE_LIMIT]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3198850 // NF_identity (<unidirectional association>)
	  b parent class_ref 946306 // NamedFunction
      end

      classrelation 3198978 // NF_zero (<unidirectional association>)
	relation 3198978 --->
	  a role_name "NF_zero" multiplicity "[]" init_value " new NamedFunction[TYPE_LIMIT]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3198978 // NF_zero (<unidirectional association>)
	  b parent class_ref 946306 // NamedFunction
      end

      operation 7219202 "createIdentityForms"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7219330 "identity_I"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "x" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Avoid appealing to ValueConversions at bootstrap time:"
      end

      operation 7219458 "identity_J"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "x" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7219586 "identity_F"
	class_operation private explicit_return_type "float"
	nparams 1
	  param in name "x" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7219714 "identity_D"
	class_operation private explicit_return_type "double"
	nparams 1
	  param in name "x" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7219842 "identity_L"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7219970 "identity_V"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7220098 "zero_I"
	class_operation private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " same as zeroV, but that's OK"
      end

      operation 7220226 "zero_J"
	class_operation private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7220354 "zero_F"
	class_operation private explicit_return_type "float"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7220482 "zero_D"
	class_operation private explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7220610 "zero_L"
	class_operation private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7220738 "zero_V"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 950146 "Compiled"
	visibility package stereotype "@interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
	java_annotation "@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 950274 "Hidden"
	visibility package stereotype "@interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
	java_annotation "@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      classrelation 3199106 // DEBUG_NAME_COUNTERS (<unidirectional association>)
	relation 3199106 --->
	  a role_name "DEBUG_NAME_COUNTERS" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Integer> ${name}${value};
"
	    classrelation_ref 3199106 // DEBUG_NAME_COUNTERS (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      extra_member 160514 "initialization"
	
	cpp "" ""
	java "  static {
        if (debugEnabled())
            DEBUG_NAME_COUNTERS = new HashMap<>();
        else
            DEBUG_NAME_COUNTERS = null;
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      extra_member 160642 "initialization"
	
	cpp "" ""
	java "  static {
        createIdentityForms();
        if (USE_PREDEFINED_INTERPRET_METHODS)
            computeInitialPreparedForms();
        NamedFunction.initializeInvokers();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1703298 "TRACE_INTERPRETER"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " MethodHandleStatics.TRACE_INTERPRETER"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The following hack is necessary in order to suppress TRACE_INTERPRETER
 during execution of the static initializes of this class.
 Turning on TRACE_INTERPRETER too early will cause
 stack overflows and other misbehavior during attempts to trace events
 that occur during LambdaForm.<clinit>.
 Therefore, do not move this line higher in this file, and do not remove.
"
      end
    end

    class 945538 "MemberName"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code MemberName} is a compact symbolic datum which fully characterizes
a method or field reference.
A member name refers to a field, method, constructor, or member type.
Every member name has a simple name (a string) and a type (either a Class or MethodType).
A member name may also have a non-null declaring class, or it may be simply
a naked name/type pair.
A member name may also have non-zero modifier flags.
Finally, a member name may be either resolved or unresolved.
If it is resolved, the existence of the named
<p>
Whether resolved or not, a member name provides no access rights or
invocation capability to its possessor.  It is merely a compact
representation of all symbolic information necessary to link to
and properly use the named member.
<p>
When resolved, a member name's internal implementation may include references to JVM metadata.
This representation is stateless and only decriptive.
It provides no private information and no capability to use the member.
<p>
By contrast, a {@linkplain java.lang.reflect.Method} contains fuller information
about the internals of a method (except its bytecodes) and also
allows invocation.  A MemberName is much lighter than a Method,
since it contains about 7 fields to the 16 of Method (plus its sub-arrays),
and those seven fields omit much of the information in Method.
@author jrose

non-public"
      class 947074 "Factory"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7242114 "Factory"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3200898 // INSTANCE (<unidirectional association>)
	  relation 3200898 --->
	    a role_name "INSTANCE" init_value " new Factory()" class_relation package
	      comment " singleton pattern
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3200898 // INSTANCE (<unidirectional association>)
	    b parent class_ref 947074 // Factory
	end

	attribute 1710466 "ALLOWED_FLAGS"
	  class_attribute private explicit_type "int"
	  init_value " ALL_KINDS"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7242242 "getMembers"
	  package return_type class_ref 175362 // List
	  nparams 5
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "matchName" type class_ref 128130 // String
	    param inout name "matchType" type class_ref 129538 // Object
	    param in name "matchFlags" explicit_type "int"
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemberName> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ Queries"
	end

	operation 7242370 "resolve"
	  private return_type class_ref 945538 // MemberName
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "ref" type class_ref 945538 // MemberName
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Produce a resolved version of the given member.
 Super types are searched (for inherited members) if {@code searchSupers} is true.
 Access checking is performed on behalf of the given {@code lookupClass}.
 If lookup fails or access is not permitted, null is returned.
 Otherwise a fresh copy of the given member is returned, with modifier bits filled in.
"
	end

	operation 7242498 "resolveOrFail"
	  public return_type class_ref 945538 // MemberName
	  nparams 4
	    param in name "refKind" explicit_type "byte"
	    param inout name "m" type class_ref 945538 // MemberName
	    param inout name "lookupClass" type class_ref 130818 // Class
	    param inout name "nsmClass" type class_ref 130818 // Class
	  nexceptions 2
	    exception class_ref 321538 // IllegalAccessException
	    explicit_exception "NoSuchMemberException"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<NoSuchMemberException extends ReflectiveOperationException> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3}<NoSuchMemberException> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Produce a resolved version of the given member.
 Super types are searched (for inherited members) if {@code searchSupers} is true.
 Access checking is performed on behalf of the given {@code lookupClass}.
 If lookup fails or access is not permitted, a {@linkplain ReflectiveOperationException} is thrown.
 Otherwise a fresh copy of the given member is returned, with modifier bits filled in.
"
	end

	operation 7242626 "resolveOrNull"
	  public return_type class_ref 945538 // MemberName
	  nparams 3
	    param in name "refKind" explicit_type "byte"
	    param inout name "m" type class_ref 945538 // MemberName
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Produce a resolved version of the given member.
 Super types are searched (for inherited members) if {@code searchSupers} is true.
 Access checking is performed on behalf of the given {@code lookupClass}.
 If lookup fails or access is not permitted, return null.
 Otherwise a fresh copy of the given member is returned, with modifier bits filled in.
"
	end

	operation 7242754 "getMethods"
	  public return_type class_ref 175362 // List
	  nparams 3
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "searchSupers" explicit_type "boolean"
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemberName> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return a list of all methods defined by the given class.
 Super types are searched (for inherited members) if {@code searchSupers} is true.
 Access checking is performed on behalf of the given {@code lookupClass}.
 Inaccessible members are not added to the last.
"
	end

	operation 7242882 "getMethods"
	  public return_type class_ref 175362 // List
	  nparams 5
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "searchSupers" explicit_type "boolean"
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 944258 // MethodType
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemberName> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return a list of matching methods defined by the given class.
 Super types are searched (for inherited members) if {@code searchSupers} is true.
 Returned methods will match the name (if not null) and the type (if not null).
 Access checking is performed on behalf of the given {@code lookupClass}.
 Inaccessible members are not added to the last.
"
	end

	operation 7243010 "getConstructors"
	  public return_type class_ref 175362 // List
	  nparams 2
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemberName> ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return a list of all constructors defined by the given class.
 Access checking is performed on behalf of the given {@code lookupClass}.
 Inaccessible members are not added to the last.
"
	end

	operation 7243138 "getFields"
	  public return_type class_ref 175362 // List
	  nparams 3
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "searchSupers" explicit_type "boolean"
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemberName> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return a list of all fields defined by the given class.
 Super types are searched (for inherited members) if {@code searchSupers} is true.
 Access checking is performed on behalf of the given {@code lookupClass}.
 Inaccessible members are not added to the last.
"
	end

	operation 7243266 "getFields"
	  public return_type class_ref 175362 // List
	  nparams 5
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "searchSupers" explicit_type "boolean"
	    param inout name "name" type class_ref 128130 // String
	    param inout name "type" type class_ref 130818 // Class
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemberName> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<?> ${p3}, ${t4}<?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return a list of all fields defined by the given class.
 Super types are searched (for inherited members) if {@code searchSupers} is true.
 Returned fields will match the name (if not null) and the type (if not null).
 Access checking is performed on behalf of the given {@code lookupClass}.
 Inaccessible members are not added to the last.
"
	end

	operation 7243394 "getNestedTypes"
	  public return_type class_ref 175362 // List
	  nparams 3
	    param inout name "defc" type class_ref 130818 // Class
	    param inout name "searchSupers" explicit_type "boolean"
	    param inout name "lookupClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<MemberName> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return a list of all nested types defined by the given class.
 Super types are searched (for inherited members) if {@code searchSupers} is true.
 Access checking is performed on behalf of the given {@code lookupClass}.
 Inaccessible members are not added to the last.
"
	end

	operation 7243522 "newMemberBuffer"
	  class_operation private return_type class_ref 945538 // MemberName
	  nparams 1
	    param in name "length" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3200002 // <realization>
	relation 3200002 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3200002 // <realization>
	  b parent class_ref 194690 // Member
      end

      classrelation 3200130 // <realization>
	relation 3200130 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3200130 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 3200258 // clazz (<unidirectional association>)
	relation 3200258 --->
	  a role_name "clazz" private
	    comment " class in which the method is defined"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3200258 // clazz (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3200386 // name (<unidirectional association>)
	relation 3200386 --->
	  a role_name "name" private
	    comment " may be null if not yet materialized"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3200386 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3200514 // type (<unidirectional association>)
	relation 3200514 --->
	  a role_name "type" private
	    comment " may be null if not yet materialized"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3200514 // type (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 1708162 "flags"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " modifier bits; see reflect.Modifier"
      end

      classrelation 3200642 // resolution (<unidirectional association>)
	relation 3200642 --->
	  a role_name "resolution" private
	    comment "@Injected JVM_Method* vmtarget;
@Injected int         vmindex;
 if null, this guy is resolved"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3200642 // resolution (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 7231746 "getDeclaringClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the declaring class of this member.
 In the case of a bare name and type, the declaring class will be null.
"
      end

      operation 7231874 "getClassLoader"
	public return_type class_ref 129026 // ClassLoader
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method producing the class loader of the declaring class. "
      end

      operation 7232002 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the simple name of this member.
 For a type, it is the same as {@link Class#getSimpleName}.
 For a method or field, it is the simple name of the member.
 For a constructor, it is always {@code \"<init>\"}.
"
      end

      operation 7232130 "getMethodOrFieldType"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7232258 "getMethodType"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the declared type of this member, which
 must be a method or constructor.
"
      end

      operation 7232386 "getInvocationType"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the actual type under which this method or constructor must be invoked.
 For non-static methods or constructors, this is the type with a leading parameter,
 a reference to declaring class.  For static methods, it is the same as the declared type.
"
      end

      operation 7232514 "getParameterTypes"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method producing the parameter types of the method type. "
      end

      operation 7232642 "getReturnType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method producing the return type of the method type. "
      end

      operation 7232770 "getFieldType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the declared type of this member, which
 must be a field or type.
 If it is a type member, that type itself is returned.
"
      end

      operation 7232898 "getType"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to produce either the method type or field type of this member. "
      end

      operation 7233026 "getSignature"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to produce the signature of this member,
 used within the class file format to describe its type.
"
      end

      operation 7233154 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the modifier flags of this member.
 @see java.lang.reflect.Modifier
"
      end

      operation 7233282 "getReferenceKind"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the reference kind of this member, or zero if none.
"
      end

      operation 7233410 "referenceKindIsConsistent"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7233538 "isObjectPublicMethod"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7233666 "referenceKindIsConsistentWith"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "originalRefKind" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7233794 "staticIsConsistent"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7233922 "vminfoIsConsistent"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7234050 "changeReferenceKind"
	private return_type class_ref 945538 // MemberName
	nparams 2
	  param in name "refKind" explicit_type "byte"
	  param in name "oldKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7234178 "testFlags"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "mask" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7234306 "testAllFlags"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7234434 "testAnyFlags"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "mask" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7234562 "isMethodHandleInvoke"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query if this member is a method handle invocation (invoke or invokeExact).
"
      end

      operation 7234690 "isMethodHandleInvokeName"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1708290 "MH_INVOKE_MODS"
	class_attribute const_attribute private explicit_type "int"
	init_value " Modifier.NATIVE | Modifier.FINAL | Modifier.PUBLIC"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7234818 "isStatic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member. "
      end

      operation 7234946 "isPublic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member. "
      end

      operation 7235074 "isPrivate"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member. "
      end

      operation 7235202 "isProtected"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member. "
      end

      operation 7235330 "isFinal"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member. "
      end

      operation 7235458 "canBeStaticallyBound"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query whether this member or its defining class is final. "
      end

      operation 7235586 "isVolatile"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member. "
      end

      operation 7235714 "isAbstract"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member. "
      end

      operation 7235842 "isNative"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member. "
      end

      attribute 1708418 "BRIDGE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00000040"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " let the rest (native, volatile, transient, etc.) be tested via Modifier.isFoo
 unofficial modifier flags, used by HotSpot:
"
      end

      attribute 1708546 "VARARGS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00000080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1708674 "SYNTHETIC"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00001000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1708802 "ANNOTATION"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00002000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1708930 "ENUM"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00004000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7235970 "isBridge"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member; returns false if the member is not a method. "
      end

      operation 7236098 "isVarargs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member; returns false if the member is not a method. "
      end

      operation 7236226 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query the modifier flags of this member; returns false if the member is not a method. "
      end

      classrelation 3200770 // CONSTRUCTOR_NAME (<unidirectional association>)
	relation 3200770 --->
	  a role_name "CONSTRUCTOR_NAME" init_value " \"<init>\"" class_relation const_relation package
	    comment " the ever-popular"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3200770 // CONSTRUCTOR_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1709058 "RECOGNIZED_MODIFIERS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0xFFFF"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " modifiers exported by the JVM:
"
      end

      attribute 1709186 "IS_METHOD"
	class_attribute const_attribute package explicit_type "int"
	init_value " MN_IS_METHOD"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " private flags, not part of RECOGNIZED_MODIFIERS:
 method (not constructor)"
      end

      attribute 1709314 "IS_CONSTRUCTOR"
	class_attribute const_attribute package explicit_type "int"
	init_value " MN_IS_CONSTRUCTOR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " private flags, not part of RECOGNIZED_MODIFIERS:
 constructor"
      end

      attribute 1709442 "IS_FIELD"
	class_attribute const_attribute package explicit_type "int"
	init_value " MN_IS_FIELD"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " private flags, not part of RECOGNIZED_MODIFIERS:
 field"
      end

      attribute 1709570 "IS_TYPE"
	class_attribute const_attribute package explicit_type "int"
	init_value " MN_IS_TYPE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " private flags, not part of RECOGNIZED_MODIFIERS:
 nested type"
      end

      attribute 1709698 "CALLER_SENSITIVE"
	class_attribute const_attribute package explicit_type "int"
	init_value " MN_CALLER_SENSITIVE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " private flags, not part of RECOGNIZED_MODIFIERS:
 @CallerSensitive annotation detected"
      end

      attribute 1709826 "ALL_ACCESS"
	class_attribute const_attribute package explicit_type "int"
	init_value " Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1709954 "ALL_KINDS"
	class_attribute const_attribute package explicit_type "int"
	init_value " IS_METHOD | IS_CONSTRUCTOR | IS_FIELD | IS_TYPE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1710082 "IS_INVOCABLE"
	class_attribute const_attribute package explicit_type "int"
	init_value " IS_METHOD | IS_CONSTRUCTOR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1710210 "IS_FIELD_OR_METHOD"
	class_attribute const_attribute package explicit_type "int"
	init_value " IS_METHOD | IS_FIELD"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1710338 "SEARCH_ALL_SUPERS"
	class_attribute const_attribute package explicit_type "int"
	init_value " MN_SEARCH_SUPERCLASSES | MN_SEARCH_INTERFACES"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7236354 "isInvocable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query whether this member is a method or constructor. "
      end

      operation 7236482 "isFieldOrMethod"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query whether this member is a method, constructor, or field. "
      end

      operation 7236610 "isMethod"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query whether this member is a method. "
      end

      operation 7236738 "isConstructor"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query whether this member is a constructor. "
      end

      operation 7236866 "isField"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query whether this member is a field. "
      end

      operation 7236994 "isType"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query whether this member is a type. "
      end

      operation 7237122 "isPackage"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query whether this member is neither public, private, nor protected. "
      end

      operation 7237250 "isCallerSensitive"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query whether this member has a CallerSensitive annotation. "
      end

      operation 7237378 "isAccessibleFrom"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "lookupClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Utility method to query whether this member is accessible from a given lookup class. "
      end

      operation 7237506 "init"
	private explicit_return_type "void"
	nparams 4
	  param inout name "defClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 129538 // Object
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize a query.   It is not resolved. "
      end

      operation 7237634 "expandFromVM"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calls down to the VM to fill in the fields.  This method is
synchronized to avoid racing calls.
"
      end

      operation 7237762 "flagsMods"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "flags" explicit_type "int"
	  param in name "mods" explicit_type "int"
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Capturing information from the Core Reflection API:"
      end

      operation 7237890 "MemberName"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a name for the given reflected method.  The resulting name will be in a resolved state. "
      end

      operation 7238018 "MemberName"
	public explicit_return_type ""
	nparams 2
	  param inout name "m" type class_ref 137858 // Method
	  param inout name "wantSpecial" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"LeakingThisInConstructor\")
"
	
	
	
      end

      operation 7238146 "asSpecial"
	public return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7238274 "asConstructor"
	public return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If this MN is not REF_newInvokeSpecial, return a clone with that ref. kind.
 In that case it must already be REF_invokeSpecial.
"
      end

      operation 7238402 "asNormalOriginal"
	public return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If this MN is a REF_invokeSpecial, return a clone with the \"normal\" kind
 REF_invokeVirtual; also switch either to REF_invokeInterface if clazz.isInterface.
 The end result is to get a fully virtualized version of the MN.
 (Note that resolving in the JVM will sometimes devirtualize, changing
 REF_invokeVirtual of a final to REF_invokeSpecial, and REF_invokeInterface
 in some corner cases to either of the previous two; this transform
 undoes that change under the assumption that it occurred.)
"
      end

      operation 7238530 "MemberName"
	public explicit_return_type ""
	nparams 1
	  param inout name "ctor" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"LeakingThisInConstructor\")
"
	
	
	
	comment " Create a name for the given reflected constructor.  The resulting name will be in a resolved state. "
      end

      operation 7238658 "MemberName"
	public explicit_return_type ""
	nparams 1
	  param inout name "fld" type class_ref 189698 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a name for the given reflected field.  The resulting name will be in a resolved state.
"
      end

      operation 7238786 "MemberName"
	public explicit_return_type ""
	nparams 2
	  param inout name "fld" type class_ref 189698 // Field
	  param inout name "makeSetter" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"LeakingThisInConstructor\")
"
	
	
	
      end

      operation 7238914 "isGetter"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7239042 "isSetter"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7239170 "asSetter"
	public return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7239298 "MemberName"
	public explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a name for the given class.  The resulting name will be in a resolved state. "
      end

      operation 7239426 "makeMethodHandleInvoke"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a name for a signature-polymorphic invoker.
This is a placeholder for a signature-polymorphic instance
(of MH.invokeExact, etc.) that the JVM does not reify.
See comments on {@link MethodHandleNatives#linkMethod}.
"
      end

      operation 7239554 "makeMethodHandleInvoke"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 944258 // MethodType
	  param in name "mods" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7239682 "MemberName"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " bare-bones constructor; the JVM will fill it in"
      end

      operation 7239810 "clone"
	protected return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " locally useful cloner"
      end

      operation 7239938 "getDefinition"
	public return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the definition of this member name.
 This may be in a super-class of the declaring class of this member.
"
      end

      operation 7240066 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7240194 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7240322 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "that" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Decide if two member names have exactly the same symbolic content.
 Does not take into account any actual class members, so even if
 two member names resolve to the same actual member, they may
 be distinct references.
"
      end

      operation 7240450 "MemberName"
	public explicit_return_type ""
	nparams 4
	  param inout name "defClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Construction from symbolic parts, for queries:
 Create a field or type name from the given components:
 Declaring class, name, type, reference kind.
 The declaring class may be supplied as null if this is to be a bare name and type.
 The resulting name will in an unresolved state.
"
      end

      operation 7240578 "MemberName"
	public explicit_return_type ""
	nparams 4
	  param inout name "defClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 944258 // MethodType
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a method or constructor name from the given components:
 Declaring class, name, type, reference kind.
 It will be a constructor if and only if the name is {@code \"<init>\"}.
 The declaring class may be supplied as null if this is to be a bare name and type.
 The last argument is optional, a boolean which requests REF_invokeSpecial.
 The resulting name will in an unresolved state.
"
      end

      operation 7240706 "MemberName"
	public explicit_return_type ""
	nparams 4
	  param in name "refKind" explicit_type "byte"
	  param inout name "defClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a method, constructor, or field name from the given components:
 Reference kind, declaring class, name, type.
"
      end

      operation 7240834 "hasReceiverTypeDispatch"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query whether this member name is resolved to a non-static, non-final method.
"
      end

      operation 7240962 "isResolved"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Query whether this member name is resolved.
 A resolved member name is one for which the JVM has found
 a method, constructor, field, or type binding corresponding exactly to the name.
 (Document?)
"
      end

      operation 7241090 "initResolved"
	private explicit_return_type "void"
	nparams 1
	  param inout name "isResolved" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7241218 "checkForTypeAlias"
	package explicit_return_type "void"
	nparams 1
	  param inout name "refc" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7241346 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"LocalVariableHidesMemberVariable\")
@Override
"
	
	
	
	comment " Produce a string form of this member name.
 For types, it is simply the type's own string (as reported by {@code toString}).
 For fields, it is {@code \"DeclaringClass.name/type\"}.
 For methods and constructors, it is {@code \"DeclaringClass.name(ptype...)rtype\"}.
 If the declaring class is null, the prefix {@code \"DeclaringClass.\"} is omitted.
 If the member is unresolved, a prefix {@code \"*.\"} is prepended.
"
      end

      operation 7241474 "getName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7241602 "makeAccessException"
	public return_type class_ref 321538 // IllegalAccessException
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "from" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7241730 "message"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7241858 "makeAccessException"
	public return_type class_ref 932226 // ReflectiveOperationException
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7241986 "getFactory"
	class_operation package return_type class_ref 947074 // Factory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Actually making a query requires an access check. 
non-public"
      end
    end

    class 945666 "MethodHandleImpl"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Trusted implementation code for MethodHandle.
@author jrose

non-public"
      class 945794 "Intrinsic"
	visibility package stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1712258 "SELECT_ALTERNATIVE"
	  public type class_ref 945794 // Intrinsic
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1712386 "GUARD_WITH_CATCH"
	  public type class_ref 945794 // Intrinsic
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1712514 "NEW_ARRAY"
	  public type class_ref 945794 // Intrinsic
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1712642 "ARRAY_LOAD"
	  public type class_ref 945794 // Intrinsic
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1712770 "ARRAY_STORE"
	  public type class_ref 945794 // Intrinsic
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1712898 "IDENTITY"
	  public type class_ref 945794 // Intrinsic
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1713026 "ZERO"
	  public type class_ref 945794 // Intrinsic
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1713154 "NONE"
	  public type class_ref 945794 // Intrinsic
	  cpp_decl ""
	  java_decl "  ${@}${name} // no intrinsic associated
    ,${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      attribute 1710594 "MAX_ARITY"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Do not adjust this except for special platforms:
"
      end

      extra_member 160770 "initialization"
	
	cpp "" ""
	java "  static {
        final Object[] values = { 255 };
        AccessController.doPrivileged(new PrivilegedAction<Void>() {
            @Override
            public Void run() {
                values[0] = Integer.getInteger(MethodHandleImpl.class.getName()+\".MAX_ARITY\", 255);
                return null;
            }
        });
        MAX_ARITY = (Integer) values[0];
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7243650 "initStatics"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Factory methods to create method handles:"
      end

      operation 7243778 "makeArrayElementAccessor"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "arrayClass" type class_ref 130818 // Class
	  param inout name "isSetter" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 950914 "ArrayAccessor"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1710722 "GETTER_INDEX"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "/ Support for array element access
"
	end

	attribute 1710850 "SETTER_INDEX"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "/ Support for array element access
"
	end

	attribute 1710978 "INDEX_LIMIT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "/ Support for array element access
"
	end

	classrelation 3201026 // TYPED_ACCESSORS (<unidirectional association>)
	  relation 3201026 --->
	    a role_name "TYPED_ACCESSORS" init_value " new ClassValue<MethodHandle[]>() {
                    @Override
                    protected MethodHandle[] computeValue(Class<?> type) {
                        return new MethodHandle[INDEX_LIMIT];
                    }
                }" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodHandle[]> ${name}${value};
"
	      classrelation_ref 3201026 // TYPED_ACCESSORS (<unidirectional association>)
	    b parent class_ref 191234 // ClassValue
	end

	classrelation 3201154 // OBJECT_ARRAY_GETTER (<unidirectional association>)
	  relation 3201154 --->
	    a role_name "OBJECT_ARRAY_GETTER" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3201154 // OBJECT_ARRAY_GETTER (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3201282 // OBJECT_ARRAY_SETTER (<unidirectional association>)
	  relation 3201282 --->
	    a role_name "OBJECT_ARRAY_SETTER" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3201282 // OBJECT_ARRAY_SETTER (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	extra_member 160898 "initialization"
	  
	  cpp "" ""
	  java "  static {
            MethodHandle[] cache = TYPED_ACCESSORS.get(Object[].class);
            cache[GETTER_INDEX] = OBJECT_ARRAY_GETTER = makeIntrinsic(getAccessor(Object[].class, false), Intrinsic.ARRAY_LOAD);
            cache[SETTER_INDEX] = OBJECT_ARRAY_SETTER = makeIntrinsic(getAccessor(Object[].class, true),  Intrinsic.ARRAY_STORE);

            assert(InvokerBytecodeGenerator.isStaticallyInvocable(ArrayAccessor.OBJECT_ARRAY_GETTER.internalMemberName()));
            assert(InvokerBytecodeGenerator.isStaticallyInvocable(ArrayAccessor.OBJECT_ARRAY_SETTER.internalMemberName()));
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	operation 7243906 "getElementI"
	  class_operation package explicit_return_type "int"
	  nparams 2
	    param inout name "a" explicit_type "int"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7244034 "getElementJ"
	  class_operation package explicit_return_type "long"
	  nparams 2
	    param inout name "a" explicit_type "long"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7244162 "getElementF"
	  class_operation package explicit_return_type "float"
	  nparams 2
	    param inout name "a" explicit_type "float"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7244290 "getElementD"
	  class_operation package explicit_return_type "double"
	  nparams 2
	    param inout name "a" explicit_type "double"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7244418 "getElementZ"
	  class_operation package explicit_return_type "boolean"
	  nparams 2
	    param inout name "a" explicit_type "boolean"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7244546 "getElementB"
	  class_operation package explicit_return_type "byte"
	  nparams 2
	    param inout name "a" explicit_type "byte"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7244674 "getElementS"
	  class_operation package explicit_return_type "short"
	  nparams 2
	    param inout name "a" explicit_type "short"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7244802 "getElementC"
	  class_operation package explicit_return_type "char"
	  nparams 2
	    param inout name "a" explicit_type "char"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7244930 "getElementL"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7245058 "setElementI"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" explicit_type "int"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "x" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7245186 "setElementJ"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" explicit_type "long"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "x" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7245314 "setElementF"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" explicit_type "float"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "x" explicit_type "float"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7245442 "setElementD"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" explicit_type "double"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "x" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7245570 "setElementZ"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" explicit_type "boolean"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param inout name "x" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7245698 "setElementB"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" explicit_type "byte"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "x" explicit_type "byte"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7245826 "setElementS"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" explicit_type "short"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "x" explicit_type "short"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7245954 "setElementC"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" explicit_type "char"
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param in name "x" explicit_type "char"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7246082 "setElementL"
	  class_operation package explicit_return_type "void"
	  nparams 3
	    param inout name "a" type class_ref 129538 // Object
	  multiplicity "[]"
	    param in name "i" explicit_type "int"
	    param inout name "x" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7246210 "name"
	  class_operation package return_type class_ref 128130 // String
	  nparams 2
	    param inout name "arrayClass" type class_ref 130818 // Class
	    param inout name "isSetter" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7246338 "type"
	  class_operation package return_type class_ref 944258 // MethodType
	  nparams 2
	    param inout name "arrayClass" type class_ref 130818 // Class
	    param inout name "isSetter" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7246466 "correctType"
	  class_operation package return_type class_ref 944258 // MethodType
	  nparams 2
	    param inout name "arrayClass" type class_ref 130818 // Class
	    param inout name "isSetter" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7246594 "getAccessor"
	  class_operation package return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "arrayClass" type class_ref 130818 // Class
	    param inout name "isSetter" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7246722 "makePairwiseConvert"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 4
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "srcType" type class_ref 944258 // MethodType
	  param inout name "strict" explicit_type "boolean"
	  param inout name "monobox" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a JVM-level adapter method handle to conform the given method
handle to the similar newType, using only pairwise argument conversions.
For each argument, convert incoming argument to the exact type needed.
The argument conversions allowed are casting, boxing and unboxing,
integral widening or narrowing, and floating point widening or narrowing.
@param srcType required call type
@param target original method handle
@param strict if true, only asType conversions are allowed; if false, explicitCastArguments conversions allowed
@param monobox if true, unboxing conversions are assumed to be exactly typed (Integer to int only, not long or double)
@return an adapter to the original handle with the desired new type,
         or the original target if the types are already identical
         or null if the adaptation cannot be made
"
      end

      operation 7246850 "countNonNull"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "array" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7246978 "makePairwiseConvertByEditor"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 4
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "srcType" type class_ref 944258 // MethodType
	  param inout name "strict" explicit_type "boolean"
	  param inout name "monobox" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7247106 "makePairwiseConvertIndirect"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 4
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "srcType" type class_ref 944258 // MethodType
	  param inout name "strict" explicit_type "boolean"
	  param inout name "monobox" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7247234 "castReference"
	class_operation package explicit_return_type "T"
	nparams 2
	  param inout name "t" type class_ref 130818 // Class
	  param inout name "x" explicit_type "U"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T,U> ${type} ${name}${(}${t0}<? extends T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Identity function, with reference cast.
@param t an arbitrary reference type
@param x an arbitrary reference value
@return the same value x
"
      end

      operation 7247362 "newClassCastException"
	class_operation private return_type class_ref 207490 // ClassCastException
	nparams 2
	  param inout name "t" type class_ref 130818 // Class
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7247490 "computeValueConversions"
	class_operation package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "srcType" type class_ref 944258 // MethodType
	  param inout name "dstType" type class_ref 944258 // MethodType
	  param inout name "strict" explicit_type "boolean"
	  param inout name "monobox" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7247618 "makePairwiseConvert"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "srcType" type class_ref 944258 // MethodType
	  param inout name "strict" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7247746 "valueConversion"
	class_operation package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "src" type class_ref 130818 // Class
	  param inout name "dst" type class_ref 130818 // Class
	  param inout name "strict" explicit_type "boolean"
	  param inout name "monobox" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a conversion function from the given source to the given destination.
This conversion function will be used as a LF NamedFunction.
Return a Class object if a simple cast is needed.
Return void.class if void is involved.
"
      end

      operation 7247874 "makeVarargsCollector"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "arrayType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 951042 "AsVarargsCollector"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3201410 // <generalisation>
	  relation 3201410 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3201410 // <generalisation>
	    b parent class_ref 946818 // DelegatingMethodHandle
	end

	classrelation 3201538 // target (<unidirectional association>)
	  relation 3201538 --->
	    a role_name "target" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3201538 // target (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3201666 // arrayType (<unidirectional association>)
	  relation 3201666 --->
	    a role_name "arrayType" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3201666 // arrayType (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3201794 // asCollectorCache (<unidirectional association>)
	  relation 3201794 --->
	    a role_name "asCollectorCache" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      java_annotation "@Stable
"
	      classrelation_ref 3201794 // asCollectorCache (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	operation 7248002 "AsVarargsCollector"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "target" type class_ref 944386 // MethodHandle
	    param inout name "arrayType" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7248130 "AsVarargsCollector"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "type" type class_ref 944258 // MethodType
	    param inout name "target" type class_ref 944386 // MethodHandle
	    param inout name "arrayType" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7248258 "isVarargsCollector"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7248386 "getTarget"
	  protected return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7248514 "asFixedArity"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7248642 "setVarargs"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "member" type class_ref 945538 // MemberName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7248770 "asTypeUncached"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "newType" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7248898 "viewAsTypeChecks"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "newType" type class_ref 944258 // MethodType
	    param inout name "strict" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 7249026 "makeSpreadArguments"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 4
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "spreadArgType" type class_ref 130818 // Class
	  param in name "spreadArgPos" explicit_type "int"
	  param in name "spreadArgCount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory method:  Spread selected argument. "
      end

      operation 7249154 "checkSpreadArgument"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "av" type class_ref 129538 // Object
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 951170 "Lazy"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3201922 // MHI (<unidirectional association>)
	  relation 3201922 --->
	    a role_name "MHI" init_value " MethodHandleImpl.class" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3201922 // MHI (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3202050 // ARRAYS (<unidirectional association>)
	  relation 3202050 --->
	    a role_name "ARRAYS" multiplicity "[]" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3202050 // ARRAYS (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3202178 // FILL_ARRAYS (<unidirectional association>)
	  relation 3202178 --->
	    a role_name "FILL_ARRAYS" multiplicity "[]" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 3202178 // FILL_ARRAYS (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	attribute 1711106 "NF_checkSpreadArgument"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1711234 "NF_guardWithCatch"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1711362 "NF_throwException"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1711490 "NF_profileBoolean"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3202306 // MH_castReference (<unidirectional association>)
	  relation 3202306 --->
	    a role_name "MH_castReference" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3202306 // MH_castReference (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3202434 // MH_selectAlternative (<unidirectional association>)
	  relation 3202434 --->
	    a role_name "MH_selectAlternative" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3202434 // MH_selectAlternative (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3202562 // MH_copyAsPrimitiveArray (<unidirectional association>)
	  relation 3202562 --->
	    a role_name "MH_copyAsPrimitiveArray" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3202562 // MH_copyAsPrimitiveArray (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3202690 // MH_fillNewTypedArray (<unidirectional association>)
	  relation 3202690 --->
	    a role_name "MH_fillNewTypedArray" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3202690 // MH_fillNewTypedArray (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3202818 // MH_fillNewArray (<unidirectional association>)
	  relation 3202818 --->
	    a role_name "MH_fillNewArray" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3202818 // MH_fillNewArray (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3202946 // MH_arrayIdentity (<unidirectional association>)
	  relation 3202946 --->
	    a role_name "MH_arrayIdentity" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3202946 // MH_arrayIdentity (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	extra_member 161026 "initialization"
	  
	  cpp "" ""
	  java "  static {
            ARRAYS      = makeArrays();
            FILL_ARRAYS = makeFillArrays();

            try {
                NF_checkSpreadArgument = new NamedFunction(MHI.getDeclaredMethod(\"checkSpreadArgument\", Object.class, int.class));
                NF_guardWithCatch      = new NamedFunction(MHI.getDeclaredMethod(\"guardWithCatch\", MethodHandle.class, Class.class,
                                                                                 MethodHandle.class, Object[].class));
                NF_throwException      = new NamedFunction(MHI.getDeclaredMethod(\"throwException\", Throwable.class));
                NF_profileBoolean      = new NamedFunction(MHI.getDeclaredMethod(\"profileBoolean\", boolean.class, int[].class));

                NF_checkSpreadArgument.resolve();
                NF_guardWithCatch.resolve();
                NF_throwException.resolve();
                NF_profileBoolean.resolve();

                MH_castReference        = IMPL_LOOKUP.findStatic(MHI, \"castReference\",
                                            MethodType.methodType(Object.class, Class.class, Object.class));
                MH_copyAsPrimitiveArray = IMPL_LOOKUP.findStatic(MHI, \"copyAsPrimitiveArray\",
                                            MethodType.methodType(Object.class, Wrapper.class, Object[].class));
                MH_arrayIdentity        = IMPL_LOOKUP.findStatic(MHI, \"identity\",
                                            MethodType.methodType(Object[].class, Object[].class));
                MH_fillNewArray         = IMPL_LOOKUP.findStatic(MHI, \"fillNewArray\",
                                            MethodType.methodType(Object[].class, Integer.class, Object[].class));
                MH_fillNewTypedArray    = IMPL_LOOKUP.findStatic(MHI, \"fillNewTypedArray\",
                                            MethodType.methodType(Object[].class, Object[].class, Integer.class, Object[].class));

                MH_selectAlternative    = makeIntrinsic(
                        IMPL_LOOKUP.findStatic(MHI, \"selectAlternative\",
                                MethodType.methodType(MethodHandle.class, boolean.class, MethodHandle.class, MethodHandle.class)),
                        Intrinsic.SELECT_ALTERNATIVE);
            } catch (ReflectiveOperationException ex) {
                throw newInternalError(ex);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      operation 7249282 "makeCollectArguments"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 4
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "collector" type class_ref 944386 // MethodHandle
	  param in name "collectArgPos" explicit_type "int"
	  param inout name "retainOriginalArgs" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory method:  Collect or filter selected argument(s). "
      end

      operation 7249410 "selectAlternative"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "testResult" explicit_type "boolean"
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "fallback" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LambdaForm.Hidden
"
	
	
	
      end

      operation 7249538 "profileBoolean"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "result" explicit_type "boolean"
	  param inout name "counters" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LambdaForm.Hidden
"
	
	
	
	comment " Intrinsified by C2. Counters are used during parsing to calculate branch frequencies."
      end

      operation 7249666 "makeGuardWithTest"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "test" type class_ref 944386 // MethodHandle
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "fallback" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7249794 "profile"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7249922 "makeBlockInlningWrapper"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Block inlining during JIT-compilation of a target method handle if it hasn't been invoked enough times.
Corresponding LambdaForm has @DontInline when compiled into bytecode.
"
      end

      classrelation 3203074 // PRODUCE_BLOCK_INLINING_FORM (<unidirectional association>)
	relation 3203074 --->
	  a role_name "PRODUCE_BLOCK_INLINING_FORM" init_value " new Function<MethodHandle, LambdaForm>() {
        @Override
        public LambdaForm apply(MethodHandle target) {
            return DelegatingMethodHandle.makeReinvokerForm(target,
                               MethodTypeForm.LF_DELEGATE_BLOCK_INLINING, CountingWrapper.class, \"reinvoker.dontInline\", false,
                               DelegatingMethodHandle.NF_getTarget, CountingWrapper.NF_maybeStopCounting);
        }
    }" class_relation const_relation private
	    comment " Constructs reinvoker lambda form which block inlining during JIT-compilation for a particular method handle 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodHandle, LambdaForm> ${name}${value};
"
	    classrelation_ref 3203074 // PRODUCE_BLOCK_INLINING_FORM (<unidirectional association>)
	  b parent class_ref 192770 // Function
      end

      classrelation 3203202 // PRODUCE_REINVOKER_FORM (<unidirectional association>)
	relation 3203202 --->
	  a role_name "PRODUCE_REINVOKER_FORM" init_value " new Function<MethodHandle, LambdaForm>() {
        @Override
        public LambdaForm apply(MethodHandle target) {
            return DelegatingMethodHandle.makeReinvokerForm(target,
                    MethodTypeForm.LF_DELEGATE, DelegatingMethodHandle.class, DelegatingMethodHandle.NF_getTarget);
        }
    }" class_relation const_relation private
	    comment " Constructs simple reinvoker lambda form for a particular method handle 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodHandle, LambdaForm> ${name}${value};
"
	    classrelation_ref 3203202 // PRODUCE_REINVOKER_FORM (<unidirectional association>)
	  b parent class_ref 192770 // Function
      end

      class 951298 "CountingWrapper"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3203330 // <generalisation>
	  relation 3203330 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3203330 // <generalisation>
	    b parent class_ref 946818 // DelegatingMethodHandle
	end

	classrelation 3203458 // target (<unidirectional association>)
	  relation 3203458 --->
	    a role_name "target" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3203458 // target (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	attribute 1711618 "count"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3203586 // countingFormProducer (<unidirectional association>)
	  relation 3203586 --->
	    a role_name "countingFormProducer" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodHandle, LambdaForm> ${name}${value};
"
	      classrelation_ref 3203586 // countingFormProducer (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3203714 // nonCountingFormProducer (<unidirectional association>)
	  relation 3203714 --->
	    a role_name "nonCountingFormProducer" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodHandle, LambdaForm> ${name}${value};
"
	      classrelation_ref 3203714 // nonCountingFormProducer (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	attribute 1711746 "isCounting"
	  volatile private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7250050 "CountingWrapper"
	  private explicit_return_type ""
	  nparams 5
	    param inout name "target" type class_ref 944386 // MethodHandle
	    param inout name "lform" type class_ref 945410 // LambdaForm
	    param inout name "countingFromProducer" type class_ref 192770 // Function
	    param inout name "nonCountingFormProducer" type class_ref 192770 // Function
	    param in name "count" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<MethodHandle, LambdaForm> ${p2}, ${t3}<MethodHandle, LambdaForm> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7250178 "getTarget"
	  protected return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
@Override
"
	  
	  
	  
	end

	operation 7250306 "asTypeUncached"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "newType" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7250434 "countDown"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7250562 "maybeStopCounting"
	  class_operation package explicit_return_type "void"
	  nparams 1
	    param inout name "o1" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Hidden
"
	  
	  
	  
	end

	attribute 1711874 "NF_maybeStopCounting"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 161154 "initialization"
	  
	  cpp "" ""
	  java "  static {
            Class<?> THIS_CLASS = CountingWrapper.class;
            try {
                NF_maybeStopCounting = new NamedFunction(THIS_CLASS.getDeclaredMethod(\"maybeStopCounting\", Object.class));
            } catch (ReflectiveOperationException ex) {
                throw newInternalError(ex);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end

      operation 7250690 "makeGuardWithTestForm"
	class_operation package return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "basicType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7250818 "makeGuardWithCatchForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "basicType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The LambaForm shape for catchException combinator is the following:
<blockquote><pre>{@code
 guardWithCatch=Lambda(a0:L,a1:L,a2:L)=>{
   t3:L=BoundMethodHandle$Species_LLLLL.argL0(a0:L);
   t4:L=BoundMethodHandle$Species_LLLLL.argL1(a0:L);
   t5:L=BoundMethodHandle$Species_LLLLL.argL2(a0:L);
   t6:L=BoundMethodHandle$Species_LLLLL.argL3(a0:L);
   t7:L=BoundMethodHandle$Species_LLLLL.argL4(a0:L);
   t8:L=MethodHandle.invokeBasic(t6:L,a1:L,a2:L);
   t9:L=MethodHandleImpl.guardWithCatch(t3:L,t4:L,t5:L,t8:L);
  t10:I=MethodHandle.invokeBasic(t7:L,t9:L);t10:I}
}</pre></blockquote>

argL0 and argL2 are target and catcher method handles. argL1 is exception class.
argL3 and argL4 are auxiliary method handles: argL3 boxes arguments and wraps them into Object[]
(ValueConversions.array()) and argL4 unboxes result if necessary (ValueConversions.unbox()).

Having t8 and t10 passed outside and not hardcoded into a lambda form allows to share lambda forms
among catchException combinators with the same basic type.
"
      end

      operation 7250946 "makeGuardWithCatch"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "exType" type class_ref 130818 // Class
	  param inout name "catcher" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Throwable> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7251074 "guardWithCatch"
	class_operation package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "exType" type class_ref 130818 // Class
	  param inout name "catcher" type class_ref 944386 // MethodHandle
	  param inout name "" explicit_type "Object...av"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends Throwable> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LambdaForm.Hidden
"
	
	
	
	comment "Intrinsified during LambdaForm compilation
(see {@link InvokerBytecodeGenerator#emitGuardWithCatch emitGuardWithCatch}).
"
      end

      operation 7251202 "prepend"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "elem" type class_ref 129538 // Object
	  param inout name "array" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LambdaForm.Hidden
"
	
	
	
	comment " Prepend an element {@code elem} to an {@code array}. "
      end

      operation 7251330 "throwException"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7251458 "throwException"
	class_operation package explicit_return_type "Empty"
	nparams 1
	  param inout name "t" explicit_type "T"
	nexceptions 1
	  explicit_exception "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Throwable> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3203842 // FAKE_METHOD_HANDLE_INVOKE (<unidirectional association>)
	relation 3203842 --->
	  a role_name "FAKE_METHOD_HANDLE_INVOKE" multiplicity "[]" init_value " new MethodHandle[2]" class_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3203842 // FAKE_METHOD_HANDLE_INVOKE (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      operation 7251586 "fakeMethodHandleInvoke"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "method" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7251714 "bindCaller"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "mh" type class_ref 944386 // MethodHandle
	  param inout name "hostClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create an alias for the method handle which, when called,
appears to be called from the same class loader and protection domain
as hostClass.
This is an expensive no-op unless the method which is called
is sensitive to its caller.  A small number of system methods
are in this category, including Class.forName and Method.invoke.
"
      end

      class 951426 "BindCaller"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7251842 "bindCaller"
	  class_operation package return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "mh" type class_ref 944386 // MethodHandle
	    param inout name "hostClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7251970 "makeInjectedInvoker"
	  class_operation private return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "hostClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 3203970 // CV_makeInjectedInvoker (<unidirectional association>)
	  relation 3203970 --->
	    a role_name "CV_makeInjectedInvoker" init_value " new ClassValue<MethodHandle>() {
            @Override protected MethodHandle computeValue(Class<?> hostClass) {
                return makeInjectedInvoker(hostClass);
            }
        }" class_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodHandle> ${name}${value};
"
	      classrelation_ref 3203970 // CV_makeInjectedInvoker (<unidirectional association>)
	    b parent class_ref 191234 // ClassValue
	end

	operation 7252098 "prepareForInvoker"
	  class_operation private return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "mh" type class_ref 944386 // MethodHandle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Adapt mh so that it can be called directly from an injected invoker:"
	end

	operation 7252226 "restoreToType"
	  class_operation private return_type class_ref 944386 // MethodHandle
	  nparams 3
	    param inout name "vamh" type class_ref 944386 // MethodHandle
	    param inout name "original" type class_ref 944386 // MethodHandle
	    param inout name "hostClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Undo the adapter effect of prepareForInvoker:"
	end

	classrelation 3204098 // MH_checkCallerClass (<unidirectional association>)
	  relation 3204098 --->
	    a role_name "MH_checkCallerClass" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3204098 // MH_checkCallerClass (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	extra_member 161282 "initialization"
	  
	  cpp "" ""
	  java "  static {
            final Class<?> THIS_CLASS = BindCaller.class;
            assert(checkCallerClass(THIS_CLASS, THIS_CLASS));
            try {
                MH_checkCallerClass = IMPL_LOOKUP
                    .findStatic(THIS_CLASS, \"checkCallerClass\",
                                MethodType.methodType(boolean.class, Class.class, Class.class));
                assert((boolean) MH_checkCallerClass.invokeExact(THIS_CLASS, THIS_CLASS));
            } catch (Throwable ex) {
                throw new InternalError(ex);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	operation 7252354 "checkCallerClass"
	  class_operation private explicit_return_type "boolean"
	  nparams 2
	    param inout name "expected" type class_ref 130818 // Class
	    param inout name "expected2" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@CallerSensitive
"
	  
	  
	  
	end

	attribute 1712002 "T_BYTES"
	  class_attribute const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 161410 "initialization"
	  
	  cpp "" ""
	  java "  static {
            final Object[] values = {null};
            AccessController.doPrivileged(new PrivilegedAction<Void>() {
                    public Void run() {
                        try {
                            Class<T> tClass = T.class;
                            String tName = tClass.getName();
                            String tResource = tName.substring(tName.lastIndexOf('.')+1)+\".class\";
                            java.net.URLConnection uconn = tClass.getResource(tResource).openConnection();
                            int len = uconn.getContentLength();
                            byte[] bytes = new byte[len];
                            try (java.io.InputStream str = uconn.getInputStream()) {
                                int nr = str.read(bytes);
                                if (nr != len)  throw new java.io.IOException(tResource);
                            }
                            values[0] = bytes;
                        } catch (java.io.IOException ex) {
                            throw new InternalError(ex);
                        }
                        return null;
                    }
                });
            T_BYTES = (byte[]) values[0];
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end

	class 951554 "T"
	  visibility private 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  operation 7252482 "init"
	    class_operation package explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 7252610 "invoke_V"
	    class_operation package return_type class_ref 129538 // Object
	    nparams 2
	      param inout name "vamh" type class_ref 944386 // MethodHandle
	      param inout name "args" type class_ref 129538 // Object
	    multiplicity "[]"
	    nexceptions 1
	      exception class_ref 129922 // Throwable
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment " side effect: initializes this class"
	  end
	end
      end

      class 951682 "WrappedMember"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3204226 // <generalisation>
	  relation 3204226 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3204226 // <generalisation>
	    b parent class_ref 946818 // DelegatingMethodHandle
	end

	classrelation 3204354 // target (<unidirectional association>)
	  relation 3204354 --->
	    a role_name "target" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3204354 // target (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3204482 // member (<unidirectional association>)
	  relation 3204482 --->
	    a role_name "member" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3204482 // member (<unidirectional association>)
	    b parent class_ref 945538 // MemberName
	end

	classrelation 3204610 // callerClass (<unidirectional association>)
	  relation 3204610 --->
	    a role_name "callerClass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3204610 // callerClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	attribute 1712130 "isInvokeSpecial"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7252738 "WrappedMember"
	  private explicit_return_type ""
	  nparams 5
	    param inout name "target" type class_ref 944386 // MethodHandle
	    param inout name "type" type class_ref 944258 // MethodType
	    param inout name "member" type class_ref 945538 // MemberName
	    param inout name "isInvokeSpecial" explicit_type "boolean"
	    param inout name "callerClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7252866 "internalMemberName"
	  package return_type class_ref 945538 // MemberName
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7252994 "internalCallerClass"
	  package return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7253122 "isInvokeSpecial"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7253250 "getTarget"
	  protected return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7253378 "asTypeUncached"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "newType" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 7253506 "makeWrappedMember"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "member" type class_ref 945538 // MemberName
	  param inout name "isInvokeSpecial" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 951810 "IntrinsicMethodHandle"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3204738 // <generalisation>
	  relation 3204738 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3204738 // <generalisation>
	    b parent class_ref 946818 // DelegatingMethodHandle
	end

	classrelation 3204866 // target (<unidirectional association>)
	  relation 3204866 --->
	    a role_name "target" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3204866 // target (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	classrelation 3204994 // intrinsicName (<unidirectional association>)
	  relation 3204994 --->
	    a role_name "intrinsicName" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3204994 // intrinsicName (<unidirectional association>)
	    b parent class_ref 945794 // Intrinsic
	end

	operation 7253634 "IntrinsicMethodHandle"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "target" type class_ref 944386 // MethodHandle
	    param inout name "intrinsicName" type class_ref 945794 // Intrinsic
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7253762 "getTarget"
	  protected return_type class_ref 944386 // MethodHandle
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7253890 "intrinsicName"
	  package return_type class_ref 945794 // Intrinsic
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7254018 "asTypeUncached"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 1
	    param inout name "newType" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7254146 "internalProperties"
	  package return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7254274 "asCollector"
	  public return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "arrayType" type class_ref 130818 // Class
	    param in name "arrayLength" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 7254402 "makeIntrinsic"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "intrinsicName" type class_ref 945794 // Intrinsic
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7254530 "makeIntrinsic"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	  param inout name "intrinsicName" type class_ref 945794 // Intrinsic
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7254658 "findCollector"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param in name "nargs" explicit_type "int"
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptypes" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Collection of multiple arguments."
      end

      classrelation 3205122 // NO_ARGS_ARRAY (<unidirectional association>)
	relation 3205122 --->
	  a role_name "NO_ARGS_ARRAY" multiplicity "[]" init_value " {}" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3205122 // NO_ARGS_ARRAY (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 7254786 "makeArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "" explicit_type "Object...args"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7254914 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7255042 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "a0" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7255170 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7255298 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7255426 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 4
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7255554 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 5
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7255682 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 6
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7255810 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 7
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	  param inout name "a6" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7255938 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 8
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	  param inout name "a6" type class_ref 129538 // Object
	  param inout name "a7" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7256066 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 9
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	  param inout name "a6" type class_ref 129538 // Object
	  param inout name "a7" type class_ref 129538 // Object
	  param inout name "a8" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7256194 "array"
	class_operation private return_type class_ref 129538 // Object
	nparams 10
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	  param inout name "a6" type class_ref 129538 // Object
	  param inout name "a7" type class_ref 129538 // Object
	  param inout name "a8" type class_ref 129538 // Object
	  param inout name "a9" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7256322 "makeArrays"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7256450 "fillNewArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "len" type class_ref 137602 // Integer
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " filling versions of the above:
 using Integer len instead of int len and no varargs to avoid bootstrapping problems"
      end

      operation 7256578 "fillNewTypedArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "example" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "len" type class_ref 137602 // Integer
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7256706 "fillWithArguments"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "pos" explicit_type "int"
	  param inout name "" explicit_type "Object...args"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7256834 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " using Integer pos instead of int pos to avoid bootstrapping problems"
      end

      operation 7256962 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 4
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7257090 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 5
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7257218 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 6
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7257346 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 7
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7257474 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 8
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7257602 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 9
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	  param inout name "a6" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7257730 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 10
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	  param inout name "a6" type class_ref 129538 // Object
	  param inout name "a7" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7257858 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 11
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	  param inout name "a6" type class_ref 129538 // Object
	  param inout name "a7" type class_ref 129538 // Object
	  param inout name "a8" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7257986 "fillArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 12
	  param inout name "pos" type class_ref 137602 // Integer
	  param inout name "a" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "a0" type class_ref 129538 // Object
	  param inout name "a1" type class_ref 129538 // Object
	  param inout name "a2" type class_ref 129538 // Object
	  param inout name "a3" type class_ref 129538 // Object
	  param inout name "a4" type class_ref 129538 // Object
	  param inout name "a5" type class_ref 129538 // Object
	  param inout name "a6" type class_ref 129538 // Object
	  param inout name "a7" type class_ref 129538 // Object
	  param inout name "a8" type class_ref 129538 // Object
	  param inout name "a9" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9} ${p9}, ${t10} ${p10}, ${t11} ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1713282 "FILL_ARRAYS_COUNT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " current number of fillArray methods"
      end

      operation 7258114 "makeFillArrays"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7258242 "copyAsPrimitiveArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "w" explicit_type "Wrapper"
	  param inout name "" explicit_type "Object...boxes"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7258370 "varargsArray"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param in name "nargs" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a method handle that takes the indicated number of Object
 arguments and returns an Object array of them, as if for varargs.
"
      end

      operation 7258498 "assertCorrectArity"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "mh" type class_ref 944386 // MethodHandle
	  param in name "arity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7258626 "identity"
	class_operation package explicit_return_type "T"
	nparams 1
	  param inout name "x" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Array identity function (used as Lazy.MH_arrayIdentity)."
      end

      operation 7258754 "buildVarargsArray"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 3
	  param inout name "newArray" type class_ref 944386 // MethodHandle
	  param inout name "finisher" type class_ref 944386 // MethodHandle
	  param in name "nargs" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1713410 "LEFT_ARGS"
	class_attribute const_attribute private explicit_type "int"
	init_value " FILL_ARRAYS_COUNT - 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3205250 // FILL_ARRAY_TO_RIGHT (<unidirectional association>)
	relation 3205250 --->
	  a role_name "FILL_ARRAY_TO_RIGHT" multiplicity "[]" init_value " new MethodHandle[MAX_ARITY+1]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3205250 // FILL_ARRAY_TO_RIGHT (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      operation 7258882 "fillToRight"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param in name "nargs" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " fill_array_to_right(N).invoke(a, argL..arg[N-1])
 fills a[L]..a[N-1] with corresponding arguments,
 and then returns a.  The value L is a global constant (LEFT_ARGS).
"
      end

      operation 7259010 "buildFiller"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param in name "nargs" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3205378 // TYPED_COLLECTORS (<unidirectional association>)
	relation 3205378 --->
	  a role_name "TYPED_COLLECTORS" init_value " new ClassValue<MethodHandle[]>() {
            @Override
            protected MethodHandle[] computeValue(Class<?> type) {
                return new MethodHandle[256];
            }
    }" class_relation const_relation private
	    comment " Type-polymorphic version of varargs maker.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodHandle[]> ${name}${value};
"
	    classrelation_ref 3205378 // TYPED_COLLECTORS (<unidirectional association>)
	  b parent class_ref 191234 // ClassValue
      end

      attribute 1713538 "MAX_JVM_ARITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 255"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " limit imposed by the JVM"
      end

      operation 7259138 "varargsArray"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "nargs" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return a method handle that takes the indicated number of
 typed arguments and returns an array of them.
 The type argument is the array type.
"
      end

      operation 7259266 "buildArrayProducer"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "arrayType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7259394 "assertSame"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "mh1" type class_ref 129538 // Object
	  param inout name "mh2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end
    end

    class 945922 "LambdaFormEditor"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Transforms on LFs.
 A lambda-form editor can derive new LFs from its base LF.
 The editor can cache derived LFs, which simplifies the reuse of their underlying bytecodes.
 To support this caching, a LF has an optional pointer to its editor.
"
      classrelation 3199490 // lambdaForm (<unidirectional association>)
	relation 3199490 --->
	  a role_name "lambdaForm" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3199490 // lambdaForm (<unidirectional association>)
	  b parent class_ref 945410 // LambdaForm
      end

      operation 7224578 "LambdaFormEditor"
	private explicit_return_type ""
	nparams 1
	  param inout name "lambdaForm" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7224706 "lambdaFormEditor"
	class_operation package return_type class_ref 945922 // LambdaFormEditor
	nparams 1
	  param inout name "lambdaForm" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory method."
      end

      class 950530 "Transform"
	visibility private 
	nactuals 1
	actual class class_ref 321026 // SoftReference
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3199618 // <realization>
	  relation 3199618 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3199618 // <realization>
	    b parent class_ref 321026 // SoftReference
	end

	attribute 1704578 "packedBytes"
	  const_attribute package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1704706 "fullBytes"
	  const_attribute package explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	class 950658 "Kind"
	  visibility private stereotype "enum"
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  attribute 1704834 "NO_KIND"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " necessary because ordinal must be greater than zero"
	  end

	  attribute 1704962 "BIND_ARG"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1705090 "ADD_ARG"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1705218 "DUP_ARG"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1705346 "SPREAD_ARGS"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1705474 "FILTER_ARG"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1705602 "FILTER_RETURN"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1705730 "FILTER_RETURN_TO_ZERO"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1705858 "COLLECT_ARGS"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1705986 "COLLECT_ARGS_TO_VOID"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1706114 "COLLECT_ARGS_TO_ARRAY"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1706242 "FOLD_ARGS"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1706370 "FOLD_ARGS_TO_VOID"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}${value},${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  attribute 1706498 "PERMUTE_ARGS"
	    public type class_ref 950658 // Kind
	    cpp_decl ""
	    java_decl "  ${@}${name}
            //maybe add more for guard with test, catch exception, pointwise type conversions
        ,${comment}"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end
	end

	attribute 1706626 "STRESS_TEST"
	  class_attribute const_attribute private explicit_type "boolean"
	  init_value " false"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "maybe add more for guard with test, catch exception, pointwise type conversions
 turn on to disable most packing"
	end

	attribute 1706754 "PACKED_BYTE_SIZE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " (STRESS_TEST ? 2 : 4)"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1706882 "PACKED_BYTE_MASK"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " (1 << PACKED_BYTE_SIZE) - 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1707010 "PACKED_BYTE_MAX_LENGTH"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " (STRESS_TEST ? 3 : 64 / PACKED_BYTE_SIZE)"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7224834 "packedBytes"
	  class_operation private explicit_return_type "long"
	  nparams 1
	    param inout name "bytes" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7224962 "packedBytes"
	  class_operation private explicit_return_type "long"
	  nparams 2
	    param in name "b0" explicit_type "int"
	    param in name "b1" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7225090 "packedBytes"
	  class_operation private explicit_return_type "long"
	  nparams 3
	    param in name "b0" explicit_type "int"
	    param in name "b1" explicit_type "int"
	    param in name "b2" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7225218 "packedBytes"
	  class_operation private explicit_return_type "long"
	  nparams 4
	    param in name "b0" explicit_type "int"
	    param in name "b1" explicit_type "int"
	    param in name "b2" explicit_type "int"
	    param in name "b3" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7225346 "inRange"
	  class_operation private explicit_return_type "boolean"
	  nparams 1
	    param in name "bitset" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7225474 "fullBytes"
	  class_operation private explicit_return_type "byte"
	  nparams 1
	    param inout name "" explicit_type "int...byteValues"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7225602 "byteAt"
	  private explicit_return_type "byte"
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7225730 "kind"
	  package return_type class_ref 950658 // Kind
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7225858 "Transform"
	  private explicit_return_type ""
	  nparams 3
	    param in name "packedBytes" explicit_type "long"
	    param inout name "fullBytes" explicit_type "byte"
	  multiplicity "[]"
	    param inout name "result" type class_ref 945410 // LambdaForm
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7225986 "Transform"
	  private explicit_return_type ""
	  nparams 1
	    param in name "packedBytes" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7226114 "Transform"
	  private explicit_return_type ""
	  nparams 1
	    param inout name "fullBytes" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7226242 "bval"
	  class_operation private explicit_return_type "byte"
	  nparams 1
	    param in name "b" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7226370 "bval"
	  class_operation private explicit_return_type "byte"
	  nparams 1
	    param inout name "k" type class_ref 950658 // Kind
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7226498 "of"
	  class_operation package return_type class_ref 950530 // Transform
	  nparams 2
	    param inout name "k" type class_ref 950658 // Kind
	    param in name "b1" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7226626 "of"
	  class_operation package return_type class_ref 950530 // Transform
	  nparams 3
	    param inout name "k" type class_ref 950658 // Kind
	    param in name "b1" explicit_type "int"
	    param in name "b2" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7226754 "of"
	  class_operation package return_type class_ref 950530 // Transform
	  nparams 4
	    param inout name "k" type class_ref 950658 // Kind
	    param in name "b1" explicit_type "int"
	    param in name "b2" explicit_type "int"
	    param in name "b3" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1707138 "NO_BYTES"
	  class_attribute const_attribute private explicit_type "byte"
	  multiplicity "[]"
	  init_value " {}"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7226882 "of"
	  class_operation package return_type class_ref 950530 // Transform
	  nparams 2
	    param inout name "k" type class_ref 950658 // Kind
	    param inout name "" explicit_type "int...b123"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7227010 "of"
	  class_operation package return_type class_ref 950530 // Transform
	  nparams 3
	    param inout name "k" type class_ref 950658 // Kind
	    param in name "b1" explicit_type "int"
	    param inout name "b234" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7227138 "of"
	  class_operation package return_type class_ref 950530 // Transform
	  nparams 4
	    param inout name "k" type class_ref 950658 // Kind
	    param in name "b1" explicit_type "int"
	    param in name "b2" explicit_type "int"
	    param inout name "b345" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7227266 "ofBothArrays"
	  class_operation private return_type class_ref 950530 // Transform
	  nparams 3
	    param inout name "k" type class_ref 950658 // Kind
	    param inout name "b123" explicit_type "int"
	  multiplicity "[]"
	    param inout name "b456" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7227394 "withResult"
	  package return_type class_ref 950530 // Transform
	  nparams 1
	    param inout name "result" type class_ref 945410 // LambdaForm
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7227522 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7227650 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "that" type class_ref 950530 // Transform
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7227778 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7227906 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 7228034 "getInCache"
	private return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "key" type class_ref 950530 // Transform
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Find a previously cached transform equivalent to the given one, and return its result. "
      end

      attribute 1707266 "MIN_CACHE_ARRAY_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Arbitrary but reasonable limits on Transform[] size for cache. 
"
      end

      attribute 1707394 "MAX_CACHE_ARRAY_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Arbitrary but reasonable limits on Transform[] size for cache. 
"
      end

      operation 7228162 "putInCache"
	private return_type class_ref 945410 // LambdaForm
	nparams 2
	  param inout name "key" type class_ref 950530 // Transform
	  param inout name "form" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Cache a transform with its result, and return that result.
 But if an equivalent transform has already been cached, return its result instead.
"
      end

      operation 7228290 "buffer"
	private return_type class_ref 950402 // LambdaFormBuffer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7228418 "oldSpeciesData"
	private return_type class_ref 946050 // SpeciesData
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Editing methods for method handles.  These need to have fast paths."
      end

      operation 7228546 "newSpeciesData"
	private return_type class_ref 946050 // SpeciesData
	nparams 1
	  param inout name "type" explicit_type "BasicType"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7228674 "bindArgumentL"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mh" type class_ref 945154 // BoundMethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7228802 "bindArgumentI"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mh" type class_ref 945154 // BoundMethodHandle
	  param in name "pos" explicit_type "int"
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7228930 "bindArgumentJ"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mh" type class_ref 945154 // BoundMethodHandle
	  param in name "pos" explicit_type "int"
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7229058 "bindArgumentF"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mh" type class_ref 945154 // BoundMethodHandle
	  param in name "pos" explicit_type "int"
	  param in name "value" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7229186 "bindArgumentD"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mh" type class_ref 945154 // BoundMethodHandle
	  param in name "pos" explicit_type "int"
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7229314 "bindArgumentType"
	private return_type class_ref 944258 // MethodType
	nparams 3
	  param inout name "mh" type class_ref 945154 // BoundMethodHandle
	  param in name "pos" explicit_type "int"
	  param inout name "bt" explicit_type "BasicType"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7229442 "bindArgumentForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Editing methods for lambda forms.
 Each editing method can (potentially) cache the edited LF so that it can be reused later."
      end

      operation 7229570 "addArgumentForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "type" explicit_type "BasicType"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7229698 "dupArgumentForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "srcPos" explicit_type "int"
	  param in name "dstPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7229826 "spreadArgumentsForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 3
	  param in name "pos" explicit_type "int"
	  param inout name "arrayType" type class_ref 130818 // Class
	  param in name "arrayLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7229954 "collectArgumentsForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "collectorType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7230082 "collectArgumentArrayForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "arrayCollector" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7230210 "filterArgumentForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "newType" explicit_type "BasicType"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7230338 "makeArgumentCombinationForm"
	private return_type class_ref 945410 // LambdaForm
	nparams 4
	  param in name "pos" explicit_type "int"
	  param inout name "combinerType" type class_ref 944258 // MethodType
	  param inout name "keepArguments" explicit_type "boolean"
	  param inout name "dropResult" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7230466 "filterReturnForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param inout name "newType" explicit_type "BasicType"
	  param inout name "constantZero" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7230594 "foldArgumentsForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 3
	  param in name "foldPos" explicit_type "int"
	  param inout name "dropResult" explicit_type "boolean"
	  param inout name "combinerType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7230722 "permuteArgumentsForm"
	package return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "skip" explicit_type "int"
	  param inout name "reorder" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7230850 "permutedTypesMatch"
	class_operation package explicit_return_type "boolean"
	nparams 4
	  param inout name "reorder" explicit_type "int"
	multiplicity "[]"
	  param inout name "types" explicit_type "BasicType"
	multiplicity "[]"
	  param inout name "names" explicit_type "Name"
	multiplicity "[]"
	  param in name "skip" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 946562 "WrongMethodTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown to indicate that code has attempted to call a method handle
via the wrong method type.  As with the bytecode representation of
normal Java method calls, method handle calls are strongly typed
to a specific type descriptor associated with a call site.
<p>
This exception may also be thrown when two method handles are
composed, and the system detects that their types cannot be
matched up correctly.  This amounts to an early evaluation
of the type mismatch, at method handle construction time,
instead of when the mismatched method handle is called.

@author John Rose, JSR 292 EG
@since 1.7
"
      classrelation 3211522 // <generalisation>
	relation 3211522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3211522 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1730306 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 292L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7300226 "WrongMethodTypeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code WrongMethodTypeException} with no detail message.
"
      end

      operation 7300354 "WrongMethodTypeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code WrongMethodTypeException} with the specified
detail message.

@param s the detail message.
"
      end

      operation 7300482 "WrongMethodTypeException"
	package explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code WrongMethodTypeException} with the specified
detail message and cause.

@param s the detail message.
@param cause the cause of the exception, or null.

FIXME: make this public in MR1
non-public"
      end

      operation 7300610 "WrongMethodTypeException"
	package explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code WrongMethodTypeException} with the specified
cause.

@param cause the cause of the exception, or null.

FIXME: make this public in MR1
non-public"
      end
    end

    class 946690 "ConstantCallSite"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code ConstantCallSite} is a {@link CallSite} whose target is permanent, and can never be changed.
An {@code invokedynamic} instruction linked to a {@code ConstantCallSite} is permanently
bound to the call site's target.
@author John Rose, JSR 292 EG
"
      classrelation 3185666 // <generalisation>
	relation 3185666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3185666 // <generalisation>
	  b parent class_ref 945026 // CallSite
      end

      attribute 1693186 "isFrozen"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7169794 "ConstantCallSite"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a call site with a permanent target.
@param target the target to be permanently associated with this call site
@throws NullPointerException if the proposed target is null
"
      end

      operation 7169922 "ConstantCallSite"
	protected explicit_return_type ""
	nparams 2
	  param inout name "targetType" type class_ref 944258 // MethodType
	  param inout name "createTargetHook" type class_ref 944386 // MethodHandle
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a call site with a permanent target, possibly bound to the call site itself.
<p>
During construction of the call site, the {@code createTargetHook} is invoked to
produce the actual target, as if by a call of the form
{@code (MethodHandle) createTargetHook.invoke(this)}.
<p>
Note that user code cannot perform such an action directly in a subclass constructor,
since the target must be fixed before the {@code ConstantCallSite} constructor returns.
<p>
The hook is said to bind the call site to a target method handle,
and a typical action would be {@code someTarget.bindTo(this)}.
However, the hook is free to take any action whatever,
including ignoring the call site and returning a constant target.
<p>
The result returned by the hook must be a method handle of exactly
the same type as the call site.
<p>
While the hook is being called, the new {@code ConstantCallSite}
object is in a partially constructed state.
In this state,
a call to {@code getTarget}, or any other attempt to use the target,
will result in an {@code IllegalStateException}.
It is legal at all times to obtain the call site's type using the {@code type} method.

@param targetType the type of the method handle to be permanently associated with this call site
@param createTargetHook a method handle to invoke (on the call site) to produce the call site's target
@throws WrongMethodTypeException if the hook cannot be invoked on the required arguments,
        or if the target returned by the hook is not of the given {@code targetType}
@throws NullPointerException if the hook returns a null value
@throws ClassCastException if the hook returns something other than a {@code MethodHandle}
@throws Throwable anything else thrown by the hook function
"
      end

      operation 7170050 "getTarget"
	public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the target method of the call site, which behaves
like a {@code final} field of the {@code ConstantCallSite}.
That is, the target is always the original value passed
to the constructor call which created this instance.

@return the immutable linkage state of this call site, a constant method handle
@throws IllegalStateException if the {@code ConstantCallSite} constructor has not completed
"
      end

      operation 7170178 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ignore" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Always throws an {@link UnsupportedOperationException}.
This kind of call site cannot change its target.
@param ignore a new target proposed for the call site, which is ignored
@throws UnsupportedOperationException because this kind of call site cannot change its target
"
      end

      operation 7170306 "dynamicInvoker"
	public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns this call site's permanent target.
Since that target will never change, this is a correct implementation
of {@link CallSite#dynamicInvoker CallSite.dynamicInvoker}.
@return the immutable linkage state of this call site, a constant method handle
@throws IllegalStateException if the {@code ConstantCallSite} constructor has not completed
"
      end
    end

    class 946818 "DelegatingMethodHandle"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A method handle whose invocation behavior is determined by a target.
The delegating MH itself can hold extra \"intentions\" beyond the simple behavior.
@author jrose

non-public"
      classrelation 3185794 // <generalisation>
	relation 3185794 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3185794 // <generalisation>
	  b parent class_ref 944386 // MethodHandle
      end

      operation 7170434 "DelegatingMethodHandle"
	protected explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7170562 "DelegatingMethodHandle"
	protected explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7170690 "DelegatingMethodHandle"
	protected explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7170818 "getTarget"
	abstract protected return_type class_ref 944386 // MethodHandle
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Define this to extract the delegated target which supplies the invocation behavior. "
      end

      operation 7170946 "asTypeUncached"
	abstract package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "newType" type class_ref 944258 // MethodType
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7171074 "internalMemberName"
	package return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7171202 "isInvokeSpecial"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7171330 "internalCallerClass"
	package return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7171458 "copyWith"
	package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7171586 "internalProperties"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7171714 "rebind"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7171842 "chooseDelegatingForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7171970 "makeReinvokerForm"
	class_operation package return_type class_ref 945410 // LambdaForm
	nparams 4
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "whichCache" explicit_type "int"
	  param inout name "constraint" type class_ref 129538 // Object
	  param inout name "getTargetFn" explicit_type "NamedFunction"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7172098 "makeReinvokerForm"
	class_operation package return_type class_ref 945410 // LambdaForm
	nparams 7
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param in name "whichCache" explicit_type "int"
	  param inout name "constraint" type class_ref 129538 // Object
	  param inout name "debugString" type class_ref 128130 // String
	  param inout name "forceInline" explicit_type "boolean"
	  param inout name "getTargetFn" explicit_type "NamedFunction"
	  param inout name "preActionFn" explicit_type "NamedFunction"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a LF which simply reinvokes a target of the given basic type. "
      end

      attribute 1693314 "NF_getTarget"
	class_attribute const_attribute package explicit_type "NamedFunction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 159234 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            NF_getTarget = new NamedFunction(DelegatingMethodHandle.class
                                             .getDeclaredMethod(\"getTarget\"));
        } catch (ReflectiveOperationException ex) {
            throw newInternalError(ex);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end
    end

    class 946946 "DirectMethodHandle"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The flavor of method handle which implements a constant reference
to a class member.
@author jrose
"
      classrelation 3185922 // <generalisation>
	relation 3185922 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3185922 // <generalisation>
	  b parent class_ref 944386 // MethodHandle
      end

      classrelation 3186050 // member (<unidirectional association>)
	relation 3186050 --->
	  a role_name "member" const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3186050 // member (<unidirectional association>)
	  b parent class_ref 945538 // MemberName
      end

      operation 7172226 "DirectMethodHandle"
	private explicit_return_type ""
	nparams 3
	  param inout name "mtype" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	  param inout name "member" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors and factory methods in this class *must* be package scoped or private."
      end

      operation 7172354 "make"
	class_operation package return_type class_ref 946946 // DirectMethodHandle
	nparams 3
	  param in name "refKind" explicit_type "byte"
	  param inout name "receiver" type class_ref 130818 // Class
	  param inout name "member" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory methods:"
      end

      operation 7172482 "make"
	class_operation package return_type class_ref 946946 // DirectMethodHandle
	nparams 2
	  param inout name "receiver" type class_ref 130818 // Class
	  param inout name "member" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7172610 "make"
	class_operation package return_type class_ref 946946 // DirectMethodHandle
	nparams 1
	  param inout name "member" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7172738 "make"
	class_operation package return_type class_ref 946946 // DirectMethodHandle
	nparams 1
	  param inout name "method" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7172866 "make"
	class_operation package return_type class_ref 946946 // DirectMethodHandle
	nparams 1
	  param inout name "field" type class_ref 189698 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7172994 "makeAllocator"
	class_operation private return_type class_ref 946946 // DirectMethodHandle
	nparams 1
	  param inout name "ctor" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7173122 "rebind"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7173250 "copyWith"
	package return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7173378 "internalProperties"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7173506 "internalMemberName"
	package return_type class_ref 945538 // MemberName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@ForceInline
"
	
	
	
	comment "// Implementation methods."
      end

      classrelation 3186178 // IMPL_NAMES (<unidirectional association>)
	relation 3186178 --->
	  a role_name "IMPL_NAMES" init_value " MemberName.getFactory()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3186178 // IMPL_NAMES (<unidirectional association>)
	  b parent class_ref 947074 // Factory
      end

      operation 7173634 "preparedLambdaForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "m" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a LF which can invoke the given method.
Cache and share this structure among all methods with
the same basicType and refKind.
"
      end

      operation 7173762 "preparedLambdaForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 2
	  param inout name "mtype" type class_ref 944258 // MethodType
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7173890 "makePreparedLambdaForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 2
	  param inout name "mtype" type class_ref 944258 // MethodType
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7174018 "findDirectMethodHandle"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7174146 "maybeCompile"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "lform" type class_ref 945410 // LambdaForm
	  param inout name "m" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7174274 "internalMemberName"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "mh" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment " Static wrapper for DirectMethodHandle.internalMemberName. 
non-public"
      end

      operation 7174402 "internalMemberNameEnsureInit"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "mh" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static wrapper for DirectMethodHandle.internalMemberName.
This one also forces initialization.

non-public"
      end

      operation 7174530 "shouldBeInitialized"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "member" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      class 947202 "EnsureInitialized"
	visibility private 
	nactuals 1
	actual class class_ref 191234 // ClassValue
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3186306 // <realization>
	  relation 3186306 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3186306 // <realization>
	    b parent class_ref 191234 // ClassValue
	end

	operation 7174658 "computeValue"
	  protected return_type class_ref 131330 // WeakReference
	  nparams 1
	    param inout name "type" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Thread> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	classrelation 3186434 // INSTANCE (<unidirectional association>)
	  relation 3186434 --->
	    a role_name "INSTANCE" init_value " new EnsureInitialized()" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3186434 // INSTANCE (<unidirectional association>)
	    b parent class_ref 947202 // EnsureInitialized
	end
      end

      operation 7174786 "ensureInitialized"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7174914 "checkInitialized"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "member" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7175042 "ensureInitialized"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "mh" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      class 947330 "Special"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3186562 // <generalisation>
	  relation 3186562 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3186562 // <generalisation>
	    b parent class_ref 946946 // DirectMethodHandle
	end

	operation 7175170 "Special"
	  private explicit_return_type ""
	  nparams 3
	    param inout name "mtype" type class_ref 944258 // MethodType
	    param inout name "form" type class_ref 945410 // LambdaForm
	    param inout name "member" type class_ref 945538 // MemberName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7175298 "isInvokeSpecial"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7175426 "copyWith"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 947458 "Constructor"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3186690 // <generalisation>
	  relation 3186690 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3186690 // <generalisation>
	    b parent class_ref 946946 // DirectMethodHandle
	end

	classrelation 3186818 // initMethod (<unidirectional association>)
	  relation 3186818 --->
	    a role_name "initMethod" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3186818 // initMethod (<unidirectional association>)
	    b parent class_ref 945538 // MemberName
	end

	classrelation 3186946 // instanceClass (<unidirectional association>)
	  relation 3186946 --->
	    a role_name "instanceClass" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3186946 // instanceClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	operation 7175554 "Constructor"
	  private explicit_return_type ""
	  nparams 5
	    param inout name "mtype" type class_ref 944258 // MethodType
	    param inout name "form" type class_ref 945410 // LambdaForm
	    param inout name "constructor" type class_ref 945538 // MemberName
	    param inout name "initMethod" type class_ref 945538 // MemberName
	    param inout name "instanceClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7175682 "copyWith"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 7175810 "constructorMethod"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "mh" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7175938 "allocateInstance"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "mh" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 193282 // InstantiationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      class 947586 "Accessor"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3187074 // <generalisation>
	  relation 3187074 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3187074 // <generalisation>
	    b parent class_ref 946946 // DirectMethodHandle
	end

	classrelation 3187202 // fieldType (<unidirectional association>)
	  relation 3187202 --->
	    a role_name "fieldType" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3187202 // fieldType (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	attribute 1693442 "fieldOffset"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7176066 "Accessor"
	  private explicit_return_type ""
	  nparams 4
	    param inout name "mtype" type class_ref 944258 // MethodType
	    param inout name "form" type class_ref 945410 // LambdaForm
	    param inout name "member" type class_ref 945538 // MemberName
	    param in name "fieldOffset" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7176194 "checkCast"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7176322 "copyWith"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 7176450 "fieldOffset"
	class_operation package explicit_return_type "long"
	nparams 1
	  param inout name "accessorObj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment "non-public"
      end

      operation 7176578 "checkBase"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment "non-public"
      end

      class 947714 "StaticAccessor"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3187330 // <generalisation>
	  relation 3187330 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3187330 // <generalisation>
	    b parent class_ref 946946 // DirectMethodHandle
	end

	classrelation 3187458 // fieldType (<unidirectional association>)
	  relation 3187458 --->
	    a role_name "fieldType" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 3187458 // fieldType (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 3187586 // staticBase (<unidirectional association>)
	  relation 3187586 --->
	    a role_name "staticBase" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3187586 // staticBase (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	attribute 1693570 "staticOffset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7176706 "StaticAccessor"
	  private explicit_return_type ""
	  nparams 5
	    param inout name "mtype" type class_ref 944258 // MethodType
	    param inout name "form" type class_ref 945410 // LambdaForm
	    param inout name "member" type class_ref 945538 // MemberName
	    param inout name "staticBase" type class_ref 129538 // Object
	    param in name "staticOffset" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7176834 "checkCast"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7176962 "copyWith"
	  package return_type class_ref 944386 // MethodHandle
	  nparams 2
	    param inout name "mt" type class_ref 944258 // MethodType
	    param inout name "lf" type class_ref 945410 // LambdaForm
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 7177090 "nullCheck"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment "non-public"
      end

      operation 7177218 "staticBase"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "accessorObj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment "non-public"
      end

      operation 7177346 "staticOffset"
	class_operation package explicit_return_type "long"
	nparams 1
	  param inout name "accessorObj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment "non-public"
      end

      operation 7177474 "checkCast"
	class_operation package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "mh" type class_ref 129538 // Object
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment "non-public"
      end

      operation 7177602 "checkCast"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1693698 "AF_GETFIELD"
	class_attribute private explicit_type "byte"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Caching machinery for field accessors:
"
      end

      attribute 1693826 "AF_PUTFIELD"
	class_attribute private explicit_type "byte"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Caching machinery for field accessors:
"
      end

      attribute 1693954 "AF_GETSTATIC"
	class_attribute private explicit_type "byte"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Caching machinery for field accessors:
"
      end

      attribute 1694082 "AF_PUTSTATIC"
	class_attribute private explicit_type "byte"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Caching machinery for field accessors:
"
      end

      attribute 1694210 "AF_GETSTATIC_INIT"
	class_attribute private explicit_type "byte"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Caching machinery for field accessors:
"
      end

      attribute 1694338 "AF_PUTSTATIC_INIT"
	class_attribute private explicit_type "byte"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Caching machinery for field accessors:
"
      end

      attribute 1694466 "AF_LIMIT"
	class_attribute private explicit_type "byte"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Caching machinery for field accessors:
"
      end

      attribute 1694594 "FT_LAST_WRAPPER"
	class_attribute private explicit_type "int"
	init_value " Wrapper.values().length-1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Enumerate the different field kinds using Wrapper,
 with an extra case added for checked references.
"
      end

      attribute 1694722 "FT_UNCHECKED_REF"
	class_attribute private explicit_type "int"
	init_value " Wrapper.OBJECT.ordinal()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Enumerate the different field kinds using Wrapper,
 with an extra case added for checked references.
"
      end

      attribute 1694850 "FT_CHECKED_REF"
	class_attribute private explicit_type "int"
	init_value " FT_LAST_WRAPPER+1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Enumerate the different field kinds using Wrapper,
 with an extra case added for checked references.
"
      end

      attribute 1694978 "FT_LIMIT"
	class_attribute private explicit_type "int"
	init_value " FT_LAST_WRAPPER+2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Enumerate the different field kinds using Wrapper,
 with an extra case added for checked references.
"
      end

      operation 7177730 "afIndex"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "formOp" explicit_type "byte"
	  param inout name "isVolatile" explicit_type "boolean"
	  param in name "ftypeKind" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3187714 // ACCESSOR_FORMS (<unidirectional association>)
	relation 3187714 --->
	  a role_name "ACCESSOR_FORMS" multiplicity "[]" init_value " new LambdaForm[afIndex(AF_LIMIT, false, 0)]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3187714 // ACCESSOR_FORMS (<unidirectional association>)
	  b parent class_ref 945410 // LambdaForm
      end

      operation 7177858 "ftypeKind"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "ftype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7177986 "preparedFieldLambdaForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 1
	  param inout name "m" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a LF which can access the given field.
Cache and share this structure among all fields with
the same basicType and refKind.
"
      end

      operation 7178114 "preparedFieldLambdaForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 3
	  param in name "formOp" explicit_type "byte"
	  param inout name "isVolatile" explicit_type "boolean"
	  param inout name "ftype" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7178242 "makePreparedFieldLambdaForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 3
	  param in name "formOp" explicit_type "byte"
	  param inout name "isVolatile" explicit_type "boolean"
	  param in name "ftypeKind" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 947842 "Lazy"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1695106 "NF_internalMemberName"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1695234 "NF_internalMemberNameEnsureInit"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1695362 "NF_ensureInitialized"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1695490 "NF_fieldOffset"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1695618 "NF_checkBase"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1695746 "NF_staticBase"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1695874 "NF_staticOffset"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1696002 "NF_checkCast"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1696130 "NF_allocateInstance"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1696258 "NF_constructorMethod"
	  class_attribute const_attribute package explicit_type "NamedFunction"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	extra_member 159362 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                NamedFunction nfs[] = {
                        NF_internalMemberName = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"internalMemberName\", Object.class)),
                        NF_internalMemberNameEnsureInit = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"internalMemberNameEnsureInit\", Object.class)),
                        NF_ensureInitialized = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"ensureInitialized\", Object.class)),
                        NF_fieldOffset = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"fieldOffset\", Object.class)),
                        NF_checkBase = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"checkBase\", Object.class)),
                        NF_staticBase = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"staticBase\", Object.class)),
                        NF_staticOffset = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"staticOffset\", Object.class)),
                        NF_checkCast = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"checkCast\", Object.class, Object.class)),
                        NF_allocateInstance = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"allocateInstance\", Object.class)),
                        NF_constructorMethod = new NamedFunction(DirectMethodHandle.class
                                .getDeclaredMethod(\"constructorMethod\", Object.class))
                };
                for (NamedFunction nf : nfs) {
                    // Each nf must be statically invocable or we get tied up in our bootstraps.
                    assert(InvokerBytecodeGenerator.isStaticallyInvocable(nf.member)) : nf;
                    nf.resolve();
                }
            } catch (ReflectiveOperationException ex) {
                throw newInternalError(ex);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end
    end

    class 947970 "DontInline"
      visibility package stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})
@Retention(RetentionPolicy.RUNTIME)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Internal marker for some methods in the JSR 292 implementation.

non-public"
    end

    class 948098 "ForceInline"
      visibility package stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})
@Retention(RetentionPolicy.RUNTIME)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Internal marker for some methods in the JSR 292 implementation.

non-public"
    end

    class 948226 "InfoFromMemberName"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Auxiliary to MethodHandleInfo, wants to nest in MethodHandleInfo but must be non-public.

non-public"
      classrelation 3187842 // <realization>
	relation 3187842 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3187842 // <realization>
	  b parent class_ref 944514 // MethodHandleInfo
      end

      classrelation 3187970 // member (<unidirectional association>)
	relation 3187970 --->
	  a role_name "member" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3187970 // member (<unidirectional association>)
	  b parent class_ref 945538 // MemberName
      end

      attribute 1697538 "referenceKind"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7179522 "InfoFromMemberName"
	package explicit_return_type ""
	nparams 3
	  param inout name "lookup" type class_ref 944770 // Lookup
	  param inout name "member" type class_ref 945538 // MemberName
	  param in name "referenceKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7179650 "getDeclaringClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7179778 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7179906 "getMethodType"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7180034 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7180162 "getReferenceKind"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7180290 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7180418 "reflectAs"
	public explicit_return_type "T"
	nparams 2
	  param inout name "expected" type class_ref 130818 // Class
	  param inout name "lookup" type class_ref 944770 // Lookup
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Member> ${type} ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7180546 "reflectUnchecked"
	private return_type class_ref 194690 // Member
	nparams 0
	nexceptions 1
	  exception class_ref 932226 // ReflectiveOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7180674 "convertToMemberName"
	class_operation private return_type class_ref 945538 // MemberName
	nparams 2
	  param in name "refKind" explicit_type "byte"
	  param inout name "mem" type class_ref 194690 // Member
	nexceptions 1
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 948354 "InjectedProfile"
      visibility package stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Target({ElementType.METHOD, ElementType.CONSTRUCTOR})
@Retention(RetentionPolicy.RUNTIME)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Internal marker for some methods in the JSR 292 implementation.

non-public"
    end

    class 948482 "InnerClassLambdaMetafactory"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Lambda metafactory implementation which dynamically creates an
inner-class-like class per lambda callsite.

@see LambdaMetafactory

 package "
      classrelation 3188098 // <generalisation>
	relation 3188098 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3188098 // <generalisation>
	  b parent class_ref 944130 // AbstractValidatingLambdaMetafactory
      end

      attribute 1697666 "UNSAFE"
	class_attribute const_attribute private explicit_type "Unsafe"
	init_value " Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1697794 "CLASSFILE_VERSION"
	class_attribute const_attribute private explicit_type "int"
	init_value " 52"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3188226 // METHOD_DESCRIPTOR_VOID (<unidirectional association>)
	relation 3188226 --->
	  a role_name "METHOD_DESCRIPTOR_VOID" init_value " Type.getMethodDescriptor(Type.VOID_TYPE)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3188226 // METHOD_DESCRIPTOR_VOID (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3188354 // JAVA_LANG_OBJECT (<unidirectional association>)
	relation 3188354 --->
	  a role_name "JAVA_LANG_OBJECT" init_value " \"java/lang/Object\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3188354 // JAVA_LANG_OBJECT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3188482 // NAME_CTOR (<unidirectional association>)
	relation 3188482 --->
	  a role_name "NAME_CTOR" init_value " \"<init>\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3188482 // NAME_CTOR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3188610 // NAME_FACTORY (<unidirectional association>)
	relation 3188610 --->
	  a role_name "NAME_FACTORY" init_value " \"get$Lambda\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3188610 // NAME_FACTORY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3188738 // NAME_SERIALIZED_LAMBDA (<unidirectional association>)
	relation 3188738 --->
	  a role_name "NAME_SERIALIZED_LAMBDA" init_value " \"java/lang/invoke/SerializedLambda\"" class_relation const_relation private
	    comment "Serialization support
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3188738 // NAME_SERIALIZED_LAMBDA (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3188866 // NAME_NOT_SERIALIZABLE_EXCEPTION (<unidirectional association>)
	relation 3188866 --->
	  a role_name "NAME_NOT_SERIALIZABLE_EXCEPTION" init_value " \"java/io/NotSerializableException\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3188866 // NAME_NOT_SERIALIZABLE_EXCEPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3188994 // DESCR_METHOD_WRITE_REPLACE (<unidirectional association>)
	relation 3188994 --->
	  a role_name "DESCR_METHOD_WRITE_REPLACE" init_value " \"()Ljava/lang/Object;\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3188994 // DESCR_METHOD_WRITE_REPLACE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3189122 // DESCR_METHOD_WRITE_OBJECT (<unidirectional association>)
	relation 3189122 --->
	  a role_name "DESCR_METHOD_WRITE_OBJECT" init_value " \"(Ljava/io/ObjectOutputStream;)V\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3189122 // DESCR_METHOD_WRITE_OBJECT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3189250 // DESCR_METHOD_READ_OBJECT (<unidirectional association>)
	relation 3189250 --->
	  a role_name "DESCR_METHOD_READ_OBJECT" init_value " \"(Ljava/io/ObjectInputStream;)V\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3189250 // DESCR_METHOD_READ_OBJECT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3189378 // NAME_METHOD_WRITE_REPLACE (<unidirectional association>)
	relation 3189378 --->
	  a role_name "NAME_METHOD_WRITE_REPLACE" init_value " \"writeReplace\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3189378 // NAME_METHOD_WRITE_REPLACE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3189506 // NAME_METHOD_READ_OBJECT (<unidirectional association>)
	relation 3189506 --->
	  a role_name "NAME_METHOD_READ_OBJECT" init_value " \"readObject\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3189506 // NAME_METHOD_READ_OBJECT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3189634 // NAME_METHOD_WRITE_OBJECT (<unidirectional association>)
	relation 3189634 --->
	  a role_name "NAME_METHOD_WRITE_OBJECT" init_value " \"writeObject\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3189634 // NAME_METHOD_WRITE_OBJECT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3189762 // DESCR_CTOR_SERIALIZED_LAMBDA (<unidirectional association>)
	relation 3189762 --->
	  a role_name "DESCR_CTOR_SERIALIZED_LAMBDA" init_value " MethodType.methodType(void.class,
                                    Class.class,
                                    String.class, String.class, String.class,
                                    int.class, String.class, String.class, String.class,
                                    String.class,
                                    Object[].class).toMethodDescriptorString()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3189762 // DESCR_CTOR_SERIALIZED_LAMBDA (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3189890 // DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION (<unidirectional association>)
	relation 3189890 --->
	  a role_name "DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION" init_value " MethodType.methodType(void.class, String.class).toMethodDescriptorString()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3189890 // DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3190018 // SER_HOSTILE_EXCEPTIONS (<unidirectional association>)
	relation 3190018 --->
	  a role_name "SER_HOSTILE_EXCEPTIONS" multiplicity "[]" init_value " new String[] {NAME_NOT_SERIALIZABLE_EXCEPTION}" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3190018 // SER_HOSTILE_EXCEPTIONS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3190146 // EMPTY_STRING_ARRAY (<unidirectional association>)
	relation 3190146 --->
	  a role_name "EMPTY_STRING_ARRAY" multiplicity "[]" init_value " new String[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3190146 // EMPTY_STRING_ARRAY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3190274 // counter (<unidirectional association>)
	relation 3190274 --->
	  a role_name "counter" init_value " new AtomicInteger(0)" class_relation const_relation private
	    comment " Used to ensure that each spun class name is unique
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3190274 // counter (<unidirectional association>)
	  b parent class_ref 191490 // AtomicInteger
      end

      classrelation 3190402 // dumper (<unidirectional association>)
	relation 3190402 --->
	  a role_name "dumper" class_relation const_relation private
	    comment " For dumping generated classes to disk, for debugging purposes
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3190402 // dumper (<unidirectional association>)
	  b parent class_ref 948610 // ProxyClassesDumper
      end

      extra_member 159490 "initialization"
	
	cpp "" ""
	java "  static {
        final String key = \"jdk.internal.lambda.dumpProxyClasses\";
        String path = AccessController.doPrivileged(
                new GetPropertyAction(key), null,
                new PropertyPermission(key , \"read\"));
        dumper = (null == path) ? null : ProxyClassesDumper.getInstance(path);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3190530 // implMethodClassName (<unidirectional association>)
	relation 3190530 --->
	  a role_name "implMethodClassName" const_relation private
	    comment " See context values in AbstractValidatingLambdaMetafactory
 Name of type containing implementation \"CC\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3190530 // implMethodClassName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3190658 // implMethodName (<unidirectional association>)
	relation 3190658 --->
	  a role_name "implMethodName" const_relation private
	    comment " Name of implementation method \"impl\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3190658 // implMethodName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3190786 // implMethodDesc (<unidirectional association>)
	relation 3190786 --->
	  a role_name "implMethodDesc" const_relation private
	    comment " Type descriptor for implementation methods \"(I)Ljava/lang/String;\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3190786 // implMethodDesc (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3190914 // implMethodReturnClass (<unidirectional association>)
	relation 3190914 --->
	  a role_name "implMethodReturnClass" const_relation private
	    comment " class for implementaion method return type \"Ljava/lang/String;\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3190914 // implMethodReturnClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3191042 // constructorType (<unidirectional association>)
	relation 3191042 --->
	  a role_name "constructorType" const_relation private
	    comment " Generated class constructor type \"(CC)void\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3191042 // constructorType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      attribute 1697922 "cw"
	const_attribute private explicit_type "ClassWriter"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ASM class writer"
      end

      classrelation 3191170 // argNames (<unidirectional association>)
	relation 3191170 --->
	  a role_name "argNames" multiplicity "[]" const_relation private
	    comment " Generated names for the constructor arguments"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3191170 // argNames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3191298 // argDescs (<unidirectional association>)
	relation 3191298 --->
	  a role_name "argDescs" multiplicity "[]" const_relation private
	    comment " Type descriptors for the constructor arguments"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3191298 // argDescs (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3191426 // lambdaClassName (<unidirectional association>)
	relation 3191426 --->
	  a role_name "lambdaClassName" const_relation private
	    comment " Generated name for the generated class \"X$$Lambda$1\""
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3191426 // lambdaClassName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7180802 "InnerClassLambdaMetafactory"
	public explicit_return_type ""
	nparams 9
	  param inout name "caller" type class_ref 944770 // Lookup
	  param inout name "invokedType" type class_ref 944258 // MethodType
	  param inout name "samMethodName" type class_ref 128130 // String
	  param inout name "samMethodType" type class_ref 944258 // MethodType
	  param inout name "implMethod" type class_ref 944386 // MethodHandle
	  param inout name "instantiatedMethodType" type class_ref 944258 // MethodType
	  param inout name "isSerializable" explicit_type "boolean"
	  param inout name "markerInterfaces" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "additionalBridges" type class_ref 944258 // MethodType
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 944898 // LambdaConversionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}<?>[] ${p7}, ${t8}[] ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "General meta-factory constructor, supporting both standard cases and
allowing for uncommon options such as serialization or bridging.

@param caller Stacked automatically by VM; represents a lookup context
              with the accessibility privileges of the caller.
@param invokedType Stacked automatically by VM; the signature of the
                   invoked method, which includes the expected static
                   type of the returned lambda object, and the static
                   types of the captured arguments for the lambda.  In
                   the event that the implementation method is an
                   instance method, the first argument in the invocation
                   signature will correspond to the receiver.
@param samMethodName Name of the method in the functional interface to
                     which the lambda or method reference is being
                     converted, represented as a String.
@param samMethodType Type of the method in the functional interface to
                     which the lambda or method reference is being
                     converted, represented as a MethodType.
@param implMethod The implementation method which should be called (with
                  suitable adaptation of argument types, return types,
                  and adjustment for captured arguments) when methods of
                  the resulting functional interface instance are invoked.
@param instantiatedMethodType The signature of the primary functional
                              interface method after type variables are
                              substituted with their instantiation from
                              the capture site
@param isSerializable Should the lambda be made serializable?  If set,
                      either the target type or one of the additional SAM
                      types must extend {@code Serializable}.
@param markerInterfaces Additional interfaces which the lambda object
                      should implement.
@param additionalBridges Method types for additional signatures to be
                         bridged to the implementation method
@throws LambdaConversionException If any of the meta-factory protocol
invariants are violated
"
      end

      operation 7180930 "buildCallSite"
	package return_type class_ref 945026 // CallSite
	nparams 0
	nexceptions 1
	  exception class_ref 944898 // LambdaConversionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Build the CallSite. Generate a class file which implements the functional
interface, define the class, if there are no parameters create an instance
of the class which the CallSite will return, otherwise, generate handles
which will call the class' constructor.

@return a CallSite, which, when invoked, will return an instance of the
functional interface
@throws ReflectiveOperationException
@throws LambdaConversionException If properly formed functional interface
is not found
"
      end

      operation 7181058 "spinInnerClass"
	private return_type class_ref 130818 // Class
	nparams 0
	nexceptions 1
	  exception class_ref 944898 // LambdaConversionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a class file which implements the functional
interface, define and return the class.

@implNote The class that is generated does not include signature
information for exceptions that may be present on the SAM method.
This is to reduce classfile size, and is harmless as checked exceptions
are erased anyway, no one will ever compile against this classfile,
and we make no guarantees about the reflective properties of lambda
objects.

@return a Class which implements the functional interface
@throws LambdaConversionException If properly formed functional interface
is not found
"
      end

      operation 7181186 "generateFactory"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate the factory method for the class
"
      end

      operation 7181314 "generateConstructor"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate the constructor for the class
"
      end

      operation 7181442 "generateSerializationFriendlyMethods"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a writeReplace method that supports serialization
"
      end

      operation 7181570 "generateSerializationHostileMethods"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a readObject/writeObject method that is hostile to serialization
"
      end

      class 948738 "ForwardingMethodGenerator"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3192066 // <generalisation>
	  relation 3192066 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3192066 // <generalisation>
	    b parent class_ref 948866 // TypeConvertingMethodAdapter
	end

	operation 7184002 "ForwardingMethodGenerator"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "mv" explicit_type "MethodVisitor"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7184130 "generate"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "methodType" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7184258 "convertArgumentTypes"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "samType" type class_ref 944258 // MethodType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7184386 "invocationOpcode"
	  private explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 934274 // InternalError
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 7184514 "getParameterSize"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7184642 "getLoadOpcode"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7184770 "getReturnOpcode"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7184898 "getOpcodeOffset"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 948610 "ProxyClassesDumper"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Helper class used by InnerClassLambdaMetafactory to log generated classes

@implNote
<p> Because this class is called by LambdaMetafactory, make use
of lambda lead to recursive calls cause stack overflow.
"
      attribute 1729794 "HEX"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {
        '0', '1', '2', '3', '4', '5', '6', '7',
        '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1729922 "BAD_CHARS"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {
        '\\\\', ':', '*', '?', '\"', '<', '>', '|'
    }"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3209090 // REPLACEMENT (<unidirectional association>)
	relation 3209090 --->
	  a role_name "REPLACEMENT" multiplicity "[]" init_value " {
        \"%5C\", \"%3A\", \"%2A\", \"%3F\", \"%22\", \"%3C\", \"%3E\", \"%7C\"
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3209090 // REPLACEMENT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3209218 // dumpDir (<unidirectional association>)
	relation 3209218 --->
	  a role_name "dumpDir" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3209218 // dumpDir (<unidirectional association>)
	  b parent class_ref 923650 // Path
      end

      operation 7295234 "getInstance"
	class_operation public return_type class_ref 948610 // ProxyClassesDumper
	nparams 1
	  param inout name "path" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7295362 "ProxyClassesDumper"
	private explicit_return_type ""
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7295490 "validateDumpDir"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 923650 // Path
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7295618 "encodeForFilename"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7295746 "dumpClass"
	public explicit_return_type "void"
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param in name "classBytes" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 948866 "TypeConvertingMethodAdapter"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 7181698 "TypeConvertingMethodAdapter"
	package explicit_return_type ""
	nparams 1
	  param inout name "mv" explicit_type "MethodVisitor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1698050 "NUM_WRAPPERS"
	class_attribute const_attribute private explicit_type "int"
	init_value " Wrapper.values().length"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3191682 // NAME_OBJECT (<unidirectional association>)
	relation 3191682 --->
	  a role_name "NAME_OBJECT" init_value " \"java/lang/Object\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3191682 // NAME_OBJECT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3191810 // WRAPPER_PREFIX (<unidirectional association>)
	relation 3191810 --->
	  a role_name "WRAPPER_PREFIX" init_value " \"Ljava/lang/\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3191810 // WRAPPER_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3191938 // NAME_BOX_METHOD (<unidirectional association>)
	relation 3191938 --->
	  a role_name "NAME_BOX_METHOD" init_value " \"valueOf\"" class_relation const_relation private
	    comment " Same for all primitives; name of the boxing method
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3191938 // NAME_BOX_METHOD (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1698178 "wideningOpcodes"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[][]"
	init_value " new int[NUM_WRAPPERS][NUM_WRAPPERS]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Table of opcodes for widening primitive conversions; NOP = no conversion
"
      end

      attribute 1698306 "FROM_WRAPPER_NAME"
	class_attribute const_attribute private explicit_type "Wrapper"
	multiplicity "[]"
	init_value " new Wrapper[16]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1698434 "FROM_TYPE_SORT"
	class_attribute const_attribute private explicit_type "Wrapper"
	multiplicity "[]"
	init_value " new Wrapper[16]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Table of wrappers for primitives, indexed by ASM type sorts
"
      end

      extra_member 159618 "initialization"
	
	cpp "" ""
	java "  static {
        for (Wrapper w : Wrapper.values()) {
            if (w.basicTypeChar() != 'L') {
                int wi = hashWrapperName(w.wrapperSimpleName());
                assert (FROM_WRAPPER_NAME[wi] == null);
                FROM_WRAPPER_NAME[wi] = w;
            }
        }

        for (int i = 0; i < NUM_WRAPPERS; i++) {
            for (int j = 0; j < NUM_WRAPPERS; j++) {
                wideningOpcodes[i][j] = Opcodes.NOP;
            }
        }

        initWidening(LONG,   Opcodes.I2L, BYTE, SHORT, INT, CHAR);
        initWidening(LONG,   Opcodes.F2L, FLOAT);
        initWidening(FLOAT,  Opcodes.I2F, BYTE, SHORT, INT, CHAR);
        initWidening(FLOAT,  Opcodes.L2F, LONG);
        initWidening(DOUBLE, Opcodes.I2D, BYTE, SHORT, INT, CHAR);
        initWidening(DOUBLE, Opcodes.F2D, FLOAT);
        initWidening(DOUBLE, Opcodes.L2D, LONG);

        FROM_TYPE_SORT[Type.BYTE] = Wrapper.BYTE;
        FROM_TYPE_SORT[Type.SHORT] = Wrapper.SHORT;
        FROM_TYPE_SORT[Type.INT] = Wrapper.INT;
        FROM_TYPE_SORT[Type.LONG] = Wrapper.LONG;
        FROM_TYPE_SORT[Type.CHAR] = Wrapper.CHAR;
        FROM_TYPE_SORT[Type.FLOAT] = Wrapper.FLOAT;
        FROM_TYPE_SORT[Type.DOUBLE] = Wrapper.DOUBLE;
        FROM_TYPE_SORT[Type.BOOLEAN] = Wrapper.BOOLEAN;
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7181826 "initWidening"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "to" explicit_type "Wrapper"
	  param in name "opcode" explicit_type "int"
	  param inout name "" explicit_type "Wrapper...from"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7181954 "hashWrapperName"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "xn" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Class name to Wrapper hash, derived from Wrapper.hashWrap()
@param xn
@return The hash code 0-15
"
      end

      operation 7182082 "wrapperOrNullFromDescriptor"
	private explicit_return_type "Wrapper"
	nparams 1
	  param inout name "desc" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7182210 "wrapperName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "w" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7182338 "unboxMethod"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "w" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7182466 "boxingDescriptor"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "w" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7182594 "unboxingDescriptor"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "w" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7182722 "boxIfTypePrimitive"
	package explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 936578 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7182850 "widen"
	package explicit_return_type "void"
	nparams 2
	  param inout name "ws" explicit_type "Wrapper"
	  param inout name "wt" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7182978 "box"
	package explicit_return_type "void"
	nparams 1
	  param inout name "w" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7183106 "unbox"
	package explicit_return_type "void"
	nparams 2
	  param inout name "sname" type class_ref 128130 // String
	  param inout name "wt" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert types by unboxing. The source type is known to be a primitive wrapper.
@param sname A primitive wrapper corresponding to wrapped reference source type
@param wt A primitive wrapper being converted to
"
      end

      operation 7183234 "descriptorToName"
	private return_type class_ref 128130 // String
	nparams 1
	  param inout name "desc" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7183362 "cast"
	package explicit_return_type "void"
	nparams 2
	  param inout name "ds" type class_ref 128130 // String
	  param inout name "dt" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7183490 "isPrimitive"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "w" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7183618 "toWrapper"
	private explicit_return_type "Wrapper"
	nparams 1
	  param inout name "desc" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7183746 "convertType"
	package explicit_return_type "void"
	nparams 3
	  param inout name "arg" type class_ref 130818 // Class
	  param inout name "target" type class_ref 130818 // Class
	  param inout name "functional" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert an argument of type 'arg' to be passed to 'target' assuring that it is 'functional'.
Insert the needed conversion instructions in the method code.
@param arg
@param target
@param functional
"
      end

      operation 7183874 "iconst"
	package explicit_return_type "void"
	nparams 1
	  param in name "cst" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The following method is copied from
org.objectweb.asm.commons.InstructionAdapter. Part of ASM: a very small
and fast Java bytecode manipulation framework.
Copyright (c) 2000-2005 INRIA, France Telecom All rights reserved.
"
      end
    end

    class 949122 "InvokeDynamic"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is a place-holder class.  Some HotSpot implementations need to see it.
"
      operation 7185026 "InvokeDynamic"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 949250 "InvokerBytecodeGenerator"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Code generation backend for LambdaForm.
<p>
@author John Rose, JSR 292 EG
"
      classrelation 3192194 // MH (<unidirectional association>)
	relation 3192194 --->
	  a role_name "MH" init_value " \"java/lang/invoke/MethodHandle\"" class_relation const_relation private
	    comment " Define class names for convenience. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3192194 // MH (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3192322 // MHI (<unidirectional association>)
	relation 3192322 --->
	  a role_name "MHI" init_value " \"java/lang/invoke/MethodHandleImpl\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3192322 // MHI (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3192450 // LF (<unidirectional association>)
	relation 3192450 --->
	  a role_name "LF" init_value " \"java/lang/invoke/LambdaForm\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3192450 // LF (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3192578 // LFN (<unidirectional association>)
	relation 3192578 --->
	  a role_name "LFN" init_value " \"java/lang/invoke/LambdaForm$Name\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3192578 // LFN (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3192706 // CLS (<unidirectional association>)
	relation 3192706 --->
	  a role_name "CLS" init_value " \"java/lang/Class\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3192706 // CLS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3192834 // OBJ (<unidirectional association>)
	relation 3192834 --->
	  a role_name "OBJ" init_value " \"java/lang/Object\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3192834 // OBJ (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3192962 // OBJARY (<unidirectional association>)
	relation 3192962 --->
	  a role_name "OBJARY" init_value " \"[Ljava/lang/Object;\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3192962 // OBJARY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3193090 // MH_SIG (<unidirectional association>)
	relation 3193090 --->
	  a role_name "MH_SIG" init_value " \"L\" + MH + \";\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3193090 // MH_SIG (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3193218 // LF_SIG (<unidirectional association>)
	relation 3193218 --->
	  a role_name "LF_SIG" init_value " \"L\" + LF + \";\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3193218 // LF_SIG (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3193346 // LFN_SIG (<unidirectional association>)
	relation 3193346 --->
	  a role_name "LFN_SIG" init_value " \"L\" + LFN + \";\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3193346 // LFN_SIG (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3193474 // LL_SIG (<unidirectional association>)
	relation 3193474 --->
	  a role_name "LL_SIG" init_value " \"(L\" + OBJ + \";)L\" + OBJ + \";\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3193474 // LL_SIG (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3193602 // LLV_SIG (<unidirectional association>)
	relation 3193602 --->
	  a role_name "LLV_SIG" init_value " \"(L\" + OBJ + \";L\" + OBJ + \";)V\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3193602 // LLV_SIG (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3193730 // CLL_SIG (<unidirectional association>)
	relation 3193730 --->
	  a role_name "CLL_SIG" init_value " \"(L\" + CLS + \";L\" + OBJ + \";)L\" + OBJ + \";\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3193730 // CLL_SIG (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3193858 // superName (<unidirectional association>)
	relation 3193858 --->
	  a role_name "superName" init_value " OBJ" class_relation const_relation private
	    comment " Name of its super class
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3193858 // superName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3193986 // className (<unidirectional association>)
	relation 3193986 --->
	  a role_name "className" const_relation private
	    comment " Name of new class 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3193986 // className (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3194114 // sourceFile (<unidirectional association>)
	relation 3194114 --->
	  a role_name "sourceFile" const_relation private
	    comment " Name of the source file (for stack trace printing). 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3194114 // sourceFile (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3194242 // lambdaForm (<unidirectional association>)
	relation 3194242 --->
	  a role_name "lambdaForm" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3194242 // lambdaForm (<unidirectional association>)
	  b parent class_ref 945410 // LambdaForm
      end

      classrelation 3194370 // invokerName (<unidirectional association>)
	relation 3194370 --->
	  a role_name "invokerName" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3194370 // invokerName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3194498 // invokerType (<unidirectional association>)
	relation 3194498 --->
	  a role_name "invokerType" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3194498 // invokerType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      attribute 1698562 "localsMap"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Info about local variables in compiled lambda form 
 index"
      end

      attribute 1698690 "localTypes"
	const_attribute private explicit_type "BasicType"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " basic type"
      end

      classrelation 3194626 // localClasses (<unidirectional association>)
	relation 3194626 --->
	  a role_name "localClasses" multiplicity "[]" const_relation private
	    comment " type"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3194626 // localClasses (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 1698818 "cw"
	private explicit_type "ClassWriter"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ASM bytecode generation. 
"
      end

      attribute 1698946 "mv"
	private explicit_type "MethodVisitor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3194754 // MEMBERNAME_FACTORY (<unidirectional association>)
	relation 3194754 --->
	  a role_name "MEMBERNAME_FACTORY" init_value " MemberName.getFactory()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3194754 // MEMBERNAME_FACTORY (<unidirectional association>)
	  b parent class_ref 947074 // Factory
      end

      classrelation 3194882 // HOST_CLASS (<unidirectional association>)
	relation 3194882 --->
	  a role_name "HOST_CLASS" init_value " LambdaForm.class" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3194882 // HOST_CLASS (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 7185154 "InvokerBytecodeGenerator"
	private explicit_return_type ""
	nparams 5
	  param inout name "lambdaForm" type class_ref 945410 // LambdaForm
	  param in name "localsMapSize" explicit_type "int"
	  param inout name "className" type class_ref 128130 // String
	  param inout name "invokerName" type class_ref 128130 // String
	  param inout name "invokerType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Main constructor; other constructors delegate to this one. "
      end

      operation 7185282 "InvokerBytecodeGenerator"
	private explicit_return_type ""
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "invokerName" type class_ref 128130 // String
	  param inout name "invokerType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " For generating LambdaForm interpreter entry points. "
      end

      operation 7185410 "InvokerBytecodeGenerator"
	private explicit_return_type ""
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "form" type class_ref 945410 // LambdaForm
	  param inout name "invokerType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " For generating customized code for a single LambdaForm. "
      end

      classrelation 3195010 // DUMP_CLASS_FILES_COUNTERS (<unidirectional association>)
	relation 3195010 --->
	  a role_name "DUMP_CLASS_FILES_COUNTERS" class_relation const_relation private
	    comment " instance counters for dumped classes 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Integer> ${name}${value};
"
	    classrelation_ref 3195010 // DUMP_CLASS_FILES_COUNTERS (<unidirectional association>)
	  b parent class_ref 132866 // HashMap
      end

      classrelation 3195138 // DUMP_CLASS_FILES_DIR (<unidirectional association>)
	relation 3195138 --->
	  a role_name "DUMP_CLASS_FILES_DIR" class_relation const_relation private
	    comment " debugging flag for saving generated class files 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3195138 // DUMP_CLASS_FILES_DIR (<unidirectional association>)
	  b parent class_ref 131970 // File
      end

      extra_member 159746 "initialization"
	
	cpp "" ""
	java "  static {
        if (DUMP_CLASS_FILES) {
            DUMP_CLASS_FILES_COUNTERS = new HashMap<>();
            try {
                File dumpDir = new File(\"DUMP_CLASS_FILES\");
                if (!dumpDir.exists()) {
                    dumpDir.mkdirs();
                }
                DUMP_CLASS_FILES_DIR = dumpDir;
                System.out.println(\"Dumping class files to \"+DUMP_CLASS_FILES_DIR+\"/...\");
            } catch (Exception e) {
                throw newInternalError(e);
            }
        } else {
            DUMP_CLASS_FILES_COUNTERS = null;
            DUMP_CLASS_FILES_DIR = null;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7185538 "maybeDump"
	class_operation package explicit_return_type "void"
	nparams 2
	  param in name "className" type class_ref 128130 // String
	  param in name "classFile" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7185666 "makeDumpableClassName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 949378 "CpPatch"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1699074 "index"
	  const_attribute package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3195266 // placeholder (<unidirectional association>)
	  relation 3195266 --->
	    a role_name "placeholder" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3195266 // placeholder (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3195394 // value (<unidirectional association>)
	  relation 3195394 --->
	    a role_name "value" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3195394 // value (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 7185794 "CpPatch"
	  package explicit_return_type ""
	  nparams 3
	    param in name "index" explicit_type "int"
	    param inout name "placeholder" type class_ref 128130 // String
	    param inout name "value" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7185922 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 3195522 // cpPatches (<unidirectional association>)
	relation 3195522 --->
	  a role_name "cpPatches" init_value " new HashMap<>()" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object, CpPatch> ${name}${value};
"
	    classrelation_ref 3195522 // cpPatches (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 1699202 "cph"
	package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " for counting constant placeholders"
      end

      operation 7186050 "constantPlaceholder"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "arg" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7186178 "cpPatches"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "classFile" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7186306 "debugString"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "arg" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7186434 "getConstantPoolSize"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "classFile" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extract the number of constant pool entries from a given class file.

@param classFile the bytes of the class file in question.
@return the number of entries in the constant pool.
"
      end

      operation 7186562 "loadMethod"
	private return_type class_ref 945538 // MemberName
	nparams 1
	  param inout name "classFile" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extract the MemberName of a newly-defined method.
"
      end

      operation 7186690 "loadAndInitializeInvokerClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "classBytes" explicit_type "byte"
	multiplicity "[]"
	  param inout name "patches" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Define a given class as anonymous class in the runtime system.
"
      end

      operation 7186818 "resolveInvokerMember"
	class_operation private return_type class_ref 945538 // MemberName
	nparams 3
	  param inout name "invokerClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7186946 "classFilePrologue"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set up class file generation.
"
      end

      operation 7187074 "classFileEpilogue"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tear down class file generation.
"
      end

      operation 7187202 "emitConst"
	private explicit_return_type "void"
	nparams 1
	  param inout name "con" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Low-level emit helpers.
"
      end

      operation 7187330 "emitIconstInsn"
	private explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7187458 "emitLoadInsn"
	private explicit_return_type "void"
	nparams 2
	  param inout name "type" explicit_type "BasicType"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "NOTE: These load/store methods use the localsMap to find the correct index!
"
      end

      operation 7187586 "loadInsnOpcode"
	private explicit_return_type "int"
	nparams 1
	  param inout name "type" explicit_type "BasicType"
	nexceptions 1
	  exception class_ref 934274 // InternalError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7187714 "emitAloadInsn"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7187842 "emitStoreInsn"
	private explicit_return_type "void"
	nparams 2
	  param inout name "type" explicit_type "BasicType"
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7187970 "storeInsnOpcode"
	private explicit_return_type "int"
	nparams 1
	  param inout name "type" explicit_type "BasicType"
	nexceptions 1
	  exception class_ref 934274 // InternalError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7188098 "emitAstoreInsn"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7188226 "arrayTypeCode"
	private explicit_return_type "byte"
	nparams 1
	  param inout name "elementType" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7188354 "arrayInsnOpcode"
	private explicit_return_type "int"
	nparams 2
	  param in name "tcode" explicit_type "byte"
	  param in name "aaop" explicit_type "int"
	nexceptions 1
	  exception class_ref 934274 // InternalError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7188482 "freeFrameLocal"
	private explicit_return_type "void"
	nparams 1
	  param in name "oldFrameLocal" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7188610 "indexForFrameLocal"
	private explicit_return_type "int"
	nparams 1
	  param in name "frameLocal" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7188738 "makeLocalTemp"
	private explicit_return_type "int"
	nparams 1
	  param inout name "type" explicit_type "BasicType"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7188866 "emitBoxing"
	private explicit_return_type "void"
	nparams 1
	  param inout name "wrapper" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit a boxing call.

@param wrapper primitive type class to box.
"
      end

      operation 7188994 "emitUnboxing"
	private explicit_return_type "void"
	nparams 1
	  param inout name "wrapper" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit an unboxing call (plus preceding checkcast).

@param wrapper wrapper type class to unbox.
"
      end

      operation 7189122 "emitImplicitConversion"
	private explicit_return_type "void"
	nparams 3
	  param inout name "ptype" explicit_type "BasicType"
	  param inout name "pclass" type class_ref 130818 // Class
	  param inout name "arg" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit an implicit conversion for an argument which must be of the given pclass.
This is usually a no-op, except when pclass is a subword type or a reference other than Object or an interface.

@param ptype type of value present on stack
@param pclass type of value required on stack
@param arg compile-time representation of value on stack (Node, constant) or null if none
"
      end

      operation 7189250 "assertStaticType"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cls" type class_ref 130818 // Class
	  param inout name "n" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Update localClasses type map.  Return true if the information is already present. "
      end

      operation 7189378 "emitReferenceCast"
	private explicit_return_type "void"
	nparams 2
	  param inout name "cls" type class_ref 130818 // Class
	  param inout name "arg" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7189506 "emitReturnInsn"
	private explicit_return_type "void"
	nparams 1
	  param inout name "type" explicit_type "BasicType"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emits an actual return instruction conforming to the given return type.
"
      end

      operation 7189634 "getInternalName"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7189762 "generateCustomizedCode"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 2
	  param inout name "form" type class_ref 945410 // LambdaForm
	  param inout name "invokerType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate customized bytecode for a given LambdaForm.
"
      end

      operation 7189890 "checkActualReceiver"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generates code to check that actual receiver and LambdaForm matches "
      end

      operation 7190018 "generateCustomizedCodeBytes"
	private explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate an invoker method for the passed {@link LambdaForm}.
"
      end

      operation 7190146 "emitArrayLoad"
	package explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7190274 "emitArrayStore"
	package explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7190402 "emitArrayOp"
	package explicit_return_type "void"
	nparams 2
	  param inout name "name" explicit_type "Name"
	  param in name "arrayOpcode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7190530 "emitInvoke"
	package explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit an invoke for the given name.
"
      end

      classrelation 3195650 // STATICALLY_INVOCABLE_PACKAGES (<unidirectional association>)
	relation 3195650 --->
	  a role_name "STATICALLY_INVOCABLE_PACKAGES" multiplicity "[]" init_value " {
        // Sample classes from each package we are willing to bind to statically:
        java.lang.Object.class,
        java.util.Arrays.class,
        sun.misc.Unsafe.class
        //MethodHandle.class already covered
    }" class_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3195650 // STATICALLY_INVOCABLE_PACKAGES (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 7190658 "isStaticallyInvocable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7190786 "isStaticallyInvocable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "member" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7190914 "isStaticallyNameable"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "cls" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7191042 "emitStaticInvoke"
	package explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7191170 "emitStaticInvoke"
	package explicit_return_type "void"
	nparams 2
	  param inout name "member" type class_ref 945538 // MemberName
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit an invoke for the given name, using the MemberName directly.
"
      end

      operation 7191298 "emitNewArray"
	package explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "Name"
	nexceptions 1
	  exception class_ref 934274 // InternalError
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7191426 "refKindOpcode"
	package explicit_return_type "int"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7191554 "memberRefersTo"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "member" type class_ref 945538 // MemberName
	  param inout name "declaringClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if MemberName is a call to a method named {@code name} in class {@code declaredClass}.
"
      end

      operation 7191682 "nameRefersTo"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "name" explicit_type "Name"
	  param inout name "declaringClass" type class_ref 130818 // Class
	  param inout name "methodName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7191810 "isInvokeBasic"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if MemberName is a call to MethodHandle.invokeBasic.
"
      end

      operation 7191938 "isLinkerMethodInvoke"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if MemberName is a call to MethodHandle.linkToStatic, etc.
"
      end

      operation 7192066 "isSelectAlternative"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if i-th name is a call to MethodHandleImpl.selectAlternative.
"
      end

      operation 7192194 "isGuardWithCatch"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if i-th name is a start of GuardWithCatch idiom.
"
      end

      operation 7192322 "emitSelectAlternative"
	private explicit_return_type "Name"
	nparams 2
	  param inout name "selectAlternativeName" explicit_type "Name"
	  param inout name "invokeBasicName" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit bytecode for the selectAlternative idiom.

The pattern looks like (Cf. MethodHandleImpl.makeGuardWithTest):
<blockquote><pre>{@code
  Lambda(a0:L,a1:I)=>{
    t2:I=foo.test(a1:I);
    t3:L=MethodHandleImpl.selectAlternative(t2:I,(MethodHandle(int)int),(MethodHandle(int)int));
    t4:I=MethodHandle.invokeBasic(t3:L,a1:I);t4:I}
}</pre></blockquote>
"
      end

      operation 7192450 "emitGuardWithCatch"
	private explicit_return_type "Name"
	nparams 1
	  param in name "pos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit bytecode for the guardWithCatch idiom.

The pattern looks like (Cf. MethodHandleImpl.makeGuardWithCatch):
<blockquote><pre>{@code
 guardWithCatch=Lambda(a0:L,a1:L,a2:L,a3:L,a4:L,a5:L,a6:L,a7:L)=>{
   t8:L=MethodHandle.invokeBasic(a4:L,a6:L,a7:L);
   t9:L=MethodHandleImpl.guardWithCatch(a1:L,a2:L,a3:L,t8:L);
  t10:I=MethodHandle.invokeBasic(a5:L,t9:L);t10:I}
}</pre></blockquote>

It is compiled into bytecode equivalent of the following code:
<blockquote><pre>{@code
 try {
     return a1.invokeBasic(a6, a7);
 } catch (Throwable e) {
     if (!a2.isInstance(e)) throw e;
     return a3.invokeBasic(ex, a6, a7);
 }}
"
      end

      operation 7192578 "emitPushArguments"
	private explicit_return_type "void"
	nparams 1
	  param inout name "args" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7192706 "emitPushArguments"
	private explicit_return_type "void"
	nparams 2
	  param inout name "args" explicit_type "Name"
	  param in name "start" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7192834 "emitPushArgument"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" explicit_type "Name"
	  param in name "paramIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7192962 "emitPushArgument"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ptype" type class_ref 130818 // Class
	  param inout name "arg" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7193090 "emitStoreResult"
	private explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Store the name to its local, if necessary.
"
      end

      operation 7193218 "emitReturn"
	private explicit_return_type "void"
	nparams 1
	  param inout name "onStack" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emits a return statement from a LF invoker. If required, the result type is cast to the correct return type.
"
      end

      operation 7193346 "emitPrimCast"
	private explicit_return_type "void"
	nparams 2
	  param inout name "from" explicit_type "Wrapper"
	  param inout name "to" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit a type conversion bytecode casting from \"from\" to \"to\".
"
      end

      operation 7193474 "emitI2X"
	private explicit_return_type "void"
	nparams 1
	  param inout name "type" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7193602 "emitX2I"
	private explicit_return_type "void"
	nparams 1
	  param inout name "type" explicit_type "Wrapper"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7193730 "generateLambdaFormInterpreterEntryPoint"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 1
	  param inout name "sig" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate bytecode for a LambdaForm.vmentry which calls interpretWithArguments.
"
      end

      operation 7193858 "generateLambdaFormInterpreterEntryPointBytes"
	private explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7193986 "generateNamedFunctionInvoker"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 1
	  param inout name "typeForm" type class_ref 949506 // MethodTypeForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate bytecode for a NamedFunction invoker.
"
      end

      operation 7194114 "generateNamedFunctionInvokerImpl"
	private explicit_return_type "byte"
	nparams 1
	  param inout name "typeForm" type class_ref 949506 // MethodTypeForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7194242 "bogusMethod"
	private explicit_return_type "void"
	nparams 1
	  param inout name "" explicit_type "Object...os"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Emit a bogus method that just loads some string constants. This is to get the constants into the constant pool
for debugging purposes.
"
      end
    end

    class 949506 "MethodTypeForm"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Shared information for a group of method types, which differ
only by reference types, and therefore share a common erasure
and wrapping.
<p>
For an empirical discussion of the structure of method types,
see <a href=\"http://groups.google.com/group/jvm-languages/browse_thread/thread/ac9308ae74da9b7e/\">
the thread \"Avoiding Boxing\" on jvm-languages</a>.
There are approximately 2000 distinct erased method types in the JDK.
There are a little over 10 times that number of unerased types.
No more than half of these are likely to be loaded at once.
@author John Rose
"
      attribute 1725442 "argToSlotTable"
	const_attribute package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1725570 "slotToArgTable"
	const_attribute package explicit_type "int"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1725698 "argCounts"
	const_attribute package explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " packed slot & value counts"
      end

      attribute 1725826 "primCounts"
	const_attribute package explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " packed prim & double counts"
      end

      classrelation 3208322 // erasedType (<unidirectional association>)
	relation 3208322 --->
	  a role_name "erasedType" const_relation package
	    comment " the canonical erasure"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3208322 // erasedType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      classrelation 3208450 // basicType (<unidirectional association>)
	relation 3208450 --->
	  a role_name "basicType" const_relation package
	    comment " the canonical erasure, with primitives simplified"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3208450 // basicType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      classrelation 3208578 // methodHandles (<unidirectional association>)
	relation 3208578 --->
	  a role_name "methodHandles" multiplicity "[]" const_relation package
	    comment " Cached adapter information:
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MethodHandle>${multiplicity} ${name}${value};
"
	    java_annotation "@Stable
"
	    classrelation_ref 3208578 // methodHandles (<unidirectional association>)
	  b parent class_ref 321026 // SoftReference
      end

      attribute 1725954 "MH_BASIC_INV"
	class_attribute const_attribute package explicit_type "int"
	init_value "  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into methodHandles:
 cached instance of MH.invokeBasic"
      end

      attribute 1726082 "MH_NF_INV"
	class_attribute const_attribute package explicit_type "int"
	init_value "  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into methodHandles:
 cached helper for LF.NamedFunction"
      end

      attribute 1726210 "MH_UNINIT_CS"
	class_attribute const_attribute package explicit_type "int"
	init_value "  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into methodHandles:
 uninitialized call site"
      end

      attribute 1726338 "MH_LIMIT"
	class_attribute const_attribute package explicit_type "int"
	init_value "  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into methodHandles:
"
      end

      classrelation 3208706 // lambdaForms (<unidirectional association>)
	relation 3208706 --->
	  a role_name "lambdaForms" multiplicity "[]" const_relation package
	    comment " Cached lambda form information, for basic types only:
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<LambdaForm>${multiplicity} ${name}${value};
"
	    java_annotation "@Stable
"
	    classrelation_ref 3208706 // lambdaForms (<unidirectional association>)
	  b parent class_ref 321026 // SoftReference
      end

      attribute 1726466 "LF_INVVIRTUAL"
	class_attribute const_attribute package explicit_type "int"
	init_value "  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 DMH invokeVirtual"
      end

      attribute 1726594 "LF_INVSTATIC"
	class_attribute const_attribute package explicit_type "int"
	init_value "  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
"
      end

      attribute 1726722 "LF_INVSPECIAL"
	class_attribute const_attribute package explicit_type "int"
	init_value "  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
"
      end

      attribute 1726850 "LF_NEWINVSPECIAL"
	class_attribute const_attribute package explicit_type "int"
	init_value "  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
"
      end

      attribute 1726978 "LF_INVINTERFACE"
	class_attribute const_attribute package explicit_type "int"
	init_value "  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
"
      end

      attribute 1727106 "LF_INVSTATIC_INIT"
	class_attribute const_attribute package explicit_type "int"
	init_value "  5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 DMH invokeStatic with <clinit> barrier"
      end

      attribute 1727234 "LF_INTERPRET"
	class_attribute const_attribute package explicit_type "int"
	init_value "  6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 LF interpreter"
      end

      attribute 1727362 "LF_REBIND"
	class_attribute const_attribute package explicit_type "int"
	init_value "  7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 BoundMethodHandle"
      end

      attribute 1727490 "LF_DELEGATE"
	class_attribute const_attribute package explicit_type "int"
	init_value "  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 DelegatingMethodHandle"
      end

      attribute 1727618 "LF_DELEGATE_BLOCK_INLINING"
	class_attribute const_attribute package explicit_type "int"
	init_value "  9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 Counting DelegatingMethodHandle w/ @DontInline"
      end

      attribute 1727746 "LF_EX_LINKER"
	class_attribute const_attribute package explicit_type "int"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 invokeExact_MT (for invokehandle)"
      end

      attribute 1727874 "LF_EX_INVOKER"
	class_attribute const_attribute package explicit_type "int"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 MHs.invokeExact"
      end

      attribute 1728002 "LF_GEN_LINKER"
	class_attribute const_attribute package explicit_type "int"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 generic invoke_MT (for invokehandle)"
      end

      attribute 1728130 "LF_GEN_INVOKER"
	class_attribute const_attribute package explicit_type "int"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 generic MHs.invoke"
      end

      attribute 1728258 "LF_CS_LINKER"
	class_attribute const_attribute package explicit_type "int"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 linkToCallSite_CS"
      end

      attribute 1728386 "LF_MH_LINKER"
	class_attribute const_attribute package explicit_type "int"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 linkToCallSite_MH"
      end

      attribute 1728514 "LF_GWC"
	class_attribute const_attribute package explicit_type "int"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 guardWithCatch (catchException)"
      end

      attribute 1728642 "LF_GWT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
 guardWithTest"
      end

      attribute 1728770 "LF_LIMIT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 18"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into lambdaForms:
"
      end

      operation 7290882 "erasedType"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the type corresponding uniquely (1-1) to this MT-form.
 It might have any primitive returns or arguments, but will have no references except Object.
"
      end

      operation 7291010 "basicType"
	public return_type class_ref 944258 // MethodType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the basic type derived from the erased type of this MT-form.
 A basic type is erased (all references Object) and also has all primitive
 types (except int, long, float, double, void) normalized to int.
 Such basic types correspond to low-level JVM calling sequences.
"
      end

      operation 7291138 "assertIsBasicType"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7291266 "cachedMethodHandle"
	public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7291394 "setCachedMethodHandle"
	public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param in name "which" explicit_type "int"
	  param inout name "mh" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7291522 "cachedLambdaForm"
	public return_type class_ref 945410 // LambdaForm
	nparams 1
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7291650 "setCachedLambdaForm"
	public return_type class_ref 945410 // LambdaForm
	nparams 2
	  param in name "which" explicit_type "int"
	  param inout name "form" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7291778 "MethodTypeForm"
	protected explicit_return_type ""
	nparams 1
	  param inout name "erasedType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings({\"rawtypes\", \"unchecked\"})
"
	
	
	
	comment "Build an MTF for a given type, which must have all references erased to Object.
This MTF will stand for that type and all un-erased variations.
Eagerly compute some basic properties of the type, common to all variations.
"
      end

      operation 7291906 "pack"
	class_operation private explicit_return_type "long"
	nparams 4
	  param in name "a" explicit_type "int"
	  param in name "b" explicit_type "int"
	  param in name "c" explicit_type "int"
	  param in name "d" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7292034 "unpack"
	class_operation private explicit_return_type "char"
	nparams 2
	  param in name "packed" explicit_type "long"
	  param in name "word" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7292162 "parameterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7292290 "parameterSlotCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7292418 "returnCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7292546 "returnSlotCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7292674 "primitiveParameterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7292802 "longPrimitiveParameterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7292930 "primitiveReturnCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7293058 "longPrimitiveReturnCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7293186 "hasPrimitives"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7293314 "hasNonVoidPrimitives"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7293442 "hasLongPrimitives"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7293570 "parameterToArgSlot"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7293698 "argSlotToParameter"
	public explicit_return_type "int"
	nparams 1
	  param in name "argSlot" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7293826 "findForm"
	class_operation package return_type class_ref 949506 // MethodTypeForm
	nparams 1
	  param inout name "mt" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1728898 "NO_CHANGE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Codes for {@link #canonicalize(java.lang.Class, int)}.
ERASE means change every reference to {@code Object}.
WRAP means convert primitives (including {@code void} to their
corresponding wrapper types.  UNWRAP means the reverse of WRAP.
INTS means convert all non-void primitive types to int or long,
according to size.  LONGS means convert all non-void primitives
to long, regardless of size.  RAW_RETURN means convert a type
(assumed to be a return type) to int if it is smaller than an int,
or if it is void.

"
      end

      attribute 1729026 "ERASE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Codes for {@link #canonicalize(java.lang.Class, int)}.
ERASE means change every reference to {@code Object}.
WRAP means convert primitives (including {@code void} to their
corresponding wrapper types.  UNWRAP means the reverse of WRAP.
INTS means convert all non-void primitive types to int or long,
according to size.  LONGS means convert all non-void primitives
to long, regardless of size.  RAW_RETURN means convert a type
(assumed to be a return type) to int if it is smaller than an int,
or if it is void.

"
      end

      attribute 1729154 "WRAP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Codes for {@link #canonicalize(java.lang.Class, int)}.
ERASE means change every reference to {@code Object}.
WRAP means convert primitives (including {@code void} to their
corresponding wrapper types.  UNWRAP means the reverse of WRAP.
INTS means convert all non-void primitive types to int or long,
according to size.  LONGS means convert all non-void primitives
to long, regardless of size.  RAW_RETURN means convert a type
(assumed to be a return type) to int if it is smaller than an int,
or if it is void.

"
      end

      attribute 1729282 "UNWRAP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Codes for {@link #canonicalize(java.lang.Class, int)}.
ERASE means change every reference to {@code Object}.
WRAP means convert primitives (including {@code void} to their
corresponding wrapper types.  UNWRAP means the reverse of WRAP.
INTS means convert all non-void primitive types to int or long,
according to size.  LONGS means convert all non-void primitives
to long, regardless of size.  RAW_RETURN means convert a type
(assumed to be a return type) to int if it is smaller than an int,
or if it is void.

"
      end

      attribute 1729410 "INTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Codes for {@link #canonicalize(java.lang.Class, int)}.
ERASE means change every reference to {@code Object}.
WRAP means convert primitives (including {@code void} to their
corresponding wrapper types.  UNWRAP means the reverse of WRAP.
INTS means convert all non-void primitive types to int or long,
according to size.  LONGS means convert all non-void primitives
to long, regardless of size.  RAW_RETURN means convert a type
(assumed to be a return type) to int if it is smaller than an int,
or if it is void.

"
      end

      attribute 1729538 "LONGS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Codes for {@link #canonicalize(java.lang.Class, int)}.
ERASE means change every reference to {@code Object}.
WRAP means convert primitives (including {@code void} to their
corresponding wrapper types.  UNWRAP means the reverse of WRAP.
INTS means convert all non-void primitive types to int or long,
according to size.  LONGS means convert all non-void primitives
to long, regardless of size.  RAW_RETURN means convert a type
(assumed to be a return type) to int if it is smaller than an int,
or if it is void.

"
      end

      attribute 1729666 "RAW_RETURN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Codes for {@link #canonicalize(java.lang.Class, int)}.
ERASE means change every reference to {@code Object}.
WRAP means convert primitives (including {@code void} to their
corresponding wrapper types.  UNWRAP means the reverse of WRAP.
INTS means convert all non-void primitive types to int or long,
according to size.  LONGS means convert all non-void primitives
to long, regardless of size.  RAW_RETURN means convert a type
(assumed to be a return type) to int if it is smaller than an int,
or if it is void.

"
      end

      operation 7293954 "canonicalize"
	class_operation public return_type class_ref 944258 // MethodType
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param in name "howRet" explicit_type "int"
	  param in name "howArgs" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Canonicalize the types in the given method type.
If any types change, intern the new type, and return it.
Otherwise return null.
"
      end

      operation 7294082 "canonicalize"
	class_operation package return_type class_ref 130818 // Class
	nparams 2
	  param inout name "t" type class_ref 130818 // Class
	  param in name "how" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Canonicalize the given return or param type.
 Return null if the type is already canonicalized.
"
      end

      operation 7294210 "canonicalizeAll"
	class_operation package return_type class_ref 130818 // Class
	nparams 2
	  param inout name "ts" type class_ref 130818 // Class
	multiplicity "[]"
	  param in name "how" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${t0}<?>[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Canonicalize each param type in the given array.
 Return null if all types are already canonicalized.
"
      end

      operation 7294338 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 949634 "Invokers"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Construction and caching of often-used invokers.
@author jrose
"
      classrelation 3195778 // targetType (<unidirectional association>)
	relation 3195778 --->
	  a role_name "targetType" const_relation private
	    comment " exact type (sans leading taget MH) for the outgoing call
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3195778 // targetType (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      classrelation 3195906 // invokers (<unidirectional association>)
	relation 3195906 --->
	  a role_name "invokers" multiplicity "[]" init_value " new MethodHandle[INV_LIMIT]" const_relation private
	    comment " Cached adapter information:
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    java_annotation "@Stable
"
	    classrelation_ref 3195906 // invokers (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      attribute 1699330 "INV_EXACT"
	class_attribute const_attribute package explicit_type "int"
	init_value "  0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into invokers:
 MethodHandles.exactInvoker"
      end

      attribute 1699458 "INV_GENERIC"
	class_attribute const_attribute package explicit_type "int"
	init_value "  1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into invokers:
 MethodHandles.invoker (generic invocation)"
      end

      attribute 1699586 "INV_BASIC"
	class_attribute const_attribute package explicit_type "int"
	init_value "  2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into invokers:
 MethodHandles.basicInvoker"
      end

      attribute 1699714 "INV_LIMIT"
	class_attribute const_attribute package explicit_type "int"
	init_value "  3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indexes into invokers:
"
      end

      operation 7194370 "Invokers"
	package explicit_return_type ""
	nparams 1
	  param inout name "targetType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Compute and cache information common to all collecting adapters
 that implement members of the erasure-family of the given erased type.

non-public"
      end

      operation 7194498 "exactInvoker"
	package return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7194626 "genericInvoker"
	package return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7194754 "basicInvoker"
	package return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7194882 "cachedInvoker"
	private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param in name "idx" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7195010 "setCachedInvoker"
	private return_type class_ref 944386 // MethodHandle
	nparams 2
	  param in name "idx" explicit_type "int"
	  param in name "invoker" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7195138 "makeExactOrGeneralInvoker"
	private return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "isExact" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7195266 "maybeCompileToBytecode"
	private explicit_return_type "void"
	nparams 1
	  param inout name "invoker" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If the target type seems to be common enough, eagerly compile the invoker to bytecodes. "
      end

      operation 7195394 "invokeBasicMethod"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 1
	  param inout name "basicType" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This next one is called from LambdaForm.NamedFunction.<init>.
non-public"
      end

      operation 7195522 "checkInvoker"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "invoker" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7195650 "spreadInvoker"
	package return_type class_ref 944386 // MethodHandle
	nparams 1
	  param in name "leadingArgCount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find or create an invoker which passes unchanged a given number of arguments
and spreads the rest from a trailing array argument.
The invoker target type is the post-spread type {@code (TYPEOF(uarg*), TYPEOF(sarg*))=>RT}.
All the {@code sarg}s must have a common type {@code C}.  (If there are none, {@code Object} is assumed.}
@param leadingArgCount the number of unchanged (non-spread) arguments
@return {@code invoker.invokeExact(mh, uarg*, C[]{sarg*}) := (RT)mh.invoke(uarg*, sarg*)}

non-public"
      end

      operation 7195778 "impliedRestargType"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "restargType" type class_ref 944258 // MethodType
	  param in name "fromPos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7195906 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7196034 "methodHandleInvokeLinkerMethod"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "mtype" type class_ref 944258 // MethodType
	  param inout name "appendixResult" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1699842 "MH_LINKER_ARG_APPENDED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " argument count to account for trailing \"appendix value\" (typically the mtype)
"
      end

      operation 7196162 "invokeHandleForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 3
	  param inout name "mtype" type class_ref 944258 // MethodType
	  param inout name "customized" explicit_type "boolean"
	  param in name "which" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns an adapter for invokeExact or generic invoke, as a MH or constant pool linker.
If !customized, caller is responsible for supplying, during adapter execution,
a copy of the exact mtype.  This is because the adapter might be generalized to
a basic type.
@param mtype the caller's method type (either basic or full-custom)
@param customized whether to use a trailing appendix argument (to carry the mtype)
@param which bit-encoded 0x01 whether it is a CP adapter (\"linker\") or MHs.invoker value (\"invoker\");
                         0x02 whether it is for invokeExact or generic invoke
"
      end

      operation 7196290 "newWrongMethodTypeException"
	class_operation package return_type class_ref 946562 // WrongMethodTypeException
	nparams 2
	  param inout name "actual" type class_ref 944258 // MethodType
	  param inout name "expected" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7196418 "checkExactType"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "mhObj" type class_ref 129538 // Object
	  param inout name "expectedObj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment " Static definition of MethodHandle.invokeExact checking code. 
non-public"
      end

      operation 7196546 "checkGenericType"
	class_operation package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "mhObj" type class_ref 129538 // Object
	  param inout name "expectedObj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment " Static definition of MethodHandle.invokeGeneric checking code.
Directly returns the type-adjusted MH to invoke, as follows:
{@code (R)MH.invoke(a*) => MH.asType(TYPEOF(a*:R)).invokeBasic(a*)}

non-public"
      end

      operation 7196674 "linkToCallSiteMethod"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 1
	  param inout name "mtype" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7196802 "linkToTargetMethod"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 1
	  param inout name "mtype" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7196930 "callSiteForm"
	class_operation private return_type class_ref 945410 // LambdaForm
	nparams 2
	  param inout name "mtype" type class_ref 944258 // MethodType
	  param inout name "skipCallSite" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " skipCallSite is true if we are optimizing a ConstantCallSite"
      end

      operation 7197058 "getCallSiteTarget"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "site" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment " Static definition of MethodHandle.invokeGeneric checking code. 
non-public"
      end

      operation 7197186 "checkCustomized"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ForceInline
"
	
	
	
	comment "non-public"
      end

      operation 7197314 "maybeCustomize"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "mh" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@DontInline
"
	
	
	
	comment "non-public"
      end

      attribute 1699970 "NF_checkExactType"
	class_attribute const_attribute private explicit_type "NamedFunction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Local constant functions:
"
      end

      attribute 1700098 "NF_checkGenericType"
	class_attribute const_attribute private explicit_type "NamedFunction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Local constant functions:
"
      end

      attribute 1700226 "NF_getCallSiteTarget"
	class_attribute const_attribute private explicit_type "NamedFunction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Local constant functions:
"
      end

      attribute 1700354 "NF_checkCustomized"
	class_attribute const_attribute private explicit_type "NamedFunction"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Local constant functions:
"
      end

      extra_member 159874 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            NamedFunction nfs[] = {
                NF_checkExactType = new NamedFunction(Invokers.class
                        .getDeclaredMethod(\"checkExactType\", Object.class, Object.class)),
                NF_checkGenericType = new NamedFunction(Invokers.class
                        .getDeclaredMethod(\"checkGenericType\", Object.class, Object.class)),
                NF_getCallSiteTarget = new NamedFunction(Invokers.class
                        .getDeclaredMethod(\"getCallSiteTarget\", Object.class)),
                NF_checkCustomized = new NamedFunction(Invokers.class
                        .getDeclaredMethod(\"checkCustomized\", Object.class))
            };
            for (NamedFunction nf : nfs) {
                // Each nf must be statically invocable or we get tied up in our bootstraps.
                assert(InvokerBytecodeGenerator.isStaticallyInvocable(nf.member)) : nf;
                nf.resolve();
            }
        } catch (ReflectiveOperationException ex) {
            throw newInternalError(ex);
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 949762 "Lazy"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3196034 // MH_asSpreader (<unidirectional association>)
	  relation 3196034 --->
	    a role_name "MH_asSpreader" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3196034 // MH_asSpreader (<unidirectional association>)
	    b parent class_ref 944386 // MethodHandle
	end

	extra_member 160002 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                MH_asSpreader = IMPL_LOOKUP.findVirtual(MethodHandle.class, \"asSpreader\",
                        MethodType.methodType(MethodHandle.class, Class.class, int.class));
            } catch (ReflectiveOperationException ex) {
                throw newInternalError(ex);
            }
        }"
	  php ""
	  python ""
	  idl ""
	  mysql ""
	end
      end
    end

    class 950402 "LambdaFormBuffer"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Working storage for an LF that is being transformed.
 Similarly to a StringBuffer, the editing can take place in multiple steps.
"
      attribute 1703426 "arity"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1703554 "length"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1703682 "names"
	private explicit_type "Name"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1703810 "originalNames"
	private explicit_type "Name"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " snapshot of pre-transaction names"
      end

      attribute 1703938 "flags"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1704066 "firstChange"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1704194 "resultName"
	private explicit_type "Name"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3199234 // debugName (<unidirectional association>)
	relation 3199234 --->
	  a role_name "debugName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3199234 // debugName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3199362 // dups (<unidirectional association>)
	relation 3199362 --->
	  a role_name "dups" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Name> ${name}${value};
"
	    classrelation_ref 3199362 // dups (<unidirectional association>)
	  b parent class_ref 186498 // ArrayList
      end

      attribute 1704322 "F_TRANS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1704450 "F_OWNED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x03"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7220866 "LambdaFormBuffer"
	package explicit_return_type ""
	nparams 1
	  param inout name "lf" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7220994 "lambdaForm"
	private return_type class_ref 945410 // LambdaForm
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7221122 "name"
	package explicit_return_type "Name"
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7221250 "nameArray"
	package explicit_return_type "Name"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7221378 "resultIndex"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7221506 "setNames"
	package explicit_return_type "void"
	nparams 1
	  param inout name "names2" explicit_type "Name"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7221634 "verifyArity"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7221762 "verifyFirstChange"
	private explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7221890 "indexOf"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "fn" explicit_type "NamedFunction"
	  param inout name "fns" explicit_type "NamedFunction"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7222018 "indexOf"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "n" explicit_type "Name"
	  param inout name "ns" explicit_type "Name"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7222146 "inTrans"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7222274 "ownedCount"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7222402 "growNames"
	package explicit_return_type "void"
	nparams 2
	  param in name "insertPos" explicit_type "int"
	  param in name "growLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7222530 "lastIndexOf"
	package explicit_return_type "int"
	nparams 1
	  param inout name "n" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7222658 "noteDuplicate"
	private explicit_return_type "void"
	nparams 2
	  param in name "pos1" explicit_type "int"
	  param in name "pos2" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " We have just overwritten the name at pos1 with the name at pos2.
 This means that there are two copies of the name, which we will have to fix later.
"
      end

      operation 7222786 "clearDuplicatesAndNulls"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace duplicate names by nulls, and remove all nulls. "
      end

      operation 7222914 "startEdit"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a private, writable copy of names.
 Preserve the original copy, for reference.
"
      end

      operation 7223042 "changeName"
	private explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7223170 "setResult"
	package explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Change the result name.  Null means a void result. "
      end

      operation 7223298 "endEdit"
	package return_type class_ref 945410 // LambdaForm
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Finish a transaction. "
      end

      operation 7223426 "copyNamesInto"
	private explicit_return_type "Name"
	nparams 1
	  param inout name "buffer" explicit_type "Name"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7223554 "replaceFunctions"
	package return_type class_ref 950402 // LambdaFormBuffer
	nparams 3
	  param inout name "oldFns" explicit_type "NamedFunction"
	multiplicity "[]"
	  param inout name "newFns" explicit_type "NamedFunction"
	multiplicity "[]"
	  param inout name "" explicit_type "Object...forArguments"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace any Name whose function is in oldFns with a copy
 whose function is in the corresponding position in newFns.
 Only do this if the arguments are exactly equal to the given.
"
      end

      operation 7223682 "replaceName"
	private explicit_return_type "void"
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "binding" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7223810 "renameParameter"
	package return_type class_ref 950402 // LambdaFormBuffer
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "newParam" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace a parameter by a fresh parameter. "
      end

      operation 7223938 "replaceParameterByNewExpression"
	package return_type class_ref 950402 // LambdaFormBuffer
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "binding" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace a parameter by a fresh expression. "
      end

      operation 7224066 "replaceParameterByCopy"
	package return_type class_ref 950402 // LambdaFormBuffer
	nparams 2
	  param in name "pos" explicit_type "int"
	  param in name "valuePos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Replace a parameter by another parameter or expression already in the form. "
      end

      operation 7224194 "insertName"
	private explicit_return_type "void"
	nparams 3
	  param in name "pos" explicit_type "int"
	  param inout name "expr" explicit_type "Name"
	  param inout name "isParameter" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7224322 "insertExpression"
	package return_type class_ref 950402 // LambdaFormBuffer
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "expr" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Insert a fresh expression. "
      end

      operation 7224450 "insertParameter"
	package return_type class_ref 950402 // LambdaFormBuffer
	nparams 2
	  param in name "pos" explicit_type "int"
	  param inout name "param" explicit_type "Name"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Insert a fresh parameter. "
      end
    end

    class 950786 "LambdaMetafactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Methods to facilitate the creation of simple \"function objects\" that
implement one or more interfaces by delegation to a provided {@link MethodHandle},
possibly after type adaptation and partial evaluation of arguments.  These
methods are typically used as <em>bootstrap methods</em> for {@code invokedynamic}
call sites, to support the <em>lambda expression</em> and <em>method
reference expression</em> features of the Java Programming Language.

<p>Indirect access to the behavior specified by the provided {@code MethodHandle}
proceeds in order through three phases:
<ul>
    <li><em>Linkage</em> occurs when the methods in this class are invoked.
    They take as arguments an interface to be implemented (typically a
    <em>functional interface</em>, one with a single abstract method), a
    name and signature of a method from that interface to be implemented, a
    method handle describing the desired implementation behavior
    for that method, and possibly other additional metadata, and produce a
    {@link CallSite} whose target can be used to create suitable function
    objects.  Linkage may involve dynamically loading a new class that
    implements the target interface. The {@code CallSite} can be considered a
    \"factory\" for function objects and so these linkage methods are referred
    to as \"metafactories\".</li>

    <li><em>Capture</em> occurs when the {@code CallSite}'s target is
    invoked, typically through an {@code invokedynamic} call site,
    producing a function object.  This may occur many times for
    a single factory {@code CallSite}.  Capture may involve allocation of a
    new function object, or may return an existing function object.  The
    behavior {@code MethodHandle} may have additional parameters beyond those
    of the specified interface method; these are referred to as <em>captured
    parameters</em>, which must be provided as arguments to the
    {@code CallSite} target, and which may be early-bound to the behavior
    {@code MethodHandle}.  The number of captured parameters and their types
    are determined during linkage.</li>

    <li><em>Invocation</em> occurs when an implemented interface method
    is invoked on a function object.  This may occur many times for a single
    function object.  The method referenced by the behavior {@code MethodHandle}
    is invoked with the captured arguments and any additional arguments
    provided on invocation, as if by {@link MethodHandle#invoke(Object...)}.</li>
</ul>

<p>It is sometimes useful to restrict the set of inputs or results permitted
at invocation.  For example, when the generic interface {@code Predicate<T>}
is parameterized as {@code Predicate<String>}, the input must be a
{@code String}, even though the method to implement allows any {@code Object}.
At linkage time, an additional {@link MethodType} parameter describes the
\"instantiated\" method type; on invocation, the arguments and eventual result
are checked against this {@code MethodType}.

<p>This class provides two forms of linkage methods: a standard version
({@link #metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType)})
using an optimized protocol, and an alternate version
{@link #altMetafactory(MethodHandles.Lookup, String, MethodType, Object...)}).
The alternate version is a generalization of the standard version, providing
additional control over the behavior of the generated function objects via
flags and additional arguments.  The alternate version adds the ability to
manage the following attributes of function objects:

<ul>
    <li><em>Bridging.</em>  It is sometimes useful to implement multiple
    variations of the method signature, involving argument or return type
    adaptation.  This occurs when multiple distinct VM signatures for a method
    are logically considered to be the same method by the language.  The
    flag {@code FLAG_BRIDGES} indicates that a list of additional
    {@code MethodType}s will be provided, each of which will be implemented
    by the resulting function object.  These methods will share the same
    name and instantiated type.</li>

    <li><em>Multiple interfaces.</em>  If needed, more than one interface
    can be implemented by the function object.  (These additional interfaces
    are typically marker interfaces with no methods.)  The flag {@code FLAG_MARKERS}
    indicates that a list of additional interfaces will be provided, each of
    which should be implemented by the resulting function object.</li>

    <li><em>Serializability.</em>  The generated function objects do not
    generally support serialization.  If desired, {@code FLAG_SERIALIZABLE}
    can be used to indicate that the function objects should be serializable.
    Serializable function objects will use, as their serialized form,
    instances of the class {@code SerializedLambda}, which requires additional
    assistance from the capturing class (the class described by the
    {@link MethodHandles.Lookup} parameter {@code caller}); see
    {@link SerializedLambda} for details.</li>
</ul>

<p>Assume the linkage arguments are as follows:
<ul>
     <li>{@code invokedType} (describing the {@code CallSite} signature) has
     K parameters of types (D1..Dk) and return type Rd;</li>
     <li>{@code samMethodType} (describing the implemented method type) has N
     parameters, of types (U1..Un) and return type Ru;</li>
     <li>{@code implMethod} (the {@code MethodHandle} providing the
     implementation has M parameters, of types (A1..Am) and return type Ra
     (if the method describes an instance method, the method type of this
     method handle already includes an extra first argument corresponding to
     the receiver);</li>
     <li>{@code instantiatedMethodType} (allowing restrictions on invocation)
     has N parameters, of types (T1..Tn) and return type Rt.</li>
</ul>

<p>Then the following linkage invariants must hold:
<ul>
    <li>Rd is an interface</li>
    <li>{@code implMethod} is a <em>direct method handle</em></li>
    <li>{@code samMethodType} and {@code instantiatedMethodType} have the same
    arity N, and for i=1..N, Ti and Ui are the same type, or Ti and Ui are
    both reference types and Ti is a subtype of Ui</li>
    <li>Either Rt and Ru are the same type, or both are reference types and
    Rt is a subtype of Ru</li>
    <li>K + N = M</li>
    <li>For i=1..K, Di = Ai</li>
    <li>For i=1..N, Ti is adaptable to Aj, where j=i+k</li>
    <li>The return type Rt is void, or the return type Ra is not void and is
    adaptable to Rt</li>
</ul>

<p>Further, at capture time, if {@code implMethod} corresponds to an instance
method, and there are any capture arguments ({@code K > 0}), then the first
capture argument (corresponding to the receiver) must be non-null.

<p>A type Q is considered adaptable to S as follows:
<table summary=\"adaptable types\">
    <tr><th>Q</th><th>S</th><th>Link-time checks</th><th>Invocation-time checks</th></tr>
    <tr>
        <td>Primitive</td><td>Primitive</td>
        <td>Q can be converted to S via a primitive widening conversion</td>
        <td>None</td>
    </tr>
    <tr>
        <td>Primitive</td><td>Reference</td>
        <td>S is a supertype of the Wrapper(Q)</td>
        <td>Cast from Wrapper(Q) to S</td>
    </tr>
    <tr>
        <td>Reference</td><td>Primitive</td>
        <td>for parameter types: Q is a primitive wrapper and Primitive(Q)
        can be widened to S
        <br>for return types: If Q is a primitive wrapper, check that
        Primitive(Q) can be widened to S</td>
        <td>If Q is not a primitive wrapper, cast Q to the base Wrapper(S);
        for example Number for numeric types</td>
    </tr>
    <tr>
        <td>Reference</td><td>Reference</td>
        <td>for parameter types: S is a supertype of Q
        <br>for return types: none</td>
        <td>Cast from Q to S</td>
    </tr>
</table>

@apiNote These linkage methods are designed to support the evaluation
of <em>lambda expressions</em> and <em>method references</em> in the Java
Language.  For every lambda expressions or method reference in the source code,
there is a target type which is a functional interface.  Evaluating a lambda
expression produces an object of its target type. The recommended mechanism
for evaluating lambda expressions is to desugar the lambda body to a method,
invoke an invokedynamic call site whose static argument list describes the
sole method of the functional interface and the desugared implementation
method, and returns an object (the lambda object) that implements the target
type. (For method references, the implementation method is simply the
referenced method; no desugaring is needed.)

<p>The argument list of the implementation method and the argument list of
the interface method(s) may differ in several ways.  The implementation
methods may have additional arguments to accommodate arguments captured by
the lambda expression; there may also be differences resulting from permitted
adaptations of arguments, such as casting, boxing, unboxing, and primitive
widening. (Varargs adaptations are not handled by the metafactories; these are
expected to be handled by the caller.)

<p>Invokedynamic call sites have two argument lists: a static argument list
and a dynamic argument list.  The static argument list is stored in the
constant pool; the dynamic argument is pushed on the operand stack at capture
time.  The bootstrap method has access to the entire static argument list
(which in this case, includes information describing the implementation method,
the target interface, and the target interface method(s)), as well as a
method signature describing the number and static types (but not the values)
of the dynamic arguments and the static return type of the invokedynamic site.

@implNote The implementation method is described with a method handle. In
theory, any method handle could be used. Currently supported are direct method
handles representing invocation of virtual, interface, constructor and static
methods.
"
      attribute 1707522 "FLAG_SERIALIZABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flag for alternate metafactories indicating the lambda object
must be serializable 
"
      end

      attribute 1707650 "FLAG_MARKERS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag for alternate metafactories indicating the lambda object implements
other marker interfaces
besides Serializable

"
      end

      attribute 1707778 "FLAG_BRIDGES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 << 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag for alternate metafactories indicating the lambda object requires
additional bridge methods

"
      end

      classrelation 3199746 // EMPTY_CLASS_ARRAY (<unidirectional association>)
	relation 3199746 --->
	  a role_name "EMPTY_CLASS_ARRAY" multiplicity "[]" init_value " new Class<?>[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3199746 // EMPTY_CLASS_ARRAY (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3199874 // EMPTY_MT_ARRAY (<unidirectional association>)
	relation 3199874 --->
	  a role_name "EMPTY_MT_ARRAY" multiplicity "[]" init_value " new MethodType[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3199874 // EMPTY_MT_ARRAY (<unidirectional association>)
	  b parent class_ref 944258 // MethodType
      end

      operation 7230978 "metafactory"
	class_operation public return_type class_ref 945026 // CallSite
	nparams 6
	  param inout name "caller" type class_ref 944770 // Lookup
	  param inout name "invokedName" type class_ref 128130 // String
	  param inout name "invokedType" type class_ref 944258 // MethodType
	  param inout name "samMethodType" type class_ref 944258 // MethodType
	  param inout name "implMethod" type class_ref 944386 // MethodHandle
	  param inout name "instantiatedMethodType" type class_ref 944258 // MethodType
	nexceptions 1
	  exception class_ref 944898 // LambdaConversionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Facilitates the creation of simple \"function objects\" that implement one
or more interfaces by delegation to a provided {@link MethodHandle},
after appropriate type adaptation and partial evaluation of arguments.
Typically used as a <em>bootstrap method</em> for {@code invokedynamic}
call sites, to support the <em>lambda expression</em> and <em>method
reference expression</em> features of the Java Programming Language.

<p>This is the standard, streamlined metafactory; additional flexibility
is provided by {@link #altMetafactory(MethodHandles.Lookup, String, MethodType, Object...)}.
A general description of the behavior of this method is provided
{@link LambdaMetafactory above}.

<p>When the target of the {@code CallSite} returned from this method is
invoked, the resulting function objects are instances of a class which
implements the interface named by the return type of {@code invokedType},
declares a method with the name given by {@code invokedName} and the
signature given by {@code samMethodType}.  It may also override additional
methods from {@code Object}.

@param caller Represents a lookup context with the accessibility
              privileges of the caller.  When used with {@code invokedynamic},
              this is stacked automatically by the VM.
@param invokedName The name of the method to implement.  When used with
                   {@code invokedynamic}, this is provided by the
                   {@code NameAndType} of the {@code InvokeDynamic}
                   structure and is stacked automatically by the VM.
@param invokedType The expected signature of the {@code CallSite}.  The
                   parameter types represent the types of capture variables;
                   the return type is the interface to implement.   When
                   used with {@code invokedynamic}, this is provided by
                   the {@code NameAndType} of the {@code InvokeDynamic}
                   structure and is stacked automatically by the VM.
                   In the event that the implementation method is an
                   instance method and this signature has any parameters,
                   the first parameter in the invocation signature must
                   correspond to the receiver.
@param samMethodType Signature and return type of method to be implemented
                     by the function object.
@param implMethod A direct method handle describing the implementation
                  method which should be called (with suitable adaptation
                  of argument types, return types, and with captured
                  arguments prepended to the invocation arguments) at
                  invocation time.
@param instantiatedMethodType The signature and return type that should
                              be enforced dynamically at invocation time.
                              This may be the same as {@code samMethodType},
                              or may be a specialization of it.
@return a CallSite whose target can be used to perform capture, generating
        instances of the interface named by {@code invokedType}
@throws LambdaConversionException If any of the linkage invariants
                                  described {@link LambdaMetafactory above}
                                  are violated
"
      end

      operation 7231106 "altMetafactory"
	class_operation public return_type class_ref 945026 // CallSite
	nparams 4
	  param inout name "caller" type class_ref 944770 // Lookup
	  param inout name "invokedName" type class_ref 128130 // String
	  param inout name "invokedType" type class_ref 944258 // MethodType
	  param inout name "" explicit_type "Object...args"
	nexceptions 1
	  exception class_ref 944898 // LambdaConversionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Facilitates the creation of simple \"function objects\" that implement one
or more interfaces by delegation to a provided {@link MethodHandle},
after appropriate type adaptation and partial evaluation of arguments.
Typically used as a <em>bootstrap method</em> for {@code invokedynamic}
call sites, to support the <em>lambda expression</em> and <em>method
reference expression</em> features of the Java Programming Language.

<p>This is the general, more flexible metafactory; a streamlined version
is provided by {@link #metafactory(java.lang.invoke.MethodHandles.Lookup,
String, MethodType, MethodType, MethodHandle, MethodType)}.
A general description of the behavior of this method is provided
{@link LambdaMetafactory above}.

<p>The argument list for this method includes three fixed parameters,
corresponding to the parameters automatically stacked by the VM for the
bootstrap method in an {@code invokedynamic} invocation, and an {@code Object[]}
parameter that contains additional parameters.  The declared argument
list for this method is:

<pre>{@code
 CallSite altMetafactory(MethodHandles.Lookup caller,
                         String invokedName,
                         MethodType invokedType,
                         Object... args)
}</pre>

<p>but it behaves as if the argument list is as follows:

<pre>{@code
 CallSite altMetafactory(MethodHandles.Lookup caller,
                         String invokedName,
                         MethodType invokedType,
                         MethodType samMethodType,
                         MethodHandle implMethod,
                         MethodType instantiatedMethodType,
                         int flags,
                         int markerInterfaceCount,  // IF flags has MARKERS set
                         Class... markerInterfaces, // IF flags has MARKERS set
                         int bridgeCount,           // IF flags has BRIDGES set
                         MethodType... bridges      // IF flags has BRIDGES set
                         )
}</pre>

<p>Arguments that appear in the argument list for
{@link #metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType)}
have the same specification as in that method.  The additional arguments
are interpreted as follows:
<ul>
    <li>{@code flags} indicates additional options; this is a bitwise
    OR of desired flags.  Defined flags are {@link #FLAG_BRIDGES},
    {@link #FLAG_MARKERS}, and {@link #FLAG_SERIALIZABLE}.</li>
    <li>{@code markerInterfaceCount} is the number of additional interfaces
    the function object should implement, and is present if and only if the
    {@code FLAG_MARKERS} flag is set.</li>
    <li>{@code markerInterfaces} is a variable-length list of additional
    interfaces to implement, whose length equals {@code markerInterfaceCount},
    and is present if and only if the {@code FLAG_MARKERS} flag is set.</li>
    <li>{@code bridgeCount} is the number of additional method signatures
    the function object should implement, and is present if and only if
    the {@code FLAG_BRIDGES} flag is set.</li>
    <li>{@code bridges} is a variable-length list of additional
    methods signatures to implement, whose length equals {@code bridgeCount},
    and is present if and only if the {@code FLAG_BRIDGES} flag is set.</li>
</ul>

<p>Each class named by {@code markerInterfaces} is subject to the same
restrictions as {@code Rd}, the return type of {@code invokedType},
as described {@link LambdaMetafactory above}.  Each {@code MethodType}
named by {@code bridges} is subject to the same restrictions as
{@code samMethodType}, as described {@link LambdaMetafactory above}.

<p>When FLAG_SERIALIZABLE is set in {@code flags}, the function objects
will implement {@code Serializable}, and will have a {@code writeReplace}
method that returns an appropriate {@link SerializedLambda}.  The
{@code caller} class must have an appropriate {@code $deserializeLambda$}
method, as described in {@link SerializedLambda}.

<p>When the target of the {@code CallSite} returned from this method is
invoked, the resulting function objects are instances of a class with
the following properties:
<ul>
    <li>The class implements the interface named by the return type
    of {@code invokedType} and any interfaces named by {@code markerInterfaces}</li>
    <li>The class declares methods with the name given by {@code invokedName},
    and the signature given by {@code samMethodType} and additional signatures
    given by {@code bridges}</li>
    <li>The class may override methods from {@code Object}, and may
    implement methods related to serialization.</li>
</ul>

@param caller Represents a lookup context with the accessibility
              privileges of the caller.  When used with {@code invokedynamic},
              this is stacked automatically by the VM.
@param invokedName The name of the method to implement.  When used with
                   {@code invokedynamic}, this is provided by the
                   {@code NameAndType} of the {@code InvokeDynamic}
                   structure and is stacked automatically by the VM.
@param invokedType The expected signature of the {@code CallSite}.  The
                   parameter types represent the types of capture variables;
                   the return type is the interface to implement.   When
                   used with {@code invokedynamic}, this is provided by
                   the {@code NameAndType} of the {@code InvokeDynamic}
                   structure and is stacked automatically by the VM.
                   In the event that the implementation method is an
                   instance method and this signature has any parameters,
                   the first parameter in the invocation signature must
                   correspond to the receiver.
@param  args       An {@code Object[]} array containing the required
                   arguments {@code samMethodType}, {@code implMethod},
                   {@code instantiatedMethodType}, {@code flags}, and any
                   optional arguments, as described
                   {@link #altMetafactory(MethodHandles.Lookup, String, MethodType, Object...)} above}
@return a CallSite whose target can be used to perform capture, generating
        instances of the interface named by {@code invokedType}
@throws LambdaConversionException If any of the linkage invariants
                                  described {@link LambdaMetafactory above}
                                  are violated
"
      end
    end

    class 951938 "MethodHandleNatives"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The JVM interface for the method handles package is all here.
This is an interface internal and private to an implementation of JSR 292.
<em>This class is not part of the JSR 292 standard.</em>
@author jrose
"
      operation 7259522 "MethodHandleNatives"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7259650 "init"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "self" type class_ref 945538 // MemberName
	  param inout name "ref" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment " static only
/ MemberName support"
      end

      operation 7259778 "expand"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "self" type class_ref 945538 // MemberName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
      end

      operation 7259906 "resolve"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 2
	  param inout name "self" type class_ref 945538 // MemberName
	  param inout name "caller" type class_ref 130818 // Class
	nexceptions 2
	  exception class_ref 625794 // LinkageError
	  exception class_ref 169730 // ClassNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7260034 "getMembers"
	class_operation package explicit_return_type "int"
	nparams 7
	  param inout name "defc" type class_ref 130818 // Class
	  param inout name "matchName" type class_ref 128130 // String
	  param inout name "matchSig" type class_ref 128130 // String
	  param in name "matchFlags" explicit_type "int"
	  param inout name "caller" type class_ref 130818 // Class
	  param in name "skip" explicit_type "int"
	  param inout name "results" type class_ref 945538 // MemberName
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?> ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws};
s"
	
	
	
      end

      operation 7260162 "objectFieldOffset"
	class_operation package explicit_return_type "long"
	nparams 1
	  param inout name "self" type class_ref 945538 // MemberName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment "/ Field layout queries parallel to sun.misc.Unsafe:"
      end

      operation 7260290 "staticFieldOffset"
	class_operation package explicit_return_type "long"
	nparams 1
	  param inout name "self" type class_ref 945538 // MemberName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment " e.g., returns vmindex"
      end

      operation 7260418 "staticFieldBase"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "self" type class_ref 945538 // MemberName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment " e.g., returns vmindex"
      end

      operation 7260546 "getMemberVMInfo"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "self" type class_ref 945538 // MemberName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment " e.g., returns clazz"
      end

      operation 7260674 "getConstant"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "which" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment " returns {vmindex,vmtarget}
/ MethodHandle support
 Fetch MH-related JVM parameter.
 which=0 retrieves MethodHandlePushLimit
 which=1 retrieves stack slot push size (in address units)
"
      end

      attribute 1713666 "COUNT_GWT"
	class_attribute const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7260802 "setCallSiteTargetNormal"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "site" type class_ref 945026 // CallSite
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "/ CallSite support
 Tell the JVM that we need to change the target of a CallSite. "
      end

      operation 7260930 "setCallSiteTargetVolatile"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "site" type class_ref 945026 // CallSite
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7261058 "registerNatives"
	class_operation private explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
s"
	
	
	
      end

      extra_member 161538 "initialization"
	
	cpp "" ""
	java "  static {
        registerNatives();
        COUNT_GWT                   = getConstant(Constants.GC_COUNT_GWT) != 0;

        // The JVM calls MethodHandleNatives.<clinit>.  Cascade the <clinit> calls as needed:
        MethodHandleImpl.initStatics();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      class 952066 "Constants"
	visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 7261186 "Constants"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1713794 "GC_COUNT_GWT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 4"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " static only
 MethodHandleImpl
"
	end

	attribute 1713922 "GC_LAMBDA_SUPPORT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 5"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " static only
 MethodHandleImpl
"
	end

	attribute 1714050 "MN_IS_METHOD"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0x00010000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
 method (not constructor)"
	end

	attribute 1714178 "MN_IS_CONSTRUCTOR"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0x00020000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
 constructor"
	end

	attribute 1714306 "MN_IS_FIELD"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0x00040000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
 field"
	end

	attribute 1714434 "MN_IS_TYPE"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0x00080000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
 nested type"
	end

	attribute 1714562 "MN_CALLER_SENSITIVE"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0x00100000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
 @CallerSensitive annotation detected"
	end

	attribute 1714690 "MN_REFERENCE_KIND_SHIFT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 24"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
 refKind"
	end

	attribute 1714818 "MN_REFERENCE_KIND_MASK"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0x0F000000 >> MN_REFERENCE_KIND_SHIFT"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
"
	end

	attribute 1714946 "MN_SEARCH_SUPERCLASSES"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0x00100000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
"
	end

	attribute 1715074 "MN_SEARCH_INTERFACES"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0x00200000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " MemberName
 The JVM uses values of -2 and above for vtable indexes.
 Field values are simple positive offsets.
 Ref: src/share/vm/oops/methodOop.hpp
 This value is negative enough to avoid such numbers,
 but not too negative.
"
	end

	attribute 1715202 "T_BOOLEAN"
	  class_attribute const_attribute package explicit_type "int"
	  init_value "  4"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1715330 "T_CHAR"
	  class_attribute const_attribute package explicit_type "int"
	  init_value "  5"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1715458 "T_FLOAT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value "  6"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1715586 "T_DOUBLE"
	  class_attribute const_attribute package explicit_type "int"
	  init_value "  7"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1715714 "T_BYTE"
	  class_attribute const_attribute package explicit_type "int"
	  init_value "  8"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1715842 "T_SHORT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value "  9"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1715970 "T_INT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 10"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1716098 "T_LONG"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 11"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1716226 "T_OBJECT"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 12"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1716354 "T_VOID"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 14"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1716482 "T_ILLEGAL"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 99"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Basic types as encoded in the JVM.  These code values are not
intended for use outside this class.  They are used as part of
a private interface between the JVM and this class.

"
	end

	attribute 1716610 "CONSTANT_Utf8"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1716738 "CONSTANT_Integer"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1716866 "CONSTANT_Float"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 4"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1716994 "CONSTANT_Long"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 5"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1717122 "CONSTANT_Double"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 6"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1717250 "CONSTANT_Class"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 7"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1717378 "CONSTANT_String"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 8"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1717506 "CONSTANT_Fieldref"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 9"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1717634 "CONSTANT_Methodref"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 10"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1717762 "CONSTANT_InterfaceMethodref"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 11"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1717890 "CONSTANT_NameAndType"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 12"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1718018 "CONSTANT_MethodHandle"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 15"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

 JSR 292"
	end

	attribute 1718146 "CONSTANT_MethodType"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 16"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

 JSR 292"
	end

	attribute 1718274 "CONSTANT_InvokeDynamic"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 18"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

"
	end

	attribute 1718402 "CONSTANT_LIMIT"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 19"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool entry types.

 Limit to tags found in classfiles"
	end

	attribute 1718530 "ACC_PUBLIC"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0001"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1718658 "ACC_PRIVATE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0002"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1718786 "ACC_PROTECTED"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0004"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1718914 "ACC_STATIC"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0008"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1719042 "ACC_FINAL"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0010"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1719170 "ACC_SYNCHRONIZED"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0020"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1719298 "ACC_VOLATILE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0040"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1719426 "ACC_TRANSIENT"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0080"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1719554 "ACC_NATIVE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0100"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1719682 "ACC_INTERFACE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0200"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1719810 "ACC_ABSTRACT"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0400"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1719938 "ACC_STRICT"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x0800"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1720066 "ACC_SYNTHETIC"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x1000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1720194 "ACC_ANNOTATION"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x2000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1720322 "ACC_ENUM"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " 0x4000"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1720450 "ACC_SUPER"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " ACC_SYNCHRONIZED"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1720578 "ACC_BRIDGE"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " ACC_VOLATILE"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1720706 "ACC_VARARGS"
	  class_attribute const_attribute package explicit_type "char"
	  init_value " ACC_TRANSIENT"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Access modifier flags.

"
	end

	attribute 1720834 "REF_NONE"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 0"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

 null value"
	end

	attribute 1720962 "REF_getField"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 1"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1721090 "REF_getStatic"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 2"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1721218 "REF_putField"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1721346 "REF_putStatic"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 4"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1721474 "REF_invokeVirtual"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 5"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1721602 "REF_invokeStatic"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 6"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1721730 "REF_invokeSpecial"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 7"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1721858 "REF_newInvokeSpecial"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 8"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1721986 "REF_invokeInterface"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 9"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end

	attribute 1722114 "REF_LIMIT"
	  class_attribute const_attribute package explicit_type "byte"
	  init_value " 10"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.

"
	end
      end

      operation 7261314 "refKindIsValid"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7261442 "refKindIsField"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7261570 "refKindIsGetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7261698 "refKindIsSetter"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7261826 "refKindIsMethod"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7261954 "refKindIsConstructor"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7262082 "refKindHasReceiver"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7262210 "refKindIsStatic"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7262338 "refKindDoesDispatch"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 161666 "initialization"
	
	cpp "" ""
	java "  static {
        final int HR_MASK = ((1 << REF_getField) |
                             (1 << REF_putField) |
                             (1 << REF_invokeVirtual) |
                             (1 << REF_invokeSpecial) |
                             (1 << REF_invokeInterface)
                            );
        for (byte refKind = REF_NONE+1; refKind < REF_LIMIT; refKind++) {
            assert(refKindHasReceiver(refKind) == (((1<<refKind) & HR_MASK) != 0)) : refKind;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7262466 "refKindName"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param in name "refKind" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7262594 "getNamedCon"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "which" explicit_type "int"
	  param inout name "name" type class_ref 129538 // Object
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws};
s"
	
	
	
      end

      operation 7262722 "verifyConstants"
	class_operation package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 161794 "initialization"
	
	cpp "" ""
	java "  static {
        assert(verifyConstants());
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7262850 "linkCallSite"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 6
	  param inout name "callerObj" type class_ref 129538 // Object
	  param inout name "bootstrapMethodObj" type class_ref 129538 // Object
	  param inout name "nameObj" type class_ref 129538 // Object
	  param inout name "typeObj" type class_ref 129538 // Object
	  param inout name "staticArguments" type class_ref 129538 // Object
	  param inout name "appendixResult" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Up-calls from the JVM.
 These must NOT be public.

The JVM is linking an invokedynamic instruction.  Create a reified call site for it.
"
      end

      operation 7262978 "linkCallSiteImpl"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 6
	  param inout name "caller" type class_ref 130818 // Class
	  param inout name "bootstrapMethod" type class_ref 944386 // MethodHandle
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "staticArguments" type class_ref 129538 // Object
	  param inout name "appendixResult" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7263106 "linkCallSiteTracing"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 6
	  param inout name "caller" type class_ref 130818 // Class
	  param inout name "bootstrapMethod" type class_ref 944386 // MethodHandle
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "staticArguments" type class_ref 129538 // Object
	  param inout name "appendixResult" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Tracing logic:"
      end

      operation 7263234 "findMethodHandleType"
	class_operation package return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "rtype" type class_ref 130818 // Class
	  param inout name "ptypes" type class_ref 130818 // Class
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The JVM wants a pointer to a MethodType.  Oblige it by finding or creating one.
"
      end

      operation 7263362 "linkMethod"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 6
	  param inout name "callerClass" type class_ref 130818 // Class
	  param in name "refKind" explicit_type "int"
	  param inout name "defc" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 129538 // Object
	  param inout name "appendixResult" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The JVM wants to link a call site that requires a dynamic type check.
Name is a type-checking invoker, invokeExact or invoke.
Return a JVM method (MemberName) to handle the invoking.
The method assumes the following arguments on the stack:
0: the method handle being invoked
1-N: the arguments to the method handle invocation
N+1: an optional, implicitly added argument (typically the given MethodType)
<p>
The nominal method at such a call site is an instance of
a signature-polymorphic method (see @PolymorphicSignature).
Such method instances are user-visible entities which are
\"split\" from the generic placeholder method in {@code MethodHandle}.
(Note that the placeholder method is not identical with any of
its instances.  If invoked reflectively, is guaranteed to throw an
{@code UnsupportedOperationException}.)
If the signature-polymorphic method instance is ever reified,
it appears as a \"copy\" of the original placeholder
(a native final member of {@code MethodHandle}) except
that its type descriptor has shape required by the instance,
and the method instance is <em>not</em> varargs.
The method instance is also marked synthetic, since the
method (by definition) does not appear in Java source code.
<p>
The JVM is allowed to reify this method as instance metadata.
For example, {@code invokeBasic} is always reified.
But the JVM may instead call {@code linkMethod}.
If the result is an * ordered pair of a {@code (method, appendix)},
the method gets all the arguments (0..N inclusive)
plus the appendix (N+1), and uses the appendix to complete the call.
In this way, one reusable method (called a \"linker method\")
can perform the function of any number of polymorphic instance
methods.
<p>
Linker methods are allowed to be weakly typed, with any or
all references rewritten to {@code Object} and any primitives
(except {@code long}/{@code float}/{@code double})
rewritten to {@code int}.
A linker method is trusted to return a strongly typed result,
according to the specific method type descriptor of the
signature-polymorphic instance it is emulating.
This can involve (as necessary) a dynamic check using
data extracted from the appendix argument.
<p>
The JVM does not inspect the appendix, other than to pass
it verbatim to the linker method at every call.
This means that the JDK runtime has wide latitude
for choosing the shape of each linker method and its
corresponding appendix.
Linker methods should be generated from {@code LambdaForm}s
so that they do not become visible on stack traces.
<p>
The {@code linkMethod} call is free to omit the appendix
(returning null) and instead emulate the required function
completely in the linker method.
As a corner case, if N==255, no appendix is possible.
In this case, the method returned must be custom-generated to
to perform any needed type checking.
<p>
If the JVM does not reify a method at a call site, but instead
calls {@code linkMethod}, the corresponding call represented
in the bytecodes may mention a valid method which is not
representable with a {@code MemberName}.
Therefore, use cases for {@code linkMethod} tend to correspond to
special cases in reflective code such as {@code findVirtual}
or {@code revealDirect}.
"
      end

      operation 7263490 "linkMethodImpl"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 6
	  param inout name "callerClass" type class_ref 130818 // Class
	  param in name "refKind" explicit_type "int"
	  param inout name "defc" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 129538 // Object
	  param inout name "appendixResult" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7263618 "fixMethodType"
	class_operation private return_type class_ref 944258 // MethodType
	nparams 2
	  param inout name "callerClass" type class_ref 130818 // Class
	  param inout name "type" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7263746 "linkMethodTracing"
	class_operation package return_type class_ref 945538 // MemberName
	nparams 6
	  param inout name "callerClass" type class_ref 130818 // Class
	  param in name "refKind" explicit_type "int"
	  param inout name "defc" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 129538 // Object
	  param inout name "appendixResult" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Tracing logic:"
      end

      operation 7263874 "linkMethodHandleConstant"
	class_operation package return_type class_ref 944386 // MethodHandle
	nparams 5
	  param inout name "callerClass" type class_ref 130818 // Class
	  param in name "refKind" explicit_type "int"
	  param inout name "defc" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The JVM is resolving a CONSTANT_MethodHandle CP entry.  And it wants our help.
It will make an up-call to this method.  (Do not change the name or signature.)
The type argument is a Class for field requests and a MethodType for non-fields.
<p>
Recent versions of the JVM may also pass a resolved MemberName for the type.
In that case, the name is ignored and may be null.
"
      end

      operation 7264002 "initCauseFrom"
	class_operation private return_type class_ref 195842 // Error
	nparams 2
	  param inout name "err" type class_ref 195842 // Error
	  param inout name "ex" type class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Use best possible cause for err.initCause(), substituting the
cause for err itself if the cause has the same (or better) type.
"
      end

      operation 7264130 "isCallerSensitive"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "mem" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Is this method a caller-sensitive method?
I.e., does it call Reflection.getCallerClass or a similer method
to ask about the identity of its caller?
"
      end

      operation 7264258 "canBeCalledVirtual"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "mem" type class_ref 945538 // MemberName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7264386 "canBeCalledVirtual"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "symbolicRef" type class_ref 945538 // MemberName
	  param inout name "definingClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 952194 "MethodHandleProxies"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class consists exclusively of static methods that help adapt
method handles to other JVM types, such as interfaces.
"
      operation 7264514 "MethodHandleProxies"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7264642 "asInterfaceInstance"
	class_operation public explicit_return_type "T"
	nparams 2
	  param in name "intfc" type class_ref 130818 // Class
	  param in name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}final ${t0}<T> ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment " do not instantiate

Produces an instance of the given single-method interface which redirects
its calls to the given method handle.
<p>
A single-method interface is an interface which declares a uniquely named method.
When determining the uniquely named method of a single-method interface,
the public {@code Object} methods ({@code toString}, {@code equals}, {@code hashCode})
are disregarded.  For example, {@link java.util.Comparator} is a single-method interface,
even though it re-declares the {@code Object.equals} method.
<p>
The interface must be public.  No additional access checks are performed.
<p>
The resulting instance of the required type will respond to
invocation of the type's uniquely named method by calling
the given target on the incoming arguments,
and returning or throwing whatever the target
returns or throws.  The invocation will be as if by
{@code target.invoke}.
The target's type will be checked before the
instance is created, as if by a call to {@code asType},
which may result in a {@code WrongMethodTypeException}.
<p>
The uniquely named method is allowed to be multiply declared,
with distinct type descriptors.  (E.g., it can be overloaded,
or can possess bridge methods.)  All such declarations are
connected directly to the target method handle.
Argument and return types are adjusted by {@code asType}
for each individual declaration.
<p>
The wrapper instance will implement the requested interface
and its super-types, but no other single-method interfaces.
This means that the instance will not unexpectedly
pass an {@code instanceof} test for any unrequested type.
<p style=\"font-size:smaller;\">
<em>Implementation Note:</em>
Therefore, each instance must implement a unique single-method interface.
Implementations may not bundle together
multiple single-method interfaces onto single implementation classes
in the style of {@link java.awt.AWTEventMulticaster}.
<p>
The method handle may throw an <em>undeclared exception</em>,
which means any checked exception (or other checked throwable)
not declared by the requested type's single abstract method.
If this happens, the throwable will be wrapped in an instance of
{@link java.lang.reflect.UndeclaredThrowableException UndeclaredThrowableException}
and thrown in that wrapped form.
<p>
Like {@link java.lang.Integer#valueOf Integer.valueOf},
{@code asInterfaceInstance} is a factory method whose results are defined
by their behavior.
It is not guaranteed to return a new instance for every call.
<p>
Because of the possibility of {@linkplain java.lang.reflect.Method#isBridge bridge methods}
and other corner cases, the interface may also have several abstract methods
with the same name but having distinct descriptors (types of returns and parameters).
In this case, all the methods are bound in common to the one given target.
The type check and effective {@code asType} conversion is applied to each
method type descriptor, and all abstract methods are bound to the target in common.
Beyond this type check, no further checks are made to determine that the
abstract methods are related in any way.
<p>
Future versions of this API may accept additional types,
such as abstract classes with single abstract methods.
Future versions of this API may also equip wrapper instances
with one or more additional public \"marker\" interfaces.
<p>
If a security manager is installed, this method is caller sensitive.
During any invocation of the target method handle via the returned wrapper,
the original creator of the wrapper (the caller) will be visible
to context checks requested by the security manager.

@param <T> the desired type of the wrapper, a single-method interface
@param intfc a class object representing {@code T}
@param target the method handle to invoke from the wrapper
@return a correctly-typed wrapper for the given target
@throws NullPointerException if either argument is null
@throws IllegalArgumentException if the {@code intfc} is not a
        valid argument to this method
@throws WrongMethodTypeException if the target cannot
        be converted to the type required by the requested interface

 Other notes to implementors:
 <p>
 No stable mapping is promised between the single-method interface and
 the implementation class C.  Over time, several implementation
 classes might be used for the same type.
 <p>
 If the implementation is able
 to prove that a wrapper of the required type
 has already been created for a given
 method handle, or for another method handle with the
 same behavior, the implementation may return that wrapper in place of
 a new wrapper.
 <p>
 This method is designed to apply to common use cases
 where a single method handle must interoperate with
 an interface that implements a function-like
 API.  Additional variations, such as single-abstract-method classes with
 private constructors, or interfaces with multiple but related
 entry points, must be covered by hand-written or automatically
 generated adapter classes.
"
      end

      operation 7264770 "bindCaller"
	class_operation private return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "hostClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7264898 "isWrapperInstance"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if the given object was produced by a call to {@link #asInterfaceInstance asInterfaceInstance}.
@param x any reference
@return true if the reference is not null and points to an object produced by {@code asInterfaceInstance}
"
      end

      operation 7265026 "asWrapperInstance"
	class_operation private explicit_return_type "WrapperInstance"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7265154 "wrapperInstanceTarget"
	class_operation public return_type class_ref 944386 // MethodHandle
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces or recovers a target method handle which is behaviorally
equivalent to the unique method of this wrapper instance.
The object {@code x} must have been produced by a call to {@link #asInterfaceInstance asInterfaceInstance}.
This requirement may be tested via {@link #isWrapperInstance isWrapperInstance}.
@param x any reference
@return a method handle implementing the unique method
@throws IllegalArgumentException if the reference x is not to a wrapper instance
"
      end

      operation 7265282 "wrapperInstanceType"
	class_operation public return_type class_ref 130818 // Class
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Recovers the unique single-method interface type for which this wrapper instance was created.
The object {@code x} must have been produced by a call to {@link #asInterfaceInstance asInterfaceInstance}.
This requirement may be tested via {@link #isWrapperInstance isWrapperInstance}.
@param x any reference
@return the single-method interface type for which the wrapper was created
@throws IllegalArgumentException if the reference x is not to a wrapper instance
"
      end

      operation 7265410 "isObjectMethod"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7265538 "callObjectMethod"
	class_operation private return_type class_ref 129538 // Object
	nparams 3
	  param inout name "self" type class_ref 129538 // Object
	  param inout name "m" type class_ref 137858 // Method
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7265666 "getSingleNameMethods"
	class_operation private return_type class_ref 137858 // Method
	nparams 1
	  param inout name "intfc" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 952322 "MethodHandleStatics"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class consists exclusively of static names internal to the
method handle implementation.
Usage:  {@code import static java.lang.invoke.MethodHandleStatics.*}
@author John Rose, JSR 292 EG

non-public"
      operation 7278338 "MethodHandleStatics"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1723266 "UNSAFE"
	class_attribute const_attribute package explicit_type "Unsafe"
	init_value " Unsafe.getUnsafe()"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " do not instantiate
"
      end

      attribute 1723394 "DEBUG_METHOD_HANDLE_NAMES"
	class_attribute const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1723522 "DUMP_CLASS_FILES"
	class_attribute const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1723650 "TRACE_INTERPRETER"
	class_attribute const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1723778 "TRACE_METHOD_LINKAGE"
	class_attribute const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1723906 "COMPILE_THRESHOLD"
	class_attribute const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1724034 "DONT_INLINE_THRESHOLD"
	class_attribute const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1724162 "PROFILE_LEVEL"
	class_attribute const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1724290 "PROFILE_GWT"
	class_attribute const_attribute package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1724418 "CUSTOMIZE_THRESHOLD"
	class_attribute const_attribute package explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 162178 "initialization"
	
	cpp "" ""
	java "  static {
        final Object[] values = new Object[9];
        AccessController.doPrivileged(new PrivilegedAction<Void>() {
                public Void run() {
                    values[0] = Boolean.getBoolean(\"java.lang.invoke.MethodHandle.DEBUG_NAMES\");
                    values[1] = Boolean.getBoolean(\"java.lang.invoke.MethodHandle.DUMP_CLASS_FILES\");
                    values[2] = Boolean.getBoolean(\"java.lang.invoke.MethodHandle.TRACE_INTERPRETER\");
                    values[3] = Boolean.getBoolean(\"java.lang.invoke.MethodHandle.TRACE_METHOD_LINKAGE\");
                    values[4] = Integer.getInteger(\"java.lang.invoke.MethodHandle.COMPILE_THRESHOLD\", 0);
                    values[5] = Integer.getInteger(\"java.lang.invoke.MethodHandle.DONT_INLINE_THRESHOLD\", 30);
                    values[6] = Integer.getInteger(\"java.lang.invoke.MethodHandle.PROFILE_LEVEL\", 0);
                    values[7] = Boolean.parseBoolean(System.getProperty(\"java.lang.invoke.MethodHandle.PROFILE_GWT\", \"true\"));
                    values[8] = Integer.getInteger(\"java.lang.invoke.MethodHandle.CUSTOMIZE_THRESHOLD\", 127);
                    return null;
                }
            });
        DEBUG_METHOD_HANDLE_NAMES = (Boolean) values[0];
        DUMP_CLASS_FILES          = (Boolean) values[1];
        TRACE_INTERPRETER         = (Boolean) values[2];
        TRACE_METHOD_LINKAGE      = (Boolean) values[3];
        COMPILE_THRESHOLD         = (Integer) values[4];
        DONT_INLINE_THRESHOLD     = (Integer) values[5];
        PROFILE_LEVEL             = (Integer) values[6];
        PROFILE_GWT               = (Boolean) values[7];
        CUSTOMIZE_THRESHOLD       = (Integer) values[8];

        if (CUSTOMIZE_THRESHOLD < -1 || CUSTOMIZE_THRESHOLD > 127) {
            throw newInternalError(\"CUSTOMIZE_THRESHOLD should be in [-1...127] range\");
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7278466 "debugEnabled"
	class_operation package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Tell if any of the debugging switches are turned on.
 If this is the case, it is reasonable to perform extra checks or save extra information.

non-public"
      end

      operation 7278594 "getNameString"
	class_operation package return_type class_ref 128130 // String
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7278722 "getNameString"
	class_operation package return_type class_ref 128130 // String
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "typeHolder" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7278850 "getNameString"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7278978 "addTypeString"
	class_operation package return_type class_ref 128130 // String
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7279106 "newInternalError"
	class_operation package return_type class_ref 934274 // InternalError
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " handy shared exception makers (they simplify the common case code)
non-public"
      end

      operation 7279234 "newInternalError"
	class_operation package return_type class_ref 934274 // InternalError
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7279362 "newInternalError"
	class_operation package return_type class_ref 934274 // InternalError
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7279490 "newIllegalStateException"
	class_operation package return_type class_ref 214786 // RuntimeException
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7279618 "newIllegalStateException"
	class_operation package return_type class_ref 214786 // RuntimeException
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7279746 "newIllegalArgumentException"
	class_operation package return_type class_ref 214786 // RuntimeException
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7279874 "newIllegalArgumentException"
	class_operation package return_type class_ref 214786 // RuntimeException
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7280002 "newIllegalArgumentException"
	class_operation package return_type class_ref 214786 // RuntimeException
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "obj2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7280130 "uncaughtException"
	class_operation package return_type class_ref 195842 // Error
	nparams 1
	  param inout name "ex" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Propagate unchecked exceptions and errors, but wrap anything checked and throw that instead. 
non-public"
      end

      operation 7280258 "NYI"
	class_operation package return_type class_ref 195842 // Error
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7280386 "message"
	class_operation private return_type class_ref 128130 // String
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7280514 "message"
	class_operation private return_type class_ref 128130 // String
	nparams 3
	  param inout name "message" type class_ref 128130 // String
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "obj2" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 952706 "MutableCallSite"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code MutableCallSite} is a {@link CallSite} whose target variable
behaves like an ordinary field.
An {@code invokedynamic} instruction linked to a {@code MutableCallSite} delegates
all calls to the site's current target.
The {@linkplain CallSite#dynamicInvoker dynamic invoker} of a mutable call site
also delegates each call to the site's current target.
<p>
Here is an example of a mutable call site which introduces a
state variable into a method handle chain.
<!-- JavaDocExamplesTest.testMutableCallSite -->
<blockquote><pre>{@code
MutableCallSite name = new MutableCallSite(MethodType.methodType(String.class));
MethodHandle MH_name = name.dynamicInvoker();
MethodType MT_str1 = MethodType.methodType(String.class);
MethodHandle MH_upcase = MethodHandles.lookup()
.findVirtual(String.class, \"toUpperCase\", MT_str1);
MethodHandle worker1 = MethodHandles.filterReturnValue(MH_name, MH_upcase);
name.setTarget(MethodHandles.constant(String.class, \"Rocky\"));
assertEquals(\"ROCKY\", (String) worker1.invokeExact());
name.setTarget(MethodHandles.constant(String.class, \"Fred\"));
assertEquals(\"FRED\", (String) worker1.invokeExact());
// (mutation can be continued indefinitely)
}</pre></blockquote>
<p>
The same call site may be used in several places at once.
<blockquote><pre>{@code
MethodType MT_str2 = MethodType.methodType(String.class, String.class);
MethodHandle MH_cat = lookup().findVirtual(String.class,
\"concat\", methodType(String.class, String.class));
MethodHandle MH_dear = MethodHandles.insertArguments(MH_cat, 1, \", dear?\");
MethodHandle worker2 = MethodHandles.filterReturnValue(MH_name, MH_dear);
assertEquals(\"Fred, dear?\", (String) worker2.invokeExact());
name.setTarget(MethodHandles.constant(String.class, \"Wilma\"));
assertEquals(\"WILMA\", (String) worker1.invokeExact());
assertEquals(\"Wilma, dear?\", (String) worker2.invokeExact());
}</pre></blockquote>
<p>
<em>Non-synchronization of target values:</em>
A write to a mutable call site's target does not force other threads
to become aware of the updated value.  Threads which do not perform
suitable synchronization actions relative to the updated call site
may cache the old target value and delay their use of the new target
value indefinitely.
(This is a normal consequence of the Java Memory Model as applied
to object fields.)
<p>
The {@link #syncAll syncAll} operation provides a way to force threads
to accept a new target value, even if there is no other synchronization.
<p>
For target values which will be frequently updated, consider using
a {@linkplain VolatileCallSite volatile call site} instead.
@author John Rose, JSR 292 EG
"
      classrelation 3208834 // <generalisation>
	relation 3208834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3208834 // <generalisation>
	  b parent class_ref 945026 // CallSite
      end

      operation 7294466 "MutableCallSite"
	public explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a blank call site object with the given method type.
The initial target is set to a method handle of the given type
which will throw an {@link IllegalStateException} if called.
<p>
The type of the call site is permanently set to the given type.
<p>
Before this {@code CallSite} object is returned from a bootstrap method,
or invoked in some other manner,
it is usually provided with a more useful target method,
via a call to {@link CallSite#setTarget(MethodHandle) setTarget}.
@param type the method type that this call site will have
@throws NullPointerException if the proposed type is null
"
      end

      operation 7294594 "MutableCallSite"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a call site object with an initial target method handle.
The type of the call site is permanently set to the initial target's type.
@param target the method handle that will be the initial target of the call site
@throws NullPointerException if the proposed target is null
"
      end

      operation 7294722 "getTarget"
	public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the target method of the call site, which behaves
like a normal field of the {@code MutableCallSite}.
<p>
The interactions of {@code getTarget} with memory are the same
as of a read from an ordinary variable, such as an array element or a
non-volatile, non-final field.
<p>
In particular, the current thread may choose to reuse the result
of a previous read of the target from memory, and may fail to see
a recent update to the target by another thread.

@return the linkage state of this call site, a method handle which can change over time
@see #setTarget
"
      end

      operation 7294850 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newTarget" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Updates the target method of this call site, as a normal variable.
The type of the new target must agree with the type of the old target.
<p>
The interactions with memory are the same
as of a write to an ordinary variable, such as an array element or a
non-volatile, non-final field.
<p>
In particular, unrelated threads may fail to see the updated target
until they perform a read from memory.
Stronger guarantees can be created by putting appropriate operations
into the bootstrap method and/or the target methods used
at any given call site.

@param newTarget the new target
@throws NullPointerException if the proposed new target is null
@throws WrongMethodTypeException if the proposed new target
        has a method type that differs from the previous target
@see #getTarget
"
      end

      operation 7294978 "dynamicInvoker"
	public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7295106 "syncAll"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "sites" type class_ref 952706 // MutableCallSite
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a synchronization operation on each call site in the given array,
forcing all other threads to throw away any cached values previously
loaded from the target of any of the call sites.
<p>
This operation does not reverse any calls that have already started
on an old target value.
(Java supports {@linkplain java.lang.Object#wait() forward time travel} only.)
<p>
The overall effect is to force all future readers of each call site's target
to accept the most recently stored value.
(\"Most recently\" is reckoned relative to the {@code syncAll} itself.)
Conversely, the {@code syncAll} call may block until all readers have
(somehow) decached all previous versions of each call site's target.
<p>
To avoid race conditions, calls to {@code setTarget} and {@code syncAll}
should generally be performed under some sort of mutual exclusion.
Note that reader threads may observe an updated target as early
as the {@code setTarget} call that install the value
(and before the {@code syncAll} that confirms the value).
On the other hand, reader threads may observe previous versions of
the target until the {@code syncAll} call returns
(and after the {@code setTarget} that attempts to convey the updated version).
<p>
This operation is likely to be expensive and should be used sparingly.
If possible, it should be buffered for batch processing on sets of call sites.
<p>
If {@code sites} contains a null element,
a {@code NullPointerException} will be raised.
In this case, some non-null elements in the array may be
processed before the method returns abnormally.
Which elements these are (if any) is implementation-dependent.

<h1>Java Memory Model details</h1>
In terms of the Java Memory Model, this operation performs a synchronization
action which is comparable in effect to the writing of a volatile variable
by the current thread, and an eventual volatile read by every other thread
that may access one of the affected call sites.
<p>
The following effects are apparent, for each individual call site {@code S}:
<ul>
<li>A new volatile variable {@code V} is created, and written by the current thread.
    As defined by the JMM, this write is a global synchronization event.
<li>As is normal with thread-local ordering of write events,
    every action already performed by the current thread is
    taken to happen before the volatile write to {@code V}.
    (In some implementations, this means that the current thread
    performs a global release operation.)
<li>Specifically, the write to the current target of {@code S} is
    taken to happen before the volatile write to {@code V}.
<li>The volatile write to {@code V} is placed
    (in an implementation specific manner)
    in the global synchronization order.
<li>Consider an arbitrary thread {@code T} (other than the current thread).
    If {@code T} executes a synchronization action {@code A}
    after the volatile write to {@code V} (in the global synchronization order),
    it is therefore required to see either the current target
    of {@code S}, or a later write to that target,
    if it executes a read on the target of {@code S}.
    (This constraint is called \"synchronization-order consistency\".)
<li>The JMM specifically allows optimizing compilers to elide
    reads or writes of variables that are known to be useless.
    Such elided reads and writes have no effect on the happens-before
    relation.  Regardless of this fact, the volatile {@code V}
    will not be elided, even though its written value is
    indeterminate and its read value is not used.
</ul>
Because of the last point, the implementation behaves as if a
volatile read of {@code V} were performed by {@code T}
immediately after its action {@code A}.  In the local ordering
of actions in {@code T}, this read happens before any future
read of the target of {@code S}.  It is as if the
implementation arbitrarily picked a read of {@code S}'s target
by {@code T}, and forced a read of {@code V} to precede it,
thereby ensuring communication of the new target value.
<p>
As long as the constraints of the Java Memory Model are obeyed,
implementations may delay the completion of a {@code syncAll}
operation while other threads ({@code T} above) continue to
use previous values of {@code S}'s target.
However, implementations are (as always) encouraged to avoid
livelock, and to eventually require all threads to take account
of the updated target.

<p style=\"font-size:smaller;\">
<em>Discussion:</em>
For performance reasons, {@code syncAll} is not a virtual method
on a single call site, but rather applies to a set of call sites.
Some implementations may incur a large fixed overhead cost
for processing one or more synchronization operations,
but a small incremental cost for each additional call site.
In any case, this operation is likely to be costly, since
other threads may have to be somehow interrupted
in order to make them notice the updated target value.
However, it may be observed that a single call to synchronize
several sites has the same formal effect as many calls,
each on just one of the sites.

<p style=\"font-size:smaller;\">
<em>Implementation Note:</em>
Simple implementations of {@code MutableCallSite} may use
a volatile variable for the target of a mutable call site.
In such an implementation, the {@code syncAll} method can be a no-op,
and yet it will conform to the JMM behavior documented above.

@param sites an array of call sites to be synchronized
@throws NullPointerException if the {@code sites} array reference is null
                             or the array contains a null
"
      end

      classrelation 3208962 // STORE_BARRIER (<unidirectional association>)
	relation 3208962 --->
	  a role_name "STORE_BARRIER" init_value " new AtomicInteger()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3208962 // STORE_BARRIER (<unidirectional association>)
	  b parent class_ref 191490 // AtomicInteger
      end
    end

    class 952834 "SerializedLambda"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Serialized form of a lambda expression.  The properties of this class
represent the information that is present at the lambda factory site, including
static metafactory arguments such as the identity of the primary functional
interface method and the identity of the implementation method, as well as
dynamic metafactory arguments such as values captured from the lexical scope
at the time of lambda capture.

<p>Implementors of serializable lambdas, such as compilers or language
runtime libraries, are expected to ensure that instances deserialize properly.
One means to do so is to ensure that the {@code writeReplace} method returns
an instance of {@code SerializedLambda}, rather than allowing default
serialization to proceed.

<p>{@code SerializedLambda} has a {@code readResolve} method that looks for
a (possibly private) static method called
{@code $deserializeLambda$(SerializedLambda)} in the capturing class, invokes
that with itself as the first argument, and returns the result.  Lambda classes
implementing {@code $deserializeLambda$} are responsible for validating
that the properties of the {@code SerializedLambda} are consistent with a
lambda actually captured by that class.

@see LambdaMetafactory
"
      classrelation 3209346 // <realization>
	relation 3209346 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3209346 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1730050 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8025925345765570181L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3209474 // capturingClass (<unidirectional association>)
	relation 3209474 --->
	  a role_name "capturingClass" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3209474 // capturingClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3209602 // functionalInterfaceClass (<unidirectional association>)
	relation 3209602 --->
	  a role_name "functionalInterfaceClass" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3209602 // functionalInterfaceClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3209730 // functionalInterfaceMethodName (<unidirectional association>)
	relation 3209730 --->
	  a role_name "functionalInterfaceMethodName" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3209730 // functionalInterfaceMethodName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3209858 // functionalInterfaceMethodSignature (<unidirectional association>)
	relation 3209858 --->
	  a role_name "functionalInterfaceMethodSignature" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3209858 // functionalInterfaceMethodSignature (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3209986 // implClass (<unidirectional association>)
	relation 3209986 --->
	  a role_name "implClass" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3209986 // implClass (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3210114 // implMethodName (<unidirectional association>)
	relation 3210114 --->
	  a role_name "implMethodName" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3210114 // implMethodName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3210242 // implMethodSignature (<unidirectional association>)
	relation 3210242 --->
	  a role_name "implMethodSignature" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3210242 // implMethodSignature (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1730178 "implMethodKind"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3210370 // instantiatedMethodType (<unidirectional association>)
	relation 3210370 --->
	  a role_name "instantiatedMethodType" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3210370 // instantiatedMethodType (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3210498 // capturedArgs (<unidirectional association>)
	relation 3210498 --->
	  a role_name "capturedArgs" multiplicity "[]" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3210498 // capturedArgs (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 7295874 "SerializedLambda"
	public explicit_return_type ""
	nparams 10
	  param inout name "capturingClass" type class_ref 130818 // Class
	  param inout name "functionalInterfaceClass" type class_ref 128130 // String
	  param inout name "functionalInterfaceMethodName" type class_ref 128130 // String
	  param inout name "functionalInterfaceMethodSignature" type class_ref 128130 // String
	  param in name "implMethodKind" explicit_type "int"
	  param inout name "implClass" type class_ref 128130 // String
	  param inout name "implMethodName" type class_ref 128130 // String
	  param inout name "implMethodSignature" type class_ref 128130 // String
	  param inout name "instantiatedMethodType" type class_ref 128130 // String
	  param inout name "capturedArgs" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9}[] ${p9}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a {@code SerializedLambda} from the low-level information present
at the lambda factory site.

@param capturingClass The class in which the lambda expression appears
@param functionalInterfaceClass Name, in slash-delimited form, of static
                                type of the returned lambda object
@param functionalInterfaceMethodName Name of the functional interface
                                     method for the present at the
                                     lambda factory site
@param functionalInterfaceMethodSignature Signature of the functional
                                          interface method present at
                                          the lambda factory site
@param implMethodKind Method handle kind for the implementation method
@param implClass Name, in slash-delimited form, for the class holding
                 the implementation method
@param implMethodName Name of the implementation method
@param implMethodSignature Signature of the implementation method
@param instantiatedMethodType The signature of the primary functional
                              interface method after type variables
                              are substituted with their instantiation
                              from the capture site
@param capturedArgs The dynamic arguments to the lambda factory site,
                    which represent variables captured by
                    the lambda
"
      end

      operation 7296002 "getCapturingClass"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of the class that captured this lambda.
@return the name of the class that captured this lambda
"
      end

      operation 7296130 "getFunctionalInterfaceClass"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of the invoked type to which this
lambda has been converted
@return the name of the functional interface class to which
this lambda has been converted
"
      end

      operation 7296258 "getFunctionalInterfaceMethodName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of the primary method for the functional interface
to which this lambda has been converted.
@return the name of the primary methods of the functional interface
"
      end

      operation 7296386 "getFunctionalInterfaceMethodSignature"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the signature of the primary method for the functional
interface to which this lambda has been converted.
@return the signature of the primary method of the functional
interface
"
      end

      operation 7296514 "getImplClass"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of the class containing the implementation
method.
@return the name of the class containing the implementation
method
"
      end

      operation 7296642 "getImplMethodName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the name of the implementation method.
@return the name of the implementation method
"
      end

      operation 7296770 "getImplMethodSignature"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the signature of the implementation method.
@return the signature of the implementation method
"
      end

      operation 7296898 "getImplMethodKind"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the method handle kind (see {@link MethodHandleInfo}) of
the implementation method.
@return the method handle kind of the implementation method
"
      end

      operation 7297026 "getInstantiatedMethodType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the signature of the primary functional interface method
after type variables are substituted with their instantiation
from the capture site.
@return the signature of the primary functional interface method
after type variable processing
"
      end

      operation 7297154 "getCapturedArgCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the count of dynamic arguments to the lambda capture site.
@return the count of dynamic arguments to the lambda capture site
"
      end

      operation 7297282 "getCapturedArg"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a dynamic argument to the lambda capture site.
@param i the argument to capture
@return a dynamic argument to the lambda capture site
"
      end

      operation 7297410 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 932226 // ReflectiveOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7297538 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 952962 "SimpleMethodHandle"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A method handle whose behavior is determined only by its LambdaForm.
@author jrose
"
      classrelation 3210626 // <generalisation>
	relation 3210626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3210626 // <generalisation>
	  b parent class_ref 945154 // BoundMethodHandle
      end

      operation 7297666 "SimpleMethodHandle"
	private explicit_return_type ""
	nparams 2
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7297794 "make"
	class_operation package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param inout name "type" type class_ref 944258 // MethodType
	  param inout name "form" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      classrelation 3210754 // SPECIES_DATA (<unidirectional association>)
	relation 3210754 --->
	  a role_name "SPECIES_DATA" init_value " SpeciesData.EMPTY" class_relation const_relation package
	    comment "non-public
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3210754 // SPECIES_DATA (<unidirectional association>)
	  b parent class_ref 946050 // SpeciesData
      end

      operation 7297922 "speciesData"
	public return_type class_ref 946050 // SpeciesData
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "non-public"
      end

      operation 7298050 "copyWith"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 2
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "non-public"
      end

      operation 7298178 "internalProperties"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7298306 "fieldCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "non-public"
      end

      operation 7298434 "copyWithExtendL"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param inout name "narg" type class_ref 129538 // Object
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "non-public"
      end

      operation 7298562 "copyWithExtendI"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param in name "narg" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "non-public"
      end

      operation 7298690 "copyWithExtendJ"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param in name "narg" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "non-public"
      end

      operation 7298818 "copyWithExtendF"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param in name "narg" explicit_type "float"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "non-public"
      end

      operation 7298946 "copyWithExtendD"
	package return_type class_ref 945154 // BoundMethodHandle
	nparams 3
	  param inout name "mt" type class_ref 944258 // MethodType
	  param inout name "lf" type class_ref 945410 // LambdaForm
	  param in name "narg" explicit_type "double"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "non-public"
      end
    end

    class 953090 "Stable"
      visibility package stereotype "@interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}@interface ${name}${extends} {
${members}}
"
      java_annotation "@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A field may be annotated as stable if all of its component variables
changes value at most once.
A field's value counts as its component value.
If the field is typed as an array, then all the non-null components
of the array, of depth up to the rank of the field's array type,
also count as component values.
By extension, any variable (either array or field) which has annotated
as stable is called a stable variable, and its non-null or non-zero
value is called a stable value.
<p>
Since all fields begin with a default value of null for references
(resp., zero for primitives), it follows that this annotation indicates
that the first non-null (resp., non-zero) value stored in the field
will never be changed.
<p>
If the field is not of an array type, there are no array elements,
then the value indicated as stable is simply the value of the field.
If the dynamic type of the field value is an array but the static type
is not, the components of the array are <em>not</em> regarded as stable.
<p>
If the field is an array type, then both the field value and
all the components of the field value (if the field value is non-null)
are indicated to be stable.
If the field type is an array type with rank {@code N > 1},
then each component of the field value (if the field value is non-null),
is regarded as a stable array of rank {@code N-1}.
<p>
Fields which are declared {@code final} may also be annotated as stable.
Since final fields already behave as stable values, such an annotation
indicates no additional information, unless the type of the field is
an array type.
<p>
It is (currently) undefined what happens if a field annotated as stable
is given a third value.  In practice, if the JVM relies on this annotation
to promote a field reference to a constant, it may be that the Java memory
model would appear to be broken, if such a constant (the second value of the field)
is used as the value of the field even after the field value has changed.

 package-private "
    end

    class 953218 "SwitchPoint"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>
A {@code SwitchPoint} is an object which can publish state transitions to other threads.
A switch point is initially in the <em>valid</em> state, but may at any time be
changed to the <em>invalid</em> state.  Invalidation cannot be reversed.
A switch point can combine a <em>guarded pair</em> of method handles into a
<em>guarded delegator</em>.
The guarded delegator is a method handle which delegates to one of the old method handles.
The state of the switch point determines which of the two gets the delegation.
<p>
A single switch point may be used to control any number of method handles.
(Indirectly, therefore, it can control any number of call sites.)
This is done by using the single switch point as a factory for combining
any number of guarded method handle pairs into guarded delegators.
<p>
When a guarded delegator is created from a guarded pair, the pair
is wrapped in a new method handle {@code M},
which is permanently associated with the switch point that created it.
Each pair consists of a target {@code T} and a fallback {@code F}.
While the switch point is valid, invocations to {@code M} are delegated to {@code T}.
After it is invalidated, invocations are delegated to {@code F}.
<p>
Invalidation is global and immediate, as if the switch point contained a
volatile boolean variable consulted on every call to {@code M}.
The invalidation is also permanent, which means the switch point
can change state only once.
The switch point will always delegate to {@code F} after being invalidated.
At that point {@code guardWithTest} may ignore {@code T} and return {@code F}.
<p>
Here is an example of a switch point in action:
<pre>{@code
MethodHandle MH_strcat = MethodHandles.lookup()
    .findVirtual(String.class, \"concat\", MethodType.methodType(String.class, String.class));
SwitchPoint spt = new SwitchPoint();
assert(!spt.hasBeenInvalidated());
// the following steps may be repeated to re-use the same switch point:
MethodHandle worker1 = MH_strcat;
MethodHandle worker2 = MethodHandles.permuteArguments(MH_strcat, MH_strcat.type(), 1, 0);
MethodHandle worker = spt.guardWithTest(worker1, worker2);
assertEquals(\"method\", (String) worker.invokeExact(\"met\", \"hod\"));
SwitchPoint.invalidateAll(new SwitchPoint[]{ spt });
assert(spt.hasBeenInvalidated());
assertEquals(\"hodmet\", (String) worker.invokeExact(\"met\", \"hod\"));
}</pre>
<p style=\"font-size:smaller;\">
<em>Discussion:</em>
Switch points are useful without subclassing.  They may also be subclassed.
This may be useful in order to associate application-specific invalidation logic
with the switch point.
Notice that there is no permanent association between a switch point and
the method handles it produces and consumes.
The garbage collector may collect method handles produced or consumed
by a switch point independently of the lifetime of the switch point itself.
<p style=\"font-size:smaller;\">
<em>Implementation Note:</em>
A switch point behaves as if implemented on top of {@link MutableCallSite},
approximately as follows:
<pre>{@code
public class SwitchPoint {
    private static final MethodHandle
        K_true  = MethodHandles.constant(boolean.class, true),
        K_false = MethodHandles.constant(boolean.class, false);
    private final MutableCallSite mcs;
    private final MethodHandle mcsInvoker;
    public SwitchPoint() {
        this.mcs = new MutableCallSite(K_true);
        this.mcsInvoker = mcs.dynamicInvoker();
    }
    public MethodHandle guardWithTest(
            MethodHandle target, MethodHandle fallback) {
        // Note:  mcsInvoker is of type ()boolean.
        // Target and fallback may take any arguments, but must have the same type.
        return MethodHandles.guardWithTest(this.mcsInvoker, target, fallback);
    }
    public static void invalidateAll(SwitchPoint[] spts) {
        List<MutableCallSite> mcss = new ArrayList<>();
        for (SwitchPoint spt : spts)  mcss.add(spt.mcs);
        for (MutableCallSite mcs : mcss)  mcs.setTarget(K_false);
        MutableCallSite.syncAll(mcss.toArray(new MutableCallSite[0]));
    }
}
}</pre>
@author Remi Forax, JSR 292 EG
"
      classrelation 3210882 // K_true (<unidirectional association>)
	relation 3210882 --->
	  a role_name "K_true" init_value " MethodHandles.constant(boolean.class, true)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3210882 // K_true (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      classrelation 3211010 // K_false (<unidirectional association>)
	relation 3211010 --->
	  a role_name "K_false" init_value " MethodHandles.constant(boolean.class, false)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3211010 // K_false (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      classrelation 3211138 // mcs (<unidirectional association>)
	relation 3211138 --->
	  a role_name "mcs" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3211138 // mcs (<unidirectional association>)
	  b parent class_ref 952706 // MutableCallSite
      end

      classrelation 3211266 // mcsInvoker (<unidirectional association>)
	relation 3211266 --->
	  a role_name "mcsInvoker" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3211266 // mcsInvoker (<unidirectional association>)
	  b parent class_ref 944386 // MethodHandle
      end

      operation 7299074 "SwitchPoint"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new switch point.
"
      end

      operation 7299202 "hasBeenInvalidated"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this switch point has been invalidated yet.

<p style=\"font-size:smaller;\">
<em>Discussion:</em>
Because of the one-way nature of invalidation, once a switch point begins
to return true for {@code hasBeenInvalidated},
it will always do so in the future.
On the other hand, a valid switch point visible to other threads may
be invalidated at any moment, due to a request by another thread.
<p style=\"font-size:smaller;\">
Since invalidation is a global and immediate operation,
the execution of this query, on a valid switchpoint,
must be internally sequenced with any
other threads that could cause invalidation.
This query may therefore be expensive.
The recommended way to build a boolean-valued method handle
which queries the invalidation state of a switch point {@code s} is
to call {@code s.guardWithTest} on
{@link MethodHandles#constant constant} true and false method handles.

@return true if this switch point has been invalidated
"
      end

      operation 7299330 "guardWithTest"
	public return_type class_ref 944386 // MethodHandle
	nparams 2
	  param inout name "target" type class_ref 944386 // MethodHandle
	  param inout name "fallback" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a method handle which always delegates either to the target or the fallback.
The method handle will delegate to the target exactly as long as the switch point is valid.
After that, it will permanently delegate to the fallback.
<p>
The target and fallback must be of exactly the same method type,
and the resulting combined method handle will also be of this type.

@param target the method handle selected by the switch point as long as it is valid
@param fallback the method handle selected by the switch point after it is invalidated
@return a combined method handle which always calls either the target or fallback
@throws NullPointerException if either argument is null
@throws IllegalArgumentException if the two method types do not match
@see MethodHandles#guardWithTest
"
      end

      operation 7299458 "invalidateAll"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "switchPoints" type class_ref 953218 // SwitchPoint
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets all of the given switch points into the invalid state.
After this call executes, no thread will observe any of the
switch points to be in a valid state.
<p>
This operation is likely to be expensive and should be used sparingly.
If possible, it should be buffered for batch processing on sets of switch points.
<p>
If {@code switchPoints} contains a null element,
a {@code NullPointerException} will be raised.
In this case, some non-null elements in the array may be
processed before the method returns abnormally.
Which elements these are (if any) is implementation-dependent.

<p style=\"font-size:smaller;\">
<em>Discussion:</em>
For performance reasons, {@code invalidateAll} is not a virtual method
on a single switch point, but rather applies to a set of switch points.
Some implementations may incur a large fixed overhead cost
for processing one or more invalidation operations,
but a small incremental cost for each additional invalidation.
In any case, this operation is likely to be costly, since
other threads may have to be somehow interrupted
in order to make them notice the updated switch point state.
However, it may be observed that a single call to invalidate
several switch points has the same formal effect as many calls,
each on just one of the switch points.

<p style=\"font-size:smaller;\">
<em>Implementation Note:</em>
Simple implementations of {@code SwitchPoint} may use
a private {@link MutableCallSite} to publish the state of a switch point.
In such an implementation, the {@code invalidateAll} method can
simply change the call site's target, and issue one call to
{@linkplain MutableCallSite#syncAll synchronize} all the
private call sites.

@param switchPoints an array of call sites to be synchronized
@throws NullPointerException if the {@code switchPoints} array reference is null
                             or the array contains a null
"
      end
    end

    class 953346 "VolatileCallSite"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code VolatileCallSite} is a {@link CallSite} whose target acts like a volatile variable.
An {@code invokedynamic} instruction linked to a {@code VolatileCallSite} sees updates
to its call site target immediately, even if the update occurs in another thread.
There may be a performance penalty for such tight coupling between threads.
<p>
Unlike {@code MutableCallSite}, there is no
{@linkplain MutableCallSite#syncAll syncAll operation} on volatile
call sites, since every write to a volatile variable is implicitly
synchronized with reader threads.
<p>
In other respects, a {@code VolatileCallSite} is interchangeable
with {@code MutableCallSite}.
@see MutableCallSite
@author John Rose, JSR 292 EG
"
      classrelation 3211394 // <generalisation>
	relation 3211394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3211394 // <generalisation>
	  b parent class_ref 945026 // CallSite
      end

      operation 7299586 "VolatileCallSite"
	public explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 944258 // MethodType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a call site with a volatile binding to its target.
The initial target is set to a method handle
of the given type which will throw an {@code IllegalStateException} if called.
@param type the method type that this call site will have
@throws NullPointerException if the proposed type is null
"
      end

      operation 7299714 "VolatileCallSite"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a call site with a volatile binding to its target.
The target is set to the given value.
@param target the method handle that will be the initial target of the call site
@throws NullPointerException if the proposed target is null
"
      end

      operation 7299842 "getTarget"
	public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the target method of the call site, which behaves
like a {@code volatile} field of the {@code VolatileCallSite}.
<p>
The interactions of {@code getTarget} with memory are the same
as of a read from a {@code volatile} field.
<p>
In particular, the current thread is required to issue a fresh
read of the target from memory, and must not fail to see
a recent update to the target by another thread.

@return the linkage state of this call site, a method handle which can change over time
@see #setTarget
"
      end

      operation 7299970 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newTarget" type class_ref 944386 // MethodHandle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Updates the target method of this call site, as a volatile variable.
The type of the new target must agree with the type of the old target.
<p>
The interactions with memory are the same as of a write to a volatile field.
In particular, any threads is guaranteed to see the updated target
the next time it calls {@code getTarget}.
@param newTarget the new target
@throws NullPointerException if the proposed new target is null
@throws WrongMethodTypeException if the proposed new target
        has a method type that differs from the previous target
@see #getTarget
"
      end

      operation 7300098 "dynamicInvoker"
	public return_type class_ref 944386 // MethodHandle
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end
    end
  end

  deploymentview 167170 "invoke"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 688770 "AbstractValidatingLambdaMetafactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.invoke.util.Wrapper;
import static sun.invoke.util.Wrapper.forPrimitiveType;
import static sun.invoke.util.Wrapper.forWrapperType;
import static sun.invoke.util.Wrapper.isWrapperType;
${definition}"
      associated_elems
	class_ref 944130 // AbstractValidatingLambdaMetafactory
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 688898 "MethodHandle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 944386 // MethodHandle
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 689026 "BoundMethodHandle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.invoke.LambdaForm.NamedFunction;
import java.lang.invoke.MethodHandles.Lookup;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.function.Function;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentHashMap;
import jdk.internal.org.objectweb.asm.FieldVisitor;
import sun.invoke.util.ValueConversions;
import sun.invoke.util.Wrapper;
import jdk.internal.org.objectweb.asm.ClassWriter;
import jdk.internal.org.objectweb.asm.MethodVisitor;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 945154 // BoundMethodHandle
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 689154 "CallSite"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.invoke.empty.Empty;
import static java.lang.invoke.MethodHandleStatics.*;
import static java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP;
${definition}"
      associated_elems
	class_ref 945026 // CallSite
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 689282 "ConstantCallSite"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 946690 // ConstantCallSite
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 689410 "DelegatingMethodHandle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import static java.lang.invoke.LambdaForm.*;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 946818 // DelegatingMethodHandle
      end
      comment "Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 689538 "DirectMethodHandle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
import java.lang.reflect.Method;
import java.util.Arrays;
import sun.invoke.util.VerifyAccess;
import java.lang.ref.WeakReference;
import java.lang.reflect.Field;
import sun.invoke.util.ValueConversions;
import sun.invoke.util.VerifyType;
import sun.invoke.util.Wrapper;
import static java.lang.invoke.MethodHandleNatives.Constants.*;
import static java.lang.invoke.LambdaForm.*;
import static java.lang.invoke.MethodTypeForm.*;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 946946 // DirectMethodHandle
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 689666 "DontInline"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
${definition}"
      associated_elems
	class_ref 947970 // DontInline
      end
      comment "Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 689794 "ForceInline"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
${definition}"
      associated_elems
	class_ref 948098 // ForceInline
      end
      comment "Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 689922 "MethodHandleInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.*;
import java.util.*;
import java.lang.invoke.MethodHandleNatives.Constants;
import java.lang.invoke.MethodHandles.Lookup;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 944514 // MethodHandleInfo
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 690050 "InfoFromMemberName"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.*;
import java.lang.reflect.*;
import java.lang.invoke.MethodHandleNatives.Constants;
import java.lang.invoke.MethodHandles.Lookup;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 948226 // InfoFromMemberName
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 690178 "InjectedProfile"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
${definition}"
      associated_elems
	class_ref 948354 // InjectedProfile
      end
      comment "Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 690306 "TypeConvertingMethodAdapter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import jdk.internal.org.objectweb.asm.MethodVisitor;
import jdk.internal.org.objectweb.asm.Opcodes;
import jdk.internal.org.objectweb.asm.Type;
import sun.invoke.util.BytecodeDescriptor;
import sun.invoke.util.Wrapper;
import static sun.invoke.util.Wrapper.*;
${definition}"
      associated_elems
	class_ref 948866 // TypeConvertingMethodAdapter
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 690434 "InnerClassLambdaMetafactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import jdk.internal.org.objectweb.asm.*;
import sun.invoke.util.BytecodeDescriptor;
import sun.misc.Unsafe;
import sun.security.action.GetPropertyAction;
import java.io.FilePermission;
import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.LinkedHashSet;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.PropertyPermission;
import java.util.Set;
import static sun.invoke.util.Wrapper.*;
${definition}"
      associated_elems
	class_ref 948482 // InnerClassLambdaMetafactory
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 690562 "InvokeDynamic"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 949122 // InvokeDynamic
      end
      comment "Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 690690 "InvokerBytecodeGenerator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.*;
import java.lang.reflect.Modifier;
import jdk.internal.org.objectweb.asm.*;
import sun.invoke.util.VerifyAccess;
import sun.invoke.util.VerifyType;
import sun.invoke.util.Wrapper;
import sun.reflect.misc.ReflectUtil;
import static java.lang.invoke.LambdaForm.*;
import static java.lang.invoke.LambdaForm.BasicType.*;
import static java.lang.invoke.MethodHandleStatics.*;
import static java.lang.invoke.MethodHandleNatives.Constants.*;
${definition}"
      associated_elems
	class_ref 949250 // InvokerBytecodeGenerator
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 690818 "Invokers"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Array;
import java.util.Arrays;
import static java.lang.invoke.MethodHandleStatics.*;
import static java.lang.invoke.MethodHandleNatives.Constants.*;
import static java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP;
import static java.lang.invoke.LambdaForm.*;
${definition}"
      associated_elems
	class_ref 949634 // Invokers
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 690946 "LambdaConversionException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 944898 // LambdaConversionException
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 691074 "LambdaForm"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Arrays;
import java.util.HashMap;
import sun.invoke.util.Wrapper;
import java.lang.reflect.Field;
import static java.lang.invoke.LambdaForm.BasicType.*;
import static java.lang.invoke.MethodHandleStatics.*;
import static java.lang.invoke.MethodHandleNatives.Constants.*;
${definition}"
      associated_elems
	class_ref 945410 // LambdaForm
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 691202 "LambdaFormBuffer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Arrays;
import static java.lang.invoke.LambdaForm.*;
import static java.lang.invoke.LambdaForm.BasicType.*;
${definition}"
      associated_elems
	class_ref 950402 // LambdaFormBuffer
      end
      comment "Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 691330 "LambdaFormEditor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.SoftReference;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.ConcurrentHashMap;
import sun.invoke.util.Wrapper;
import static java.lang.invoke.LambdaForm.*;
import static java.lang.invoke.LambdaForm.BasicType.*;
import static java.lang.invoke.MethodHandleImpl.Intrinsic;
${definition}"
      associated_elems
	class_ref 945922 // LambdaFormEditor
      end
      comment "Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 691458 "LambdaMetafactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Arrays;
${definition}"
      associated_elems
	class_ref 950786 // LambdaMetafactory
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 691714 "MemberName"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.invoke.util.BytecodeDescriptor;
import sun.invoke.util.VerifyAccess;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Member;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 945538 // MemberName
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 691842 "MethodHandleImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.function.Function;
import sun.invoke.empty.Empty;
import sun.invoke.util.ValueConversions;
import sun.invoke.util.VerifyType;
import sun.invoke.util.Wrapper;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
import static java.lang.invoke.LambdaForm.*;
import static java.lang.invoke.MethodHandleStatics.*;
import static java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP;
${definition}"
      associated_elems
	class_ref 945666 // MethodHandleImpl
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 691970 "MethodHandleNatives"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.invoke.MethodHandles.Lookup;
import java.lang.reflect.Field;
import static java.lang.invoke.MethodHandleNatives.Constants.*;
import static java.lang.invoke.MethodHandleStatics.*;
import static java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP;
${definition}"
      associated_elems
	class_ref 951938 // MethodHandleNatives
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 692098 "MethodHandleProxies"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.invoke.WrapperInstance;
import java.util.ArrayList;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
import sun.reflect.misc.ReflectUtil;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 952194 // MethodHandleProxies
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 692226 "MethodHandles"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.*;
import java.util.BitSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import sun.invoke.util.ValueConversions;
import sun.invoke.util.VerifyAccess;
import sun.invoke.util.Wrapper;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
import sun.reflect.misc.ReflectUtil;
import sun.security.util.SecurityConstants;
import java.lang.invoke.LambdaForm.BasicType;
import java.util.concurrent.ConcurrentHashMap;
import static java.lang.invoke.LambdaForm.BasicType.*;
import static java.lang.invoke.MethodHandleStatics.*;
import static java.lang.invoke.MethodHandleImpl.Intrinsic;
import static java.lang.invoke.MethodHandleNatives.Constants.*;
${definition}"
      associated_elems
	class_ref 944642 // MethodHandles
      end
      comment "Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 692354 "MethodHandleStatics"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.misc.Unsafe;
${definition}"
      associated_elems
	class_ref 952322 // MethodHandleStatics
      end
      comment "Copyright (c) 2011, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 692482 "MethodType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.invoke.util.Wrapper;
import java.lang.ref.WeakReference;
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentHashMap;
import sun.invoke.util.BytecodeDescriptor;
import sun.invoke.util.VerifyType;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 944258 // MethodType
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 692610 "MethodTypeForm"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.invoke.util.Wrapper;
import java.lang.ref.SoftReference;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 949506 // MethodTypeForm
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 692738 "MutableCallSite"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.AtomicInteger;
${definition}"
      associated_elems
	class_ref 952706 // MutableCallSite
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 692866 "ProxyClassesDumper"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.util.logging.PlatformLogger;
import java.io.FilePermission;
import java.nio.file.Files;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicBoolean;
${definition}"
      associated_elems
	class_ref 948610 // ProxyClassesDumper
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 692994 "SerializedLambda"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.lang.reflect.Method;
import java.security.AccessController;
import java.security.PrivilegedActionException;
import java.security.PrivilegedExceptionAction;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 952834 // SerializedLambda
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 693122 "SimpleMethodHandle"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import static java.lang.invoke.LambdaForm.BasicType.*;
import static java.lang.invoke.MethodHandleStatics.*;
${definition}"
      associated_elems
	class_ref 952962 // SimpleMethodHandle
      end
      comment "Copyright (c) 2008, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 693250 "Stable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
${definition}"
      associated_elems
	class_ref 953090 // Stable
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 693378 "SwitchPoint"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 953218 // SwitchPoint
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 693506 "VolatileCallSite"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 953346 // VolatileCallSite
      end
      comment "Copyright (c) 2010, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 693634 "WrongMethodTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 946562 // WrongMethodTypeException
      end
      comment "Copyright (c) 2008, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
