class DirectFloatBufferU
!!!7702146.java!!!	attachment() : Object
        return att;
!!!7702274.java!!!	cleaner() : Cleaner
 return null;
!!!7702402.java!!!	DirectFloatBufferU(inout db : DirectBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)

        super(mark, pos, lim, cap);
        address = db.address() + off;



        att = db;



!!!7702530.java!!!	slice() : FloatBuffer
        int pos = this.position();
        int lim = this.limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);
        int off = (pos << 2);
        assert (off >= 0);
        return new DirectFloatBufferU(this, -1, 0, rem, rem, off);
!!!7702658.java!!!	duplicate() : FloatBuffer
        return new DirectFloatBufferU(this,
                                              this.markValue(),
                                              this.position(),
                                              this.limit(),
                                              this.capacity(),
                                              0);
!!!7702786.java!!!	asReadOnlyBuffer() : FloatBuffer

        return new DirectFloatBufferRU(this,
                                           this.markValue(),
                                           this.position(),
                                           this.limit(),
                                           this.capacity(),
                                           0);



!!!7702914.java!!!	address() : long
        return address;
!!!7703042.java!!!	ix(in i : int) : long
        return address + ((long)i << 2);
!!!7703170.java!!!	get() : float
        return ((unsafe.getFloat(ix(nextGetIndex()))));
!!!7703298.java!!!	get(in i : int) : float
        return ((unsafe.getFloat(ix(checkIndex(i)))));
!!!7703426.java!!!	get(inout dst : float [[]], in offset : int, in length : int) : FloatBuffer

        if (((long)length << 2) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD) {
            checkBounds(offset, length, dst.length);
            int pos = position();
            int lim = limit();
            assert (pos <= lim);
            int rem = (pos <= lim ? lim - pos : 0);
            if (length > rem)
                throw new BufferUnderflowException();


            if (order() != ByteOrder.nativeOrder())
                Bits.copyToIntArray(ix(pos), dst,
                                          (long)offset << 2,
                                          (long)length << 2);
            else

                Bits.copyToArray(ix(pos), dst, arrayBaseOffset,
                                 (long)offset << 2,
                                 (long)length << 2);
            position(pos + length);
        } else {
            super.get(dst, offset, length);
        }
        return this;



!!!7703554.java!!!	put(in x : float) : FloatBuffer

        unsafe.putFloat(ix(nextPutIndex()), ((x)));
        return this;



!!!7703682.java!!!	put(in i : int, in x : float) : FloatBuffer

        unsafe.putFloat(ix(checkIndex(i)), ((x)));
        return this;



!!!7703810.java!!!	put(inout src : FloatBuffer) : FloatBuffer

        if (src instanceof DirectFloatBufferU) {
            if (src == this)
                throw new IllegalArgumentException();
            DirectFloatBufferU sb = (DirectFloatBufferU)src;

            int spos = sb.position();
            int slim = sb.limit();
            assert (spos <= slim);
            int srem = (spos <= slim ? slim - spos : 0);

            int pos = position();
            int lim = limit();
            assert (pos <= lim);
            int rem = (pos <= lim ? lim - pos : 0);

            if (srem > rem)
                throw new BufferOverflowException();
            unsafe.copyMemory(sb.ix(spos), ix(pos), (long)srem << 2);
            sb.position(spos + srem);
            position(pos + srem);
        } else if (src.hb != null) {

            int spos = src.position();
            int slim = src.limit();
            assert (spos <= slim);
            int srem = (spos <= slim ? slim - spos : 0);

            put(src.hb, src.offset + spos, srem);
            src.position(spos + srem);

        } else {
            super.put(src);
        }
        return this;



!!!7703938.java!!!	put(inout src : float [[]], in offset : int, in length : int) : FloatBuffer

        if (((long)length << 2) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD) {
            checkBounds(offset, length, src.length);
            int pos = position();
            int lim = limit();
            assert (pos <= lim);
            int rem = (pos <= lim ? lim - pos : 0);
            if (length > rem)
                throw new BufferOverflowException();


            if (order() != ByteOrder.nativeOrder())
                Bits.copyFromIntArray(src,
                                            (long)offset << 2,
                                            ix(pos),
                                            (long)length << 2);
            else

                Bits.copyFromArray(src, arrayBaseOffset,
                                   (long)offset << 2,
                                   ix(pos),
                                   (long)length << 2);
            position(pos + length);
        } else {
            super.put(src, offset, length);
        }
        return this;



!!!7704066.java!!!	compact() : FloatBuffer

        int pos = position();
        int lim = limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);

        unsafe.copyMemory(ix(pos), ix(0), (long)rem << 2);
        position(rem);
        limit(capacity());
        discardMark();
        return this;



!!!7704194.java!!!	isDirect() : boolean
        return true;
!!!7704322.java!!!	isReadOnly() : boolean
        return false;
!!!7704450.java!!!	order() : ByteOrder





        return ((ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN)
                ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);

