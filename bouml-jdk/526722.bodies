class SnmpAdaptorServer
!!!3196802.java!!!	SnmpAdaptorServer()
        this(true, null, com.sun.jmx.snmp.ServiceName.SNMP_ADAPTOR_PORT,
             null) ;
!!!3196930.java!!!	SnmpAdaptorServer(in port : int)
        this(true, null, port, null) ;
!!!3197058.java!!!	SnmpAdaptorServer(inout acl : InetAddressAcl)
        this(false, acl, com.sun.jmx.snmp.ServiceName.SNMP_ADAPTOR_PORT,
             null) ;
!!!3197186.java!!!	SnmpAdaptorServer(inout addr : InetAddress)
        this(true, null, com.sun.jmx.snmp.ServiceName.SNMP_ADAPTOR_PORT,
             addr) ;
!!!3197314.java!!!	SnmpAdaptorServer(inout acl : InetAddressAcl, in port : int)
        this(false, acl, port, null) ;
!!!3197442.java!!!	SnmpAdaptorServer(in port : int, inout addr : InetAddress)
        this(true, null, port, addr) ;
!!!3197570.java!!!	SnmpAdaptorServer(inout acl : InetAddressAcl, inout addr : InetAddress)
        this(false, acl, com.sun.jmx.snmp.ServiceName.SNMP_ADAPTOR_PORT,
             addr) ;
!!!3197698.java!!!	SnmpAdaptorServer(inout acl : InetAddressAcl, in port : int, inout addr : InetAddress)
        this(false, acl, port, addr);
!!!3197826.java!!!	SnmpAdaptorServer(inout useAcl : boolean, in port : int, inout addr : InetAddress)
        this(useAcl,null,port,addr);
!!!3197954.java!!!	SnmpAdaptorServer(inout forceAcl : boolean, inout acl : InetAddressAcl, in port : int, inout addr : InetAddress)
        super(CommunicatorServer.SNMP_TYPE) ;


        // Initialize the ACL implementation.
        //
        if (acl == null && forceAcl) {
            try {
                acl = new SnmpAcl("SNMP protocol adaptor IP ACL");
            } catch (UnknownHostException e) {
                if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                        "constructor", "UnknowHostException when creating ACL",e);
                }
            }
        } else {
            this.useAcl = (acl!=null) || forceAcl;
        }

        init(acl, port, addr) ;
!!!3198082.java!!!	getServedClientCount() : int
        return super.getServedClientCount();
!!!3198210.java!!!	getActiveClientCount() : int
        return super.getActiveClientCount();
!!!3198338.java!!!	getMaxActiveClientCount() : int
        return super.getMaxActiveClientCount();
!!!3198466.java!!!	setMaxActiveClientCount(in c : int) : void
        super.setMaxActiveClientCount(c);
!!!3198594.java!!!	getInetAddressAcl() : InetAddressAcl
        return ipacl;
!!!3198722.java!!!	getTrapPort() : Integer
        return new Integer(trapPort) ;
!!!3198850.java!!!	setTrapPort(inout port : Integer) : void
        setTrapPort(port.intValue());
!!!3198978.java!!!	setTrapPort(in port : int) : void
        int val= port ;
        if (val < 0) throw new
            IllegalArgumentException("Trap port cannot be a negative value");
        trapPort= val ;
!!!3199106.java!!!	getInformPort() : int
        return informPort;
!!!3199234.java!!!	setInformPort(in port : int) : void
        if (port < 0)
            throw new IllegalArgumentException("Inform request port "+
                                               "cannot be a negative value");
        informPort= port ;
!!!3199362.java!!!	getProtocol() : String
        return "snmp";
!!!3199490.java!!!	getBufferSize() : Integer
        return new Integer(bufferSize) ;
!!!3199618.java!!!	setBufferSize(inout s : Integer) : void
        if ((state == ONLINE) || (state == STARTING)) {
            throw new IllegalStateException("Stop server before carrying out"+
                                            " this operation");
        }
        bufferSize = s.intValue() ;
!!!3199746.java!!!	getMaxTries() : int
        return maxTries;
!!!3199874.java!!!	setMaxTries(in newMaxTries : int) : void
        if (newMaxTries < 0)
            throw new IllegalArgumentException();
        maxTries = newMaxTries;
!!!3200002.java!!!	getTimeout() : int
        return timeout;
!!!3200130.java!!!	setTimeout(in newTimeout : int) : void
        if (newTimeout < 0)
            throw new IllegalArgumentException();
        timeout= newTimeout;
!!!3200258.java!!!	getPduFactory() : SnmpPduFactory
        return pduFactory ;
!!!3200386.java!!!	setPduFactory(inout factory : SnmpPduFactory) : void
        if (factory == null)
            pduFactory = new SnmpPduFactoryBER() ;
        else
            pduFactory = factory ;
!!!3200514.java!!!	setUserDataFactory(inout factory : SnmpUserDataFactory) : void
        userDataFactory = factory ;
!!!3200642.java!!!	getUserDataFactory() : SnmpUserDataFactory
        return userDataFactory;
!!!3200770.java!!!	getAuthTrapEnabled() : boolean
        return authTrapEnabled ;
!!!3200898.java!!!	setAuthTrapEnabled(inout enabled : boolean) : void
        authTrapEnabled = enabled ;
!!!3201026.java!!!	getAuthRespEnabled() : boolean
        return authRespEnabled ;
!!!3201154.java!!!	setAuthRespEnabled(inout enabled : boolean) : void
        authRespEnabled = enabled ;
!!!3201282.java!!!	getEnterpriseOid() : String
        return enterpriseOid.toString() ;
!!!3201410.java!!!	setEnterpriseOid(inout oid : String) : void
        enterpriseOid = new SnmpOid(oid) ;
!!!3201538.java!!!	getMibs() : String
        String[] result = new String[mibs.size()] ;
        int i = 0 ;
        for (Enumeration<SnmpMibAgent> e = mibs.elements() ; e.hasMoreElements() ;) {
            SnmpMibAgent mib = e.nextElement() ;
            result[i++] = mib.getMibName();
        }
        return result ;
!!!3201666.java!!!	getSnmpOutTraps() : Long
        return new Long(snmpOutTraps);
!!!3201794.java!!!	getSnmpOutGetResponses() : Long
        return new Long(snmpOutGetResponses);
!!!3201922.java!!!	getSnmpOutGenErrs() : Long
        return new Long(snmpOutGenErrs);
!!!3202050.java!!!	getSnmpOutBadValues() : Long
        return new Long(snmpOutBadValues);
!!!3202178.java!!!	getSnmpOutNoSuchNames() : Long
        return new Long(snmpOutNoSuchNames);
!!!3202306.java!!!	getSnmpOutTooBigs() : Long
        return new Long(snmpOutTooBigs);
!!!3202434.java!!!	getSnmpInASNParseErrs() : Long
        return new Long(snmpInASNParseErrs);
!!!3202562.java!!!	getSnmpInBadCommunityUses() : Long
        return new Long(snmpInBadCommunityUses);
!!!3202690.java!!!	getSnmpInBadCommunityNames() : Long
        return new Long(snmpInBadCommunityNames);
!!!3202818.java!!!	getSnmpInBadVersions() : Long
        return new Long(snmpInBadVersions);
!!!3202946.java!!!	getSnmpOutPkts() : Long
        return new Long(snmpOutPkts);
!!!3203074.java!!!	getSnmpInPkts() : Long
        return new Long(snmpInPkts);
!!!3203202.java!!!	getSnmpInGetRequests() : Long
        return new Long(snmpInGetRequests);
!!!3203330.java!!!	getSnmpInGetNexts() : Long
        return new Long(snmpInGetNexts);
!!!3203458.java!!!	getSnmpInSetRequests() : Long
        return new Long(snmpInSetRequests);
!!!3203586.java!!!	getSnmpInTotalSetVars() : Long
        return new Long(snmpInTotalSetVars);
!!!3203714.java!!!	getSnmpInTotalReqVars() : Long
        return new Long(snmpInTotalReqVars);
!!!3203842.java!!!	getSnmpSilentDrops() : Long
        return new Long(snmpSilentDrops);
!!!3203970.java!!!	getSnmpProxyDrops() : Long
        return new Long(0);
!!!3204098.java!!!	preRegister(inout server : MBeanServer, inout name : ObjectName) : ObjectName

        if (name == null) {
            name = new ObjectName(server.getDefaultDomain() + ":" +
                             com.sun.jmx.snmp.ServiceName.SNMP_ADAPTOR_SERVER);
        }
        return (super.preRegister(server, name));
!!!3204226.java!!!	postRegister(inout registrationDone : Boolean) : void
        super.postRegister(registrationDone);
!!!3204354.java!!!	preDeregister() : void
        super.preDeregister();
!!!3204482.java!!!	postDeregister() : void
        super.postDeregister();
!!!3204610.java!!!	addMib(inout mib : SnmpMibAgent) : SnmpMibHandler
        if (mib == null) {
            throw new IllegalArgumentException() ;
        }

        if(!mibs.contains(mib))
            mibs.addElement(mib);

        root.register(mib);

        return this;
!!!3204738.java!!!	addMib(inout mib : SnmpMibAgent, inout oids : SnmpOid [[]]) : SnmpMibHandler
        if (mib == null) {
            throw new IllegalArgumentException() ;
        }

        //If null oid array, just add it to the mib.
        if(oids == null)
            return addMib(mib);

        if(!mibs.contains(mib))
            mibs.addElement(mib);

        for (int i = 0; i < oids.length; i++) {
            root.register(mib, oids[i].longValue());
        }
        return this;
!!!3204866.java!!!	addMib(inout mib : SnmpMibAgent, inout contextName : String) : SnmpMibHandler
        return addMib(mib);
!!!3204994.java!!!	addMib(inout mib : SnmpMibAgent, inout contextName : String, inout oids : SnmpOid [[]]) : SnmpMibHandler

        return addMib(mib, oids);
!!!3205122.java!!!	removeMib(inout mib : SnmpMibAgent, inout contextName : String) : boolean
        return removeMib(mib);
!!!3205250.java!!!	removeMib(inout mib : SnmpMibAgent) : boolean
        root.unregister(mib);
        return (mibs.removeElement(mib)) ;
!!!3205378.java!!!	removeMib(inout mib : SnmpMibAgent, inout oids : SnmpOid [[]]) : boolean
        root.unregister(mib, oids);
        return (mibs.removeElement(mib)) ;
!!!3205506.java!!!	removeMib(inout mib : SnmpMibAgent, inout contextName : String, inout oids : SnmpOid [[]]) : boolean
        return removeMib(mib, oids);
!!!3205634.java!!!	doBind() : void

        try {
            synchronized (this) {
                socket = new DatagramSocket(port, address) ;
            }
            dbgTag = makeDebugTag();
        } catch (SocketException e) {
            if (e.getMessage().equals(InterruptSysCallMsg))
                throw new InterruptedException(e.toString()) ;
            else {
                if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                        "doBind", "cannot bind on port " + port);
                }
                throw new CommunicationException(e) ;
            }
        }
!!!3205762.java!!!	getPort() : int
        synchronized (this) {
            if (socket != null) return socket.getLocalPort();
        }
        return super.getPort();
!!!3205890.java!!!	doUnbind() : void
        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "doUnbind","Finally close the socket");
        }
        synchronized (this) {
            if (socket != null) {
                socket.close() ;
                socket = null ;
                // Important to inform finalize() that the socket is closed...
            }
        }
        closeTrapSocketIfNeeded() ;
        closeInformSocketIfNeeded() ;
!!!3206018.java!!!	createSnmpRequestHandler(inout server : SnmpAdaptorServer, in id : int, inout s : DatagramSocket, inout p : DatagramPacket, inout tree : SnmpMibTree, inout m : Vector, inout a : InetAddressAcl, inout factory : SnmpPduFactory, inout dataFactory : SnmpUserDataFactory, inout f : MBeanServer, inout n : ObjectName) : void
        final SnmpRequestHandler handler =
            new SnmpRequestHandler(this, id, s, p, tree, m, a, factory,
                                   dataFactory, f, n);
        threadService.submitTask(handler);
!!!3206146.java!!!	doReceive() : void

        // Let's wait for something to be received.
        //
        try {
            packet = new DatagramPacket(new byte[bufferSize], bufferSize) ;
            socket.receive(packet);
            int state = getState();

            if(state != ONLINE) {
                if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
                    SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                        "doReceive","received a message but state not online, returning.");
                }
                return;
            }

            createSnmpRequestHandler(this, servedClientCount, socket,
                                     packet, root, mibs, ipacl, pduFactory,
                                     userDataFactory, topMBS, objectName);
        } catch (SocketException e) {
            // Let's check if we have been interrupted by stop().
            //
            if (e.getMessage().equals(InterruptSysCallMsg))
                throw new InterruptedException(e.toString()) ;
            else
                throw new CommunicationException(e) ;
        } catch (InterruptedIOException e) {
            throw new InterruptedException(e.toString()) ;
        } catch (CommunicationException e) {
            throw e ;
        } catch (Exception e) {
            throw new CommunicationException(e) ;
        }
        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "doReceive", "received a message");
        }
!!!3206530.java!!!	getBindTries() : int
        return 1;
!!!3206658.java!!!	stop() : void

        final int port = getPort();
        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "stop", "Stopping: using port " + port);
        }
        if ((state == ONLINE) || (state == STARTING)){
            super.stop();
            try {
                DatagramSocket sn = new DatagramSocket(0);
                try {
                    byte[] ob = new byte[1];

                    DatagramPacket pk;
                    if (address != null)
                        pk = new DatagramPacket(ob , 1, address, port);
                    else
                        pk = new DatagramPacket(ob , 1,
                                 java.net.InetAddress.getLocalHost(), port);

                    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
                        SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                            "stop", "Sending: using port " + port);
                    }
                    sn.send(pk);
                } finally {
                    sn.close();
                }
            } catch (Throwable e){
                if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                        "stop", "Got unexpected Throwable", e);
                }
            }
        }
!!!3206786.java!!!	snmpV1Trap(in generic : int, in specific : int, inout varBindList : SnmpVarBindList) : void

        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "snmpV1Trap", "generic=" + generic +
                  ", specific=" + specific);
        }

        // First, make an SNMP V1 trap pdu
        //
        SnmpPduTrap pdu = new SnmpPduTrap() ;
        pdu.address = null ;
        pdu.port = trapPort ;
        pdu.type = pduV1TrapPdu ;
        pdu.version = snmpVersionOne ;
        pdu.community = null ;
        pdu.enterprise = enterpriseOid ;
        pdu.genericTrap = generic ;
        pdu.specificTrap = specific ;
        pdu.timeStamp = getSysUpTime();

        if (varBindList != null) {
            pdu.varBindList = new SnmpVarBind[varBindList.size()] ;
            varBindList.copyInto(pdu.varBindList);
        }
        else
            pdu.varBindList = null ;

        // If the local host cannot be determined, we put 0.0.0.0 in agentAddr
        try {
            if (address != null)
                pdu.agentAddr = handleMultipleIpVersion(address.getAddress());
            else pdu.agentAddr =
              handleMultipleIpVersion(InetAddress.getLocalHost().getAddress());
        } catch (UnknownHostException e) {
            byte[] zeroedAddr = new byte[4];
            pdu.agentAddr = handleMultipleIpVersion(zeroedAddr) ;
        }

        // Next, send the pdu to all destinations defined in ACL
        //
        sendTrapPdu(pdu) ;
!!!3206914.java!!!	handleMultipleIpVersion(inout address : byte [[]]) : SnmpIpAddress
        if(address.length == 4)
          return new SnmpIpAddress(address);
        else {
            if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                    "handleMultipleIPVersion",
                      "Not an IPv4 address, return null");
            }
            return null;
        }
!!!3207042.java!!!	snmpV1Trap(inout addr : InetAddress, inout cs : String, in generic : int, in specific : int, inout varBindList : SnmpVarBindList) : void

        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "snmpV1Trap", "generic=" + generic + ", specific=" +
                  specific);
        }

        // First, make an SNMP V1 trap pdu
        //
        SnmpPduTrap pdu = new SnmpPduTrap() ;
        pdu.address = null ;
        pdu.port = trapPort ;
        pdu.type = pduV1TrapPdu ;
        pdu.version = snmpVersionOne ;

        if(cs != null)
            pdu.community = cs.getBytes();
        else
            pdu.community = null ;

        pdu.enterprise = enterpriseOid ;
        pdu.genericTrap = generic ;
        pdu.specificTrap = specific ;
        pdu.timeStamp = getSysUpTime();

        if (varBindList != null) {
            pdu.varBindList = new SnmpVarBind[varBindList.size()] ;
            varBindList.copyInto(pdu.varBindList);
        }
        else
            pdu.varBindList = null ;

        // If the local host cannot be determined, we put 0.0.0.0 in agentAddr
        try {
            if (address != null)
                pdu.agentAddr = handleMultipleIpVersion(address.getAddress());
            else pdu.agentAddr =
              handleMultipleIpVersion(InetAddress.getLocalHost().getAddress());
        } catch (UnknownHostException e) {
            byte[] zeroedAddr = new byte[4];
            pdu.agentAddr = handleMultipleIpVersion(zeroedAddr) ;
        }

        // Next, send the pdu to the specified destination
        //
        if(addr != null)
            sendTrapPdu(addr, pdu) ;
        else
            sendTrapPdu(pdu);
!!!3207170.java!!!	snmpV1Trap(inout addr : InetAddress, inout agentAddr : SnmpIpAddress, inout cs : String, inout enterpOid : SnmpOid, in generic : int, in specific : int, inout varBindList : SnmpVarBindList, inout time : SnmpTimeticks) : void
        snmpV1Trap(addr,
                   trapPort,
                   agentAddr,
                   cs,
                   enterpOid,
                   generic,
                   specific,
                   varBindList,
                   time);
!!!3207298.java!!!	snmpV1Trap(inout peer : SnmpPeer, inout agentAddr : SnmpIpAddress, inout enterpOid : SnmpOid, in generic : int, in specific : int, inout varBindList : SnmpVarBindList, inout time : SnmpTimeticks) : void

        SnmpParameters p = (SnmpParameters) peer.getParams();
        snmpV1Trap(peer.getDestAddr(),
                   peer.getDestPort(),
                   agentAddr,
                   p.getRdCommunity(),
                   enterpOid,
                   generic,
                   specific,
                   varBindList,
                   time);
!!!3207426.java!!!	snmpV1Trap(inout addr : InetAddress, in port : int, inout agentAddr : SnmpIpAddress, inout cs : String, inout enterpOid : SnmpOid, in generic : int, in specific : int, inout varBindList : SnmpVarBindList, inout time : SnmpTimeticks) : void

        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "snmpV1Trap", "generic=" + generic + ", specific=" +
                  specific);
        }

        // First, make an SNMP V1 trap pdu
        //
        SnmpPduTrap pdu = new SnmpPduTrap() ;
        pdu.address = null ;
        pdu.port = port ;
        pdu.type = pduV1TrapPdu ;
        pdu.version = snmpVersionOne ;

        //Diff start
        if(cs != null)
            pdu.community = cs.getBytes();
        else
            pdu.community = null ;
        //Diff end

        // Diff start
        if(enterpOid != null)
            pdu.enterprise = enterpOid;
        else
            pdu.enterprise = enterpriseOid ;
        //Diff end
        pdu.genericTrap = generic ;
        pdu.specificTrap = specific ;
        //Diff start
        if(time != null)
            pdu.timeStamp = time.longValue();
        else
            pdu.timeStamp = getSysUpTime();
        //Diff end

        if (varBindList != null) {
            pdu.varBindList = new SnmpVarBind[varBindList.size()] ;
            varBindList.copyInto(pdu.varBindList);
        }
        else
            pdu.varBindList = null ;

        if (agentAddr == null) {
            // If the local host cannot be determined,
            // we put 0.0.0.0 in agentAddr
            try {
                final InetAddress inetAddr =
                    (address!=null)?address:InetAddress.getLocalHost();
                agentAddr = handleMultipleIpVersion(inetAddr.getAddress());
            }  catch (UnknownHostException e) {
                byte[] zeroedAddr = new byte[4];
                agentAddr = handleMultipleIpVersion(zeroedAddr);
            }
        }

        pdu.agentAddr = agentAddr;

        // Next, send the pdu to the specified destination
        //
        // Diff start
        if(addr != null)
            sendTrapPdu(addr, pdu) ;
        else
            sendTrapPdu(pdu);

        //End diff
!!!3207554.java!!!	snmpV2Trap(inout peer : SnmpPeer, inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList, inout time : SnmpTimeticks) : void

        SnmpParameters p = (SnmpParameters) peer.getParams();
        snmpV2Trap(peer.getDestAddr(),
                   peer.getDestPort(),
                   p.getRdCommunity(),
                   trapOid,
                   varBindList,
                   time);
!!!3207682.java!!!	snmpV2Trap(inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList) : void

        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "snmpV2Trap", "trapOid=" + trapOid);
        }

        // First, make an SNMP V2 trap pdu
        // We clone varBindList and insert sysUpTime and snmpTrapOid
        //
        SnmpPduRequest pdu = new SnmpPduRequest() ;
        pdu.address = null ;
        pdu.port = trapPort ;
        pdu.type = pduV2TrapPdu ;
        pdu.version = snmpVersionTwo ;
        pdu.community = null ;

        SnmpVarBindList fullVbl ;
        if (varBindList != null)
            fullVbl = varBindList.clone() ;
        else
            fullVbl = new SnmpVarBindList(2) ;
        SnmpTimeticks sysUpTimeValue = new SnmpTimeticks(getSysUpTime()) ;
        fullVbl.insertElementAt(new SnmpVarBind(snmpTrapOidOid, trapOid), 0) ;
        fullVbl.insertElementAt(new SnmpVarBind(sysUpTimeOid, sysUpTimeValue),
                                0);
        pdu.varBindList = new SnmpVarBind[fullVbl.size()] ;
        fullVbl.copyInto(pdu.varBindList) ;

        // Next, send the pdu to all destinations defined in ACL
        //
        sendTrapPdu(pdu) ;
!!!3207810.java!!!	snmpV2Trap(inout addr : InetAddress, inout cs : String, inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList) : void

        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "snmpV2Trap", "trapOid=" + trapOid);
        }

        // First, make an SNMP V2 trap pdu
        // We clone varBindList and insert sysUpTime and snmpTrapOid
        //
        SnmpPduRequest pdu = new SnmpPduRequest() ;
        pdu.address = null ;
        pdu.port = trapPort ;
        pdu.type = pduV2TrapPdu ;
        pdu.version = snmpVersionTwo ;

        if(cs != null)
            pdu.community = cs.getBytes();
        else
            pdu.community = null;

        SnmpVarBindList fullVbl ;
        if (varBindList != null)
            fullVbl = varBindList.clone() ;
        else
            fullVbl = new SnmpVarBindList(2) ;
        SnmpTimeticks sysUpTimeValue = new SnmpTimeticks(getSysUpTime()) ;
        fullVbl.insertElementAt(new SnmpVarBind(snmpTrapOidOid, trapOid), 0) ;
        fullVbl.insertElementAt(new SnmpVarBind(sysUpTimeOid, sysUpTimeValue),
                                0);
        pdu.varBindList = new SnmpVarBind[fullVbl.size()] ;
        fullVbl.copyInto(pdu.varBindList) ;

        // Next, send the pdu to the specified destination
        //
        if(addr != null)
            sendTrapPdu(addr, pdu);
        else
            sendTrapPdu(pdu);
!!!3207938.java!!!	snmpV2Trap(inout addr : InetAddress, inout cs : String, inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList, inout time : SnmpTimeticks) : void

        snmpV2Trap(addr,
                   trapPort,
                   cs,
                   trapOid,
                   varBindList,
                   time);
!!!3208066.java!!!	snmpV2Trap(inout addr : InetAddress, in port : int, inout cs : String, inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList, inout time : SnmpTimeticks) : void

        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            final StringBuilder strb = new StringBuilder()
                .append("trapOid=").append(trapOid)
                .append("\ncommunity=").append(cs)
                .append("\naddr=").append(addr)
                .append("\nvarBindList=").append(varBindList)
                .append("\ntime=").append(time)
                .append("\ntrapPort=").append(port);
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "snmpV2Trap", strb.toString());
        }

        // First, make an SNMP V2 trap pdu
        // We clone varBindList and insert sysUpTime and snmpTrapOid
        //
        SnmpPduRequest pdu = new SnmpPduRequest() ;
        pdu.address = null ;
        pdu.port = port ;
        pdu.type = pduV2TrapPdu ;
        pdu.version = snmpVersionTwo ;

        if(cs != null)
            pdu.community = cs.getBytes();
        else
            pdu.community = null;

        SnmpVarBindList fullVbl ;
        if (varBindList != null)
            fullVbl = varBindList.clone() ;
        else
            fullVbl = new SnmpVarBindList(2) ;

        // Only difference with other
        SnmpTimeticks sysUpTimeValue;
        if(time != null)
            sysUpTimeValue = time;
        else
            sysUpTimeValue = new SnmpTimeticks(getSysUpTime()) ;
        //End of diff

        fullVbl.insertElementAt(new SnmpVarBind(snmpTrapOidOid, trapOid), 0) ;
        fullVbl.insertElementAt(new SnmpVarBind(sysUpTimeOid, sysUpTimeValue),
                                0);
        pdu.varBindList = new SnmpVarBind[fullVbl.size()] ;
        fullVbl.copyInto(pdu.varBindList) ;

        // Next, send the pdu to the specified destination
        //
        // Diff start
        if(addr != null)
            sendTrapPdu(addr, pdu) ;
        else
            sendTrapPdu(pdu);
        //End diff
!!!3208194.java!!!	snmpPduTrap(inout address : InetAddress, inout pdu : SnmpPduPacket) : void

        if(address != null)
            sendTrapPdu(address, pdu);
        else
            sendTrapPdu(pdu);
!!!3208322.java!!!	snmpPduTrap(inout peer : SnmpPeer, inout pdu : SnmpPduPacket) : void
        if(peer != null) {
            pdu.port = peer.getDestPort();
            sendTrapPdu(peer.getDestAddr(), pdu);
        }
        else {
            pdu.port = getTrapPort().intValue();
            sendTrapPdu(pdu);
        }
!!!3208450.java!!!	sendTrapPdu(inout pdu : SnmpPduPacket) : void

        // Make an SNMP message from the pdu
        //
        SnmpMessage msg = null ;
        try {
            msg = (SnmpMessage)pduFactory.encodeSnmpPdu(pdu, bufferSize) ;
            if (msg == null) {
                throw new SnmpStatusException(
                          SnmpDefinitions.snmpRspAuthorizationError) ;
            }
        }
        catch (SnmpTooBigException x) {
            if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                    "sendTrapPdu", "Trap pdu is too big. " +
                     "Trap hasn't been sent to anyone" );
            }
            throw new SnmpStatusException(SnmpDefinitions.snmpRspTooBig) ;
            // FIXME: is the right exception to throw ?
            // We could simply forward SnmpTooBigException ?
        }

        // Now send the SNMP message to each destination
        //
        int sendingCount = 0 ;
        openTrapSocketIfNeeded() ;
        if (ipacl != null) {
            Enumeration<InetAddress> ed = ipacl.getTrapDestinations() ;
            while (ed.hasMoreElements()) {
                msg.address = ed.nextElement() ;
                Enumeration<String> ec = ipacl.getTrapCommunities(msg.address) ;
                while (ec.hasMoreElements()) {
                    msg.community = ec.nextElement().getBytes() ;
                    try {
                        sendTrapMessage(msg) ;
                        sendingCount++ ;
                    }
                    catch (SnmpTooBigException x) {
                        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                            SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                                "sendTrapPdu", "Trap pdu is too big. " +
                                 "Trap hasn't been sent to "+msg.address);
                        }
                    }
                }
            }
        }

        // If there is no destination defined or if everything has failed
        // we tried to send the trap to the local host (as suggested by
        // mister Olivier Reisacher).
        //
        if (sendingCount == 0) {
            try {
                msg.address = InetAddress.getLocalHost() ;
                sendTrapMessage(msg) ;
            } catch (SnmpTooBigException x) {
                if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                        "sendTrapPdu", "Trap pdu is too big. " +
                         "Trap hasn't been sent.");
                }
            } catch (UnknownHostException e) {
                if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                        "sendTrapPdu", "Trap pdu is too big. " +
                         "Trap hasn't been sent.");
                }
            }
        }

        closeTrapSocketIfNeeded() ;
!!!3208578.java!!!	sendTrapPdu(inout addr : InetAddress, inout pdu : SnmpPduPacket) : void

        // Make an SNMP message from the pdu
        //
        SnmpMessage msg = null ;
        try {
            msg = (SnmpMessage)pduFactory.encodeSnmpPdu(pdu, bufferSize) ;
            if (msg == null) {
                throw new SnmpStatusException(
                          SnmpDefinitions.snmpRspAuthorizationError) ;
            }
        } catch (SnmpTooBigException x) {
            if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                    "sendTrapPdu", "Trap pdu is too big. " +
                     "Trap hasn't been sent to the specified host.");
            }
            throw new SnmpStatusException(SnmpDefinitions.snmpRspTooBig) ;
            // FIXME: is the right exception to throw ?
            // We could simply forward SnmpTooBigException ?
        }

        // Now send the SNMP message to specified destination
        //
        openTrapSocketIfNeeded() ;
        if (addr != null) {
            msg.address = addr;
            try {
                sendTrapMessage(msg) ;
            } catch (SnmpTooBigException x) {
                if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {
                    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST, dbgTag,
                        "sendTrapPdu", "Trap pdu is too big. " +
                         "Trap hasn't been sent to " +  msg.address);
                }
            }
        }

        closeTrapSocketIfNeeded() ;
!!!3208706.java!!!	sendTrapMessage(inout msg : SnmpMessage) : void

        byte[] buffer = new byte[bufferSize] ;
        DatagramPacket packet = new DatagramPacket(buffer, buffer.length) ;
        int encodingLength = msg.encodeMessage(buffer) ;
        packet.setLength(encodingLength) ;
        packet.setAddress(msg.address) ;
        packet.setPort(msg.port) ;
        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "sendTrapMessage", "sending trap to " + msg.address + ":" +
                  msg.port);
        }
        trapSocket.send(packet) ;
        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "sendTrapMessage", "sent to " + msg.address + ":" +
                  msg.port);
        }
        snmpOutTraps++;
        snmpOutPkts++;
!!!3208834.java!!!	openTrapSocketIfNeeded() : void
        if (trapSocket == null) {
            trapSocket = new DatagramSocket(0, address) ;
            if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                    "openTrapSocketIfNeeded", "using port " +
                      trapSocket.getLocalPort() + " to send traps");
            }
        }
!!!3208962.java!!!	closeTrapSocketIfNeeded() : void
        if ((trapSocket != null) && (state != ONLINE)) {
            trapSocket.close() ;
            trapSocket = null ;
        }
!!!3209090.java!!!	snmpInformRequest(inout cb : SnmpInformHandler, inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList) : Vector

        if (!isActive()) {
            throw new IllegalStateException(
               "Start SNMP adaptor server before carrying out this operation");
        }
        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "snmpInformRequest", "trapOid=" + trapOid);
        }

        // First, make an SNMP inform pdu:
        // We clone varBindList and insert sysUpTime and snmpTrapOid variables.
        //
        SnmpVarBindList fullVbl ;
        if (varBindList != null)
            fullVbl = varBindList.clone() ;
        else
            fullVbl = new SnmpVarBindList(2) ;
        SnmpTimeticks sysUpTimeValue = new SnmpTimeticks(getSysUpTime()) ;
        fullVbl.insertElementAt(new SnmpVarBind(snmpTrapOidOid, trapOid), 0) ;
        fullVbl.insertElementAt(new SnmpVarBind(sysUpTimeOid, sysUpTimeValue),
                                0);

        // Next, send the pdu to the specified destination
        //
        openInformSocketIfNeeded() ;

        // Now send the SNMP message to each destination
        //
        Vector<SnmpInformRequest> informReqList = new Vector<>();
        InetAddress addr;
        String cs;
        if (ipacl != null) {
            Enumeration<InetAddress> ed = ipacl.getInformDestinations() ;
            while (ed.hasMoreElements()) {
                addr = ed.nextElement() ;
                Enumeration<String> ec = ipacl.getInformCommunities(addr) ;
                while (ec.hasMoreElements()) {
                    cs = ec.nextElement() ;
                    informReqList.addElement(
                       informSession.makeAsyncRequest(addr, cs, cb,
                                              fullVbl,getInformPort())) ;
                }
            }
        }

        return informReqList ;
!!!3209218.java!!!	snmpInformRequest(inout addr : InetAddress, inout cs : String, inout cb : SnmpInformHandler, inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList) : SnmpInformRequest

        return snmpInformRequest(addr,
                                 getInformPort(),
                                 cs,
                                 cb,
                                 trapOid,
                                 varBindList);
!!!3209346.java!!!	snmpInformRequest(inout peer : SnmpPeer, inout cb : SnmpInformHandler, inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList) : SnmpInformRequest

        SnmpParameters p = (SnmpParameters) peer.getParams();
        return snmpInformRequest(peer.getDestAddr(),
                                 peer.getDestPort(),
                                 p.getInformCommunity(),
                                 cb,
                                 trapOid,
                                 varBindList);
!!!3209474.java!!!	mapErrorStatus(in errorStatus : int, in protocolVersion : int, in reqPduType : int) : int
        return SnmpSubRequestHandler.mapErrorStatus(errorStatus,
                                                    protocolVersion,
                                                    reqPduType);
!!!3209602.java!!!	snmpInformRequest(inout addr : InetAddress, in port : int, inout cs : String, inout cb : SnmpInformHandler, inout trapOid : SnmpOid, inout varBindList : SnmpVarBindList) : SnmpInformRequest

        if (!isActive()) {
            throw new IllegalStateException(
              "Start SNMP adaptor server before carrying out this operation");
        }
        if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
            SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                "snmpInformRequest", "trapOid=" + trapOid);
        }

        // First, make an SNMP inform pdu:
        // We clone varBindList and insert sysUpTime and snmpTrapOid variables.
        //
        SnmpVarBindList fullVbl ;
        if (varBindList != null)
            fullVbl = varBindList.clone() ;
        else
            fullVbl = new SnmpVarBindList(2) ;
        SnmpTimeticks sysUpTimeValue = new SnmpTimeticks(getSysUpTime()) ;
        fullVbl.insertElementAt(new SnmpVarBind(snmpTrapOidOid, trapOid), 0) ;
        fullVbl.insertElementAt(new SnmpVarBind(sysUpTimeOid, sysUpTimeValue),
                                0);

        // Next, send the pdu to the specified destination
        //
        openInformSocketIfNeeded() ;
        return informSession.makeAsyncRequest(addr, cs, cb, fullVbl, port) ;
!!!3209730.java!!!	openInformSocketIfNeeded() : void
        if (informSession == null) {
            informSession = new SnmpSession(this) ;
            if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                   "openInformSocketIfNeeded",
                      "to send inform requests and receive inform responses");
            }
        }
!!!3209858.java!!!	closeInformSocketIfNeeded() : void
        if ((informSession != null) && (state != ONLINE)) {
            informSession.destroySession() ;
            informSession = null ;
        }
!!!3209986.java!!!	getAddress() : InetAddress
        return address;
!!!3210114.java!!!	finalize() : void
        try {
            if (socket != null) {
                socket.close() ;
                socket = null ;
            }

            threadService.terminate();
        } catch (Exception e) {
            if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {
                SNMP_ADAPTOR_LOGGER.logp(Level.FINER, dbgTag,
                   "finalize", "Exception in finalizer", e);
            }
        }
!!!3210242.java!!!	makeDebugTag() : String
        return "SnmpAdaptorServer["+ getProtocol() + ":" + getPort() + "]";
!!!3210370.java!!!	updateRequestCounters(in pduType : int) : void
        switch(pduType)  {

        case pduGetRequestPdu:
            snmpInGetRequests++;
            break;
        case pduGetNextRequestPdu:
            snmpInGetNexts++;
            break;
        case pduSetRequestPdu:
            snmpInSetRequests++;
            break;
        default:
            break;
        }
        snmpInPkts++ ;
!!!3210498.java!!!	updateErrorCounters(in errorStatus : int) : void
        switch(errorStatus) {

        case snmpRspNoError:
            snmpOutGetResponses++;
            break;
        case snmpRspGenErr:
            snmpOutGenErrs++;
            break;
        case snmpRspBadValue:
            snmpOutBadValues++;
            break;
        case snmpRspNoSuchName:
            snmpOutNoSuchNames++;
            break;
        case snmpRspTooBig:
            snmpOutTooBigs++;
            break;
        default:
            break;
        }
        snmpOutPkts++ ;
!!!3210626.java!!!	updateVarCounters(in pduType : int, in n : int) : void
        switch(pduType) {

        case pduGetRequestPdu:
        case pduGetNextRequestPdu:
        case pduGetBulkRequestPdu:
            snmpInTotalReqVars += n ;
            break ;
        case pduSetRequestPdu:
            snmpInTotalSetVars += n ;
            break ;
        }
!!!3210754.java!!!	incSnmpInASNParseErrs(in n : int) : void
        snmpInASNParseErrs += n ;
!!!3210882.java!!!	incSnmpInBadVersions(in n : int) : void
        snmpInBadVersions += n ;
!!!3211010.java!!!	incSnmpInBadCommunityUses(in n : int) : void
        snmpInBadCommunityUses += n ;
!!!3211138.java!!!	incSnmpInBadCommunityNames(in n : int) : void
        snmpInBadCommunityNames += n ;
!!!3211266.java!!!	incSnmpSilentDrops(in n : int) : void
        snmpSilentDrops += n ;
!!!3211394.java!!!	getSysUpTime() : long
        return (System.currentTimeMillis() - startUpTime) / 10 ;
!!!3211522.java!!!	readObject(inout stream : ObjectInputStream) : void

        // Call the default deserialization of the object.
        //
        stream.defaultReadObject();

        // Call the specific initialization for the SnmpAdaptorServer service.
        // This is for transient structures to be initialized to specific
        // default values.
        //
        mibs      = new Vector<>() ;
!!!3211650.java!!!	init(inout acl : InetAddressAcl, in p : int, inout a : InetAddress) : void

        root= new SnmpMibTree();

        // The default Agent is initialized with a SnmpErrorHandlerAgent agent.
        root.setDefaultAgent(new SnmpErrorHandlerAgent());

        // For the trap time, use the time the agent started ...
        //
        startUpTime= java.lang.System.currentTimeMillis();
        maxActiveClientCount = 10;

        // Create the default message factory
        pduFactory = new SnmpPduFactoryBER() ;

        port = p ;
        ipacl = acl ;
        address = a ;

        if ((ipacl == null) && (useAcl == true))
            throw new IllegalArgumentException("ACL object cannot be null") ;

        threadService = new ThreadService(threadNumber);
!!!3211778.java!!!	getAgentMib(inout oid : SnmpOid) : SnmpMibAgent
        return root.getAgentMib(oid);
!!!3211906.java!!!	createMainThread() : Thread
        final Thread t = super.createMainThread();
        t.setDaemon(true);
        return t;
