class JapaneseChronology
!!!8481666.java!!!	getId() : String
        return "Japanese";
!!!8481794.java!!!	getCalendarType() : String
        return "japanese";
!!!8481922.java!!!	date(inout era : Era, in yearOfEra : int, in month : int, in dayOfMonth : int) : JapaneseDate
        if (era instanceof JapaneseEra == false) {
            throw new ClassCastException("Era must be JapaneseEra");
        }
        return JapaneseDate.of((JapaneseEra) era, yearOfEra, month, dayOfMonth);
!!!8482050.java!!!	date(in prolepticYear : int, in month : int, in dayOfMonth : int) : JapaneseDate
        return new JapaneseDate(LocalDate.of(prolepticYear, month, dayOfMonth));
!!!8482178.java!!!	dateYearDay(inout era : Era, in yearOfEra : int, in dayOfYear : int) : JapaneseDate
        return JapaneseDate.ofYearDay((JapaneseEra) era, yearOfEra, dayOfYear);
!!!8482306.java!!!	dateYearDay(in prolepticYear : int, in dayOfYear : int) : JapaneseDate
        return new JapaneseDate(LocalDate.ofYearDay(prolepticYear, dayOfYear));
!!!8482434.java!!!	dateEpochDay(in epochDay : long) : JapaneseDate
        return new JapaneseDate(LocalDate.ofEpochDay(epochDay));
!!!8482562.java!!!	dateNow() : JapaneseDate
        return dateNow(Clock.systemDefaultZone());
!!!8482690.java!!!	dateNow(inout zone : ZoneId) : JapaneseDate
        return dateNow(Clock.system(zone));
!!!8482818.java!!!	dateNow(inout clock : Clock) : JapaneseDate
        return date(LocalDate.now(clock));
!!!8482946.java!!!	date(inout temporal : TemporalAccessor) : JapaneseDate
        if (temporal instanceof JapaneseDate) {
            return (JapaneseDate) temporal;
        }
        return new JapaneseDate(LocalDate.from(temporal));
!!!8483074.java!!!	localDateTime(inout temporal : TemporalAccessor) : ChronoLocalDateTime
        return (ChronoLocalDateTime<JapaneseDate>)super.localDateTime(temporal);
!!!8483202.java!!!	zonedDateTime(inout temporal : TemporalAccessor) : ChronoZonedDateTime
        return (ChronoZonedDateTime<JapaneseDate>)super.zonedDateTime(temporal);
!!!8483330.java!!!	zonedDateTime(inout instant : Instant, inout zone : ZoneId) : ChronoZonedDateTime
        return (ChronoZonedDateTime<JapaneseDate>)super.zonedDateTime(instant, zone);
!!!8483458.java!!!	isLeapYear(in prolepticYear : long) : boolean
        return IsoChronology.INSTANCE.isLeapYear(prolepticYear);
!!!8483586.java!!!	prolepticYear(inout era : Era, in yearOfEra : int) : int
        if (era instanceof JapaneseEra == false) {
            throw new ClassCastException("Era must be JapaneseEra");
        }

        JapaneseEra jera = (JapaneseEra) era;
        int gregorianYear = jera.getPrivateEra().getSinceDate().getYear() + yearOfEra - 1;
        if (yearOfEra == 1) {
            return gregorianYear;
        }
        if (gregorianYear >= Year.MIN_VALUE && gregorianYear <= Year.MAX_VALUE) {
            LocalGregorianCalendar.Date jdate = JCAL.newCalendarDate(null);
            jdate.setEra(jera.getPrivateEra()).setDate(yearOfEra, 1, 1);
            if (JapaneseChronology.JCAL.validate(jdate)) {
                return gregorianYear;
            }
        }
        throw new DateTimeException("Invalid yearOfEra value");
!!!8483714.java!!!	eraOf(in eraValue : int) : JapaneseEra
        return JapaneseEra.of(eraValue);
!!!8483842.java!!!	eras() : List
        return Arrays.<Era>asList(JapaneseEra.values());
!!!8483970.java!!!	getCurrentEra() : JapaneseEra
        // Assume that the last JapaneseEra is the current one.
        JapaneseEra[] eras = JapaneseEra.values();
        return eras[eras.length - 1];
!!!8484098.java!!!	range(inout field : ChronoField) : ValueRange
        switch (field) {
            case ALIGNED_DAY_OF_WEEK_IN_MONTH:
            case ALIGNED_DAY_OF_WEEK_IN_YEAR:
            case ALIGNED_WEEK_OF_MONTH:
            case ALIGNED_WEEK_OF_YEAR:
                throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
            case YEAR_OF_ERA: {
                Calendar jcal = Calendar.getInstance(LOCALE);
                int startYear = getCurrentEra().getPrivateEra().getSinceDate().getYear();
                return ValueRange.of(1, jcal.getGreatestMinimum(Calendar.YEAR),
                        jcal.getLeastMaximum(Calendar.YEAR) + 1, // +1 due to the different definitions
                        Year.MAX_VALUE - startYear);
            }
            case DAY_OF_YEAR: {
                Calendar jcal = Calendar.getInstance(LOCALE);
                int fieldIndex = Calendar.DAY_OF_YEAR;
                return ValueRange.of(jcal.getMinimum(fieldIndex), jcal.getGreatestMinimum(fieldIndex),
                        jcal.getLeastMaximum(fieldIndex), jcal.getMaximum(fieldIndex));
            }
            case YEAR:
                return ValueRange.of(JapaneseDate.MEIJI_6_ISODATE.getYear(), Year.MAX_VALUE);
            case ERA:
                return ValueRange.of(JapaneseEra.MEIJI.getValue(), getCurrentEra().getValue());
            default:
                return field.range();
        }
!!!8484226.java!!!	resolveDate(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : JapaneseDate
        return (JapaneseDate) super.resolveDate(fieldValues, resolverStyle);
!!!8484354.java!!!	resolveYearOfEra(inout fieldValues : Map, inout resolverStyle : ResolverStyle) : ChronoLocalDate
        // validate era and year-of-era
        Long eraLong = fieldValues.get(ERA);
        JapaneseEra era = null;
        if (eraLong != null) {
            era = eraOf(range(ERA).checkValidIntValue(eraLong, ERA));  // always validated
        }
        Long yoeLong = fieldValues.get(YEAR_OF_ERA);
        int yoe = 0;
        if (yoeLong != null) {
            yoe = range(YEAR_OF_ERA).checkValidIntValue(yoeLong, YEAR_OF_ERA);  // always validated
        }
        // if only year-of-era and no year then invent era unless strict
        if (era == null && yoeLong != null && fieldValues.containsKey(YEAR) == false && resolverStyle != ResolverStyle.STRICT) {
            era = JapaneseEra.values()[JapaneseEra.values().length - 1];
        }
        // if both present, then try to create date
        if (yoeLong != null && era != null) {
            if (fieldValues.containsKey(MONTH_OF_YEAR)) {
                if (fieldValues.containsKey(DAY_OF_MONTH)) {
                    return resolveYMD(era, yoe, fieldValues, resolverStyle);
                }
            }
            if (fieldValues.containsKey(DAY_OF_YEAR)) {
                return resolveYD(era, yoe, fieldValues, resolverStyle);
            }
        }
        return null;
!!!8484482.java!!!	prolepticYearLenient(inout era : JapaneseEra, in yearOfEra : int) : int
        return era.getPrivateEra().getSinceDate().getYear() + yearOfEra - 1;
!!!8484610.java!!!	resolveYMD(inout era : JapaneseEra, in yoe : int, inout fieldValues : Map, inout resolverStyle : ResolverStyle) : ChronoLocalDate
         fieldValues.remove(ERA);
         fieldValues.remove(YEAR_OF_ERA);
         if (resolverStyle == ResolverStyle.LENIENT) {
             int y = prolepticYearLenient(era, yoe);
             long months = Math.subtractExact(fieldValues.remove(MONTH_OF_YEAR), 1);
             long days = Math.subtractExact(fieldValues.remove(DAY_OF_MONTH), 1);
             return date(y, 1, 1).plus(months, MONTHS).plus(days, DAYS);
         }
         int moy = range(MONTH_OF_YEAR).checkValidIntValue(fieldValues.remove(MONTH_OF_YEAR), MONTH_OF_YEAR);
         int dom = range(DAY_OF_MONTH).checkValidIntValue(fieldValues.remove(DAY_OF_MONTH), DAY_OF_MONTH);
         if (resolverStyle == ResolverStyle.SMART) {  // previous valid
             if (yoe < 1) {
                 throw new DateTimeException("Invalid YearOfEra: " + yoe);
             }
             int y = prolepticYearLenient(era, yoe);
             JapaneseDate result;
             try {
                 result = date(y, moy, dom);
             } catch (DateTimeException ex) {
                 result = date(y, moy, 1).with(TemporalAdjusters.lastDayOfMonth());
             }
             // handle the era being changed
             // only allow if the new date is in the same Jan-Dec as the era change
             // determine by ensuring either original yoe or result yoe is 1
             if (result.getEra() != era && result.get(YEAR_OF_ERA) > 1 && yoe > 1) {
                 throw new DateTimeException("Invalid YearOfEra for Era: " + era + " " + yoe);
             }
             return result;
         }
         return date(era, yoe, moy, dom);
!!!8484738.java!!!	resolveYD(inout era : JapaneseEra, in yoe : int, inout fieldValues : Map, inout resolverStyle : ResolverStyle) : ChronoLocalDate
        fieldValues.remove(ERA);
        fieldValues.remove(YEAR_OF_ERA);
        if (resolverStyle == ResolverStyle.LENIENT) {
            int y = prolepticYearLenient(era, yoe);
            long days = Math.subtractExact(fieldValues.remove(DAY_OF_YEAR), 1);
            return dateYearDay(y, 1).plus(days, DAYS);
        }
        int doy = range(DAY_OF_YEAR).checkValidIntValue(fieldValues.remove(DAY_OF_YEAR), DAY_OF_YEAR);
        return dateYearDay(era, yoe, doy);  // smart is same as strict
!!!8484866.java!!!	writeReplace() : Object
        return super.writeReplace();
!!!8484994.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
