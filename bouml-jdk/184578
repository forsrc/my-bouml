format 222
"relation" // jdk1.8::javax::management::relation
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/management/relation/"
  java_package "javax.management.relation"
  classview 177410 "relation"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1199618 "InvalidRelationIdException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised when relation id provided for a relation is already
used.

@since 1.5
"
      classrelation 3842818 // <generalisation>
	relation 3842818 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3842818 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2291714 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7115040321202754171L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9905154 "InvalidRelationIdException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9905282 "InvalidRelationIdException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1199746 "RelationException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is the superclass of any exception which can be raised during
relation management.

@since 1.5
"
      classrelation 3842690 // <generalisation>
	relation 3842690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3842690 // <generalisation>
	  b parent class_ref 1186690 // JMException
      end

      attribute 2291586 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5434016005679159613L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9904898 "RelationException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9905026 "RelationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1199874 "InvalidRelationServiceException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised when an invalid Relation Service is provided.

@since 1.5
"
      classrelation 3842946 // <generalisation>
	relation 3842946 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3842946 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2291842 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3400722103759507559L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9905410 "InvalidRelationServiceException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9905538 "InvalidRelationServiceException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1200002 "InvalidRelationTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Invalid relation type.
This exception is raised when, in a relation type, there is already a
relation type with that name, or the same name has been used for two
different role infos, or no role info provided, or one null role info
provided.

@since 1.5
"
      classrelation 3843074 // <generalisation>
	relation 3843074 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3843074 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2291970 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3007446608299169961L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9905666 "InvalidRelationTypeException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9905794 "InvalidRelationTypeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1200130 "InvalidRoleInfoException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised when, in a role info, its minimum degree is greater
than its maximum degree.

@since 1.5
"
      classrelation 3843202 // <generalisation>
	relation 3843202 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3843202 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2292098 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7517834705158932074L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9905922 "InvalidRoleInfoException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9906050 "InvalidRoleInfoException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1200258 "InvalidRoleValueException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Role value is invalid.
This exception is raised when, in a role, the number of referenced MBeans
in given value is less than expected minimum degree, or the number of
referenced MBeans in provided value exceeds expected maximum degree, or
one referenced MBean in the value is not an Object of the MBean
class expected for that role, or an MBean provided for that role does not
exist.

@since 1.5
"
      classrelation 3843330 // <generalisation>
	relation 3843330 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3843330 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2292226 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2066091747301983721L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9906178 "InvalidRoleValueException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9906306 "InvalidRoleValueException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1200386 "MBeanServerNotificationFilter"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Filter for {@link MBeanServerNotification}.
This filter filters MBeanServerNotification notifications by
selecting the ObjectNames of interest and the operations (registration,
unregistration, both) of interest (corresponding to notification
types).

<p>The <b>serialVersionUID</b> of this class is <code>2605900539589789736L</code>.

@since 1.5

 serialVersionUID must be constant"
      classrelation 3843458 // <generalisation>
	relation 3843458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3843458 // <generalisation>
	  b parent class_ref 1190530 // NotificationFilterSupport
      end

      attribute 2292354 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6001782699077323605L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2292482 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2605900539589789736L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3843586 // oldSerialPersistentFields (<unidirectional association>)
	relation 3843586 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"mySelectObjNameList\", Vector.class),
      new ObjectStreamField(\"myDeselectObjNameList\", Vector.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3843586 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3843714 // newSerialPersistentFields (<unidirectional association>)
	relation 3843714 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"selectedNames\", List.class),
      new ObjectStreamField(\"deselectedNames\", List.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3843714 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2292610 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3843842 // serialPersistentFields (<unidirectional association>)
	relation 3843842 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField selectedNames List List of {@link ObjectName}s of interest
        <ul>
        <li><code>null</code> means that all {@link ObjectName}s are implicitly selected
        (check for explicit deselections)</li>
        <li>Empty vector means that no {@link ObjectName} is explicitly selected</li>
        </ul>
@serialField deselectedNames List List of {@link ObjectName}s with no interest
        <ul>
        <li><code>null</code> means that all {@link ObjectName}s are implicitly deselected
        (check for explicit selections))</li>
        <li>Empty vector means that no {@link ObjectName} is explicitly deselected</li>
        </ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3843842 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2292738 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 181890 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK : Too bad, no compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3843970 // selectedNames (<unidirectional association>)
	relation 3843970 --->
	  a role_name "selectedNames" init_value " new Vector<ObjectName>()" private
	    comment " END Serialization compatibility stuff

 Private members


@serial List of {@link ObjectName}s of interest
        <ul>
        <li><code>null</code> means that all {@link ObjectName}s are implicitly selected
        (check for explicit deselections)</li>
        <li>Empty vector means that no {@link ObjectName} is explicitly selected</li>
        </ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName> ${name}${value};
"
	    classrelation_ref 3843970 // selectedNames (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3844098 // deselectedNames (<unidirectional association>)
	relation 3844098 --->
	  a role_name "deselectedNames" init_value " null" private
	    comment "
@serial List of {@link ObjectName}s with no interest
        <ul>
        <li><code>null</code> means that all {@link ObjectName}s are implicitly deselected
        (check for explicit selections))</li>
        <li>Empty vector means that no {@link ObjectName} is explicitly deselected</li>
        </ul>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName> ${name}${value};
"
	    classrelation_ref 3844098 // deselectedNames (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 9906434 "MBeanServerNotificationFilter"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor


Creates a filter selecting all MBeanServerNotification notifications for
all ObjectNames.
"
      end

      operation 9906562 "disableAllObjectNames"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Disables any MBeanServerNotification (all ObjectNames are
deselected).
"
      end

      operation 9906690 "disableObjectName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "objectName" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disables MBeanServerNotifications concerning given ObjectName.

@param objectName  ObjectName no longer of interest

@exception IllegalArgumentException  if the given ObjectName is null
"
      end

      operation 9906818 "enableAllObjectNames"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables all MBeanServerNotifications (all ObjectNames are selected).
"
      end

      operation 9906946 "enableObjectName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "objectName" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables MBeanServerNotifications concerning given ObjectName.

@param objectName  ObjectName of interest

@exception IllegalArgumentException  if the given ObjectName is null
"
      end

      operation 9907074 "getEnabledObjectNames"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the ObjectNames enabled.

@return Vector of ObjectNames:
<P>- null means all ObjectNames are implicitly selected, except the
ObjectNames explicitly deselected
<P>- empty means all ObjectNames are deselected, i.e. no ObjectName
selected.
"
      end

      operation 9907202 "getDisabledObjectNames"
	public return_type class_ref 141442 // Vector
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the ObjectNames disabled.

@return Vector of ObjectNames:
<P>- null means all ObjectNames are implicitly deselected, except the
ObjectNames explicitly selected
<P>- empty means all ObjectNames are selected, i.e. no ObjectName
deselected.
"
      end

      operation 9907330 "isNotificationEnabled"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "notif" type class_ref 488706 // Notification
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NotificationFilter interface


Invoked before sending the specified notification to the listener.
<P>If:
<P>- the ObjectName of the concerned MBean is selected (explicitly OR
(implicitly and not explicitly deselected))
<P>AND
<P>- the type of the operation (registration or unregistration) is
selected
<P>then the notification is sent to the listener.

@param notif  The notification to be sent.

@return true if the notification has to be sent to the listener, false
otherwise.

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9907458 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes an {@link MBeanServerNotificationFilter} from an {@link ObjectInputStream}.
"
      end

      operation 9907586 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes an {@link MBeanServerNotificationFilter} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1200514 "Relation"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface has to be implemented by any MBean class expected to
represent a relation managed using the Relation Service.
<P>Simple relations, i.e. having only roles, no properties or methods, can
be created directly by the Relation Service (represented as RelationSupport
objects, internally handled by the Relation Service).
<P>If the user wants to represent more complex relations, involving
properties and/or methods, he has to provide his own class implementing the
Relation interface. This can be achieved either by inheriting from
RelationSupport class, or by implementing the interface (fully or delegation to
a RelationSupport object member).
<P>Specifying such user relation class is to introduce properties and/or
methods. Those have to be exposed for remote management. So this means that
any user relation class must be a MBean class.

@since 1.5
"
      operation 9907714 "getRole"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value for given role name.
<P>Checks if the role exists and is readable according to the relation
type.

@param roleName  name of role

@return the ArrayList of ObjectName objects being the role value

@exception IllegalArgumentException  if null role name
@exception RoleNotFoundException  if:
<P>- there is no role with given name
<P>- the role is not readable.
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server

@see #setRole
"
      end

      operation 9907842 "getRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 1
	  param inout name "roleNameArray" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves values of roles with given names.
<P>Checks for each role if it exists and is readable according to the
relation type.

@param roleNameArray  array of names of roles to be retrieved

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
retrieved).

@exception IllegalArgumentException  if null role name
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server

@see #setRoles
"
      end

      operation 9907970 "getRoleCardinality"
	public return_type class_ref 137602 // Integer
	nparams 1
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of MBeans currently referenced in the given role.

@param roleName  name of role

@return the number of currently referenced MBeans in that role

@exception IllegalArgumentException  if null role name
@exception RoleNotFoundException  if there is no role with given name
"
      end

      operation 9908098 "getAllRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 0
	nexceptions 1
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles present in the relation.

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
readable).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
"
      end

      operation 9908226 "retrieveAllRoles"
	public return_type class_ref 1201026 // RoleList
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles in the relation without checking read mode.

@return a RoleList.
"
      end

      operation 9908354 "setRole"
	public explicit_return_type "void"
	nparams 1
	  param inout name "role" type class_ref 1201154 // Role
	nexceptions 6
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given role.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>Will send a notification (RelationNotification with type
RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
relation is a MBean or not).

@param role  role to be set (name and new value)

@exception IllegalArgumentException  if null role
@exception RoleNotFoundException  if there is no role with the supplied
role's name or if the role is not writable (no test on the write access
mode performed when initializing the role)
@exception InvalidRoleValueException  if value provided for
role is not valid, i.e.:
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- a MBean provided for that role does not exist.
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if the relation has not been
added in the Relation Service.

@see #getRole
"
      end

      operation 9908482 "setRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 1
	  param inout name "roleList" type class_ref 1201026 // RoleList
	nexceptions 4
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given roles.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>Will send one notification (RelationNotification with type
RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
relation is a MBean or not) per updated role.

@param roleList  list of roles to be set

@return a RoleResult object, including a RoleList (for roles
successfully set) and a RoleUnresolvedList (for roles not
set).

@exception IllegalArgumentException  if null role list
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if the relation MBean has not been
added in the Relation Service.

@see #getRoles
"
      end

      operation 9908610 "handleMBeanUnregistration"
	public explicit_return_type "void"
	nparams 2
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 6
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Callback used by the Relation Service when a MBean referenced in a role
is unregistered.
<P>The Relation Service will call this method to let the relation
take action to reflect the impact of such unregistration.
<P>BEWARE. the user is not expected to call this method.
<P>Current implementation is to set the role with its current value
(list of ObjectNames of referenced MBeans) without the unregistered
one.

@param objectName  ObjectName of unregistered MBean
@param roleName  name of role where the MBean is referenced

@exception IllegalArgumentException  if null parameter
@exception RoleNotFoundException  if role does not exist in the
relation or is not writable
@exception InvalidRoleValueException  if role value does not conform to
the associated role info (this will never happen when called from the
Relation Service)
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if this method is called for a
relation MBean not added in the Relation Service.
"
      end

      operation 9908738 "getReferencedMBeans"
	public return_type class_ref 130178 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName,List<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves MBeans referenced in the various roles of the relation.

@return a HashMap mapping:
<P> ObjectName {@literal ->} ArrayList of String (role names)
"
      end

      operation 9908866 "getRelationTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of associated relation type.

@return the name of the relation type.
"
      end

      operation 9908994 "getRelationServiceName"
	public return_type class_ref 485506 // ObjectName
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns ObjectName of the Relation Service handling the relation.

@return the ObjectName of the Relation Service.
"
      end

      operation 9909122 "getRelationId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns relation identifier (used to uniquely identify the relation
inside the Relation Service).

@return the relation id.
"
      end
    end

    class 1200642 "RoleNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised when a role in a relation does not exist, or is not
readable, or is not settable.

@since 1.5
"
      classrelation 3852674 // <generalisation>
	relation 3852674 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3852674 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2296706 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2986406101364031481L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9935234 "RoleNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9935362 "RoleNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1200770 "RelationServiceNotRegisteredException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised when an access is done to the Relation Service and
that one is not registered.

@since 1.5
"
      classrelation 3848450 // <generalisation>
	relation 3848450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3848450 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2293634 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8454744887157122910L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9922818 "RelationServiceNotRegisteredException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9922946 "RelationServiceNotRegisteredException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1200898 "RoleResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents the result of a multiple access to several roles of a relation
(either for reading or writing).

<p>The <b>serialVersionUID</b> of this class is <code>-6304063118040985512L</code>.

@since 1.5
"
      classrelation 3852802 // <realization>
	relation 3852802 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3852802 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2296834 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3786616013762091099L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2296962 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6304063118040985512L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3852930 // oldSerialPersistentFields (<unidirectional association>)
	relation 3852930 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"myRoleList\", RoleList.class),
      new ObjectStreamField(\"myRoleUnresList\", RoleUnresolvedList.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3852930 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3853058 // newSerialPersistentFields (<unidirectional association>)
	relation 3853058 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"roleList\", RoleList.class),
      new ObjectStreamField(\"unresolvedRoleList\", RoleUnresolvedList.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3853058 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2297090 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3853186 // serialPersistentFields (<unidirectional association>)
	relation 3853186 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField roleList RoleList List of roles successfully accessed
@serialField unresolvedRoleList RoleUnresolvedList List of roles unsuccessfully accessed

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3853186 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2297218 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 182530 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK : Too bad, no compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3853314 // roleList (<unidirectional association>)
	relation 3853314 --->
	  a role_name "roleList" init_value " null" private
	    comment " END Serialization compatibility stuff

 Private members


@serial List of roles successfully accessed

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3853314 // roleList (<unidirectional association>)
	  b parent class_ref 1201026 // RoleList
      end

      classrelation 3853442 // unresolvedRoleList (<unidirectional association>)
	relation 3853442 --->
	  a role_name "unresolvedRoleList" init_value " null" private
	    comment "
@serial List of roles unsuccessfully accessed

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3853442 // unresolvedRoleList (<unidirectional association>)
	  b parent class_ref 1202690 // RoleUnresolvedList
      end

      operation 9935490 "RoleResult"
	public explicit_return_type ""
	nparams 2
	  param inout name "list" type class_ref 1201026 // RoleList
	  param inout name "unresolvedList" type class_ref 1202690 // RoleUnresolvedList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor


Constructor.

@param list  list of roles successfully accessed.
@param unresolvedList  list of roles not accessed (with problem
descriptions).
"
      end

      operation 9935618 "getRoles"
	public return_type class_ref 1201026 // RoleList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Retrieves list of roles successfully accessed.

@return a RoleList

@see #setRoles
"
      end

      operation 9935746 "getRolesUnresolved"
	public return_type class_ref 1202690 // RoleUnresolvedList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves list of roles unsuccessfully accessed.

@return a RoleUnresolvedList.

@see #setRolesUnresolved
"
      end

      operation 9935874 "setRoles"
	public explicit_return_type "void"
	nparams 1
	  param inout name "list" type class_ref 1201026 // RoleList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets list of roles successfully accessed.

@param list  list of roles successfully accessed

@see #getRoles
"
      end

      operation 9936002 "setRolesUnresolved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "unresolvedList" type class_ref 1202690 // RoleUnresolvedList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets list of roles unsuccessfully accessed.

@param unresolvedList  list of roles unsuccessfully accessed

@see #getRolesUnresolved
"
      end

      operation 9936130 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RoleResult} from an {@link ObjectInputStream}.
"
      end

      operation 9936258 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RoleResult} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1201026 "RoleList"
      visibility public 
      nactuals 1
      actual class class_ref 186498 // ArrayList
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RoleList represents a list of roles (Role objects). It is used as
parameter when creating a relation, and when trying to set several roles in
a relation (via 'setRoles()' method). It is returned as part of a
RoleResult, to provide roles successfully retrieved.

@since 1.5

 We cannot extend ArrayList<Role> because our legacy
add(Role) method would then override add(E) in ArrayList<E>,
and our return value is void whereas ArrayList.add(E)'s is boolean.
Likewise for set(int,Role).  Grrr.  We cannot use covariance
to override the most important methods and have them return
Role, either, because that would break subclasses that
override those methods in turn (using the original return type
of Object).  Finally, we cannot implement Iterable<Role>
so you could write
for (Role r : roleList)
because ArrayList<> implements Iterable<> and the same class cannot
implement two versions of a generic interface.  Instead we provide
the asList() method so you can write
for (Role r : roleList.asList())
"
      classrelation 3852546 // <realization>
	relation 3852546 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3852546 // <realization>
	  b parent class_ref 186498 // ArrayList
      end

      attribute 2296322 "typeSafe"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2296450 "tainted"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2296578 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5568344346499649313L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9932930 "RoleList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs an empty RoleList.
"
      end

      operation 9933058 "RoleList"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty RoleList with the initial capacity
specified.

@param initialCapacity  initial capacity
"
      end

      operation 9933186 "RoleList"
	public explicit_return_type ""
	nparams 1
	  param inout name "list" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Role> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code RoleList} containing the elements of the
{@code List} specified, in the order in which they are returned by
the {@code List}'s iterator. The {@code RoleList} instance has
an initial capacity of 110% of the size of the {@code List}
specified.

@param list the {@code List} that defines the initial contents of
the new {@code RoleList}.

@exception IllegalArgumentException if the {@code list} parameter
is {@code null} or if the {@code list} parameter contains any
non-Role objects.

@see ArrayList#ArrayList(java.util.Collection)
"
      end

      operation 9933314 "asList"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Role> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Return a view of this list as a {@code List<Role>}.
Changes to the returned value are reflected by changes
to the original {@code RoleList} and vice versa.

@return a {@code List<Role>} whose contents
reflect the contents of this {@code RoleList}.

<p>If this method has ever been called on a given
{@code RoleList} instance, a subsequent attempt to add
an object to that instance which is not a {@code Role}
will fail with an {@code IllegalArgumentException}. For compatibility
reasons, a {@code RoleList} on which this method has never
been called does allow objects other than {@code Role}s to
be added.</p>

@throws IllegalArgumentException if this {@code RoleList} contains
an element that is not a {@code Role}.

@since 1.6
"
      end

      operation 9933442 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "role" type class_ref 1201154 // Role
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Adds the Role specified as the last element of the list.

@param role  the role to be added.

@exception IllegalArgumentException  if the role is null.
"
      end

      operation 9933570 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "role" type class_ref 1201154 // Role
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 881154 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the role specified as an element at the position specified.
Elements with an index greater than or equal to the current position are
shifted up.

@param index  The position in the list where the new Role
object is to be inserted.
@param role  The Role object to be inserted.

@exception IllegalArgumentException  if the role is null.
@exception IndexOutOfBoundsException  if accessing with an index
outside of the list.
"
      end

      operation 9933698 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "role" type class_ref 1201154 // Role
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 881154 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at the position specified to be the role
specified.
The previous element at that position is discarded.

@param index  The position specified.
@param role  The value to which the role element should be set.

@exception IllegalArgumentException  if the role is null.
@exception IndexOutOfBoundsException  if accessing with an index
outside of the list.
"
      end

      operation 9933826 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "roleList" type class_ref 1201026 // RoleList
	nexceptions 1
	  exception class_ref 881154 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all the elements in the RoleList specified to the end
of the list, in the order in which they are returned by the Iterator of
the RoleList specified.

@param roleList  Elements to be inserted into the list (can be null)

@return true if this list changed as a result of the call.

@exception IndexOutOfBoundsException  if accessing with an index
outside of the list.

@see ArrayList#addAll(Collection)
"
      end

      operation 9933954 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "roleList" type class_ref 1201026 // RoleList
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 881154 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the RoleList specified into this
list, starting at the specified position, in the order in which they are
returned by the Iterator of the RoleList specified.

@param index  Position at which to insert the first element from the
RoleList specified.
@param roleList  Elements to be inserted into the list.

@return true if this list changed as a result of the call.

@exception IllegalArgumentException  if the role is null.
@exception IndexOutOfBoundsException  if accessing with an index
outside of the list.

@see ArrayList#addAll(int, Collection)
"
      end

      operation 9934082 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override all of the methods from ArrayList<Object> that might add
a non-Role to the List, and disallow that if asList has ever
been called on this instance.
"
      end

      operation 9934210 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9934338 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9934466 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9934594 "set"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9934722 "checkTypeSafe"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "IllegalArgumentException if o is a non-Role object.
"
      end

      operation 9934850 "checkTypeSafe"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "IllegalArgumentException if c contains any non-Role objects.
"
      end

      operation 9934978 "isTainted"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if o is a non-Role object.
"
      end

      operation 9935106 "isTainted"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if c contains any non-Role objects.
"
      end
    end

    class 1201154 "Role"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a role: includes a role name and referenced MBeans (via their
ObjectNames). The role value is always represented as an ArrayList
collection (of ObjectNames) to homogenize the access.

<p>The <b>serialVersionUID</b> of this class is <code>-279985518429862552L</code>.

@since 1.5

 serialVersionUID not constant"
      classrelation 3850754 // <realization>
	relation 3850754 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3850754 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2294530 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1959486389343113026L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2294658 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -279985518429862552L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3850882 // oldSerialPersistentFields (<unidirectional association>)
	relation 3850882 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"myName\", String.class),
      new ObjectStreamField(\"myObjNameList\", ArrayList.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3850882 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3851010 // newSerialPersistentFields (<unidirectional association>)
	relation 3851010 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"name\", String.class),
      new ObjectStreamField(\"objectNameList\", List.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3851010 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2294786 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3851138 // serialPersistentFields (<unidirectional association>)
	relation 3851138 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField name String Role name
@serialField objectNameList List {@link List} of {@link ObjectName}s of referenced MBeans

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3851138 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2294914 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 182274 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK : Too bad, no compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3851266 // name (<unidirectional association>)
	relation 3851266 --->
	  a role_name "name" init_value " null" private
	    comment " END Serialization compatibility stuff

 Private members


@serial Role name

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3851266 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3851394 // objectNameList (<unidirectional association>)
	relation 3851394 --->
	  a role_name "objectNameList" init_value " new ArrayList<ObjectName>()" private
	    comment "
@serial {@link List} of {@link ObjectName}s of referenced MBeans

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName> ${name}${value};
"
	    classrelation_ref 3851394 // objectNameList (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 9929218 "Role"
	public explicit_return_type ""
	nparams 2
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "roleValue" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<ObjectName> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


<p>Make a new Role object.
No check is made that the ObjectNames in the role value exist in
an MBean server.  That check will be made when the role is set
in a relation.

@param roleName  role name
@param roleValue  role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9929346 "getRoleName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Retrieves role name.

@return the role name.

@see #setRoleName
"
      end

      operation 9929474 "getRoleValue"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value.

@return ArrayList of ObjectName objects for referenced MBeans.

@see #setRoleValue
"
      end

      operation 9929602 "setRoleName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets role name.

@param roleName  role name

@exception IllegalArgumentException  if null parameter

@see #getRoleName
"
      end

      operation 9929730 "setRoleValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "roleValue" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<ObjectName> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets role value.

@param roleValue  List of ObjectName objects for referenced
MBeans.

@exception IllegalArgumentException  if null parameter

@see #getRoleValue
"
      end

      operation 9929858 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing the role.

@return the description of the role.
"
      end

      operation 9929986 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc


Clone the role object.

@return a Role that is an independent copy of the current Role object.
"
      end

      operation 9930114 "roleValueToString"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "roleValue" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<ObjectName> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string for the given role value.

@param roleValue  List of ObjectName objects

@return A String consisting of the ObjectNames separated by
newlines (\\n).

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9930242 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link Role} from an {@link ObjectInputStream}.
"
      end

      operation 9930370 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link Role} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1201282 "RelationTypeNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised when there is no relation type with given name in
Relation Service.

@since 1.5
"
      classrelation 3849858 // <generalisation>
	relation 3849858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3849858 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2293762 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1274155316284300752L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9927554 "RelationTypeNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9927682 "RelationTypeNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1201410 "RelationNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised when there is no relation for a given relation id
in a Relation Service.

@since 1.5
"
      classrelation 3844226 // <generalisation>
	relation 3844226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3844226 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2292866 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3793951411158559116L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9909250 "RelationNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9909378 "RelationNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1201538 "RelationNotification"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A notification of a change in the Relation Service.
A RelationNotification notification is sent when a relation is created via
the Relation Service, or an MBean is added as a relation in the Relation
Service, or a role is updated in a relation, or a relation is removed from
the Relation Service.

<p>The <b>serialVersionUID</b> of this class is <code>-6871117877523310399L</code>.

@since 1.5

 serialVersionUID not constant"
      classrelation 3844354 // <generalisation>
	relation 3844354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3844354 // <generalisation>
	  b parent class_ref 488706 // Notification
      end

      attribute 2292994 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2126464566505527147L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2293122 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6871117877523310399L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3844482 // oldSerialPersistentFields (<unidirectional association>)
	relation 3844482 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"myNewRoleValue\", ArrayList.class),
        new ObjectStreamField(\"myOldRoleValue\", ArrayList.class),
        new ObjectStreamField(\"myRelId\", String.class),
        new ObjectStreamField(\"myRelObjName\", ObjectName.class),
        new ObjectStreamField(\"myRelTypeName\", String.class),
        new ObjectStreamField(\"myRoleName\", String.class),
        new ObjectStreamField(\"myUnregMBeanList\", ArrayList.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3844482 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3844610 // newSerialPersistentFields (<unidirectional association>)
	relation 3844610 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
        new ObjectStreamField(\"newRoleValue\", List.class),
        new ObjectStreamField(\"oldRoleValue\", List.class),
        new ObjectStreamField(\"relationId\", String.class),
        new ObjectStreamField(\"relationObjName\", ObjectName.class),
        new ObjectStreamField(\"relationTypeName\", String.class),
        new ObjectStreamField(\"roleName\", String.class),
        new ObjectStreamField(\"unregisterMBeanList\", List.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3844610 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2293250 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3844738 // serialPersistentFields (<unidirectional association>)
	relation 3844738 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField relationId String Relation identifier of
created/removed/updated relation
@serialField relationTypeName String Relation type name of
created/removed/updated relation
@serialField relationObjName ObjectName {@link ObjectName} of
the relation MBean of created/removed/updated relation (only if
the relation is represented by an MBean)
@serialField unregisterMBeanList List List of {@link
ObjectName}s of referenced MBeans to be unregistered due to
relation removal
@serialField roleName String Name of updated role (only for role update)
@serialField oldRoleValue List Old role value ({@link
ArrayList} of {@link ObjectName}s) (only for role update)
@serialField newRoleValue List New role value ({@link
ArrayList} of {@link ObjectName}s) (only for role update)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3844738 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2293378 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 182018 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK : Too bad, no compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3844866 // RELATION_BASIC_CREATION (<unidirectional association>)
	relation 3844866 --->
	  a role_name "RELATION_BASIC_CREATION" init_value " \"jmx.relation.creation.basic\"" class_relation const_relation public
	    comment " END Serialization compatibility stuff

 Notification types


Type for the creation of an internal relation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3844866 // RELATION_BASIC_CREATION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3844994 // RELATION_MBEAN_CREATION (<unidirectional association>)
	relation 3844994 --->
	  a role_name "RELATION_MBEAN_CREATION" init_value " \"jmx.relation.creation.mbean\"" class_relation const_relation public
	    comment "
Type for the relation MBean added into the Relation Service.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3844994 // RELATION_MBEAN_CREATION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3845122 // RELATION_BASIC_UPDATE (<unidirectional association>)
	relation 3845122 --->
	  a role_name "RELATION_BASIC_UPDATE" init_value " \"jmx.relation.update.basic\"" class_relation const_relation public
	    comment "
Type for an update of an internal relation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3845122 // RELATION_BASIC_UPDATE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3845250 // RELATION_MBEAN_UPDATE (<unidirectional association>)
	relation 3845250 --->
	  a role_name "RELATION_MBEAN_UPDATE" init_value " \"jmx.relation.update.mbean\"" class_relation const_relation public
	    comment "
Type for the update of a relation MBean.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3845250 // RELATION_MBEAN_UPDATE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3845378 // RELATION_BASIC_REMOVAL (<unidirectional association>)
	relation 3845378 --->
	  a role_name "RELATION_BASIC_REMOVAL" init_value " \"jmx.relation.removal.basic\"" class_relation const_relation public
	    comment "
Type for the removal from the Relation Service of an internal relation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3845378 // RELATION_BASIC_REMOVAL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3845506 // RELATION_MBEAN_REMOVAL (<unidirectional association>)
	relation 3845506 --->
	  a role_name "RELATION_MBEAN_REMOVAL" init_value " \"jmx.relation.removal.mbean\"" class_relation const_relation public
	    comment "
Type for the removal from the Relation Service of a relation MBean.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3845506 // RELATION_MBEAN_REMOVAL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3845634 // relationId (<unidirectional association>)
	relation 3845634 --->
	  a role_name "relationId" init_value " null" private
	    comment " Private members


@serial Relation identifier of created/removed/updated relation

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3845634 // relationId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3845762 // relationTypeName (<unidirectional association>)
	relation 3845762 --->
	  a role_name "relationTypeName" init_value " null" private
	    comment "
@serial Relation type name of created/removed/updated relation

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3845762 // relationTypeName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3845890 // relationObjName (<unidirectional association>)
	relation 3845890 --->
	  a role_name "relationObjName" init_value " null" private
	    comment "
@serial {@link ObjectName} of the relation MBean of created/removed/updated relation
        (only if the relation is represented by an MBean)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3845890 // relationObjName (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      classrelation 3846018 // unregisterMBeanList (<unidirectional association>)
	relation 3846018 --->
	  a role_name "unregisterMBeanList" init_value " null" private
	    comment "
@serial List of {@link ObjectName}s of referenced MBeans to be unregistered due to
        relation removal

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName> ${name}${value};
"
	    classrelation_ref 3846018 // unregisterMBeanList (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3846146 // roleName (<unidirectional association>)
	relation 3846146 --->
	  a role_name "roleName" init_value " null" private
	    comment "
@serial Name of updated role (only for role update)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3846146 // roleName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3846274 // oldRoleValue (<unidirectional association>)
	relation 3846274 --->
	  a role_name "oldRoleValue" init_value " null" private
	    comment "
@serial Old role value ({@link ArrayList} of {@link ObjectName}s) (only for role update)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName> ${name}${value};
"
	    classrelation_ref 3846274 // oldRoleValue (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3846402 // newRoleValue (<unidirectional association>)
	relation 3846402 --->
	  a role_name "newRoleValue" init_value " null" private
	    comment "
@serial New role value ({@link ArrayList} of {@link ObjectName}s) (only for role update)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName> ${name}${value};
"
	    classrelation_ref 3846402 // newRoleValue (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 9909506 "RelationNotification"
	public explicit_return_type ""
	nparams 9
	  param inout name "notifType" type class_ref 128130 // String
	  param inout name "sourceObj" type class_ref 129538 // Object
	  param in name "sequence" explicit_type "long"
	  param in name "timeStamp" explicit_type "long"
	  param inout name "message" type class_ref 128130 // String
	  param inout name "id" type class_ref 128130 // String
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "unregMBeanList" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}<ObjectName> ${p8}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Creates a notification for either a relation creation (RelationSupport
object created internally in the Relation Service, or an MBean added as a
relation) or for a relation removal from the Relation Service.

@param notifType  type of the notification; either:
<P>- RELATION_BASIC_CREATION
<P>- RELATION_MBEAN_CREATION
<P>- RELATION_BASIC_REMOVAL
<P>- RELATION_MBEAN_REMOVAL
@param sourceObj  source object, sending the notification.  This is either
an ObjectName or a RelationService object.  In the latter case it must be
the MBean emitting the notification; the MBean Server will rewrite the
source to be the ObjectName under which that MBean is registered.
@param sequence  sequence number to identify the notification
@param timeStamp  time stamp
@param message  human-readable message describing the notification
@param id  relation id identifying the relation in the Relation
Service
@param typeName  name of the relation type
@param objectName  ObjectName of the relation object if it is an MBean
(null for relations internally handled by the Relation Service)
@param unregMBeanList  list of ObjectNames of referenced MBeans
expected to be unregistered due to relation removal (only for removal,
due to CIM qualifiers, can be null)

@exception IllegalArgumentException  if:
<P>- no value for the notification type
<P>- the notification type is not RELATION_BASIC_CREATION,
RELATION_MBEAN_CREATION, RELATION_BASIC_REMOVAL or
RELATION_MBEAN_REMOVAL
<P>- no source object
<P>- the source object is not a Relation Service
<P>- no relation id
<P>- no relation type name
"
      end

      operation 9909634 "RelationNotification"
	public explicit_return_type ""
	nparams 11
	  param inout name "notifType" type class_ref 128130 // String
	  param inout name "sourceObj" type class_ref 129538 // Object
	  param in name "sequence" explicit_type "long"
	  param in name "timeStamp" explicit_type "long"
	  param inout name "message" type class_ref 128130 // String
	  param inout name "id" type class_ref 128130 // String
	  param inout name "typeName" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "name" type class_ref 128130 // String
	  param inout name "newValue" type class_ref 175362 // List
	  param inout name "oldValue" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8} ${p8}, ${t9}<ObjectName> ${p9}, ${t10}<ObjectName> ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a notification for a role update in a relation.

@param notifType  type of the notification; either:
<P>- RELATION_BASIC_UPDATE
<P>- RELATION_MBEAN_UPDATE
@param sourceObj  source object, sending the notification. This is either
an ObjectName or a RelationService object.  In the latter case it must be
the MBean emitting the notification; the MBean Server will rewrite the
source to be the ObjectName under which that MBean is registered.
@param sequence  sequence number to identify the notification
@param timeStamp  time stamp
@param message  human-readable message describing the notification
@param id  relation id identifying the relation in the Relation
Service
@param typeName  name of the relation type
@param objectName  ObjectName of the relation object if it is an MBean
(null for relations internally handled by the Relation Service)
@param name  name of the updated role
@param newValue  new role value (List of ObjectName objects)
@param oldValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9909762 "getRelationId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the relation identifier of created/removed/updated relation.

@return the relation id.
"
      end

      operation 9909890 "getRelationTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation type name of created/removed/updated relation.

@return the relation type name.
"
      end

      operation 9910018 "getObjectName"
	public return_type class_ref 485506 // ObjectName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ObjectName of the
created/removed/updated relation.

@return the ObjectName if the relation is an MBean, otherwise null.
"
      end

      operation 9910146 "getMBeansToUnregister"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of ObjectNames of MBeans expected to be unregistered
due to a relation removal (only for relation removal).

@return a {@link List} of {@link ObjectName}.
"
      end

      operation 9910274 "getRoleName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of updated role of updated relation (only for role update).

@return the name of the updated role.
"
      end

      operation 9910402 "getOldRoleValue"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns old value of updated role (only for role update).

@return the old value of the updated role.
"
      end

      operation 9910530 "getNewRoleValue"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns new value of updated role (only for role update).

@return the new value of the updated role.
"
      end

      operation 9910658 "isValidBasicStrict"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "notifType" type class_ref 128130 // String
	  param inout name "sourceObj" type class_ref 129538 // Object
	  param inout name "id" type class_ref 128130 // String
	  param inout name "typeName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

 Initializes members

 -param notifKind  1 for creation/removal, 2 for update
 -param notifType  type of the notification; either:
  - RELATION_BASIC_UPDATE
  - RELATION_MBEAN_UPDATE
  for an update, or:
  - RELATION_BASIC_CREATION
  - RELATION_MBEAN_CREATION
  - RELATION_BASIC_REMOVAL
  - RELATION_MBEAN_REMOVAL
  for a creation or removal
 -param sourceObj  source object, sending the notification. Will always
  be a RelationService object.
 -param sequence  sequence number to identify the notification
 -param timeStamp  time stamp
 -param message  human-readable message describing the notification
 -param id  relation id identifying the relation in the Relation
  Service
 -param typeName  name of the relation type
 -param objectName  ObjectName of the relation object if it is an MBean
  (null for relations internally handled by the Relation Service)
 -param unregMBeanList  list of ObjectNames of MBeans expected to be
  removed due to relation removal
 -param name  name of the updated role
 -param newValue  new value (List of ObjectName objects)
 -param oldValue  old value (List of ObjectName objects)

 -exception IllegalArgumentException  if:
  - no value for the notification type
  - incorrect notification type
  - no source object
  - the source object is not a Relation Service
  - no relation id
  - no relation type name
  - no role name (for role update)
  - no role old value (for role update)
  - no role new value (for role update)
 Despite the fact, that validation in constructor of RelationNotification prohibit
 creation of the class instance with null sourceObj its possible to set it to null later
 by public setSource() method.
 So we should relax validation rules to preserve serialization behavior compatibility."
      end

      operation 9910786 "isValidBasic"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "notifType" type class_ref 128130 // String
	  param inout name "sourceObj" type class_ref 129538 // Object
	  param inout name "id" type class_ref 128130 // String
	  param inout name "typeName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9910914 "isValidCreate"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "notifType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9911042 "isValidUpdate"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "notifType" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	  param inout name "newValue" type class_ref 175362 // List
	  param inout name "oldValue" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<ObjectName> ${p2}, ${t3}<ObjectName> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9911170 "safeGetObjectNameList"
	private return_type class_ref 186498 // ArrayList
	nparams 1
	  param inout name "src" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${t0}<ObjectName> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9911298 "safeGetObjectName"
	private return_type class_ref 485506 // ObjectName
	nparams 1
	  param inout name "src" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9911426 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RelationNotification} from an {@link ObjectInputStream}.
"
      end

      operation 9911554 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RelationNotification} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1201666 "RelationService"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Relation Service is in charge of creating and deleting relation types
and relations, of handling the consistency and of providing query
mechanisms.
<P>It implements the NotificationBroadcaster by extending
NotificationBroadcasterSupport to send notifications when a relation is
removed from it.
<P>It implements the NotificationListener interface to be able to receive
notifications concerning unregistration of MBeans referenced in relation
roles and of relation MBeans.
<P>It implements the MBeanRegistration interface to be able to retrieve
its ObjectName and MBean Server.

@since 1.5
"
      classrelation 3846530 // <generalisation>
	relation 3846530 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3846530 // <generalisation>
	  b parent class_ref 497922 // NotificationBroadcasterSupport
      end

      classrelation 3846658 // <realization>
	relation 3846658 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3846658 // <realization>
	  b parent class_ref 1201794 // RelationServiceMBean
      end

      classrelation 3846786 // <realization>
	relation 3846786 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3846786 // <realization>
	  b parent class_ref 488578 // MBeanRegistration
      end

      classrelation 3846914 // <realization>
	relation 3846914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3846914 // <realization>
	  b parent class_ref 487042 // NotificationListener
      end

      classrelation 3847042 // myRelId2ObjMap (<unidirectional association>)
	relation 3847042 --->
	  a role_name "myRelId2ObjMap" init_value " new HashMap<String,Object>()" private
	    comment " Private members

 Map associating:
      <relation id> -> <RelationSupport object/ObjectName>
 depending if the relation has been created using createRelation()
 method (so internally handled) or is an MBean added as a relation by the
 user
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Object> ${name}${value};
"
	    classrelation_ref 3847042 // myRelId2ObjMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3847170 // myRelId2RelTypeMap (<unidirectional association>)
	relation 3847170 --->
	  a role_name "myRelId2RelTypeMap" init_value " new HashMap<String,String>()" private
	    comment " Map associating:
      <relation id> -> <relation type name>
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,String> ${name}${value};
"
	    classrelation_ref 3847170 // myRelId2RelTypeMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3847298 // myRelMBeanObjName2RelIdMap (<unidirectional association>)
	relation 3847298 --->
	  a role_name "myRelMBeanObjName2RelIdMap" init_value "
        new HashMap<ObjectName,String>()" private
	    comment " Map associating:
      <relation MBean Object Name> -> <relation id>
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName,String> ${name}${value};
"
	    classrelation_ref 3847298 // myRelMBeanObjName2RelIdMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3847426 // myRelType2ObjMap (<unidirectional association>)
	relation 3847426 --->
	  a role_name "myRelType2ObjMap" init_value "
        new HashMap<String,RelationType>()" private
	    comment " Map associating:
       <relation type name> -> <RelationType object>
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,RelationType> ${name}${value};
"
	    classrelation_ref 3847426 // myRelType2ObjMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3847554 // myRelType2RelIdsMap (<unidirectional association>)
	relation 3847554 --->
	  a role_name "myRelType2RelIdsMap" init_value "
        new HashMap<String,List<String>>()" private
	    comment " Map associating:
       <relation type name> -> ArrayList of <relation id>
 to list all the relations of a given type
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,List<String>> ${name}${value};
"
	    classrelation_ref 3847554 // myRelType2RelIdsMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3847682 // myRefedMBeanObjName2RelIdsMap (<unidirectional association>)
	relation 3847682 --->
	  a role_name "myRefedMBeanObjName2RelIdsMap" init_value "
            new HashMap<ObjectName,Map<String,List<String>>>()" const_relation private
	    comment " Map associating:
       <ObjectName> -> HashMap
 the value HashMap mapping:
       <relation id> -> ArrayList of <role name>
 to track where a given MBean is referenced.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName,Map<String,List<String>>> ${name}${value};
"
	    classrelation_ref 3847682 // myRefedMBeanObjName2RelIdsMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 2293506 "myPurgeFlag"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Flag to indicate if, when a notification is received for the
 unregistration of an MBean referenced in a relation, if an immediate
 \"purge\" of the relations (look for the relations no
 longer valid) has to be performed , or if that will be performed only
 when the purgeRelations method will be explicitly called.
 true is immediate purge.
"
      end

      classrelation 3847810 // atomicSeqNo (<unidirectional association>)
	relation 3847810 --->
	  a role_name "atomicSeqNo" init_value " new AtomicLong()" const_relation private
	    comment " Internal counter to provide sequence numbers for notifications sent by:
 - the Relation Service
 - a relation handled by the Relation Service
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3847810 // atomicSeqNo (<unidirectional association>)
	  b parent class_ref 256386 // AtomicLong
      end

      classrelation 3847938 // myObjName (<unidirectional association>)
	relation 3847938 --->
	  a role_name "myObjName" init_value " null" private
	    comment " ObjectName used to register the Relation Service in the MBean Server
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3847938 // myObjName (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      classrelation 3848066 // myMBeanServer (<unidirectional association>)
	relation 3848066 --->
	  a role_name "myMBeanServer" init_value " null" private
	    comment " MBean Server where the Relation Service is registered
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3848066 // myMBeanServer (<unidirectional association>)
	  b parent class_ref 485122 // MBeanServer
      end

      classrelation 3848194 // myUnregNtfFilter (<unidirectional association>)
	relation 3848194 --->
	  a role_name "myUnregNtfFilter" init_value " null" private
	    comment " Filter registered in the MBean Server with the Relation Service to be
 informed of referenced MBean deregistrations
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3848194 // myUnregNtfFilter (<unidirectional association>)
	  b parent class_ref 1200386 // MBeanServerNotificationFilter
      end

      classrelation 3848322 // myUnregNtfList (<unidirectional association>)
	relation 3848322 --->
	  a role_name "myUnregNtfList" init_value "
        new ArrayList<MBeanServerNotification>()" private
	    comment " List of unregistration notifications received (storage used if purge
 of relations when unregistering a referenced MBean is not immediate but
 on user request)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MBeanServerNotification> ${name}${value};
"
	    classrelation_ref 3848322 // myUnregNtfList (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 9916034 "RelationService"
	public explicit_return_type ""
	nparams 1
	  param inout name "immediatePurgeFlag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor


Constructor.

@param immediatePurgeFlag  flag to indicate when a notification is
received for the unregistration of an MBean referenced in a relation, if
an immediate \"purge\" of the relations (look for the relations no
longer valid) has to be performed , or if that will be performed only
when the purgeRelations method will be explicitly called.
<P>true is immediate purge.
"
      end

      operation 9916162 "isActive"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the Relation Service is active.
Current condition is that the Relation Service must be registered in the
MBean Server

@exception RelationServiceNotRegisteredException  if it is not
registered
"
      end

      operation 9916290 "preRegister"
	public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " MBeanRegistration interface

 Pre-registration: retrieves its ObjectName and MBean Server

 No exception thrown."
      end

      operation 9916418 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 315010 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-registration: does nothing"
      end

      operation 9916546 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Pre-unregistration: does nothing"
      end

      operation 9916674 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-unregistration: does nothing"
      end

      operation 9916802 "getPurgeFlag"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the flag to indicate if when a notification is received for the
unregistration of an MBean referenced in a relation, if an immediate
\"purge\" of the relations (look for the relations no longer valid)
has to be performed , or if that will be performed only when the
purgeRelations method will be explicitly called.
<P>true is immediate purge.

@return true if purges are automatic.

@see #setPurgeFlag
"
      end

      operation 9916930 "setPurgeFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "purgeFlag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the flag to indicate if when a notification is received for the
unregistration of an MBean referenced in a relation, if an immediate
\"purge\" of the relations (look for the relations no longer valid)
has to be performed , or if that will be performed only when the
purgeRelations method will be explicitly called.
<P>true is immediate purge.

@param purgeFlag  flag

@see #getPurgeFlag
"
      end

      operation 9917058 "createRelationType"
	public explicit_return_type "void"
	nparams 2
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleInfoArray" type class_ref 1201922 // RoleInfo
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation type handling


Creates a relation type (a RelationTypeSupport object) with given
role infos (provided by the RoleInfo objects), and adds it in the
Relation Service.

@param relationTypeName  name of the relation type
@param roleInfoArray  array of role infos

@exception IllegalArgumentException  if null parameter
@exception InvalidRelationTypeException  If:
<P>- there is already a relation type with that name
<P>- the same name has been used for two different role infos
<P>- no role info provided
<P>- one null role info provided
"
      end

      operation 9917186 "addRelationType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationTypeObj" type class_ref 1202050 // RelationType
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds given object as a relation type. The object is expected to
implement the RelationType interface.

@param relationTypeObj  relation type object (implementing the
RelationType interface)

@exception IllegalArgumentException  if null parameter or if
{@link RelationType#getRelationTypeName
relationTypeObj.getRelationTypeName()} returns null.
@exception InvalidRelationTypeException  if:
<P>- the same name has been used for two different roles
<P>- no role info provided
<P>- one null role info provided
<P>- there is already a relation type with that name
"
      end

      operation 9917314 "getAllRelationTypeNames"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves names of all known relation types.

@return ArrayList of relation type names (Strings)
"
      end

      operation 9917442 "getRoleInfos"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RoleInfo> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves list of role infos (RoleInfo objects) of a given relation
type.

@param relationTypeName  name of relation type

@return ArrayList of RoleInfo.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if there is no relation type
with that name.
"
      end

      operation 9917570 "getRoleInfo"
	public return_type class_ref 1201922 // RoleInfo
	nparams 2
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleInfoName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1202178 // RoleInfoNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role info for given role name of a given relation type.

@param relationTypeName  name of relation type
@param roleInfoName  name of role

@return RoleInfo object.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if the relation type is not
known in the Relation Service
@exception RoleInfoNotFoundException  if the role is not part of the
relation type.
"
      end

      operation 9917698 "removeRelationType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes given relation type from Relation Service.
<P>The relation objects of that type will be removed from the
Relation Service.

@param relationTypeName  name of the relation type to be removed

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  If there is no relation type
with that name
"
      end

      operation 9917826 "createRelation"
	public explicit_return_type "void"
	nparams 3
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleList" type class_ref 1201026 // RoleList
	nexceptions 6
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1199618 // InvalidRelationIdException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation handling


Creates a simple relation (represented by a RelationSupport object) of
given relation type, and adds it in the Relation Service.
<P>Roles are initialized according to the role list provided in
parameter. The ones not initialized in this way are set to an empty
ArrayList of ObjectNames.
<P>A RelationNotification, with type RELATION_BASIC_CREATION, is sent.

@param relationId  relation identifier, to identify uniquely the relation
inside the Relation Service
@param relationTypeName  name of the relation type (has to be created
in the Relation Service)
@param roleList  role list to initialize roles of the relation (can
be null).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter, except the role
list which can be null if no role initialization
@exception RoleNotFoundException  if a value is provided for a role
that does not exist in the relation type
@exception InvalidRelationIdException  if relation id already used
@exception RelationTypeNotFoundException  if relation type not known in
Relation Service
@exception InvalidRoleValueException if:
<P>- the same role name is used for two different roles
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- an MBean provided for that role does not exist
"
      end

      operation 9917954 "addRelation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationObjectName" type class_ref 485506 // ObjectName
	nexceptions 9
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 742530 // NoSuchMethodException
	  exception class_ref 1199618 // InvalidRelationIdException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 1199874 // InvalidRelationServiceException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an MBean created by the user (and registered by him in the MBean
Server) as a relation in the Relation Service.
<P>To be added as a relation, the MBean must conform to the
following:
<P>- implement the Relation interface
<P>- have for RelationService ObjectName the ObjectName of current
Relation Service
<P>- have a relation id unique and unused in current Relation Service
<P>- have for relation type a relation type created in the Relation
Service
<P>- have roles conforming to the role info provided in the relation
type.

@param relationObjectName  ObjectName of the relation MBean to be added.

@exception IllegalArgumentException  if null parameter
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception NoSuchMethodException  If the MBean does not implement the
Relation interface
@exception InvalidRelationIdException  if:
<P>- no relation identifier in MBean
<P>- the relation identifier is already used in the Relation Service
@exception InstanceNotFoundException  if the MBean for given ObjectName
has not been registered
@exception InvalidRelationServiceException  if:
<P>- no Relation Service name in MBean
<P>- the Relation Service name in the MBean is not the one of the
current Relation Service
@exception RelationTypeNotFoundException  if:
<P>- no relation type name in MBean
<P>- the relation type name in MBean does not correspond to a relation
type created in the Relation Service
@exception InvalidRoleValueException  if:
<P>- the number of referenced MBeans in a role is less than
expected minimum degree
<P>- the number of referenced MBeans in a role exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- an MBean provided for a role does not exist
@exception RoleNotFoundException  if a value is provided for a role
that does not exist in the relation type
"
      end

      operation 9918082 "isRelationMBean"
	public return_type class_ref 485506 // ObjectName
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the relation is represented by an MBean (created by the user and
added as a relation in the Relation Service), returns the ObjectName of
the MBean.

@param relationId  relation id identifying the relation

@return ObjectName of the corresponding relation MBean, or null if
the relation is not an MBean.

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException there is no relation associated
to that id
"
      end

      operation 9918210 "isRelation"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "objectName" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation id associated to the given ObjectName if the
MBean has been added as a relation in the Relation Service.

@param objectName  ObjectName of supposed relation

@return relation id (String) or null (if the ObjectName is not a
relation handled by the Relation Service)

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9918338 "hasRelation"
	public return_type class_ref 315010 // Boolean
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if there is a relation identified in Relation Service with given
relation id.

@param relationId  relation id identifying the relation

@return boolean: true if there is a relation, false else

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9918466 "getAllRelationIds"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the relation ids for all the relations handled by the
Relation Service.

@return ArrayList of String
"
      end

      operation 9918594 "checkRoleReading"
	public return_type class_ref 137602 // Integer
	nparams 2
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if given Role can be read in a relation of the given type.

@param roleName  name of role to be checked
@param relationTypeName  name of the relation type

@return an Integer wrapping an integer corresponding to possible
problems represented as constants in RoleUnresolved:
<P>- 0 if role can be read
<P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
<P>- integer corresponding to RoleStatus.ROLE_NOT_READABLE

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if the relation type is not
known in the Relation Service
"
      end

      operation 9918722 "checkRoleWriting"
	public return_type class_ref 137602 // Integer
	nparams 3
	  param inout name "role" type class_ref 1201154 // Role
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "initFlag" type class_ref 315010 // Boolean
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if given Role can be set in a relation of given type.

@param role  role to be checked
@param relationTypeName  name of relation type
@param initFlag  flag to specify that the checking is done for the
initialization of a role, write access shall not be verified.

@return an Integer wrapping an integer corresponding to possible
problems represented as constants in RoleUnresolved:
<P>- 0 if role can be set
<P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
<P>- integer for RoleStatus.ROLE_NOT_WRITABLE
<P>- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE
<P>- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE
<P>- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS
<P>- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if unknown relation type
"
      end

      operation 9918850 "sendRelationCreationNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a relation creation.
The notification type is:
<P>- RelationNotification.RELATION_BASIC_CREATION if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_CREATION if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in Relation Service createRelation() and
addRelation() methods.

@param relationId  relation identifier of the updated relation

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id
"
      end

      operation 9918978 "sendRoleUpdateNotification"
	public explicit_return_type "void"
	nparams 3
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "newRole" type class_ref 1201154 // Role
	  param inout name "oldValue" type class_ref 175362 // List
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<ObjectName> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a role update in the
given relation. The notification type is:
<P>- RelationNotification.RELATION_BASIC_UPDATE if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_UPDATE if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in relation MBean setRole() (for given role) and
setRoles() (for each role) methods (implementation provided in
RelationSupport class).
<P>It is also called in Relation Service setRole() (for given role) and
setRoles() (for each role) methods.

@param relationId  relation identifier of the updated relation
@param newRole  new role (name and new value)
@param oldValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id
"
      end

      operation 9919106 "sendRelationRemovalNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "unregMBeanList" type class_ref 175362 // List
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<ObjectName> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a relation removal.
The notification type is:
<P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in Relation Service removeRelation() method.

@param relationId  relation identifier of the updated relation
@param unregMBeanList  List of ObjectNames of MBeans expected
to be unregistered due to relation removal (can be null)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id
"
      end

      operation 9919234 "updateRoleMap"
	public explicit_return_type "void"
	nparams 3
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "newRole" type class_ref 1201154 // Role
	  param inout name "oldValue" type class_ref 175362 // List
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<ObjectName> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles update of the Relation Service role map for the update of given
role in given relation.
<P>It is called in relation MBean setRole() (for given role) and
setRoles() (for each role) methods (implementation provided in
RelationSupport class).
<P>It is also called in Relation Service setRole() (for given role) and
setRoles() (for each role) methods.
<P>To allow the Relation Service to maintain the consistency (in case
of MBean unregistration) and to be able to perform queries, this method
must be called when a role is updated.

@param relationId  relation identifier of the updated relation
@param newRole  new role (name and new value)
@param oldValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationNotFoundException  if no relation for given id.
"
      end

      operation 9919362 "removeRelation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes given relation from the Relation Service.
<P>A RelationNotification notification is sent, its type being:
<P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation was
only internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is
registered as an MBean.
<P>For MBeans referenced in such relation, nothing will be done,

@param relationId  relation id of the relation to be removed

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation corresponding to
given relation id
"
      end

      operation 9919490 "purgeRelations"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Purges the relations.

<P>Depending on the purgeFlag value, this method is either called
automatically when a notification is received for the unregistration of
an MBean referenced in a relation (if the flag is set to true), or not
(if the flag is set to false).
<P>In that case it is up to the user to call it to maintain the
consistency of the relations. To be kept in mind that if an MBean is
unregistered and the purge not done immediately, if the ObjectName is
reused and assigned to another MBean referenced in a relation, calling
manually this purgeRelations() method will cause trouble, as will
consider the ObjectName as corresponding to the unregistered MBean, not
seeing the new one.

<P>The behavior depends on the cardinality of the role where the
unregistered MBean is referenced:
<P>- if removing one MBean reference in the role makes its number of
references less than the minimum degree, the relation has to be removed.
<P>- if the remaining number of references after removing the MBean
reference is still in the cardinality range, keep the relation and
update it calling its handleMBeanUnregistration() callback.

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server.
"
      end

      operation 9919618 "findReferencingRelations"
	public return_type class_ref 130178 // Map
	nparams 3
	  param inout name "mbeanName" type class_ref 485506 // ObjectName
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,List<String>> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the relations where a given MBean is referenced.
<P>This corresponds to the CIM \"References\" and \"ReferenceNames\"
operations.

@param mbeanName  ObjectName of MBean
@param relationTypeName  can be null; if specified, only the relations
of that type will be considered in the search. Else all relation types
are considered.
@param roleName  can be null; if specified, only the relations
where the MBean is referenced in that role will be returned. Else all
roles are considered.

@return an HashMap, where the keys are the relation ids of the relations
where the MBean is referenced, and the value is, for each key,
an ArrayList of role names (as an MBean can be referenced in several
roles in the same relation).

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9919746 "findAssociatedMBeans"
	public return_type class_ref 130178 // Map
	nparams 3
	  param inout name "mbeanName" type class_ref 485506 // ObjectName
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName,List<String>> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the MBeans associated to given one in a relation.
<P>This corresponds to CIM Associators and AssociatorNames operations.

@param mbeanName  ObjectName of MBean
@param relationTypeName  can be null; if specified, only the relations
of that type will be considered in the search. Else all
relation types are considered.
@param roleName  can be null; if specified, only the relations
where the MBean is referenced in that role will be considered. Else all
roles are considered.

@return an HashMap, where the keys are the ObjectNames of the MBeans
associated to given MBean, and the value is, for each key, an ArrayList
of the relation ids of the relations where the key MBean is
associated to given one (as they can be associated in several different
relations).

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9919874 "findRelationsOfType"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation ids for relations of the given type.

@param relationTypeName  relation type name

@return an ArrayList of relation ids.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if there is no relation type
with that name.
"
      end

      operation 9920002 "getRole"
	public return_type class_ref 175362 // List
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 4
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value for given role name in given relation.

@param relationId  relation id
@param roleName  name of role

@return the ArrayList of ObjectName objects being the role value

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if:
<P>- there is no role with given name
<P>or
<P>- the role is not readable.

@see #setRole
"
      end

      operation 9920130 "getRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleNameArray" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves values of roles with given names in given relation.

@param relationId  relation id
@param roleNameArray  array of names of roles to be retrieved

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
retrieved).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id

@see #setRoles
"
      end

      operation 9920258 "getAllRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles present in the relation.

@param relationId  relation id

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
readable).

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given id
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
"
      end

      operation 9920386 "getRoleCardinality"
	public return_type class_ref 137602 // Integer
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of MBeans currently referenced in the given role.

@param relationId  relation id
@param roleName  name of role

@return the number of currently referenced MBeans in that role

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if there is no role with given name
"
      end

      operation 9920514 "setRole"
	public explicit_return_type "void"
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "role" type class_ref 1201154 // Role
	nexceptions 5
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given role in given relation.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>The Relation Service will keep track of the change to keep the
consistency of relations by handling referenced MBean deregistrations.

@param relationId  relation id
@param role  role to be set (name and new value)

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if the role does not exist or is not
writable
@exception InvalidRoleValueException  if value provided for role is not
valid:
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>or
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>or
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>or
<P>- an MBean provided for that role does not exist

@see #getRole
"
      end

      operation 9920642 "setRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleList" type class_ref 1201026 // RoleList
	nexceptions 3
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given roles in given relation.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>The Relation Service keeps track of the changes to keep the
consistency of relations by handling referenced MBean deregistrations.

@param relationId  relation id
@param roleList  list of roles to be set

@return a RoleResult object, including a RoleList (for roles
successfully set) and a RoleUnresolvedList (for roles not
set).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id

@see #getRoles
"
      end

      operation 9920770 "getReferencedMBeans"
	public return_type class_ref 130178 // Map
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName,List<String>> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves MBeans referenced in the various roles of the relation.

@param relationId  relation id

@return a HashMap mapping:
<P> ObjectName {@literal ->} ArrayList of String (role names)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given
relation id
"
      end

      operation 9920898 "getRelationTypeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of associated relation type for given relation.

@param relationId  relation id

@return the name of the associated relation type.

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given
relation id
"
      end

      operation 9921026 "handleNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "notif" type class_ref 488706 // Notification
	  param inout name "handback" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NotificationListener Interface


Invoked when a JMX notification occurs.
Currently handles notifications for unregistration of MBeans, either
referenced in a relation role or being a relation itself.

@param notif  The notification.
@param handback  An opaque object which helps the listener to
associate information regarding the MBean emitter (can be null).
"
      end

      operation 9921154 "getNotificationInfo"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NotificationBroadcaster interface


Returns a NotificationInfo object containing the name of the Java class
of the notification and the notification types sent.
"
      end

      operation 9921282 "addRelationTypeInt"
	private explicit_return_type "void"
	nparams 1
	  param inout name "relationTypeObj" type class_ref 1202050 // RelationType
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

 Adds given object as a relation type.

 -param relationTypeObj  relation type object

 -exception IllegalArgumentException  if null parameter
 -exception InvalidRelationTypeException  if there is already a relation
  type with that name"
      end

      operation 9921410 "getRelationType"
	package return_type class_ref 1202050 // RelationType
	nparams 1
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves relation type with given name

 -param relationTypeName  expected name of a relation type created in the
  Relation Service

 -return RelationType object corresponding to given name

 -exception IllegalArgumentException  if null parameter
 -exception RelationTypeNotFoundException  if no relation type for that
  name created in Relation Service
"
      end

      operation 9921538 "getRelation"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Retrieves relation corresponding to given relation id.
 Returns either:
 - a RelationSupport object if the relation is internal
 or
 - the ObjectName of the corresponding MBean

 -param relationId  expected relation id

 -return RelationSupport object or ObjectName of relation with given id

 -exception IllegalArgumentException  if null parameter
 -exception RelationNotFoundException  if no relation for that
  relation id created in Relation Service
"
      end

      operation 9921666 "addNewMBeanReference"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a new MBean reference (reference to an ObjectName) in the
 referenced MBean map (myRefedMBeanObjName2RelIdsMap).

 -param objectName  ObjectName of new referenced MBean
 -param relationId  relation id of the relation where the MBean is
  referenced
 -param roleName  name of the role where the MBean is referenced

 -return boolean:
  - true  if the MBean was not referenced before, so really a new
    reference
  - false else

 -exception IllegalArgumentException  if null parameter"
      end

      operation 9921794 "removeMBeanReference"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "allRolesFlag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Removes an obsolete MBean reference (reference to an ObjectName) in
 the referenced MBean map (myRefedMBeanObjName2RelIdsMap).

 -param objectName  ObjectName of MBean no longer referenced
 -param relationId  relation id of the relation where the MBean was
  referenced
 -param roleName  name of the role where the MBean was referenced
 -param allRolesFlag  flag, if true removes reference to MBean for all
  roles in the relation, not only for the one above

 -return boolean:
  - true  if the MBean is no longer reference in any relation
  - false else

 -exception IllegalArgumentException  if null parameter"
      end

      operation 9921922 "updateUnregistrationListener"
	private explicit_return_type "void"
	nparams 2
	  param inout name "newRefList" type class_ref 175362 // List
	  param inout name "obsoleteRefList" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<ObjectName> ${p0}, ${t1}<ObjectName> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Updates the listener registered to the MBean Server to be informed of
 referenced MBean deregistrations

 -param newRefList  ArrayList of ObjectNames for new references done
  to MBeans (can be null)
 -param obsoleteRefList  ArrayList of ObjectNames for obsolete references
  to MBeans (can be null)

 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server."
      end

      operation 9922050 "addRelationInt"
	private explicit_return_type "void"
	nparams 6
	  param inout name "relationBaseFlag" explicit_type "boolean"
	  param inout name "relationObj" type class_ref 1202306 // RelationSupport
	  param inout name "relationObjName" type class_ref 485506 // ObjectName
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleList" type class_ref 1201026 // RoleList
	nexceptions 6
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1199618 // InvalidRelationIdException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Adds a relation (being either a RelationSupport object or an MBean
 referenced using its ObjectName) in the Relation Service.
 Will send a notification RelationNotification with type:
 - RelationNotification.RELATION_BASIC_CREATION for internal relation
   creation
 - RelationNotification.RELATION_MBEAN_CREATION for an MBean being added
   as a relation.

 -param relationBaseFlag  flag true if the relation is a RelationSupport
  object, false if it is an MBean
 -param relationObj  RelationSupport object (if relation is internal)
 -param relationObjName  ObjectName of the MBean to be added as a relation
  (only for the relation MBean)
 -param relationId  relation identifier, to uniquely identify the relation
  inside the Relation Service
 -param relationTypeName  name of the relation type (has to be created
  in the Relation Service)
 -param roleList  role list to initialize roles of the relation
  (can be null)

 -exception IllegalArgumentException  if null paramater
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RoleNotFoundException  if a value is provided for a role
  that does not exist in the relation type
 -exception InvalidRelationIdException  if relation id already used
 -exception RelationTypeNotFoundException  if relation type not known in
  Relation Service
 -exception InvalidRoleValueException if:
  - the same role name is used for two different roles
  - the number of referenced MBeans in given value is less than
    expected minimum degree
  - the number of referenced MBeans in provided value exceeds expected
    maximum degree
  - one referenced MBean in the value is not an Object of the MBean
    class expected for that role
  - an MBean provided for that role does not exist"
      end

      operation 9922178 "checkRoleInt"
	private return_type class_ref 137602 // Integer
	nparams 5
	  param in name "chkType" explicit_type "int"
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "roleValue" type class_ref 175362 // List
	  param inout name "roleInfo" type class_ref 1201922 // RoleInfo
	  param inout name "writeChkFlag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<ObjectName> ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks that given role conforms to given role info.

 -param chkType  type of check:
  - 1: read, just check read access
  - 2: write, check value and write access if writeChkFlag
 -param roleName  role name
 -param roleValue  role value
 -param roleInfo  corresponding role info
 -param writeChkFlag  boolean to specify a current write access and
  to check it

 -return Integer with value:
  - 0: ok
  - RoleStatus.NO_ROLE_WITH_NAME
  - RoleStatus.ROLE_NOT_READABLE
  - RoleStatus.ROLE_NOT_WRITABLE
  - RoleStatus.LESS_THAN_MIN_ROLE_DEGREE
  - RoleStatus.MORE_THAN_MAX_ROLE_DEGREE
  - RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS
  - RoleStatus.REF_MBEAN_NOT_REGISTERED

 -exception IllegalArgumentException  if null parameter"
      end

      operation 9922306 "initializeMissingRoles"
	private explicit_return_type "void"
	nparams 6
	  param inout name "relationBaseFlag" explicit_type "boolean"
	  param inout name "relationObj" type class_ref 1202306 // RelationSupport
	  param inout name "relationObjName" type class_ref 485506 // ObjectName
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleInfoList" type class_ref 175362 // List
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1200258 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}<RoleInfo> ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes roles associated to given role infos to default value (empty
 ArrayList of ObjectNames) in given relation.
 It will succeed for every role except if the role info has a minimum
 cardinality greater than 0. In that case, an InvalidRoleValueException
 will be raised.

 -param relationBaseFlag  flag true if the relation is a RelationSupport
  object, false if it is an MBean
 -param relationObj  RelationSupport object (if relation is internal)
 -param relationObjName  ObjectName of the MBean to be added as a relation
  (only for the relation MBean)
 -param relationId  relation id
 -param relationTypeName  name of the relation type (has to be created
  in the Relation Service)
 -param roleInfoList  list of role infos for roles to be defaulted

 -exception IllegalArgumentException  if null paramater
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception InvalidRoleValueException  if role must have a non-empty
  value
 Revisit [cebro] Handle CIM qualifiers as REQUIRED to detect roles which
    should have been initialized by the user"
      end

      operation 9922434 "throwRoleProblemException"
	class_operation package explicit_return_type "void"
	nparams 2
	  param in name "pbType" explicit_type "int"
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Throws an exception corresponding to a given problem type

 -param pbType  possible problem, defined in RoleUnresolved
 -param roleName  role name

 -exception IllegalArgumentException  if null parameter
 -exception RoleNotFoundException  for problems:
  - NO_ROLE_WITH_NAME
  - ROLE_NOT_READABLE
  - ROLE_NOT_WRITABLE
 -exception InvalidRoleValueException  for problems:
  - LESS_THAN_MIN_ROLE_DEGREE
  - MORE_THAN_MAX_ROLE_DEGREE
  - REF_MBEAN_OF_INCORRECT_CLASS
  - REF_MBEAN_NOT_REGISTERED"
      end

      operation 9922562 "sendNotificationInt"
	private explicit_return_type "void"
	nparams 7
	  param in name "intNtfType" explicit_type "int"
	  param inout name "message" type class_ref 128130 // String
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "unregMBeanList" type class_ref 175362 // List
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "roleNewValue" type class_ref 175362 // List
	  param inout name "oldValue" type class_ref 175362 // List
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<ObjectName> ${p3}, ${t4} ${p4}, ${t5}<ObjectName> ${p5}, ${t6}<ObjectName> ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sends a notification of given type, with given parameters

 -param intNtfType  integer to represent notification type:
  - 1 : create
  - 2 : update
  - 3 : delete
 -param message  human-readable message
 -param relationId  relation id of the created/updated/deleted relation
 -param unregMBeanList  list of ObjectNames of referenced MBeans
  expected to be unregistered due to relation removal (only for removal,
  due to CIM qualifiers, can be null)
 -param roleName  role name
 -param roleNewValue  role new value (ArrayList of ObjectNames)
 -param oldValue  old role value (ArrayList of ObjectNames)

 -exception IllegalArgument  if null parameter
 -exception RelationNotFoundException  if no relation for given id"
      end

      operation 9922690 "handleReferenceUnregistration"
	private explicit_return_type "void"
	nparams 3
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "roleNameList" type class_ref 175362 // List
	nexceptions 4
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks, for the unregistration of an MBean referenced in the roles given
 in parameter, if the relation has to be removed or not, regarding
 expected minimum role cardinality and current number of
 references in each role after removal of the current one.
 If the relation is kept, calls handleMBeanUnregistration() callback of
 the relation to update it.

 -param relationId  relation id
 -param objectName  ObjectName of the unregistered MBean
 -param roleNameList  list of names of roles where the unregistered
  MBean is referenced.

 -exception IllegalArgumentException  if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationNotFoundException  if unknown relation id
 -exception RoleNotFoundException  if one role given as parameter does
  not exist in the relation"
      end
    end

    class 1201794 "RelationServiceMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Relation Service is in charge of creating and deleting relation types
and relations, of handling the consistency and of providing query
mechanisms.

@since 1.5
"
      operation 9911682 "isActive"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the Relation Service is active.
Current condition is that the Relation Service must be registered in the
MBean Server

@exception RelationServiceNotRegisteredException  if it is not
registered
"
      end

      operation 9911810 "getPurgeFlag"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the flag to indicate if when a notification is received for the
unregistration of an MBean referenced in a relation, if an immediate
\"purge\" of the relations (look for the relations no longer valid)
has to be performed, or if that will be performed only when the
purgeRelations method is explicitly called.
<P>true is immediate purge.

@return true if purges are immediate.

@see #setPurgeFlag
"
      end

      operation 9911938 "setPurgeFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "purgeFlag" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the flag to indicate if when a notification is received for the
unregistration of an MBean referenced in a relation, if an immediate
\"purge\" of the relations (look for the relations no longer valid)
has to be performed, or if that will be performed only when the
purgeRelations method is explicitly called.
<P>true is immediate purge.

@param purgeFlag  flag

@see #getPurgeFlag
"
      end

      operation 9912066 "createRelationType"
	public explicit_return_type "void"
	nparams 2
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleInfoArray" type class_ref 1201922 // RoleInfo
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation type handling


Creates a relation type (RelationTypeSupport object) with given
role infos (provided by the RoleInfo objects), and adds it in the
Relation Service.

@param relationTypeName  name of the relation type
@param roleInfoArray  array of role infos

@exception IllegalArgumentException  if null parameter
@exception InvalidRelationTypeException  If:
<P>- there is already a relation type with that name
<P>- the same name has been used for two different role infos
<P>- no role info provided
<P>- one null role info provided
"
      end

      operation 9912194 "addRelationType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationTypeObj" type class_ref 1202050 // RelationType
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds given object as a relation type. The object is expected to
implement the RelationType interface.

@param relationTypeObj  relation type object (implementing the
RelationType interface)

@exception IllegalArgumentException  if null parameter or if
{@link RelationType#getRelationTypeName
relationTypeObj.getRelationTypeName()} returns null.
@exception InvalidRelationTypeException  if there is already a relation
type with that name
"
      end

      operation 9912322 "getAllRelationTypeNames"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves names of all known relation types.

@return ArrayList of relation type names (Strings)
"
      end

      operation 9912450 "getRoleInfos"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RoleInfo> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves list of role infos (RoleInfo objects) of a given relation
type.

@param relationTypeName  name of relation type

@return ArrayList of RoleInfo.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if there is no relation type
with that name.
"
      end

      operation 9912578 "getRoleInfo"
	public return_type class_ref 1201922 // RoleInfo
	nparams 2
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleInfoName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1202178 // RoleInfoNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role info for given role of a given relation type.

@param relationTypeName  name of relation type
@param roleInfoName  name of role

@return RoleInfo object.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if the relation type is not
known in the Relation Service
@exception RoleInfoNotFoundException  if the role is not part of the
relation type.
"
      end

      operation 9912706 "removeRelationType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes given relation type from Relation Service.
<P>The relation objects of that type will be removed from the
Relation Service.

@param relationTypeName  name of the relation type to be removed

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  If there is no relation type
with that name
"
      end

      operation 9912834 "createRelation"
	public explicit_return_type "void"
	nparams 3
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleList" type class_ref 1201026 // RoleList
	nexceptions 6
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1199618 // InvalidRelationIdException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation handling


Creates a simple relation (represented by a RelationSupport object) of
given relation type, and adds it in the Relation Service.
<P>Roles are initialized according to the role list provided in
parameter. The ones not initialized in this way are set to an empty
ArrayList of ObjectNames.
<P>A RelationNotification, with type RELATION_BASIC_CREATION, is sent.

@param relationId  relation identifier, to identify uniquely the relation
inside the Relation Service
@param relationTypeName  name of the relation type (has to be created
in the Relation Service)
@param roleList  role list to initialize roles of the relation (can
be null).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RoleNotFoundException  if a value is provided for a role
that does not exist in the relation type
@exception InvalidRelationIdException  if relation id already used
@exception RelationTypeNotFoundException  if relation type not known in
Relation Service
@exception InvalidRoleValueException if:
<P>- the same role name is used for two different roles
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- an MBean provided for that role does not exist
"
      end

      operation 9912962 "addRelation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationObjectName" type class_ref 485506 // ObjectName
	nexceptions 9
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 742530 // NoSuchMethodException
	  exception class_ref 1199618 // InvalidRelationIdException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 1199874 // InvalidRelationServiceException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an MBean created by the user (and registered by him in the MBean
Server) as a relation in the Relation Service.
<P>To be added as a relation, the MBean must conform to the
following:
<P>- implement the Relation interface
<P>- have for RelationService ObjectName the ObjectName of current
Relation Service
<P>- have a relation id that is unique and unused in current Relation Service
<P>- have for relation type a relation type created in the Relation
Service
<P>- have roles conforming to the role info provided in the relation
type.

@param relationObjectName  ObjectName of the relation MBean to be added.

@exception IllegalArgumentException  if null parameter
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception NoSuchMethodException  If the MBean does not implement the
Relation interface
@exception InvalidRelationIdException  if:
<P>- no relation identifier in MBean
<P>- the relation identifier is already used in the Relation Service
@exception InstanceNotFoundException  if the MBean for given ObjectName
has not been registered
@exception InvalidRelationServiceException  if:
<P>- no Relation Service name in MBean
<P>- the Relation Service name in the MBean is not the one of the
current Relation Service
@exception RelationTypeNotFoundException  if:
<P>- no relation type name in MBean
<P>- the relation type name in MBean does not correspond to a relation
type created in the Relation Service
@exception InvalidRoleValueException  if:
<P>- the number of referenced MBeans in a role is less than
expected minimum degree
<P>- the number of referenced MBeans in a role exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- an MBean provided for a role does not exist
@exception RoleNotFoundException  if a value is provided for a role
that does not exist in the relation type
"
      end

      operation 9913090 "isRelationMBean"
	public return_type class_ref 485506 // ObjectName
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the relation is represented by an MBean (created by the user and
added as a relation in the Relation Service), returns the ObjectName of
the MBean.

@param relationId  relation id identifying the relation

@return ObjectName of the corresponding relation MBean, or null if
the relation is not an MBean.

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException there is no relation associated
to that id
"
      end

      operation 9913218 "isRelation"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "objectName" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation id associated to the given ObjectName if the
MBean has been added as a relation in the Relation Service.

@param objectName  ObjectName of supposed relation

@return relation id (String) or null (if the ObjectName is not a
relation handled by the Relation Service)

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9913346 "hasRelation"
	public return_type class_ref 315010 // Boolean
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if there is a relation identified in Relation Service with given
relation id.

@param relationId  relation id identifying the relation

@return boolean: true if there is a relation, false else

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9913474 "getAllRelationIds"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the relation ids for all the relations handled by the
Relation Service.

@return ArrayList of String
"
      end

      operation 9913602 "checkRoleReading"
	public return_type class_ref 137602 // Integer
	nparams 2
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if given Role can be read in a relation of the given type.

@param roleName  name of role to be checked
@param relationTypeName  name of the relation type

@return an Integer wrapping an integer corresponding to possible
problems represented as constants in RoleUnresolved:
<P>- 0 if role can be read
<P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
<P>- integer corresponding to RoleStatus.ROLE_NOT_READABLE

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if the relation type is not
known in the Relation Service
"
      end

      operation 9913730 "checkRoleWriting"
	public return_type class_ref 137602 // Integer
	nparams 3
	  param inout name "role" type class_ref 1201154 // Role
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "initFlag" type class_ref 315010 // Boolean
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if given Role can be set in a relation of given type.

@param role  role to be checked
@param relationTypeName  name of relation type
@param initFlag  flag to specify that the checking is done for the
initialization of a role, write access shall not be verified.

@return an Integer wrapping an integer corresponding to possible
problems represented as constants in RoleUnresolved:
<P>- 0 if role can be set
<P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
<P>- integer for RoleStatus.ROLE_NOT_WRITABLE
<P>- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE
<P>- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE
<P>- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS
<P>- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if unknown relation type
"
      end

      operation 9913858 "sendRelationCreationNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a relation creation.
The notification type is:
<P>- RelationNotification.RELATION_BASIC_CREATION if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_CREATION if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in Relation Service createRelation() and
addRelation() methods.

@param relationId  relation identifier of the updated relation

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id
"
      end

      operation 9913986 "sendRoleUpdateNotification"
	public explicit_return_type "void"
	nparams 3
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "newRole" type class_ref 1201154 // Role
	  param inout name "oldRoleValue" type class_ref 175362 // List
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<ObjectName> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a role update in the
given relation. The notification type is:
<P>- RelationNotification.RELATION_BASIC_UPDATE if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_UPDATE if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in relation MBean setRole() (for given role) and
setRoles() (for each role) methods (implementation provided in
RelationSupport class).
<P>It is also called in Relation Service setRole() (for given role) and
setRoles() (for each role) methods.

@param relationId  relation identifier of the updated relation
@param newRole  new role (name and new value)
@param oldRoleValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id
"
      end

      operation 9914114 "sendRelationRemovalNotification"
	public explicit_return_type "void"
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "unregMBeanList" type class_ref 175362 // List
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<ObjectName> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a notification (RelationNotification) for a relation removal.
The notification type is:
<P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation is an
object internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a
MBean added as a relation.
<P>The source object is the Relation Service itself.
<P>It is called in Relation Service removeRelation() method.

@param relationId  relation identifier of the updated relation
@param unregMBeanList  List of ObjectNames of MBeans expected
to be unregistered due to relation removal (can be null)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if there is no relation for given
relation id
"
      end

      operation 9914242 "updateRoleMap"
	public explicit_return_type "void"
	nparams 3
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "newRole" type class_ref 1201154 // Role
	  param inout name "oldRoleValue" type class_ref 175362 // List
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<ObjectName> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles update of the Relation Service role map for the update of given
role in given relation.
<P>It is called in relation MBean setRole() (for given role) and
setRoles() (for each role) methods (implementation provided in
RelationSupport class).
<P>It is also called in Relation Service setRole() (for given role) and
setRoles() (for each role) methods.
<P>To allow the Relation Service to maintain the consistency (in case
of MBean unregistration) and to be able to perform queries, this method
must be called when a role is updated.

@param relationId  relation identifier of the updated relation
@param newRole  new role (name and new value)
@param oldRoleValue  old role value (List of ObjectName objects)

@exception IllegalArgumentException  if null parameter
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationNotFoundException  if no relation for given id.
"
      end

      operation 9914370 "removeRelation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes given relation from the Relation Service.
<P>A RelationNotification notification is sent, its type being:
<P>- RelationNotification.RELATION_BASIC_REMOVAL if the relation was
only internal to the Relation Service
<P>- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is
registered as an MBean.
<P>For MBeans referenced in such relation, nothing will be done,

@param relationId  relation id of the relation to be removed

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation corresponding to
given relation id
"
      end

      operation 9914498 "purgeRelations"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Purges the relations.

<P>Depending on the purgeFlag value, this method is either called
automatically when a notification is received for the unregistration of
an MBean referenced in a relation (if the flag is set to true), or not
(if the flag is set to false).
<P>In that case it is up to the user to call it to maintain the
consistency of the relations. To be kept in mind that if an MBean is
unregistered and the purge not done immediately, if the ObjectName is
reused and assigned to another MBean referenced in a relation, calling
manually this purgeRelations() method will cause trouble, as will
consider the ObjectName as corresponding to the unregistered MBean, not
seeing the new one.

<P>The behavior depends on the cardinality of the role where the
unregistered MBean is referenced:
<P>- if removing one MBean reference in the role makes its number of
references less than the minimum degree, the relation has to be removed.
<P>- if the remaining number of references after removing the MBean
reference is still in the cardinality range, keep the relation and
update it calling its handleMBeanUnregistration() callback.

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server.
"
      end

      operation 9914626 "findReferencingRelations"
	public return_type class_ref 130178 // Map
	nparams 3
	  param inout name "mbeanName" type class_ref 485506 // ObjectName
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,List<String>> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the relations where a given MBean is referenced.
<P>This corresponds to the CIM \"References\" and \"ReferenceNames\"
operations.

@param mbeanName  ObjectName of MBean
@param relationTypeName  can be null; if specified, only the relations
of that type will be considered in the search. Else all relation types
are considered.
@param roleName  can be null; if specified, only the relations
where the MBean is referenced in that role will be returned. Else all
roles are considered.

@return an HashMap, where the keys are the relation ids of the relations
where the MBean is referenced, and the value is, for each key,
an ArrayList of role names (as an MBean can be referenced in several
roles in the same relation).

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9914754 "findAssociatedMBeans"
	public return_type class_ref 130178 // Map
	nparams 3
	  param inout name "mbeanName" type class_ref 485506 // ObjectName
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName,List<String>> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the MBeans associated to given one in a relation.
<P>This corresponds to CIM Associators and AssociatorNames operations.

@param mbeanName  ObjectName of MBean
@param relationTypeName  can be null; if specified, only the relations
of that type will be considered in the search. Else all
relation types are considered.
@param roleName  can be null; if specified, only the relations
where the MBean is referenced in that role will be considered. Else all
roles are considered.

@return an HashMap, where the keys are the ObjectNames of the MBeans
associated to given MBean, and the value is, for each key, an ArrayList
of the relation ids of the relations where the key MBean is
associated to given one (as they can be associated in several different
relations).

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9914882 "findRelationsOfType"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "relationTypeName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the relation ids for relations of the given type.

@param relationTypeName  relation type name

@return an ArrayList of relation ids.

@exception IllegalArgumentException  if null parameter
@exception RelationTypeNotFoundException  if there is no relation type
with that name.
"
      end

      operation 9915010 "getRole"
	public return_type class_ref 175362 // List
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 4
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value for given role name in given relation.

@param relationId  relation id
@param roleName  name of role

@return the ArrayList of ObjectName objects being the role value

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if:
<P>- there is no role with given name
<P>or
<P>- the role is not readable.

@see #setRole
"
      end

      operation 9915138 "getRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleNameArray" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves values of roles with given names in given relation.

@param relationId  relation id
@param roleNameArray  array of names of roles to be retrieved

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
retrieved).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id

@see #setRoles
"
      end

      operation 9915266 "getAllRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles present in the relation.

@param relationId  relation id

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
readable).

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given id
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
"
      end

      operation 9915394 "getRoleCardinality"
	public return_type class_ref 137602 // Integer
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the number of MBeans currently referenced in the
given role.

@param relationId  relation id
@param roleName  name of role

@return the number of currently referenced MBeans in that role

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if there is no role with given name
"
      end

      operation 9915522 "setRole"
	public explicit_return_type "void"
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "role" type class_ref 1201154 // Role
	nexceptions 6
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given role in given relation.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>The Relation Service will keep track of the change to keep the
consistency of relations by handling referenced MBean deregistrations.

@param relationId  relation id
@param role  role to be set (name and new value)

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id
@exception RoleNotFoundException  if:
<P>- internal relation
<P>and
<P>- the role does not exist or is not writable
@exception InvalidRoleValueException  if internal relation and value
provided for role is not valid:
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>or
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>or
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>or
<P>- an MBean provided for that role does not exist
@exception RelationTypeNotFoundException  if unknown relation type

@see #getRole
"
      end

      operation 9915650 "setRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 2
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "roleList" type class_ref 1201026 // RoleList
	nexceptions 3
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given roles in given relation.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>The Relation Service keeps track of the changes to keep the
consistency of relations by handling referenced MBean deregistrations.

@param relationId  relation id
@param roleList  list of roles to be set

@return a RoleResult object, including a RoleList (for roles
successfully set) and a RoleUnresolvedList (for roles not
set).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation with given id

@see #getRoles
"
      end

      operation 9915778 "getReferencedMBeans"
	public return_type class_ref 130178 // Map
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName,List<String>> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves MBeans referenced in the various roles of the relation.

@param relationId  relation id

@return a HashMap mapping:
<P> ObjectName {@literal ->} ArrayList of String (role
names)

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given
relation id
"
      end

      operation 9915906 "getRelationTypeName"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "relationId" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1201410 // RelationNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of associated relation type for given relation.

@param relationId  relation id

@return the name of the associated relation type.

@exception IllegalArgumentException  if null parameter
@exception RelationNotFoundException  if no relation for given
relation id
"
      end
    end

    class 1201922 "RoleInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RoleInfo object summarises a role in a relation type.

<p>The <b>serialVersionUID</b> of this class is <code>2504952983494636987L</code>.

@since 1.5

 serialVersionUID not constant"
      classrelation 3851522 // <realization>
	relation 3851522 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3851522 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2295042 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7227256952085334351L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2295170 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2504952983494636987L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3851650 // oldSerialPersistentFields (<unidirectional association>)
	relation 3851650 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"myName\", String.class),
      new ObjectStreamField(\"myIsReadableFlg\", boolean.class),
      new ObjectStreamField(\"myIsWritableFlg\", boolean.class),
      new ObjectStreamField(\"myDescription\", String.class),
      new ObjectStreamField(\"myMinDegree\", int.class),
      new ObjectStreamField(\"myMaxDegree\", int.class),
      new ObjectStreamField(\"myRefMBeanClassName\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3851650 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3851778 // newSerialPersistentFields (<unidirectional association>)
	relation 3851778 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"name\", String.class),
      new ObjectStreamField(\"isReadable\", boolean.class),
      new ObjectStreamField(\"isWritable\", boolean.class),
      new ObjectStreamField(\"description\", String.class),
      new ObjectStreamField(\"minDegree\", int.class),
      new ObjectStreamField(\"maxDegree\", int.class),
      new ObjectStreamField(\"referencedMBeanClassName\", String.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3851778 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2295298 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3851906 // serialPersistentFields (<unidirectional association>)
	relation 3851906 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField name String Role name
@serialField isReadable boolean Read access mode: <code>true</code> if role is readable
@serialField isWritable boolean Write access mode: <code>true</code> if role is writable
@serialField description String Role description
@serialField minDegree int Minimum degree (i.e. minimum number of referenced MBeans in corresponding role)
@serialField maxDegree int Maximum degree (i.e. maximum number of referenced MBeans in corresponding role)
@serialField referencedMBeanClassName String Name of class of MBean(s) expected to be referenced in corresponding role

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3851906 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2295426 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 182402 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK : Too bad, no compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 2295554 "ROLE_CARDINALITY_INFINITY"
	class_attribute const_attribute public explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " END Serialization compatibility stuff

 Public constants


To specify an unlimited cardinality.

"
      end

      classrelation 3852034 // name (<unidirectional association>)
	relation 3852034 --->
	  a role_name "name" init_value " null" private
	    comment " Private members


@serial Role name

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3852034 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2295682 "isReadable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Read access mode: <code>true</code> if role is readable

"
      end

      attribute 2295810 "isWritable"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Write access mode: <code>true</code> if role is writable

"
      end

      classrelation 3852162 // description (<unidirectional association>)
	relation 3852162 --->
	  a role_name "description" init_value " null" private
	    comment "
@serial Role description

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3852162 // description (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2295938 "minDegree"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Minimum degree (i.e. minimum number of referenced MBeans in corresponding role)

"
      end

      attribute 2296066 "maxDegree"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Maximum degree (i.e. maximum number of referenced MBeans in corresponding role)

"
      end

      classrelation 3852290 // referencedMBeanClassName (<unidirectional association>)
	relation 3852290 --->
	  a role_name "referencedMBeanClassName" init_value " null" private
	    comment "
@serial Name of class of MBean(s) expected to be referenced in corresponding role

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3852290 // referencedMBeanClassName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9930498 "RoleInfo"
	public explicit_return_type ""
	nparams 7
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "mbeanClassName" type class_ref 128130 // String
	  param inout name "read" explicit_type "boolean"
	  param inout name "write" explicit_type "boolean"
	  param in name "min" explicit_type "int"
	  param in name "max" explicit_type "int"
	  param inout name "descr" type class_ref 128130 // String
	nexceptions 4
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200130 // InvalidRoleInfoException
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructor.

@param roleName  name of the role.
@param mbeanClassName  name of the class of MBean(s) expected to
be referenced in corresponding role.  If an MBean <em>M</em> is in
this role, then the MBean server must return true for
{@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.
@param read  flag to indicate if the corresponding role
can be read
@param write  flag to indicate if the corresponding role
can be set
@param min  minimum degree for role, i.e. minimum number of
MBeans to provide in corresponding role
Must be less than or equal to <tt>max</tt>.
(ROLE_CARDINALITY_INFINITY for unlimited)
@param max  maximum degree for role, i.e. maximum number of
MBeans to provide in corresponding role
Must be greater than or equal to <tt>min</tt>
(ROLE_CARDINALITY_INFINITY for unlimited)
@param descr  description of the role (can be null)

@exception IllegalArgumentException  if null parameter
@exception InvalidRoleInfoException  if the minimum degree is
greater than the maximum degree.
@exception ClassNotFoundException As of JMX 1.2, this exception
can no longer be thrown.  It is retained in the declaration of
this class for compatibility with existing code.
@exception NotCompliantMBeanException  if the class mbeanClassName
is not a MBean class.
"
      end

      operation 9930626 "RoleInfo"
	public explicit_return_type ""
	nparams 4
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "mbeanClassName" type class_ref 128130 // String
	  param inout name "read" explicit_type "boolean"
	  param inout name "write" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param roleName  name of the role
@param mbeanClassName  name of the class of MBean(s) expected to
be referenced in corresponding role.  If an MBean <em>M</em> is in
this role, then the MBean server must return true for
{@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.
@param read  flag to indicate if the corresponding role
can be read
@param write  flag to indicate if the corresponding role
can be set

<P>Minimum and maximum degrees defaulted to 1.
<P>Description of role defaulted to null.

@exception IllegalArgumentException  if null parameter
@exception ClassNotFoundException As of JMX 1.2, this exception
can no longer be thrown.  It is retained in the declaration of
this class for compatibility with existing code.
@exception NotCompliantMBeanException As of JMX 1.2, this
exception can no longer be thrown.  It is retained in the
declaration of this class for compatibility with existing code.
"
      end

      operation 9930754 "RoleInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "mbeanClassName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param roleName  name of the role
@param mbeanClassName  name of the class of MBean(s) expected to
be referenced in corresponding role.  If an MBean <em>M</em> is in
this role, then the MBean server must return true for
{@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.

<P>IsReadable and IsWritable defaulted to true.
<P>Minimum and maximum degrees defaulted to 1.
<P>Description of role defaulted to null.

@exception IllegalArgumentException  if null parameter
@exception ClassNotFoundException As of JMX 1.2, this exception
can no longer be thrown.  It is retained in the declaration of
this class for compatibility with existing code.
@exception NotCompliantMBeanException As of JMX 1.2, this
exception can no longer be thrown.  It is retained in the
declaration of this class for compatibility with existing code.
"
      end

      operation 9930882 "RoleInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "roleInfo" type class_ref 1201922 // RoleInfo
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy constructor.

@param roleInfo the <tt>RoleInfo</tt> instance to be copied.

@exception IllegalArgumentException  if null parameter
"
      end

      operation 9931010 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the name of the role.

@return the name of the role.
"
      end

      operation 9931138 "isReadable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns read access mode for the role (true if it is readable).

@return true if the role is readable.
"
      end

      operation 9931266 "isWritable"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns write access mode for the role (true if it is writable).

@return true if the role is writable.
"
      end

      operation 9931394 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns description text for the role.

@return the description of the role.
"
      end

      operation 9931522 "getMinDegree"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns minimum degree for corresponding role reference.

@return the minimum degree.
"
      end

      operation 9931650 "getMaxDegree"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns maximum degree for corresponding role reference.

@return the maximum degree.
"
      end

      operation 9931778 "getRefMBeanClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns name of type of MBean expected to be referenced in
corresponding role.</p>

@return the name of the referenced type.
"
      end

      operation 9931906 "checkMinDegree"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the <tt>value</tt> parameter is greater than or equal to
the expected minimum degree, false otherwise.

@param value  the value to be checked

@return true if greater than or equal to minimum degree, false otherwise.
"
      end

      operation 9932034 "checkMaxDegree"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the <tt>value</tt> parameter is lower than or equal to
the expected maximum degree, false otherwise.

@param value  the value to be checked

@return true if lower than or equal to maximum degree, false otherwise.
"
      end

      operation 9932162 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing the role info.

@return a description of the role info.
"
      end

      operation 9932290 "init"
	private explicit_return_type "void"
	nparams 7
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "mbeanClassName" type class_ref 128130 // String
	  param inout name "read" explicit_type "boolean"
	  param inout name "write" explicit_type "boolean"
	  param in name "min" explicit_type "int"
	  param in name "max" explicit_type "int"
	  param inout name "descr" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200130 // InvalidRoleInfoException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

 Initialization"
      end

      operation 9932418 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RoleInfo} from an {@link ObjectInputStream}.
"
      end

      operation 9932546 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RoleInfo} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1202050 "RelationType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The RelationType interface has to be implemented by any class expected to
represent a relation type.

@since 1.5
"
      classrelation 3849730 // <generalisation>
	relation 3849730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3849730 // <generalisation>
	  b parent class_ref 136578 // Serializable
      end

      operation 9927170 "getRelationTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the relation type name.

@return the relation type name.
"
      end

      operation 9927298 "getRoleInfos"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RoleInfo> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of role definitions (ArrayList of RoleInfo objects).

@return an {@link ArrayList} of {@link RoleInfo}.
"
      end

      operation 9927426 "getRoleInfo"
	public return_type class_ref 1201922 // RoleInfo
	nparams 1
	  param inout name "roleInfoName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1202178 // RoleInfoNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the role info (RoleInfo object) for the given role info name
(null if not found).

@param roleInfoName  role info name

@return RoleInfo object providing role definition
does not exist

@exception IllegalArgumentException  if null parameter
@exception RoleInfoNotFoundException  if no role info with that name in
relation type.
"
      end
    end

    class 1202178 "RoleInfoNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception is raised when there is no role info with given name in a
given relation type.

@since 1.5
"
      classrelation 3852418 // <generalisation>
	relation 3852418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3852418 // <generalisation>
	  b parent class_ref 1199746 // RelationException
      end

      attribute 2296194 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4394092234999959939L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9932674 "RoleInfoNotFoundException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor, no message put in exception.
"
      end

      operation 9932802 "RoleInfoNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with given message put in exception.

@param message the detail message.
"
      end
    end

    class 1202306 "RelationSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RelationSupport object is used internally by the Relation Service to
represent simple relations (only roles, no properties or methods), with an
unlimited number of roles, of any relation type. As internal representation,
it is not exposed to the user.
<P>RelationSupport class conforms to the design patterns of standard MBean. So
the user can decide to instantiate a RelationSupport object himself as
a MBean (as it follows the MBean design patterns), to register it in the
MBean Server, and then to add it in the Relation Service.
<P>The user can also, when creating his own MBean relation class, have it
extending RelationSupport, to retrieve the implementations of required
interfaces (see below).
<P>It is also possible to have in a user relation MBean class a member
being a RelationSupport object, and to implement the required interfaces by
delegating all to this member.
<P> RelationSupport implements the Relation interface (to be handled by the
Relation Service).
<P>It implements also the MBeanRegistration interface to be able to retrieve
the MBean Server where it is registered (if registered as a MBean) to access
to its Relation Service.

@since 1.5
"
      classrelation 3848706 // <realization>
	relation 3848706 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3848706 // <realization>
	  b parent class_ref 1202434 // RelationSupportMBean
      end

      classrelation 3848834 // <realization>
	relation 3848834 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3848834 // <realization>
	  b parent class_ref 488578 // MBeanRegistration
      end

      classrelation 3848962 // myRelId (<unidirectional association>)
	relation 3848962 --->
	  a role_name "myRelId" init_value " null" private
	    comment " Private members

 Relation identifier (expected to be unique in the Relation Service where
 the RelationSupport object will be added)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3848962 // myRelId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3849090 // myRelServiceName (<unidirectional association>)
	relation 3849090 --->
	  a role_name "myRelServiceName" init_value " null" private
	    comment " ObjectName of the Relation Service where the relation will be added
 REQUIRED if the RelationSupport is created by the user to be registered as
 a MBean, as it will have to access the Relation Service via the MBean
 Server to perform the check regarding the relation type.
 Is null if current object is directly created by the Relation Service,
 as the object will directly access it.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3849090 // myRelServiceName (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      classrelation 3849218 // myRelServiceMBeanServer (<unidirectional association>)
	relation 3849218 --->
	  a role_name "myRelServiceMBeanServer" init_value " null" private
	    comment " Reference to the MBean Server where the Relation Service is
 registered
 REQUIRED if the RelationSupport is created by the user to be registered as
 a MBean, as it will have to access the Relation Service via the MBean
 Server to perform the check regarding the relation type.
 If the Relationbase object is created by the Relation Service (use of
 createRelation() method), this is null as not needed, direct access to
 the Relation Service.
 If the Relationbase object is created by the user and registered as a
 MBean, this is set by the preRegister() method below.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3849218 // myRelServiceMBeanServer (<unidirectional association>)
	  b parent class_ref 485122 // MBeanServer
      end

      classrelation 3849346 // myRelTypeName (<unidirectional association>)
	relation 3849346 --->
	  a role_name "myRelTypeName" init_value " null" private
	    comment " Relation type name (must be known in the Relation Service where the
 relation will be added)
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3849346 // myRelTypeName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3849474 // myRoleName2ValueMap (<unidirectional association>)
	relation 3849474 --->
	  a role_name "myRoleName2ValueMap" init_value " new HashMap<String,Role>()" const_relation private
	    comment " Role map, mapping <role-name> -> <Role>
 Initialized by role list in the constructor, then updated:
 - if the relation is a MBean, via setRole() and setRoles() methods, or
   via Relation Service setRole() and setRoles() methods
 - if the relation is internal to the Relation Service, via
   setRoleInt() and setRolesInt() methods.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Role> ${name}${value};
"
	    classrelation_ref 3849474 // myRoleName2ValueMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 3849602 // myInRelServFlg (<unidirectional association>)
	relation 3849602 --->
	  a role_name "myInRelServFlg" init_value " new AtomicBoolean()" const_relation private
	    comment " Flag to indicate if the object has been added in the Relation Service
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3849602 // myInRelServFlg (<unidirectional association>)
	  b parent class_ref 357506 // AtomicBoolean
      end

      operation 9923330 "RelationSupport"
	public explicit_return_type ""
	nparams 4
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "relationServiceName" type class_ref 485506 // ObjectName
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "list" type class_ref 1201026 // RoleList
	nexceptions 2
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Creates a {@code RelationSupport} object.
<P>This constructor has to be used when the RelationSupport object will
be registered as a MBean by the user, or when creating a user relation
MBean whose class extends RelationSupport.
<P>Nothing is done at the Relation Service level, i.e.
the {@code RelationSupport} object is not added to the
{@code RelationService} and no checks are performed to
see if the provided values are correct.
The object is always created, EXCEPT if:
<P>- any of the required parameters is {@code null}.
<P>- the same name is used for two roles.
<P>To be handled as a relation, the {@code RelationSupport} object has
to be added to the Relation Service using the Relation Service method
addRelation().

@param relationId  relation identifier, to identify the relation in the
Relation Service.
<P>Expected to be unique in the given Relation Service.
@param relationServiceName  ObjectName of the Relation Service where
the relation will be registered.
<P>This parameter is required as it is the Relation Service that is
aware of the definition of the relation type of the given relation,
so that will be able to check update operations (set).
@param relationTypeName  Name of relation type.
<P>Expected to have been created in the given Relation Service.
@param list  list of roles (Role objects) to initialize the
relation. Can be {@code null}.
<P>Expected to conform to relation info in associated relation type.

@exception InvalidRoleValueException  if the same name is used for two
roles.
@exception IllegalArgumentException  if any of the required parameters
(relation id, relation service ObjectName, or relation type name) is
{@code null}.
"
      end

      operation 9923458 "RelationSupport"
	public explicit_return_type ""
	nparams 5
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "relationServiceName" type class_ref 485506 // ObjectName
	  param inout name "relationServiceMBeanServer" type class_ref 485122 // MBeanServer
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "list" type class_ref 1201026 // RoleList
	nexceptions 2
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code RelationSupport} object.
<P>This constructor has to be used when the user relation MBean
implements the interfaces expected to be supported by a relation by
delegating to a RelationSupport object.
<P>This object needs to know the Relation Service expected to handle the
relation. So it has to know the MBean Server where the Relation Service
is registered.
<P>According to a limitation, a relation MBean must be registered in the
same MBean Server as the Relation Service expected to handle it. So the
user relation MBean has to be created and registered, and then the
wrapped RelationSupport object can be created within the identified MBean
Server.
<P>Nothing is done at the Relation Service level, i.e.
the {@code RelationSupport} object is not added to the
{@code RelationService} and no checks are performed to
see if the provided values are correct.
The object is always created, EXCEPT if:
<P>- any of the required parameters is {@code null}.
<P>- the same name is used for two roles.
<P>To be handled as a relation, the {@code RelationSupport} object has
to be added to the Relation Service using the Relation Service method
addRelation().

@param relationId  relation identifier, to identify the relation in the
Relation Service.
<P>Expected to be unique in the given Relation Service.
@param relationServiceName  ObjectName of the Relation Service where
the relation will be registered.
<P>This parameter is required as it is the Relation Service that is
aware of the definition of the relation type of the given relation,
so that will be able to check update operations (set).
@param relationServiceMBeanServer  MBean Server where the wrapping MBean
is or will be registered.
<P>Expected to be the MBean Server where the Relation Service is or will
be registered.
@param relationTypeName  Name of relation type.
<P>Expected to have been created in the given Relation Service.
@param list  list of roles (Role objects) to initialize the
relation. Can be {@code null}.
<P>Expected to conform to relation info in associated relation type.

@exception InvalidRoleValueException  if the same name is used for two
roles.
@exception IllegalArgumentException  if any of the required parameters
(relation id, relation service ObjectName, relation service MBeanServer,
or relation type name) is {@code null}.
"
      end

      operation 9923586 "getRole"
	public return_type class_ref 175362 // List
	nparams 1
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Relation Interface


Retrieves role value for given role name.
<P>Checks if the role exists and is readable according to the relation
type.

@param roleName  name of role

@return the ArrayList of ObjectName objects being the role value

@exception IllegalArgumentException  if null role name
@exception RoleNotFoundException  if:
<P>- there is no role with given name
<P>- the role is not readable.
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server

@see #setRole
"
      end

      operation 9923714 "getRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 1
	  param inout name "roleNameArray" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves values of roles with given names.
<P>Checks for each role if it exists and is readable according to the
relation type.

@param roleNameArray  array of names of roles to be retrieved

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
retrieved).

@exception IllegalArgumentException  if null role name
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server

@see #setRoles
"
      end

      operation 9923842 "getAllRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 0
	nexceptions 1
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles present in the relation.

@return a RoleResult object, including a RoleList (for roles
successfully retrieved) and a RoleUnresolvedList (for roles not
readable).

@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
"
      end

      operation 9923970 "retrieveAllRoles"
	public return_type class_ref 1201026 // RoleList
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all roles in the relation without checking read mode.

@return a RoleList
"
      end

      operation 9924098 "getRoleCardinality"
	public return_type class_ref 137602 // Integer
	nparams 1
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of MBeans currently referenced in the given role.

@param roleName  name of role

@return the number of currently referenced MBeans in that role

@exception IllegalArgumentException  if null role name
@exception RoleNotFoundException  if there is no role with given name
"
      end

      operation 9924226 "setRole"
	public explicit_return_type "void"
	nparams 1
	  param inout name "role" type class_ref 1201154 // Role
	nexceptions 6
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given role.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>Will send a notification (RelationNotification with type
RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
relation is a MBean or not).

@param role  role to be set (name and new value)

@exception IllegalArgumentException  if null role
@exception RoleNotFoundException  if there is no role with the supplied
role's name or if the role is not writable (no test on the write access
mode performed when initializing the role)
@exception InvalidRoleValueException  if value provided for
role is not valid, i.e.:
<P>- the number of referenced MBeans in given value is less than
expected minimum degree
<P>- the number of referenced MBeans in provided value exceeds expected
maximum degree
<P>- one referenced MBean in the value is not an Object of the MBean
class expected for that role
<P>- a MBean provided for that role does not exist
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service
@exception RelationNotFoundException  if the relation has not been
added in the Relation Service.

@see #getRole
"
      end

      operation 9924354 "setRoles"
	public return_type class_ref 1200898 // RoleResult
	nparams 1
	  param inout name "list" type class_ref 1201026 // RoleList
	nexceptions 4
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given roles.
<P>Will check the role according to its corresponding role definition
provided in relation's relation type
<P>Will send one notification (RelationNotification with type
RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
relation is a MBean or not) per updated role.

@param list  list of roles to be set

@return a RoleResult object, including a RoleList (for roles
successfully set) and a RoleUnresolvedList (for roles not
set).

@exception IllegalArgumentException  if null role list
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if the relation MBean has not been
added in the Relation Service.

@see #getRoles
"
      end

      operation 9924482 "handleMBeanUnregistration"
	public explicit_return_type "void"
	nparams 2
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "roleName" type class_ref 128130 // String
	nexceptions 6
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Callback used by the Relation Service when a MBean referenced in a role
is unregistered.
<P>The Relation Service will call this method to let the relation
take action to reflect the impact of such unregistration.
<P>BEWARE. the user is not expected to call this method.
<P>Current implementation is to set the role with its current value
(list of ObjectNames of referenced MBeans) without the unregistered
one.

@param objectName  ObjectName of unregistered MBean
@param roleName  name of role where the MBean is referenced

@exception IllegalArgumentException  if null parameter
@exception RoleNotFoundException  if role does not exist in the
relation or is not writable
@exception InvalidRoleValueException  if role value does not conform to
the associated role info (this will never happen when called from the
Relation Service)
@exception RelationServiceNotRegisteredException  if the Relation
Service is not registered in the MBean Server
@exception RelationTypeNotFoundException  if the relation type has not
been declared in the Relation Service.
@exception RelationNotFoundException  if this method is called for a
relation MBean not added in the Relation Service.
"
      end

      operation 9924610 "getReferencedMBeans"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName,List<String>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves MBeans referenced in the various roles of the relation.

@return a HashMap mapping:
<P> ObjectName {@literal ->} ArrayList of String (role names)
"
      end

      operation 9924738 "getRelationTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns name of associated relation type.
"
      end

      operation 9924866 "getRelationServiceName"
	public return_type class_ref 485506 // ObjectName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns ObjectName of the Relation Service handling the relation.

@return the ObjectName of the Relation Service.
"
      end

      operation 9924994 "getRelationId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns relation identifier (used to uniquely identify the relation
inside the Relation Service).

@return the relation id.
"
      end

      operation 9925122 "preRegister"
	public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " MBeanRegistration interface

 Pre-registration: retrieves the MBean Server (useful to access to the
 Relation Service)
 This is the way to retrieve the MBean Server when the relation object is
 a MBean created by the user outside of the Relation Service.

 No exception thrown."
      end

      operation 9925250 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 315010 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-registration: does nothing"
      end

      operation 9925378 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Pre-unregistration: does nothing"
      end

      operation 9925506 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Post-unregistration: does nothing"
      end

      operation 9925634 "isInRelationService"
	public return_type class_ref 315010 // Boolean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Others


Returns an internal flag specifying if the object is still handled by
the Relation Service.
"
      end

      operation 9925762 "setRelationServiceManagementFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" type class_ref 315010 // Boolean
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9925890 "getRoleInt"
	package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "relationServCallFlg" explicit_type "boolean"
	  param inout name "relationServ" type class_ref 1201666 // RelationService
	  param inout name "multiRoleFlg" explicit_type "boolean"
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc

 Gets the role with given name
 Checks if the role exists and is readable according to the relation
 type.

 This method is called in getRole() above.
 It is also called in the Relation Service getRole() method.
 It is also called in getRolesInt() below (used for getRoles() above
 and for Relation Service getRoles() method).

 Depending on parameters reflecting its use (either in the scope of
 getting a single role or of getting several roles), will return:
 - in case of success:
   - for single role retrieval, the ArrayList of ObjectNames being the
     role value
   - for multi-role retrieval, the Role object itself
 - in case of failure (except critical exceptions):
   - for single role retrieval, if role does not exist or is not
     readable, an RoleNotFoundException exception is raised
   - for multi-role retrieval, a RoleUnresolved object

 -param roleName  name of role to be retrieved
 -param relationServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param relationServ  reference to Relation Service object, if object
  created by Relation Service.
 -param multiRoleFlg  true if getting the role in the scope of a
  multiple retrieval.

 -return:
  - for single role retrieval (multiRoleFlg false):
    - ArrayList of ObjectName objects, value of role with given name, if
      the role can be retrieved
    - raise a RoleNotFoundException exception else
  - for multi-role retrieval (multiRoleFlg true):
    - the Role object for given role name if role can be retrieved
    - a RoleUnresolved object with problem.

 -exception IllegalArgumentException  if null parameter
 -exception RoleNotFoundException  if multiRoleFlg is false and:
  - there is no role with given name
  or
  - the role is not readable.
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server"
      end

      operation 9926018 "getRolesInt"
	package return_type class_ref 1200898 // RoleResult
	nparams 3
	  param inout name "roleNameArray" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "relationServCallFlg" explicit_type "boolean"
	  param inout name "relationServ" type class_ref 1201666 // RelationService
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the given roles
 For each role, verifies if the role exists and is readable according to
 the relation type.

 This method is called in getRoles() above and in Relation Service
 getRoles() method.

 -param roleNameArray  array of names of roles to be retrieved
 -param relationServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param relationServ  reference to Relation Service object, if object
  created by Relation Service.

 -return a RoleResult object

 -exception IllegalArgumentException  if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server"
      end

      operation 9926146 "getAllRolesInt"
	package return_type class_ref 1200898 // RoleResult
	nparams 2
	  param inout name "relationServCallFlg" explicit_type "boolean"
	  param inout name "relationServ" type class_ref 1201666 // RelationService
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns all roles present in the relation

 -return a RoleResult object, including a RoleList (for roles
  successfully retrieved) and a RoleUnresolvedList (for roles not
  readable).

 -exception IllegalArgumentException if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
"
      end

      operation 9926274 "setRoleInt"
	package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "aRole" type class_ref 1201154 // Role
	  param inout name "relationServCallFlg" explicit_type "boolean"
	  param inout name "relationServ" type class_ref 1201666 // RelationService
	  param inout name "multiRoleFlg" explicit_type "boolean"
	nexceptions 6
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the role with given value

 This method is called in setRole() above.
 It is also called by the Relation Service setRole() method.
 It is also called in setRolesInt() method below (used in setRoles()
 above and in RelationService setRoles() method).

 Will check the role according to its corresponding role definition
 provided in relation's relation type
 Will send a notification (RelationNotification with type
 RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
 relation is a MBean or not) if not initialization of role.

 -param aRole  role to be set (name and new value)
 -param relationServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param relationServ  reference to Relation Service object, if internal
  relation
 -param multiRoleFlg  true if getting the role in the scope of a
  multiple retrieval.

 -return (except other \"critical\" exceptions):
  - for single role retrieval (multiRoleFlg false):
    - null if the role has been set
    - raise an InvalidRoleValueException
 else
  - for multi-role retrieval (multiRoleFlg true):
    - the Role object for given role name if role has been set
    - a RoleUnresolved object with problem else.

 -exception IllegalArgumentException if null parameter
 -exception RoleNotFoundException  if multiRoleFlg is false and:
  - internal relation and the role does not exist
  or
  - existing role (i.e. not initializing it) and the role is not
    writable.
 -exception InvalidRoleValueException  ifmultiRoleFlg is false and
  value provided for:
   - the number of referenced MBeans in given value is less than
     expected minimum degree
   or
   - the number of referenced MBeans in provided value exceeds expected
     maximum degree
   or
   - one referenced MBean in the value is not an Object of the MBean
     class expected for that role
   or
   - a MBean provided for that role does not exist
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationTypeNotFoundException  if relation type unknown
 -exception RelationNotFoundException  if a relation MBean has not been
  added in the Relation Service"
      end

      operation 9926402 "sendRoleUpdateNotification"
	private explicit_return_type "void"
	nparams 4
	  param inout name "newRole" type class_ref 1201154 // Role
	  param inout name "oldRoleValue" type class_ref 175362 // List
	  param inout name "relationServCallFlg" explicit_type "boolean"
	  param inout name "relationServ" type class_ref 1201666 // RelationService
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<ObjectName> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Requires the Relation Service to send a notification
 RelationNotification, with type being either:
 - RelationNotification.RELATION_BASIC_UPDATE if the updated relation is
   a relation internal to the Relation Service
 - RelationNotification.RELATION_MBEAN_UPDATE if the updated relation is
   a relation MBean.

 -param newRole  new role
 -param oldRoleValue  old role value (ArrayList of ObjectNames)
 -param relationServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param relationServ  reference to Relation Service object, if object
  created by Relation Service.

 -exception IllegalArgumentException  if null parameter provided
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationNotFoundException if:
  - relation MBean
  and
  - it has not been added into the Relation Service"
      end

      operation 9926530 "updateRelationServiceMap"
	private explicit_return_type "void"
	nparams 4
	  param inout name "newRole" type class_ref 1201154 // Role
	  param inout name "oldRoleValue" type class_ref 175362 // List
	  param inout name "relationServCallFlg" explicit_type "boolean"
	  param inout name "relationServ" type class_ref 1201666 // RelationService
	nexceptions 3
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<ObjectName> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Requires the Relation Service to update its internal map handling
 MBeans referenced in relations.
 The Relation Service will also update its recording as a listener to
 be informed about unregistration of new referenced MBeans, and no longer
 informed of MBeans no longer referenced.

 -param newRole  new role
 -param oldRoleValue  old role value (ArrayList of ObjectNames)
 -param relationServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param relationServ  reference to Relation Service object, if object
  created by Relation Service.

 -exception IllegalArgumentException  if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationNotFoundException if:
  - relation MBean
  and
  - the relation is not added in the Relation Service"
      end

      operation 9926658 "setRolesInt"
	package return_type class_ref 1200898 // RoleResult
	nparams 3
	  param inout name "list" type class_ref 1201026 // RoleList
	  param inout name "relationServCallFlg" explicit_type "boolean"
	  param inout name "relationServ" type class_ref 1201666 // RelationService
	nexceptions 4
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the given roles
 For each role:
 - will check the role according to its corresponding role definition
   provided in relation's relation type
 - will send a notification (RelationNotification with type
   RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
   relation is a MBean or not) for each updated role.

 This method is called in setRoles() above and in Relation Service
 setRoles() method.

 -param list  list of roles to be set
 -param relationServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param relationServ  reference to Relation Service object, if object
  created by Relation Service.

 -return a RoleResult object

 -exception IllegalArgumentException  if null parameter
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationTypeNotFoundException if:
  - relation MBean
  and
  - unknown relation type
 -exception RelationNotFoundException if:
  - relation MBean
 and
 - not added in the RS"
      end

      operation 9926786 "initMembers"
	private explicit_return_type "void"
	nparams 5
	  param inout name "relationId" type class_ref 128130 // String
	  param inout name "relationServiceName" type class_ref 485506 // ObjectName
	  param inout name "relationServiceMBeanServer" type class_ref 485122 // MBeanServer
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "list" type class_ref 1201026 // RoleList
	nexceptions 2
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes all members

 -param relationId  relation identifier, to identify the relation in the
 Relation Service.
 Expected to be unique in the given Relation Service.
 -param relationServiceName  ObjectName of the Relation Service where
 the relation will be registered.
 It is required as this is the Relation Service that is aware of the
 definition of the relation type of given relation, so that will be able
 to check update operations (set). Direct access via the Relation
 Service (RelationService.setRole()) do not need this information but
 as any user relation is a MBean, setRole() is part of its management
 interface and can be called directly on the user relation MBean. So the
 user relation MBean must be aware of the Relation Service where it will
 be added.
 -param relationTypeName  Name of relation type.
 Expected to have been created in given Relation Service.
 -param list  list of roles (Role objects) to initialized the
 relation. Can be null.
 Expected to conform to relation info in associated relation type.

 -exception InvalidRoleValueException  if the same name is used for two
  roles.
 -exception IllegalArgumentException  if a required value (Relation
  Service Object Name, etc.) is not provided as parameter."
      end

      operation 9926914 "initRoleMap"
	private explicit_return_type "void"
	nparams 1
	  param inout name "list" type class_ref 1201026 // RoleList
	nexceptions 1
	  exception class_ref 1200258 // InvalidRoleValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize the internal role map from given RoleList parameter

 -param list  role list. Can be null.
  As it is a RoleList object, it cannot include null (rejected).

 -exception InvalidRoleValueException  if the same role name is used for
  several roles.
"
      end

      operation 9927042 "handleMBeanUnregistrationInt"
	package explicit_return_type "void"
	nparams 4
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "roleName" type class_ref 128130 // String
	  param inout name "relationServCallFlg" explicit_type "boolean"
	  param inout name "relationServ" type class_ref 1201666 // RelationService
	nexceptions 6
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200642 // RoleNotFoundException
	  exception class_ref 1200258 // InvalidRoleValueException
	  exception class_ref 1200770 // RelationServiceNotRegisteredException
	  exception class_ref 1201282 // RelationTypeNotFoundException
	  exception class_ref 1201410 // RelationNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Callback used by the Relation Service when a MBean referenced in a role
 is unregistered.
 The Relation Service will call this method to let the relation
 take action to reflect the impact of such unregistration.
 Current implementation is to set the role with its current value
 (list of ObjectNames of referenced MBeans) without the unregistered
 one.

 -param objectName  ObjectName of unregistered MBean
 -param roleName  name of role where the MBean is referenced
 -param relationServCallFlg  true if call from the Relation Service; this
  will happen if the current RelationSupport object has been created by
  the Relation Service (via createRelation()) method, so direct access is
  possible.
 -param relationServ  reference to Relation Service object, if internal
  relation

 -exception IllegalArgumentException if null parameter
 -exception RoleNotFoundException  if:
  - the role does not exist
  or
  - role not writable.
 -exception InvalidRoleValueException  if value provided for:
   - the number of referenced MBeans in given value is less than
     expected minimum degree
   or
   - the number of referenced MBeans in provided value exceeds expected
     maximum degree
   or
   - one referenced MBean in the value is not an Object of the MBean
     class expected for that role
   or
   - a MBean provided for that role does not exist
 -exception RelationServiceNotRegisteredException  if the Relation
  Service is not registered in the MBean Server
 -exception RelationTypeNotFoundException if unknown relation type
 -exception RelationNotFoundException if current relation has not been
  added in the RS"
      end
    end

    class 1202434 "RelationSupportMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RelationSupport object is used internally by the Relation Service to
represent simple relations (only roles, no properties or methods), with an
unlimited number of roles, of any relation type. As internal representation,
it is not exposed to the user.
<P>RelationSupport class conforms to the design patterns of standard MBean. So
the user can decide to instantiate a RelationSupport object himself as
a MBean (as it follows the MBean design patterns), to register it in the
MBean Server, and then to add it in the Relation Service.
<P>The user can also, when creating his own MBean relation class, have it
extending RelationSupport, to retrieve the implementations of required
interfaces (see below).
<P>It is also possible to have in a user relation MBean class a member
being a RelationSupport object, and to implement the required interfaces by
delegating all to this member.
<P> RelationSupport implements the Relation interface (to be handled by the
Relation Service).

@since 1.5
"
      classrelation 3848578 // <generalisation>
	relation 3848578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3848578 // <generalisation>
	  b parent class_ref 1200514 // Relation
      end

      operation 9923074 "isInRelationService"
	public return_type class_ref 315010 // Boolean
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an internal flag specifying if the object is still handled by
the Relation Service.

@return a Boolean equal to {@link Boolean#TRUE} if the object
is still handled by the Relation Service and {@link
Boolean#FALSE} otherwise.
"
      end

      operation 9923202 "setRelationServiceManagementFlag"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" type class_ref 315010 // Boolean
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Specifies whether this relation is handled by the Relation
Service.</p>
<P>BEWARE, this method has to be exposed as the Relation Service will
access the relation through its management interface. It is RECOMMENDED
NOT to use this method. Using it does not affect the registration of the
relation object in the Relation Service, but will provide wrong
information about it!

@param flag whether the relation is handled by the Relation Service.

@exception IllegalArgumentException  if null parameter
"
      end
    end

    class 1202562 "RelationTypeSupport"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RelationTypeSupport object implements the RelationType interface.
<P>It represents a relation type, providing role information for each role
expected to be supported in every relation of that type.

<P>A relation type includes a relation type name and a list of
role infos (represented by RoleInfo objects).

<P>A relation type has to be declared in the Relation Service:
<P>- either using the createRelationType() method, where a RelationTypeSupport
object will be created and kept in the Relation Service
<P>- either using the addRelationType() method where the user has to create
an object implementing the RelationType interface, and this object will be
used as representing a relation type in the Relation Service.

<p>The <b>serialVersionUID</b> of this class is <code>4611072955724144607L</code>.

@since 1.5

 serialVersionUID not constant"
      classrelation 3849986 // <realization>
	relation 3849986 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3849986 // <realization>
	  b parent class_ref 1202050 // RelationType
      end

      attribute 2293890 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8179019472410837190L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2294018 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4611072955724144607L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3850114 // oldSerialPersistentFields (<unidirectional association>)
	relation 3850114 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"myTypeName\", String.class),
      new ObjectStreamField(\"myRoleName2InfoMap\", HashMap.class),
      new ObjectStreamField(\"myIsInRelServFlg\", boolean.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3850114 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3850242 // newSerialPersistentFields (<unidirectional association>)
	relation 3850242 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"typeName\", String.class),
      new ObjectStreamField(\"roleName2InfoMap\", Map.class),
      new ObjectStreamField(\"isInRelationService\", boolean.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3850242 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2294146 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3850370 // serialPersistentFields (<unidirectional association>)
	relation 3850370 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment "
@serialField typeName String Relation type name
@serialField roleName2InfoMap Map {@link Map} holding the mapping:
             &lt;role name ({@link String})&gt; -&gt; &lt;role info ({@link RoleInfo} object)&gt;
@serialField isInRelationService boolean Flag specifying whether the relation type has been declared in the
             Relation Service (so can no longer be updated)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3850370 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2294274 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 182146 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK : Too bad, no compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3850498 // typeName (<unidirectional association>)
	relation 3850498 --->
	  a role_name "typeName" init_value " null" private
	    comment " END Serialization compatibility stuff

 Private members


@serial Relation type name

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3850498 // typeName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3850626 // roleName2InfoMap (<unidirectional association>)
	relation 3850626 --->
	  a role_name "roleName2InfoMap" init_value "
        new HashMap<String,RoleInfo>()" private
	    comment "
@serial {@link Map} holding the mapping:
          &lt;role name ({@link String})&gt; -&gt; &lt;role info ({@link RoleInfo} object)&gt;

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,RoleInfo> ${name}${value};
"
	    classrelation_ref 3850626 // roleName2InfoMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 2294402 "isInRelationService"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Flag specifying whether the relation type has been declared in the
        Relation Service (so can no longer be updated)

"
      end

      operation 9927810 "RelationTypeSupport"
	public explicit_return_type ""
	nparams 2
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleInfoArray" type class_ref 1201922 // RoleInfo
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructor where all role definitions are dynamically created and
passed as parameter.

@param relationTypeName  Name of relation type
@param roleInfoArray  List of role definitions (RoleInfo objects)

@exception IllegalArgumentException  if null parameter
@exception InvalidRelationTypeException  if:
<P>- the same name has been used for two different roles
<P>- no role info provided
<P>- one null role info provided
"
      end

      operation 9927938 "RelationTypeSupport"
	protected explicit_return_type ""
	nparams 1
	  param inout name "relationTypeName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor to be used for subclasses.

@param relationTypeName  Name of relation type.

@exception IllegalArgumentException  if null parameter.
"
      end

      operation 9928066 "getRelationTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Returns the relation type name.

@return the relation type name.
"
      end

      operation 9928194 "getRoleInfos"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RoleInfo> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of role definitions (ArrayList of RoleInfo objects).
"
      end

      operation 9928322 "getRoleInfo"
	public return_type class_ref 1201922 // RoleInfo
	nparams 1
	  param inout name "roleInfoName" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1202178 // RoleInfoNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the role info (RoleInfo object) for the given role info name
(null if not found).

@param roleInfoName  role info name

@return RoleInfo object providing role definition
does not exist

@exception IllegalArgumentException  if null parameter
@exception RoleInfoNotFoundException  if no role info with that name in
relation type.
"
      end

      operation 9928450 "addRoleInfo"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "roleInfo" type class_ref 1201922 // RoleInfo
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Misc


Add a role info.
This method of course should not be used after the creation of the
relation type, because updating it would invalidate that the relations
created associated to that type still conform to it.
Can throw a RuntimeException if trying to update a relation type
declared in the Relation Service.

@param roleInfo  role info to be added.

@exception IllegalArgumentException  if null parameter.
@exception InvalidRelationTypeException  if there is already a role
 info in current relation type with the same name.
"
      end

      operation 9928578 "setRelationServiceFlag"
	package explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the internal flag to specify that the relation type has been
 declared in the Relation Service"
      end

      operation 9928706 "initMembers"
	private explicit_return_type "void"
	nparams 2
	  param inout name "relationTypeName" type class_ref 128130 // String
	  param inout name "roleInfoArray" type class_ref 1201922 // RoleInfo
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initializes the members, i.e. type name and role info list.

 -param relationTypeName  Name of relation type
 -param roleInfoArray  List of role definitions (RoleInfo objects)

 -exception IllegalArgumentException  if null parameter
 -exception InvalidRelationTypeException  If:
  - the same name has been used for two different roles
  - no role info provided
  - one null role info provided"
      end

      operation 9928834 "checkRoleInfos"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "roleInfoArray" type class_ref 1201922 // RoleInfo
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 1200002 // InvalidRelationTypeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Checks the given RoleInfo array to verify that:
 - the array is not empty
 - it does not contain a null element
 - a given role name is used only for one RoleInfo

 -param roleInfoArray  array to be checked

 -exception IllegalArgumentException
 -exception InvalidRelationTypeException  If:
  - the same name has been used for two different roles
  - no role info provided
  - one null role info provided"
      end

      operation 9928962 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RelationTypeSupport} from an {@link ObjectInputStream}.
"
      end

      operation 9929090 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RelationTypeSupport} to an {@link ObjectOutputStream}.
"
      end
    end

    class 1202690 "RoleUnresolvedList"
      visibility public 
      nactuals 1
      actual class class_ref 186498 // ArrayList
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A RoleUnresolvedList represents a list of RoleUnresolved objects,
representing roles not retrieved from a relation due to a problem
encountered when trying to access (read or write) the roles.

@since 1.5

 We cannot extend ArrayList<RoleUnresolved> because our legacy
add(RoleUnresolved) method would then override add(E) in ArrayList<E>,
and our return value is void whereas ArrayList.add(E)'s is boolean.
Likewise for set(int,RoleUnresolved).  Grrr.  We cannot use covariance
to override the most important methods and have them return
RoleUnresolved, either, because that would break subclasses that
override those methods in turn (using the original return type
of Object).  Finally, we cannot implement Iterable<RoleUnresolved>
so you could write
for (RoleUnresolved r : roleUnresolvedList)
because ArrayList<> implements Iterable<> and the same class cannot
implement two versions of a generic interface.  Instead we provide
the asList() method so you can write
for (RoleUnresolved r : roleUnresolvedList.asList())
"
      classrelation 3854338 // <realization>
	relation 3854338 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3854338 // <realization>
	  b parent class_ref 186498 // ArrayList
      end

      attribute 2298882 "typeSafe"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2299010 "tainted"
	private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2299138 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4054902803091433324L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version 
"
      end

      operation 9937922 "RoleUnresolvedList"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructors


Constructs an empty RoleUnresolvedList.
"
      end

      operation 9938050 "RoleUnresolvedList"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty RoleUnresolvedList with the initial capacity
specified.

@param initialCapacity  initial capacity
"
      end

      operation 9938178 "RoleUnresolvedList"
	public explicit_return_type ""
	nparams 1
	  param inout name "list" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<RoleUnresolved> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code RoleUnresolvedList} containing the elements of the
{@code List} specified, in the order in which they are returned by
the {@code List}'s iterator. The {@code RoleUnresolvedList} instance has
an initial capacity of 110% of the size of the {@code List}
specified.

@param list the {@code List} that defines the initial contents of
the new {@code RoleUnresolvedList}.

@exception IllegalArgumentException if the {@code list} parameter
is {@code null} or if the {@code list} parameter contains any
non-RoleUnresolved objects.

@see ArrayList#ArrayList(java.util.Collection)
"
      end

      operation 9938306 "asList"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<RoleUnresolved> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Return a view of this list as a {@code List<RoleUnresolved>}.
Changes to the returned value are reflected by changes
to the original {@code RoleUnresolvedList} and vice versa.

@return a {@code List<RoleUnresolved>} whose contents
reflect the contents of this {@code RoleUnresolvedList}.

<p>If this method has ever been called on a given
{@code RoleUnresolvedList} instance, a subsequent attempt to add
an object to that instance which is not a {@code RoleUnresolved}
will fail with an {@code IllegalArgumentException}. For compatibility
reasons, a {@code RoleUnresolvedList} on which this method has never
been called does allow objects other than {@code RoleUnresolved}s to
be added.</p>

@throws IllegalArgumentException if this {@code RoleUnresolvedList}
contains an element that is not a {@code RoleUnresolved}.

@since 1.6
"
      end

      operation 9938434 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "role" type class_ref 1202946 // RoleUnresolved
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Adds the RoleUnresolved specified as the last element of the list.

@param role - the unresolved role to be added.

@exception IllegalArgumentException  if the unresolved role is null.
"
      end

      operation 9938562 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "role" type class_ref 1202946 // RoleUnresolved
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 881154 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the unresolved role specified as an element at the position
specified.
Elements with an index greater than or equal to the current position are
shifted up.

@param index - The position in the list where the new
RoleUnresolved object is to be inserted.
@param role - The RoleUnresolved object to be inserted.

@exception IllegalArgumentException  if the unresolved role is null.
@exception IndexOutOfBoundsException if index is out of range
(<code>index &lt; 0 || index &gt; size()</code>).
"
      end

      operation 9938690 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "role" type class_ref 1202946 // RoleUnresolved
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 881154 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at the position specified to be the unresolved role
specified.
The previous element at that position is discarded.

@param index - The position specified.
@param role - The value to which the unresolved role element
should be set.

@exception IllegalArgumentException   if the unresolved role is null.
@exception IndexOutOfBoundsException if index is out of range
(<code>index &lt; 0 || index &gt;= size()</code>).
"
      end

      operation 9938818 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "roleList" type class_ref 1202690 // RoleUnresolvedList
	nexceptions 1
	  exception class_ref 881154 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all the elements in the RoleUnresolvedList specified to the end
of the list, in the order in which they are returned by the Iterator of
the RoleUnresolvedList specified.

@param roleList - Elements to be inserted into the list
(can be null).

@return true if this list changed as a result of the call.

@exception IndexOutOfBoundsException  if accessing with an index
outside of the list.
"
      end

      operation 9938946 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "roleList" type class_ref 1202690 // RoleUnresolvedList
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 881154 // IndexOutOfBoundsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts all of the elements in the RoleUnresolvedList specified into
this list, starting at the specified position, in the order in which
they are returned by the Iterator of the RoleUnresolvedList specified.

@param index - Position at which to insert the first element from the
RoleUnresolvedList specified.
@param roleList - Elements to be inserted into the list.

@return true if this list changed as a result of the call.

@exception IllegalArgumentException  if the role is null.
@exception IndexOutOfBoundsException if index is out of range
(<code>index &lt; 0 || index &gt; size()</code>).
"
      end

      operation 9939074 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override all of the methods from ArrayList<Object> that might add
a non-RoleUnresolved to the List, and disallow that if asList has
ever been called on this instance.
"
      end

      operation 9939202 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9939330 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9939458 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9939586 "set"
	public return_type class_ref 129538 // Object
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "element" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9939714 "checkTypeSafe"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "IllegalArgumentException if o is a non-RoleUnresolved object.
"
      end

      operation 9939842 "checkTypeSafe"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "IllegalArgumentException if c contains any non-RoleUnresolved objects.
"
      end

      operation 9939970 "isTainted"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if o is a non-RoleUnresolved object.
"
      end

      operation 9940098 "isTainted"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if c contains any non-RoleUnresolved objects.
"
      end
    end

    class 1202818 "RoleStatus"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class describes the various problems which can be encountered when
accessing a role.

@since 1.5
"
      attribute 2297346 "NO_ROLE_WITH_NAME"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Possible problems


Problem type when trying to access an unknown role.

"
      end

      attribute 2297474 "ROLE_NOT_READABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Problem type when trying to read a non-readable attribute.

"
      end

      attribute 2297602 "ROLE_NOT_WRITABLE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Problem type when trying to update a non-writable attribute.

"
      end

      attribute 2297730 "LESS_THAN_MIN_ROLE_DEGREE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Problem type when trying to set a role value with less ObjectNames than
the minimum expected cardinality.

"
      end

      attribute 2297858 "MORE_THAN_MAX_ROLE_DEGREE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Problem type when trying to set a role value with more ObjectNames than
the maximum expected cardinality.

"
      end

      attribute 2297986 "REF_MBEAN_OF_INCORRECT_CLASS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Problem type when trying to set a role value including the ObjectName of
a MBean not of the class expected for that role.

"
      end

      attribute 2298114 "REF_MBEAN_NOT_REGISTERED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Problem type when trying to set a role value including the ObjectName of
a MBean not registered in the MBean Server.

"
      end

      operation 9936386 "isRoleStatus"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "status" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if given value corresponds to a known role status, false
otherwise.

@param status a status code.

@return true if this value is a known role status.
"
      end
    end

    class 1202946 "RoleUnresolved"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an unresolved role: a role not retrieved from a relation due
to a problem. It provides the role name, value (if problem when trying to
set the role) and an integer defining the problem (constants defined in
RoleStatus).

<p>The <b>serialVersionUID</b> of this class is <code>-48350262537070138L</code>.

@since 1.5

 serialVersionUID not constant"
      classrelation 3853570 // <realization>
	relation 3853570 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3853570 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2298242 "oldSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9026457686611660144L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serialization compatibility stuff:
 Two serial forms are supported in this class. The selected form depends
 on system property \"jmx.serial.form\":
  - \"1.0\" for JMX 1.0
  - any other value for JMX 1.1 and higher

 Serial version for old serial form
"
      end

      attribute 2298370 "newSerialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -48350262537070138L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Serial version for new serial form
"
      end

      classrelation 3853698 // oldSerialPersistentFields (<unidirectional association>)
	relation 3853698 --->
	  a role_name "oldSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"myRoleName\", String.class),
      new ObjectStreamField(\"myRoleValue\", ArrayList.class),
      new ObjectStreamField(\"myPbType\", int.class)
    }" class_relation const_relation private
	    comment " Serializable fields in old serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3853698 // oldSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      classrelation 3853826 // newSerialPersistentFields (<unidirectional association>)
	relation 3853826 --->
	  a role_name "newSerialPersistentFields" multiplicity "[]" init_value "
    {
      new ObjectStreamField(\"roleName\", String.class),
      new ObjectStreamField(\"roleValue\", List.class),
      new ObjectStreamField(\"problemType\", int.class)
    }" class_relation const_relation private
	    comment " Serializable fields in new serial form
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3853826 // newSerialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2298498 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Actual serial version and serial form
"
      end

      classrelation 3853954 // serialPersistentFields (<unidirectional association>)
	relation 3853954 --->
	  a role_name "serialPersistentFields" multiplicity "[]" class_relation const_relation private
	    comment " @serialField roleName String Role name
 @serialField roleValue List Role value ({@link List} of {@link ObjectName} objects)
 @serialField problemType int Problem type

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3853954 // serialPersistentFields (<unidirectional association>)
	  b parent class_ref 193154 // ObjectStreamField
      end

      attribute 2298626 "compat"
	class_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 182658 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");
            String form = AccessController.doPrivileged(act);
            compat = (form != null && form.equals(\"1.0\"));
        } catch (Exception e) {
            // OK : Too bad, no compat with 1.0
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3854082 // roleName (<unidirectional association>)
	relation 3854082 --->
	  a role_name "roleName" init_value " null" private
	    comment " END Serialization compatibility stuff

 Private members


@serial Role name

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3854082 // roleName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3854210 // roleValue (<unidirectional association>)
	relation 3854210 --->
	  a role_name "roleValue" init_value " null" private
	    comment "
@serial Role value ({@link List} of {@link ObjectName} objects)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName> ${name}${value};
"
	    classrelation_ref 3854210 // roleValue (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      attribute 2298754 "problemType"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial Problem type

"
      end

      operation 9936514 "RoleUnresolved"
	public explicit_return_type ""
	nparams 3
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 175362 // List
	  param in name "pbType" explicit_type "int"
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<ObjectName> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor


Constructor.

@param name  name of the role
@param value  value of the role (if problem when setting the
role)
@param pbType  type of problem (according to known problem types,
listed as static final members).

@exception IllegalArgumentException  if null parameter or incorrect
problem type
"
      end

      operation 9936642 "getRoleName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessors


Retrieves role name.

@return the role name.

@see #setRoleName
"
      end

      operation 9936770 "getRoleValue"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves role value.

@return an ArrayList of ObjectName objects, the one provided to be set
in given role. Null if the unresolved role is returned for a read
access.

@see #setRoleValue
"
      end

      operation 9936898 "getProblemType"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves problem type.

@return an integer corresponding to a problem, those being described as
static final members of current class.

@see #setProblemType
"
      end

      operation 9937026 "setRoleName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets role name.

@param name the new role name.

@exception IllegalArgumentException  if null parameter

@see #getRoleName
"
      end

      operation 9937154 "setRoleValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<ObjectName> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets role value.

@param value  List of ObjectName objects for referenced
MBeans not set in role.

@see #getRoleValue
"
      end

      operation 9937282 "setProblemType"
	public explicit_return_type "void"
	nparams 1
	  param in name "pbType" explicit_type "int"
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets problem type.

@param pbType  integer corresponding to a problem. Must be one of
those described as static final members of current class.

@exception IllegalArgumentException  if incorrect problem type

@see #getProblemType
"
      end

      operation 9937410 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone this object.

@return an independent clone.
"
      end

      operation 9937538 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string describing this object.

@return a description of this RoleUnresolved object.
"
      end

      operation 9937666 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserializes a {@link RoleUnresolved} from an {@link ObjectInputStream}.
"
      end

      operation 9937794 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serializes a {@link RoleUnresolved} to an {@link ObjectOutputStream}.
"
      end
    end
  end

  deploymentview 173186 "relation"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 865410 "RelationException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.JMException;
${definition}"
      associated_elems
	class_ref 1199746 // RelationException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 865538 "InvalidRelationIdException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1199618 // InvalidRelationIdException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 865666 "InvalidRelationServiceException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1199874 // InvalidRelationServiceException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 865794 "InvalidRelationTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1200002 // InvalidRelationTypeException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 865922 "InvalidRoleInfoException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1200130 // InvalidRoleInfoException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 866050 "InvalidRoleValueException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1200258 // InvalidRoleValueException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 866178 "MBeanServerNotificationFilter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.util.List;
import java.util.Vector;
import javax.management.MBeanServerNotification;
import javax.management.Notification;
import javax.management.NotificationFilterSupport;
import javax.management.ObjectName;
import java.util.List;
import java.util.logging.Level;
import java.util.Vector;
import static com.sun.jmx.mbeanserver.Util.cast;
import static com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER;
${definition}"
      associated_elems
	class_ref 1200386 // MBeanServerNotificationFilter
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 866306 "Relation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Map;
import javax.management.ObjectName;
${definition}"
      associated_elems
	class_ref 1200514 // Relation
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 866434 "RelationNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1201410 // RelationNotFoundException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 866562 "RelationNotification"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.Notification;
import javax.management.ObjectName;
import java.io.InvalidObjectException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import com.sun.jmx.mbeanserver.GetPropertyAction;
import static com.sun.jmx.mbeanserver.Util.cast;
${definition}"
      associated_elems
	class_ref 1201538 // RelationNotification
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 866690 "RelationServiceMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.ObjectName;
import javax.management.InstanceNotFoundException;
import java.util.List;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 1201794 // RelationServiceMBean
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 866818 "RelationService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;
import java.util.logging.Level;
import javax.management.Attribute;
import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.MBeanServerDelegate;
import javax.management.MBeanServerNotification;
import javax.management.Notification;
import javax.management.NotificationBroadcasterSupport;
import javax.management.NotificationListener;
import javax.management.ObjectName;
import javax.management.ReflectionException;
${definition}"
      associated_elems
	class_ref 1201666 // RelationService
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 866946 "RelationServiceNotRegisteredException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1200770 // RelationServiceNotRegisteredException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 867074 "RelationSupportMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1202434 // RelationSupportMBean
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 867202 "RelationSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.management.InstanceNotFoundException;
import javax.management.MBeanException;
import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.management.ReflectionException;
${definition}"
      associated_elems
	class_ref 1202306 // RelationSupport
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 867330 "RelationType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 1202050 // RelationType
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 867458 "RelationTypeNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1201282 // RelationTypeNotFoundException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 867586 "RelationTypeSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.security.AccessController;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import static com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER;
import static com.sun.jmx.mbeanserver.Util.cast;
${definition}"
      associated_elems
	class_ref 1202562 // RelationTypeSupport
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 867714 "Role"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.security.AccessController;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.management.ObjectName;
import static com.sun.jmx.mbeanserver.Util.cast;
${definition}"
      associated_elems
	class_ref 1201154 // Role
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 867842 "RoleInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.security.AccessController;
import javax.management.MBeanServer;
import javax.management.NotCompliantMBeanException;
${definition}"
      associated_elems
	class_ref 1201922 // RoleInfo
      end
      comment "Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 867970 "RoleInfoNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1202178 // RoleInfoNotFoundException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 868098 "RoleList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.Util;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
${definition}"
      associated_elems
	class_ref 1201026 // RoleList
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 868226 "RoleNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1200642 // RoleNotFoundException
      end
      comment "Copyright (c) 2000, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 868354 "RoleResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.security.AccessController;
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 1200898 // RoleResult
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 868482 "RoleStatus"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1202818 // RoleStatus
      end
      comment "Copyright (c) 2000, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 868610 "RoleUnresolved"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.GetPropertyAction;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamField;
import java.io.Serializable;
import java.security.AccessController;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.management.ObjectName;
import static com.sun.jmx.mbeanserver.Util.cast;
${definition}"
      associated_elems
	class_ref 1202946 // RoleUnresolved
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 868738 "RoleUnresolvedList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.Util;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
${definition}"
      associated_elems
	class_ref 1202690 // RoleUnresolvedList
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
