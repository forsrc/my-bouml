class SnmpOid
!!!3081218.java!!!	SnmpOid()
        components = new long[15] ;
        componentCount = 0 ;
!!!3081346.java!!!	SnmpOid(inout oidComponents : long [[]])
        components = oidComponents.clone() ;
        componentCount = components.length ;
!!!3081474.java!!!	SnmpOid(in id : long)
        components = new long[1] ;
        components[0] = id ;
        componentCount = components.length ;
!!!3081602.java!!!	SnmpOid(in id1 : long, in id2 : long, in id3 : long, in id4 : long)
        components = new long[4] ;
        components[0] = id1 ;
        components[1] = id2 ;
        components[2] = id3 ;
        components[3] = id4 ;
        componentCount = components.length ;
!!!3081730.java!!!	SnmpOid(inout s : String)
        String dotString = s ;

        if (s.startsWith(".") == false) {
            try {
                dotString = resolveVarName(s);
            } catch(SnmpStatusException e) {
                throw new IllegalArgumentException(e.getMessage());
            }
        }

        StringTokenizer st = new StringTokenizer(dotString, ".", false) ;
        componentCount= st.countTokens();

        // Now extract the ids
        //
        if (componentCount == 0) {
            components = new long[15] ;
        }  else {
            components = new long[componentCount] ;
            try {
                for (int i = 0 ; i < componentCount ; i++) {
                    try {
                        components[i] = Long.parseLong(st.nextToken()) ;
                    }
                    catch(NoSuchElementException e) {}
                }
            }
            catch(NumberFormatException e) {
                throw new IllegalArgumentException(s) ;
            }
        }
!!!3081858.java!!!	getLength() : int
        return componentCount ;
!!!3081986.java!!!	longValue() : long
        long[] result = new long[componentCount] ;
        System.arraycopy(components,0,result,0,componentCount);
        return result ;
!!!3082114.java!!!	longValue(inout duplicate : boolean) : long
        return longValue();
!!!3082242.java!!!	getOidArc(in pos : int) : long
        try {
            return components[pos];
        } catch(Exception e) {
            throw new SnmpStatusException(SnmpStatusException.noAccess);
        }
!!!3082370.java!!!	toLong() : Long
        if (componentCount != 1) {
            throw new IllegalArgumentException() ;
        }
        return new Long(components[0]) ;
!!!3082498.java!!!	toInteger() : Integer
        if ((componentCount != 1) || (components[0] > Integer.MAX_VALUE)) {
            throw new IllegalArgumentException() ;
        }
        return new Integer((int)components[0]) ;
!!!3082626.java!!!	toString() : String
        String result = "" ;
        if (componentCount >= 1) {
            for (int i = 0 ; i < componentCount - 1 ; i++) {
                result = result + components[i] + "." ;
            }
            result = result + components[componentCount - 1] ;
        }
        return result ;
!!!3082754.java!!!	toBoolean() : Boolean
        if ((componentCount != 1) && (components[0] != 1) && (components[0] != 2)) {
            throw new IllegalArgumentException() ;
        }
        return Boolean.valueOf(components[0] == 1) ;
!!!3082882.java!!!	toByte() : Byte
        Byte[] result = new Byte[componentCount] ;
        for (int i =0 ; i < componentCount ; i++) {
            if (components[0] > 255) {
                throw new IllegalArgumentException() ;
            }
            result[i] = new Byte((byte)components[i]) ;
        }
        return result ;
!!!3083010.java!!!	toOid() : SnmpOid
        long[] ids = new long[componentCount] ;
        for (int i = 0 ; i < componentCount ; i++) {
            ids[i] = components[i] ;
        }
        return new SnmpOid(ids) ;
!!!3083138.java!!!	toOid(inout index : long [[]], in start : int) : SnmpOid
        try {
            if (index[start] > Integer.MAX_VALUE) {
                throw new SnmpStatusException(SnmpStatusException.noSuchName) ;
            }
            int idCount = (int)index[start++] ;
            long[] ids = new long[idCount] ;
            for (int i = 0 ; i < idCount ; i++) {
                ids[i] = index[start + i] ;
            }
            return new SnmpOid(ids) ;
        }
        catch(IndexOutOfBoundsException e) {
            throw new SnmpStatusException(SnmpStatusException.noSuchName) ;
        }
!!!3083266.java!!!	nextOid(inout index : long [[]], in start : int) : int
        try {
            if (index[start] > Integer.MAX_VALUE) {
                throw new SnmpStatusException(SnmpStatusException.noSuchName) ;
            }
            int idCount = (int)index[start++] ;
            start += idCount ;
            if (start <= index.length) {
                return start ;
            }
            else {
                throw new SnmpStatusException(SnmpStatusException.noSuchName) ;
            }
        }
        catch(IndexOutOfBoundsException e) {
            throw new SnmpStatusException(SnmpStatusException.noSuchName) ;
        }
!!!3083394.java!!!	appendToOid(inout source : SnmpOid, inout dest : SnmpOid) : void
        dest.append(source.getLength()) ;
        dest.append(source) ;
!!!3083522.java!!!	duplicate() : SnmpValue
        return (SnmpValue)clone() ;
!!!3083650.java!!!	clone() : Object
        try {
            SnmpOid obj = (SnmpOid)super.clone() ;
            obj.components = new long[this.componentCount] ;

            System.arraycopy(this.components, 0, obj.components, 0,
                             this.componentCount) ;
            return obj ;
        } catch (CloneNotSupportedException e) {
            throw new InternalError() ;  // should never happen. VM bug.
        }
!!!3083778.java!!!	insert(in id : long) : void
        enlargeIfNeeded(1) ;
        for (int i = componentCount - 1 ; i >= 0 ; i--) {
            components[i + 1] = components[i] ;
        }
        components[0] = id ;
        componentCount++ ;
!!!3083906.java!!!	insert(in id : int) : void
        insert((long)id) ;
!!!3084034.java!!!	append(inout oid : SnmpOid) : void
        enlargeIfNeeded(oid.componentCount) ;
        for (int i = 0 ; i < oid.componentCount ; i++) {
            components[componentCount + i] = oid.components[i] ;
        }
        componentCount += oid.componentCount ;
!!!3084162.java!!!	append(in id : long) : void
        enlargeIfNeeded(1) ;
        components[componentCount] = id ;
        componentCount++ ;
!!!3084290.java!!!	addToOid(inout s : String) : void
        SnmpOid suffix= new SnmpOid(s);
        this.append(suffix);
!!!3084418.java!!!	addToOid(inout oid : long [[]]) : void
        SnmpOid suffix= new SnmpOid(oid);
        this.append(suffix);
!!!3084546.java!!!	isValid() : boolean
        return ((componentCount >= 2) &&
                ((0 <= components[0]) && (components[0] < 3)) &&
                ((0 <= components[1]) && (components[1] < 40))) ;
!!!3084674.java!!!	equals(inout o : Object) : boolean
        boolean result = false ;

        if (o instanceof SnmpOid) {
            SnmpOid oid = (SnmpOid)o ;
            if (oid.componentCount == componentCount) {
                int i = 0 ;
                long[]  objoid = oid.components;
                while ((i < componentCount) && (components[i] == objoid[i]))
                    i++ ;
                result = (i == componentCount) ;
            }
        }
        return result ;
!!!3084802.java!!!	hashCode() : int
        long acc=0;
        for (int i=0;i<componentCount;i++) {
            acc = acc*31+components[i];
        }
        return (int)acc;
!!!3084930.java!!!	compareTo(inout other : SnmpOid) : int
        int result = 0 ;
        int i = 0 ;
        int cmplen = Math.min(componentCount, other.componentCount) ;
        long[] otheroid = other.components;

        for (i = 0; i < cmplen; i++) {
            if (components[i] != otheroid[i]) {
                break ;
            }
        }
        if ((i == componentCount) && (i == other.componentCount)) {
            result = 0 ;
        }
        else if (i == componentCount) {
            result = -1 ;
        }
        else if (i == other.componentCount) {
            result = 1 ;
        }
        else {
            result = (components[i] < otheroid[i]) ? -1 : 1 ;
        }
        return result ;
!!!3085058.java!!!	resolveVarName(inout s : String) : String
        int index = s.indexOf('.') ;

        // First handle the case where oid is expressed as 1.2.3.4
        //
        try {
            return handleLong(s, index);
        } catch(NumberFormatException e) {}

        SnmpOidTable table = getSnmpOidTable();
        // if we are here, it means we have something to resolve..
        //
        if (table == null)
          throw new SnmpStatusException(SnmpStatusException.noSuchName);

        // Ok assume there is a variable name to resolve ...
        //
        if (index <= 0) {
            SnmpOidRecord rec = table.resolveVarName(s);
            return rec.getOid();

        } else {
            SnmpOidRecord rec = table.resolveVarName(s.substring(0, index));
            return (rec.getOid()+ s.substring(index));

        }
!!!3085186.java!!!	getTypeName() : String
        return name ;
!!!3085314.java!!!	getSnmpOidTable() : SnmpOidTable
        return meta;
!!!3085442.java!!!	setSnmpOidTable(inout db : SnmpOidTable) : void
        final SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new SnmpPermission("setSnmpOidTable"));
        }

        meta = db;
!!!3085570.java!!!	toOctetString() : String
        return new String(tobyte()) ;
!!!3085698.java!!!	tobyte() : byte
        byte[] result = new byte[componentCount] ;
        for (int i =0 ; i < componentCount ; i++) {
            if (components[0] > 255) {
                throw new IllegalArgumentException() ;
            }
            result[i] = (byte)components[i] ;
        }
        return result ;
!!!3085826.java!!!	enlargeIfNeeded(in n : int) : void
        int neededSize = components.length ;
        while (componentCount + n > neededSize) {
            neededSize = neededSize * 2 ;
        }
        if (neededSize > components.length) {
            long[] newComponents = new long[neededSize] ;
            for (int i = 0 ; i < components.length ; i++) {
                newComponents[i] = components[i] ;
            }
            components = newComponents ;
        }
!!!3085954.java!!!	handleLong(inout oid : String, in index : int) : String
        String str;
        if (index >0) {
            str= oid.substring(0, index);
        } else {
            str= oid ;
        }

        // just parse the element.
        //
        Long.parseLong(str);
        return oid;
