class Signaller
!!!9023106.java!!!	Signaller(inout interruptible : boolean, in nanos : long, in deadline : long)
            this.thread = Thread.currentThread();
            this.interruptControl = interruptible ? 1 : 0;
            this.nanos = nanos;
            this.deadline = deadline;
!!!9023234.java!!!	tryFire(in ignore : int) : CompletableFuture
            Thread w; // no need to atomically claim
            if ((w = thread) != null) {
                thread = null;
                LockSupport.unpark(w);
            }
            return null;
!!!9023362.java!!!	isReleasable() : boolean
            if (thread == null)
                return true;
            if (Thread.interrupted()) {
                int i = interruptControl;
                interruptControl = -1;
                if (i > 0)
                    return true;
            }
            if (deadline != 0L &&
                (nanos <= 0L || (nanos = deadline - System.nanoTime()) <= 0L)) {
                thread = null;
                return true;
            }
            return false;
!!!9023490.java!!!	block() : boolean
            if (isReleasable())
                return true;
            else if (deadline == 0L)
                LockSupport.park(this);
            else if (nanos > 0L)
                LockSupport.parkNanos(this, nanos);
            return isReleasable();
!!!9023618.java!!!	isLive() : boolean
 return thread != null;
