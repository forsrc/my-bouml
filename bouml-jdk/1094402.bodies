class IntIteratorSpliterator
!!!8921218.java!!!	IntIteratorSpliterator(inout iterator : PrimitiveIterator::OfInt, in size : long, in characteristics : int)
            this.it = iterator;
            this.est = size;
            this.characteristics = (characteristics & Spliterator.CONCURRENT) == 0
                                   ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED
                                   : characteristics;
!!!8921346.java!!!	IntIteratorSpliterator(inout iterator : PrimitiveIterator::OfInt, in characteristics : int)
            this.it = iterator;
            this.est = Long.MAX_VALUE;
            this.characteristics = characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);
!!!8921474.java!!!	trySplit() : Spliterator::OfInt
            PrimitiveIterator.OfInt i = it;
            long s = est;
            if (s > 1 && i.hasNext()) {
                int n = batch + BATCH_UNIT;
                if (n > s)
                    n = (int) s;
                if (n > MAX_BATCH)
                    n = MAX_BATCH;
                int[] a = new int[n];
                int j = 0;
                do { a[j] = i.nextInt(); } while (++j < n && i.hasNext());
                batch = j;
                if (est != Long.MAX_VALUE)
                    est -= j;
                return new IntArraySpliterator(a, 0, j, characteristics);
            }
            return null;
!!!8921602.java!!!	forEachRemaining(inout action : IntConsumer) : void
            if (action == null) throw new NullPointerException();
            it.forEachRemaining(action);
!!!8921730.java!!!	tryAdvance(inout action : IntConsumer) : boolean
            if (action == null) throw new NullPointerException();
            if (it.hasNext()) {
                action.accept(it.nextInt());
                return true;
            }
            return false;
!!!8921858.java!!!	estimateSize() : long
            return est;
!!!8921986.java!!!	characteristics() : int
 return characteristics;
!!!8922114.java!!!	getComparator() : Comparator
            if (hasCharacteristics(Spliterator.SORTED))
                return null;
            throw new IllegalStateException();
