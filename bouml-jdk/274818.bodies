class ListenerThreadImpl
!!!1445122.java!!!	ListenerThreadImpl(inout orb : ORB, inout acceptor : Acceptor, inout selector : Selector)
        this.orb = orb;
        this.acceptor = acceptor;
        this.selector = selector;
        keepRunning = true;
!!!1445250.java!!!	getAcceptor() : Acceptor
        return acceptor;
!!!1445378.java!!!	close() : void
        if (orb.transportDebugFlag) {
            dprint(".close: " + acceptor);
        }

        keepRunning = false;
!!!1445506.java!!!	doWork() : void
        try {
            if (orb.transportDebugFlag) {
                dprint(".doWork: Start ListenerThread: " + acceptor);
            }
            while (keepRunning) {
                try {
                    if (orb.transportDebugFlag) {
                        dprint(".doWork: BEFORE ACCEPT CYCLE: " + acceptor);
                    }

                    acceptor.accept();

                    if (orb.transportDebugFlag) {
                        dprint(".doWork: AFTER ACCEPT CYCLE: " + acceptor);
                    }
                } catch (Throwable t) {
                    if (orb.transportDebugFlag) {
                        dprint(".doWork: Exception in accept: " + acceptor,t);
                    }
                    orb.getTransportManager().getSelector(0)
                        .unregisterForEvent(getAcceptor().getEventHandler());
                    getAcceptor().close();
                }
            }
        } finally {
            if (orb.transportDebugFlag) {
                dprint(".doWork: Terminated ListenerThread: " + acceptor);
            }
        }
!!!1445634.java!!!	setEnqueueTime(in timeInMillis : long) : void
        enqueueTime = timeInMillis;
!!!1445762.java!!!	getEnqueueTime() : long
        return enqueueTime;
!!!1445890.java!!!	getName() : String
 return "ListenerThread";
!!!1446018.java!!!	dprint(inout msg : String) : void
        ORBUtility.dprint("ListenerThreadImpl", msg);
!!!1446146.java!!!	dprint(inout msg : String, inout t : Throwable) : void
        dprint(msg);
        t.printStackTrace(System.out);
