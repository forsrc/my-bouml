class Year
!!!8409602.java!!!	now() : Year
        return now(Clock.systemDefaultZone());
!!!8409730.java!!!	now(inout zone : ZoneId) : Year
        return now(Clock.system(zone));
!!!8409858.java!!!	now(inout clock : Clock) : Year
        final LocalDate now = LocalDate.now(clock);  // called once
        return Year.of(now.getYear());
!!!8409986.java!!!	of(in isoYear : int) : Year
        YEAR.checkValidValue(isoYear);
        return new Year(isoYear);
!!!8410114.java!!!	from(inout temporal : TemporalAccessor) : Year
        if (temporal instanceof Year) {
            return (Year) temporal;
        }
        Objects.requireNonNull(temporal, "temporal");
        try {
            if (IsoChronology.INSTANCE.equals(Chronology.from(temporal)) == false) {
                temporal = LocalDate.from(temporal);
            }
            return of(temporal.get(YEAR));
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain Year from TemporalAccessor: " +
                    temporal + " of type " + temporal.getClass().getName(), ex);
        }
!!!8410242.java!!!	parse(inout text : CharSequence) : Year
        return parse(text, PARSER);
!!!8410370.java!!!	parse(inout text : CharSequence, inout formatter : DateTimeFormatter) : Year
        Objects.requireNonNull(formatter, "formatter");
        return formatter.parse(text, Year::from);
!!!8410498.java!!!	isLeap(in year : long) : boolean
        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);
!!!8410626.java!!!	Year(in year : int)
        this.year = year;
!!!8410754.java!!!	getValue() : int
        return year;
!!!8410882.java!!!	isSupported(inout field : TemporalField) : boolean
        if (field instanceof ChronoField) {
            return field == YEAR || field == YEAR_OF_ERA || field == ERA;
        }
        return field != null && field.isSupportedBy(this);
!!!8411010.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        if (unit instanceof ChronoUnit) {
            return unit == YEARS || unit == DECADES || unit == CENTURIES || unit == MILLENNIA || unit == ERAS;
        }
        return unit != null && unit.isSupportedBy(this);
!!!8411138.java!!!	range(inout field : TemporalField) : ValueRange
        if (field == YEAR_OF_ERA) {
            return (year <= 0 ? ValueRange.of(1, MAX_VALUE + 1) : ValueRange.of(1, MAX_VALUE));
        }
        return Temporal.super.range(field);
!!!8411266.java!!!	get(inout field : TemporalField) : int
        return range(field).checkValidIntValue(getLong(field), field);
!!!8411394.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case YEAR_OF_ERA: return (year < 1 ? 1 - year : year);
                case YEAR: return year;
                case ERA: return (year < 1 ? 0 : 1);
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return field.getFrom(this);
!!!8411522.java!!!	isLeap() : boolean
        return Year.isLeap(year);
!!!8411650.java!!!	isValidMonthDay(inout monthDay : MonthDay) : boolean
        return monthDay != null && monthDay.isValidYear(year);
!!!8411778.java!!!	length() : int
        return isLeap() ? 366 : 365;
!!!8411906.java!!!	with(inout adjuster : TemporalAdjuster) : Year
        return (Year) adjuster.adjustInto(this);
!!!8412034.java!!!	with(inout field : TemporalField, in newValue : long) : Year
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            f.checkValidValue(newValue);
            switch (f) {
                case YEAR_OF_ERA: return Year.of((int) (year < 1 ? 1 - newValue : newValue));
                case YEAR: return Year.of((int) newValue);
                case ERA: return (getLong(ERA) == newValue ? this : Year.of(1 - year));
            }
            throw new UnsupportedTemporalTypeException("Unsupported field: " + field);
        }
        return field.adjustInto(this, newValue);
!!!8412162.java!!!	plus(inout amountToAdd : TemporalAmount) : Year
        return (Year) amountToAdd.addTo(this);
!!!8412290.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : Year
        if (unit instanceof ChronoUnit) {
            switch ((ChronoUnit) unit) {
                case YEARS: return plusYears(amountToAdd);
                case DECADES: return plusYears(Math.multiplyExact(amountToAdd, 10));
                case CENTURIES: return plusYears(Math.multiplyExact(amountToAdd, 100));
                case MILLENNIA: return plusYears(Math.multiplyExact(amountToAdd, 1000));
                case ERAS: return with(ERA, Math.addExact(getLong(ERA), amountToAdd));
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return unit.addTo(this, amountToAdd);
!!!8412418.java!!!	plusYears(in yearsToAdd : long) : Year
        if (yearsToAdd == 0) {
            return this;
        }
        return of(YEAR.checkValidIntValue(year + yearsToAdd));  // overflow safe
!!!8412546.java!!!	minus(inout amountToSubtract : TemporalAmount) : Year
        return (Year) amountToSubtract.subtractFrom(this);
!!!8412674.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : Year
        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));
!!!8412802.java!!!	minusYears(in yearsToSubtract : long) : Year
        return (yearsToSubtract == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-yearsToSubtract));
!!!8412930.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.chronology()) {
            return (R) IsoChronology.INSTANCE;
        } else if (query == TemporalQueries.precision()) {
            return (R) YEARS;
        }
        return Temporal.super.query(query);
!!!8413058.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        if (Chronology.from(temporal).equals(IsoChronology.INSTANCE) == false) {
            throw new DateTimeException("Adjustment only supported on ISO date-time");
        }
        return temporal.with(YEAR, year);
!!!8413186.java!!!	until(inout endExclusive : Temporal, inout unit : TemporalUnit) : long
        Year end = Year.from(endExclusive);
        if (unit instanceof ChronoUnit) {
            long yearsUntil = ((long) end.year) - year;  // no overflow
            switch ((ChronoUnit) unit) {
                case YEARS: return yearsUntil;
                case DECADES: return yearsUntil / 10;
                case CENTURIES: return yearsUntil / 100;
                case MILLENNIA: return yearsUntil / 1000;
                case ERAS: return end.getLong(ERA) - getLong(ERA);
            }
            throw new UnsupportedTemporalTypeException("Unsupported unit: " + unit);
        }
        return unit.between(this, end);
!!!8413314.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8413442.java!!!	atDay(in dayOfYear : int) : LocalDate
        return LocalDate.ofYearDay(year, dayOfYear);
!!!8413570.java!!!	atMonth(inout month : Month) : YearMonth
        return YearMonth.of(year, month);
!!!8413698.java!!!	atMonth(in month : int) : YearMonth
        return YearMonth.of(year, month);
!!!8413826.java!!!	atMonthDay(inout monthDay : MonthDay) : LocalDate
        return monthDay.atYear(year);
!!!8413954.java!!!	compareTo(inout other : Year) : int
        return year - other.year;
!!!8414082.java!!!	isAfter(inout other : Year) : boolean
        return year > other.year;
!!!8414210.java!!!	isBefore(inout other : Year) : boolean
        return year < other.year;
!!!8414338.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof Year) {
            return year == ((Year) obj).year;
        }
        return false;
!!!8414466.java!!!	hashCode() : int
        return year;
!!!8414594.java!!!	toString() : String
        return Integer.toString(year);
!!!8414722.java!!!	writeReplace() : Object
        return new Ser(Ser.YEAR_TYPE, this);
!!!8414850.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8414978.java!!!	writeExternal(inout out : DataOutput) : void
        out.writeInt(year);
!!!8415106.java!!!	readExternal(inout in : DataInput) : Year
        return Year.of(in.readInt());
