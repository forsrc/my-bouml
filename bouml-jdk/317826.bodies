class IIOMetadataNode
!!!9667970.java!!!	IIOMetadataNode(inout nodeName : String)
        this.nodeName = nodeName;
!!!9668098.java!!!	checkNode(inout node : Node) : void
        if (node == null) {
            return;
        }
        if (!(node instanceof IIOMetadataNode)) {
            throw new IIODOMException(DOMException.WRONG_DOCUMENT_ERR,
                                      "Node not an IIOMetadataNode!");
        }
!!!9668226.java!!!	getNodeName() : String
        return nodeName;
!!!9668354.java!!!	getNodeValue() : String
        return nodeValue;
!!!9668482.java!!!	setNodeValue(inout nodeValue : String) : void
        this.nodeValue = nodeValue;
!!!9668610.java!!!	getNodeType() : short
        return ELEMENT_NODE;
!!!9668738.java!!!	getParentNode() : Node
        return parent;
!!!9668866.java!!!	getChildNodes() : NodeList
        return this;
!!!9668994.java!!!	getFirstChild() : Node
        return firstChild;
!!!9669122.java!!!	getLastChild() : Node
        return lastChild;
!!!9669250.java!!!	getPreviousSibling() : Node
        return previousSibling;
!!!9669378.java!!!	getNextSibling() : Node
        return nextSibling;
!!!9669506.java!!!	getAttributes() : NamedNodeMap
        return new IIONamedNodeMap(attributes);
!!!9669634.java!!!	getOwnerDocument() : Document
        return null;
!!!9669762.java!!!	insertBefore(inout newChild : Node, inout refChild : Node) : Node
        if (newChild == null) {
            throw new IllegalArgumentException("newChild == null!");
        }

        checkNode(newChild);
        checkNode(refChild);

        IIOMetadataNode newChildNode = (IIOMetadataNode)newChild;
        IIOMetadataNode refChildNode = (IIOMetadataNode)refChild;

        // Siblings, can be null.
        IIOMetadataNode previous = null;
        IIOMetadataNode next = null;

        if (refChild == null) {
            previous = this.lastChild;
            next = null;
            this.lastChild = newChildNode;
        } else {
            previous = refChildNode.previousSibling;
            next = refChildNode;
        }

        if (previous != null) {
            previous.nextSibling = newChildNode;
        }
        if (next != null) {
            next.previousSibling = newChildNode;
        }

        newChildNode.parent = this;
        newChildNode.previousSibling = previous;
        newChildNode.nextSibling = next;

        // N.B.: O.K. if refChild == null
        if (this.firstChild == refChildNode) {
            this.firstChild = newChildNode;
        }

        ++numChildren;
        return newChildNode;
!!!9669890.java!!!	replaceChild(inout newChild : Node, inout oldChild : Node) : Node
        if (newChild == null) {
            throw new IllegalArgumentException("newChild == null!");
        }

        checkNode(newChild);
        checkNode(oldChild);

        IIOMetadataNode newChildNode = (IIOMetadataNode)newChild;
        IIOMetadataNode oldChildNode = (IIOMetadataNode)oldChild;

        IIOMetadataNode previous = oldChildNode.previousSibling;
        IIOMetadataNode next = oldChildNode.nextSibling;

        if (previous != null) {
            previous.nextSibling = newChildNode;
        }
        if (next != null) {
            next.previousSibling = newChildNode;
        }

        newChildNode.parent = this;
        newChildNode.previousSibling = previous;
        newChildNode.nextSibling = next;

        if (firstChild == oldChildNode) {
            firstChild = newChildNode;
        }
        if (lastChild == oldChildNode) {
            lastChild = newChildNode;
        }

        oldChildNode.parent = null;
        oldChildNode.previousSibling = null;
        oldChildNode.nextSibling = null;

        return oldChildNode;
!!!9670018.java!!!	removeChild(inout oldChild : Node) : Node
        if (oldChild == null) {
            throw new IllegalArgumentException("oldChild == null!");
        }
        checkNode(oldChild);

        IIOMetadataNode oldChildNode = (IIOMetadataNode)oldChild;

        IIOMetadataNode previous = oldChildNode.previousSibling;
        IIOMetadataNode next = oldChildNode.nextSibling;

        if (previous != null) {
            previous.nextSibling = next;
        }
        if (next != null) {
            next.previousSibling = previous;
        }

        if (this.firstChild == oldChildNode) {
            this.firstChild = next;
        }
        if (this.lastChild == oldChildNode) {
            this.lastChild = previous;
        }

        oldChildNode.parent = null;
        oldChildNode.previousSibling = null;
        oldChildNode.nextSibling = null;

        --numChildren;
        return oldChildNode;
!!!9670146.java!!!	appendChild(inout newChild : Node) : Node
        if (newChild == null) {
            throw new IllegalArgumentException("newChild == null!");
        }
        checkNode(newChild);

        // insertBefore will increment numChildren
        return insertBefore(newChild, null);
!!!9670274.java!!!	hasChildNodes() : boolean
        return numChildren > 0;
!!!9670402.java!!!	cloneNode(inout deep : boolean) : Node
        IIOMetadataNode newNode = new IIOMetadataNode(this.nodeName);
        newNode.setUserObject(getUserObject());
        // Attributes

        if (deep) {
            for (IIOMetadataNode child = firstChild;
                 child != null;
                 child = child.nextSibling) {
                newNode.appendChild(child.cloneNode(true));
            }
        }

        return newNode;
!!!9670658.java!!!	isSupported(inout feature : String, inout version : String) : boolean
        return false;
!!!9670786.java!!!	getNamespaceURI() : String
        return null;
!!!9670914.java!!!	getPrefix() : String
        return null;
!!!9671170.java!!!	getLocalName() : String
        return nodeName;
!!!9671298.java!!!	getTagName() : String
        return nodeName;
!!!9671426.java!!!	getAttribute(inout name : String) : String
        Attr attr = getAttributeNode(name);
        if (attr == null) {
            return "";
        }
        return attr.getValue();
!!!9671554.java!!!	getAttributeNS(inout namespaceURI : String, inout localName : String) : String
        return getAttribute(localName);
!!!9671682.java!!!	setAttribute(inout name : String, inout value : String) : void
        // Name must be valid unicode chars
        boolean valid = true;
        char[] chs = name.toCharArray();
        for (int i=0;i<chs.length;i++) {
            if (chs[i] >= 0xfffe) {
                valid = false;
                break;
            }
        }
        if (!valid) {
            throw new IIODOMException(DOMException.INVALID_CHARACTER_ERR,
                                      "Attribute name is illegal!");
        }
        removeAttribute(name, false);
        attributes.add(new IIOAttr(this, name, value));
!!!9671810.java!!!	setAttributeNS(inout namespaceURI : String, inout qualifiedName : String, inout value : String) : void
        setAttribute(qualifiedName, value);
!!!9671938.java!!!	removeAttribute(inout name : String) : void
        removeAttribute(name, true);
!!!9672066.java!!!	removeAttribute(inout name : String, inout checkPresent : boolean) : void
        int numAttributes = attributes.size();
        for (int i = 0; i < numAttributes; i++) {
            IIOAttr attr = (IIOAttr)attributes.get(i);
            if (name.equals(attr.getName())) {
                attr.setOwnerElement(null);
                attributes.remove(i);
                return;
            }
        }

        // If we get here, the attribute doesn't exist
        if (checkPresent) {
            throw new IIODOMException(DOMException.NOT_FOUND_ERR,
                                      "No such attribute!");
        }
!!!9672194.java!!!	removeAttributeNS(inout namespaceURI : String, inout localName : String) : void
        removeAttribute(localName);
!!!9672322.java!!!	getAttributeNode(inout name : String) : Attr
        Node node = getAttributes().getNamedItem(name);
        return (Attr)node;
!!!9672450.java!!!	getAttributeNodeNS(inout namespaceURI : String, inout localName : String) : Attr
        return getAttributeNode(localName);
!!!9672578.java!!!	setAttributeNode(inout newAttr : Attr) : Attr
        Element owner = newAttr.getOwnerElement();
        if (owner != null) {
            if (owner == this) {
                return null;
            } else {
                throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR,
                                       "Attribute is already in use");
            }
        }

        IIOAttr attr;
        if (newAttr instanceof IIOAttr) {
            attr = (IIOAttr)newAttr;
            attr.setOwnerElement(this);
        } else {
            attr = new IIOAttr(this,
                               newAttr.getName(),
                               newAttr.getValue());
        }

        Attr oldAttr = getAttributeNode(attr.getName());
        if (oldAttr != null) {
            removeAttributeNode(oldAttr);
        }

        attributes.add(attr);

        return oldAttr;
!!!9672706.java!!!	setAttributeNodeNS(inout newAttr : Attr) : Attr
        return setAttributeNode(newAttr);
!!!9672834.java!!!	removeAttributeNode(inout oldAttr : Attr) : Attr
        removeAttribute(oldAttr.getName());
        return oldAttr;
!!!9672962.java!!!	getElementsByTagName(inout name : String) : NodeList
        List l = new ArrayList();
        getElementsByTagName(name, l);
        return new IIONodeList(l);
!!!9673090.java!!!	getElementsByTagName(inout name : String, inout l : List) : void
        if (nodeName.equals(name)) {
            l.add(this);
        }

        Node child = getFirstChild();
        while (child != null) {
            ((IIOMetadataNode)child).getElementsByTagName(name, l);
            child = child.getNextSibling();
        }
!!!9673218.java!!!	getElementsByTagNameNS(inout namespaceURI : String, inout localName : String) : NodeList
        return getElementsByTagName(localName);
!!!9673346.java!!!	hasAttributes() : boolean
        return attributes.size() > 0;
!!!9673474.java!!!	hasAttribute(inout name : String) : boolean
        return getAttributeNode(name) != null;
!!!9673602.java!!!	hasAttributeNS(inout namespaceURI : String, inout localName : String) : boolean
        return hasAttribute(localName);
!!!9673730.java!!!	getLength() : int
        return numChildren;
!!!9673858.java!!!	item(in index : int) : Node
        if (index < 0) {
            return null;
        }

        Node child = getFirstChild();
        while (child != null && index-- > 0) {
            child = child.getNextSibling();
        }
        return child;
!!!9673986.java!!!	getUserObject() : Object
        return userObject;
!!!9674114.java!!!	setUserObject(inout userObject : Object) : void
        this.userObject = userObject;
!!!9674242.java!!!	setIdAttribute(inout name : String, inout isId : boolean) : void
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9674370.java!!!	setIdAttributeNS(inout namespaceURI : String, inout localName : String, inout isId : boolean) : void
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9674498.java!!!	setIdAttributeNode(inout idAttr : Attr, inout isId : boolean) : void
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9674626.java!!!	getSchemaTypeInfo() : TypeInfo
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9674754.java!!!	setUserData(inout key : String, inout data : Object, inout handler : UserDataHandler) : Object
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9674882.java!!!	getUserData(inout key : String) : Object
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9675010.java!!!	getFeature(inout feature : String, inout version : String) : Object
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9675138.java!!!	isSameNode(inout node : Node) : boolean
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9675266.java!!!	isEqualNode(inout node : Node) : boolean
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9675394.java!!!	lookupNamespaceURI(inout prefix : String) : String
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9675522.java!!!	isDefaultNamespace(inout namespaceURI : String) : boolean
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9675650.java!!!	lookupPrefix(inout namespaceURI : String) : String
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9675778.java!!!	getTextContent() : String
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9675906.java!!!	setTextContent(inout textContent : String) : void
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9676034.java!!!	compareDocumentPosition(inout other : Node) : short
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
!!!9676162.java!!!	getBaseURI() : String
        throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                               "Method not supported");
