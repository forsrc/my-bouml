class DirectShortBufferU
!!!7725954.java!!!	attachment() : Object
        return att;
!!!7726082.java!!!	cleaner() : Cleaner
 return null;
!!!7726210.java!!!	DirectShortBufferU(inout db : DirectBuffer, in mark : int, in pos : int, in lim : int, in cap : int, in off : int)

        super(mark, pos, lim, cap);
        address = db.address() + off;



        att = db;



!!!7726338.java!!!	slice() : ShortBuffer
        int pos = this.position();
        int lim = this.limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);
        int off = (pos << 1);
        assert (off >= 0);
        return new DirectShortBufferU(this, -1, 0, rem, rem, off);
!!!7726466.java!!!	duplicate() : ShortBuffer
        return new DirectShortBufferU(this,
                                              this.markValue(),
                                              this.position(),
                                              this.limit(),
                                              this.capacity(),
                                              0);
!!!7726594.java!!!	asReadOnlyBuffer() : ShortBuffer

        return new DirectShortBufferRU(this,
                                           this.markValue(),
                                           this.position(),
                                           this.limit(),
                                           this.capacity(),
                                           0);



!!!7726722.java!!!	address() : long
        return address;
!!!7726850.java!!!	ix(in i : int) : long
        return address + ((long)i << 1);
!!!7726978.java!!!	get() : short
        return ((unsafe.getShort(ix(nextGetIndex()))));
!!!7727106.java!!!	get(in i : int) : short
        return ((unsafe.getShort(ix(checkIndex(i)))));
!!!7727234.java!!!	get(inout dst : short [[]], in offset : int, in length : int) : ShortBuffer

        if (((long)length << 1) > Bits.JNI_COPY_TO_ARRAY_THRESHOLD) {
            checkBounds(offset, length, dst.length);
            int pos = position();
            int lim = limit();
            assert (pos <= lim);
            int rem = (pos <= lim ? lim - pos : 0);
            if (length > rem)
                throw new BufferUnderflowException();


            if (order() != ByteOrder.nativeOrder())
                Bits.copyToShortArray(ix(pos), dst,
                                          (long)offset << 1,
                                          (long)length << 1);
            else

                Bits.copyToArray(ix(pos), dst, arrayBaseOffset,
                                 (long)offset << 1,
                                 (long)length << 1);
            position(pos + length);
        } else {
            super.get(dst, offset, length);
        }
        return this;



!!!7727362.java!!!	put(in x : short) : ShortBuffer

        unsafe.putShort(ix(nextPutIndex()), ((x)));
        return this;



!!!7727490.java!!!	put(in i : int, in x : short) : ShortBuffer

        unsafe.putShort(ix(checkIndex(i)), ((x)));
        return this;



!!!7727618.java!!!	put(inout src : ShortBuffer) : ShortBuffer

        if (src instanceof DirectShortBufferU) {
            if (src == this)
                throw new IllegalArgumentException();
            DirectShortBufferU sb = (DirectShortBufferU)src;

            int spos = sb.position();
            int slim = sb.limit();
            assert (spos <= slim);
            int srem = (spos <= slim ? slim - spos : 0);

            int pos = position();
            int lim = limit();
            assert (pos <= lim);
            int rem = (pos <= lim ? lim - pos : 0);

            if (srem > rem)
                throw new BufferOverflowException();
            unsafe.copyMemory(sb.ix(spos), ix(pos), (long)srem << 1);
            sb.position(spos + srem);
            position(pos + srem);
        } else if (src.hb != null) {

            int spos = src.position();
            int slim = src.limit();
            assert (spos <= slim);
            int srem = (spos <= slim ? slim - spos : 0);

            put(src.hb, src.offset + spos, srem);
            src.position(spos + srem);

        } else {
            super.put(src);
        }
        return this;



!!!7727746.java!!!	put(inout src : short [[]], in offset : int, in length : int) : ShortBuffer

        if (((long)length << 1) > Bits.JNI_COPY_FROM_ARRAY_THRESHOLD) {
            checkBounds(offset, length, src.length);
            int pos = position();
            int lim = limit();
            assert (pos <= lim);
            int rem = (pos <= lim ? lim - pos : 0);
            if (length > rem)
                throw new BufferOverflowException();


            if (order() != ByteOrder.nativeOrder())
                Bits.copyFromShortArray(src,
                                            (long)offset << 1,
                                            ix(pos),
                                            (long)length << 1);
            else

                Bits.copyFromArray(src, arrayBaseOffset,
                                   (long)offset << 1,
                                   ix(pos),
                                   (long)length << 1);
            position(pos + length);
        } else {
            super.put(src, offset, length);
        }
        return this;



!!!7727874.java!!!	compact() : ShortBuffer

        int pos = position();
        int lim = limit();
        assert (pos <= lim);
        int rem = (pos <= lim ? lim - pos : 0);

        unsafe.copyMemory(ix(pos), ix(0), (long)rem << 1);
        position(rem);
        limit(capacity());
        discardMark();
        return this;



!!!7728002.java!!!	isDirect() : boolean
        return true;
!!!7728130.java!!!	isReadOnly() : boolean
        return false;
!!!7728258.java!!!	order() : ByteOrder





        return ((ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN)
                ? ByteOrder.LITTLE_ENDIAN : ByteOrder.BIG_ENDIAN);

