class ResourceResolverSpi
!!!5509122.java!!!	engineResolve(inout uri : Attr, inout BaseURI : String) : XMLSignatureInput
        throw new UnsupportedOperationException();
!!!5509250.java!!!	engineResolveURI(inout context : ResourceResolverContext) : XMLSignatureInput
        // The default implementation, to preserve backwards compatibility in the
        // test cases, calls the old resolver API.
        return engineResolve(context.attr, context.baseUri);
!!!5509378.java!!!	engineSetProperty(inout key : String, inout value : String) : void
        if (properties == null) {
            properties = new HashMap<String, String>();
        }
        properties.put(key, value);
!!!5509506.java!!!	engineGetProperty(inout key : String) : String
        if (properties == null) {
            return null;
        }
        return properties.get(key);
!!!5509634.java!!!	engineAddProperies(inout newProperties : Map) : void
        if (newProperties != null && !newProperties.isEmpty()) {
            if (properties == null) {
                properties = new HashMap<String, String>();
            }
            properties.putAll(newProperties);
        }
!!!5509762.java!!!	engineIsThreadSafe() : boolean
        return false;
!!!5509890.java!!!	engineCanResolve(inout uri : Attr, inout BaseURI : String) : boolean
        // This method used to be abstract, so any calls to "super" are bogus.
        throw new UnsupportedOperationException();
!!!5510018.java!!!	engineCanResolveURI(inout context : ResourceResolverContext) : boolean
        // To preserve backward compatibility with existing resolvers that might override the old method,
        // call the old deprecated API.
        return engineCanResolve( context.attr, context.baseUri );
!!!5510146.java!!!	engineGetPropertyKeys() : String
        return new String[0];
!!!5510274.java!!!	understandsProperty(inout propertyToTest : String) : boolean
        String[] understood = this.engineGetPropertyKeys();

        if (understood != null) {
            for (int i = 0; i < understood.length; i++) {
                if (understood[i].equals(propertyToTest)) {
                    return true;
                }
            }
        }

        return false;
!!!5510402.java!!!	fixURI(inout str : String) : String

        // handle platform dependent strings
        str = str.replace(java.io.File.separatorChar, '/');

        if (str.length() >= 4) {

            // str =~ /^\W:\/([^/])/ # to speak perl ;-))
            char ch0 = Character.toUpperCase(str.charAt(0));
            char ch1 = str.charAt(1);
            char ch2 = str.charAt(2);
            char ch3 = str.charAt(3);
            boolean isDosFilename = ((('A' <= ch0) && (ch0 <= 'Z'))
                && (ch1 == ':') && (ch2 == '/')
                && (ch3 != '/'));

            if (isDosFilename && log.isLoggable(java.util.logging.Level.FINE)) {
                log.log(java.util.logging.Level.FINE, "Found DOS filename: " + str);
            }
        }

        // Windows fix
        if (str.length() >= 2) {
            char ch1 = str.charAt(1);

            if (ch1 == ':') {
                char ch0 = Character.toUpperCase(str.charAt(0));

                if (('A' <= ch0) && (ch0 <= 'Z')) {
                    str = "/" + str;
                }
            }
        }

        // done
        return str;
