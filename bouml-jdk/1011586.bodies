class RMIClassLoader
!!!7904898.java!!!	loadClass(inout name : String) : Class
        return loadClass((String) null, name);
!!!7905026.java!!!	loadClass(inout codebase : URL, inout name : String) : Class
        return provider.loadClass(
            codebase != null ? codebase.toString() : null, name, null);
!!!7905154.java!!!	loadClass(inout codebase : String, inout name : String) : Class
        return provider.loadClass(codebase, name, null);
!!!7905282.java!!!	loadClass(inout codebase : String, inout name : String, inout defaultLoader : ClassLoader) : Class
        return provider.loadClass(codebase, name, defaultLoader);
!!!7905410.java!!!	loadProxyClass(inout codebase : String, inout interfaces : String [[]], inout defaultLoader : ClassLoader) : Class
        return provider.loadProxyClass(codebase, interfaces, defaultLoader);
!!!7905538.java!!!	getClassLoader(inout codebase : String) : ClassLoader
        return provider.getClassLoader(codebase);
!!!7905666.java!!!	getClassAnnotation(inout cl : Class) : String
        return provider.getClassAnnotation(cl);
!!!7905794.java!!!	getDefaultProviderInstance() : RMIClassLoaderSpi
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new RuntimePermission("setFactory"));
        }
        return defaultProvider;
!!!7905922.java!!!	getSecurityContext(inout loader : ClassLoader) : Object
        return sun.rmi.server.LoaderHandler.getSecurityContext(loader);
!!!7906050.java!!!	newDefaultProviderInstance() : RMIClassLoaderSpi
        return new RMIClassLoaderSpi() {
            public Class<?> loadClass(String codebase, String name,
                                      ClassLoader defaultLoader)
                throws MalformedURLException, ClassNotFoundException
            {
                return sun.rmi.server.LoaderHandler.loadClass(
                    codebase, name, defaultLoader);
            }

            public Class<?> loadProxyClass(String codebase,
                                           String[] interfaces,
                                           ClassLoader defaultLoader)
                throws MalformedURLException, ClassNotFoundException
            {
                return sun.rmi.server.LoaderHandler.loadProxyClass(
                    codebase, interfaces, defaultLoader);
            }

            public ClassLoader getClassLoader(String codebase)
                throws MalformedURLException
            {
                return sun.rmi.server.LoaderHandler.getClassLoader(codebase);
            }

            public String getClassAnnotation(Class<?> cl) {
                return sun.rmi.server.LoaderHandler.getClassAnnotation(cl);
            }
        };
!!!7906178.java!!!	initializeProvider() : RMIClassLoaderSpi
        /*
         * First check for the system property being set:
         */
        String providerClassName =
            System.getProperty("java.rmi.server.RMIClassLoaderSpi");

        if (providerClassName != null) {
            if (providerClassName.equals("default")) {
                return defaultProvider;
            }

            try {
                Class<? extends RMIClassLoaderSpi> providerClass =
                    Class.forName(providerClassName, false,
                                  ClassLoader.getSystemClassLoader())
                    .asSubclass(RMIClassLoaderSpi.class);
                return providerClass.newInstance();

            } catch (ClassNotFoundException e) {
                throw new NoClassDefFoundError(e.getMessage());
            } catch (IllegalAccessException e) {
                throw new IllegalAccessError(e.getMessage());
            } catch (InstantiationException e) {
                throw new InstantiationError(e.getMessage());
            } catch (ClassCastException e) {
                Error error = new LinkageError(
                    "provider class not assignable to RMIClassLoaderSpi");
                error.initCause(e);
                throw error;
            }
        }

        /*
         * Next look for a provider configuration file installed:
         */
        Iterator<RMIClassLoaderSpi> iter =
            ServiceLoader.load(RMIClassLoaderSpi.class,
                               ClassLoader.getSystemClassLoader()).iterator();
        if (iter.hasNext()) {
            try {
                return iter.next();
            } catch (ClassCastException e) {
                Error error = new LinkageError(
                    "provider class not assignable to RMIClassLoaderSpi");
                error.initCause(e);
                throw error;
            }
        }

        /*
         * Finally, return the canonical instance of the default provider.
         */
        return defaultProvider;
