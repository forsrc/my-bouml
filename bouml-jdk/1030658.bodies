class PKIXParameters
!!!8041474.java!!!	PKIXParameters(inout trustAnchors : Set)
        setTrustAnchors(trustAnchors);

        this.unmodInitialPolicies = Collections.<String>emptySet();
        this.certPathCheckers = new ArrayList<PKIXCertPathChecker>();
        this.certStores = new ArrayList<CertStore>();
!!!8041602.java!!!	PKIXParameters(inout keystore : KeyStore)
        if (keystore == null)
            throw new NullPointerException("the keystore parameter must be " +
                "non-null");
        Set<TrustAnchor> hashSet = new HashSet<TrustAnchor>();
        Enumeration<String> aliases = keystore.aliases();
        while (aliases.hasMoreElements()) {
            String alias = aliases.nextElement();
            if (keystore.isCertificateEntry(alias)) {
                Certificate cert = keystore.getCertificate(alias);
                if (cert instanceof X509Certificate)
                    hashSet.add(new TrustAnchor((X509Certificate)cert, null));
            }
        }
        setTrustAnchors(hashSet);
        this.unmodInitialPolicies = Collections.<String>emptySet();
        this.certPathCheckers = new ArrayList<PKIXCertPathChecker>();
        this.certStores = new ArrayList<CertStore>();
!!!8041730.java!!!	getTrustAnchors() : Set
        return this.unmodTrustAnchors;
!!!8041858.java!!!	setTrustAnchors(inout trustAnchors : Set) : void
        if (trustAnchors == null) {
            throw new NullPointerException("the trustAnchors parameters must" +
                " be non-null");
        }
        if (trustAnchors.isEmpty()) {
            throw new InvalidAlgorithmParameterException("the trustAnchors " +
                "parameter must be non-empty");
        }
        for (Iterator<TrustAnchor> i = trustAnchors.iterator(); i.hasNext(); ) {
            if (!(i.next() instanceof TrustAnchor)) {
                throw new ClassCastException("all elements of set must be "
                    + "of type java.security.cert.TrustAnchor");
            }
        }
        this.unmodTrustAnchors = Collections.unmodifiableSet
                (new HashSet<TrustAnchor>(trustAnchors));
!!!8041986.java!!!	getInitialPolicies() : Set
        return this.unmodInitialPolicies;
!!!8042114.java!!!	setInitialPolicies(inout initialPolicies : Set) : void
        if (initialPolicies != null) {
            for (Iterator<String> i = initialPolicies.iterator();
                        i.hasNext();) {
                if (!(i.next() instanceof String))
                    throw new ClassCastException("all elements of set must be "
                        + "of type java.lang.String");
            }
            this.unmodInitialPolicies =
                Collections.unmodifiableSet(new HashSet<String>(initialPolicies));
        } else
            this.unmodInitialPolicies = Collections.<String>emptySet();
!!!8042242.java!!!	setCertStores(inout stores : List) : void
        if (stores == null) {
            this.certStores = new ArrayList<CertStore>();
        } else {
            for (Iterator<CertStore> i = stores.iterator(); i.hasNext();) {
                if (!(i.next() instanceof CertStore)) {
                    throw new ClassCastException("all elements of list must be "
                        + "of type java.security.cert.CertStore");
                }
            }
            this.certStores = new ArrayList<CertStore>(stores);
        }
!!!8042370.java!!!	addCertStore(inout store : CertStore) : void
        if (store != null) {
            this.certStores.add(store);
        }
!!!8042498.java!!!	getCertStores() : List
        return Collections.unmodifiableList
                (new ArrayList<CertStore>(this.certStores));
!!!8042626.java!!!	setRevocationEnabled(inout val : boolean) : void
        revocationEnabled = val;
!!!8042754.java!!!	isRevocationEnabled() : boolean
        return revocationEnabled;
!!!8042882.java!!!	setExplicitPolicyRequired(inout val : boolean) : void
        explicitPolicyRequired = val;
!!!8043010.java!!!	isExplicitPolicyRequired() : boolean
        return explicitPolicyRequired;
!!!8043138.java!!!	setPolicyMappingInhibited(inout val : boolean) : void
        policyMappingInhibited = val;
!!!8043266.java!!!	isPolicyMappingInhibited() : boolean
        return policyMappingInhibited;
!!!8043394.java!!!	setAnyPolicyInhibited(inout val : boolean) : void
        anyPolicyInhibited = val;
!!!8043522.java!!!	isAnyPolicyInhibited() : boolean
        return anyPolicyInhibited;
!!!8043650.java!!!	setPolicyQualifiersRejected(inout qualifiersRejected : boolean) : void
        policyQualifiersRejected = qualifiersRejected;
!!!8043778.java!!!	getPolicyQualifiersRejected() : boolean
        return policyQualifiersRejected;
!!!8043906.java!!!	getDate() : Date
        if (date == null)
            return null;
        else
            return (Date) this.date.clone();
!!!8044034.java!!!	setDate(inout date : Date) : void
        if (date != null)
            this.date = (Date) date.clone();
        else
            date = null;
!!!8044162.java!!!	setCertPathCheckers(inout checkers : List) : void
        if (checkers != null) {
            List<PKIXCertPathChecker> tmpList =
                        new ArrayList<PKIXCertPathChecker>();
            for (PKIXCertPathChecker checker : checkers) {
                tmpList.add((PKIXCertPathChecker)checker.clone());
            }
            this.certPathCheckers = tmpList;
        } else {
            this.certPathCheckers = new ArrayList<PKIXCertPathChecker>();
        }
!!!8044290.java!!!	getCertPathCheckers() : List
        List<PKIXCertPathChecker> tmpList = new ArrayList<PKIXCertPathChecker>();
        for (PKIXCertPathChecker ck : certPathCheckers) {
            tmpList.add((PKIXCertPathChecker)ck.clone());
        }
        return Collections.unmodifiableList(tmpList);
!!!8044418.java!!!	addCertPathChecker(inout checker : PKIXCertPathChecker) : void
        if (checker != null) {
            certPathCheckers.add((PKIXCertPathChecker)checker.clone());
        }
!!!8044546.java!!!	getSigProvider() : String
        return this.sigProvider;
!!!8044674.java!!!	setSigProvider(inout sigProvider : String) : void
        this.sigProvider = sigProvider;
!!!8044802.java!!!	getTargetCertConstraints() : CertSelector
        if (certSelector != null) {
            return (CertSelector) certSelector.clone();
        } else {
            return null;
        }
!!!8044930.java!!!	setTargetCertConstraints(inout selector : CertSelector) : void
        if (selector != null)
            certSelector = (CertSelector) selector.clone();
        else
            certSelector = null;
!!!8045058.java!!!	clone() : Object
        try {
            PKIXParameters copy = (PKIXParameters)super.clone();

            // must clone these because addCertStore, et al. modify them
            if (certStores != null) {
                copy.certStores = new ArrayList<CertStore>(certStores);
            }
            if (certPathCheckers != null) {
                copy.certPathCheckers =
                    new ArrayList<PKIXCertPathChecker>(certPathCheckers.size());
                for (PKIXCertPathChecker checker : certPathCheckers) {
                    copy.certPathCheckers.add(
                                    (PKIXCertPathChecker)checker.clone());
                }
            }

            // other class fields are immutable to public, don't bother
            // to clone the read-only fields.
            return copy;
        } catch (CloneNotSupportedException e) {
            /* Cannot happen */
            throw new InternalError(e.toString(), e);
        }
!!!8045186.java!!!	toString() : String
        StringBuffer sb = new StringBuffer();
        sb.append("[\n");

        /* start with trusted anchor info */
        if (unmodTrustAnchors != null) {
            sb.append("  Trust Anchors: " + unmodTrustAnchors.toString()
                + "\n");
        }

        /* now, append initial state information */
        if (unmodInitialPolicies != null) {
            if (unmodInitialPolicies.isEmpty()) {
                sb.append("  Initial Policy OIDs: any\n");
            } else {
                sb.append("  Initial Policy OIDs: ["
                    + unmodInitialPolicies.toString() + "]\n");
            }
        }

        /* now, append constraints on all certificates in the path */
        sb.append("  Validity Date: " + String.valueOf(date) + "\n");
        sb.append("  Signature Provider: " + String.valueOf(sigProvider) + "\n");
        sb.append("  Default Revocation Enabled: " + revocationEnabled + "\n");
        sb.append("  Explicit Policy Required: " + explicitPolicyRequired + "\n");
        sb.append("  Policy Mapping Inhibited: " + policyMappingInhibited + "\n");
        sb.append("  Any Policy Inhibited: " + anyPolicyInhibited + "\n");
        sb.append("  Policy Qualifiers Rejected: " + policyQualifiersRejected + "\n");

        /* now, append target cert requirements */
        sb.append("  Target Cert Constraints: " + String.valueOf(certSelector) + "\n");

        /* finally, append miscellaneous parameters */
        if (certPathCheckers != null)
            sb.append("  Certification Path Checkers: ["
                + certPathCheckers.toString() + "]\n");
        if (certStores != null)
            sb.append("  CertStores: [" + certStores.toString() + "]\n");
        sb.append("]");
        return sb.toString();
