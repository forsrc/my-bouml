format 222
"monitoring" // jdk1.8::com::sun::corba::se::spi::monitoring
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/corba/se/spi/monitoring/"
  java_package "com.sun.corba.se.spi.monitoring"
  classview 137602 "monitoring"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 218242 "MonitoredAttributeInfoFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
MonitoredAttributeInfoFactory used mostly by internal classes. If the
User needs to define some special MonitoredAttributes like a Character
type Monitored Attribute, they can use this factory to build the meta
information.

</p>
"
      operation 1057666 "createMonitoredAttributeInfo"
	public return_type class_ref 218370 // MonitoredAttributeInfo
	nparams 4
	  param inout name "description" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	  param inout name "isWritable" explicit_type "boolean"
	  param inout name "isStatistic" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A Simple Factory Method to create the Monitored Attribute Info.
"
      end
    end

    class 218370 "MonitoredAttributeInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
Monitored AttributeInfo contains the meta information of the Monitored
Attribute.
</p>
"
      operation 1057922 "isWritable"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
If the Attribute is writable from ASAdmin then isWritable() will return
true.
</p>
<p>

@return a boolean with true or false
</p>
"
      end

      operation 1058050 "isStatistic"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
isStatistic() is true if the attribute is presented as a Statistic.
</p>
<p>

@return a boolean with true or false
</p>
"
      end

      operation 1058178 "type"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Class Type: We will allow only basic class types: 1)Boolean 2)Integer
3)Byte 4)Long 5)Float 6)Double 7)String 8)Character
</p>
<p>

@return a Class Type
</p>
"
      end

      operation 1058306 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Get's the description for the Monitored Attribute.
</p>
<p>

@return a String with description
</p>
"
      end
    end

    class 218754 "MonitoredObjectFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>

MonitoredObject Factory to create Monitored Object.
</p>
"
      operation 1059074 "createMonitoredObject"
	public return_type class_ref 218882 // MonitoredObject
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A Simple Factory Method to create the Monitored Object. The name
 should be the leaf level name.
"
      end
    end

    class 218882 "MonitoredObject"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
Monitored Object provides an Hierarchichal view of the ORB Monitoring
System. It can contain multiple children and a single parent. Each
Monitored Object may also contain Multiple Monitored Attributes.
</p>
"
      operation 1059330 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
Gets the name of this MonitoredObject
</p><p>

@return a String with name of this Monitored Object
</p>
"
      end

      operation 1059458 "getDescription"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets the description of MonitoredObject
</p><p>

@return a String with Monitored Object Description.
</p>
"
      end

      operation 1059586 "addChild"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 218882 // MonitoredObject
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
This method will add a child Monitored Object to this Monitored Object.
</p>
<p>
</p>
"
      end

      operation 1059714 "removeChild"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
This method will remove child Monitored Object identified by the given name
</p>
<p>
@param name of the ChildMonitored Object
</p>
"
      end

      operation 1059842 "getChild"
	public return_type class_ref 218882 // MonitoredObject
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets the child MonitoredObject associated with this MonitoredObject
instance using name as the key. The name should be fully qualified name
like orb.connectionmanager
</p>
<p>

@return a MonitoredObject identified by the given name
</p>
<p>
@param name of the ChildMonitored Object
</p>
"
      end

      operation 1059970 "getChildren"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets all the Children registered under this instance of Monitored
Object.
</p>
<p>

@return Collection of immediate Children associated with this MonitoredObject.
</p>
"
      end

      operation 1060098 "setParent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 218882 // MonitoredObject
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Sets the parent for this Monitored Object.
</p>
<p>
</p>
"
      end

      operation 1060226 "getParent"
	public return_type class_ref 218882 // MonitoredObject
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
There will be only one parent for an instance of MontoredObject, this
call gets parent and returns null if the Monitored Object is the root.
</p>
<p>

@return a MonitoredObject which is a Parent of this Monitored Object instance
</p>
"
      end

      operation 1060354 "addAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 219138 // MonitoredAttribute
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Adds the attribute with the given name.
</p>
<p>

</p>
<p>
@param value is the MonitoredAttribute which will be set as one of the
attribute of this MonitoredObject.
</p>
"
      end

      operation 1060482 "removeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Removes the attribute with the given name.
</p>
<p>

</p>
<p>
@param name is the MonitoredAttribute name
</p>
"
      end

      operation 1060610 "getAttribute"
	public return_type class_ref 219138 // MonitoredAttribute
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets the Monitored Object registered by the given name
</p>

<p>
@return a MonitoredAttribute identified by the given name
</p>
<p>
@param name of the attribute
</p>
"
      end

      operation 1060738 "getAttributes"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets all the Monitored Attributes for this Monitored Objects. It doesn't
include the Child Monitored Object, that needs to be traversed using
getChild() or getChildren() call.
</p>
<p>

@return Collection of all the Attributes for this MonitoredObject
</p>
"
      end

      operation 1060866 "clearState"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Clears the state of all the Monitored Attributes associated with the
Monitored Object. It will also clear the state on all it's child
Monitored Object. The call to clearState will be initiated from
CORBAMBean.startMonitoring() call.
</p>

"
      end
    end

    class 219138 "MonitoredAttribute"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
Monitored Attribute is the interface to represent a Monitorable
Attribute. Using this interface, one can get the value of the attribute
and set the value if it is a writeable attribute.
</p>
"
      operation 1615490 "getAttributeInfo"
	public return_type class_ref 218370 // MonitoredAttributeInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
Gets the Monitored Attribute Info for the attribute.
</p>
<p>

@param monitoredAttributeInfo for this Monitored Attribute.
</p>
"
      end

      operation 1615618 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Sets the value for the Monitored Attribute if isWritable() is false, the
method will throw ILLEGAL Operation exception.

Also, the type of 'value' should be same as specified in the
MonitoredAttributeInfo for a particular instance.
</p>
<p>

@param value should be any one of the Basic Java Type Objects which are
Long, Double, Float, String, Integer, Short, Character, Byte.
</p>
"
      end

      operation 1615746 "getValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets the value of the Monitored Attribute. The value can be obtained
from different parts of the module. User may choose to delegate the call
to getValue() to other variables.

NOTE: It is important to make sure that the type of Object returned in
getvalue is same as the one specified in MonitoredAttributeInfo for this
attribute.
</p>
<p>

</p>
<p>

@param value is the current value for this MonitoredAttribute
</p>
"
      end

      operation 1615874 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets the name of the Monitored Attribute.
</p>
<p>

@param name of this Attribute
</p>
"
      end

      operation 1616002 "clearState"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
If this attribute needs to be cleared, the user needs to implement this
method to reset the state to initial state. If the Monitored Attribute
doesn't change like for example (ConnectionManager High Water Mark),
then clearState() is a No Op.
</p>

"
      end
    end

    class 219394 "MonitoringManagerFactory"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
MonitoringObjectFactory is used internally by the ORB, It is not for
general public use.
</p>
"
      operation 1062786 "createMonitoringManager"
	public return_type class_ref 219522 // MonitoringManager
	nparams 2
	  param inout name "nameOfTheRoot" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A Simple Factory Method to create the Monitored Attribute Info.
"
      end

      operation 1062914 "remove"
	public explicit_return_type "void"
	nparams 1
	  param inout name "nameOfTheRoot" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 219522 "MonitoringManager"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>
Monitoring Manager will have a 1 to 1 association with the ORB. This
gives access to the top level Monitored Object, using which more
Monitored Objects and Attributes can be added and traversed.
</p>
<p>

@author Hemanth Puttaswamy
</p>
"
      classrelation 276482 // <generalisation>
	relation 276482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 276482 // <generalisation>
	  b parent class_ref 146562 // Closeable
      end

      operation 1063298 "getRootMonitoredObject"
	public return_type class_ref 218882 // MonitoredObject
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
Gets the Root Monitored Object which contains a Hierarchy Of Monitored
Objects exposing various Monitorable Attributes of Various modules.
</p>
<p>

@param MonitoredObject ...
</p>
"
      end

      operation 1063426 "clearState"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Initialize is called whenever there is a start monitoring call to CORBA
MBean. This will result in triaging initialize to all the
MonitoredObjects and it's Monitored Attributes.
</p>

"
      end
    end

    class 303106 "LongMonitoredAttributeBase"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
A Cleaner Abstraction to provide a Monitored Attribute of type 'Long'
</p>
"
      classrelation 500354 // <generalisation>
	relation 500354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 500354 // <generalisation>
	  b parent class_ref 303234 // MonitoredAttributeBase
      end

      operation 1617154 "LongMonitoredAttributeBase"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
Constructs LongMonitoredAttribute, by creating the
MonitoredAttributeInfo with 'Long' as the class type.
Users are expected to extend this class and provide the implementation
for getValue() and if needed clearState() as well.
</p>
<p>

@param name of tthe MonitoredAttribute
</p>
<p>
@param description of the Attribute, Please provid a well thought out
description, so that the admin can make sense of the attribute supplied.
</p>
"
      end
    end

    class 303234 "MonitoredAttributeBase"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
 A Convenient class provided to help users extend and implement only
 getValue(), if there is no need to clear the state and the attribute is not
 writable.

</p>
"
      classrelation 499970 // <realization>
	relation 499970 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 499970 // <realization>
	  b parent class_ref 219138 // MonitoredAttribute
      end

      classrelation 500098 // name (<unidirectional association>)
	relation 500098 --->
	  a role_name "name" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500098 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 500226 // attributeInfo (<unidirectional association>)
	relation 500226 --->
	  a role_name "attributeInfo" package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500226 // attributeInfo (<unidirectional association>)
	  b parent class_ref 218370 // MonitoredAttributeInfo
      end

      operation 1616130 "MonitoredAttributeBase"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "info" type class_ref 218370 // MonitoredAttributeInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.
"
      end

      operation 1616258 "MonitoredAttributeBase"
	package explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A Package Private Constructor for internal use only.
"
      end

      operation 1616386 "setMonitoredAttributeInfo"
	package explicit_return_type "void"
	nparams 1
	  param inout name "info" type class_ref 218370 // MonitoredAttributeInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A Package Private convenience method for setting MonitoredAttributeInfo
for this Monitored Attribute.
"
      end

      operation 1616514 "clearState"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If the concrete class decides not to provide the implementation of this
 method, then it's OK. Some of the  examples where we may decide to not
 provide the implementation is the connection state. Irrespective of
 the call to clearState, the connection state will be showing the
 currect state of the connection.
 NOTE: This method is only used to clear the Monitored Attribute state,
 not the real state of the system itself.
"
      end

      operation 1616642 "getValue"
	abstract public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method should be implemented by the concrete class.
"
      end

      operation 1616770 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method should be implemented by the concrete class only if the
 attribute is writable. If the attribute is not writable and if this
 method called, it will result in an IllegalStateException.
"
      end

      operation 1616898 "getAttributeInfo"
	public return_type class_ref 218370 // MonitoredAttributeInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the MonitoredAttributeInfo for the attribute.
"
      end

      operation 1617026 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the attribute.
"
      end
    end

    class 303362 "MonitoringConstants"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 500482 // DEFAULT_MONITORING_ROOT (<unidirectional association>)
	relation 500482 --->
	  a role_name "DEFAULT_MONITORING_ROOT" init_value " \"orb\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500482 // DEFAULT_MONITORING_ROOT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 500610 // DEFAULT_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	relation 500610 --->
	  a role_name "DEFAULT_MONITORING_ROOT_DESCRIPTION" init_value "
        \"ORB Management and Monitoring Root\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500610 // DEFAULT_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 500738 // CONNECTION_MONITORING_ROOT (<unidirectional association>)
	relation 500738 --->
	  a role_name "CONNECTION_MONITORING_ROOT" init_value "
        \"Connections\"" class_relation const_relation public
	    comment " Connection Monitoring

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500738 // CONNECTION_MONITORING_ROOT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 500866 // CONNECTION_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	relation 500866 --->
	  a role_name "CONNECTION_MONITORING_ROOT_DESCRIPTION" init_value "
        \"Statistics on inbound/outbound connections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500866 // CONNECTION_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 500994 // INBOUND_CONNECTION_MONITORING_ROOT (<unidirectional association>)
	relation 500994 --->
	  a role_name "INBOUND_CONNECTION_MONITORING_ROOT" init_value "
        \"Inbound\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 500994 // INBOUND_CONNECTION_MONITORING_ROOT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 501122 // INBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	relation 501122 --->
	  a role_name "INBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION" init_value "
        \"Statistics on inbound connections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501122 // INBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 501250 // OUTBOUND_CONNECTION_MONITORING_ROOT (<unidirectional association>)
	relation 501250 --->
	  a role_name "OUTBOUND_CONNECTION_MONITORING_ROOT" init_value "
        \"Outbound\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501250 // OUTBOUND_CONNECTION_MONITORING_ROOT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 501378 // OUTBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	relation 501378 --->
	  a role_name "OUTBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION" init_value "
        \"Statistics on outbound connections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501378 // OUTBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 501506 // CONNECTION_MONITORING_DESCRIPTION (<unidirectional association>)
	relation 501506 --->
	  a role_name "CONNECTION_MONITORING_DESCRIPTION" init_value "
        \"Connection statistics\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501506 // CONNECTION_MONITORING_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 501634 // CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS (<unidirectional association>)
	relation 501634 --->
	  a role_name "CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS" init_value "
        \"NumberOfConnections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501634 // CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 501762 // CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS_DESCRIPTION (<unidirectional association>)
	relation 501762 --->
	  a role_name "CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS_DESCRIPTION" init_value "
        \"The total number of connections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501762 // CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 501890 // CONNECTION_NUMBER_OF_IDLE_CONNECTIONS (<unidirectional association>)
	relation 501890 --->
	  a role_name "CONNECTION_NUMBER_OF_IDLE_CONNECTIONS" init_value "
        \"NumberOfIdleConnections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 501890 // CONNECTION_NUMBER_OF_IDLE_CONNECTIONS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 502018 // CONNECTION_NUMBER_OF_IDLE_CONNECTIONS_DESCRIPTION (<unidirectional association>)
	relation 502018 --->
	  a role_name "CONNECTION_NUMBER_OF_IDLE_CONNECTIONS_DESCRIPTION" init_value "
        \"The number of idle connections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502018 // CONNECTION_NUMBER_OF_IDLE_CONNECTIONS_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 502146 // CONNECTION_NUMBER_OF_BUSY_CONNECTIONS (<unidirectional association>)
	relation 502146 --->
	  a role_name "CONNECTION_NUMBER_OF_BUSY_CONNECTIONS" init_value "
        \"NumberOfBusyConnections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502146 // CONNECTION_NUMBER_OF_BUSY_CONNECTIONS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 502274 // CONNECTION_NUMBER_OF_BUSY_CONNECTIONS_DESCRIPTION (<unidirectional association>)
	relation 502274 --->
	  a role_name "CONNECTION_NUMBER_OF_BUSY_CONNECTIONS_DESCRIPTION" init_value "
        \"The number of busy connections\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502274 // CONNECTION_NUMBER_OF_BUSY_CONNECTIONS_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 502402 // THREADPOOL_MONITORING_ROOT (<unidirectional association>)
	relation 502402 --->
	  a role_name "THREADPOOL_MONITORING_ROOT" init_value " \"threadpool\"" class_relation const_relation public
	    comment " ThreadPool and WorkQueue monitoring constants

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502402 // THREADPOOL_MONITORING_ROOT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 502530 // THREADPOOL_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	relation 502530 --->
	  a role_name "THREADPOOL_MONITORING_ROOT_DESCRIPTION" init_value "
        \"Monitoring for all ThreadPool instances\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502530 // THREADPOOL_MONITORING_ROOT_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 502658 // THREADPOOL_MONITORING_DESCRIPTION (<unidirectional association>)
	relation 502658 --->
	  a role_name "THREADPOOL_MONITORING_DESCRIPTION" init_value "
        \"Monitoring for a ThreadPool\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502658 // THREADPOOL_MONITORING_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 502786 // THREADPOOL_CURRENT_NUMBER_OF_THREADS (<unidirectional association>)
	relation 502786 --->
	  a role_name "THREADPOOL_CURRENT_NUMBER_OF_THREADS" init_value "
        \"currentNumberOfThreads\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502786 // THREADPOOL_CURRENT_NUMBER_OF_THREADS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 502914 // THREADPOOL_CURRENT_NUMBER_OF_THREADS_DESCRIPTION (<unidirectional association>)
	relation 502914 --->
	  a role_name "THREADPOOL_CURRENT_NUMBER_OF_THREADS_DESCRIPTION" init_value "
        \"Current number of total threads in the ThreadPool\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 502914 // THREADPOOL_CURRENT_NUMBER_OF_THREADS_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 503042 // THREADPOOL_NUMBER_OF_AVAILABLE_THREADS (<unidirectional association>)
	relation 503042 --->
	  a role_name "THREADPOOL_NUMBER_OF_AVAILABLE_THREADS" init_value "
        \"numberOfAvailableThreads\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503042 // THREADPOOL_NUMBER_OF_AVAILABLE_THREADS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 503170 // THREADPOOL_NUMBER_OF_AVAILABLE_THREADS_DESCRIPTION (<unidirectional association>)
	relation 503170 --->
	  a role_name "THREADPOOL_NUMBER_OF_AVAILABLE_THREADS_DESCRIPTION" init_value "
        \"Number of available threads in the ThreadPool\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503170 // THREADPOOL_NUMBER_OF_AVAILABLE_THREADS_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 503298 // THREADPOOL_NUMBER_OF_BUSY_THREADS (<unidirectional association>)
	relation 503298 --->
	  a role_name "THREADPOOL_NUMBER_OF_BUSY_THREADS" init_value "
        \"numberOfBusyThreads\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503298 // THREADPOOL_NUMBER_OF_BUSY_THREADS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 503426 // THREADPOOL_NUMBER_OF_BUSY_THREADS_DESCRIPTION (<unidirectional association>)
	relation 503426 --->
	  a role_name "THREADPOOL_NUMBER_OF_BUSY_THREADS_DESCRIPTION" init_value "
        \"Number of busy threads in the ThreadPool\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503426 // THREADPOOL_NUMBER_OF_BUSY_THREADS_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 503554 // THREADPOOL_AVERAGE_WORK_COMPLETION_TIME (<unidirectional association>)
	relation 503554 --->
	  a role_name "THREADPOOL_AVERAGE_WORK_COMPLETION_TIME" init_value "
        \"averageWorkCompletionTime\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503554 // THREADPOOL_AVERAGE_WORK_COMPLETION_TIME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 503682 // THREADPOOL_AVERAGE_WORK_COMPLETION_TIME_DESCRIPTION (<unidirectional association>)
	relation 503682 --->
	  a role_name "THREADPOOL_AVERAGE_WORK_COMPLETION_TIME_DESCRIPTION" init_value "
        \"Average elapsed time taken to complete a work item by the ThreadPool\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503682 // THREADPOOL_AVERAGE_WORK_COMPLETION_TIME_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 503810 // THREADPOOL_CURRENT_PROCESSED_COUNT (<unidirectional association>)
	relation 503810 --->
	  a role_name "THREADPOOL_CURRENT_PROCESSED_COUNT" init_value "
        \"currentProcessedCount\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503810 // THREADPOOL_CURRENT_PROCESSED_COUNT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 503938 // THREADPOOL_CURRENT_PROCESSED_COUNT_DESCRIPTION (<unidirectional association>)
	relation 503938 --->
	  a role_name "THREADPOOL_CURRENT_PROCESSED_COUNT_DESCRIPTION" init_value "
        \"Number of Work items processed by the ThreadPool\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 503938 // THREADPOOL_CURRENT_PROCESSED_COUNT_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 504066 // WORKQUEUE_MONITORING_DESCRIPTION (<unidirectional association>)
	relation 504066 --->
	  a role_name "WORKQUEUE_MONITORING_DESCRIPTION" init_value "
        \"Monitoring for a Work Queue\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504066 // WORKQUEUE_MONITORING_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 504194 // WORKQUEUE_TOTAL_WORK_ITEMS_ADDED (<unidirectional association>)
	relation 504194 --->
	  a role_name "WORKQUEUE_TOTAL_WORK_ITEMS_ADDED" init_value "
        \"totalWorkItemsAdded\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504194 // WORKQUEUE_TOTAL_WORK_ITEMS_ADDED (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 504322 // WORKQUEUE_TOTAL_WORK_ITEMS_ADDED_DESCRIPTION (<unidirectional association>)
	relation 504322 --->
	  a role_name "WORKQUEUE_TOTAL_WORK_ITEMS_ADDED_DESCRIPTION" init_value "
        \"Total number of Work items added to the Queue\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504322 // WORKQUEUE_TOTAL_WORK_ITEMS_ADDED_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 504450 // WORKQUEUE_WORK_ITEMS_IN_QUEUE (<unidirectional association>)
	relation 504450 --->
	  a role_name "WORKQUEUE_WORK_ITEMS_IN_QUEUE" init_value "
        \"workItemsInQueue\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504450 // WORKQUEUE_WORK_ITEMS_IN_QUEUE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 504578 // WORKQUEUE_WORK_ITEMS_IN_QUEUE_DESCRIPTION (<unidirectional association>)
	relation 504578 --->
	  a role_name "WORKQUEUE_WORK_ITEMS_IN_QUEUE_DESCRIPTION" init_value "
        \"Number of Work items in the Queue to be processed\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504578 // WORKQUEUE_WORK_ITEMS_IN_QUEUE_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 504706 // WORKQUEUE_AVERAGE_TIME_IN_QUEUE (<unidirectional association>)
	relation 504706 --->
	  a role_name "WORKQUEUE_AVERAGE_TIME_IN_QUEUE" init_value "
        \"averageTimeInQueue\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504706 // WORKQUEUE_AVERAGE_TIME_IN_QUEUE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 504834 // WORKQUEUE_AVERAGE_TIME_IN_QUEUE_DESCRIPTION (<unidirectional association>)
	relation 504834 --->
	  a role_name "WORKQUEUE_AVERAGE_TIME_IN_QUEUE_DESCRIPTION" init_value "
        \"Average time a work item waits in the work queue\"" class_relation const_relation public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504834 // WORKQUEUE_AVERAGE_TIME_IN_QUEUE_DESCRIPTION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 303490 "MonitoringFactories"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
 This is used for getting the default factories for
 MonitoredObject, MonitoredAttributeInfo and MonitoringManager. We do not
 expect users to use the MonitoredAttributeInfo factory most of the time
 because the Info is automatically built by StringMonitoredAttributeBase
 and LongMonitoredAttributeBase.
 </p>
"
      classrelation 504962 // monitoredObjectFactory (<unidirectional association>)
	relation 504962 --->
	  a role_name "monitoredObjectFactory" init_value "
        new MonitoredObjectFactoryImpl( )" class_relation const_relation private
	    comment "/////////////////////////////////////
 attributes
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 504962 // monitoredObjectFactory (<unidirectional association>)
	  b parent class_ref 218626 // MonitoredObjectFactoryImpl
      end

      classrelation 505090 // monitoredAttributeInfoFactory (<unidirectional association>)
	relation 505090 --->
	  a role_name "monitoredAttributeInfoFactory" init_value "
        new MonitoredAttributeInfoFactoryImpl( )" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505090 // monitoredAttributeInfoFactory (<unidirectional association>)
	  b parent class_ref 218114 // MonitoredAttributeInfoFactoryImpl
      end

      classrelation 505218 // monitoringManagerFactory (<unidirectional association>)
	relation 505218 --->
	  a role_name "monitoringManagerFactory" init_value "
        new MonitoringManagerFactoryImpl( )" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505218 // monitoringManagerFactory (<unidirectional association>)
	  b parent class_ref 219266 // MonitoringManagerFactoryImpl
      end

      operation 1617282 "getMonitoredObjectFactory"
	class_operation public return_type class_ref 218754 // MonitoredObjectFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
Gets the MonitoredObjectFactory
</p>
<p>

@return a MonitoredObjectFactory
</p>
"
      end

      operation 1617410 "getMonitoredAttributeInfoFactory"
	class_operation public return_type class_ref 218242 // MonitoredAttributeInfoFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets the MonitoredAttributeInfoFactory. The user is not expected to use this
Factory, since the MonitoredAttributeInfo is internally created by
StringMonitoredAttributeBase, LongMonitoredAttributeBase and
StatisticMonitoredAttribute. If User wants to create a MonitoredAttribute
of some other special type like a DoubleMonitoredAttribute, they can
build a DoubleMonitoredAttributeBase like LongMonitoredAttributeBase
and build a MonitoredAttributeInfo required by MonitoredAttributeBase
internally by using this Factory.
</p>
<p>

@return a MonitoredAttributeInfoFactory
</p>
"
      end

      operation 1617538 "getMonitoringManagerFactory"
	class_operation public return_type class_ref 219394 // MonitoringManagerFactory
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Gets the MonitoredManagerFactory. The user is not expected to use this
Factory, since the ORB will be automatically initialized with the
MonitoringManager.

User can get hold of MonitoringManager associated with ORB by calling
orb.getMonitoringManager( )
</p>
<p>

@return a MonitoredManagerFactory
</p>
"
      end
    end

    class 303618 "StatisticMonitoredAttribute"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
StatisticsMonitoredAttribute is provided as a convenience to collect the
Statistics of any entity. The getValue() call will be delegated to the
StatisticsAccumulator set by the user.
</p>
"
      classrelation 505346 // <generalisation>
	relation 505346 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 505346 // <generalisation>
	  b parent class_ref 303234 // MonitoredAttributeBase
      end

      classrelation 505474 // statisticsAccumulator (<unidirectional association>)
	relation 505474 --->
	  a role_name "statisticsAccumulator" private
	    comment " Every StatisticMonitoredAttribute will have a StatisticAccumulator. User
 will use Statisticsaccumulator to accumulate the samples associated with
 this Monitored Attribute
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505474 // statisticsAccumulator (<unidirectional association>)
	  b parent class_ref 303746 // StatisticsAccumulator
      end

      classrelation 505602 // mutex (<unidirectional association>)
	relation 505602 --->
	  a role_name "mutex" private
	    comment " Mutex is passed from the user class which is providing the sample values.
 getValue() and clearState() is synchronized on this user provided mutex
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505602 // mutex (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 1617666 "StatisticMonitoredAttribute"
	public explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "desc" type class_ref 128130 // String
	  param inout name "s" type class_ref 303746 // StatisticsAccumulator
	  param inout name "mutex" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
Constructs the StaisticMonitoredAttribute, builds the required
MonitoredAttributeInfo with Long as the class type and is always
readonly attribute.
</p>
<p>

@param name Of this attribute
</p>
<p>
@return a StatisticMonitoredAttribute
</p>
<p>
@param desc should provide a good description on the kind of statistics
collected, a good example is \"Connection Response Time Stats will Provide the
detailed stats based on the samples provided from every request completion
time\"
</p>
<p>
@param s is the StatisticsAcumulator that user will use to accumulate the
samples and this Attribute Object will get the computed statistics values
from.
</p>
<p>
@param mutex using which clearState() and getValue() calls need to be locked.
</p>
"
      end

      operation 1617794 "getValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " end StatisticMonitoredAttribute

 Gets the value from the StatisticsAccumulator, the value will be a formatted
 String with the computed statistics based on the samples accumulated in the
 Statistics Accumulator.
"
      end

      operation 1617922 "clearState"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears the state on Statistics Accumulator, After this call all samples are
 treated fresh and the old sample computations are disregarded.
"
      end

      operation 1618050 "getStatisticsAccumulator"
	public return_type class_ref 303746 // StatisticsAccumulator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the statistics accumulator associated with StatisticMonitoredAttribute.
 Usually, the user don't need to use this method as they can keep the handle
 to Accumulator to collect the samples.
"
      end
    end

    class 303746 "StatisticsAccumulator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
StatisticsAccumulator accumulates the samples provided by the user and
computes the value of minimum, maximum, sum and sample square sum. When
the StatisticMonitoredAttribute calls getValue(), it will compute all
the statistics for the collected samples (Which are Minimum, Maximum,
Average, StandardDeviation) and provides a nice printable record as a
String.

Users can easily extend this class and provide the implementation of
toString() method to format the stats as desired. By default all the stats
are printed in a single line.
</p>
"
      attribute 343298 "max"
	protected explicit_type "double"
	init_value " Double.MIN_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "/////////////////////////////////////
 attributes
 Users can extend this class to get access to current Max value
"
      end

      attribute 343426 "min"
	protected explicit_type "double"
	init_value " Double.MAX_VALUE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Users can extend this class to get access to current Min value
"
      end

      attribute 343554 "sampleSum"
	private explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 343682 "sampleSquareSum"
	private explicit_type "double"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 343810 "sampleCount"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 505730 // unit (<unidirectional association>)
	relation 505730 --->
	  a role_name "unit" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505730 // unit (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 1618178 "sample"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
User will use this method to just register a sample with the
StatisticsAccumulator. This is the only method that User will use to
expose the statistics, internally the StatisticMonitoredAttribute will
collect the information when requested from the ASAdmin.
</p>
<p>

</p>
<p>

@param value a double value to make it more precise
</p>
"
      end

      operation 1618306 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " end sample

 Computes the Standard Statistic Results based on the samples collected
 so far and provides the complete value as a formatted String
"
      end

      operation 1618434 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Users can extend StatisticsAccumulator to provide the complete
 Stats in the format they prefer, if the default format doesn't suffice.
"
      end

      operation 1618562 "computeAverage"
	protected explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If users choose to custom format the stats.
"
      end

      operation 1618690 "computeStandardDeviation"
	protected explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "We use a derived Standard Deviation formula to compute SD. This way
there is no need to hold on to all the samples provided.

The method is protected to let users extend and format the results.
"
      end

      operation 1618818 "StatisticsAccumulator"
	public explicit_return_type ""
	nparams 1
	  param inout name "unit" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>
Construct the Statistics Accumulator by providing the unit as a String.
The examples of units are &quot;Hours&quot;, &quot;Minutes&quot;,
&quot;Seconds&quot;, &quot;MilliSeconds&quot;, &quot;Micro Seconds&quot;
etc.,
</p>
<p>

@return a StatisticsAccumulator with ...
</p>
<p>
@param unit a String representing the units for the samples collected
</p>
"
      end

      operation 1618946 "clearState"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Clears the samples and starts fresh on new samples.
"
      end

      operation 1619074 "unitTestValidate"
	public explicit_return_type "void"
	nparams 6
	  param inout name "expectedUnit" type class_ref 128130 // String
	  param in name "expectedMin" explicit_type "double"
	  param in name "expectedMax" explicit_type "double"
	  param in name "expectedSampleCount" explicit_type "long"
	  param in name "expectedAverage" explicit_type "double"
	  param in name "expectedStandardDeviation" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This is an internal API to test StatisticsAccumulator...
"
      end
    end

    class 303874 "StringMonitoredAttributeBase"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>

@author Hemanth Puttaswamy
</p>
<p>
A Convenient Abstraction to present String type Monitored Attribute. One
of the examples of StringMonitoredAttribute is the State information.
</p>
"
      classrelation 505858 // <generalisation>
	relation 505858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 505858 // <generalisation>
	  b parent class_ref 303234 // MonitoredAttributeBase
      end

      operation 1619202 "StringMonitoredAttributeBase"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "description" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/////////////////////////////////////
 operations

<p>
Constructs StringMonitoredAttribute with the MonitoredAttributeInfo
built with the class type of String.
</p>
<p>

@param name of this attribute
</p>
<p>
@param description of this attribute
</p>
<p>
@return a StringMonitoredAttributeBase
</p>
"
      end
    end
  end

  deploymentview 132994 "monitoring"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 175106 "MonitoredAttributeInfoFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 218242 // MonitoredAttributeInfoFactory
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 175362 "MonitoredAttributeInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 218370 // MonitoredAttributeInfo
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 175618 "MonitoredObjectFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 218754 // MonitoredObjectFactory
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 175874 "MonitoredObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.corba.se.spi.monitoring.MonitoredAttribute;
import java.util.*;
import java.util.Collection;
${definition}"
      associated_elems
	class_ref 218882 // MonitoredObject
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 176130 "MonitoringManagerFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 219394 // MonitoringManagerFactory
      end
      comment "Copyright (c) 2003, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 176386 "MonitoringManager"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
import com.sun.corba.se.spi.orb.ORB;
import com.sun.corba.se.spi.monitoring.MonitoredObject;
import java.util.*;
${definition}"
      associated_elems
	class_ref 219522 // MonitoringManager
      end
      comment "Copyright (c) 2003, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 248578 "MonitoredAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.corba.se.spi.monitoring.MonitoredAttributeInfo;
import java.util.*;
${definition}"
      associated_elems
	class_ref 219138 // MonitoredAttribute
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 248706 "MonitoredAttributeBase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 303234 // MonitoredAttributeBase
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 248834 "LongMonitoredAttributeBase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 303106 // LongMonitoredAttributeBase
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 248962 "MonitoringConstants"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 303362 // MonitoringConstants
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 249090 "MonitoringFactories"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.corba.se.impl.monitoring.MonitoredObjectFactoryImpl;
import com.sun.corba.se.impl.monitoring.MonitoredAttributeInfoFactoryImpl;
import com.sun.corba.se.impl.monitoring.MonitoringManagerFactoryImpl;
${definition}"
      associated_elems
	class_ref 303490 // MonitoringFactories
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 249218 "StatisticMonitoredAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 303618 // StatisticMonitoredAttribute
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 249346 "StatisticsAccumulator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 303746 // StatisticsAccumulator
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 249474 "StringMonitoredAttributeBase"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 303874 // StringMonitoredAttributeBase
      end
      comment "Copyright (c) 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
