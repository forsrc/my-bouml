class Signature
!!!3389826.java!!!	Signature(inout c : Signature)
    this(c.getNameIndex(), c.getLength(), c.getSignatureIndex(), c.getConstantPool());
!!!3389954.java!!!	Signature(in name_index : int, in length : int, inout file : DataInputStream, inout constant_pool : ConstantPool)
    this(name_index, length, file.readUnsignedShort(), constant_pool);
!!!3390082.java!!!	Signature(in name_index : int, in length : int, in signature_index : int, inout constant_pool : ConstantPool)
    super(Constants.ATTR_SIGNATURE, name_index, length, constant_pool);
    this.signature_index = signature_index;
!!!3390210.java!!!	accept(inout v : Visitor) : void
     System.err.println("Visiting non-standard Signature object");
     v.visitSignature(this);
!!!3390338.java!!!	dump(inout file : DataOutputStream) : void
    super.dump(file);
    file.writeShort(signature_index);
!!!3390466.java!!!	getSignatureIndex() : int
 return signature_index;
!!!3390594.java!!!	setSignatureIndex(in signature_index : int) : void
    this.signature_index = signature_index;
!!!3390722.java!!!	getSignature() : String
    ConstantUtf8 c = (ConstantUtf8)constant_pool.getConstant(signature_index,
                                                             Constants.CONSTANT_Utf8);
    return c.getBytes();
!!!3391490.java!!!	identStart(in ch : int) : boolean
    return ch == 'T' || ch == 'L';
!!!3391618.java!!!	identPart(in ch : int) : boolean
    return ch == '/' || ch == ';';
!!!3391746.java!!!	matchIdent(inout in : Signature::MyByteArrayInputStream, inout buf : StringBuffer) : void
    int ch;

    if((ch = in.read()) == -1)
      throw new RuntimeException("Illegal signature: " + in.getData() +
                                 " no ident, reaching EOF");

    //System.out.println("return from ident:" + (char)ch);

    if(!identStart(ch)) {
      StringBuffer buf2 = new StringBuffer();

      int count = 1;
      while(Character.isJavaIdentifierPart((char)ch)) {
        buf2.append((char)ch);
        count++;
        ch = in.read();
      }

      if(ch == ':') { // Ok, formal parameter
        in.skip("Ljava/lang/Object".length());
        buf.append(buf2);

        ch = in.read();
        in.unread();
        //System.out.println("so far:" + buf2 + ":next:" +(char)ch);
      } else {
        for(int i=0; i < count; i++)
          in.unread();
      }

      return;
    }

    StringBuffer buf2 = new StringBuffer();
    ch = in.read();

    do {
      buf2.append((char)ch);
      ch = in.read();
      //System.out.println("within ident:"+ (char)ch);

    } while((ch != -1) && (Character.isJavaIdentifierPart((char)ch) || (ch == '/')));

    buf.append(buf2.toString().replace('/', '.'));

    //System.out.println("regular return ident:"+ (char)ch + ":" + buf2);

    if(ch != -1)
      in.unread();
!!!3391874.java!!!	matchGJIdent(inout in : Signature::MyByteArrayInputStream, inout buf : StringBuffer) : void
    int ch;

    matchIdent(in, buf);

    ch = in.read();
    if((ch == '<') || ch == '(') { // Parameterized or method
      //System.out.println("Enter <");
      buf.append((char)ch);
      matchGJIdent(in, buf);

      while(((ch = in.read()) != '>') && (ch != ')')) { // List of parameters
        if(ch == -1)
          throw new RuntimeException("Illegal signature: " + in.getData() +
                                     " reaching EOF");

        //System.out.println("Still no >");
        buf.append(", ");
        in.unread();
        matchGJIdent(in, buf); // Recursive call
      }

      //System.out.println("Exit >");

      buf.append((char)ch);
    } else
      in.unread();

    ch = in.read();
    if(identStart(ch)) {
      in.unread();
      matchGJIdent(in, buf);
    } else if(ch == ')') {
      in.unread();
      return;
    } else if(ch != ';')
      throw new RuntimeException("Illegal signature: " + in.getData() + " read " +
                                 (char)ch);
!!!3392002.java!!!	translate(inout s : String) : String
    //System.out.println("Sig:" + s);
    StringBuffer buf = new StringBuffer();

    matchGJIdent(new MyByteArrayInputStream(s), buf);

    return buf.toString();
!!!3392130.java!!!	isFormalParameterList(inout s : String) : boolean
    return s.startsWith("<") && (s.indexOf(':') > 0);
!!!3392258.java!!!	isActualParameterList(inout s : String) : boolean
    return s.startsWith("L") && s.endsWith(">;");
!!!3392386.java!!!	toString() : String
    String s = getSignature();

    return "Signature(" + s + ")";
!!!3392514.java!!!	copy(inout constant_pool : ConstantPool) : Attribute
    return (Signature)clone();
