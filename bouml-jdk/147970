format 222
"dom" // jdk1.8::org::w3c::dom
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/org/w3c/dom/"
  java_package "org.w3c.dom"
  classview 144386 "dom"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 317570 "Node"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Node</code> interface is the primary datatype for the entire
Document Object Model. It represents a single node in the document tree.
While all objects implementing the <code>Node</code> interface expose
methods for dealing with children, not all objects implementing the
<code>Node</code> interface may have children. For example,
<code>Text</code> nodes may not have children, and adding children to
such nodes results in a <code>DOMException</code> being raised.
<p>The attributes <code>nodeName</code>, <code>nodeValue</code> and
<code>attributes</code> are included as a mechanism to get at node
information without casting down to the specific derived interface. In
cases where there is no obvious mapping of these attributes for a
specific <code>nodeType</code> (e.g., <code>nodeValue</code> for an
<code>Element</code> or <code>attributes</code> for a <code>Comment</code>
), this returns <code>null</code>. Note that the specialized interfaces
may contain additional and more convenient mechanisms to get and set the
relevant information.
<p>The values of <code>nodeName</code>,
<code>nodeValue</code>, and <code>attributes</code> vary according to the
node type as follows:
<table border='1' cellpadding='3'>
<tr>
<th>Interface</th>
<th>nodeName</th>
<th>nodeValue</th>
<th>attributes</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
<code>Attr</code></td>
<td valign='top' rowspan='1' colspan='1'>same as <code>Attr.name</code></td>
<td valign='top' rowspan='1' colspan='1'>same as
<code>Attr.value</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>CDATASection</code></td>
<td valign='top' rowspan='1' colspan='1'>
<code>\"#cdata-section\"</code></td>
<td valign='top' rowspan='1' colspan='1'>same as <code>CharacterData.data</code>, the
content of the CDATA Section</td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Comment</code></td>
<td valign='top' rowspan='1' colspan='1'>
<code>\"#comment\"</code></td>
<td valign='top' rowspan='1' colspan='1'>same as <code>CharacterData.data</code>, the
content of the comment</td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Document</code></td>
<td valign='top' rowspan='1' colspan='1'>
<code>\"#document\"</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
<code>DocumentFragment</code></td>
<td valign='top' rowspan='1' colspan='1'><code>\"#document-fragment\"</code></td>
<td valign='top' rowspan='1' colspan='1'>
<code>null</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>DocumentType</code></td>
<td valign='top' rowspan='1' colspan='1'>same as
<code>DocumentType.name</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
<code>Element</code></td>
<td valign='top' rowspan='1' colspan='1'>same as <code>Element.tagName</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
<td valign='top' rowspan='1' colspan='1'>
<code>NamedNodeMap</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Entity</code></td>
<td valign='top' rowspan='1' colspan='1'>entity name</td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
<td valign='top' rowspan='1' colspan='1'>
<code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>EntityReference</code></td>
<td valign='top' rowspan='1' colspan='1'>name of entity referenced</td>
<td valign='top' rowspan='1' colspan='1'>
<code>null</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Notation</code></td>
<td valign='top' rowspan='1' colspan='1'>notation name</td>
<td valign='top' rowspan='1' colspan='1'>
<code>null</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>ProcessingInstruction</code></td>
<td valign='top' rowspan='1' colspan='1'>same
as <code>ProcessingInstruction.target</code></td>
<td valign='top' rowspan='1' colspan='1'>same as
<code>ProcessingInstruction.data</code></td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Text</code></td>
<td valign='top' rowspan='1' colspan='1'>
<code>\"#text\"</code></td>
<td valign='top' rowspan='1' colspan='1'>same as <code>CharacterData.data</code>, the content
of the text node</td>
<td valign='top' rowspan='1' colspan='1'><code>null</code></td>
</tr>
</table>
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      attribute 885122 "ELEMENT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " NodeType

The node is an <code>Element</code>.

"
      end

      attribute 885250 "ATTRIBUTE_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is an <code>Attr</code>.

"
      end

      attribute 885378 "TEXT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>Text</code> node.

"
      end

      attribute 885506 "CDATA_SECTION_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>CDATASection</code>.

"
      end

      attribute 885634 "ENTITY_REFERENCE_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is an <code>EntityReference</code>.

"
      end

      attribute 885762 "ENTITY_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is an <code>Entity</code>.

"
      end

      attribute 885890 "PROCESSING_INSTRUCTION_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>ProcessingInstruction</code>.

"
      end

      attribute 886018 "COMMENT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>Comment</code>.

"
      end

      attribute 886146 "DOCUMENT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>Document</code>.

"
      end

      attribute 886274 "DOCUMENT_TYPE_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>DocumentType</code>.

"
      end

      attribute 886402 "DOCUMENT_FRAGMENT_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>DocumentFragment</code>.

"
      end

      attribute 886530 "NOTATION_NODE"
	class_attribute const_attribute public explicit_type "short"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is a <code>Notation</code>.

"
      end

      operation 4164226 "getNodeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The name of this node, depending on its type; see the table above.
"
      end

      operation 4164354 "getNodeValue"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The value of this node, depending on its type; see the table above.
When it is defined to be <code>null</code>, setting it has no effect,
including if the node is read-only.
@exception DOMException
  DOMSTRING_SIZE_ERR: Raised when it would return more characters than
  fit in a <code>DOMString</code> variable on the implementation
  platform.
"
      end

      operation 4164482 "setNodeValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "nodeValue" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The value of this node, depending on its type; see the table above.
When it is defined to be <code>null</code>, setting it has no effect,
including if the node is read-only.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly and if
  it is not defined to be <code>null</code>.
"
      end

      operation 4164610 "getNodeType"
	public explicit_return_type "short"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A code representing the type of the underlying object, as defined above.
"
      end

      operation 4164738 "getParentNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The parent of this node. All nodes, except <code>Attr</code>,
<code>Document</code>, <code>DocumentFragment</code>,
<code>Entity</code>, and <code>Notation</code> may have a parent.
However, if a node has just been created and not yet added to the
tree, or if it has been removed from the tree, this is
<code>null</code>.
"
      end

      operation 4164866 "getChildNodes"
	public return_type class_ref 333058 // NodeList
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A <code>NodeList</code> that contains all children of this node. If
there are no children, this is a <code>NodeList</code> containing no
nodes.
"
      end

      operation 4164994 "getFirstChild"
	public return_type class_ref 317570 // Node
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The first child of this node. If there is no such node, this returns
<code>null</code>.
"
      end

      operation 4165122 "getLastChild"
	public return_type class_ref 317570 // Node
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The last child of this node. If there is no such node, this returns
<code>null</code>.
"
      end

      operation 4165250 "getPreviousSibling"
	public return_type class_ref 317570 // Node
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The node immediately preceding this node. If there is no such node,
this returns <code>null</code>.
"
      end

      operation 4165378 "getNextSibling"
	public return_type class_ref 317570 // Node
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The node immediately following this node. If there is no such node,
this returns <code>null</code>.
"
      end

      operation 4165506 "getAttributes"
	public return_type class_ref 327042 // NamedNodeMap
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A <code>NamedNodeMap</code> containing the attributes of this node (if
it is an <code>Element</code>) or <code>null</code> otherwise.
"
      end

      operation 4165634 "getOwnerDocument"
	public return_type class_ref 378626 // Document
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>Document</code> object associated with this node. This is
also the <code>Document</code> object used to create new nodes. When
this node is a <code>Document</code> or a <code>DocumentType</code>
which is not used with any <code>Document</code> yet, this is
<code>null</code>.

@since DOM Level 2
"
      end

      operation 4165762 "insertBefore"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "newChild" type class_ref 317570 // Node
	  param inout name "refChild" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the node <code>newChild</code> before the existing child node
<code>refChild</code>. If <code>refChild</code> is <code>null</code>,
insert <code>newChild</code> at the end of the list of children.
<br>If <code>newChild</code> is a <code>DocumentFragment</code> object,
all of its children are inserted, in the same order, before
<code>refChild</code>. If the <code>newChild</code> is already in the
tree, it is first removed.
<p ><b>Note:</b>  Inserting a node before itself is implementation
dependent.
@param newChild The node to insert.
@param refChild The reference node, i.e., the node before which the
  new node must be inserted.
@return The node being inserted.
@exception DOMException
  HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not
  allow children of the type of the <code>newChild</code> node, or if
  the node to insert is one of this node's ancestors or this node
  itself, or if this node is of type <code>Document</code> and the
  DOM application attempts to insert a second
  <code>DocumentType</code> or <code>Element</code> node.
  <br>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created
  from a different document than the one that created this node.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or
  if the parent of the node being inserted is readonly.
  <br>NOT_FOUND_ERR: Raised if <code>refChild</code> is not a child of
  this node.
  <br>NOT_SUPPORTED_ERR: if this node is of type <code>Document</code>,
  this exception might be raised if the DOM implementation doesn't
  support the insertion of a <code>DocumentType</code> or
  <code>Element</code> node.

@since DOM Level 3
"
      end

      operation 4165890 "replaceChild"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "newChild" type class_ref 317570 // Node
	  param inout name "oldChild" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the child node <code>oldChild</code> with <code>newChild</code>
 in the list of children, and returns the <code>oldChild</code> node.
<br>If <code>newChild</code> is a <code>DocumentFragment</code> object,
<code>oldChild</code> is replaced by all of the
<code>DocumentFragment</code> children, which are inserted in the
same order. If the <code>newChild</code> is already in the tree, it
is first removed.
<p ><b>Note:</b>  Replacing a node with itself is implementation
dependent.
@param newChild The new node to put in the child list.
@param oldChild The node being replaced in the list.
@return The node replaced.
@exception DOMException
  HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not
  allow children of the type of the <code>newChild</code> node, or if
  the node to put in is one of this node's ancestors or this node
  itself, or if this node is of type <code>Document</code> and the
  result of the replacement operation would add a second
  <code>DocumentType</code> or <code>Element</code> on the
  <code>Document</code> node.
  <br>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created
  from a different document than the one that created this node.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node or the parent of
  the new node is readonly.
  <br>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child of
  this node.
  <br>NOT_SUPPORTED_ERR: if this node is of type <code>Document</code>,
  this exception might be raised if the DOM implementation doesn't
  support the replacement of the <code>DocumentType</code> child or
  <code>Element</code> child.

@since DOM Level 3
"
      end

      operation 4166018 "removeChild"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "oldChild" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the child node indicated by <code>oldChild</code> from the list
of children, and returns it.
@param oldChild The node being removed.
@return The node removed.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>NOT_FOUND_ERR: Raised if <code>oldChild</code> is not a child of
  this node.
  <br>NOT_SUPPORTED_ERR: if this node is of type <code>Document</code>,
  this exception might be raised if the DOM implementation doesn't
  support the removal of the <code>DocumentType</code> child or the
  <code>Element</code> child.

@since DOM Level 3
"
      end

      operation 4166146 "appendChild"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "newChild" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the node <code>newChild</code> to the end of the list of children
of this node. If the <code>newChild</code> is already in the tree, it
is first removed.
@param newChild The node to add.If it is a
  <code>DocumentFragment</code> object, the entire contents of the
  document fragment are moved into the child list of this node
@return The node added.
@exception DOMException
  HIERARCHY_REQUEST_ERR: Raised if this node is of a type that does not
  allow children of the type of the <code>newChild</code> node, or if
  the node to append is one of this node's ancestors or this node
  itself, or if this node is of type <code>Document</code> and the
  DOM application attempts to append a second
  <code>DocumentType</code> or <code>Element</code> node.
  <br>WRONG_DOCUMENT_ERR: Raised if <code>newChild</code> was created
  from a different document than the one that created this node.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly or
  if the previous parent of the node being inserted is readonly.
  <br>NOT_SUPPORTED_ERR: if the <code>newChild</code> node is a child
  of the <code>Document</code> node, this exception might be raised
  if the DOM implementation doesn't support the removal of the
  <code>DocumentType</code> child or <code>Element</code> child.

@since DOM Level 3
"
      end

      operation 4166274 "hasChildNodes"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this node has any children.
@return Returns <code>true</code> if this node has any children,
  <code>false</code> otherwise.
"
      end

      operation 4166402 "cloneNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "deep" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a duplicate of this node, i.e., serves as a generic copy
constructor for nodes. The duplicate node has no parent (
<code>parentNode</code> is <code>null</code>) and no user data. User
data associated to the imported node is not carried over. However, if
any <code>UserDataHandlers</code> has been specified along with the
associated data these handlers will be called with the appropriate
parameters before this method returns.
<br>Cloning an <code>Element</code> copies all attributes and their
values, including those generated by the XML processor to represent
defaulted attributes, but this method does not copy any children it
contains unless it is a deep clone. This includes text contained in
an the <code>Element</code> since the text is contained in a child
<code>Text</code> node. Cloning an <code>Attr</code> directly, as
opposed to be cloned as part of an <code>Element</code> cloning
operation, returns a specified attribute (<code>specified</code> is
<code>true</code>). Cloning an <code>Attr</code> always clones its
children, since they represent its value, no matter whether this is a
deep clone or not. Cloning an <code>EntityReference</code>
automatically constructs its subtree if a corresponding
<code>Entity</code> is available, no matter whether this is a deep
clone or not. Cloning any other type of node simply returns a copy of
this node.
<br>Note that cloning an immutable subtree results in a mutable copy,
but the children of an <code>EntityReference</code> clone are readonly
. In addition, clones of unspecified <code>Attr</code> nodes are
specified. And, cloning <code>Document</code>,
<code>DocumentType</code>, <code>Entity</code>, and
<code>Notation</code> nodes is implementation dependent.
@param deep If <code>true</code>, recursively clone the subtree under
  the specified node; if <code>false</code>, clone only the node
  itself (and its attributes, if it is an <code>Element</code>).
@return The duplicate node.
"
      end

      operation 4166530 "normalize"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Puts all <code>Text</code> nodes in the full depth of the sub-tree
underneath this <code>Node</code>, including attribute nodes, into a
\"normal\" form where only structure (e.g., elements, comments,
processing instructions, CDATA sections, and entity references)
separates <code>Text</code> nodes, i.e., there are neither adjacent
<code>Text</code> nodes nor empty <code>Text</code> nodes. This can
be used to ensure that the DOM view of a document is the same as if
it were saved and re-loaded, and is useful when operations (such as
XPointer [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>]
 lookups) that depend on a particular document tree structure are to
be used. If the parameter \"normalize-characters\" of the
<code>DOMConfiguration</code> object attached to the
<code>Node.ownerDocument</code> is <code>true</code>, this method
will also fully normalize the characters of the <code>Text</code>
nodes.
<p ><b>Note:</b> In cases where the document contains
<code>CDATASections</code>, the normalize operation alone may not be
sufficient, since XPointers do not differentiate between
<code>Text</code> nodes and <code>CDATASection</code> nodes.

@since DOM Level 3
"
      end

      operation 4166658 "isSupported"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Tests whether the DOM implementation implements a specific feature and
that feature is supported by this node, as specified in .
@param feature  The name of the feature to test.
@param version  This is the version number of the feature to test.
@return Returns <code>true</code> if the specified feature is
  supported on this node, <code>false</code> otherwise.

@since DOM Level 2
"
      end

      operation 4166786 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The namespace URI of this node, or <code>null</code> if it is
unspecified (see ).
<br>This is not a computed value that is the result of a namespace
lookup based on an examination of the namespace declarations in
scope. It is merely the namespace URI given at creation time.
<br>For nodes of any type other than <code>ELEMENT_NODE</code> and
<code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1
method, such as <code>Document.createElement()</code>, this is always
<code>null</code>.
<p ><b>Note:</b> Per the <em>Namespaces in XML</em> Specification [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
 an attribute does not inherit its namespace from the element it is
attached to. If an attribute is not explicitly given a namespace, it
simply has no namespace.

@since DOM Level 2
"
      end

      operation 4166914 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The namespace prefix of this node, or <code>null</code> if it is
unspecified. When it is defined to be <code>null</code>, setting it
has no effect, including if the node is read-only.
<br>Note that setting this attribute, when permitted, changes the
<code>nodeName</code> attribute, which holds the qualified name, as
well as the <code>tagName</code> and <code>name</code> attributes of
the <code>Element</code> and <code>Attr</code> interfaces, when
applicable.
<br>Setting the prefix to <code>null</code> makes it unspecified,
setting it to an empty string is implementation dependent.
<br>Note also that changing the prefix of an attribute that is known to
have a default value, does not make a new attribute with the default
value and the original prefix appear, since the
<code>namespaceURI</code> and <code>localName</code> do not change.
<br>For nodes of any type other than <code>ELEMENT_NODE</code> and
<code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1
method, such as <code>createElement</code> from the
<code>Document</code> interface, this is always <code>null</code>.

@since DOM Level 2
"
      end

      operation 4167042 "setPrefix"
	public explicit_return_type "void"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The namespace prefix of this node, or <code>null</code> if it is
unspecified. When it is defined to be <code>null</code>, setting it
has no effect, including if the node is read-only.
<br>Note that setting this attribute, when permitted, changes the
<code>nodeName</code> attribute, which holds the qualified name, as
well as the <code>tagName</code> and <code>name</code> attributes of
the <code>Element</code> and <code>Attr</code> interfaces, when
applicable.
<br>Setting the prefix to <code>null</code> makes it unspecified,
setting it to an empty string is implementation dependent.
<br>Note also that changing the prefix of an attribute that is known to
have a default value, does not make a new attribute with the default
value and the original prefix appear, since the
<code>namespaceURI</code> and <code>localName</code> do not change.
<br>For nodes of any type other than <code>ELEMENT_NODE</code> and
<code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1
method, such as <code>createElement</code> from the
<code>Document</code> interface, this is always <code>null</code>.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified prefix contains an
  illegal character according to the XML version in use specified in
  the <code>Document.xmlVersion</code> attribute.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>NAMESPACE_ERR: Raised if the specified <code>prefix</code> is
  malformed per the Namespaces in XML specification, if the
  <code>namespaceURI</code> of this node is <code>null</code>, if the
  specified prefix is \"xml\" and the <code>namespaceURI</code> of this
  node is different from \"<a href='http://www.w3.org/XML/1998/namespace'>
  http://www.w3.org/XML/1998/namespace</a>\", if this node is an attribute and the specified prefix is \"xmlns\" and
  the <code>namespaceURI</code> of this node is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\", or if this node is an attribute and the <code>qualifiedName</code> of
  this node is \"xmlns\" [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
  .

@since DOM Level 2
"
      end

      operation 4167170 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the local part of the qualified name of this node.
<br>For nodes of any type other than <code>ELEMENT_NODE</code> and
<code>ATTRIBUTE_NODE</code> and nodes created with a DOM Level 1
method, such as <code>Document.createElement()</code>, this is always
<code>null</code>.

@since DOM Level 2
"
      end

      operation 4167298 "hasAttributes"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this node (if it is an element) has any attributes.
@return Returns <code>true</code> if this node has any attributes,
  <code>false</code> otherwise.

@since DOM Level 2
"
      end

      operation 4167426 "getBaseURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The absolute base URI of this node or <code>null</code> if the
implementation wasn't able to obtain an absolute URI. This value is
computed as described in . However, when the <code>Document</code>
supports the feature \"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]
, the base URI is computed using first the value of the href
attribute of the HTML BASE element if any, and the value of the
<code>documentURI</code> attribute from the <code>Document</code>
interface otherwise.

@since DOM Level 3
"
      end

      attribute 886658 "DOCUMENT_POSITION_DISCONNECTED"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x01"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " DocumentPosition

The two nodes are disconnected. Order between disconnected nodes is
always implementation-specific.

"
      end

      attribute 886786 "DOCUMENT_POSITION_PRECEDING"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x02"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The second node precedes the reference node.

"
      end

      attribute 886914 "DOCUMENT_POSITION_FOLLOWING"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x04"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node follows the reference node.

"
      end

      attribute 887042 "DOCUMENT_POSITION_CONTAINS"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x08"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node contains the reference node. A node which contains is always
preceding, too.

"
      end

      attribute 887170 "DOCUMENT_POSITION_CONTAINED_BY"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is contained by the reference node. A node which is contained
is always following, too.

"
      end

      attribute 887298 "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC"
	class_attribute const_attribute public explicit_type "short"
	init_value " 0x20"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The determination of preceding versus following is
implementation-specific.

"
      end

      operation 4167554 "compareDocumentPosition"
	public explicit_return_type "short"
	nparams 1
	  param inout name "other" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the reference node, i.e. the node on which this method is
being called, with a node, i.e. the one passed as a parameter, with
regard to their position in the document and according to the
document order.
@param other The node to compare against the reference node.
@return Returns how the node is positioned relatively to the reference
  node.
@exception DOMException
  NOT_SUPPORTED_ERR: when the compared nodes are from different DOM
  implementations that do not coordinate to return consistent
  implementation-specific results.

@since DOM Level 3
"
      end

      operation 4167682 "getTextContent"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This attribute returns the text content of this node and its
descendants. When it is defined to be <code>null</code>, setting it
has no effect. On setting, any possible children this node may have
are removed and, if it the new string is not empty or
<code>null</code>, replaced by a single <code>Text</code> node
containing the string this attribute is set to.
<br> On getting, no serialization is performed, the returned string
does not contain any markup. No whitespace normalization is performed
and the returned string does not contain the white spaces in element
content (see the attribute
<code>Text.isElementContentWhitespace</code>). Similarly, on setting,
no parsing is performed either, the input string is taken as pure
textual content.
<br>The string returned is made of the text content of this node
depending on its type, as defined below:
<table border='1' cellpadding='3'>
<tr>
<th>Node type</th>
<th>Content</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
DOCUMENT_FRAGMENT_NODE</td>
<td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
attribute value of every child node, excluding COMMENT_NODE and
PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the
node has no children.</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE,
PROCESSING_INSTRUCTION_NODE</td>
<td valign='top' rowspan='1' colspan='1'><code>nodeValue</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE,
DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
<td valign='top' rowspan='1' colspan='1'><em>null</em></td>
</tr>
</table>
@exception DOMException
  DOMSTRING_SIZE_ERR: Raised when it would return more characters than
  fit in a <code>DOMString</code> variable on the implementation
  platform.

@since DOM Level 3
"
      end

      operation 4167810 "setTextContent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "textContent" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This attribute returns the text content of this node and its
descendants. When it is defined to be <code>null</code>, setting it
has no effect. On setting, any possible children this node may have
are removed and, if it the new string is not empty or
<code>null</code>, replaced by a single <code>Text</code> node
containing the string this attribute is set to.
<br> On getting, no serialization is performed, the returned string
does not contain any markup. No whitespace normalization is performed
and the returned string does not contain the white spaces in element
content (see the attribute
<code>Text.isElementContentWhitespace</code>). Similarly, on setting,
no parsing is performed either, the input string is taken as pure
textual content.
<br>The string returned is made of the text content of this node
depending on its type, as defined below:
<table border='1' cellpadding='3'>
<tr>
<th>Node type</th>
<th>Content</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
ELEMENT_NODE, ATTRIBUTE_NODE, ENTITY_NODE, ENTITY_REFERENCE_NODE,
DOCUMENT_FRAGMENT_NODE</td>
<td valign='top' rowspan='1' colspan='1'>concatenation of the <code>textContent</code>
attribute value of every child node, excluding COMMENT_NODE and
PROCESSING_INSTRUCTION_NODE nodes. This is the empty string if the
node has no children.</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>TEXT_NODE, CDATA_SECTION_NODE, COMMENT_NODE,
PROCESSING_INSTRUCTION_NODE</td>
<td valign='top' rowspan='1' colspan='1'><code>nodeValue</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>DOCUMENT_NODE,
DOCUMENT_TYPE_NODE, NOTATION_NODE</td>
<td valign='top' rowspan='1' colspan='1'><em>null</em></td>
</tr>
</table>
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.

@since DOM Level 3
"
      end

      operation 4167938 "isSameNode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 317570 // Node
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this node is the same node as the given one.
<br>This method provides a way to determine whether two
<code>Node</code> references returned by the implementation reference
the same object. When two <code>Node</code> references are references
to the same object, even if through a proxy, the references may be
used completely interchangeably, such that all attributes have the
same values and calling the same DOM method on either reference
always has exactly the same effect.
@param other The node to test against.
@return Returns <code>true</code> if the nodes are the same,
  <code>false</code> otherwise.

@since DOM Level 3
"
      end

      operation 4168066 "lookupPrefix"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "namespaceURI" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look up the prefix associated to the given namespace URI, starting from
this node. The default namespace declarations are ignored by this
method.
<br>See  for details on the algorithm used by this method.
@param namespaceURI The namespace URI to look for.
@return Returns an associated namespace prefix if found or
  <code>null</code> if none is found. If more than one prefix are
  associated to the namespace prefix, the returned namespace prefix
  is implementation dependent.

@since DOM Level 3
"
      end

      operation 4168194 "isDefaultNamespace"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "namespaceURI" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method checks if the specified <code>namespaceURI</code> is the
default namespace or not.
@param namespaceURI The namespace URI to look for.
@return Returns <code>true</code> if the specified
  <code>namespaceURI</code> is the default namespace,
  <code>false</code> otherwise.

@since DOM Level 3
"
      end

      operation 4168322 "lookupNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look up the namespace URI associated to the given prefix, starting from
this node.
<br>See  for details on the algorithm used by this method.
@param prefix The prefix to look for. If this parameter is
  <code>null</code>, the method will return the default namespace URI
  if any.
@return Returns the associated namespace URI or <code>null</code> if
  none is found.

@since DOM Level 3
"
      end

      operation 4168450 "isEqualNode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "arg" type class_ref 317570 // Node
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether two nodes are equal.
<br>This method tests for equality of nodes, not sameness (i.e.,
whether the two nodes are references to the same object) which can be
tested with <code>Node.isSameNode()</code>. All nodes that are the
same will also be equal, though the reverse may not be true.
<br>Two nodes are equal if and only if the following conditions are
satisfied:
<ul>
<li>The two nodes are of the same type.
</li>
<li>The following string
attributes are equal: <code>nodeName</code>, <code>localName</code>,
<code>namespaceURI</code>, <code>prefix</code>, <code>nodeValue</code>
. This is: they are both <code>null</code>, or they have the same
length and are character for character identical.
</li>
<li>The
<code>attributes</code> <code>NamedNodeMaps</code> are equal. This
is: they are both <code>null</code>, or they have the same length and
for each node that exists in one map there is a node that exists in
the other map and is equal, although not necessarily at the same
index.
</li>
<li>The <code>childNodes</code> <code>NodeLists</code> are equal.
This is: they are both <code>null</code>, or they have the same
length and contain equal nodes at the same index. Note that
normalization can affect equality; to avoid this, nodes should be
normalized before being compared.
</li>
</ul>
<br>For two <code>DocumentType</code> nodes to be equal, the following
conditions must also be satisfied:
<ul>
<li>The following string attributes
are equal: <code>publicId</code>, <code>systemId</code>,
<code>internalSubset</code>.
</li>
<li>The <code>entities</code>
<code>NamedNodeMaps</code> are equal.
</li>
<li>The <code>notations</code>
<code>NamedNodeMaps</code> are equal.
</li>
</ul>
<br>On the other hand, the following do not affect equality: the
<code>ownerDocument</code>, <code>baseURI</code>, and
<code>parentNode</code> attributes, the <code>specified</code>
attribute for <code>Attr</code> nodes, the <code>schemaTypeInfo</code>
 attribute for <code>Attr</code> and <code>Element</code> nodes, the
<code>Text.isElementContentWhitespace</code> attribute for
<code>Text</code> nodes, as well as any user data or event listeners
registered on the nodes.
<p ><b>Note:</b>  As a general rule, anything not mentioned in the
description above is not significant in consideration of equality
checking. Note that future versions of this specification may take
into account more attributes and implementations conform to this
specification are expected to be updated accordingly.
@param arg The node to compare equality with.
@return Returns <code>true</code> if the nodes are equal,
  <code>false</code> otherwise.

@since DOM Level 3
"
      end

      operation 4168578 "getFeature"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method returns a specialized object which implements the
specialized APIs of the specified feature and version, as specified
in . The specialized object may also be obtained by using
binding-specific casting methods but is not necessarily expected to,
as discussed in . This method also allow the implementation to
provide specialized objects which do not support the <code>Node</code>
 interface.
@param feature  The name of the feature requested. Note that any plus
  sign \"+\" prepended to the name of the feature will be ignored since
  it is not significant in the context of this method.
@param version  This is the version number of the feature to test.
@return  Returns an object which implements the specialized APIs of
  the specified feature and version, if any, or <code>null</code> if
  there is no object which implements interfaces associated with that
  feature. If the <code>DOMObject</code> returned by this method
  implements the <code>Node</code> interface, it must delegate to the
  primary core <code>Node</code> and not return results inconsistent
  with the primary core <code>Node</code> such as attributes,
  childNodes, etc.

@since DOM Level 3
"
      end

      operation 4168706 "setUserData"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "key" type class_ref 128130 // String
	  param inout name "data" type class_ref 129538 // Object
	  param inout name "handler" type class_ref 647298 // UserDataHandler
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associate an object to a key on this node. The object can later be
retrieved from this node by calling <code>getUserData</code> with the
same key.
@param key The key to associate the object to.
@param data The object to associate to the given key, or
  <code>null</code> to remove any existing association to that key.
@param handler The handler to associate to that key, or
  <code>null</code>.
@return Returns the <code>DOMUserData</code> previously associated to
  the given key on this node, or <code>null</code> if there was none.

@since DOM Level 3
"
      end

      operation 4168834 "getUserData"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the object associated to a key on a this node. The object
must first have been set to this node by calling
<code>setUserData</code> with the same key.
@param key The key the object is associated to.
@return Returns the <code>DOMUserData</code> associated to the given
  key on this node, or <code>null</code> if there was none.

@since DOM Level 3
"
      end
    end

    class 327042 "NamedNodeMap"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Objects implementing the <code>NamedNodeMap</code> interface are used to
represent collections of nodes that can be accessed by name. Note that
<code>NamedNodeMap</code> does not inherit from <code>NodeList</code>;
<code>NamedNodeMaps</code> are not maintained in any particular order.
Objects contained in an object implementing <code>NamedNodeMap</code> may
also be accessed by an ordinal index, but this is simply to allow
convenient enumeration of the contents of a <code>NamedNodeMap</code>,
and does not imply that the DOM specifies an order to these Nodes.
<p><code>NamedNodeMap</code> objects in the DOM are live.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      operation 4157186 "getNamedItem"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a node specified by name.
@param name The <code>nodeName</code> of a node to retrieve.
@return A <code>Node</code> (of any type) with the specified
  <code>nodeName</code>, or <code>null</code> if it does not identify
  any node in this map.
"
      end

      operation 4157314 "setNamedItem"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "arg" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a node using its <code>nodeName</code> attribute. If a node with
that name is already present in this map, it is replaced by the new
one. Replacing a node by itself has no effect.
<br>As the <code>nodeName</code> attribute is used to derive the name
which the node must be stored under, multiple nodes of certain types
(those that have a \"special\" string value) cannot be stored as the
names would clash. This is seen as preferable to allowing nodes to be
aliased.
@param arg A node to store in this map. The node will later be
  accessible using the value of its <code>nodeName</code> attribute.
@return If the new <code>Node</code> replaces an existing node the
  replaced <code>Node</code> is returned, otherwise <code>null</code>
  is returned.
@exception DOMException
  WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a
  different document than the one that created this map.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
  <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an
  <code>Attr</code> that is already an attribute of another
  <code>Element</code> object. The DOM user must explicitly clone
  <code>Attr</code> nodes to re-use them in other elements.
  <br>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node
  doesn't belong in this NamedNodeMap. Examples would include trying
  to insert something other than an Attr node into an Element's map
  of attributes, or a non-Entity node into the DocumentType's map of
  Entities.
"
      end

      operation 4157442 "removeNamedItem"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a node specified by name. When this map contains the attributes
attached to an element, if the removed attribute is known to have a
default value, an attribute immediately appears containing the
default value as well as the corresponding namespace URI, local name,
and prefix when applicable.
@param name The <code>nodeName</code> of the node to remove.
@return The node removed from this map if a node with such a name
  exists.
@exception DOMException
  NOT_FOUND_ERR: Raised if there is no node named <code>name</code> in
  this map.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
"
      end

      operation 4157570 "item"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>index</code>th item in the map. If <code>index</code>
is greater than or equal to the number of nodes in this map, this
returns <code>null</code>.
@param index Index into this map.
@return The node at the <code>index</code>th position in the map, or
  <code>null</code> if that is not a valid index.
"
      end

      operation 4157698 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of nodes in this map. The range of valid child node indices
is <code>0</code> to <code>length-1</code> inclusive.
"
      end

      operation 4157826 "getNamedItemNS"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a node specified by local name and namespace URI.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value null as the namespaceURI parameter
for methods if they wish to have no namespace.
@param namespaceURI The namespace URI of the node to retrieve.
@param localName The local name of the node to retrieve.
@return A <code>Node</code> (of any type) with the specified local
  name and namespace URI, or <code>null</code> if they do not
  identify any node in this map.
@exception DOMException
  NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature \"XML\" and the language exposed through the
  Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4157954 "setNamedItemNS"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "arg" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a node using its <code>namespaceURI</code> and
<code>localName</code>. If a node with that namespace URI and that
local name is already present in this map, it is replaced by the new
one. Replacing a node by itself has no effect.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value null as the namespaceURI parameter
for methods if they wish to have no namespace.
@param arg A node to store in this map. The node will later be
  accessible using the value of its <code>namespaceURI</code> and
  <code>localName</code> attributes.
@return If the new <code>Node</code> replaces an existing node the
  replaced <code>Node</code> is returned, otherwise <code>null</code>
  is returned.
@exception DOMException
  WRONG_DOCUMENT_ERR: Raised if <code>arg</code> was created from a
  different document than the one that created this map.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
  <br>INUSE_ATTRIBUTE_ERR: Raised if <code>arg</code> is an
  <code>Attr</code> that is already an attribute of another
  <code>Element</code> object. The DOM user must explicitly clone
  <code>Attr</code> nodes to re-use them in other elements.
  <br>HIERARCHY_REQUEST_ERR: Raised if an attempt is made to add a node
  doesn't belong in this NamedNodeMap. Examples would include trying
  to insert something other than an Attr node into an Element's map
  of attributes, or a non-Entity node into the DocumentType's map of
  Entities.
  <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature \"XML\" and the language exposed through the
  Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4158082 "removeNamedItemNS"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a node specified by local name and namespace URI. A removed
attribute may be known to have a default value when this map contains
the attributes attached to an element, as returned by the attributes
attribute of the <code>Node</code> interface. If so, an attribute
immediately appears containing the default value as well as the
corresponding namespace URI, local name, and prefix when applicable.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value null as the namespaceURI parameter
for methods if they wish to have no namespace.
@param namespaceURI The namespace URI of the node to remove.
@param localName The local name of the node to remove.
@return The node removed from this map if a node with such a local
  name and namespace URI exists.
@exception DOMException
  NOT_FOUND_ERR: Raised if there is no node with the specified
  <code>namespaceURI</code> and <code>localName</code> in this map.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this map is readonly.
  <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature \"XML\" and the language exposed through the
  Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end
    end

    class 333058 "NodeList"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>NodeList</code> interface provides the abstraction of an ordered
collection of nodes, without defining or constraining how this collection
is implemented. <code>NodeList</code> objects in the DOM are live.
<p>The items in the <code>NodeList</code> are accessible via an integral
index, starting from 0.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      operation 4168962 "item"
	public return_type class_ref 317570 // Node
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>index</code>th item in the collection. If
<code>index</code> is greater than or equal to the number of nodes in
the list, this returns <code>null</code>.
@param index Index into the collection.
@return The node at the <code>index</code>th position in the
  <code>NodeList</code>, or <code>null</code> if that is not a valid
  index.
"
      end

      operation 4169090 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of nodes in the list. The range of valid child node indices
is 0 to <code>length-1</code> inclusive.
"
      end
    end

    class 378626 "Document"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Document</code> interface represents the entire HTML or XML
document. Conceptually, it is the root of the document tree, and provides
the primary access to the document's data.
<p>Since elements, text nodes, comments, processing instructions, etc.
cannot exist outside the context of a <code>Document</code>, the
<code>Document</code> interface also contains the factory methods needed
to create these objects. The <code>Node</code> objects created have a
<code>ownerDocument</code> attribute which associates them with the
<code>Document</code> within whose context they were created.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1778562 // <generalisation>
	relation 1778562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1778562 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 4201730 "getDoctype"
	public return_type class_ref 649986 // DocumentType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The Document Type Declaration (see <code>DocumentType</code>)
associated with this document. For XML documents without a document
type declaration this returns <code>null</code>. For HTML documents,
a <code>DocumentType</code> object may be returned, independently of
the presence or absence of document type declaration in the HTML
document.
<br>This provides direct access to the <code>DocumentType</code> node,
child node of this <code>Document</code>. This node can be set at
document creation time and later changed through the use of child
nodes manipulation methods, such as <code>Node.insertBefore</code>,
or <code>Node.replaceChild</code>. Note, however, that while some
implementations may instantiate different types of
<code>Document</code> objects supporting additional features than the
\"Core\", such as \"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]
, based on the <code>DocumentType</code> specified at creation time,
changing it afterwards is very unlikely to result in a change of the
features supported.

@since DOM Level 3
"
      end

      operation 4201858 "getImplementation"
	public return_type class_ref 636674 // DOMImplementation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>DOMImplementation</code> object that handles this document. A
DOM application may use objects from multiple implementations.
"
      end

      operation 4201986 "getDocumentElement"
	public return_type class_ref 648194 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a convenience attribute that allows direct access to the child
node that is the document element of the document.
"
      end

      operation 4202114 "createElement"
	public return_type class_ref 648194 // Element
	nparams 1
	  param inout name "tagName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an element of the type specified. Note that the instance
returned implements the <code>Element</code> interface, so attributes
can be specified directly on the returned object.
<br>In addition, if there are known attributes with default values,
<code>Attr</code> nodes representing them are automatically created
and attached to the element.
<br>To create an element with a qualified name and namespace URI, use
the <code>createElementNS</code> method.
@param tagName The name of the element type to instantiate. For XML,
  this is case-sensitive, otherwise it depends on the
  case-sensitivity of the markup language in use. In that case, the
  name is mapped to the canonical form of that markup by the DOM
  implementation.
@return A new <code>Element</code> object with the
  <code>nodeName</code> attribute set to <code>tagName</code>, and
  <code>localName</code>, <code>prefix</code>, and
  <code>namespaceURI</code> set to <code>null</code>.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified name is not an XML
  name according to the XML version in use specified in the
  <code>Document.xmlVersion</code> attribute.
"
      end

      operation 4202242 "createDocumentFragment"
	public return_type class_ref 650114 // DocumentFragment
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty <code>DocumentFragment</code> object.
@return A new <code>DocumentFragment</code>.
"
      end

      operation 4202370 "createTextNode"
	public return_type class_ref 649090 // Text
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Text</code> node given the specified string.
@param data The data for the node.
@return The new <code>Text</code> object.
"
      end

      operation 4202498 "createComment"
	public return_type class_ref 649474 // Comment
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>Comment</code> node given the specified string.
@param data The data for the node.
@return The new <code>Comment</code> object.
"
      end

      operation 4202626 "createCDATASection"
	public return_type class_ref 649218 // CDATASection
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>CDATASection</code> node whose value is the specified
string.
@param data The data for the <code>CDATASection</code> contents.
@return The new <code>CDATASection</code> object.
@exception DOMException
  NOT_SUPPORTED_ERR: Raised if this document is an HTML document.
"
      end

      operation 4202754 "createProcessingInstruction"
	public return_type class_ref 650242 // ProcessingInstruction
	nparams 2
	  param inout name "target" type class_ref 128130 // String
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>ProcessingInstruction</code> node given the specified
name and data strings.
@param target The target part of the processing instruction.Unlike
  <code>Document.createElementNS</code> or
  <code>Document.createAttributeNS</code>, no namespace well-formed
  checking is done on the target name. Applications should invoke
  <code>Document.normalizeDocument()</code> with the parameter \"
  namespaces\" set to <code>true</code> in order to ensure that the
  target name is namespace well-formed.
@param data The data for the node.
@return The new <code>ProcessingInstruction</code> object.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified target is not an XML
  name according to the XML version in use specified in the
  <code>Document.xmlVersion</code> attribute.
  <br>NOT_SUPPORTED_ERR: Raised if this document is an HTML document.
"
      end

      operation 4202882 "createAttribute"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <code>Attr</code> of the given name. Note that the
<code>Attr</code> instance can then be set on an <code>Element</code>
using the <code>setAttributeNode</code> method.
<br>To create an attribute with a qualified name and namespace URI, use
the <code>createAttributeNS</code> method.
@param name The name of the attribute.
@return A new <code>Attr</code> object with the <code>nodeName</code>
  attribute set to <code>name</code>, and <code>localName</code>,
  <code>prefix</code>, and <code>namespaceURI</code> set to
  <code>null</code>. The value of the attribute is the empty string.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified name is not an XML
  name according to the XML version in use specified in the
  <code>Document.xmlVersion</code> attribute.
"
      end

      operation 4203010 "createEntityReference"
	public return_type class_ref 650370 // EntityReference
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <code>EntityReference</code> object. In addition, if the
referenced entity is known, the child list of the
<code>EntityReference</code> node is made the same as that of the
corresponding <code>Entity</code> node.
<p ><b>Note:</b> If any descendant of the <code>Entity</code> node has
an unbound namespace prefix, the corresponding descendant of the
created <code>EntityReference</code> node is also unbound; (its
<code>namespaceURI</code> is <code>null</code>). The DOM Level 2 and
3 do not support any mechanism to resolve namespace prefixes in this
case.
@param name The name of the entity to reference.Unlike
  <code>Document.createElementNS</code> or
  <code>Document.createAttributeNS</code>, no namespace well-formed
  checking is done on the entity name. Applications should invoke
  <code>Document.normalizeDocument()</code> with the parameter \"
  namespaces\" set to <code>true</code> in order to ensure that the
  entity name is namespace well-formed.
@return The new <code>EntityReference</code> object.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified name is not an XML
  name according to the XML version in use specified in the
  <code>Document.xmlVersion</code> attribute.
  <br>NOT_SUPPORTED_ERR: Raised if this document is an HTML document.
"
      end

      operation 4203138 "getElementsByTagName"
	public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "tagname" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>NodeList</code> of all the <code>Elements</code> in
document order with a given tag name and are contained in the
document.
@param tagname  The name of the tag to match on. The special value \"*\"
  matches all tags. For XML, the <code>tagname</code> parameter is
  case-sensitive, otherwise it depends on the case-sensitivity of the
  markup language in use.
@return A new <code>NodeList</code> object containing all the matched
  <code>Elements</code>.
"
      end

      operation 4203266 "importNode"
	public return_type class_ref 317570 // Node
	nparams 2
	  param inout name "importedNode" type class_ref 317570 // Node
	  param inout name "deep" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Imports a node from another document to this document, without altering
or removing the source node from the original document; this method
creates a new copy of the source node. The returned node has no
parent; (<code>parentNode</code> is <code>null</code>).
<br>For all nodes, importing a node creates a node object owned by the
importing document, with attribute values identical to the source
node's <code>nodeName</code> and <code>nodeType</code>, plus the
attributes related to namespaces (<code>prefix</code>,
<code>localName</code>, and <code>namespaceURI</code>). As in the
<code>cloneNode</code> operation, the source node is not altered.
User data associated to the imported node is not carried over.
However, if any <code>UserDataHandlers</code> has been specified
along with the associated data these handlers will be called with the
appropriate parameters before this method returns.
<br>Additional information is copied as appropriate to the
<code>nodeType</code>, attempting to mirror the behavior expected if
a fragment of XML or HTML source was copied from one document to
another, recognizing that the two documents may have different DTDs
in the XML case. The following list describes the specifics for each
type of node.
<dl>
<dt>ATTRIBUTE_NODE</dt>
<dd>The <code>ownerElement</code> attribute
is set to <code>null</code> and the <code>specified</code> flag is
set to <code>true</code> on the generated <code>Attr</code>. The
descendants of the source <code>Attr</code> are recursively imported
and the resulting nodes reassembled to form the corresponding subtree.
Note that the <code>deep</code> parameter has no effect on
<code>Attr</code> nodes; they always carry their children with them
when imported.</dd>
<dt>DOCUMENT_FRAGMENT_NODE</dt>
<dd>If the <code>deep</code> option
was set to <code>true</code>, the descendants of the source
<code>DocumentFragment</code> are recursively imported and the
resulting nodes reassembled under the imported
<code>DocumentFragment</code> to form the corresponding subtree.
Otherwise, this simply generates an empty
<code>DocumentFragment</code>.</dd>
<dt>DOCUMENT_NODE</dt>
<dd><code>Document</code>
nodes cannot be imported.</dd>
<dt>DOCUMENT_TYPE_NODE</dt>
<dd><code>DocumentType</code>
nodes cannot be imported.</dd>
<dt>ELEMENT_NODE</dt>
<dd><em>Specified</em> attribute nodes of the source element are imported, and the generated
<code>Attr</code> nodes are attached to the generated
<code>Element</code>. Default attributes are <em>not</em> copied, though if the document being imported into defines default
attributes for this element name, those are assigned. If the
<code>importNode</code> <code>deep</code> parameter was set to
<code>true</code>, the descendants of the source element are
recursively imported and the resulting nodes reassembled to form the
corresponding subtree.</dd>
<dt>ENTITY_NODE</dt>
<dd><code>Entity</code> nodes can be
imported, however in the current release of the DOM the
<code>DocumentType</code> is readonly. Ability to add these imported
nodes to a <code>DocumentType</code> will be considered for addition
to a future release of the DOM.On import, the <code>publicId</code>,
<code>systemId</code>, and <code>notationName</code> attributes are
copied. If a <code>deep</code> import is requested, the descendants
of the the source <code>Entity</code> are recursively imported and
the resulting nodes reassembled to form the corresponding subtree.</dd>
<dt>
ENTITY_REFERENCE_NODE</dt>
<dd>Only the <code>EntityReference</code> itself is
copied, even if a <code>deep</code> import is requested, since the
source and destination documents might have defined the entity
differently. If the document being imported into provides a
definition for this entity name, its value is assigned.</dd>
<dt>NOTATION_NODE</dt>
<dd>
<code>Notation</code> nodes can be imported, however in the current
release of the DOM the <code>DocumentType</code> is readonly. Ability
to add these imported nodes to a <code>DocumentType</code> will be
considered for addition to a future release of the DOM.On import, the
<code>publicId</code> and <code>systemId</code> attributes are copied.
Note that the <code>deep</code> parameter has no effect on this type
of nodes since they cannot have any children.</dd>
<dt>
PROCESSING_INSTRUCTION_NODE</dt>
<dd>The imported node copies its
<code>target</code> and <code>data</code> values from those of the
source node.Note that the <code>deep</code> parameter has no effect
on this type of nodes since they cannot have any children.</dd>
<dt>TEXT_NODE,
CDATA_SECTION_NODE, COMMENT_NODE</dt>
<dd>These three types of nodes inheriting
from <code>CharacterData</code> copy their <code>data</code> and
<code>length</code> attributes from those of the source node.Note
that the <code>deep</code> parameter has no effect on these types of
nodes since they cannot have any children.</dd>
</dl>
@param importedNode The node to import.
@param deep If <code>true</code>, recursively import the subtree under
  the specified node; if <code>false</code>, import only the node
  itself, as explained above. This has no effect on nodes that cannot
  have any children, and on <code>Attr</code>, and
  <code>EntityReference</code> nodes.
@return The imported node that belongs to this <code>Document</code>.
@exception DOMException
  NOT_SUPPORTED_ERR: Raised if the type of node being imported is not
  supported.
  <br>INVALID_CHARACTER_ERR: Raised if one of the imported names is not
  an XML name according to the XML version in use specified in the
  <code>Document.xmlVersion</code> attribute. This may happen when
  importing an XML 1.1 [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>] element
  into an XML 1.0 document, for instance.
@since DOM Level 2
"
      end

      operation 4203394 "createElementNS"
	public return_type class_ref 648194 // Element
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "qualifiedName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an element of the given qualified name and namespace URI.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value <code>null</code> as the
namespaceURI parameter for methods if they wish to have no namespace.
@param namespaceURI The namespace URI of the element to create.
@param qualifiedName The qualified name of the element type to
  instantiate.
@return A new <code>Element</code> object with the following
  attributes:
<table border='1' cellpadding='3'>
<tr>
<th>Attribute</th>
<th>Value</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Node.nodeName</code></td>
<td valign='top' rowspan='1' colspan='1'>
  <code>qualifiedName</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Node.namespaceURI</code></td>
<td valign='top' rowspan='1' colspan='1'>
  <code>namespaceURI</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Node.prefix</code></td>
<td valign='top' rowspan='1' colspan='1'>prefix, extracted
  from <code>qualifiedName</code>, or <code>null</code> if there is
  no prefix</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Node.localName</code></td>
<td valign='top' rowspan='1' colspan='1'>local name, extracted from
  <code>qualifiedName</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Element.tagName</code></td>
<td valign='top' rowspan='1' colspan='1'>
  <code>qualifiedName</code></td>
</tr>
</table>
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified
  <code>qualifiedName</code> is not an XML name according to the XML
  version in use specified in the <code>Document.xmlVersion</code>
  attribute.
  <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is a
  malformed qualified name, if the <code>qualifiedName</code> has a
  prefix and the <code>namespaceURI</code> is <code>null</code>, or
  if the <code>qualifiedName</code> has a prefix that is \"xml\" and
  the <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>
  http://www.w3.org/XML/1998/namespace</a>\" [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
  , or if the <code>qualifiedName</code> or its prefix is \"xmlns\" and
  the <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\", or if the <code>namespaceURI</code> is \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\" and neither the <code>qualifiedName</code> nor its prefix is \"xmlns\".
  <br>NOT_SUPPORTED_ERR: Always thrown if the current document does not
  support the <code>\"XML\"</code> feature, since namespaces were
  defined by XML.
@since DOM Level 2
"
      end

      operation 4203522 "createAttributeNS"
	public return_type class_ref 648066 // Attr
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "qualifiedName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an attribute of the given qualified name and namespace URI.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value <code>null</code> as the
<code>namespaceURI</code> parameter for methods if they wish to have
no namespace.
@param namespaceURI The namespace URI of the attribute to create.
@param qualifiedName The qualified name of the attribute to
  instantiate.
@return A new <code>Attr</code> object with the following attributes:
<table border='1' cellpadding='3'>
<tr>
<th>
  Attribute</th>
<th>Value</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Node.nodeName</code></td>
<td valign='top' rowspan='1' colspan='1'>qualifiedName</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
  <code>Node.namespaceURI</code></td>
<td valign='top' rowspan='1' colspan='1'><code>namespaceURI</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
  <code>Node.prefix</code></td>
<td valign='top' rowspan='1' colspan='1'>prefix, extracted from
  <code>qualifiedName</code>, or <code>null</code> if there is no
  prefix</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Node.localName</code></td>
<td valign='top' rowspan='1' colspan='1'>local name, extracted from
  <code>qualifiedName</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Attr.name</code></td>
<td valign='top' rowspan='1' colspan='1'>
  <code>qualifiedName</code></td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'><code>Node.nodeValue</code></td>
<td valign='top' rowspan='1' colspan='1'>the empty
  string</td>
</tr>
</table>
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified
  <code>qualifiedName</code> is not an XML name according to the XML
  version in use specified in the <code>Document.xmlVersion</code>
  attribute.
  <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is a
  malformed qualified name, if the <code>qualifiedName</code> has a
  prefix and the <code>namespaceURI</code> is <code>null</code>, if
  the <code>qualifiedName</code> has a prefix that is \"xml\" and the
  <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>
  http://www.w3.org/XML/1998/namespace</a>\", if the <code>qualifiedName</code> or its prefix is \"xmlns\" and the
  <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\", or if the <code>namespaceURI</code> is \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\" and neither the <code>qualifiedName</code> nor its prefix is \"xmlns\".
  <br>NOT_SUPPORTED_ERR: Always thrown if the current document does not
  support the <code>\"XML\"</code> feature, since namespaces were
  defined by XML.
@since DOM Level 2
"
      end

      operation 4203650 "getElementsByTagNameNS"
	public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>NodeList</code> of all the <code>Elements</code> with a
given local name and namespace URI in document order.
@param namespaceURI The namespace URI of the elements to match on. The
  special value <code>\"*\"</code> matches all namespaces.
@param localName The local name of the elements to match on. The
  special value \"*\" matches all local names.
@return A new <code>NodeList</code> object containing all the matched
  <code>Elements</code>.
@since DOM Level 2
"
      end

      operation 4203778 "getElementById"
	public return_type class_ref 648194 // Element
	nparams 1
	  param inout name "elementId" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Element</code> that has an ID attribute with the
given value. If no such element exists, this returns <code>null</code>
. If more than one element has an ID attribute with that value, what
is returned is undefined.
<br> The DOM implementation is expected to use the attribute
<code>Attr.isId</code> to determine if an attribute is of type ID.
<p ><b>Note:</b> Attributes with the name \"ID\" or \"id\" are not of type
ID unless so defined.
@param elementId The unique <code>id</code> value for an element.
@return The matching element or <code>null</code> if there is none.
@since DOM Level 2
"
      end

      operation 4203906 "getInputEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying the encoding used for this document at the time
of the parsing. This is <code>null</code> when it is not known, such
as when the <code>Document</code> was created in memory.
@since DOM Level 3
"
      end

      operation 4204034 "getXmlEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, the encoding of this document. This is <code>null</code> when
unspecified or when it is not known, such as when the
<code>Document</code> was created in memory.
@since DOM Level 3
"
      end

      operation 4204162 "getXmlStandalone"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, whether this document is standalone. This is <code>false</code> when
unspecified.
<p ><b>Note:</b>  No verification is done on the value when setting
this attribute. Applications should use
<code>Document.normalizeDocument()</code> with the \"validate\"
parameter to verify if the value matches the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#sec-rmd'>validity
constraint for standalone document declaration</a> as defined in [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>].
@since DOM Level 3
"
      end

      operation 4204290 "setXmlStandalone"
	public explicit_return_type "void"
	nparams 1
	  param inout name "xmlStandalone" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, whether this document is standalone. This is <code>false</code> when
unspecified.
<p ><b>Note:</b>  No verification is done on the value when setting
this attribute. Applications should use
<code>Document.normalizeDocument()</code> with the \"validate\"
parameter to verify if the value matches the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#sec-rmd'>validity
constraint for standalone document declaration</a> as defined in [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>].
@exception DOMException
   NOT_SUPPORTED_ERR: Raised if this document does not support the
  \"XML\" feature.
@since DOM Level 3
"
      end

      operation 4204418 "getXmlVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, the version number of this document. If there is no declaration and if
this document supports the \"XML\" feature, the value is
<code>\"1.0\"</code>. If this document does not support the \"XML\"
feature, the value is always <code>null</code>. Changing this
attribute will affect methods that check for invalid characters in
XML names. Application should invoke
<code>Document.normalizeDocument()</code> in order to check for
invalid characters in the <code>Node</code>s that are already part of
this <code>Document</code>.
<br> DOM applications may use the
<code>DOMImplementation.hasFeature(feature, version)</code> method
with parameter values \"XMLVersion\" and \"1.0\" (respectively) to
determine if an implementation supports [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]. DOM
applications may use the same method with parameter values
\"XMLVersion\" and \"1.1\" (respectively) to determine if an
implementation supports [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>]. In both
cases, in order to support XML, an implementation must also support
the \"XML\" feature defined in this specification. <code>Document</code>
 objects supporting a version of the \"XMLVersion\" feature must not
raise a <code>NOT_SUPPORTED_ERR</code> exception for the same version
number when using <code>Document.xmlVersion</code>.
@since DOM Level 3
"
      end

      operation 4204546 "setXmlVersion"
	public explicit_return_type "void"
	nparams 1
	  param inout name "xmlVersion" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " An attribute specifying, as part of the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl'>XML declaration</a>, the version number of this document. If there is no declaration and if
this document supports the \"XML\" feature, the value is
<code>\"1.0\"</code>. If this document does not support the \"XML\"
feature, the value is always <code>null</code>. Changing this
attribute will affect methods that check for invalid characters in
XML names. Application should invoke
<code>Document.normalizeDocument()</code> in order to check for
invalid characters in the <code>Node</code>s that are already part of
this <code>Document</code>.
<br> DOM applications may use the
<code>DOMImplementation.hasFeature(feature, version)</code> method
with parameter values \"XMLVersion\" and \"1.0\" (respectively) to
determine if an implementation supports [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]. DOM
applications may use the same method with parameter values
\"XMLVersion\" and \"1.1\" (respectively) to determine if an
implementation supports [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>]. In both
cases, in order to support XML, an implementation must also support
the \"XML\" feature defined in this specification. <code>Document</code>
 objects supporting a version of the \"XMLVersion\" feature must not
raise a <code>NOT_SUPPORTED_ERR</code> exception for the same version
number when using <code>Document.xmlVersion</code>.
@exception DOMException
   NOT_SUPPORTED_ERR: Raised if the version is set to a value that is
  not supported by this <code>Document</code> or if this document
  does not support the \"XML\" feature.
@since DOM Level 3
"
      end

      operation 4204674 "getStrictErrorChecking"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying whether error checking is enforced or not. When
set to <code>false</code>, the implementation is free to not test
every possible error case normally defined on DOM operations, and not
raise any <code>DOMException</code> on DOM operations or report
errors while using <code>Document.normalizeDocument()</code>. In case
of error, the behavior is undefined. This attribute is
<code>true</code> by default.
@since DOM Level 3
"
      end

      operation 4204802 "setStrictErrorChecking"
	public explicit_return_type "void"
	nparams 1
	  param inout name "strictErrorChecking" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying whether error checking is enforced or not. When
set to <code>false</code>, the implementation is free to not test
every possible error case normally defined on DOM operations, and not
raise any <code>DOMException</code> on DOM operations or report
errors while using <code>Document.normalizeDocument()</code>. In case
of error, the behavior is undefined. This attribute is
<code>true</code> by default.
@since DOM Level 3
"
      end

      operation 4204930 "getDocumentURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The location of the document or <code>null</code> if undefined or if
the <code>Document</code> was created using
<code>DOMImplementation.createDocument</code>. No lexical checking is
performed when setting this attribute; this could result in a
<code>null</code> value returned when using <code>Node.baseURI</code>
.
<br> Beware that when the <code>Document</code> supports the feature
\"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]
, the href attribute of the HTML BASE element takes precedence over
this attribute when computing <code>Node.baseURI</code>.
@since DOM Level 3
"
      end

      operation 4205058 "setDocumentURI"
	public explicit_return_type "void"
	nparams 1
	  param inout name "documentURI" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The location of the document or <code>null</code> if undefined or if
the <code>Document</code> was created using
<code>DOMImplementation.createDocument</code>. No lexical checking is
performed when setting this attribute; this could result in a
<code>null</code> value returned when using <code>Node.baseURI</code>
.
<br> Beware that when the <code>Document</code> supports the feature
\"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]
, the href attribute of the HTML BASE element takes precedence over
this attribute when computing <code>Node.baseURI</code>.
@since DOM Level 3
"
      end

      operation 4205186 "adoptNode"
	public return_type class_ref 317570 // Node
	nparams 1
	  param inout name "source" type class_ref 317570 // Node
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Attempts to adopt a node from another document to this document. If
supported, it changes the <code>ownerDocument</code> of the source
node, its children, as well as the attached attribute nodes if there
are any. If the source node has a parent it is first removed from the
child list of its parent. This effectively allows moving a subtree
from one document to another (unlike <code>importNode()</code> which
create a copy of the source node instead of moving it). When it
fails, applications should use <code>Document.importNode()</code>
instead. Note that if the adopted node is already part of this
document (i.e. the source and target document are the same), this
method still has the effect of removing the source node from the
child list of its parent, if any. The following list describes the
specifics for each type of node.
<dl>
<dt>ATTRIBUTE_NODE</dt>
<dd>The
<code>ownerElement</code> attribute is set to <code>null</code> and
the <code>specified</code> flag is set to <code>true</code> on the
adopted <code>Attr</code>. The descendants of the source
<code>Attr</code> are recursively adopted.</dd>
<dt>DOCUMENT_FRAGMENT_NODE</dt>
<dd>The
descendants of the source node are recursively adopted.</dd>
<dt>DOCUMENT_NODE</dt>
<dd>
<code>Document</code> nodes cannot be adopted.</dd>
<dt>DOCUMENT_TYPE_NODE</dt>
<dd>
<code>DocumentType</code> nodes cannot be adopted.</dd>
<dt>ELEMENT_NODE</dt>
<dd><em>Specified</em> attribute nodes of the source element are adopted. Default attributes
are discarded, though if the document being adopted into defines
default attributes for this element name, those are assigned. The
descendants of the source element are recursively adopted.</dd>
<dt>ENTITY_NODE</dt>
<dd>
<code>Entity</code> nodes cannot be adopted.</dd>
<dt>ENTITY_REFERENCE_NODE</dt>
<dd>Only
the <code>EntityReference</code> node itself is adopted, the
descendants are discarded, since the source and destination documents
might have defined the entity differently. If the document being
imported into provides a definition for this entity name, its value
is assigned.</dd>
<dt>NOTATION_NODE</dt>
<dd><code>Notation</code> nodes cannot be
adopted.</dd>
<dt>PROCESSING_INSTRUCTION_NODE, TEXT_NODE, CDATA_SECTION_NODE,
COMMENT_NODE</dt>
<dd>These nodes can all be adopted. No specifics.</dd>
</dl>
<p ><b>Note:</b>  Since it does not create new nodes unlike the
<code>Document.importNode()</code> method, this method does not raise
an <code>INVALID_CHARACTER_ERR</code> exception, and applications
should use the <code>Document.normalizeDocument()</code> method to
check if an imported name is not an XML name according to the XML
version in use.
@param source The node to move into this document.
@return The adopted node, or <code>null</code> if this operation
  fails, such as when the source node comes from a different
  implementation.
@exception DOMException
  NOT_SUPPORTED_ERR: Raised if the source node is of type
  <code>DOCUMENT</code>, <code>DOCUMENT_TYPE</code>.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised when the source node is
  readonly.
@since DOM Level 3
"
      end

      operation 4205314 "getDomConfig"
	public return_type class_ref 650498 // DOMConfiguration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The configuration used when <code>Document.normalizeDocument()</code>
is invoked.
@since DOM Level 3
"
      end

      operation 4205442 "normalizeDocument"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method acts as if the document was going through a save and load
cycle, putting the document in a \"normal\" form. As a consequence,
this method updates the replacement tree of
<code>EntityReference</code> nodes and normalizes <code>Text</code>
nodes, as defined in the method <code>Node.normalize()</code>.
<br> Otherwise, the actual result depends on the features being set on
the <code>Document.domConfig</code> object and governing what
operations actually take place. Noticeably this method could also
make the document namespace well-formed according to the algorithm
described in , check the character normalization, remove the
<code>CDATASection</code> nodes, etc. See
<code>DOMConfiguration</code> for details.
<pre>// Keep in the document
the information defined // in the XML Information Set (Java example)
DOMConfiguration docConfig = myDocument.getDomConfig();
docConfig.setParameter(\"infoset\", Boolean.TRUE);
myDocument.normalizeDocument();</pre>

<br>Mutation events, when supported, are generated to reflect the
changes occurring on the document.
<br> If errors occur during the invocation of this method, such as an
attempt to update a read-only node or a <code>Node.nodeName</code>
contains an invalid character according to the XML version in use,
errors or warnings (<code>DOMError.SEVERITY_ERROR</code> or
<code>DOMError.SEVERITY_WARNING</code>) will be reported using the
<code>DOMErrorHandler</code> object associated with the \"error-handler
\" parameter. Note this method might also report fatal errors (
<code>DOMError.SEVERITY_FATAL_ERROR</code>) if an implementation
cannot recover from an error.
@since DOM Level 3
"
      end

      operation 4205570 "renameNode"
	public return_type class_ref 317570 // Node
	nparams 3
	  param inout name "n" type class_ref 317570 // Node
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "qualifiedName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Rename an existing node of type <code>ELEMENT_NODE</code> or
<code>ATTRIBUTE_NODE</code>.
<br>When possible this simply changes the name of the given node,
otherwise this creates a new node with the specified name and
replaces the existing node with the new node as described below.
<br>If simply changing the name of the given node is not possible, the
following operations are performed: a new node is created, any
registered event listener is registered on the new node, any user
data attached to the old node is removed from that node, the old node
is removed from its parent if it has one, the children are moved to
the new node, if the renamed node is an <code>Element</code> its
attributes are moved to the new node, the new node is inserted at the
position the old node used to have in its parent's child nodes list
if it has one, the user data that was attached to the old node is
attached to the new node.
<br>When the node being renamed is an <code>Element</code> only the
specified attributes are moved, default attributes originated from
the DTD are updated according to the new element name. In addition,
the implementation may update default attributes from other schemas.
Applications should use <code>Document.normalizeDocument()</code> to
guarantee these attributes are up-to-date.
<br>When the node being renamed is an <code>Attr</code> that is
attached to an <code>Element</code>, the node is first removed from
the <code>Element</code> attributes map. Then, once renamed, either
by modifying the existing node or creating a new one as described
above, it is put back.
<br>In addition,
<ul>
<li> a user data event <code>NODE_RENAMED</code> is fired,
</li>
<li>
when the implementation supports the feature \"MutationNameEvents\",
each mutation operation involved in this method fires the appropriate
event, and in the end the event {
<code>http://www.w3.org/2001/xml-events</code>,
<code>DOMElementNameChanged</code>} or {
<code>http://www.w3.org/2001/xml-events</code>,
<code>DOMAttributeNameChanged</code>} is fired.
</li>
</ul>
@param n The node to rename.
@param namespaceURI The new namespace URI.
@param qualifiedName The new qualified name.
@return The renamed node. This is either the specified node or the new
  node that was created to replace the specified node.
@exception DOMException
  NOT_SUPPORTED_ERR: Raised when the type of the specified node is
  neither <code>ELEMENT_NODE</code> nor <code>ATTRIBUTE_NODE</code>,
  or if the implementation does not support the renaming of the
  document element.
  <br>INVALID_CHARACTER_ERR: Raised if the new qualified name is not an
  XML name according to the XML version in use specified in the
  <code>Document.xmlVersion</code> attribute.
  <br>WRONG_DOCUMENT_ERR: Raised when the specified node was created
  from a different document than this document.
  <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is a
  malformed qualified name, if the <code>qualifiedName</code> has a
  prefix and the <code>namespaceURI</code> is <code>null</code>, or
  if the <code>qualifiedName</code> has a prefix that is \"xml\" and
  the <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>
  http://www.w3.org/XML/1998/namespace</a>\" [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
  . Also raised, when the node being renamed is an attribute, if the
  <code>qualifiedName</code>, or its prefix, is \"xmlns\" and the
  <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\".
@since DOM Level 3
"
      end
    end

    class 636674 "DOMImplementation"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>DOMImplementation</code> interface provides a number of methods
for performing operations that are independent of any particular instance
of the document object model.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      operation 4221826 "hasFeature"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test if the DOM implementation implements a specific feature and
version, as specified in <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMFeatures\">DOM Features</a>.
@param feature  The name of the feature to test.
@param version  This is the version number of the feature to test.
@return <code>true</code> if the feature is implemented in the
  specified version, <code>false</code> otherwise.
"
      end

      operation 4221954 "createDocumentType"
	public return_type class_ref 649986 // DocumentType
	nparams 3
	  param inout name "qualifiedName" type class_ref 128130 // String
	  param inout name "publicId" type class_ref 128130 // String
	  param inout name "systemId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty <code>DocumentType</code> node. Entity declarations
and notations are not made available. Entity reference expansions and
default attribute additions do not occur..
@param qualifiedName The qualified name of the document type to be
  created.
@param publicId The external subset public identifier.
@param systemId The external subset system identifier.
@return A new <code>DocumentType</code> node with
  <code>Node.ownerDocument</code> set to <code>null</code>.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified qualified name is not
  an XML name according to [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>].
  <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is
  malformed.
  <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature \"XML\" and the language exposed through the
  Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4222082 "createDocument"
	public return_type class_ref 378626 // Document
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "qualifiedName" type class_ref 128130 // String
	  param inout name "doctype" type class_ref 649986 // DocumentType
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a DOM Document object of the specified type with its document
element.
<br>Note that based on the <code>DocumentType</code> given to create
the document, the implementation may instantiate specialized
<code>Document</code> objects that support additional features than
the \"Core\", such as \"HTML\" [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]
. On the other hand, setting the <code>DocumentType</code> after the
document was created makes this very unlikely to happen.
Alternatively, specialized <code>Document</code> creation methods,
such as <code>createHTMLDocument</code> [<a href='http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109'>DOM Level 2 HTML</a>]
, can be used to obtain specific types of <code>Document</code>
objects.
@param namespaceURI The namespace URI of the document element to
  create or <code>null</code>.
@param qualifiedName The qualified name of the document element to be
  created or <code>null</code>.
@param doctype The type of document to be created or <code>null</code>.
  When <code>doctype</code> is not <code>null</code>, its
  <code>Node.ownerDocument</code> attribute is set to the document
  being created.
@return A new <code>Document</code> object with its document element.
  If the <code>NamespaceURI</code>, <code>qualifiedName</code>, and
  <code>doctype</code> are <code>null</code>, the returned
  <code>Document</code> is empty with no document element.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified qualified name is not
  an XML name according to [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>].
  <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is
  malformed, if the <code>qualifiedName</code> has a prefix and the
  <code>namespaceURI</code> is <code>null</code>, or if the
  <code>qualifiedName</code> is <code>null</code> and the
  <code>namespaceURI</code> is different from <code>null</code>, or
  if the <code>qualifiedName</code> has a prefix that is \"xml\" and
  the <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>
  http://www.w3.org/XML/1998/namespace</a>\" [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
  , or if the DOM implementation does not support the
  <code>\"XML\"</code> feature but a non-null namespace URI was
  provided, since namespaces were defined by XML.
  <br>WRONG_DOCUMENT_ERR: Raised if <code>doctype</code> has already
  been used with a different document or was created from a different
  implementation.
  <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature \"XML\" and the language exposed through the
  Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4222210 "getFeature"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "feature" type class_ref 128130 // String
	  param inout name "version" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method returns a specialized object which implements the
specialized APIs of the specified feature and version, as specified
in <a href=\"http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMFeatures\">DOM Features</a>. The specialized object may also be obtained by using
binding-specific casting methods but is not necessarily expected to,
as discussed in . This method also allow the implementation to
provide specialized objects which do not support the
<code>DOMImplementation</code> interface.
@param feature  The name of the feature requested. Note that any plus
  sign \"+\" prepended to the name of the feature will be ignored since
  it is not significant in the context of this method.
@param version  This is the version number of the feature to test.
@return  Returns an object which implements the specialized APIs of
  the specified feature and version, if any, or <code>null</code> if
  there is no object which implements interfaces associated with that
  feature. If the <code>DOMObject</code> returned by this method
  implements the <code>DOMImplementation</code> interface, it must
  delegate to the primary core <code>DOMImplementation</code> and not
  return results inconsistent with the primary core
  <code>DOMImplementation</code> such as <code>hasFeature</code>,
  <code>getFeature</code>, etc.
@since DOM Level 3
"
      end
    end

    class 646658 "DOMException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "DOM operations only raise exceptions in \"exceptional\" circumstances, i.e.,
when an operation is impossible to perform (either for logical reasons,
because data is lost, or because the implementation has become unstable).
In general, DOM methods return specific error values in ordinary
processing situations, such as out-of-bound errors when using
<code>NodeList</code>.
<p>Implementations should raise other exceptions under other circumstances.
For example, implementations should raise an implementation-dependent
exception if a <code>null</code> argument is passed when <code>null</code>
 was not expected.
<p>Some languages and object systems do not support the concept of
exceptions. For such systems, error conditions may be indicated using
native error reporting mechanisms. For some bindings, for example,
methods may return error codes similar to those listed in the
corresponding method descriptions.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 2233474 // <generalisation>
	relation 2233474 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2233474 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      operation 5178626 "DOMException"
	public explicit_return_type ""
	nparams 2
	  param in name "code" explicit_type "short"
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1147266 "code"
	public explicit_type "short"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1147394 "INDEX_SIZE_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ExceptionCode

If index or size is negative, or greater than the allowed value.

"
      end

      attribute 1147522 "DOMSTRING_SIZE_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If the specified range of text does not fit into a
<code>DOMString</code>.

"
      end

      attribute 1147650 "HIERARCHY_REQUEST_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If any <code>Node</code> is inserted somewhere it doesn't belong.

"
      end

      attribute 1147778 "WRONG_DOCUMENT_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If a <code>Node</code> is used in a different document than the one
that created it (that doesn't support it).

"
      end

      attribute 1147906 "INVALID_CHARACTER_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If an invalid or illegal character is specified, such as in an XML name.

"
      end

      attribute 1148034 "NO_DATA_ALLOWED_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If data is specified for a <code>Node</code> which does not support
data.

"
      end

      attribute 1148162 "NO_MODIFICATION_ALLOWED_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If an attempt is made to modify an object where modifications are not
allowed.

"
      end

      attribute 1148290 "NOT_FOUND_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If an attempt is made to reference a <code>Node</code> in a context
where it does not exist.

"
      end

      attribute 1148418 "NOT_SUPPORTED_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If the implementation does not support the requested type of object or
operation.

"
      end

      attribute 1148546 "INUSE_ATTRIBUTE_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If an attempt is made to add an attribute that is already in use
elsewhere.

"
      end

      attribute 1148674 "INVALID_STATE_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If an attempt is made to use an object that is not, or is no longer,
usable.
@since DOM Level 2

"
      end

      attribute 1148802 "SYNTAX_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If an invalid or illegal string is specified.
@since DOM Level 2

"
      end

      attribute 1148930 "INVALID_MODIFICATION_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If an attempt is made to modify the type of the underlying object.
@since DOM Level 2

"
      end

      attribute 1149058 "NAMESPACE_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If an attempt is made to create or change an object in a way which is
incorrect with regard to namespaces.
@since DOM Level 2

"
      end

      attribute 1149186 "INVALID_ACCESS_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 15"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If a parameter or an operation is not supported by the underlying
object.
@since DOM Level 2

"
      end

      attribute 1149314 "VALIDATION_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 16"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "If a call to a method such as <code>insertBefore</code> or
<code>removeChild</code> would make the <code>Node</code> invalid
with respect to \"partial validity\", this exception would be raised
and the operation would not be done. This code is used in [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Val-20040127/'>DOM Level 3 Validation</a>]
. Refer to this specification for further information.
@since DOM Level 3

"
      end

      attribute 1149442 "TYPE_MISMATCH_ERR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 17"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If the type of an object is incompatible with the expected type of the
parameter associated to the object.
@since DOM Level 3

"
      end

      attribute 1149570 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 6627732366795969916L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Added serialVersionUID to preserve binary compatibility
"
      end
    end

    class 647298 "UserDataHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "When associating an object to a key on a node using
<code>Node.setUserData()</code> the application can provide a handler
that gets called when the node the object is associated to is being
cloned, imported, or renamed. This can be used by the application to
implement various behaviors regarding the data it associates to the DOM
nodes. This interface defines that handler.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      attribute 2664834 "NODE_CLONED"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " OperationType

The node is cloned, using <code>Node.cloneNode()</code>.

"
      end

      attribute 2664962 "NODE_IMPORTED"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is imported, using <code>Document.importNode()</code>.

"
      end

      attribute 2665090 "NODE_DELETED"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is deleted.
<p ><b>Note:</b> This may not be supported or may not be reliable in
certain environments, such as Java, where the implementation has no
real control over when objects are actually deleted.

"
      end

      attribute 2665218 "NODE_RENAMED"
	class_attribute const_attribute public explicit_type "short"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is renamed, using <code>Document.renameNode()</code>.

"
      end

      attribute 2665346 "NODE_ADOPTED"
	class_attribute const_attribute public explicit_type "short"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The node is adopted, using <code>Document.adoptNode()</code>.

"
      end

      operation 12450946 "handle"
	public explicit_return_type "void"
	nparams 5
	  param in name "operation" explicit_type "short"
	  param inout name "key" type class_ref 128130 // String
	  param inout name "data" type class_ref 129538 // Object
	  param inout name "src" type class_ref 317570 // Node
	  param inout name "dst" type class_ref 317570 // Node
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called whenever the node for which this handler is
registered is imported or cloned.
<br> DOM applications must not raise exceptions in a
<code>UserDataHandler</code>. The effect of throwing exceptions from
the handler is DOM implementation dependent.
@param operation Specifies the type of operation that is being
  performed on the node.
@param key Specifies the key for which this handler is being called.
@param data Specifies the data for which this handler is being called.
@param src Specifies the node being cloned, adopted, imported, or
  renamed. This is <code>null</code> when the node is being deleted.
@param dst Specifies the node newly created if any, or
  <code>null</code>.
"
      end
    end

    class 648066 "Attr"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Attr</code> interface represents an attribute in an
<code>Element</code> object. Typically the allowable values for the
attribute are defined in a schema associated with the document.
<p><code>Attr</code> objects inherit the <code>Node</code> interface, but
since they are not actually child nodes of the element they describe, the
DOM does not consider them part of the document tree. Thus, the
<code>Node</code> attributes <code>parentNode</code>,
<code>previousSibling</code>, and <code>nextSibling</code> have a
<code>null</code> value for <code>Attr</code> objects. The DOM takes the
view that attributes are properties of elements rather than having a
separate identity from the elements they are associated with; this should
make it more efficient to implement such features as default attributes
associated with all elements of a given type. Furthermore,
<code>Attr</code> nodes may not be immediate children of a
<code>DocumentFragment</code>. However, they can be associated with
<code>Element</code> nodes contained within a
<code>DocumentFragment</code>. In short, users and implementors of the
DOM need to be aware that <code>Attr</code> nodes have some things in
common with other objects inheriting the <code>Node</code> interface, but
they also are quite distinct.
<p>The attribute's effective value is determined as follows: if this
attribute has been explicitly assigned any value, that value is the
attribute's effective value; otherwise, if there is a declaration for
this attribute, and that declaration includes a default value, then that
default value is the attribute's effective value; otherwise, the
attribute does not exist on this element in the structure model until it
has been explicitly added. Note that the <code>Node.nodeValue</code>
attribute on the <code>Attr</code> instance can also be used to retrieve
the string version of the attribute's value(s).
<p> If the attribute was not explicitly given a value in the instance
document but has a default value provided by the schema associated with
the document, an attribute node will be created with
<code>specified</code> set to <code>false</code>. Removing attribute
nodes for which a default value is defined in the schema generates a new
attribute node with the default value and <code>specified</code> set to
<code>false</code>. If validation occurred while invoking
<code>Document.normalizeDocument()</code>, attribute nodes with
<code>specified</code> equals to <code>false</code> are recomputed
according to the default attribute values provided by the schema. If no
default value is associate with this attribute in the schema, the
attribute node is discarded.
<p>In XML, where the value of an attribute can contain entity references,
the child nodes of the <code>Attr</code> node may be either
<code>Text</code> or <code>EntityReference</code> nodes (when these are
in use; see the description of <code>EntityReference</code> for
discussion).
<p>The DOM Core represents all attribute values as simple strings, even if
the DTD or schema associated with the document declares them of some
specific type such as tokenized.
<p>The way attribute value normalization is performed by the DOM
implementation depends on how much the implementation knows about the
schema in use. Typically, the <code>value</code> and
<code>nodeValue</code> attributes of an <code>Attr</code> node initially
returns the normalized value given by the parser. It is also the case
after <code>Document.normalizeDocument()</code> is called (assuming the
right options have been set). But this may not be the case after
mutation, independently of whether the mutation is performed by setting
the string value directly or by changing the <code>Attr</code> child
nodes. In particular, this is true when <a href='http://www.w3.org/TR/2004/REC-xml-20040204#dt-charref'>character
references</a> are involved, given that they are not represented in the DOM and they
impact attribute value normalization. On the other hand, if the
implementation knows about the schema in use when the attribute value is
changed, and it is of a different type than CDATA, it may normalize it
again at that time. This is especially true of specialized DOM
implementations, such as SVG DOM implementations, which store attribute
values in an internal form different from a string.
<p>The following table gives some examples of the relations between the
attribute value in the original document (parsed attribute), the value as
exposed in the DOM, and the serialization of the value:
<table border='1' cellpadding='3'>
<tr>
<th>Examples</th>
<th>Parsed
attribute value</th>
<th>Initial <code>Attr.value</code></th>
<th>Serialized attribute value</th>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>
Character reference</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"x&amp;#178;=5\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"x\\u00b2=5\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"x&amp;#178;=5\"</pre>
</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>Built-in
character entity</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"y&amp;lt;6\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"y&lt;6\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"y&amp;lt;6\"</pre>
</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>Literal newline between</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>
\"x=5&amp;#10;y=6\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"x=5 y=6\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"x=5&amp;#10;y=6\"</pre>
</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>Normalized newline between</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"x=5
y=6\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"x=5 y=6\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>\"x=5 y=6\"</pre>
</td>
</tr>
<tr>
<td valign='top' rowspan='1' colspan='1'>Entity <code>e</code> with literal newline</td>
<td valign='top' rowspan='1' colspan='1'>
<pre>
&lt;!ENTITY e '...&amp;#10;...'&gt; [...]&gt; \"x=5&amp;e;y=6\"</pre>
</td>
<td valign='top' rowspan='1' colspan='1'><em>Dependent on Implementation and Load Options</em></td>
<td valign='top' rowspan='1' colspan='1'><em>Dependent on Implementation and Load/Save Options</em></td>
</tr>
</table>
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1773442 // <generalisation>
	relation 1773442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1773442 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 4180354 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this attribute. If <code>Node.localName</code> is
different from <code>null</code>, this attribute is a qualified name.
"
      end

      operation 4180482 "getSpecified"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " <code>True</code> if this attribute was explicitly given a value in
the instance document, <code>false</code> otherwise. If the
application changed the value of this attribute node (even if it ends
up having the same value as the default value) then it is set to
<code>true</code>. The implementation may handle attributes with
default values from other schemas similarly but applications should
use <code>Document.normalizeDocument()</code> to guarantee this
information is up-to-date.
"
      end

      operation 4180610 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "On retrieval, the value of the attribute is returned as a string.
Character and general entity references are replaced with their
values. See also the method <code>getAttribute</code> on the
<code>Element</code> interface.
<br>On setting, this creates a <code>Text</code> node with the unparsed
contents of the string, i.e. any characters that an XML processor
would recognize as markup are instead treated as literal text. See
also the method <code>Element.setAttribute()</code>.
<br> Some specialized implementations, such as some [<a href='http://www.w3.org/TR/2003/REC-SVG11-20030114/'>SVG 1.1</a>]
implementations, may do normalization automatically, even after
mutation; in such case, the value on retrieval may differ from the
value on setting.
"
      end

      operation 4180738 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "On retrieval, the value of the attribute is returned as a string.
Character and general entity references are replaced with their
values. See also the method <code>getAttribute</code> on the
<code>Element</code> interface.
<br>On setting, this creates a <code>Text</code> node with the unparsed
contents of the string, i.e. any characters that an XML processor
would recognize as markup are instead treated as literal text. See
also the method <code>Element.setAttribute()</code>.
<br> Some specialized implementations, such as some [<a href='http://www.w3.org/TR/2003/REC-SVG11-20030114/'>SVG 1.1</a>]
implementations, may do normalization automatically, even after
mutation; in such case, the value on retrieval may differ from the
value on setting.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
"
      end

      operation 4180866 "getOwnerElement"
	public return_type class_ref 648194 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>Element</code> node this attribute is attached to or
<code>null</code> if this attribute is not in use.
@since DOM Level 2
"
      end

      operation 4180994 "getSchemaTypeInfo"
	public return_type class_ref 648322 // TypeInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The type information associated with this attribute. While the type
information contained in this attribute is guarantee to be correct
after loading the document or invoking
<code>Document.normalizeDocument()</code>, <code>schemaTypeInfo</code>
 may not be reliable if the node was moved.
@since DOM Level 3
"
      end

      operation 4181122 "isId"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns whether this attribute is known to be of type ID (i.e. to
contain an identifier for its owner element) or not. When it is and
its value is unique, the <code>ownerElement</code> of this attribute
can be retrieved using the method <code>Document.getElementById</code>
. The implementation could use several ways to determine if an
attribute node is known to contain an identifier:
<ul>
<li> If validation
occurred using an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]
 while loading the document or while invoking
<code>Document.normalizeDocument()</code>, the post-schema-validation
infoset contributions (PSVI contributions) values are used to
determine if this attribute is a schema-determined ID attribute using
the <a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/#term-sdi'>
schema-determined ID</a> definition in [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>]
.
</li>
<li> If validation occurred using a DTD while loading the document or
while invoking <code>Document.normalizeDocument()</code>, the infoset <b>[type definition]</b> value is used to determine if this attribute is a DTD-determined ID
attribute using the <a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/#term-ddi'>
DTD-determined ID</a> definition in [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>]
.
</li>
<li> from the use of the methods <code>Element.setIdAttribute()</code>,
<code>Element.setIdAttributeNS()</code>, or
<code>Element.setIdAttributeNode()</code>, i.e. it is an
user-determined ID attribute;
<p ><b>Note:</b>  XPointer framework (see section 3.2 in [<a href='http://www.w3.org/TR/2003/REC-xptr-framework-20030325/'>XPointer</a>]
) consider the DOM user-determined ID attribute as being part of the
XPointer externally-determined ID definition.
</li>
<li> using mechanisms that
are outside the scope of this specification, it is then an
externally-determined ID attribute. This includes using schema
languages different from XML schema and DTD.
</li>
</ul>
<br> If validation occurred while invoking
<code>Document.normalizeDocument()</code>, all user-determined ID
attributes are reset and all attribute nodes ID information are then
reevaluated in accordance to the schema used. As a consequence, if
the <code>Attr.schemaTypeInfo</code> attribute contains an ID type,
<code>isId</code> will always return true.
@since DOM Level 3
"
      end
    end

    class 648194 "Element"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Element</code> interface represents an element in an HTML or XML
document. Elements may have attributes associated with them; since the
<code>Element</code> interface inherits from <code>Node</code>, the
generic <code>Node</code> interface attribute <code>attributes</code> may
be used to retrieve the set of all attributes for an element. There are
methods on the <code>Element</code> interface to retrieve either an
<code>Attr</code> object by name or an attribute value by name. In XML,
where an attribute value may contain entity references, an
<code>Attr</code> object should be retrieved to examine the possibly
fairly complex sub-tree representing the attribute value. On the other
hand, in HTML, where all attributes have simple string values, methods to
directly access an attribute value can safely be used as a convenience.
<p ><b>Note:</b> In DOM Level 2, the method <code>normalize</code> is
inherited from the <code>Node</code> interface where it was moved.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1789186 // <generalisation>
	relation 1789186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1789186 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 4250882 "getTagName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The name of the element. If <code>Node.localName</code> is different
from <code>null</code>, this attribute is a qualified name. For
example, in:
<pre> &lt;elementExample id=\"demo\"&gt; ...
&lt;/elementExample&gt; , </pre>
 <code>tagName</code> has the value
<code>\"elementExample\"</code>. Note that this is case-preserving in
XML, as are all of the operations of the DOM. The HTML DOM returns
the <code>tagName</code> of an HTML element in the canonical
uppercase form, regardless of the case in the source HTML document.
"
      end

      operation 4251010 "getAttribute"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an attribute value by name.
@param name The name of the attribute to retrieve.
@return The <code>Attr</code> value as a string, or the empty string
  if that attribute does not have a specified or default value.
"
      end

      operation 4251138 "setAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new attribute. If an attribute with that name is already present
in the element, its value is changed to be that of the value
parameter. This value is a simple string; it is not parsed as it is
being set. So any markup (such as syntax to be recognized as an
entity reference) is treated as literal text, and needs to be
appropriately escaped by the implementation when it is written out.
In order to assign an attribute value that contains entity
references, the user must create an <code>Attr</code> node plus any
<code>Text</code> and <code>EntityReference</code> nodes, build the
appropriate subtree, and use <code>setAttributeNode</code> to assign
it as the value of an attribute.
<br>To set an attribute with a qualified name and namespace URI, use
the <code>setAttributeNS</code> method.
@param name The name of the attribute to create or alter.
@param value Value to set in string form.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified name is not an XML
  name according to the XML version in use specified in the
  <code>Document.xmlVersion</code> attribute.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
"
      end

      operation 4251266 "removeAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an attribute by name. If a default value for the removed
attribute is defined in the DTD, a new attribute immediately appears
with the default value as well as the corresponding namespace URI,
local name, and prefix when applicable. The implementation may handle
default values from other schemas similarly but applications should
use <code>Document.normalizeDocument()</code> to guarantee this
information is up-to-date.
<br>If no attribute with this name is found, this method has no effect.
<br>To remove an attribute by local name and namespace URI, use the
<code>removeAttributeNS</code> method.
@param name The name of the attribute to remove.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
"
      end

      operation 4251394 "getAttributeNode"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an attribute node by name.
<br>To retrieve an attribute node by qualified name and namespace URI,
use the <code>getAttributeNodeNS</code> method.
@param name The name (<code>nodeName</code>) of the attribute to
  retrieve.
@return The <code>Attr</code> node with the specified name (
  <code>nodeName</code>) or <code>null</code> if there is no such
  attribute.
"
      end

      operation 4251522 "setAttributeNode"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "newAttr" type class_ref 648066 // Attr
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new attribute node. If an attribute with that name (
<code>nodeName</code>) is already present in the element, it is
replaced by the new one. Replacing an attribute node by itself has no
effect.
<br>To add a new attribute node with a qualified name and namespace
URI, use the <code>setAttributeNodeNS</code> method.
@param newAttr The <code>Attr</code> node to add to the attribute list.
@return If the <code>newAttr</code> attribute replaces an existing
  attribute, the replaced <code>Attr</code> node is returned,
  otherwise <code>null</code> is returned.
@exception DOMException
  WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was created from a
  different document than the one that created the element.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already an
  attribute of another <code>Element</code> object. The DOM user must
  explicitly clone <code>Attr</code> nodes to re-use them in other
  elements.
"
      end

      operation 4251650 "removeAttributeNode"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "oldAttr" type class_ref 648066 // Attr
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified attribute node. If a default value for the
removed <code>Attr</code> node is defined in the DTD, a new node
immediately appears with the default value as well as the
corresponding namespace URI, local name, and prefix when applicable.
The implementation may handle default values from other schemas
similarly but applications should use
<code>Document.normalizeDocument()</code> to guarantee this
information is up-to-date.
@param oldAttr The <code>Attr</code> node to remove from the attribute
  list.
@return The <code>Attr</code> node that was removed.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>NOT_FOUND_ERR: Raised if <code>oldAttr</code> is not an attribute
  of the element.
"
      end

      operation 4251778 "getElementsByTagName"
	public return_type class_ref 333058 // NodeList
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>NodeList</code> of all descendant <code>Elements</code>
with a given tag name, in document order.
@param name The name of the tag to match on. The special value \"*\"
  matches all tags.
@return A list of matching <code>Element</code> nodes.
"
      end

      operation 4251906 "getAttributeNS"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an attribute value by local name and namespace URI.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value <code>null</code> as the
<code>namespaceURI</code> parameter for methods if they wish to have
no namespace.
@param namespaceURI The namespace URI of the attribute to retrieve.
@param localName The local name of the attribute to retrieve.
@return The <code>Attr</code> value as a string, or the empty string
  if that attribute does not have a specified or default value.
@exception DOMException
  NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature <code>\"XML\"</code> and the language exposed
  through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4252034 "setAttributeNS"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "qualifiedName" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new attribute. If an attribute with the same local name and
namespace URI is already present on the element, its prefix is
changed to be the prefix part of the <code>qualifiedName</code>, and
its value is changed to be the <code>value</code> parameter. This
value is a simple string; it is not parsed as it is being set. So any
markup (such as syntax to be recognized as an entity reference) is
treated as literal text, and needs to be appropriately escaped by the
implementation when it is written out. In order to assign an
attribute value that contains entity references, the user must create
an <code>Attr</code> node plus any <code>Text</code> and
<code>EntityReference</code> nodes, build the appropriate subtree,
and use <code>setAttributeNodeNS</code> or
<code>setAttributeNode</code> to assign it as the value of an
attribute.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value <code>null</code> as the
<code>namespaceURI</code> parameter for methods if they wish to have
no namespace.
@param namespaceURI The namespace URI of the attribute to create or
  alter.
@param qualifiedName The qualified name of the attribute to create or
  alter.
@param value The value to set in string form.
@exception DOMException
  INVALID_CHARACTER_ERR: Raised if the specified qualified name is not
  an XML name according to the XML version in use specified in the
  <code>Document.xmlVersion</code> attribute.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>NAMESPACE_ERR: Raised if the <code>qualifiedName</code> is
  malformed per the Namespaces in XML specification, if the
  <code>qualifiedName</code> has a prefix and the
  <code>namespaceURI</code> is <code>null</code>, if the
  <code>qualifiedName</code> has a prefix that is \"xml\" and the
  <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/XML/1998/namespace'>
  http://www.w3.org/XML/1998/namespace</a>\", if the <code>qualifiedName</code> or its prefix is \"xmlns\" and the
  <code>namespaceURI</code> is different from \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\", or if the <code>namespaceURI</code> is \"<a href='http://www.w3.org/2000/xmlns/'>http://www.w3.org/2000/xmlns/</a>\" and neither the <code>qualifiedName</code> nor its prefix is \"xmlns\".
  <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature <code>\"XML\"</code> and the language exposed
  through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4252162 "removeAttributeNS"
	public explicit_return_type "void"
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an attribute by local name and namespace URI. If a default
value for the removed attribute is defined in the DTD, a new
attribute immediately appears with the default value as well as the
corresponding namespace URI, local name, and prefix when applicable.
The implementation may handle default values from other schemas
similarly but applications should use
<code>Document.normalizeDocument()</code> to guarantee this
information is up-to-date.
<br>If no attribute with this local name and namespace URI is found,
this method has no effect.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value <code>null</code> as the
<code>namespaceURI</code> parameter for methods if they wish to have
no namespace.
@param namespaceURI The namespace URI of the attribute to remove.
@param localName The local name of the attribute to remove.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature <code>\"XML\"</code> and the language exposed
  through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4252290 "getAttributeNodeNS"
	public return_type class_ref 648066 // Attr
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves an <code>Attr</code> node by local name and namespace URI.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value <code>null</code> as the
<code>namespaceURI</code> parameter for methods if they wish to have
no namespace.
@param namespaceURI The namespace URI of the attribute to retrieve.
@param localName The local name of the attribute to retrieve.
@return The <code>Attr</code> node with the specified attribute local
  name and namespace URI or <code>null</code> if there is no such
  attribute.
@exception DOMException
  NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature <code>\"XML\"</code> and the language exposed
  through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4252418 "setAttributeNodeNS"
	public return_type class_ref 648066 // Attr
	nparams 1
	  param inout name "newAttr" type class_ref 648066 // Attr
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new attribute. If an attribute with that local name and that
namespace URI is already present in the element, it is replaced by
the new one. Replacing an attribute node by itself has no effect.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value <code>null</code> as the
<code>namespaceURI</code> parameter for methods if they wish to have
no namespace.
@param newAttr The <code>Attr</code> node to add to the attribute list.
@return If the <code>newAttr</code> attribute replaces an existing
  attribute with the same local name and namespace URI, the replaced
  <code>Attr</code> node is returned, otherwise <code>null</code> is
  returned.
@exception DOMException
  WRONG_DOCUMENT_ERR: Raised if <code>newAttr</code> was created from a
  different document than the one that created the element.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>INUSE_ATTRIBUTE_ERR: Raised if <code>newAttr</code> is already an
  attribute of another <code>Element</code> object. The DOM user must
  explicitly clone <code>Attr</code> nodes to re-use them in other
  elements.
  <br>NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature <code>\"XML\"</code> and the language exposed
  through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4252546 "getElementsByTagNameNS"
	public return_type class_ref 333058 // NodeList
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <code>NodeList</code> of all the descendant
<code>Elements</code> with a given local name and namespace URI in
document order.
@param namespaceURI The namespace URI of the elements to match on. The
  special value \"*\" matches all namespaces.
@param localName The local name of the elements to match on. The
  special value \"*\" matches all local names.
@return A new <code>NodeList</code> object containing all the matched
  <code>Elements</code>.
@exception DOMException
  NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature <code>\"XML\"</code> and the language exposed
  through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4252674 "hasAttribute"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> when an attribute with a given name is
specified on this element or has a default value, <code>false</code>
otherwise.
@param name The name of the attribute to look for.
@return <code>true</code> if an attribute with the given name is
  specified on this element or has a default value, <code>false</code>
   otherwise.
@since DOM Level 2
"
      end

      operation 4252802 "hasAttributeNS"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> when an attribute with a given local name and
namespace URI is specified on this element or has a default value,
<code>false</code> otherwise.
<br>Per [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
, applications must use the value <code>null</code> as the
<code>namespaceURI</code> parameter for methods if they wish to have
no namespace.
@param namespaceURI The namespace URI of the attribute to look for.
@param localName The local name of the attribute to look for.
@return <code>true</code> if an attribute with the given local name
  and namespace URI is specified or has a default value on this
  element, <code>false</code> otherwise.
@exception DOMException
  NOT_SUPPORTED_ERR: May be raised if the implementation does not
  support the feature <code>\"XML\"</code> and the language exposed
  through the Document does not support XML Namespaces (such as [<a href='http://www.w3.org/TR/1999/REC-html401-19991224/'>HTML 4.01</a>]).
@since DOM Level 2
"
      end

      operation 4252930 "getSchemaTypeInfo"
	public return_type class_ref 648322 // TypeInfo
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The type information associated with this element.
@since DOM Level 3
"
      end

      operation 4253058 "setIdAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "isId" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If the parameter <code>isId</code> is <code>true</code>, this method
declares the specified attribute to be a user-determined ID attribute
. This affects the value of <code>Attr.isId</code> and the behavior
of <code>Document.getElementById</code>, but does not change any
schema that may be in use, in particular this does not affect the
<code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>
node. Use the value <code>false</code> for the parameter
<code>isId</code> to undeclare an attribute for being a
user-determined ID attribute.
<br> To specify an attribute by local name and namespace URI, use the
<code>setIdAttributeNS</code> method.
@param name The name of the attribute.
@param isId Whether the attribute is a of type ID.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute
  of this element.
@since DOM Level 3
"
      end

      operation 4253186 "setIdAttributeNS"
	public explicit_return_type "void"
	nparams 3
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "isId" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If the parameter <code>isId</code> is <code>true</code>, this method
declares the specified attribute to be a user-determined ID attribute
. This affects the value of <code>Attr.isId</code> and the behavior
of <code>Document.getElementById</code>, but does not change any
schema that may be in use, in particular this does not affect the
<code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>
node. Use the value <code>false</code> for the parameter
<code>isId</code> to undeclare an attribute for being a
user-determined ID attribute.
@param namespaceURI The namespace URI of the attribute.
@param localName The local name of the attribute.
@param isId Whether the attribute is a of type ID.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute
  of this element.
@since DOM Level 3
"
      end

      operation 4253314 "setIdAttributeNode"
	public explicit_return_type "void"
	nparams 2
	  param inout name "idAttr" type class_ref 648066 // Attr
	  param inout name "isId" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If the parameter <code>isId</code> is <code>true</code>, this method
declares the specified attribute to be a user-determined ID attribute
. This affects the value of <code>Attr.isId</code> and the behavior
of <code>Document.getElementById</code>, but does not change any
schema that may be in use, in particular this does not affect the
<code>Attr.schemaTypeInfo</code> of the specified <code>Attr</code>
node. Use the value <code>false</code> for the parameter
<code>isId</code> to undeclare an attribute for being a
user-determined ID attribute.
@param idAttr The attribute node.
@param isId Whether the attribute is a of type ID.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
  <br>NOT_FOUND_ERR: Raised if the specified node is not an attribute
  of this element.
@since DOM Level 3
"
      end
    end

    class 648322 "TypeInfo"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The <code>TypeInfo</code> interface represents a type referenced from
<code>Element</code> or <code>Attr</code> nodes, specified in the schemas
associated with the document. The type is a pair of a namespace URI and
name properties, and depends on the document's schema.
<p> If the document's schema is an XML DTD [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>], the values
are computed as follows:
<ul>
<li> If this type is referenced from an
<code>Attr</code> node, <code>typeNamespace</code> is
<code>\"http://www.w3.org/TR/REC-xml\"</code> and <code>typeName</code>
represents the <b>[attribute type]</b> property in the [<a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/'>XML Information Set</a>]
. If there is no declaration for the attribute, <code>typeNamespace</code>
 and <code>typeName</code> are <code>null</code>.
</li>
<li> If this type is
referenced from an <code>Element</code> node, <code>typeNamespace</code>
and <code>typeName</code> are <code>null</code>.
</li>
</ul>
<p> If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]
, the values are computed as follows using the post-schema-validation
infoset contributions (also called PSVI contributions):
<ul>
<li> If the <b>[validity]</b> property exists AND is <em>\"invalid\"</em> or <em>\"notKnown\"</em>: the {target namespace} and {name} properties of the declared type if
available, otherwise <code>null</code>.
<p ><b>Note:</b>  At the time of writing, the XML Schema specification does
not require exposing the declared type. Thus, DOM implementations might
choose not to provide type information if validity is not valid.
</li>
<li> If the <b>[validity]</b> property exists and is <em>\"valid\"</em>:
<ol>
<li> If <b>[member type definition]</b> exists:
<ol>
<li>If {name} is not absent, then expose {name} and {target
namespace} properties of the <b>[member type definition]</b> property;
</li>
<li>Otherwise, expose the namespace and local name of the
corresponding anonymous type name.
</li>
</ol>
</li>
<li> If the <b>[type definition]</b> property exists:
<ol>
<li>If {name} is not absent, then expose {name} and {target
namespace} properties of the <b>[type definition]</b> property;
</li>
<li>Otherwise, expose the namespace and local name of the
corresponding anonymous type name.
</li>
</ol>
</li>
<li> If the <b>[member type definition anonymous]</b> exists:
<ol>
<li>If it is false, then expose <b>[member type definition name]</b> and <b>[member type definition namespace]</b> properties;
</li>
<li>Otherwise, expose the namespace and local name of the
corresponding anonymous type name.
</li>
</ol>
</li>
<li> If the <b>[type definition anonymous]</b> exists:
<ol>
<li>If it is false, then expose <b>[type definition name]</b> and <b>[type definition namespace]</b> properties;
</li>
<li>Otherwise, expose the namespace and local name of the
corresponding anonymous type name.
</li>
</ol>
</li>
</ol>
</li>
</ul>
<p ><b>Note:</b>  Other schema languages are outside the scope of the W3C
and therefore should define how to represent their type systems using
<code>TypeInfo</code>.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      operation 4181250 "getTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The name of a type declared for the associated element or attribute,
or <code>null</code> if unknown.
"
      end

      operation 4181378 "getTypeNamespace"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The namespace of the type declared for the associated element or
attribute or <code>null</code> if the element does not have
declaration or if no namespace information is available.
"
      end

      attribute 890754 "DERIVATION_RESTRICTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " DerivationMethods

 If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]
, this constant represents the derivation by <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-typeRestriction'>
restriction</a> if complex types are involved, or a <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-restriction'>
restriction</a> if simple types are involved.
<br>  The reference type definition is derived by restriction from the
other type definition if the other type definition is the same as the
reference type definition, or if the other type definition can be
reached recursively following the {base type definition} property
from the reference type definition, and all the <em>derivation methods</em> involved are restriction.

"
      end

      attribute 890882 "DERIVATION_EXTENSION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]
, this constant represents the derivation by <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-typeExtension'>
extension</a>.
<br>  The reference type definition is derived by extension from the
other type definition if the other type definition can be reached
recursively following the {base type definition} property from the
reference type definition, and at least one of the <em>derivation methods</em> involved is an extension.

"
      end

      attribute 891010 "DERIVATION_UNION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]
, this constant represents the <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-union'>
union</a> if simple types are involved.
<br> The reference type definition is derived by union from the other
type definition if there exists two type definitions T1 and T2 such
as the reference type definition is derived from T1 by
<code>DERIVATION_RESTRICTION</code> or
<code>DERIVATION_EXTENSION</code>, T2 is derived from the other type
definition by <code>DERIVATION_RESTRICTION</code>, T1 has {variety} <em>union</em>, and one of the {member type definitions} is T2. Note that T1 could be
the same as the reference type definition, and T2 could be the same
as the other type definition.

"
      end

      attribute 891138 "DERIVATION_LIST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If the document's schema is an XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]
, this constant represents the <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#element-list'>list</a>.
<br> The reference type definition is derived by list from the other
type definition if there exists two type definitions T1 and T2 such
as the reference type definition is derived from T1 by
<code>DERIVATION_RESTRICTION</code> or
<code>DERIVATION_EXTENSION</code>, T2 is derived from the other type
definition by <code>DERIVATION_RESTRICTION</code>, T1 has {variety} <em>list</em>, and T2 is the {item type definition}. Note that T1 could be the same as
the reference type definition, and T2 could be the same as the other
type definition.

"
      end

      operation 4181506 "isDerivedFrom"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "typeNamespaceArg" type class_ref 128130 // String
	  param inout name "typeNameArg" type class_ref 128130 // String
	  param in name "derivationMethod" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This method returns if there is a derivation between the reference
type definition, i.e. the <code>TypeInfo</code> on which the method
is being called, and the other type definition, i.e. the one passed
as parameters.
@param typeNamespaceArg  the namespace of the other type definition.
@param typeNameArg  the name of the other type definition.
@param derivationMethod  the type of derivation and conditions applied
  between two types, as described in the list of constants provided
  in this interface.
@return  If the document's schema is a DTD or no schema is associated
  with the document, this method will always return <code>false</code>
  .  If the document's schema is an XML Schema, the method will return
  <code>true</code> if the reference type definition is derived from
  the other type definition according to the derivation parameter. If
  the value of the parameter is <code>0</code> (no bit is set to
  <code>1</code> for the <code>derivationMethod</code> parameter),
  the method will return <code>true</code> if the other type
  definition can be reached by recursing any combination of {base
  type definition}, {item type definition}, or {member type
  definitions} from the reference type definition.
"
      end
    end

    class 648962 "CharacterData"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>CharacterData</code> interface extends Node with a set of
attributes and methods for accessing character data in the DOM. For
clarity this set is defined here rather than on each object that uses
these attributes and methods. No DOM objects correspond directly to
<code>CharacterData</code>, though <code>Text</code> and others do
inherit the interface from it. All <code>offsets</code> in this interface
start from <code>0</code>.
<p>As explained in the <code>DOMString</code> interface, text strings in
the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In
the following, the term 16-bit units is used whenever necessary to
indicate that indexing on CharacterData is done in 16-bit units.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1776130 // <generalisation>
	relation 1776130 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1776130 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 4192514 "getData"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The character data of the node that implements this interface. The DOM
implementation may not put arbitrary limits on the amount of data
that may be stored in a <code>CharacterData</code> node. However,
implementation limits may mean that the entirety of a node's data may
not fit into a single <code>DOMString</code>. In such cases, the user
may call <code>substringData</code> to retrieve the data in
appropriately sized pieces.
@exception DOMException
  DOMSTRING_SIZE_ERR: Raised when it would return more characters than
  fit in a <code>DOMString</code> variable on the implementation
  platform.
"
      end

      operation 4192642 "setData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The character data of the node that implements this interface. The DOM
implementation may not put arbitrary limits on the amount of data
that may be stored in a <code>CharacterData</code> node. However,
implementation limits may mean that the entirety of a node's data may
not fit into a single <code>DOMString</code>. In such cases, the user
may call <code>substringData</code> to retrieve the data in
appropriately sized pieces.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
"
      end

      operation 4192770 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of 16-bit units that are available through <code>data</code>
and the <code>substringData</code> method below. This may have the
value zero, i.e., <code>CharacterData</code> nodes may be empty.
"
      end

      operation 4192898 "substringData"
	public return_type class_ref 128130 // String
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extracts a range of data from the node.
@param offset Start offset of substring to extract.
@param count The number of 16-bit units to extract.
@return The specified substring. If the sum of <code>offset</code> and
  <code>count</code> exceeds the <code>length</code>, then all 16-bit
  units to the end of the data are returned.
@exception DOMException
  INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
  negative or greater than the number of 16-bit units in
  <code>data</code>, or if the specified <code>count</code> is
  negative.
  <br>DOMSTRING_SIZE_ERR: Raised if the specified range of text does
  not fit into a <code>DOMString</code>.
"
      end

      operation 4193026 "appendData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "arg" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append the string to the end of the character data of the node. Upon
success, <code>data</code> provides access to the concatenation of
<code>data</code> and the <code>DOMString</code> specified.
@param arg The <code>DOMString</code> to append.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
"
      end

      operation 4193154 "insertData"
	public explicit_return_type "void"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param inout name "arg" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Insert a string at the specified 16-bit unit offset.
@param offset The character offset at which to insert.
@param arg The <code>DOMString</code> to insert.
@exception DOMException
  INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
  negative or greater than the number of 16-bit units in
  <code>data</code>.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
"
      end

      operation 4193282 "deleteData"
	public explicit_return_type "void"
	nparams 2
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a range of 16-bit units from the node. Upon success,
<code>data</code> and <code>length</code> reflect the change.
@param offset The offset from which to start removing.
@param count The number of 16-bit units to delete. If the sum of
  <code>offset</code> and <code>count</code> exceeds
  <code>length</code> then all 16-bit units from <code>offset</code>
  to the end of the data are deleted.
@exception DOMException
  INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
  negative or greater than the number of 16-bit units in
  <code>data</code>, or if the specified <code>count</code> is
  negative.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
"
      end

      operation 4193410 "replaceData"
	public explicit_return_type "void"
	nparams 3
	  param in name "offset" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "arg" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace the characters starting at the specified 16-bit unit offset
with the specified string.
@param offset The offset from which to start replacing.
@param count The number of 16-bit units to replace. If the sum of
  <code>offset</code> and <code>count</code> exceeds
  <code>length</code>, then all 16-bit units to the end of the data
  are replaced; (i.e., the effect is the same as a <code>remove</code>
   method call with the same range, followed by an <code>append</code>
   method invocation).
@param arg The <code>DOMString</code> with which the range must be
  replaced.
@exception DOMException
  INDEX_SIZE_ERR: Raised if the specified <code>offset</code> is
  negative or greater than the number of 16-bit units in
  <code>data</code>, or if the specified <code>count</code> is
  negative.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
"
      end
    end

    class 649090 "Text"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>Text</code> interface inherits from <code>CharacterData</code>
and represents the textual content (termed <a href='http://www.w3.org/TR/2004/REC-xml-20040204#syntax'>character data</a> in XML) of an <code>Element</code> or <code>Attr</code>. If there is no
markup inside an element's content, the text is contained in a single
object implementing the <code>Text</code> interface that is the only
child of the element. If there is markup, it is parsed into the
information items (elements, comments, etc.) and <code>Text</code> nodes
that form the list of children of the element.
<p>When a document is first made available via the DOM, there is only one
<code>Text</code> node for each block of text. Users may create adjacent
<code>Text</code> nodes that represent the contents of a given element
without any intervening markup, but should be aware that there is no way
to represent the separations between these nodes in XML or HTML, so they
will not (in general) persist between DOM editing sessions. The
<code>Node.normalize()</code> method merges any such adjacent
<code>Text</code> objects into a single node for each block of text.
<p> No lexical check is done on the content of a <code>Text</code> node
and, depending on its position in the document, some characters must be
escaped during serialization using character references; e.g. the
characters \"&lt;&amp;\" if the textual content is part of an element or of
an attribute, the character sequence \"]]&gt;\" when part of an element,
the quotation mark character \" or the apostrophe character ' when part of
an attribute.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1776386 // <generalisation>
	relation 1776386 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1776386 // <generalisation>
	  b parent class_ref 648962 // CharacterData
      end

      operation 4193538 "splitText"
	public return_type class_ref 649090 // Text
	nparams 1
	  param in name "offset" explicit_type "int"
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Breaks this node into two nodes at the specified <code>offset</code>,
keeping both in the tree as siblings. After being split, this node
will contain all the content up to the <code>offset</code> point. A
new node of the same type, which contains all the content at and
after the <code>offset</code> point, is returned. If the original
node had a parent node, the new node is inserted as the next sibling
of the original node. When the <code>offset</code> is equal to the
length of this node, the new node has no data.
@param offset The 16-bit unit offset at which to split, starting from
  <code>0</code>.
@return The new node, of the same type as this node.
@exception DOMException
  INDEX_SIZE_ERR: Raised if the specified offset is negative or greater
  than the number of 16-bit units in <code>data</code>.
  <br>NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly.
"
      end

      operation 4193666 "isElementContentWhitespace"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this text node contains <a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character'>
element content whitespace</a>, often abusively called \"ignorable whitespace\". The text node is
determined to contain whitespace in element content during the load
of the document or if validation occurs while using
<code>Document.normalizeDocument()</code>.
@since DOM Level 3
"
      end

      operation 4193794 "getWholeText"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all text of <code>Text</code> nodes logically-adjacent text
nodes to this node, concatenated in document order.
<br>For instance, in the example below <code>wholeText</code> on the
<code>Text</code> node that contains \"bar\" returns \"barfoo\", while on
the <code>Text</code> node that contains \"foo\" it returns \"barfoo\".

<pre>
                    +-----+
                    | &lt;p&gt; |
                    +-----+
                      /\\
                     /  \\
              /-----\\    +-------+
              | bar |    | &amp;ent; |
              \\-----/    +-------+
                             |
                             |
                          /-----\\
                          | foo |
                          \\-----/
</pre>
<em>Figure: barTextNode.wholeText value is \"barfoo\"</em>

@since DOM Level 3
"
      end

      operation 4193922 "replaceWholeText"
	public return_type class_ref 649090 // Text
	nparams 1
	  param inout name "content" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the text of the current node and all logically-adjacent text
nodes with the specified text. All logically-adjacent text nodes are
removed including the current node unless it was the recipient of the
replacement text.
<p>This method returns the node which received the replacement text.
The returned node is:</p>
<ul>
<li><code>null</code>, when the replacement text is
the empty string;
</li>
<li>the current node, except when the current node is
read-only;
</li>
<li> a new <code>Text</code> node of the same type (
<code>Text</code> or <code>CDATASection</code>) as the current node
inserted at the location of the replacement.
</li>
</ul>
<p>For instance, in the above example calling
<code>replaceWholeText</code> on the <code>Text</code> node that
contains \"bar\" with \"yo\" in argument results in the following:</p>

<pre>
                    +-----+
                    | &lt;p&gt; |
                    +-----+
                       |
                       |
                    /-----\\
                    | yo  |
                    \\-----/
</pre>
<em>Figure: barTextNode.replaceWholeText(\"yo\") modifies the
textual content of barTextNode with \"yo\"</em>

<p>Where the nodes to be removed are read-only descendants of an
<code>EntityReference</code>, the <code>EntityReference</code> must
be removed instead of the read-only nodes. If any
<code>EntityReference</code> to be removed has descendants that are
not <code>EntityReference</code>, <code>Text</code>, or
<code>CDATASection</code> nodes, the <code>replaceWholeText</code>
method must fail before performing any modification of the document,
raising a <code>DOMException</code> with the code
<code>NO_MODIFICATION_ALLOWED_ERR</code>.</p>
<p>For instance, in the example below calling
<code>replaceWholeText</code> on the <code>Text</code> node that
contains \"bar\" fails, because the <code>EntityReference</code> node
\"ent\" contains an <code>Element</code> node which cannot be removed.</p>
@param content The content of the replacing <code>Text</code> node.
@return The <code>Text</code> node created with the specified content.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised if one of the <code>Text</code>
  nodes being replaced is readonly.
@since DOM Level 3
"
      end
    end

    class 649218 "CDATASection"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CDATA sections are used to escape blocks of text containing characters that
would otherwise be regarded as markup. The only delimiter that is
recognized in a CDATA section is the \"]]&gt;\" string that ends the CDATA
section. CDATA sections cannot be nested. Their primary purpose is for
including material such as XML fragments, without needing to escape all
the delimiters.
<p>The <code>CharacterData.data</code> attribute holds the text that is
contained by the CDATA section. Note that this <em>may</em> contain characters that need to be escaped outside of CDATA sections and
that, depending on the character encoding (\"charset\") chosen for
serialization, it may be impossible to write out some characters as part
of a CDATA section.
<p>The <code>CDATASection</code> interface inherits from the
<code>CharacterData</code> interface through the <code>Text</code>
interface. Adjacent <code>CDATASection</code> nodes are not merged by use
of the <code>normalize</code> method of the <code>Node</code> interface.
<p> No lexical check is done on the content of a CDATA section and it is
therefore possible to have the character sequence <code>\"]]&gt;\"</code>
in the content, which is illegal in a CDATA section per section 2.7 of [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]. The
presence of this character sequence must generate a fatal error during
serialization or the cdata section must be splitted before the
serialization (see also the parameter <code>\"split-cdata-sections\"</code>
in the <code>DOMConfiguration</code> interface).
<p ><b>Note:</b> Because no markup is recognized within a
<code>CDATASection</code>, character numeric references cannot be used as
an escape mechanism when serializing. Therefore, action needs to be taken
when serializing a <code>CDATASection</code> with a character encoding
where some of the contained characters cannot be represented. Failure to
do so would not produce well-formed XML.
<p ><b>Note:</b> One potential solution in the serialization process is to
end the CDATA section before the character, output the character using a
character reference or entity reference, and open a new CDATA section for
any further characters in the text node. Note, however, that some code
conversion libraries at the time of writing do not return an error or
exception when a character is missing from the encoding, making the task
of ensuring that data is not corrupted on serialization more difficult.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1776770 // <generalisation>
	relation 1776770 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1776770 // <generalisation>
	  b parent class_ref 649090 // Text
      end
    end

    class 649474 "Comment"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface inherits from <code>CharacterData</code> and represents the
content of a comment, i.e., all the characters between the starting '
<code>&lt;!--</code>' and ending '<code>--&gt;</code>'. Note that this is
the definition of a comment in XML, and, in practice, HTML, although some
HTML tools may implement the full SGML comment structure.
<p> No lexical check is done on the content of a comment and it is
therefore possible to have the character sequence <code>\"--\"</code>
(double-hyphen) in the content, which is illegal in a comment per section
2.5 of [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]. The
presence of this character sequence must generate a fatal error during
serialization.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1777282 // <generalisation>
	relation 1777282 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1777282 // <generalisation>
	  b parent class_ref 648962 // CharacterData
      end
    end

    class 649986 "DocumentType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Each <code>Document</code> has a <code>doctype</code> attribute whose value
is either <code>null</code> or a <code>DocumentType</code> object. The
<code>DocumentType</code> interface in the DOM Core provides an interface
to the list of entities that are defined for the document, and little
else because the effect of namespaces and the various XML schema efforts
on DTD representation are not clearly understood as of this writing.
<p>DOM Level 3 doesn't support editing <code>DocumentType</code> nodes.
<code>DocumentType</code> nodes are read-only.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1786114 // <generalisation>
	relation 1786114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1786114 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 4244866 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The name of DTD; i.e., the name immediately following the
<code>DOCTYPE</code> keyword.
"
      end

      operation 4244994 "getEntities"
	public return_type class_ref 327042 // NamedNodeMap
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A <code>NamedNodeMap</code> containing the general entities, both
external and internal, declared in the DTD. Parameter entities are
not contained. Duplicates are discarded. For example in:
<pre>&lt;!DOCTYPE
ex SYSTEM \"ex.dtd\" [ &lt;!ENTITY foo \"foo\"&gt; &lt;!ENTITY bar
\"bar\"&gt; &lt;!ENTITY bar \"bar2\"&gt; &lt;!ENTITY % baz \"baz\"&gt;
]&gt; &lt;ex/&gt;</pre>
 the interface provides access to <code>foo</code>
and the first declaration of <code>bar</code> but not the second
declaration of <code>bar</code> or <code>baz</code>. Every node in
this map also implements the <code>Entity</code> interface.
<br>The DOM Level 2 does not support editing entities, therefore
<code>entities</code> cannot be altered in any way.
"
      end

      operation 4245122 "getNotations"
	public return_type class_ref 327042 // NamedNodeMap
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A <code>NamedNodeMap</code> containing the notations declared in the
DTD. Duplicates are discarded. Every node in this map also implements
the <code>Notation</code> interface.
<br>The DOM Level 2 does not support editing notations, therefore
<code>notations</code> cannot be altered in any way.
"
      end

      operation 4245250 "getPublicId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The public identifier of the external subset.
@since DOM Level 2
"
      end

      operation 4245378 "getSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The system identifier of the external subset. This may be an absolute
URI or not.
@since DOM Level 2
"
      end

      operation 4245506 "getInternalSubset"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The internal subset as a string, or <code>null</code> if there is none.
This is does not contain the delimiting square brackets.
<p ><b>Note:</b> The actual content returned depends on how much
information is available to the implementation. This may vary
depending on various parameters, including the XML processor used to
build the document.
@since DOM Level 2
"
      end
    end

    class 650114 "DocumentFragment"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DocumentFragment</code> is a \"lightweight\" or \"minimal\"
<code>Document</code> object. It is very common to want to be able to
extract a portion of a document's tree or to create a new fragment of a
document. Imagine implementing a user command like cut or rearranging a
document by moving fragments around. It is desirable to have an object
which can hold such fragments and it is quite natural to use a Node for
this purpose. While it is true that a <code>Document</code> object could
fulfill this role, a <code>Document</code> object can potentially be a
heavyweight object, depending on the underlying implementation. What is
really needed for this is a very lightweight object.
<code>DocumentFragment</code> is such an object.
<p>Furthermore, various operations -- such as inserting nodes as children
of another <code>Node</code> -- may take <code>DocumentFragment</code>
objects as arguments; this results in all the child nodes of the
<code>DocumentFragment</code> being moved to the child list of this node.
<p>The children of a <code>DocumentFragment</code> node are zero or more
nodes representing the tops of any sub-trees defining the structure of
the document. <code>DocumentFragment</code> nodes do not need to be
well-formed XML documents (although they do need to follow the rules
imposed upon well-formed XML parsed entities, which can have multiple top
nodes). For example, a <code>DocumentFragment</code> might have only one
child and that child node could be a <code>Text</code> node. Such a
structure model represents neither an HTML document nor a well-formed XML
document.
<p>When a <code>DocumentFragment</code> is inserted into a
<code>Document</code> (or indeed any other <code>Node</code> that may
take children) the children of the <code>DocumentFragment</code> and not
the <code>DocumentFragment</code> itself are inserted into the
<code>Node</code>. This makes the <code>DocumentFragment</code> very
useful when the user wishes to create nodes that are siblings; the
<code>DocumentFragment</code> acts as the parent of these nodes so that
the user can use the standard methods from the <code>Node</code>
interface, such as <code>Node.insertBefore</code> and
<code>Node.appendChild</code>.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1795842 // <generalisation>
	relation 1795842 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1795842 // <generalisation>
	  b parent class_ref 317570 // Node
      end
    end

    class 650242 "ProcessingInstruction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <code>ProcessingInstruction</code> interface represents a \"processing
instruction\", used in XML as a way to keep processor-specific information
in the text of the document.
<p> No lexical check is done on the content of a processing instruction and
it is therefore possible to have the character sequence
<code>\"?&gt;\"</code> in the content, which is illegal a processing
instruction per section 2.6 of [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]. The
presence of this character sequence must generate a fatal error during
serialization.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1794818 // <generalisation>
	relation 1794818 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1794818 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 4269314 "getTarget"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The target of this processing instruction. XML defines this as being
the first token following the markup that begins the processing
instruction.
"
      end

      operation 4269442 "getData"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The content of this processing instruction. This is from the first non
white space character after the target to the character immediately
preceding the <code>?&gt;</code>.
"
      end

      operation 4269570 "setData"
	public explicit_return_type "void"
	nparams 1
	  param inout name "data" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The content of this processing instruction. This is from the first non
white space character after the target to the character immediately
preceding the <code>?&gt;</code>.
@exception DOMException
  NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly.
"
      end
    end

    class 650370 "EntityReference"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>EntityReference</code> nodes may be used to represent an entity
reference in the tree. Note that character references and references to
predefined entities are considered to be expanded by the HTML or XML
processor so that characters are represented by their Unicode equivalent
rather than by an entity reference. Moreover, the XML processor may
completely expand references to entities while building the
<code>Document</code>, instead of providing <code>EntityReference</code>
nodes. If it does provide such nodes, then for an
<code>EntityReference</code> node that represents a reference to a known
entity an <code>Entity</code> exists, and the subtree of the
<code>EntityReference</code> node is a copy of the <code>Entity</code>
node subtree. However, the latter may not be true when an entity contains
an unbound namespace prefix. In such a case, because the namespace prefix
resolution depends on where the entity reference is, the descendants of
the <code>EntityReference</code> node may be bound to different namespace
URIs. When an <code>EntityReference</code> node represents a reference to
an unknown entity, the node has no children and its replacement value,
when used by <code>Attr.value</code> for example, is empty.
<p>As for <code>Entity</code> nodes, <code>EntityReference</code> nodes and
all their descendants are readonly.
<p ><b>Note:</b> <code>EntityReference</code> nodes may cause element
content and attribute value normalization problems when, such as in XML
1.0 and XML Schema, the normalization is performed after entity reference
are expanded.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1792770 // <generalisation>
	relation 1792770 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1792770 // <generalisation>
	  b parent class_ref 317570 // Node
      end
    end

    class 650498 "DOMConfiguration"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The <code>DOMConfiguration</code> interface represents the configuration
of a document and maintains a table of recognized parameters. Using the
configuration, it is possible to change
<code>Document.normalizeDocument()</code> behavior, such as replacing the
<code>CDATASection</code> nodes with <code>Text</code> nodes or
specifying the type of the schema that must be used when the validation
of the <code>Document</code> is requested. <code>DOMConfiguration</code>
objects are also used in [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>DOM Level 3 Load and Save</a>]
 in the <code>DOMParser</code> and <code>DOMSerializer</code> interfaces.
<p> The parameter names used by the <code>DOMConfiguration</code> object
are defined throughout the DOM Level 3 specifications. Names are
case-insensitive. To avoid possible conflicts, as a convention, names
referring to parameters defined outside the DOM specification should be
made unique. Because parameters are exposed as properties in names
are recommended to follow the section 5.16 Identifiers of [Unicode] with the addition of the character '-' (HYPHEN-MINUS) but it is not
enforced by the DOM implementation. DOM Level 3 Core Implementations are
required to recognize all parameters defined in this specification. Some
parameter values may also be required to be supported by the
implementation. Refer to the definition of the parameter to know if a
value must be supported or not.
<p ><b>Note:</b>  Parameters are similar to features and properties used in
SAX2 [<a href='http://www.saxproject.org/'>SAX</a>].
<p> The following list of parameters defined in the DOM:
<dl>
<dt>
<code>\"canonical-form\"</code></dt>
<dd>
<dl>
<dt><code>true</code></dt>
<dd>[<em>optional</em>] Canonicalize the document according to the rules specified in [<a href='http://www.w3.org/TR/2001/REC-xml-c14n-20010315'>Canonical XML</a>],
such as removing the <code>DocumentType</code> node (if any) from the
tree, or removing superfluous namespace declarations from each element.
Note that this is limited to what can be represented in the DOM; in
particular, there is no way to specify the order of the attributes in the
DOM. In addition,  Setting this parameter to <code>true</code> will also
set the state of the parameters listed below. Later changes to the state
of one of those parameters will revert \"canonical-form\" back to
<code>false</code>. Parameters set to <code>false</code>: \"entities\", \"
normalize-characters\", \"cdata-sections\". Parameters set to
<code>true</code>: \"namespaces\", \"namespace-declarations\", \"well-formed\",
\"element-content-whitespace\". Other parameters are not changed unless
explicitly specified in the description of the parameters.</dd>
<dt>
<code>false</code></dt>
<dd>[<em>required</em>] (<em>default</em>)Do not canonicalize the document.</dd>
</dl></dd>
<dt><code>\"cdata-sections\"</code></dt>
<dd>
<dl>
<dt>
<code>true</code></dt>
<dd>[<em>required</em>] (<em>default</em>)Keep <code>CDATASection</code> nodes in the document.</dd>
<dt><code>false</code></dt>
<dd>[<em>required</em>]Transform <code>CDATASection</code> nodes in the document into
<code>Text</code> nodes. The new <code>Text</code> node is then combined
with any adjacent <code>Text</code> node.</dd>
</dl></dd>
<dt>
<code>\"check-character-normalization\"</code></dt>
<dd>
<dl>
<dt><code>true</code></dt>
<dd>[<em>optional</em>] Check if the characters in the document are <a href='http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm'>fully
normalized</a>, as defined in appendix B of [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>]. When a
sequence of characters is encountered that fails normalization checking,
an error with the <code>DOMError.type</code> equals to
\"check-character-normalization-failure\" is issued. </dd>
<dt><code>false</code></dt>
<dd>[<em>required</em>] (<em>default</em>)Do not check if characters are normalized.</dd>
</dl></dd>
<dt><code>\"comments\"</code></dt>
<dd>
<dl>
<dt>
<code>true</code></dt>
<dd>[<em>required</em>] (<em>default</em>)Keep <code>Comment</code> nodes in the document.</dd>
<dt><code>false</code></dt>
<dd>[<em>required</em>]Discard <code>Comment</code> nodes in the document.</dd>
</dl></dd>
<dt>
<code>\"datatype-normalization\"</code></dt>
<dd>
<dl>
<dt><code>true</code></dt>
<dd>[<em>optional</em>] Expose schema normalized values in the tree, such as <a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/#key-nv'>XML
Schema normalized values</a> in the case of XML Schema. Since this parameter requires to have schema
information, the \"validate\" parameter will also be set to
<code>true</code>. Having this parameter activated when \"validate\" is
<code>false</code> has no effect and no schema-normalization will happen.
<p ><b>Note:</b>  Since the document contains the result of the XML 1.0
processing, this parameter does not apply to attribute value
normalization as defined in section 3.3.3 of [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>] and is only
meant for schema languages other than Document Type Definition (DTD). </dd>
<dt>
<code>false</code></dt>
<dd>[<em>required</em>] (<em>default</em>) Do not perform schema normalization on the tree. </dd>
</dl></dd>
<dt>
<code>\"element-content-whitespace\"</code></dt>
<dd>
<dl>
<dt><code>true</code></dt>
<dd>[<em>required</em>] (<em>default</em>)Keep all whitespaces in the document.</dd>
<dt><code>false</code></dt>
<dd>[<em>optional</em>] Discard all <code>Text</code> nodes that contain whitespaces in element
content, as described in <a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204#infoitem.character'>
[element content whitespace]</a>. The implementation is expected to use the attribute
<code>Text.isElementContentWhitespace</code> to determine if a
<code>Text</code> node should be discarded or not.</dd>
</dl></dd>
<dt><code>\"entities\"</code></dt>
<dd>
<dl>
<dt>
<code>true</code></dt>
<dd>[<em>required</em>] (<em>default</em>)Keep <code>EntityReference</code> nodes in the document.</dd>
<dt>
<code>false</code></dt>
<dd>[<em>required</em>] Remove all <code>EntityReference</code> nodes from the document,
putting the entity expansions directly in their place. <code>Text</code>
nodes are normalized, as defined in <code>Node.normalize</code>. Only <a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/#infoitem.rse'>
unexpanded entity references</a> are kept in the document. </dd>
</dl>
<p ><b>Note:</b>  This parameter does not affect <code>Entity</code> nodes. </dd>
<dt>
<code>\"error-handler\"</code></dt>
<dd>[<em>required</em>] Contains a <code>DOMErrorHandler</code> object. If an error is
encountered in the document, the implementation will call back the
<code>DOMErrorHandler</code> registered using this parameter. The
implementation may provide a default <code>DOMErrorHandler</code> object.
 When called, <code>DOMError.relatedData</code> will contain the closest
node to where the error occurred. If the implementation is unable to
determine the node where the error occurs,
<code>DOMError.relatedData</code> will contain the <code>Document</code>
node. Mutations to the document from within an error handler will result
in implementation dependent behavior. </dd>
<dt><code>\"infoset\"</code></dt>
<dd>
<dl>
<dt>
<code>true</code></dt>
<dd>[<em>required</em>]Keep in the document the information defined in the XML Information Set [<a href='http://www.w3.org/TR/2004/REC-xml-infoset-20040204/'>XML Information Set</a>]
.This forces the following parameters to <code>false</code>: \"
validate-if-schema\", \"entities\", \"datatype-normalization\", \"cdata-sections
\".This forces the following parameters to <code>true</code>: \"
namespace-declarations\", \"well-formed\", \"element-content-whitespace\", \"
comments\", \"namespaces\".Other parameters are not changed unless
explicitly specified in the description of the parameters. Note that
querying this parameter with <code>getParameter</code> returns
<code>true</code> only if the individual parameters specified above are
appropriately set.</dd>
<dt><code>false</code></dt>
<dd>Setting <code>infoset</code> to
<code>false</code> has no effect.</dd>
</dl></dd>
<dt><code>\"namespaces\"</code></dt>
<dd>
<dl>
<dt>
<code>true</code></dt>
<dd>[<em>required</em>] (<em>default</em>) Perform the namespace processing as defined in . </dd>
<dt><code>false</code></dt>
<dd>[<em>optional</em>] Do not perform the namespace processing. </dd>
</dl></dd>
<dt>
<code>\"namespace-declarations\"</code></dt>
<dd> This parameter has no effect if the
parameter \"namespaces\" is set to <code>false</code>.
<dl>
<dt><code>true</code></dt>
<dd>[<em>required</em>] (<em>default</em>) Include namespace declaration attributes, specified or defaulted from
the schema, in the document. See also the sections \"Declaring Namespaces\"
in [<a href='http://www.w3.org/TR/1999/REC-xml-names-19990114/'>XML Namespaces</a>]
 and [<a href='http://www.w3.org/TR/2004/REC-xml-names11-20040204/'>XML Namespaces 1.1</a>]
.</dd>
<dt><code>false</code></dt>
<dd>[<em>required</em>]Discard all namespace declaration attributes. The namespace prefixes (
<code>Node.prefix</code>) are retained even if this parameter is set to
<code>false</code>.</dd>
</dl></dd>
<dt><code>\"normalize-characters\"</code></dt>
<dd>
<dl>
<dt><code>true</code></dt>
<dd>[<em>optional</em>] <a href='http://www.w3.org/TR/2004/REC-xml11-20040204/#dt-fullnorm'>Fully
normalized</a> the characters in the document as defined in appendix B of [<a href='http://www.w3.org/TR/2004/REC-xml11-20040204/'>XML 1.1</a>]. </dd>
<dt>
<code>false</code></dt>
<dd>[<em>required</em>] (<em>default</em>)Do not perform character normalization.</dd>
</dl></dd>
<dt><code>\"schema-location\"</code></dt>
<dd>[<em>optional</em>] Represent a <code>DOMString</code> object containing a list of URIs,
separated by whitespaces (characters matching the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#NT-S'>nonterminal
production S</a> defined in section 2.3 [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]), that
represents the schemas against which validation should occur, i.e. the
current schema. The types of schemas referenced in this list must match
the type specified with <code>schema-type</code>, otherwise the behavior
of an implementation is undefined.  The schemas specified using this
property take precedence to the schema information specified in the
document itself. For namespace aware schema, if a schema specified using
this property and a schema specified in the document instance (i.e. using
the <code>schemaLocation</code> attribute) in a schema document (i.e.
using schema <code>import</code> mechanisms) share the same
<code>targetNamespace</code>, the schema specified by the user using this
property will be used. If two schemas specified using this property share
the same <code>targetNamespace</code> or have no namespace, the behavior
is implementation dependent.  If no location has been provided, this
parameter is <code>null</code>.
<p ><b>Note:</b>  The <code>\"schema-location\"</code> parameter is ignored
unless the \"schema-type\" parameter value is set. It is strongly
recommended that <code>Document.documentURI</code> will be set so that an
implementation can successfully resolve any external entities referenced. </dd>
<dt>
<code>\"schema-type\"</code></dt>
<dd>[<em>optional</em>] Represent a <code>DOMString</code> object containing an absolute URI
and representing the type of the schema language used to validate a
document against. Note that no lexical checking is done on the absolute
URI.  If this parameter is not set, a default value may be provided by
the implementation, based on the schema languages supported and on the
schema language used at load time. If no value is provided, this
parameter is <code>null</code>.
<p ><b>Note:</b>  For XML Schema [<a href='http://www.w3.org/TR/2001/REC-xmlschema-1-20010502/'>XML Schema Part 1</a>]
, applications must use the value
<code>\"http://www.w3.org/2001/XMLSchema\"</code>. For XML DTD [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>],
applications must use the value
<code>\"http://www.w3.org/TR/REC-xml\"</code>. Other schema languages are
outside the scope of the W3C and therefore should recommend an absolute
URI in order to use this method. </dd>
<dt><code>\"split-cdata-sections\"</code></dt>
<dd>
<dl>
<dt>
<code>true</code></dt>
<dd>[<em>required</em>] (<em>default</em>)Split CDATA sections containing the CDATA section termination marker
']]&gt;'. When a CDATA section is split a warning is issued with a
<code>DOMError.type</code> equals to
<code>\"cdata-sections-splitted\"</code> and
<code>DOMError.relatedData</code> equals to the first
<code>CDATASection</code> node in document order resulting from the split.</dd>
<dt>
<code>false</code></dt>
<dd>[<em>required</em>]Signal an error if a <code>CDATASection</code> contains an
unrepresentable character.</dd>
</dl></dd>
<dt><code>\"validate\"</code></dt>
<dd>
<dl>
<dt><code>true</code></dt>
<dd>[<em>optional</em>] Require the validation against a schema (i.e. XML schema, DTD, any
other type or representation of schema) of the document as it is being
normalized as defined by [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]. If
validation errors are found, or no schema was found, the error handler is
notified. Schema-normalized values will not be exposed according to the
schema in used unless the parameter \"datatype-normalization\" is
<code>true</code>.  This parameter will reevaluate:
<ul>
<li> Attribute nodes with
<code>Attr.specified</code> equals to <code>false</code>, as specified in
the description of the <code>Attr</code> interface;
</li>
<li> The value of the
attribute <code>Text.isElementContentWhitespace</code> for all
<code>Text</code> nodes;
</li>
<li> The value of the attribute
<code>Attr.isId</code> for all <code>Attr</code> nodes;
</li>
<li> The attributes
<code>Element.schemaTypeInfo</code> and <code>Attr.schemaTypeInfo</code>.
</li>
</ul>
<p ><b>Note:</b>  \"validate-if-schema\" and \"validate\" are mutually
exclusive, setting one of them to <code>true</code> will set the other
one to <code>false</code>. Applications should also consider setting the
parameter \"well-formed\" to <code>true</code>, which is the default for
that option, when validating the document. </dd>
<dt><code>false</code></dt>
<dd>[<em>required</em>] (<em>default</em>) Do not accomplish schema processing, including the internal subset
processing. Default attribute values information are kept. Note that
validation might still happen if \"validate-if-schema\" is <code>true</code>
. </dd>
</dl></dd>
<dt><code>\"validate-if-schema\"</code></dt>
<dd>
<dl>
<dt><code>true</code></dt>
<dd>[<em>optional</em>]Enable validation only if a declaration for the document element can be
found in a schema (independently of where it is found, i.e. XML schema,
DTD, or any other type or representation of schema). If validation is
enabled, this parameter has the same behavior as the parameter \"validate\"
set to <code>true</code>.
<p ><b>Note:</b>  \"validate-if-schema\" and \"validate\" are mutually
exclusive, setting one of them to <code>true</code> will set the other
one to <code>false</code>. </dd>
<dt><code>false</code></dt>
<dd>[<em>required</em>] (<em>default</em>) No schema processing should be performed if the document has a schema,
including internal subset processing. Default attribute values
information are kept. Note that validation must still happen if \"validate
\" is <code>true</code>. </dd>
</dl></dd>
<dt><code>\"well-formed\"</code></dt>
<dd>
<dl>
<dt><code>true</code></dt>
<dd>[<em>required</em>] (<em>default</em>) Check if all nodes are XML well formed according to the XML version in
use in <code>Document.xmlVersion</code>:
<ul>
<li> check if the attribute
<code>Node.nodeName</code> contains invalid characters according to its
node type and generate a <code>DOMError</code> of type
<code>\"wf-invalid-character-in-node-name\"</code>, with a
<code>DOMError.SEVERITY_ERROR</code> severity, if necessary;
</li>
<li> check if
the text content inside <code>Attr</code>, <code>Element</code>,
<code>Comment</code>, <code>Text</code>, <code>CDATASection</code> nodes
for invalid characters and generate a <code>DOMError</code> of type
<code>\"wf-invalid-character\"</code>, with a
<code>DOMError.SEVERITY_ERROR</code> severity, if necessary;
</li>
<li> check if
the data inside <code>ProcessingInstruction</code> nodes for invalid
characters and generate a <code>DOMError</code> of type
<code>\"wf-invalid-character\"</code>, with a
<code>DOMError.SEVERITY_ERROR</code> severity, if necessary;
</li>
</ul></dd>
<dt>
<code>false</code></dt>
<dd>[<em>optional</em>] Do not check for XML well-formedness. </dd>
</dl></dd>
</dl>
<p> The resolution of the system identifiers associated with entities is
done using <code>Document.documentURI</code>. However, when the feature
\"LS\" defined in [<a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407'>DOM Level 3 Load and Save</a>]
 is supported by the DOM implementation, the parameter
\"resource-resolver\" can also be used on <code>DOMConfiguration</code>
objects attached to <code>Document</code> nodes. If this parameter is
set, <code>Document.normalizeDocument()</code> will invoke the resource
resolver instead of using <code>Document.documentURI</code>.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      operation 4276994 "setParameter"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the value of a parameter.
@param name The name of the parameter to set.
@param value  The new value or <code>null</code> if the user wishes to
  unset the parameter. While the type of the value parameter is
  defined as <code>DOMUserData</code>, the object type must match the
  type defined by the definition of the parameter. For example, if
  the parameter is \"error-handler\", the value must be of type
  <code>DOMErrorHandler</code>.
@exception DOMException
   NOT_FOUND_ERR: Raised when the parameter name is not recognized.
  <br> NOT_SUPPORTED_ERR: Raised when the parameter name is recognized
  but the requested value cannot be set.
  <br> TYPE_MISMATCH_ERR: Raised if the value type for this parameter
  name is incompatible with the expected value type.
"
      end

      operation 4277122 "getParameter"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 646658 // DOMException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the value of a parameter if known.
@param name  The name of the parameter.
@return  The current object associated with the specified parameter or
  <code>null</code> if no object has been associated or if the
  parameter is not supported.
@exception DOMException
   NOT_FOUND_ERR: Raised when the parameter name is not recognized.
"
      end

      operation 4277250 "canSetParameter"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if setting a parameter to a specific value is supported.
@param name The name of the parameter to check.
@param value  An object. if <code>null</code>, the returned value is
  <code>true</code>.
@return  <code>true</code> if the parameter could be successfully set
  to the specified value, or <code>false</code> if the parameter is
  not recognized or the requested value is not supported. This does
  not change the current value of the parameter itself.
"
      end

      operation 4277378 "getParameterNames"
	public return_type class_ref 658562 // DOMStringList
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The list of the parameters supported by this
<code>DOMConfiguration</code> object and for which at least one value
can be set by the application. Note that this list can also contain
parameter names defined outside this specification.
"
      end
    end

    class 651010 "Entity"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a known entity, either parsed or unparsed, in an
XML document. Note that this models the entity itself <em>not</em> the entity declaration.
<p>The <code>nodeName</code> attribute that is inherited from
<code>Node</code> contains the name of the entity.
<p>An XML processor may choose to completely expand entities before the
structure model is passed to the DOM; in this case there will be no
<code>EntityReference</code> nodes in the document tree.
<p>XML does not mandate that a non-validating XML processor read and
process entity declarations made in the external subset or declared in
parameter entities. This means that parsed entities declared in the
external subset need not be expanded by some classes of applications, and
that the replacement text of the entity may not be available. When the <a href='http://www.w3.org/TR/2004/REC-xml-20040204#intern-replacement'>
replacement text</a> is available, the corresponding <code>Entity</code> node's child list
represents the structure of that replacement value. Otherwise, the child
list is empty.
<p>DOM Level 3 does not support editing <code>Entity</code> nodes; if a
user wants to make changes to the contents of an <code>Entity</code>,
every related <code>EntityReference</code> node has to be replaced in the
structure model by a clone of the <code>Entity</code>'s contents, and
then the desired changes must be made to each of those clones instead.
<code>Entity</code> nodes and all their descendants are readonly.
<p>An <code>Entity</code> node does not have any parent.
<p ><b>Note:</b> If the entity contains an unbound namespace prefix, the
<code>namespaceURI</code> of the corresponding node in the
<code>Entity</code> node subtree is <code>null</code>. The same is true
for <code>EntityReference</code> nodes that refer to this entity, when
they are created using the <code>createEntityReference</code> method of
the <code>Document</code> interface.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1791106 // <generalisation>
	relation 1791106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1791106 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 4262018 "getPublicId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The public identifier associated with the entity if specified, and
<code>null</code> otherwise.
"
      end

      operation 4262146 "getSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The system identifier associated with the entity if specified, and
<code>null</code> otherwise. This may be an absolute URI or not.
"
      end

      operation 4262274 "getNotationName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For unparsed entities, the name of the notation for the entity. For
parsed entities, this is <code>null</code>.
"
      end

      operation 4262402 "getInputEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying the encoding used for this entity at the time
of parsing, when it is an external parsed entity. This is
<code>null</code> if it an entity from the internal subset or if it
is not known.
@since DOM Level 3
"
      end

      operation 4262530 "getXmlEncoding"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying, as part of the text declaration, the encoding
of this entity, when it is an external parsed entity. This is
<code>null</code> otherwise.
@since DOM Level 3
"
      end

      operation 4262658 "getXmlVersion"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An attribute specifying, as part of the text declaration, the version
number of this entity, when it is an external parsed entity. This is
<code>null</code> otherwise.
@since DOM Level 3
"
      end
    end

    class 651138 "Notation"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents a notation declared in the DTD. A notation either
declares, by name, the format of an unparsed entity (see <a href='http://www.w3.org/TR/2004/REC-xml-20040204#Notations'>section 4.7</a> of the XML 1.0 specification [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]), or is
used for formal declaration of processing instruction targets (see <a href='http://www.w3.org/TR/2004/REC-xml-20040204#sec-pi'>section 2.6</a> of the XML 1.0 specification [<a href='http://www.w3.org/TR/2004/REC-xml-20040204'>XML 1.0</a>]). The
<code>nodeName</code> attribute inherited from <code>Node</code> is set
to the declared name of the notation.
<p>The DOM Core does not support editing <code>Notation</code> nodes; they
are therefore readonly.
<p>A <code>Notation</code> node does not have any parent.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
"
      classrelation 1793666 // <generalisation>
	relation 1793666 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1793666 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 4267522 "getPublicId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The public identifier of this notation. If the public identifier was
not specified, this is <code>null</code>.
"
      end

      operation 4267650 "getSystemId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The system identifier of this notation. If the system identifier was
not specified, this is <code>null</code>. This may be an absolute URI
or not.
"
      end
    end

    class 658562 "DOMStringList"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The <code>DOMStringList</code> interface provides the abstraction of an
ordered collection of <code>DOMString</code> values, without defining or
constraining how this collection is implemented. The items in the
<code>DOMStringList</code> are accessible via an integral index, starting
from 0.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      operation 4308226 "item"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the <code>index</code>th item in the collection. If
<code>index</code> is greater than or equal to the number of
<code>DOMString</code>s in the list, this returns <code>null</code>.
@param index Index into the collection.
@return  The <code>DOMString</code> at the <code>index</code>th
  position in the <code>DOMStringList</code>, or <code>null</code> if
  that is not a valid index.
"
      end

      operation 4308354 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The number of <code>DOMString</code>s in the list. The range of valid
child node indices is 0 to <code>length-1</code> inclusive.
"
      end

      operation 4308482 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Test if a string is part of this <code>DOMStringList</code>.
@param str  The string to look for.
@return  <code>true</code> if the string has been found,
  <code>false</code> otherwise.
"
      end
    end

    class 659458 "DOMError"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DOMError</code> is an interface that describes an error.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      attribute 904834 "SEVERITY_WARNING"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " ErrorSeverity

The severity of the error described by the <code>DOMError</code> is
warning. A <code>SEVERITY_WARNING</code> will not cause the
processing to stop, unless <code>DOMErrorHandler.handleError()</code>
returns <code>false</code>.

"
      end

      attribute 904962 "SEVERITY_ERROR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The severity of the error described by the <code>DOMError</code> is
error. A <code>SEVERITY_ERROR</code> may not cause the processing to
stop if the error can be recovered, unless
<code>DOMErrorHandler.handleError()</code> returns <code>false</code>.

"
      end

      attribute 905090 "SEVERITY_FATAL_ERROR"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The severity of the error described by the <code>DOMError</code> is
fatal error. A <code>SEVERITY_FATAL_ERROR</code> will cause the
normal processing to stop. The return value of
<code>DOMErrorHandler.handleError()</code> is ignored unless the
implementation chooses to continue, in which case the behavior
becomes undefined.

"
      end

      operation 4280834 "getSeverity"
	public explicit_return_type "short"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The severity of the error, either <code>SEVERITY_WARNING</code>,
<code>SEVERITY_ERROR</code>, or <code>SEVERITY_FATAL_ERROR</code>.
"
      end

      operation 4280962 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "An implementation specific string describing the error that occurred.
"
      end

      operation 4281090 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A <code>DOMString</code> indicating which related data is expected in
<code>relatedData</code>. Users should refer to the specification of
the error in order to find its <code>DOMString</code> type and
<code>relatedData</code> definitions if any.
<p ><b>Note:</b>  As an example,
<code>Document.normalizeDocument()</code> does generate warnings when
the \"split-cdata-sections\" parameter is in use. Therefore, the method
generates a <code>SEVERITY_WARNING</code> with <code>type</code>
<code>\"cdata-sections-splitted\"</code> and the first
<code>CDATASection</code> node in document order resulting from the
split is returned by the <code>relatedData</code> attribute.
"
      end

      operation 4281218 "getRelatedException"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The related platform dependent exception if any.
"
      end

      operation 4281346 "getRelatedData"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The related <code>DOMError.type</code> dependent data if any.
"
      end

      operation 4281474 "getLocation"
	public return_type class_ref 659586 // DOMLocator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The location of the error.
"
      end
    end

    class 659586 "DOMLocator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>DOMLocator</code> is an interface that describes a location (e.g.
where an error occurred).
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      operation 4289026 "getLineNumber"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The line number this locator is pointing to, or <code>-1</code> if
there is no column number available.
"
      end

      operation 4289154 "getColumnNumber"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The column number this locator is pointing to, or <code>-1</code> if
there is no column number available.
"
      end

      operation 4289282 "getByteOffset"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The byte offset into the input source this locator is pointing to or
<code>-1</code> if there is no byte offset available.
"
      end

      operation 4289410 "getUtf16Offset"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The UTF-16, as defined in [Unicode] and Amendment 1 of [ISO/IEC 10646], offset into the input source this locator is pointing to or
<code>-1</code> if there is no UTF-16 offset available.
"
      end

      operation 4289538 "getRelatedNode"
	public return_type class_ref 317570 // Node
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The node this locator is pointing to, or <code>null</code> if no node
is available.
"
      end

      operation 4289666 "getUri"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The URI this locator is pointing to, or <code>null</code> if no URI is
available.
"
      end
    end

    class 660098 "DOMImplementationList"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The <code>DOMImplementationList</code> interface provides the abstraction
of an ordered collection of DOM implementations, without defining or
constraining how this collection is implemented. The items in the
<code>DOMImplementationList</code> are accessible via an integral index,
starting from 0.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      operation 4282882 "item"
	public return_type class_ref 636674 // DOMImplementation
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the <code>index</code>th item in the collection. If
<code>index</code> is greater than or equal to the number of
<code>DOMImplementation</code>s in the list, this returns
<code>null</code>.
@param index Index into the collection.
@return  The <code>DOMImplementation</code> at the <code>index</code>
  th position in the <code>DOMImplementationList</code>, or
  <code>null</code> if that is not a valid index.
"
      end

      operation 4283010 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The number of <code>DOMImplementation</code>s in the list. The range
of valid child node indices is 0 to <code>length-1</code> inclusive.
"
      end
    end

    class 660354 "DOMImplementationSource"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface permits a DOM implementer to supply one or more
implementations, based upon requested features and versions, as specified
in <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMFeatures'>DOM
Features</a>. Each implemented <code>DOMImplementationSource</code> object is
listed in the binding-specific list of available sources so that its
<code>DOMImplementation</code> objects are made available.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      operation 4283650 "getDOMImplementation"
	public return_type class_ref 636674 // DOMImplementation
	nparams 1
	  param inout name "features" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " A method to request the first DOM implementation that supports the
specified features.
@param features  A string that specifies which features and versions
  are required. This is a space separated list in which each feature
  is specified by its name optionally followed by a space and a
  version number.  This method returns the first item of the list
  returned by <code>getDOMImplementationList</code>.  As an example,
  the string <code>\"XML 3.0 Traversal +Events 2.0\"</code> will
  request a DOM implementation that supports the module \"XML\" for its
  3.0 version, a module that support of the \"Traversal\" module for
  any version, and the module \"Events\" for its 2.0 version. The
  module \"Events\" must be accessible using the method
  <code>Node.getFeature()</code> and
  <code>DOMImplementation.getFeature()</code>.
@return The first DOM implementation that support the desired
  features, or <code>null</code> if this source has none.
"
      end

      operation 4283778 "getDOMImplementationList"
	public return_type class_ref 660098 // DOMImplementationList
	nparams 1
	  param inout name "features" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A method to request a list of DOM implementations that support the
specified features and versions, as specified in .
@param features A string that specifies which features and versions
  are required. This is a space separated list in which each feature
  is specified by its name optionally followed by a space and a
  version number. This is something like: \"XML 3.0 Traversal +Events
  2.0\"
@return A list of DOM implementations that support the desired
  features.
"
      end
    end

    class 662018 "DOMErrorHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " <code>DOMErrorHandler</code> is a callback interface that the DOM
implementation can call when reporting errors that happens while
processing XML data, or when doing some other processing (e.g. validating
a document). A <code>DOMErrorHandler</code> object can be attached to a
<code>Document</code> using the \"error-handler\" on the
<code>DOMConfiguration</code> interface. If more than one error needs to
be reported during an operation, the sequence and numbers of the errors
passed to the error handler are implementation dependent.
<p> The application that is using the DOM implementation is expected to
implement this interface.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      operation 5049858 "handleError"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "error" type class_ref 659458 // DOMError
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called on the error handler when an error occurs.
<br> If an exception is thrown from this method, it is considered to be
equivalent of returning <code>true</code>.
@param error  The error object that describes the error. This object
  may be reused by the DOM implementation across multiple calls to
  the <code>handleError</code> method.
@return  If the <code>handleError</code> method returns
  <code>false</code>, the DOM implementation should stop the current
  processing when possible. If the method returns <code>true</code>,
  the processing may continue depending on
  <code>DOMError.severity</code>.
"
      end
    end

    class 1479554 "NameList"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " The <code>NameList</code> interface provides the abstraction of an ordered
collection of parallel pairs of name and namespace values (which could be
null values), without defining or constraining how this collection is
implemented. The items in the <code>NameList</code> are accessible via an
integral index, starting from 0.
<p>See also the <a href='http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407'>Document Object Model (DOM) Level 3 Core Specification</a>.
@since DOM Level 3
"
      operation 12450306 "getName"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the <code>index</code>th name item in the collection.
@param index Index into the collection.
@return  The name at the <code>index</code>th position in the
  <code>NameList</code>, or <code>null</code> if there is no name for
  the specified index or if the index is out of range.
"
      end

      operation 12450434 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the <code>index</code>th namespaceURI item in the collection.
@param index Index into the collection.
@return  The namespace URI at the <code>index</code>th position in the
  <code>NameList</code>, or <code>null</code> if there is no name for
  the specified index or if the index is out of range.
"
      end

      operation 12450562 "getLength"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The number of pairs (name and namespaceURI) in the list. The range of
valid child node indices is 0 to <code>length-1</code> inclusive.
"
      end

      operation 12450690 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Test if a name is part of this <code>NameList</code>.
@param str  The name to look for.
@return  <code>true</code> if the name has been found,
  <code>false</code> otherwise.
"
      end

      operation 12450818 "containsNS"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "namespaceURI" type class_ref 128130 // String
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Test if the pair namespaceURI/name is part of this
<code>NameList</code>.
@param namespaceURI  The namespace URI to look for.
@param name  The name to look for.
@return  <code>true</code> if the pair namespaceURI/name has been
  found, <code>false</code> otherwise.
"
      end
    end
  end

  package_ref 162178 // traversal

  deploymentview 153602 "dom"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 445954 "NamedNodeMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 327042 // NamedNodeMap
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 446338 "Node"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 317570 // Node
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 446466 "NodeList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 333058 // NodeList
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 446850 "Attr"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 648066 // Attr
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 446978 "TypeInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 648322 // TypeInfo
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 447618 "CharacterData"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 648962 // CharacterData
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 447746 "Text"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 649090 // Text
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 448002 "CDATASection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 649218 // CDATASection
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 448258 "Comment"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 649474 // Comment
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 448642 "Document"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 378626 // Document
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 448898 "DOMImplementation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 636674 // DOMImplementation
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 450690 "DocumentType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 649986 // DocumentType
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 451586 "Element"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 648194 // Element
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 452226 "Entity"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 651010 // Entity
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 452610 "EntityReference"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 650370 // EntityReference
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 452994 "Notation"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 651138 // Notation
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 453378 "ProcessingInstruction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 650242 // ProcessingInstruction
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 453890 "DocumentFragment"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 650114 // DocumentFragment
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 454530 "DOMConfiguration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 650498 // DOMConfiguration
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 454786 "DOMError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 659458 // DOMError
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 455042 "DOMImplementationList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 660098 // DOMImplementationList
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 455298 "DOMImplementationSource"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 660354 // DOMImplementationSource
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 455810 "DOMLocator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 659586 // DOMLocator
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 456834 "DOMStringList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 658562 // DOMStringList
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 510722 "DOMErrorHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 662018 // DOMErrorHandler
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 520450 "DOMException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 646658 // DOMException
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 1088386 "NameList"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1479554 // NameList
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end

    artifact 1088514 "UserDataHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 647298 // UserDataHandler
      end
      comment "ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2004 World Wide Web Consortium,

(Massachusetts Institute of Technology, European Research Consortium for
Informatics and Mathematics, Keio University). All Rights Reserved. This
work is distributed under the W3C(r) Software License [1] in the hope that
it will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

[1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
"
    end
  end

  package_ref 166914 // events

  package_ref 167042 // ls

  package_ref 167298 // ranges

  package_ref 177154 // xpath

  package_ref 191106 // bootstrap

  package_ref 191234 // css

  package_ref 191362 // stylesheets

  package_ref 191490 // views

  package_ref 191618 // html
end
