class BaseRowSet
!!!10342658.java!!!	BaseRowSet()
        // allocate the listeners collection
        listeners = new Vector<RowSetListener>();
!!!10342786.java!!!	initParams() : void
        params = new Hashtable<Integer, Object>();
!!!10342914.java!!!	addRowSetListener(inout listener : RowSetListener) : void
        listeners.add(listener);
!!!10343042.java!!!	removeRowSetListener(inout listener : RowSetListener) : void
        listeners.remove(listener);
!!!10343170.java!!!	checkforRowSetInterface() : void
        if ((this instanceof javax.sql.RowSet) == false) {
            throw new SQLException("The class extending abstract class BaseRowSet " +
                "must implement javax.sql.RowSet or one of it's sub-interfaces.");
        }
!!!10343298.java!!!	notifyCursorMoved() : void
        checkforRowSetInterface();
        if (listeners.isEmpty() == false) {
            RowSetEvent event = new RowSetEvent((RowSet)this);
            for (RowSetListener rsl : listeners) {
                rsl.cursorMoved(event);
            }
        }
!!!10343426.java!!!	notifyRowChanged() : void
        checkforRowSetInterface();
        if (listeners.isEmpty() == false) {
                RowSetEvent event = new RowSetEvent((RowSet)this);
                for (RowSetListener rsl : listeners) {
                    rsl.rowChanged(event);
                }
        }
!!!10343554.java!!!	notifyRowSetChanged() : void
        checkforRowSetInterface();
        if (listeners.isEmpty() == false) {
                RowSetEvent event = new RowSetEvent((RowSet)this);
                for (RowSetListener rsl : listeners) {
                    rsl.rowSetChanged(event);
                }
        }
!!!10343682.java!!!	getCommand() : String
        return command;
!!!10343810.java!!!	setCommand(inout cmd : String) : void
        // cmd equal to null or
        // cmd with length 0 (implies url =="")
        // are not independent events.

        if(cmd == null) {
           command = null;
        } else if (cmd.length() == 0) {
            throw new SQLException("Invalid command string detected. " +
            "Cannot be of length less than 0");
        } else {
            // "unbind" any parameters from any previous command.
            if(params == null){
                 throw new SQLException("Set initParams() before setCommand");
            }
            params.clear();
            command = cmd;
        }

!!!10343938.java!!!	getUrl() : String
        return URL;
!!!10344066.java!!!	setUrl(inout url : String) : void
        if(url == null) {
           url = null;
        } else if (url.length() < 1) {
            throw new SQLException("Invalid url string detected. " +
            "Cannot be of length less than 1");
        } else {
            URL = url;
        }

        dataSource = null;

!!!10344194.java!!!	getDataSourceName() : String
        return dataSource;
!!!10344322.java!!!	setDataSourceName(inout name : String) : void

        if (name == null) {
            dataSource = null;
        } else if (name.equals("")) {
           throw new SQLException("DataSource name cannot be empty string");
        } else {
           dataSource = name;
        }

        URL = null;
!!!10344450.java!!!	getUsername() : String
        return username;
!!!10344578.java!!!	setUsername(inout name : String) : void
        if(name == null)
        {
           username = null;
        } else {
           username = name;
        }
!!!10344706.java!!!	getPassword() : String
        return password;
!!!10344834.java!!!	setPassword(inout pass : String) : void
        if(pass == null)
        {
           password = null;
        } else {
           password = pass;
        }
!!!10344962.java!!!	setType(in type : int) : void

        if ((type != ResultSet.TYPE_FORWARD_ONLY) &&
           (type != ResultSet.TYPE_SCROLL_INSENSITIVE) &&
           (type != ResultSet.TYPE_SCROLL_SENSITIVE)) {
                throw new SQLException("Invalid type of RowSet set. Must be either " +
                "ResultSet.TYPE_FORWARD_ONLY or ResultSet.TYPE_SCROLL_INSENSITIVE " +
                "or ResultSet.TYPE_SCROLL_SENSITIVE.");
        }
        this.rowSetType = type;
!!!10345090.java!!!	getType() : int
        return rowSetType;
!!!10345218.java!!!	setConcurrency(in concurrency : int) : void

        if((concurrency != ResultSet.CONCUR_READ_ONLY) &&
           (concurrency != ResultSet.CONCUR_UPDATABLE)) {
                throw new SQLException("Invalid concurrency set. Must be either " +
                "ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE.");
        }
        this.concurrency = concurrency;
!!!10345346.java!!!	isReadOnly() : boolean
        return readOnly;
!!!10345474.java!!!	setReadOnly(inout value : boolean) : void
        readOnly = value;
!!!10345602.java!!!	getTransactionIsolation() : int
        return isolation;
!!!10345730.java!!!	setTransactionIsolation(in level : int) : void
        if ((level != Connection.TRANSACTION_NONE) &&
           (level != Connection.TRANSACTION_READ_COMMITTED) &&
           (level != Connection.TRANSACTION_READ_UNCOMMITTED) &&
           (level != Connection.TRANSACTION_REPEATABLE_READ) &&
           (level != Connection.TRANSACTION_SERIALIZABLE))
            {
                throw new SQLException("Invalid transaction isolation set. Must " +
                "be either " +
                "Connection.TRANSACTION_NONE or " +
                "Connection.TRANSACTION_READ_UNCOMMITTED or " +
                "Connection.TRANSACTION_READ_COMMITTED or " +
                "Connection.RRANSACTION_REPEATABLE_READ or " +
                "Connection.TRANSACTION_SERIALIZABLE");
            }
        this.isolation = level;
!!!10345858.java!!!	getTypeMap() : Map
        return map;
!!!10345986.java!!!	setTypeMap(inout map : Map) : void
        this.map = map;
!!!10346114.java!!!	getMaxFieldSize() : int
        return maxFieldSize;
!!!10346242.java!!!	setMaxFieldSize(in max : int) : void
        if (max < 0) {
            throw new SQLException("Invalid max field size set. Cannot be of " +
            "value: " + max);
        }
        maxFieldSize = max;
!!!10346370.java!!!	getMaxRows() : int
        return maxRows;
!!!10346498.java!!!	setMaxRows(in max : int) : void
        if (max < 0) {
            throw new SQLException("Invalid max row size set. Cannot be of " +
                "value: " + max);
        } else if (max < this.getFetchSize()) {
            throw new SQLException("Invalid max row size set. Cannot be less " +
                "than the fetchSize.");
        }
        this.maxRows = max;
!!!10346626.java!!!	setEscapeProcessing(inout enable : boolean) : void
        escapeProcessing = enable;
!!!10346754.java!!!	getQueryTimeout() : int
        return queryTimeout;
!!!10346882.java!!!	setQueryTimeout(in seconds : int) : void
        if (seconds < 0) {
            throw new SQLException("Invalid query timeout value set. Cannot be " +
            "of value: " + seconds);
        }
        this.queryTimeout = seconds;
!!!10347010.java!!!	getShowDeleted() : boolean
        return showDeleted;
!!!10347138.java!!!	setShowDeleted(inout value : boolean) : void
        showDeleted = value;
!!!10347266.java!!!	getEscapeProcessing() : boolean
        return escapeProcessing;
!!!10347394.java!!!	setFetchDirection(in direction : int) : void
        // Changed the condition checking to the below as there were two
        // conditions that had to be checked
        // 1. RowSet is TYPE_FORWARD_ONLY and direction is not FETCH_FORWARD
        // 2. Direction is not one of the valid values

        if (((getType() == ResultSet.TYPE_FORWARD_ONLY) && (direction != ResultSet.FETCH_FORWARD)) ||
            ((direction != ResultSet.FETCH_FORWARD) &&
            (direction != ResultSet.FETCH_REVERSE) &&
            (direction != ResultSet.FETCH_UNKNOWN))) {
            throw new SQLException("Invalid Fetch Direction");
        }
        fetchDir = direction;
!!!10347522.java!!!	getFetchDirection() : int

        //Added the following code to throw a
        //SQL Exception if the fetchDir is not
        //set properly.Bug id:4914155

        // This checking is not necessary!

        /*
         if((fetchDir != ResultSet.FETCH_FORWARD) &&
           (fetchDir != ResultSet.FETCH_REVERSE) &&
           (fetchDir != ResultSet.FETCH_UNKNOWN)) {
            throw new SQLException("Fetch Direction Invalid");
         }
         */
        return (fetchDir);
!!!10347650.java!!!	setFetchSize(in rows : int) : void
        //Added this checking as maxRows can be 0 when this function is called
        //maxRows = 0 means rowset can hold any number of rows, os this checking
        // is needed to take care of this condition.
        if (getMaxRows() == 0 && rows >= 0)  {
            fetchSize = rows;
            return;
        }
        if ((rows < 0) || (rows > getMaxRows())) {
            throw new SQLException("Invalid fetch size set. Cannot be of " +
            "value: " + rows);
        }
        fetchSize = rows;
!!!10347778.java!!!	getFetchSize() : int
        return fetchSize;
!!!10347906.java!!!	getConcurrency() : int
        return concurrency;
!!!10348034.java!!!	checkParamIndex(in idx : int) : void
        if ((idx < 1)) {
            throw new SQLException("Invalid Parameter Index");
        }
!!!10348162.java!!!	setNull(in parameterIndex : int, in sqlType : int) : void
        Object nullVal[];
        checkParamIndex(parameterIndex);

        nullVal = new Object[2];
        nullVal[0] = null;
        nullVal[1] = Integer.valueOf(sqlType);

       if (params == null){
            throw new SQLException("Set initParams() before setNull");
       }

        params.put(Integer.valueOf(parameterIndex - 1), nullVal);
!!!10348290.java!!!	setNull(in parameterIndex : int, in sqlType : int, inout typeName : String) : void

        Object nullVal[];
        checkParamIndex(parameterIndex);

        nullVal = new Object[3];
        nullVal[0] = null;
        nullVal[1] = Integer.valueOf(sqlType);
        nullVal[2] = typeName;

       if(params == null){
            throw new SQLException("Set initParams() before setNull");
       }

        params.put(Integer.valueOf(parameterIndex - 1), nullVal);
!!!10348418.java!!!	setBoolean(in parameterIndex : int, inout x : boolean) : void
        checkParamIndex(parameterIndex);

       if(params == null){
            throw new SQLException("Set initParams() before setNull");
       }

        params.put(Integer.valueOf(parameterIndex - 1), Boolean.valueOf(x));
!!!10348546.java!!!	setByte(in parameterIndex : int, in x : byte) : void
        checkParamIndex(parameterIndex);

       if(params == null){
            throw new SQLException("Set initParams() before setByte");
       }

        params.put(Integer.valueOf(parameterIndex - 1), Byte.valueOf(x));
!!!10348674.java!!!	setShort(in parameterIndex : int, in x : short) : void
        checkParamIndex(parameterIndex);

        if(params == null){
             throw new SQLException("Set initParams() before setShort");
        }

        params.put(Integer.valueOf(parameterIndex - 1), Short.valueOf(x));
!!!10348802.java!!!	setInt(in parameterIndex : int, in x : int) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setInt");
        }
        params.put(Integer.valueOf(parameterIndex - 1), Integer.valueOf(x));
!!!10348930.java!!!	setLong(in parameterIndex : int, in x : long) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setLong");
        }
        params.put(Integer.valueOf(parameterIndex - 1), Long.valueOf(x));
!!!10349058.java!!!	setFloat(in parameterIndex : int, in x : float) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setFloat");
        }
        params.put(Integer.valueOf(parameterIndex - 1), Float.valueOf(x));
!!!10349186.java!!!	setDouble(in parameterIndex : int, in x : double) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setDouble");
        }
        params.put(Integer.valueOf(parameterIndex - 1), Double.valueOf(x));
!!!10349314.java!!!	setBigDecimal(in parameterIndex : int, inout x : BigDecimal) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setBigDecimal");
        }
        params.put(Integer.valueOf(parameterIndex - 1), x);
!!!10349442.java!!!	setString(in parameterIndex : int, inout x : String) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setString");
        }
        params.put(Integer.valueOf(parameterIndex - 1), x);
!!!10349570.java!!!	setBytes(in parameterIndex : int, inout x : byte [[]]) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setBytes");
        }
        params.put(Integer.valueOf(parameterIndex - 1), x);
!!!10349698.java!!!	setDate(in parameterIndex : int, inout x : Date) : void
        checkParamIndex(parameterIndex);

        if(params == null){
             throw new SQLException("Set initParams() before setDate");
        }
        params.put(Integer.valueOf(parameterIndex - 1), x);
!!!10349826.java!!!	setTime(in parameterIndex : int, inout x : Time) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setTime");
        }

        params.put(Integer.valueOf(parameterIndex - 1), x);
!!!10349954.java!!!	setTimestamp(in parameterIndex : int, inout x : Timestamp) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setTimestamp");
        }

        params.put(Integer.valueOf(parameterIndex - 1), x);
!!!10350082.java!!!	setAsciiStream(in parameterIndex : int, inout x : InputStream, in length : int) : void
        Object asciiStream[];
        checkParamIndex(parameterIndex);

        asciiStream = new Object[3];
        asciiStream[0] = x;
        asciiStream[1] = Integer.valueOf(length);
        asciiStream[2] = Integer.valueOf(ASCII_STREAM_PARAM);

        if(params == null){
             throw new SQLException("Set initParams() before setAsciiStream");
        }

        params.put(Integer.valueOf(parameterIndex - 1), asciiStream);
!!!10350210.java!!!	setAsciiStream(in parameterIndex : int, inout x : InputStream) : void
      throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10350338.java!!!	setBinaryStream(in parameterIndex : int, inout x : InputStream, in length : int) : void
        Object binaryStream[];
        checkParamIndex(parameterIndex);

        binaryStream = new Object[3];
        binaryStream[0] = x;
        binaryStream[1] = Integer.valueOf(length);
        binaryStream[2] = Integer.valueOf(BINARY_STREAM_PARAM);
        if(params == null){
             throw new SQLException("Set initParams() before setBinaryStream");
        }

        params.put(Integer.valueOf(parameterIndex - 1), binaryStream);
!!!10350466.java!!!	setBinaryStream(in parameterIndex : int, inout x : InputStream) : void
      throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10350594.java!!!	setUnicodeStream(in parameterIndex : int, inout x : InputStream, in length : int) : void
        Object unicodeStream[];
        checkParamIndex(parameterIndex);

        unicodeStream = new Object[3];
        unicodeStream[0] = x;
        unicodeStream[1] = Integer.valueOf(length);
        unicodeStream[2] = Integer.valueOf(UNICODE_STREAM_PARAM);
        if(params == null){
             throw new SQLException("Set initParams() before setUnicodeStream");
        }
        params.put(Integer.valueOf(parameterIndex - 1), unicodeStream);
!!!10350722.java!!!	setCharacterStream(in parameterIndex : int, inout reader : Reader, in length : int) : void
        Object charStream[];
        checkParamIndex(parameterIndex);

        charStream = new Object[2];
        charStream[0] = reader;
        charStream[1] = Integer.valueOf(length);
        if(params == null){
             throw new SQLException("Set initParams() before setCharacterStream");
        }
        params.put(Integer.valueOf(parameterIndex - 1), charStream);
!!!10350850.java!!!	setCharacterStream(in parameterIndex : int, inout reader : Reader) : void
      throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10350978.java!!!	setObject(in parameterIndex : int, inout x : Object, in targetSqlType : int, in scale : int) : void
        Object obj[];
        checkParamIndex(parameterIndex);

        obj = new Object[3];
        obj[0] = x;
        obj[1] = Integer.valueOf(targetSqlType);
        obj[2] = Integer.valueOf(scale);
        if(params == null){
             throw new SQLException("Set initParams() before setObject");
        }
        params.put(Integer.valueOf(parameterIndex - 1), obj);
!!!10351106.java!!!	setObject(in parameterIndex : int, inout x : Object, in targetSqlType : int) : void
        Object obj[];
        checkParamIndex(parameterIndex);

        obj = new Object[2];
        obj[0] = x;
        obj[1] = Integer.valueOf(targetSqlType);
        if (params == null){
             throw new SQLException("Set initParams() before setObject");
        }
        params.put(Integer.valueOf(parameterIndex - 1), obj);
!!!10351234.java!!!	setObject(in parameterIndex : int, inout x : Object) : void
        checkParamIndex(parameterIndex);
        if (params == null) {
             throw new SQLException("Set initParams() before setObject");
        }
        params.put(Integer.valueOf(parameterIndex - 1), x);
!!!10351362.java!!!	setRef(in parameterIndex : int, inout ref : Ref) : void
        checkParamIndex(parameterIndex);
        if (params == null) {
             throw new SQLException("Set initParams() before setRef");
        }
        params.put(Integer.valueOf(parameterIndex - 1), new SerialRef(ref));
!!!10351490.java!!!	setBlob(in parameterIndex : int, inout x : Blob) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setBlob");
        }
        params.put(Integer.valueOf(parameterIndex - 1), new SerialBlob(x));
!!!10351618.java!!!	setClob(in parameterIndex : int, inout x : Clob) : void
        checkParamIndex(parameterIndex);
        if(params == null){
             throw new SQLException("Set initParams() before setClob");
        }
        params.put(Integer.valueOf(parameterIndex - 1), new SerialClob(x));
!!!10351746.java!!!	setArray(in parameterIndex : int, inout array : Array) : void
        checkParamIndex(parameterIndex);
        if (params == null){
             throw new SQLException("Set initParams() before setArray");
        }
        params.put(Integer.valueOf(parameterIndex - 1), new SerialArray(array));
!!!10351874.java!!!	setDate(in parameterIndex : int, inout x : Date, inout cal : Calendar) : void
        Object date[];
        checkParamIndex(parameterIndex);

        date = new Object[2];
        date[0] = x;
        date[1] = cal;
        if(params == null){
             throw new SQLException("Set initParams() before setDate");
        }
        params.put(Integer.valueOf(parameterIndex - 1), date);
!!!10352002.java!!!	setTime(in parameterIndex : int, inout x : Time, inout cal : Calendar) : void
        Object time[];
        checkParamIndex(parameterIndex);

        time = new Object[2];
        time[0] = x;
        time[1] = cal;
        if(params == null){
             throw new SQLException("Set initParams() before setTime");
        }
        params.put(Integer.valueOf(parameterIndex - 1), time);
!!!10352130.java!!!	setTimestamp(in parameterIndex : int, inout x : Timestamp, inout cal : Calendar) : void
        Object timestamp[];
        checkParamIndex(parameterIndex);

        timestamp = new Object[2];
        timestamp[0] = x;
        timestamp[1] = cal;
        if(params == null){
             throw new SQLException("Set initParams() before setTimestamp");
        }
        params.put(Integer.valueOf(parameterIndex - 1), timestamp);
!!!10352258.java!!!	clearParameters() : void
        params.clear();
!!!10352386.java!!!	getParams() : Object
        if (params == null) {

            initParams();
            Object [] paramsArray = new Object[params.size()];
            return paramsArray;

        } else {
            // The parameters may be set in random order
            // but all must be set, check to verify all
            // have been set till the last parameter
            // else throw exception.

            Object[] paramsArray = new Object[params.size()];
            for (int i = 0; i < params.size(); i++) {
               paramsArray[i] = params.get(Integer.valueOf(i));
               if (paramsArray[i] == null) {
                 throw new SQLException("missing parameter: " + (i + 1));
               } //end if
            } //end for
            return paramsArray;

        } //end if

!!!10352514.java!!!	setNull(inout parameterName : String, in sqlType : int) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10352642.java!!!	setNull(inout parameterName : String, in sqlType : int, inout typeName : String) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10352770.java!!!	setBoolean(inout parameterName : String, inout x : boolean) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10352898.java!!!	setByte(inout parameterName : String, in x : byte) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10353026.java!!!	setShort(inout parameterName : String, in x : short) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10353154.java!!!	setInt(inout parameterName : String, in x : int) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10353282.java!!!	setLong(inout parameterName : String, in x : long) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10353410.java!!!	setFloat(inout parameterName : String, in x : float) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10353538.java!!!	setDouble(inout parameterName : String, in x : double) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10353666.java!!!	setBigDecimal(inout parameterName : String, inout x : BigDecimal) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10353794.java!!!	setString(inout parameterName : String, inout x : String) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10353922.java!!!	setBytes(inout parameterName : String, inout x : byte [[]]) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10354050.java!!!	setTimestamp(inout parameterName : String, inout x : Timestamp) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10354178.java!!!	setAsciiStream(inout parameterName : String, inout x : InputStream, in length : int) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10354306.java!!!	setBinaryStream(inout parameterName : String, inout x : InputStream, in length : int) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10354434.java!!!	setCharacterStream(inout parameterName : String, inout reader : Reader, in length : int) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10354562.java!!!	setAsciiStream(inout parameterName : String, inout x : InputStream) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10354690.java!!!	setBinaryStream(inout parameterName : String, inout x : InputStream) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10354818.java!!!	setCharacterStream(inout parameterName : String, inout reader : Reader) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10354946.java!!!	setNCharacterStream(in parameterIndex : int, inout value : Reader) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10355074.java!!!	setObject(inout parameterName : String, inout x : Object, in targetSqlType : int, in scale : int) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10355202.java!!!	setObject(inout parameterName : String, inout x : Object, in targetSqlType : int) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10355330.java!!!	setObject(inout parameterName : String, inout x : Object) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10355458.java!!!	setBlob(in parameterIndex : int, inout inputStream : InputStream, in length : long) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10355586.java!!!	setBlob(in parameterIndex : int, inout inputStream : InputStream) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10355714.java!!!	setBlob(inout parameterName : String, inout inputStream : InputStream, in length : long) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10355842.java!!!	setBlob(inout parameterName : String, inout x : Blob) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10355970.java!!!	setBlob(inout parameterName : String, inout inputStream : InputStream) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10356098.java!!!	setClob(in parameterIndex : int, inout reader : Reader, in length : long) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10356226.java!!!	setClob(in parameterIndex : int, inout reader : Reader) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10356354.java!!!	setClob(inout parameterName : String, inout reader : Reader, in length : long) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10356482.java!!!	setClob(inout parameterName : String, inout x : Clob) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10356610.java!!!	setClob(inout parameterName : String, inout reader : Reader) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10356738.java!!!	setDate(inout parameterName : String, inout x : Date) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10356866.java!!!	setDate(inout parameterName : String, inout x : Date, inout cal : Calendar) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10356994.java!!!	setTime(inout parameterName : String, inout x : Time) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10357122.java!!!	setTime(inout parameterName : String, inout x : Time, inout cal : Calendar) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10357250.java!!!	setTimestamp(inout parameterName : String, inout x : Timestamp, inout cal : Calendar) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10357378.java!!!	setSQLXML(in parameterIndex : int, inout xmlObject : SQLXML) : void
     throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10357506.java!!!	setSQLXML(inout parameterName : String, inout xmlObject : SQLXML) : void
     throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10357634.java!!!	setRowId(in parameterIndex : int, inout x : RowId) : void
     throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10357762.java!!!	setRowId(inout parameterName : String, inout x : RowId) : void
     throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10357890.java!!!	setNString(in parameterIndex : int, inout value : String) : void
     throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10358018.java!!!	setNString(inout parameterName : String, inout value : String) : void
     throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10358146.java!!!	setNCharacterStream(in parameterIndex : int, inout value : Reader, in length : long) : void
     throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10358274.java!!!	setNCharacterStream(inout parameterName : String, inout value : Reader, in length : long) : void
     throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10358402.java!!!	setNCharacterStream(inout parameterName : String, inout value : Reader) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10358530.java!!!	setNClob(inout parameterName : String, inout value : NClob) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10358658.java!!!	setNClob(inout parameterName : String, inout reader : Reader, in length : long) : void
       throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10358786.java!!!	setNClob(inout parameterName : String, inout reader : Reader) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10358914.java!!!	setNClob(in parameterIndex : int, inout reader : Reader, in length : long) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10359042.java!!!	setNClob(in parameterIndex : int, inout value : NClob) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10359170.java!!!	setNClob(in parameterIndex : int, inout reader : Reader) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
!!!10359298.java!!!	setURL(in parameterIndex : int, inout x : URL) : void
        throw new SQLFeatureNotSupportedException("Feature not supported");
