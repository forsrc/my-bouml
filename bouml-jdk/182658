format 222
"registry" // jdk1.8::java::rmi::registry
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/rmi/registry/"
  java_package "java.rmi.registry"
  classview 175362 "registry"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1006082 "Registry"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>Registry</code> is a remote interface to a simple remote
object registry that provides methods for storing and retrieving
remote object references bound with arbitrary string names.  The
<code>bind</code>, <code>unbind</code>, and <code>rebind</code>
methods are used to alter the name bindings in the registry, and
the <code>lookup</code> and <code>list</code> methods are used to
query the current name bindings.

<p>In its typical usage, a <code>Registry</code> enables RMI client
bootstrapping: it provides a simple means for a client to obtain an
initial reference to a remote object.  Therefore, a registry's
remote object implementation is typically exported with a
well-known address, such as with a well-known {@link
java.rmi.server.ObjID#REGISTRY_ID ObjID} and TCP port number
(default is {@link #REGISTRY_PORT 1099}).

<p>The {@link LocateRegistry} class provides a programmatic API for
constructing a bootstrap reference to a <code>Registry</code> at a
remote address (see the static <code>getRegistry</code> methods)
and for creating and exporting a <code>Registry</code> in the
current VM on a particular local address (see the static
<code>createRegistry</code> methods).

<p>A <code>Registry</code> implementation may choose to restrict
access to some or all of its methods (for example, methods that
mutate the registry's bindings may be restricted to calls
originating from the local host).  If a <code>Registry</code>
method chooses to deny access for a given invocation, its
implementation may throw {@link java.rmi.AccessException}, which
(because it extends {@link java.rmi.RemoteException}) will be
wrapped in a {@link java.rmi.ServerException} when caught by a
remote client.

<p>The names used for bindings in a <code>Registry</code> are pure
strings, not parsed.  A service which stores its remote reference
in a <code>Registry</code> may wish to use a package name as a
prefix in the name binding to reduce the likelihood of name
collisions in the registry.

@author      Ann Wollrath
@author      Peter Jones
@since       JDK1.1
@see         LocateRegistry
"
      classrelation 3331330 // <generalisation>
	relation 3331330 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3331330 // <generalisation>
	  b parent class_ref 207106 // Remote
      end

      attribute 1836930 "REGISTRY_PORT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1099"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Well known port for registry. 
"
      end

      operation 7897986 "lookup"
	public return_type class_ref 207106 // Remote
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 207234 // RemoteException
	  exception class_ref 1005954 // NotBoundException
	  exception class_ref 1004674 // AccessException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the remote reference bound to the specified
<code>name</code> in this registry.

@param   name the name for the remote reference to look up

@return  a reference to a remote object

@throws  NotBoundException if <code>name</code> is not currently bound

@throws  RemoteException if remote communication with the
registry failed; if exception is a <code>ServerException</code>
containing an <code>AccessException</code>, then the registry
denies the caller access to perform this operation

@throws  AccessException if this registry is local and it denies
the caller access to perform this operation

@throws  NullPointerException if <code>name</code> is <code>null</code>
"
      end

      operation 7898114 "bind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 207106 // Remote
	nexceptions 3
	  exception class_ref 207234 // RemoteException
	  exception class_ref 1004802 // AlreadyBoundException
	  exception class_ref 1004674 // AccessException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Binds a remote reference to the specified <code>name</code> in
this registry.

@param   name the name to associate with the remote reference
@param   obj a reference to a remote object (usually a stub)

@throws  AlreadyBoundException if <code>name</code> is already bound

@throws  RemoteException if remote communication with the
registry failed; if exception is a <code>ServerException</code>
containing an <code>AccessException</code>, then the registry
denies the caller access to perform this operation (if
originating from a non-local host, for example)

@throws  AccessException if this registry is local and it denies
the caller access to perform this operation

@throws  NullPointerException if <code>name</code> is
<code>null</code>, or if <code>obj</code> is <code>null</code>
"
      end

      operation 7898242 "unbind"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 207234 // RemoteException
	  exception class_ref 1005954 // NotBoundException
	  exception class_ref 1004674 // AccessException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the binding for the specified <code>name</code> in
this registry.

@param   name the name of the binding to remove

@throws  NotBoundException if <code>name</code> is not currently bound

@throws  RemoteException if remote communication with the
registry failed; if exception is a <code>ServerException</code>
containing an <code>AccessException</code>, then the registry
denies the caller access to perform this operation (if
originating from a non-local host, for example)

@throws  AccessException if this registry is local and it denies
the caller access to perform this operation

@throws  NullPointerException if <code>name</code> is <code>null</code>
"
      end

      operation 7898370 "rebind"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "obj" type class_ref 207106 // Remote
	nexceptions 2
	  exception class_ref 207234 // RemoteException
	  exception class_ref 1004674 // AccessException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the binding for the specified <code>name</code> in
this registry with the supplied remote reference.  If there is
an existing binding for the specified <code>name</code>, it is
discarded.

@param   name the name to associate with the remote reference
@param   obj a reference to a remote object (usually a stub)

@throws  RemoteException if remote communication with the
registry failed; if exception is a <code>ServerException</code>
containing an <code>AccessException</code>, then the registry
denies the caller access to perform this operation (if
originating from a non-local host, for example)

@throws  AccessException if this registry is local and it denies
the caller access to perform this operation

@throws  NullPointerException if <code>name</code> is
<code>null</code>, or if <code>obj</code> is <code>null</code>
"
      end

      operation 7898498 "list"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 2
	  exception class_ref 207234 // RemoteException
	  exception class_ref 1004674 // AccessException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of the names bound in this registry.  The
array will contain a snapshot of the names bound in this
registry at the time of the given invocation of this method.

@return  an array of the names bound in this registry

@throws  RemoteException if remote communication with the
registry failed; if exception is a <code>ServerException</code>
containing an <code>AccessException</code>, then the registry
denies the caller access to perform this operation

@throws  AccessException if this registry is local and it denies
the caller access to perform this operation
"
      end
    end

    class 1010562 "LocateRegistry"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>LocateRegistry</code> is used to obtain a reference to a bootstrap
remote object registry on a particular host (including the local host), or
to create a remote object registry that accepts calls on a specific port.

<p> Note that a <code>getRegistry</code> call does not actually make a
connection to the remote host.  It simply creates a local reference to
the remote registry and will succeed even if no registry is running on
the remote host.  Therefore, a subsequent method invocation to a remote
registry returned as a result of this method may fail.

@author  Ann Wollrath
@author  Peter Jones
@since   JDK1.1
@see     java.rmi.registry.Registry
"
      operation 7896962 "LocateRegistry"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private constructor to disable public construction.
"
      end

      operation 7897090 "getRegistry"
	class_operation public return_type class_ref 1006082 // Registry
	nparams 0
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the the remote object <code>Registry</code> for
the local host on the default registry port of 1099.

@return reference (a stub) to the remote object registry
@exception RemoteException if the reference could not be created
@since JDK1.1
"
      end

      operation 7897218 "getRegistry"
	class_operation public return_type class_ref 1006082 // Registry
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the the remote object <code>Registry</code> for
the local host on the specified <code>port</code>.

@param port port on which the registry accepts requests
@return reference (a stub) to the remote object registry
@exception RemoteException if the reference could not be created
@since JDK1.1
"
      end

      operation 7897346 "getRegistry"
	class_operation public return_type class_ref 1006082 // Registry
	nparams 1
	  param inout name "host" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the remote object <code>Registry</code> on the
specified <code>host</code> on the default registry port of 1099.  If
<code>host</code> is <code>null</code>, the local host is used.

@param host host for the remote registry
@return reference (a stub) to the remote object registry
@exception RemoteException if the reference could not be created
@since JDK1.1
"
      end

      operation 7897474 "getRegistry"
	class_operation public return_type class_ref 1006082 // Registry
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reference to the remote object <code>Registry</code> on the
specified <code>host</code> and <code>port</code>. If <code>host</code>
is <code>null</code>, the local host is used.

@param host host for the remote registry
@param port port on which the registry accepts requests
@return reference (a stub) to the remote object registry
@exception RemoteException if the reference could not be created
@since JDK1.1
"
      end

      operation 7897602 "getRegistry"
	class_operation public return_type class_ref 1006082 // Registry
	nparams 3
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "csf" type class_ref 504834 // RMIClientSocketFactory
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a locally created remote reference to the remote object
<code>Registry</code> on the specified <code>host</code> and
<code>port</code>.  Communication with this remote registry will
use the supplied <code>RMIClientSocketFactory</code> <code>csf</code>
to create <code>Socket</code> connections to the registry on the
remote <code>host</code> and <code>port</code>.

@param host host for the remote registry
@param port port on which the registry accepts requests
@param csf  client-side <code>Socket</code> factory used to
     make connections to the registry.  If <code>csf</code>
     is null, then the default client-side <code>Socket</code>
     factory will be used in the registry stub.
@return reference (a stub) to the remote registry
@exception RemoteException if the reference could not be created
@since 1.2
"
      end

      operation 7897730 "createRegistry"
	class_operation public return_type class_ref 1006082 // Registry
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and exports a <code>Registry</code> instance on the local
host that accepts requests on the specified <code>port</code>.

<p>The <code>Registry</code> instance is exported as if the static
{@link UnicastRemoteObject#exportObject(Remote,int)
UnicastRemoteObject.exportObject} method is invoked, passing the
<code>Registry</code> instance and the specified <code>port</code> as
arguments, except that the <code>Registry</code> instance is
exported with a well-known object identifier, an {@link ObjID}
instance constructed with the value {@link ObjID#REGISTRY_ID}.

@param port the port on which the registry accepts requests
@return the registry
@exception RemoteException if the registry could not be exported
@since JDK1.1
"
      end

      operation 7897858 "createRegistry"
	class_operation public return_type class_ref 1006082 // Registry
	nparams 3
	  param in name "port" explicit_type "int"
	  param inout name "csf" type class_ref 504834 // RMIClientSocketFactory
	  param inout name "ssf" type class_ref 504962 // RMIServerSocketFactory
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and exports a <code>Registry</code> instance on the local
host that uses custom socket factories for communication with that
instance.  The registry that is created listens for incoming
requests on the given <code>port</code> using a
<code>ServerSocket</code> created from the supplied
<code>RMIServerSocketFactory</code>.

<p>The <code>Registry</code> instance is exported as if
the static {@link
UnicastRemoteObject#exportObject(Remote,int,RMIClientSocketFactory,RMIServerSocketFactory)
UnicastRemoteObject.exportObject} method is invoked, passing the
<code>Registry</code> instance, the specified <code>port</code>, the
specified <code>RMIClientSocketFactory</code>, and the specified
<code>RMIServerSocketFactory</code> as arguments, except that the
<code>Registry</code> instance is exported with a well-known object
identifier, an {@link ObjID} instance constructed with the value
{@link ObjID#REGISTRY_ID}.

@param port port on which the registry accepts requests
@param csf  client-side <code>Socket</code> factory used to
     make connections to the registry
@param ssf  server-side <code>ServerSocket</code> factory
     used to accept connections to the registry
@return the registry
@exception RemoteException if the registry could not be exported
@since 1.2
"
      end
    end

    class 1010690 "RegistryHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@Deprecated
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>RegistryHandler</code> is an interface used internally by the RMI
runtime in previous implementation versions.  It should never be accessed
by application code.

@author  Ann Wollrath
@since   JDK1.1
@deprecated no replacement
"
      operation 7898626 "registryStub"
	public return_type class_ref 1006082 // Registry
	nparams 2
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 2
	  exception class_ref 207234 // RemoteException
	  exception class_ref 1007234 // UnknownHostException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Returns a \"stub\" for contacting a remote registry
on the specified host and port.

@deprecated no replacement.  As of the Java 2 platform v1.2, RMI no
longer uses the <code>RegistryHandler</code> to obtain the registry's
stub.
@param host name of remote registry host
@param port remote registry port
@return remote registry stub
@throws RemoteException if a remote error occurs
@throws UnknownHostException if unable to resolve given hostname
"
      end

      operation 7898754 "registryImpl"
	public return_type class_ref 1006082 // Registry
	nparams 1
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 207234 // RemoteException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Constructs and exports a Registry on the specified port.
The port must be non-zero.

@deprecated no replacement.  As of the Java 2 platform v1.2, RMI no
longer uses the <code>RegistryHandler</code> to obtain the registry's
implementation.
@param port port to export registry on
@return registry stub
@throws RemoteException if a remote error occurs
"
      end
    end
  end

  deploymentview 169218 "registry"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 746370 "LocateRegistry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.RemoteException;
import java.rmi.server.ObjID;
import java.rmi.server.RMIClientSocketFactory;
import java.rmi.server.RMIServerSocketFactory;
import java.rmi.server.RemoteRef;
import java.rmi.server.UnicastRemoteObject;
import sun.rmi.registry.RegistryImpl;
import sun.rmi.server.UnicastRef2;
import sun.rmi.server.UnicastRef;
import sun.rmi.server.Util;
import sun.rmi.transport.LiveRef;
import sun.rmi.transport.tcp.TCPEndpoint;
${definition}"
      associated_elems
	class_ref 1010562 // LocateRegistry
      end
      comment "Copyright (c) 1996, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 746498 "Registry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.AccessException;
import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.Remote;
import java.rmi.RemoteException;
${definition}"
      associated_elems
	class_ref 1006082 // Registry
      end
      comment "Copyright (c) 1996, 2001, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 746626 "RegistryHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.rmi.RemoteException;
import java.rmi.UnknownHostException;
${definition}"
      associated_elems
	class_ref 1010690 // RegistryHandler
      end
      comment "Copyright (c) 1997, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
