class ShortMessage
!!!10281602.java!!!	ShortMessage()
        this(new byte[3]);
        // Default message data: NOTE_ON on Channel 0 with max volume
        data[0] = (byte) (NOTE_ON & 0xFF);
        data[1] = (byte) 64;
        data[2] = (byte) 127;
        length = 3;
!!!10281730.java!!!	ShortMessage(in status : int)
        super(null);
        setMessage(status); // can throw InvalidMidiDataException
!!!10281858.java!!!	ShortMessage(in status : int, in data1 : int, in data2 : int)
        super(null);
        setMessage(status, data1, data2); // can throw InvalidMidiDataException
!!!10281986.java!!!	ShortMessage(in command : int, in channel : int, in data1 : int, in data2 : int)
        super(null);
        setMessage(command, channel, data1, data2);
!!!10282114.java!!!	ShortMessage(inout data : byte [[]])
        // $$fb this may set an invalid message.
        // Can't correct without compromising compatibility
        super(data);
!!!10282242.java!!!	setMessage(in status : int) : void
        // check for valid values
        int dataLength = getDataLength(status); // can throw InvalidMidiDataException
        if (dataLength != 0) {
            throw new InvalidMidiDataException("Status byte; " + status + " requires " + dataLength + " data bytes");
        }
        setMessage(status, 0, 0);
!!!10282370.java!!!	setMessage(in status : int, in data1 : int, in data2 : int) : void
        // check for valid values
        int dataLength = getDataLength(status); // can throw InvalidMidiDataException
        if (dataLength > 0) {
            if (data1 < 0 || data1 > 127) {
                throw new InvalidMidiDataException("data1 out of range: " + data1);
            }
            if (dataLength > 1) {
                if (data2 < 0 || data2 > 127) {
                    throw new InvalidMidiDataException("data2 out of range: " + data2);
                }
            }
        }


        // set the length
        length = dataLength + 1;
        // re-allocate array if ShortMessage(byte[]) constructor gave array with fewer elements
        if (data == null || data.length < length) {
            data = new byte[3];
        }

        // set the data
        data[0] = (byte) (status & 0xFF);
        if (length > 1) {
            data[1] = (byte) (data1 & 0xFF);
            if (length > 2) {
                data[2] = (byte) (data2 & 0xFF);
            }
        }
!!!10282498.java!!!	setMessage(in command : int, in channel : int, in data1 : int, in data2 : int) : void
        // check for valid values
        if (command >= 0xF0 || command < 0x80) {
            throw new InvalidMidiDataException("command out of range: 0x" + Integer.toHexString(command));
        }
        if ((channel & 0xFFFFFFF0) != 0) { // <=> (channel<0 || channel>15)
            throw new InvalidMidiDataException("channel out of range: " + channel);
        }
        setMessage((command & 0xF0) | (channel & 0x0F), data1, data2);
!!!10282626.java!!!	getChannel() : int
        // this returns 0 if an invalid message is set
        return (getStatus() & 0x0F);
!!!10282754.java!!!	getCommand() : int
        // this returns 0 if an invalid message is set
        return (getStatus() & 0xF0);
!!!10282882.java!!!	getData1() : int
        if (length > 1) {
            return (data[1] & 0xFF);
        }
        return 0;
!!!10283010.java!!!	getData2() : int
        if (length > 2) {
            return (data[2] & 0xFF);
        }
        return 0;
!!!10283138.java!!!	clone() : Object
        byte[] newData = new byte[length];
        System.arraycopy(data, 0, newData, 0, newData.length);

        ShortMessage msg = new ShortMessage(newData);
        return msg;
!!!10283266.java!!!	getDataLength(in status : int) : int
        // system common and system real-time messages
        switch(status) {
        case 0xF6:                      // Tune Request
        case 0xF7:                      // EOX
            // System real-time messages
        case 0xF8:                      // Timing Clock
        case 0xF9:                      // Undefined
        case 0xFA:                      // Start
        case 0xFB:                      // Continue
        case 0xFC:                      // Stop
        case 0xFD:                      // Undefined
        case 0xFE:                      // Active Sensing
        case 0xFF:                      // System Reset
            return 0;
        case 0xF1:                      // MTC Quarter Frame
        case 0xF3:                      // Song Select
            return 1;
        case 0xF2:                      // Song Position Pointer
            return 2;
        default:
        }

        // channel voice and mode messages
        switch(status & 0xF0) {
        case 0x80:
        case 0x90:
        case 0xA0:
        case 0xB0:
        case 0xE0:
            return 2;
        case 0xC0:
        case 0xD0:
            return 1;
        default:
            throw new InvalidMidiDataException("Invalid status byte: " + status);
        }
