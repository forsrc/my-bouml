class SynthSplitPaneUI
!!!11553794.java!!!	createUI(inout x : JComponent) : ComponentUI
        return new SynthSplitPaneUI();
!!!11553922.java!!!	installDefaults() : void
        updateStyle(splitPane);

        setOrientation(splitPane.getOrientation());
        setContinuousLayout(splitPane.isContinuousLayout());

        resetLayoutManager();

        /* Install the nonContinuousLayoutDivider here to avoid having to
        add/remove everything later. */
        if(nonContinuousLayoutDivider == null) {
            setNonContinuousLayoutDivider(
                                createDefaultNonContinuousLayoutDivider(),
                                true);
        } else {
            setNonContinuousLayoutDivider(nonContinuousLayoutDivider, true);
        }

        // focus forward traversal key
        if (managingFocusForwardTraversalKeys==null) {
            managingFocusForwardTraversalKeys = new HashSet<KeyStroke>();
            managingFocusForwardTraversalKeys.add(
                KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0));
        }
        splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,
                                        managingFocusForwardTraversalKeys);
        // focus backward traversal key
        if (managingFocusBackwardTraversalKeys==null) {
            managingFocusBackwardTraversalKeys = new HashSet<KeyStroke>();
            managingFocusBackwardTraversalKeys.add(
                KeyStroke.getKeyStroke(KeyEvent.VK_TAB, InputEvent.SHIFT_MASK));
        }
        splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,
                                        managingFocusBackwardTraversalKeys);
!!!11554050.java!!!	updateStyle(inout splitPane : JSplitPane) : void
        SynthContext context = getContext(splitPane, Region.SPLIT_PANE_DIVIDER,
                                          ENABLED);
        SynthStyle oldDividerStyle = dividerStyle;
        dividerStyle = SynthLookAndFeel.updateStyle(context, this);
        context.dispose();

        context = getContext(splitPane, ENABLED);
        SynthStyle oldStyle = style;

        style = SynthLookAndFeel.updateStyle(context, this);

        if (style != oldStyle) {
            Object value = style.get(context, "SplitPane.size");
            if (value == null) {
                value = Integer.valueOf(6);
            }
            LookAndFeel.installProperty(splitPane, "dividerSize", value);

            value = style.get(context, "SplitPane.oneTouchExpandable");
            if (value != null) {
                LookAndFeel.installProperty(splitPane, "oneTouchExpandable", value);
            }

            if (divider != null) {
                splitPane.remove(divider);
                divider.setDividerSize(splitPane.getDividerSize());
            }
            if (oldStyle != null) {
                uninstallKeyboardActions();
                installKeyboardActions();
            }
        }
        if (style != oldStyle || dividerStyle != oldDividerStyle) {
            // Only way to force BasicSplitPaneDivider to reread the
            // necessary properties.
            if (divider != null) {
                splitPane.remove(divider);
            }
            divider = createDefaultDivider();
            divider.setBasicSplitPaneUI(this);
            splitPane.add(divider, JSplitPane.DIVIDER);
        }
        context.dispose();
!!!11554178.java!!!	installListeners() : void
        super.installListeners();
        splitPane.addPropertyChangeListener(this);
!!!11554306.java!!!	uninstallDefaults() : void
        SynthContext context = getContext(splitPane, ENABLED);

        style.uninstallDefaults(context);
        context.dispose();
        style = null;

        context = getContext(splitPane, Region.SPLIT_PANE_DIVIDER, ENABLED);
        dividerStyle.uninstallDefaults(context);
        context.dispose();
        dividerStyle = null;

        super.uninstallDefaults();
!!!11554434.java!!!	uninstallListeners() : void
        super.uninstallListeners();
        splitPane.removePropertyChangeListener(this);
!!!11554562.java!!!	getContext(inout c : JComponent) : SynthContext
        return getContext(c, SynthLookAndFeel.getComponentState(c));
!!!11554690.java!!!	getContext(inout c : JComponent, in state : int) : SynthContext
        return SynthContext.getContext(c, style, state);
!!!11554818.java!!!	getContext(inout c : JComponent, inout region : Region) : SynthContext
        return getContext(c, region, getComponentState(c, region));
!!!11554946.java!!!	getContext(inout c : JComponent, inout region : Region, in state : int) : SynthContext
        if (region == Region.SPLIT_PANE_DIVIDER) {
            return SynthContext.getContext(c, region, dividerStyle, state);
        }
        return SynthContext.getContext(c, region, style, state);
!!!11555074.java!!!	getComponentState(inout c : JComponent, inout subregion : Region) : int
        int state = SynthLookAndFeel.getComponentState(c);

        if (divider.isMouseOver()) {
            state |= MOUSE_OVER;
        }
        return state;
!!!11555202.java!!!	propertyChange(inout e : PropertyChangeEvent) : void
        if (SynthLookAndFeel.shouldUpdateStyle(e)) {
            updateStyle((JSplitPane)e.getSource());
        }
!!!11555330.java!!!	createDefaultDivider() : BasicSplitPaneDivider
        SynthSplitPaneDivider divider = new SynthSplitPaneDivider(this);

        divider.setDividerSize(splitPane.getDividerSize());
        return divider;
!!!11555458.java!!!	createDefaultNonContinuousLayoutDivider() : Component
        return new Canvas() {
            public void paint(Graphics g) {
                paintDragDivider(g, 0, 0, getWidth(), getHeight());
            }
        };
!!!11555586.java!!!	update(inout g : Graphics, inout c : JComponent) : void
        SynthContext context = getContext(c);

        SynthLookAndFeel.update(context, g);
        context.getPainter().paintSplitPaneBackground(context,
                          g, 0, 0, c.getWidth(), c.getHeight());
        paint(context, g);
        context.dispose();
!!!11555714.java!!!	paint(inout g : Graphics, inout c : JComponent) : void
        SynthContext context = getContext(c);

        paint(context, g);
        context.dispose();
!!!11555842.java!!!	paint(inout context : SynthContext, inout g : Graphics) : void
        // This is done to update package private variables in
        // BasicSplitPaneUI
        super.paint(g, splitPane);
!!!11555970.java!!!	paintBorder(inout context : SynthContext, inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        context.getPainter().paintSplitPaneBorder(context, g, x, y, w, h);
!!!11556098.java!!!	paintDragDivider(inout g : Graphics, in x : int, in y : int, in w : int, in h : int) : void
        SynthContext context = getContext(splitPane,Region.SPLIT_PANE_DIVIDER);
        context.setComponentState(((context.getComponentState() | MOUSE_OVER) ^
                                   MOUSE_OVER) | PRESSED);
        Shape oldClip = g.getClip();
        g.clipRect(x, y, w, h);
        context.getPainter().paintSplitPaneDragDivider(context, g, x, y, w, h,
                                           splitPane.getOrientation());
        g.setClip(oldClip);
        context.dispose();
!!!11556226.java!!!	finishedPaintingChildren(inout jc : JSplitPane, inout g : Graphics) : void
        if(jc == splitPane && getLastDragLocation() != -1 &&
                              !isContinuousLayout() && !draggingHW) {
            if(jc.getOrientation() == JSplitPane.HORIZONTAL_SPLIT) {
                paintDragDivider(g, getLastDragLocation(), 0, dividerSize - 1,
                                 splitPane.getHeight() - 1);
            } else {
                paintDragDivider(g, 0, getLastDragLocation(),
                                 splitPane.getWidth() - 1, dividerSize - 1);
            }
        }
