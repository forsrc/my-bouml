class ProgressMonitor
!!!10796418.java!!!	ProgressMonitor(inout parentComponent : Component, inout message : Object, inout note : String, in min : int, in max : int)
        this(parentComponent, message, note, min, max, null);
!!!10796546.java!!!	ProgressMonitor(inout parentComponent : Component, inout message : Object, inout note : String, in min : int, in max : int, inout group : ProgressMonitor)
        this.min = min;
        this.max = max;
        this.parentComponent = parentComponent;

        cancelOption = new Object[1];
        cancelOption[0] = UIManager.getString("OptionPane.cancelButtonText");

        this.message = message;
        this.note = note;
        if (group != null) {
            root = (group.root != null) ? group.root : group;
            T0 = root.T0;
            dialog = root.dialog;
        }
        else {
            T0 = System.currentTimeMillis();
        }
!!!10797314.java!!!	setProgress(in nv : int) : void
        if (nv >= max) {
            close();
        }
        else {
            if (myBar != null) {
                myBar.setValue(nv);
            }
            else {
                long T = System.currentTimeMillis();
                long dT = (int)(T-T0);
                if (dT >= millisToDecideToPopup) {
                    int predictedCompletionTime;
                    if (nv > min) {
                        predictedCompletionTime = (int)(dT *
                                                        (max - min) /
                                                        (nv - min));
                    }
                    else {
                        predictedCompletionTime = millisToPopup;
                    }
                    if (predictedCompletionTime >= millisToPopup) {
                        myBar = new JProgressBar();
                        myBar.setMinimum(min);
                        myBar.setMaximum(max);
                        myBar.setValue(nv);
                        if (note != null) noteLabel = new JLabel(note);
                        pane = new ProgressOptionPane(new Object[] {message,
                                                                    noteLabel,
                                                                    myBar});
                        dialog = pane.createDialog(parentComponent,
                            UIManager.getString(
                                "ProgressMonitor.progressText"));
                        dialog.show();
                    }
                }
            }
        }
!!!10797442.java!!!	close() : void
        if (dialog != null) {
            dialog.setVisible(false);
            dialog.dispose();
            dialog = null;
            pane = null;
            myBar = null;
        }
!!!10797570.java!!!	getMinimum() : int
        return min;
!!!10797698.java!!!	setMinimum(in m : int) : void
        if (myBar != null) {
            myBar.setMinimum(m);
        }
        min = m;
!!!10797826.java!!!	getMaximum() : int
        return max;
!!!10797954.java!!!	setMaximum(in m : int) : void
        if (myBar != null) {
            myBar.setMaximum(m);
        }
        max = m;
!!!10798082.java!!!	isCanceled() : boolean
        if (pane == null) return false;
        Object v = pane.getValue();
        return ((v != null) &&
                (cancelOption.length == 1) &&
                (v.equals(cancelOption[0])));
!!!10798210.java!!!	setMillisToDecideToPopup(in millisToDecideToPopup : int) : void
        this.millisToDecideToPopup = millisToDecideToPopup;
!!!10798338.java!!!	getMillisToDecideToPopup() : int
        return millisToDecideToPopup;
!!!10798466.java!!!	setMillisToPopup(in millisToPopup : int) : void
        this.millisToPopup = millisToPopup;
!!!10798594.java!!!	getMillisToPopup() : int
        return millisToPopup;
!!!10798722.java!!!	setNote(inout note : String) : void
        this.note = note;
        if (noteLabel != null) {
            noteLabel.setText(note);
        }
!!!10798850.java!!!	getNote() : String
        return note;
!!!10798978.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleProgressMonitor();
        }
        if (pane != null && accessibleJOptionPane == null) {
            // Notify the AccessibleProgressMonitor that the
            // ProgressOptionPane was created. It is necessary
            // to poll for ProgressOptionPane creation because
            // the ProgressMonitor does not have a Component
            // to add a listener to until the ProgressOptionPane
            // is created.
            if (accessibleContext instanceof AccessibleProgressMonitor) {
                ((AccessibleProgressMonitor)accessibleContext).optionPaneCreated();
            }
        }
        return accessibleContext;
