class NetworkInterface
!!!7509122.java!!!	NetworkInterface(inout name : String, in index : int, inout addrs : InetAddress [[]])
        this.name = name;
        this.index = index;
        this.addrs = addrs;
!!!7509250.java!!!	getName() : String
            return name;
!!!7509378.java!!!	getInetAddresses() : Enumeration

        class checkedAddresses implements Enumeration<InetAddress> {

            private int i=0, count=0;
            private InetAddress local_addrs[];

            checkedAddresses() {
                local_addrs = new InetAddress[addrs.length];
                boolean trusted = true;

                SecurityManager sec = System.getSecurityManager();
                if (sec != null) {
                    try {
                        sec.checkPermission(new NetPermission("getNetworkInformation"));
                    } catch (SecurityException e) {
                        trusted = false;
                    }
                }
                for (int j=0; j<addrs.length; j++) {
                    try {
                        if (sec != null && !trusted) {
                            sec.checkConnect(addrs[j].getHostAddress(), -1);
                        }
                        local_addrs[count++] = addrs[j];
                    } catch (SecurityException e) { }
                }

            }

            public InetAddress nextElement() {
                if (i < count) {
                    return local_addrs[i++];
                } else {
                    throw new NoSuchElementException();
                }
            }

            public boolean hasMoreElements() {
                return (i < count);
            }
        }
        return new checkedAddresses();

!!!7509506.java!!!	getInterfaceAddresses() : List
        java.util.List<InterfaceAddress> lst = new java.util.ArrayList<InterfaceAddress>(1);
        SecurityManager sec = System.getSecurityManager();
        for (int j=0; j<bindings.length; j++) {
            try {
                if (sec != null) {
                    sec.checkConnect(bindings[j].getAddress().getHostAddress(), -1);
                }
                lst.add(bindings[j]);
            } catch (SecurityException e) { }
        }
        return lst;
!!!7509634.java!!!	getSubInterfaces() : Enumeration
        class subIFs implements Enumeration<NetworkInterface> {

            private int i=0;

            subIFs() {
            }

            public NetworkInterface nextElement() {
                if (i < childs.length) {
                    return childs[i++];
                } else {
                    throw new NoSuchElementException();
                }
            }

            public boolean hasMoreElements() {
                return (i < childs.length);
            }
        }
        return new subIFs();

!!!7509762.java!!!	getParent() : NetworkInterface
        return parent;
!!!7509890.java!!!	getIndex() : int
        return index;
!!!7510018.java!!!	getDisplayName() : String
        /* strict TCK conformance */
        return "".equals(displayName) ? null : displayName;
!!!7510146.java!!!	getByName(inout name : String) : NetworkInterface
        if (name == null)
            throw new NullPointerException();
        return getByName0(name);
!!!7510274.java!!!	getByIndex(in index : int) : NetworkInterface
        if (index < 0)
            throw new IllegalArgumentException("Interface index can't be negative");
        return getByIndex0(index);
!!!7510402.java!!!	getByInetAddress(inout addr : InetAddress) : NetworkInterface
        if (addr == null) {
            throw new NullPointerException();
        }
        if (!(addr instanceof Inet4Address || addr instanceof Inet6Address)) {
            throw new IllegalArgumentException ("invalid address type");
        }
        return getByInetAddress0(addr);
!!!7510530.java!!!	getNetworkInterfaces() : Enumeration
        final NetworkInterface[] netifs = getAll();

        // specified to return null if no network interfaces
        if (netifs == null)
            return null;

        return new Enumeration<NetworkInterface>() {
            private int i = 0;
            public NetworkInterface nextElement() {
                if (netifs != null && i < netifs.length) {
                    NetworkInterface netif = netifs[i++];
                    return netif;
                } else {
                    throw new NoSuchElementException();
                }
            }

            public boolean hasMoreElements() {
                return (netifs != null && i < netifs.length);
            }
        };
!!!7511170.java!!!	isUp() : boolean
        return isUp0(name, index);
!!!7511298.java!!!	isLoopback() : boolean
        return isLoopback0(name, index);
!!!7511426.java!!!	isPointToPoint() : boolean
        return isP2P0(name, index);
!!!7511554.java!!!	supportsMulticast() : boolean
        return supportsMulticast0(name, index);
!!!7511682.java!!!	getHardwareAddress() : byte
        SecurityManager sec = System.getSecurityManager();
        if (sec != null) {
            try {
                sec.checkPermission(new NetPermission("getNetworkInformation"));
            } catch (SecurityException e) {
                if (!getInetAddresses().hasMoreElements()) {
                    // don't have connect permission to any local address
                    return null;
                }
            }
        }
        for (InetAddress addr : addrs) {
            if (addr instanceof Inet4Address) {
                return getMacAddr0(((Inet4Address)addr).getAddress(), name, index);
            }
        }
        return getMacAddr0(null, name, index);
!!!7511810.java!!!	getMTU() : int
        return getMTU0(name, index);
!!!7511938.java!!!	isVirtual() : boolean
        return virtual;
!!!7512834.java!!!	equals(inout obj : Object) : boolean
        if (!(obj instanceof NetworkInterface)) {
            return false;
        }
        NetworkInterface that = (NetworkInterface)obj;
        if (this.name != null ) {
            if (!this.name.equals(that.name)) {
                return false;
            }
        } else {
            if (that.name != null) {
                return false;
            }
        }

        if (this.addrs == null) {
            return that.addrs == null;
        } else if (that.addrs == null) {
            return false;
        }

        /* Both addrs not null. Compare number of addresses */

        if (this.addrs.length != that.addrs.length) {
            return false;
        }

        InetAddress[] thatAddrs = that.addrs;
        int count = thatAddrs.length;

        for (int i=0; i<count; i++) {
            boolean found = false;
            for (int j=0; j<count; j++) {
                if (addrs[i].equals(thatAddrs[j])) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                return false;
            }
        }
        return true;
!!!7512962.java!!!	hashCode() : int
        return name == null? 0: name.hashCode();
!!!7513090.java!!!	toString() : String
        String result = "name:";
        result += name == null? "null": name;
        if (displayName != null) {
            result += " (" + displayName + ")";
        }
        return result;
!!!7513346.java!!!	getDefault() : NetworkInterface
        return defaultInterface;
