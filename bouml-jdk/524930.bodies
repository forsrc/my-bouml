class Handler
!!!3168258.java!!!	Handler(in pduType : int)
            this.type = pduType;
!!!3168386.java!!!	addVarbind(inout varbind : SnmpVarBind) : void
            if (sublist == null) sublist = new Vector<>();
            sublist.addElement(varbind);
!!!3168514.java!!!	add(in pos : int, inout oid : SnmpOid, inout v : Vector, inout isnew : boolean, inout statusvb : SnmpVarBind) : void

            if (entryoids == null) {
                // Vectors are null: Allocate new vectors

                entryoids  = new SnmpOid[Delta];
                entrylists = (Vector<SnmpVarBind>[])new Vector<?>[Delta];
                isentrynew = new boolean[Delta];
                rowstatus  = new SnmpVarBind[Delta];
                entrysize  = Delta;
                pos = 0;

            } else if (pos >= entrysize || entrycount == entrysize) {
                // Vectors must be enlarged

                // Save old vectors
                SnmpOid[]     olde = entryoids;
                Vector[]      oldl = entrylists;
                boolean[]     oldn = isentrynew;
                SnmpVarBind[] oldr = rowstatus;

                // Allocate larger vectors
                entrysize += Delta;
                entryoids =  new SnmpOid[entrysize];
                entrylists = (Vector<SnmpVarBind>[])new Vector<?>[entrysize];
                isentrynew = new boolean[entrysize];
                rowstatus  = new SnmpVarBind[entrysize];

                // Check pos validity
                if (pos > entrycount) pos = entrycount;
                if (pos < 0) pos = 0;

                final int l1 = pos;
                final int l2 = entrycount - pos;

                // Copy original vectors up to `pos'
                if (l1 > 0) {
                    java.lang.System.arraycopy(olde,0,entryoids,
                                               0,l1);
                    java.lang.System.arraycopy(oldl,0,entrylists,
                                               0,l1);
                    java.lang.System.arraycopy(oldn,0,isentrynew,
                                               0,l1);
                    java.lang.System.arraycopy(oldr,0,rowstatus,
                                               0,l1);
                }

                // Copy original vectors from `pos' to end, leaving
                // an empty room at `pos' in the new vectors.
                if (l2 > 0) {
                    final int l3 = l1+1;
                    java.lang.System.arraycopy(olde,l1,entryoids,
                                               l3,l2);
                    java.lang.System.arraycopy(oldl,l1,entrylists,
                                               l3,l2);
                    java.lang.System.arraycopy(oldn,l1,isentrynew,
                                               l3,l2);
                    java.lang.System.arraycopy(oldr,l1,rowstatus,
                                               l3,l2);
                }


            } else if (pos < entrycount) {
                // Vectors are large enough to accommodate one additional
                // entry.
                //
                // Shift vectors, making an empty room at `pos'
                final int l1 = pos+1;
                final int l2 = entrycount - pos;

                java.lang.System.arraycopy(entryoids,pos,entryoids,
                                           l1,l2);
                java.lang.System.arraycopy(entrylists,pos,entrylists,
                                           l1,l2);
                java.lang.System.arraycopy(isentrynew,pos,isentrynew,
                                           l1,l2);
                java.lang.System.arraycopy(rowstatus,pos,rowstatus,
                                           l1,l2);
            }

            // Fill the gap at `pos'
            entryoids[pos]  = oid;
            entrylists[pos] = v;
            isentrynew[pos] = isnew;
            rowstatus[pos]  = statusvb;
            entrycount++;
!!!3168642.java!!!	addVarbind(inout varbind : SnmpVarBind, inout entryoid : SnmpOid, inout isnew : boolean, inout statusvb : SnmpVarBind) : void
            Vector<SnmpVarBind> v = null;
            SnmpVarBind rs = statusvb;

            if (entryoids == null) {
//              entryoids = new ArrayList();
//              entrylists = new ArrayList();
//              isentrynew = new ArrayList();
                v = new Vector<>();
//              entryoids.add(entryoid);
//              entrylists.add(v);
//              isentrynew.add(new Boolean(isnew));
                add(0,entryoid,v,isnew,rs);
            } else {
                // int pos = findOid(entryoids,entryoid);
                // int pos = findOid(entryoids,entrycount,entryoid);
                final int pos =
                    getInsertionPoint(entryoids,entrycount,entryoid);
                if (pos > -1 && pos < entrycount &&
                    entryoid.compareTo(entryoids[pos]) == 0) {
                    v  = entrylists[pos];
                    rs = rowstatus[pos];
                } else {
                    // if (pos == -1 || pos >= entryoids.size() ) {
                    // if (pos == -1 || pos >= entrycount ) {
                    // pos = getInsertionPoint(entryoids,entryoid);
                    // pos = getInsertionPoint(entryoids,entrycount,entryoid);
                    v = new Vector<>();
//                  entryoids.add(pos,entryoid);
//                  entrylists.add(pos,v);
//                  isentrynew.add(pos,new Boolean(isnew));
                    add(pos,entryoid,v,isnew,rs);
                }
//              } else v = (Vector) entrylists.get(pos);
                    // } else v = entrylists[pos];
                if (statusvb != null) {
                    if ((rs != null) && (rs != statusvb) &&
                        ((type == SnmpDefinitions.pduWalkRequest) ||
                         (type == SnmpDefinitions.pduSetRequestPdu))) {
                        throw new SnmpStatusException(
                              SnmpStatusException.snmpRspInconsistentValue);
                    }
                    rowstatus[pos] = statusvb;
                }
            }

            // We do not include the status variable in the varbind,
            // because we're going to set it separately...
            //
            if (statusvb != varbind)
                v.addElement(varbind);
!!!3168770.java!!!	getSubReqCount() : int
            int count = 0;
            if (sublist != null) count++;
//          if (entryoids != null) count += entryoids.size();
            if (entryoids != null) count += entrycount;
            return count;
!!!3168898.java!!!	getSubList() : Vector
            return sublist;
!!!3169026.java!!!	getEntryPos(inout entryoid : SnmpOid) : int
            // return findOid(entryoids,entryoid);
            return findOid(entryoids,entrycount,entryoid);
!!!3169154.java!!!	getEntryOid(in pos : int) : SnmpOid
            if (entryoids == null) return null;
            // if (pos == -1 || pos >= entryoids.size() ) return null;
            if (pos == -1 || pos >= entrycount ) return null;
            // return (SnmpOid) entryoids.get(pos);
            return entryoids[pos];
!!!3169282.java!!!	isNewEntry(in pos : int) : boolean
            if (entryoids == null) return false;
            // if (pos == -1 || pos >= entryoids.size() ) return false;
            if (pos == -1 || pos >= entrycount ) return false;
            // return ((Boolean)isentrynew.get(pos)).booleanValue();
            return isentrynew[pos];
!!!3169410.java!!!	getRowStatusVarBind(in pos : int) : SnmpVarBind
            if (entryoids == null) return null;
            // if (pos == -1 || pos >= entryoids.size() ) return false;
            if (pos == -1 || pos >= entrycount ) return null;
            // return ((Boolean)isentrynew.get(pos)).booleanValue();
            return rowstatus[pos];
!!!3169538.java!!!	getEntrySubList(in pos : int) : Vector
            if (entrylists == null) return null;
            // if (pos == -1 || pos >= entrylists.size() ) return null;
            if (pos == -1 || pos >= entrycount ) return null;
            // return (Vector) entrylists.get(pos);
            return entrylists[pos];
!!!3169666.java!!!	getEntryOids() : Iterator
            if (entryoids == null) return null;
            // return entryoids.iterator();
            return Arrays.asList(entryoids).iterator();
!!!3169794.java!!!	getEntryCount() : int
            if (entryoids == null) return 0;
            // return entryoids.size();
            return entrycount;
