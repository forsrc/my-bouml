class CheckedEntrySet
!!!8734082.java!!!	CheckedEntrySet(inout s : Set, inout valueType : Class)
                this.s = s;
                this.valueType = valueType;
!!!8734210.java!!!	size() : int
 return s.size();
!!!8734338.java!!!	isEmpty() : boolean
 return s.isEmpty();
!!!8734466.java!!!	toString() : String
 return s.toString();
!!!8734594.java!!!	hashCode() : int
 return s.hashCode();
!!!8734722.java!!!	clear() : void
        s.clear();
!!!8734850.java!!!	add(inout e : Map::Entry) : boolean
                throw new UnsupportedOperationException();
!!!8734978.java!!!	addAll(inout coll : Collection) : boolean
                throw new UnsupportedOperationException();
!!!8735106.java!!!	iterator() : Iterator
                final Iterator<Map.Entry<K, V>> i = s.iterator();
                final Class<V> valueType = this.valueType;

                return new Iterator<Map.Entry<K,V>>() {
                    public boolean hasNext() { return i.hasNext(); }
                    public void remove()     { i.remove(); }

                    public Map.Entry<K,V> next() {
                        return checkedEntry(i.next(), valueType);
                    }
                };
!!!8735234.java!!!	toArray() : Object
                Object[] source = s.toArray();

                /*
                 * Ensure that we don't get an ArrayStoreException even if
                 * s.toArray returns an array of something other than Object
                 */
                Object[] dest = (CheckedEntry.class.isInstance(
                    source.getClass().getComponentType()) ? source :
                                 new Object[source.length]);

                for (int i = 0; i < source.length; i++)
                    dest[i] = checkedEntry((Map.Entry<K,V>)source[i],
                                           valueType);
                return dest;
!!!8735362.java!!!	toArray(inout a : T [[]]) : T
                // We don't pass a to s.toArray, to avoid window of
                // vulnerability wherein an unscrupulous multithreaded client
                // could get his hands on raw (unwrapped) Entries from s.
                T[] arr = s.toArray(a.length==0 ? a : Arrays.copyOf(a, 0));

                for (int i=0; i<arr.length; i++)
                    arr[i] = (T) checkedEntry((Map.Entry<K,V>)arr[i],
                                              valueType);
                if (arr.length > a.length)
                    return arr;

                System.arraycopy(arr, 0, a, 0, arr.length);
                if (a.length > arr.length)
                    a[arr.length] = null;
                return a;
!!!8735490.java!!!	contains(inout o : Object) : boolean
                if (!(o instanceof Map.Entry))
                    return false;
                Map.Entry<?,?> e = (Map.Entry<?,?>) o;
                return s.contains(
                    (e instanceof CheckedEntry) ? e : checkedEntry(e, valueType));
!!!8735618.java!!!	containsAll(inout c : Collection) : boolean
                for (Object o : c)
                    if (!contains(o)) // Invokes safe contains() above
                        return false;
                return true;
!!!8735746.java!!!	remove(inout o : Object) : boolean
                if (!(o instanceof Map.Entry))
                    return false;
                return s.remove(new AbstractMap.SimpleImmutableEntry
                                <>((Map.Entry<?,?>)o));
!!!8735874.java!!!	removeAll(inout c : Collection) : boolean
                return batchRemove(c, false);
!!!8736002.java!!!	retainAll(inout c : Collection) : boolean
                return batchRemove(c, true);
!!!8736130.java!!!	batchRemove(inout c : Collection, inout complement : boolean) : boolean
                Objects.requireNonNull(c);
                boolean modified = false;
                Iterator<Map.Entry<K,V>> it = iterator();
                while (it.hasNext()) {
                    if (c.contains(it.next()) != complement) {
                        it.remove();
                        modified = true;
                    }
                }
                return modified;
!!!8736258.java!!!	equals(inout o : Object) : boolean
                if (o == this)
                    return true;
                if (!(o instanceof Set))
                    return false;
                Set<?> that = (Set<?>) o;
                return that.size() == s.size()
                    && containsAll(that); // Invokes safe containsAll() above
!!!8736386.java!!!	checkedEntry(inout e : Map::Entry, inout valueType : Class) : Collections::CheckedMap::CheckedEntrySet::CheckedEntry
                return new CheckedEntry<>(e, valueType);
