format 222
"spi" // jdk1.8::java::nio::charset::spi
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/nio/charset/spi/"
  java_package "java.nio.charset.spi"
  classview 174978 "spi"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 991874 "CharsetProvider"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Charset service-provider class.

<p> A charset provider is a concrete subclass of this class that has a
zero-argument constructor and some number of associated charset
implementation classes.  Charset providers may be installed in an instance
of the Java platform as extensions, that is, jar files placed into any of
the usual extension directories.  Providers may also be made available by
adding them to the applet or application class path or by some other
platform-specific means.  Charset providers are looked up via the current
thread's {@link java.lang.Thread#getContextClassLoader() context class
loader}.

<p> A charset provider identifies itself with a provider-configuration file
named <tt>java.nio.charset.spi.CharsetProvider</tt> in the resource
directory <tt>META-INF/services</tt>.  The file should contain a list of
fully-qualified concrete charset-provider class names, one per line.  A line
is terminated by any one of a line feed (<tt>'\\n'</tt>), a carriage return
(<tt>'\\r'</tt>), or a carriage return followed immediately by a line feed.
Space and tab characters surrounding each name, as well as blank lines, are
ignored.  The comment character is <tt>'#'</tt> (<tt>'&#92;u0023'</tt>); on
each line all characters following the first comment character are ignored.
The file must be encoded in UTF-8.

<p> If a particular concrete charset provider class is named in more than
one configuration file, or is named in the same configuration file more than
once, then the duplicates will be ignored.  The configuration file naming a
particular provider need not be in the same jar file or other distribution
unit as the provider itself.  The provider must be accessible from the same
class loader that was initially queried to locate the configuration file;
this is not necessarily the class loader that loaded the file. </p>


@author Mark Reinhold
@author JSR-51 Expert Group
@since 1.4

@see java.nio.charset.Charset
"
      operation 7823234 "CharsetProvider"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new charset provider.

@throws  SecurityException
         If a security manager has been installed and it denies
         {@link RuntimePermission}<tt>(\"charsetProvider\")</tt>
"
      end

      operation 7823362 "charsets"
	abstract public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Charset> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an iterator that iterates over the charsets supported by this
provider.  This method is used in the implementation of the {@link
java.nio.charset.Charset#availableCharsets Charset.availableCharsets}
method.

@return  The new iterator
"
      end

      operation 7823490 "charsetForName"
	abstract public return_type class_ref 853634 // Charset
	nparams 1
	  param inout name "charsetName" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a charset for the given charset name.

@param  charsetName
        The name of the requested charset; may be either
        a canonical name or an alias

@return  A charset object for the named charset,
         or <tt>null</tt> if the named charset
         is not supported by this provider
"
      end
    end
  end

  deploymentview 168322 "spi"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 731522 "CharsetProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.util.Iterator;
${definition}"
      associated_elems
	class_ref 991874 // CharsetProvider
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
