class DOM2SAX
!!!4088322.java!!!	DOM2SAX(inout root : Node)
        _dom = root;
!!!4088450.java!!!	getContentHandler() : ContentHandler
        return _sax;
!!!4088578.java!!!	setContentHandler(inout handler : ContentHandler) : void
        _sax = handler;
        if (handler instanceof LexicalHandler) {
            _lex = (LexicalHandler) handler;
        }

        if (handler instanceof SAXImpl) {
            _saxImpl = (SAXImpl)handler;
        }
!!!4088706.java!!!	startPrefixMapping(inout prefix : String, inout uri : String) : boolean
        boolean pushed = true;
        Stack uriStack = _nsPrefixes.get(prefix);

        if (uriStack != null) {
            if (uriStack.isEmpty()) {
                _sax.startPrefixMapping(prefix, uri);
                uriStack.push(uri);
            }
            else {
                final String lastUri = (String) uriStack.peek();
                if (!lastUri.equals(uri)) {
                    _sax.startPrefixMapping(prefix, uri);
                    uriStack.push(uri);
                }
                else {
                    pushed = false;
                }
            }
        }
        else {
            _sax.startPrefixMapping(prefix, uri);
            _nsPrefixes.put(prefix, uriStack = new Stack());
            uriStack.push(uri);
        }
        return pushed;
!!!4088834.java!!!	endPrefixMapping(inout prefix : String) : void
        final Stack uriStack = _nsPrefixes.get(prefix);

        if (uriStack != null) {
            _sax.endPrefixMapping(prefix);
            uriStack.pop();
        }
!!!4088962.java!!!	getLocalName(inout node : Node) : String
        final String localName = node.getLocalName();

        if (localName == null) {
            final String qname = node.getNodeName();
            final int col = qname.lastIndexOf(':');
            return (col > 0) ? qname.substring(col + 1) : qname;
        }
        return localName;
!!!4089090.java!!!	parse(inout unused : InputSource) : void
        parse(_dom);
!!!4089218.java!!!	parse() : void
        if (_dom != null) {
            boolean isIncomplete =
                (_dom.getNodeType() != org.w3c.dom.Node.DOCUMENT_NODE);

            if (isIncomplete) {
                _sax.startDocument();
                parse(_dom);
                _sax.endDocument();
            }
            else {
                parse(_dom);
            }
        }
!!!4089346.java!!!	parse(inout node : Node) : void
        Node first = null;
        if (node == null) return;

        switch (node.getNodeType()) {
        case Node.ATTRIBUTE_NODE:         // handled by ELEMENT_NODE
        case Node.DOCUMENT_FRAGMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE :
        case Node.ENTITY_NODE :
        case Node.ENTITY_REFERENCE_NODE:
        case Node.NOTATION_NODE :
            // These node types are ignored!!!
            break;
        case Node.CDATA_SECTION_NODE:
            final String cdata = node.getNodeValue();
            if (_lex != null) {
                _lex.startCDATA();
                _sax.characters(cdata.toCharArray(), 0, cdata.length());
                _lex.endCDATA();
            }
            else {
                // in the case where there is no lex handler, we still
                // want the text of the cdate to make its way through.
                _sax.characters(cdata.toCharArray(), 0, cdata.length());
            }
            break;

        case Node.COMMENT_NODE:           // should be handled!!!
            if (_lex != null) {
                final String value = node.getNodeValue();
                _lex.comment(value.toCharArray(), 0, value.length());
            }
            break;
        case Node.DOCUMENT_NODE:
            _sax.setDocumentLocator(this);

            _sax.startDocument();
            Node next = node.getFirstChild();
            while (next != null) {
                parse(next);
                next = next.getNextSibling();
            }
            _sax.endDocument();
            break;

        case Node.ELEMENT_NODE:
            String prefix;
            Vector pushedPrefixes = new Vector();
            final AttributesImpl attrs = new AttributesImpl();
            final NamedNodeMap map = node.getAttributes();
            final int length = map.getLength();

            // Process all namespace declarations
            for (int i = 0; i < length; i++) {
                final Node attr = map.item(i);
                final String qnameAttr = attr.getNodeName();

                // Ignore everything but NS declarations here
                if (qnameAttr.startsWith(XMLNS_PREFIX)) {
                    final String uriAttr = attr.getNodeValue();
                    final int colon = qnameAttr.lastIndexOf(':');
                    prefix = (colon > 0) ? qnameAttr.substring(colon + 1) : EMPTYSTRING;
                    if (startPrefixMapping(prefix, uriAttr)) {
                        pushedPrefixes.addElement(prefix);
                    }
                }
            }

            // Process all other attributes
            for (int i = 0; i < length; i++) {
                final Node attr = map.item(i);
                String qnameAttr = attr.getNodeName();

                // Ignore NS declarations here
                if (!qnameAttr.startsWith(XMLNS_PREFIX)) {
                    final String uriAttr = attr.getNamespaceURI();
                    final String localNameAttr = getLocalName(attr);

                    // Uri may be implicitly declared
                    if (uriAttr != null) {
                        final int colon = qnameAttr.lastIndexOf(':');
                        if (colon > 0) {
                            prefix = qnameAttr.substring(0, colon);
                        }
                        else {
                            // If no prefix for this attr, we need to create
                            // one because we cannot use the default ns
                            prefix = BasisLibrary.generatePrefix();
                            qnameAttr = prefix + ':' + qnameAttr;
                        }
                        if (startPrefixMapping(prefix, uriAttr)) {
                            pushedPrefixes.addElement(prefix);
                        }
                    }

                    // Add attribute to list
                    attrs.addAttribute(attr.getNamespaceURI(), getLocalName(attr),
                        qnameAttr, "CDATA", attr.getNodeValue());
                }
            }

            // Now process the element itself
            final String qname = node.getNodeName();
            final String uri = node.getNamespaceURI();
            final String localName = getLocalName(node);

            // Uri may be implicitly declared
            if (uri != null) {
                final int colon = qname.lastIndexOf(':');
                prefix = (colon > 0) ? qname.substring(0, colon) : EMPTYSTRING;
                if (startPrefixMapping(prefix, uri)) {
                    pushedPrefixes.addElement(prefix);
                }
            }

            // Generate SAX event to start element
            if (_saxImpl != null) {
                _saxImpl.startElement(uri, localName, qname, attrs, node);
            }
            else {
                _sax.startElement(uri, localName, qname, attrs);
            }

            // Traverse all child nodes of the element (if any)
            next = node.getFirstChild();
            while (next != null) {
                parse(next);
                next = next.getNextSibling();
            }

            // Generate SAX event to close element
            _sax.endElement(uri, localName, qname);

            // Generate endPrefixMapping() for all pushed prefixes
            final int nPushedPrefixes = pushedPrefixes.size();
            for (int i = 0; i < nPushedPrefixes; i++) {
                endPrefixMapping((String) pushedPrefixes.elementAt(i));
            }
            break;

        case Node.PROCESSING_INSTRUCTION_NODE:
            _sax.processingInstruction(node.getNodeName(),
                                       node.getNodeValue());
            break;

        case Node.TEXT_NODE:
            final String data = node.getNodeValue();
            _sax.characters(data.toCharArray(), 0, data.length());
            break;
        }
!!!4089474.java!!!	getDTDHandler() : DTDHandler
        return null;
!!!4089602.java!!!	getErrorHandler() : ErrorHandler
        return null;
!!!4089730.java!!!	getFeature(inout name : String) : boolean
        return false;
!!!4089986.java!!!	parse(inout sysId : String) : void
        throw new IOException("This method is not yet implemented.");
!!!4090370.java!!!	getEntityResolver() : EntityResolver
        return null;
!!!4090754.java!!!	getProperty(inout name : String) : Object
        return null;
!!!4090882.java!!!	getColumnNumber() : int
        return 0;
!!!4091010.java!!!	getLineNumber() : int
        return 0;
!!!4091138.java!!!	getPublicId() : String
        return null;
!!!4091266.java!!!	getSystemId() : String
        return null;
!!!4091394.java!!!	getNodeTypeFromCode(in code : short) : String
        String retval = null;
        switch (code) {
        case Node.ATTRIBUTE_NODE :
            retval = "ATTRIBUTE_NODE"; break;
        case Node.CDATA_SECTION_NODE :
            retval = "CDATA_SECTION_NODE"; break;
        case Node.COMMENT_NODE :
            retval = "COMMENT_NODE"; break;
        case Node.DOCUMENT_FRAGMENT_NODE :
            retval = "DOCUMENT_FRAGMENT_NODE"; break;
        case Node.DOCUMENT_NODE :
            retval = "DOCUMENT_NODE"; break;
        case Node.DOCUMENT_TYPE_NODE :
            retval = "DOCUMENT_TYPE_NODE"; break;
        case Node.ELEMENT_NODE :
            retval = "ELEMENT_NODE"; break;
        case Node.ENTITY_NODE :
            retval = "ENTITY_NODE"; break;
        case Node.ENTITY_REFERENCE_NODE :
            retval = "ENTITY_REFERENCE_NODE"; break;
        case Node.NOTATION_NODE :
            retval = "NOTATION_NODE"; break;
        case Node.PROCESSING_INSTRUCTION_NODE :
            retval = "PROCESSING_INSTRUCTION_NODE"; break;
        case Node.TEXT_NODE:
            retval = "TEXT_NODE"; break;
        }
        return retval;
