class MetalTreeUI
!!!11138562.java!!!	createUI(inout x : JComponent) : ComponentUI
        return new MetalTreeUI();
!!!11138690.java!!!	MetalTreeUI()
        super();
!!!11138818.java!!!	getHorizontalLegBuffer() : int
          return 3;
!!!11138946.java!!!	installUI(inout c : JComponent) : void
        super.installUI( c );
        lineColor = UIManager.getColor( "Tree.line" );

        Object lineStyleFlag = c.getClientProperty( LINE_STYLE );
        decodeLineStyle(lineStyleFlag);
        c.addPropertyChangeListener(lineStyleListener);

!!!11139074.java!!!	uninstallUI(inout c : JComponent) : void
         c.removePropertyChangeListener(lineStyleListener);
         super.uninstallUI(c);
!!!11139202.java!!!	decodeLineStyle(inout lineStyleFlag : Object) : void
      if ( lineStyleFlag == null ||
                    lineStyleFlag.equals(LEG_LINE_STYLE_STRING)){
        lineStyle = LEG_LINE_STYLE; // default case
      } else {
          if ( lineStyleFlag.equals(NO_STYLE_STRING) ) {
              lineStyle = NO_LINE_STYLE;
          } else if ( lineStyleFlag.equals(HORIZ_STYLE_STRING) ) {
              lineStyle = HORIZ_LINE_STYLE;
          }
      }

!!!11139330.java!!!	isLocationInExpandControl(in row : int, in rowLevel : int, in mouseX : int, in mouseY : int) : boolean
        if(tree != null && !isLeaf(row)) {
            int                     boxWidth;

            if(getExpandedIcon() != null)
                boxWidth = getExpandedIcon().getIconWidth() + 6;
            else
                boxWidth = 8;

            Insets i = tree.getInsets();
            int    boxLeftX = (i != null) ? i.left : 0;


            boxLeftX += (((rowLevel + depthOffset - 1) * totalChildIndent) +
                        getLeftChildIndent()) - boxWidth/2;

            int boxRightX = boxLeftX + boxWidth;

            return mouseX >= boxLeftX && mouseX <= boxRightX;
        }
        return false;
!!!11139458.java!!!	paint(inout g : Graphics, inout c : JComponent) : void
        super.paint( g, c );


        // Paint the lines
        if (lineStyle == HORIZ_LINE_STYLE && !largeModel) {
            paintHorizontalSeparators(g,c);
        }
!!!11139586.java!!!	paintHorizontalSeparators(inout g : Graphics, inout c : JComponent) : void
        g.setColor( lineColor );

        Rectangle clipBounds = g.getClipBounds();

        int beginRow = getRowForPath(tree, getClosestPathForLocation
                                     (tree, 0, clipBounds.y));
        int endRow = getRowForPath(tree, getClosestPathForLocation
                             (tree, 0, clipBounds.y + clipBounds.height - 1));

        if ( beginRow <= -1 || endRow <= -1 ) {
            return;
        }

        for ( int i = beginRow; i <= endRow; ++i ) {
            TreePath        path = getPathForRow(tree, i);

            if(path != null && path.getPathCount() == 2) {
                Rectangle       rowBounds = getPathBounds(tree,getPathForRow
                                                          (tree, i));

                // Draw a line at the top
                if(rowBounds != null)
                    g.drawLine(clipBounds.x, rowBounds.y,
                               clipBounds.x + clipBounds.width, rowBounds.y);
            }
        }

!!!11139714.java!!!	paintVerticalPartOfLeg(inout g : Graphics, inout clipBounds : Rectangle, inout insets : Insets, inout path : TreePath) : void
        if (lineStyle == LEG_LINE_STYLE) {
            super.paintVerticalPartOfLeg(g, clipBounds, insets, path);
        }
!!!11139842.java!!!	paintHorizontalPartOfLeg(inout g : Graphics, inout clipBounds : Rectangle, inout insets : Insets, inout bounds : Rectangle, inout path : TreePath, in row : int, inout isExpanded : boolean, inout hasBeenExpanded : boolean, inout isLeaf : boolean) : void
        if (lineStyle == LEG_LINE_STYLE) {
            super.paintHorizontalPartOfLeg(g, clipBounds, insets, bounds,
                                           path, row, isExpanded,
                                           hasBeenExpanded, isLeaf);
        }
