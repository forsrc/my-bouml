class XString
!!!5932290.java!!!	XString(inout val : Object)
    super(val);
!!!5932418.java!!!	XString(inout val : String)
    super(val);
!!!5932546.java!!!	getType() : int
    return CLASS_STRING;
!!!5932674.java!!!	getTypeString() : String
    return "#STRING";
!!!5932802.java!!!	hasString() : boolean
    return true;
!!!5932930.java!!!	num() : double
    return toDouble();
!!!5933058.java!!!	toDouble() : double
    /* XMLCharacterRecognizer.isWhiteSpace(char c) methods treats the following
     * characters as white space characters.
     * ht - horizontal tab, nl - newline , cr - carriage return and sp - space
     * trim() methods by default also takes care of these white space characters
     * So trim() method is used to remove leading and trailing white spaces.
     */
        XMLString s = trim();
        double result = Double.NaN;
        for (int i = 0; i < s.length(); i++)
        {
                char c = s.charAt(i);
    if (c != '-' && c != '.' && ( c < 0X30 || c > 0x39)) {
            // The character is not a '-' or a '.' or a digit
            // then return NaN because something is wrong.
                        return result;
        }
        }
        try
        {
                result = Double.parseDouble(s.toString());
        } catch (NumberFormatException e){}

        return result;
!!!5933186.java!!!	bool() : boolean
    return str().length() > 0;
!!!5933314.java!!!	xstr() : XMLString
    return this;
!!!5933442.java!!!	str() : String
    return (null != m_obj) ? ((String) m_obj) : "";
!!!5933570.java!!!	rtf(inout support : XPathContext) : int

    DTM frag = support.createDocumentFragment();

    frag.appendTextChild(str());

    return frag.getDocument();
!!!5933698.java!!!	dispatchCharactersEvents(inout ch : ContentHandler) : void

    String str = str();

    ch.characters(str.toCharArray(), 0, str.length());
!!!5933826.java!!!	dispatchAsComment(inout lh : LexicalHandler) : void

    String str = str();

    lh.comment(str.toCharArray(), 0, str.length());
!!!5933954.java!!!	length() : int
    return str().length();
!!!5934082.java!!!	charAt(in index : int) : char
    return str().charAt(index);
!!!5934210.java!!!	getChars(in srcBegin : int, in srcEnd : int, inout dst : char [[]], in dstBegin : int) : void
    str().getChars(srcBegin, srcEnd, dst, dstBegin);
!!!5934338.java!!!	equals(inout obj2 : XObject) : boolean

    // In order to handle the 'all' semantics of
    // nodeset comparisons, we always call the
    // nodeset function.
    int t = obj2.getType();
    try
    {
            if (XObject.CLASS_NODESET == t)
              return obj2.equals(this);
            // If at least one object to be compared is a boolean, then each object
            // to be compared is converted to a boolean as if by applying the
            // boolean function.
            else if(XObject.CLASS_BOOLEAN == t)
                return obj2.bool() == bool();
            // Otherwise, if at least one object to be compared is a number, then each object
            // to be compared is converted to a number as if by applying the number function.
            else if(XObject.CLASS_NUMBER == t)
                return obj2.num() == num();
    }
    catch(javax.xml.transform.TransformerException te)
    {
        throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(te);
    }

    // Otherwise, both objects to be compared are converted to strings as
    // if by applying the string function.
    return xstr().equals(obj2.xstr());
!!!5934466.java!!!	equals(inout obj2 : String) : boolean
    return str().equals(obj2);
!!!5934594.java!!!	equals(inout obj2 : XMLString) : boolean
    if (obj2 != null) {
      if (!obj2.hasString()) {
        return obj2.equals(str());
      } else {
        return str().equals(obj2.toString());
      }
    }
    return false;
!!!5934722.java!!!	equals(inout obj2 : Object) : boolean

    if (null == obj2)
      return false;

      // In order to handle the 'all' semantics of
      // nodeset comparisons, we always call the
      // nodeset function.
    else if (obj2 instanceof XNodeSet)
      return obj2.equals(this);
    else if(obj2 instanceof XNumber)
        return obj2.equals(this);
    else
      return str().equals(obj2.toString());
!!!5934850.java!!!	equalsIgnoreCase(inout anotherString : String) : boolean
    return str().equalsIgnoreCase(anotherString);
!!!5934978.java!!!	compareTo(inout xstr : XMLString) : int

    int len1 = this.length();
    int len2 = xstr.length();
    int n = Math.min(len1, len2);
    int i = 0;
    int j = 0;

    while (n-- != 0)
    {
      char c1 = this.charAt(i);
      char c2 = xstr.charAt(j);

      if (c1 != c2)
      {
        return c1 - c2;
      }

      i++;
      j++;
    }

    return len1 - len2;
!!!5935106.java!!!	compareToIgnoreCase(inout str : XMLString) : int
    // %REVIEW%  Like it says, @since 1.2. Doesn't exist in earlier
    // versions of Java, hence we can't yet shell out to it. We can implement
    // it as character-by-character compare, but doing so efficiently
    // is likely to be (ahem) interesting.
    //
    // However, since nobody is actually _using_ this method yet:
    //    return str().compareToIgnoreCase(str.toString());

    throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(
      new java.lang.NoSuchMethodException(
        "Java 1.2 method, not yet implemented"));
!!!5935234.java!!!	startsWith(inout prefix : String, in toffset : int) : boolean
    return str().startsWith(prefix, toffset);
!!!5935362.java!!!	startsWith(inout prefix : String) : boolean
    return startsWith(prefix, 0);
!!!5935490.java!!!	startsWith(inout prefix : XMLString, in toffset : int) : boolean

    int to = toffset;
    int tlim = this.length();
    int po = 0;
    int pc = prefix.length();

    // Note: toffset might be near -1>>>1.
    if ((toffset < 0) || (toffset > tlim - pc))
    {
      return false;
    }

    while (--pc >= 0)
    {
      if (this.charAt(to) != prefix.charAt(po))
      {
        return false;
      }

      to++;
      po++;
    }

    return true;
!!!5935618.java!!!	startsWith(inout prefix : XMLString) : boolean
    return startsWith(prefix, 0);
!!!5935746.java!!!	endsWith(inout suffix : String) : boolean
    return str().endsWith(suffix);
!!!5935874.java!!!	hashCode() : int
    return str().hashCode();
!!!5936002.java!!!	indexOf(in ch : int) : int
    return str().indexOf(ch);
!!!5936130.java!!!	indexOf(in ch : int, in fromIndex : int) : int
    return str().indexOf(ch, fromIndex);
!!!5936258.java!!!	lastIndexOf(in ch : int) : int
    return str().lastIndexOf(ch);
!!!5936386.java!!!	lastIndexOf(in ch : int, in fromIndex : int) : int
    return str().lastIndexOf(ch, fromIndex);
!!!5936514.java!!!	indexOf(inout str : String) : int
    return str().indexOf(str);
!!!5936642.java!!!	indexOf(inout str : XMLString) : int
    return str().indexOf(str.toString());
!!!5936770.java!!!	indexOf(inout str : String, in fromIndex : int) : int
    return str().indexOf(str, fromIndex);
!!!5936898.java!!!	lastIndexOf(inout str : String) : int
    return str().lastIndexOf(str);
!!!5937026.java!!!	lastIndexOf(inout str : String, in fromIndex : int) : int
    return str().lastIndexOf(str, fromIndex);
!!!5937154.java!!!	substring(in beginIndex : int) : XMLString
    return new XString(str().substring(beginIndex));
!!!5937282.java!!!	substring(in beginIndex : int, in endIndex : int) : XMLString
    return new XString(str().substring(beginIndex, endIndex));
!!!5937410.java!!!	concat(inout str : String) : XMLString

    // %REVIEW% Make an FSB here?
    return new XString(str().concat(str));
!!!5937538.java!!!	toLowerCase(inout locale : Locale) : XMLString
    return new XString(str().toLowerCase(locale));
!!!5937666.java!!!	toLowerCase() : XMLString
    return new XString(str().toLowerCase());
!!!5937794.java!!!	toUpperCase(inout locale : Locale) : XMLString
    return new XString(str().toUpperCase(locale));
!!!5937922.java!!!	toUpperCase() : XMLString
    return new XString(str().toUpperCase());
!!!5938050.java!!!	trim() : XMLString
    return new XString(str().trim());
!!!5938178.java!!!	isSpace(in ch : char) : boolean
    return XMLCharacterRecognizer.isWhiteSpace(ch);  // Take the easy way out for now.
!!!5938306.java!!!	fixWhiteSpace(inout trimHead : boolean, inout trimTail : boolean, inout doublePunctuationSpaces : boolean) : XMLString

    // %OPT% !!!!!!!
    int len = this.length();
    char[] buf = new char[len];

    this.getChars(0, len, buf, 0);

    boolean edit = false;
    int s;

    for (s = 0; s < len; s++)
    {
      if (isSpace(buf[s]))
      {
        break;
      }
    }

    /* replace S to ' '. and ' '+ -> single ' '. */
    int d = s;
    boolean pres = false;

    for (; s < len; s++)
    {
      char c = buf[s];

      if (isSpace(c))
      {
        if (!pres)
        {
          if (' ' != c)
          {
            edit = true;
          }

          buf[d++] = ' ';

          if (doublePunctuationSpaces && (s != 0))
          {
            char prevChar = buf[s - 1];

            if (!((prevChar == '.') || (prevChar == '!')
                  || (prevChar == '?')))
            {
              pres = true;
            }
          }
          else
          {
            pres = true;
          }
        }
        else
        {
          edit = true;
          pres = true;
        }
      }
      else
      {
        buf[d++] = c;
        pres = false;
      }
    }

    if (trimTail && 1 <= d && ' ' == buf[d - 1])
    {
      edit = true;

      d--;
    }

    int start = 0;

    if (trimHead && 0 < d && ' ' == buf[0])
    {
      edit = true;

      start++;
    }

    XMLStringFactory xsf = XMLStringFactoryImpl.getFactory();

    return edit ? xsf.newstr(new String(buf, start, d - start)) : this;
!!!5938434.java!!!	callVisitors(inout owner : ExpressionOwner, inout visitor : XPathVisitor) : void
        visitor.visitStringLiteral(owner, this);
