class InstructionFinder
!!!3616514.java!!!	InstructionFinder(inout il : InstructionList)
    this.il = il;
    reread();
!!!3616642.java!!!	reread() : void
    int    size  = il.getLength();
    char[] buf   = new char[size]; // Create a string with length equal to il length
    handles      = il.getInstructionHandles();

    // Map opcodes to characters
    for(int i=0; i < size; i++)
      buf[i] = makeChar(handles[i].getInstruction().getOpcode());

    il_string = new String(buf);
!!!3616770.java!!!	mapName(inout pattern : String) : String
    String result = (String)map.get(pattern);

    if(result != null)
      return result;

    for(short i=0; i < NO_OPCODES; i++)
      if(pattern.equals(Constants.OPCODE_NAMES[i]))
        return "" + makeChar(i);

    throw new RuntimeException("Instruction unknown: " + pattern);
!!!3616898.java!!!	compilePattern(inout pattern : String) : String
    String       lower      = pattern.toLowerCase();
    StringBuffer buf        = new StringBuffer();
    int          size       = pattern.length();

    for(int i=0; i < size; i++) {
      char ch = lower.charAt(i);

      if(Character.isLetterOrDigit(ch)) {
        StringBuffer name = new StringBuffer();

        while((Character.isLetterOrDigit(ch) || ch == '_') && i < size) {
          name.append(ch);

          if(++i < size)
            ch = lower.charAt(i);
          else
            break;
        }

        i--;

        buf.append(mapName(name.toString()));
      } else if(!Character.isWhitespace(ch))
        buf.append(ch);
    }

    return buf.toString();
!!!3617026.java!!!	getMatch(in matched_from : int, in match_length : int) : InstructionHandle
    InstructionHandle[] match = new InstructionHandle[match_length];
    System.arraycopy(handles, matched_from, match, 0, match_length);

    return match;
!!!3617154.java!!!	search(inout pattern : String, inout from : InstructionHandle, inout constraint : InstructionFinder::CodeConstraint) : Iterator
    String search = compilePattern(pattern);
    int  start    = -1;

    for(int i=0; i < handles.length; i++) {
      if(handles[i] == from) {
        start = i; // Where to start search from (index)
        break;
      }
    }

    if(start == -1)
      throw new ClassGenException("Instruction handle " + from +
                                  " not found in instruction list.");
    try {
      RE regex = new RE(search);
      ArrayList matches = new ArrayList();

      while(start < il_string.length() && regex.match(il_string, start)) {
        int startExpr = regex.getParenStart(0);
        int endExpr   = regex.getParenEnd(0);
        int lenExpr   = regex.getParenLength(0);

        InstructionHandle[] match = getMatch(startExpr, lenExpr);

        if((constraint == null) || constraint.checkCode(match))
          matches.add(match);
        start = endExpr;
      }

      return matches.iterator();
    } catch(RESyntaxException e) {
      System.err.println(e);
    }

    return null;
!!!3617282.java!!!	search(inout pattern : String) : Iterator
    return search(pattern, il.getStart(), null);
!!!3617410.java!!!	search(inout pattern : String, inout from : InstructionHandle) : Iterator
    return search(pattern, from, null);
!!!3617538.java!!!	search(inout pattern : String, inout constraint : InstructionFinder::CodeConstraint) : Iterator
    return search(pattern, il.getStart(), constraint);
!!!3617666.java!!!	makeChar(in opcode : short) : char
    return (char)(opcode + OFFSET);
!!!3617794.java!!!	getInstructionList() : InstructionList
 return il;
!!!3618050.java!!!	precompile(in from : short, in to : short, in extra : short) : String
    StringBuffer buf = new StringBuffer("(");

    for(short i=from; i <= to; i++) {
      buf.append(makeChar(i));
      buf.append('|');
    }

    buf.append(makeChar(extra));
    buf.append(")");
    return buf.toString();
!!!3618178.java!!!	pattern2string(inout pattern : String) : String
    return pattern2string(pattern, true);
!!!3618306.java!!!	pattern2string(inout pattern : String, inout make_string : boolean) : String
    StringBuffer buf = new StringBuffer();

    for(int i=0; i < pattern.length(); i++) {
      char ch = pattern.charAt(i);

      if(ch >= OFFSET) {
        if(make_string)
          buf.append(Constants.OPCODE_NAMES[ch - OFFSET]);
        else
          buf.append((int)(ch - OFFSET));
      } else
        buf.append(ch);
    }

    return buf.toString();
