class StepIterator
!!!3978242.java!!!	StepIterator(inout source : DTMAxisIterator, inout iterator : DTMAxisIterator)
        _source = source;
        _iterator = iterator;
// System.out.println("SI source = " + source + " this = " + this);
// System.out.println("SI iterator = " + iterator + " this = " + this);
!!!3978370.java!!!	setRestartable(inout isRestartable : boolean) : void
        _isRestartable = isRestartable;
        _source.setRestartable(isRestartable);
        _iterator.setRestartable(true);         // must be restartable
!!!3978498.java!!!	cloneIterator() : DTMAxisIterator
        _isRestartable = false;
        try {
            final StepIterator clone = (StepIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._iterator = _iterator.cloneIterator();
            clone._iterator.setRestartable(true);       // must be restartable
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
!!!3978626.java!!!	setStartNode(in node : int) : DTMAxisIterator
        if (_isRestartable) {
            // Set start node for left-hand iterator...
            _source.setStartNode(_startNode = node);

            // ... and get start node for right-hand iterator from left-hand,
            // with special case for //* path - see ParentLocationPath
            _iterator.setStartNode(_includeSelf ? _startNode : _source.next());
            return resetPosition();
        }
        return this;
!!!3978754.java!!!	reset() : DTMAxisIterator
        _source.reset();
        // Special case for //* path - see ParentLocationPath
        _iterator.setStartNode(_includeSelf ? _startNode : _source.next());
        return resetPosition();
!!!3978882.java!!!	next() : int
        for (int node;;) {
            // Try to get another node from the right-hand iterator
            if ((node = _iterator.next()) != END) {
                return returnNode(node);
            }
            // If not, get the next starting point from left-hand iterator...
            else if ((node = _source.next()) == END) {
                return END;
            }
            // ...and pass it on to the right-hand iterator
            else {
                _iterator.setStartNode(node);
            }
        }
!!!3979010.java!!!	setMark() : void
        _source.setMark();
        _iterator.setMark();
        //_pos = _position;
!!!3979138.java!!!	gotoMark() : void
        _source.gotoMark();
        _iterator.gotoMark();
        //_position = _pos;
