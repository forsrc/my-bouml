class Name
!!!7213314.java!!!	Name(in index : int, inout type : LambdaForm::BasicType, inout function : LambdaForm::NamedFunction, inout arguments : Object [[]])
            this.index = (short)index;
            this.type = type;
            this.function = function;
            this.arguments = arguments;
            this.constraint = null;
            assert(this.index == index);
!!!7213442.java!!!	Name(inout that : LambdaForm::Name, inout constraint : Object)
            this.index = that.index;
            this.type = that.type;
            this.function = that.function;
            this.arguments = that.arguments;
            this.constraint = constraint;
            assert(constraint == null || isParam());  // only params have constraints
            assert(constraint == null || constraint instanceof BoundMethodHandle.SpeciesData || constraint instanceof Class);
!!!7213570.java!!!	Name(inout function : MethodHandle, inout  : Object...arguments)
            this(new NamedFunction(function), arguments);
!!!7213698.java!!!	Name(inout functionType : MethodType, inout  : Object...arguments)
            this(new NamedFunction(functionType), arguments);
            assert(arguments[0] instanceof Name && ((Name)arguments[0]).type == L_TYPE);
!!!7213826.java!!!	Name(inout function : MemberName, inout  : Object...arguments)
            this(new NamedFunction(function), arguments);
!!!7213954.java!!!	Name(inout function : LambdaForm::NamedFunction, inout  : Object...arguments)
            this(-1, function.returnType(), function, arguments = Arrays.copyOf(arguments, arguments.length, Object[].class));
            assert(arguments.length == function.arity()) : "arity mismatch: arguments.length=" + arguments.length + " == function.arity()=" + function.arity() + " in " + debugString();
            for (int i = 0; i < arguments.length; i++)
                assert(typesMatch(function.parameterType(i), arguments[i])) : "types don't match: function.parameterType(" + i + ")=" + function.parameterType(i) + ", arguments[" + i + "]=" + arguments[i] + " in " + debugString();
!!!7214082.java!!!	Name(in index : int, inout type : LambdaForm::BasicType)
            this(index, type, null, null);
!!!7214210.java!!!	Name(inout type : LambdaForm::BasicType)
 this(-1, type);
!!!7214338.java!!!	type() : LambdaForm::BasicType
 return type;
!!!7214466.java!!!	index() : int
 return index;
!!!7214594.java!!!	initIndex(in i : int) : boolean
            if (index != i) {
                if (index != -1)  return false;
                index = (short)i;
            }
            return true;
!!!7214722.java!!!	typeChar() : char
            return type.btChar;
!!!7214850.java!!!	resolve() : void
            if (function != null)
                function.resolve();
!!!7214978.java!!!	newIndex(in i : int) : LambdaForm::Name
            if (initIndex(i))  return this;
            return cloneWithIndex(i);
!!!7215106.java!!!	cloneWithIndex(in i : int) : LambdaForm::Name
            Object[] newArguments = (arguments == null) ? null : arguments.clone();
            return new Name(i, type, function, newArguments).withConstraint(constraint);
!!!7215234.java!!!	withConstraint(inout constraint : Object) : LambdaForm::Name
            if (constraint == this.constraint)  return this;
            return new Name(this, constraint);
!!!7215362.java!!!	replaceName(inout oldName : LambdaForm::Name, inout newName : LambdaForm::Name) : LambdaForm::Name
  // FIXME: use replaceNames uniformly
            if (oldName == newName)  return this;
            @SuppressWarnings("LocalVariableHidesMemberVariable")
            Object[] arguments = this.arguments;
            if (arguments == null)  return this;
            boolean replaced = false;
            for (int j = 0; j < arguments.length; j++) {
                if (arguments[j] == oldName) {
                    if (!replaced) {
                        replaced = true;
                        arguments = arguments.clone();
                    }
                    arguments[j] = newName;
                }
            }
            if (!replaced)  return this;
            return new Name(function, arguments);
!!!7215490.java!!!	replaceNames(inout oldNames : LambdaForm::Name [[]], inout newNames : LambdaForm::Name [[]], in start : int, in end : int) : LambdaForm::Name
            if (start >= end)  return this;
            @SuppressWarnings("LocalVariableHidesMemberVariable")
            Object[] arguments = this.arguments;
            boolean replaced = false;
        eachArg:
            for (int j = 0; j < arguments.length; j++) {
                if (arguments[j] instanceof Name) {
                    Name n = (Name) arguments[j];
                    int check = n.index;
                    // harmless check to see if the thing is already in newNames:
                    if (check >= 0 && check < newNames.length && n == newNames[check])
                        continue eachArg;
                    // n might not have the correct index: n != oldNames[n.index].
                    for (int i = start; i < end; i++) {
                        if (n == oldNames[i]) {
                            if (n == newNames[i])
                                continue eachArg;
                            if (!replaced) {
                                replaced = true;
                                arguments = arguments.clone();
                            }
                            arguments[j] = newNames[i];
                            continue eachArg;
                        }
                    }
                }
            }
            if (!replaced)  return this;
            return new Name(function, arguments);
!!!7215618.java!!!	internArguments() : void
            @SuppressWarnings("LocalVariableHidesMemberVariable")
            Object[] arguments = this.arguments;
            for (int j = 0; j < arguments.length; j++) {
                if (arguments[j] instanceof Name) {
                    Name n = (Name) arguments[j];
                    if (n.isParam() && n.index < INTERNED_ARGUMENT_LIMIT)
                        arguments[j] = internArgument(n);
                }
            }
!!!7215746.java!!!	isParam() : boolean
            return function == null;
!!!7215874.java!!!	isConstantZero() : boolean
            return !isParam() && arguments.length == 0 && function.isConstantZero();
!!!7216002.java!!!	toString() : String
            return (isParam()?"a":"t")+(index >= 0 ? index : System.identityHashCode(this))+":"+typeChar();
!!!7216130.java!!!	debugString() : String
            String s = paramString();
            return (function == null) ? s : s + "=" + exprString();
!!!7216258.java!!!	paramString() : String
            String s = toString();
            Object c = constraint;
            if (c == null)
                return s;
            if (c instanceof Class)  c = ((Class<?>)c).getSimpleName();
            return s + "/" + c;
!!!7216386.java!!!	exprString() : String
            if (function == null)  return toString();
            StringBuilder buf = new StringBuilder(function.toString());
            buf.append("(");
            String cma = "";
            for (Object a : arguments) {
                buf.append(cma); cma = ",";
                if (a instanceof Name || a instanceof Integer)
                    buf.append(a);
                else
                    buf.append("(").append(a).append(")");
            }
            buf.append(")");
            return buf.toString();
!!!7216514.java!!!	typesMatch(inout parameterType : LambdaForm::BasicType, inout object : Object) : boolean
            if (object instanceof Name) {
                return ((Name)object).type == parameterType;
            }
            switch (parameterType) {
                case I_TYPE:  return object instanceof Integer;
                case J_TYPE:  return object instanceof Long;
                case F_TYPE:  return object instanceof Float;
                case D_TYPE:  return object instanceof Double;
            }
            assert(parameterType == L_TYPE);
            return true;
!!!7216642.java!!!	lastUseIndex(inout n : LambdaForm::Name) : int
            if (arguments == null)  return -1;
            for (int i = arguments.length; --i >= 0; ) {
                if (arguments[i] == n)  return i;
            }
            return -1;
!!!7216770.java!!!	useCount(inout n : LambdaForm::Name) : int
            if (arguments == null)  return 0;
            int count = 0;
            for (int i = arguments.length; --i >= 0; ) {
                if (arguments[i] == n)  ++count;
            }
            return count;
!!!7216898.java!!!	contains(inout n : LambdaForm::Name) : boolean
            return this == n || lastUseIndex(n) >= 0;
!!!7217026.java!!!	equals(inout that : LambdaForm::Name) : boolean
            if (this == that)  return true;
            if (isParam())
                // each parameter is a unique atom
                return false;  // this != that
            return
                //this.index == that.index &&
                this.type == that.type &&
                this.function.equals(that.function) &&
                Arrays.equals(this.arguments, that.arguments);
!!!7217154.java!!!	equals(inout x : Object) : boolean
            return x instanceof Name && equals((Name)x);
!!!7217282.java!!!	hashCode() : int
            if (isParam())
                return index | (type.ordinal() << 8);
            return function.hashCode() ^ Arrays.hashCode(arguments);
