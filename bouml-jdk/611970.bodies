class RealType
!!!3870594.java!!!	toString() : String
        return "real";
!!!3870722.java!!!	identicalTo(inout other : Type) : boolean
        return this == other;
!!!3870850.java!!!	toSignature() : String
        return "D";
!!!3870978.java!!!	toJCType() : Type
        return com.sun.org.apache.bcel.internal.generic.Type.DOUBLE;
!!!3871106.java!!!	distanceTo(inout type : Type) : int
        if (type == this) {
            return 0;
        }
        else if (type == Type.Int) {
            return 1;
        }
        else {
            return Integer.MAX_VALUE;
        }
!!!3871234.java!!!	translateTo(inout classGen : ClassGenerator, inout methodGen : MethodGenerator, inout type : Type) : void
        if (type == Type.String) {
            translateTo(classGen, methodGen, (StringType) type);
        }
        else if (type == Type.Boolean) {
            translateTo(classGen, methodGen, (BooleanType) type);
        }
        else if (type == Type.Reference) {
            translateTo(classGen, methodGen, (ReferenceType) type);
        }
        else if (type == Type.Int) {
            translateTo(classGen, methodGen, (IntType) type);
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                        toString(), type.toString());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
!!!3871362.java!!!	translateTo(inout classGen : ClassGenerator, inout methodGen : MethodGenerator, inout type : StringType) : void
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();
        il.append(new INVOKESTATIC(cpg.addMethodref(BASIS_LIBRARY_CLASS,
                                                    "realToString",
                                                    "(D)" + STRING_SIG)));
!!!3871490.java!!!	translateTo(inout classGen : ClassGenerator, inout methodGen : MethodGenerator, inout type : BooleanType) : void
        final InstructionList il = methodGen.getInstructionList();
        FlowList falsel = translateToDesynthesized(classGen, methodGen, type);
        il.append(ICONST_1);
        final BranchHandle truec = il.append(new GOTO(null));
        falsel.backPatch(il.append(ICONST_0));
        truec.setTarget(il.append(NOP));
!!!3871618.java!!!	translateTo(inout classGen : ClassGenerator, inout methodGen : MethodGenerator, inout type : IntType) : void
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();
        il.append(new INVOKESTATIC(cpg.addMethodref(BASIS_LIBRARY_CLASS,
                                                    "realToInt","(D)I")));
!!!3871746.java!!!	translateToDesynthesized(inout classGen : ClassGenerator, inout methodGen : MethodGenerator, inout type : BooleanType) : FlowList
        LocalVariableGen local;
        final FlowList flowlist = new FlowList();
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();

        // Store real into a local variable
        il.append(DUP2);
        local = methodGen.addLocalVariable("real_to_boolean_tmp",
                                           com.sun.org.apache.bcel.internal.generic.Type.DOUBLE,
                                           null, null);
        local.setStart(il.append(new DSTORE(local.getIndex())));

        // Compare it to 0.0
        il.append(DCONST_0);
        il.append(DCMPG);
        flowlist.add(il.append(new IFEQ(null)));

        //!!! call isNaN
        // Compare it to itself to see if NaN
        il.append(new DLOAD(local.getIndex()));
        local.setEnd(il.append(new DLOAD(local.getIndex())));
        il.append(DCMPG);
        flowlist.add(il.append(new IFNE(null)));        // NaN != NaN
        return flowlist;
!!!3871874.java!!!	translateTo(inout classGen : ClassGenerator, inout methodGen : MethodGenerator, inout type : ReferenceType) : void
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();
        il.append(new NEW(cpg.addClass(DOUBLE_CLASS)));
        il.append(DUP_X2);
        il.append(DUP_X2);
        il.append(POP);
        il.append(new INVOKESPECIAL(cpg.addMethodref(DOUBLE_CLASS,
                                                     "<init>", "(D)V")));
!!!3872002.java!!!	translateTo(inout classGen : ClassGenerator, inout methodGen : MethodGenerator, in clazz : Class) : void
        final InstructionList il = methodGen.getInstructionList();
        if (clazz == Character.TYPE) {
            il.append(D2I);
            il.append(I2C);
        }
        else if (clazz == Byte.TYPE) {
            il.append(D2I);
            il.append(I2B);
        }
        else if (clazz == Short.TYPE) {
            il.append(D2I);
            il.append(I2S);
        }
        else if (clazz == Integer.TYPE) {
            il.append(D2I);
        }
        else if (clazz == Long.TYPE) {
            il.append(D2L);
        }
        else if (clazz == Float.TYPE) {
            il.append(D2F);
        }
        else if (clazz == Double.TYPE) {
            il.append(NOP);
        }
        // Is Double <: clazz? I.e. clazz in { Double, Number, Object }
        else if (clazz.isAssignableFrom(java.lang.Double.class)) {
            translateTo(classGen, methodGen, Type.Reference);
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                        toString(), clazz.getName());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
!!!3872130.java!!!	translateFrom(inout classGen : ClassGenerator, inout methodGen : MethodGenerator, inout clazz : Class) : void
        InstructionList il = methodGen.getInstructionList();

        if (clazz == Character.TYPE || clazz == Byte.TYPE ||
            clazz == Short.TYPE || clazz == Integer.TYPE) {
            il.append(I2D);
        }
        else if (clazz == Long.TYPE) {
            il.append(L2D);
        }
        else if (clazz == Float.TYPE) {
            il.append(F2D);
        }
        else if (clazz == Double.TYPE) {
            il.append(NOP);
        }
        else {
            ErrorMsg err = new ErrorMsg(ErrorMsg.DATA_CONVERSION_ERR,
                                        toString(), clazz.getName());
            classGen.getParser().reportError(Constants.FATAL, err);
        }
!!!3872258.java!!!	translateBox(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
        translateTo(classGen, methodGen, Type.Reference);
!!!3872386.java!!!	translateUnBox(inout classGen : ClassGenerator, inout methodGen : MethodGenerator) : void
        final ConstantPoolGen cpg = classGen.getConstantPool();
        final InstructionList il = methodGen.getInstructionList();
        il.append(new CHECKCAST(cpg.addClass(DOUBLE_CLASS)));
        il.append(new INVOKEVIRTUAL(cpg.addMethodref(DOUBLE_CLASS,
                                                     DOUBLE_VALUE,
                                                     DOUBLE_VALUE_SIG)));
!!!3872514.java!!!	ADD() : Instruction
        return InstructionConstants.DADD;
!!!3872642.java!!!	SUB() : Instruction
        return InstructionConstants.DSUB;
!!!3872770.java!!!	MUL() : Instruction
        return InstructionConstants.DMUL;
!!!3872898.java!!!	DIV() : Instruction
        return InstructionConstants.DDIV;
!!!3873026.java!!!	REM() : Instruction
        return InstructionConstants.DREM;
!!!3873154.java!!!	NEG() : Instruction
        return InstructionConstants.DNEG;
!!!3873282.java!!!	LOAD(in slot : int) : Instruction
        return new DLOAD(slot);
!!!3873410.java!!!	STORE(in slot : int) : Instruction
        return new DSTORE(slot);
!!!3873538.java!!!	POP() : Instruction
        return POP2;
!!!3873666.java!!!	CMP(inout less : boolean) : Instruction
        return less ? InstructionConstants.DCMPG : InstructionConstants.DCMPL;
!!!3873794.java!!!	DUP() : Instruction
        return DUP2;
