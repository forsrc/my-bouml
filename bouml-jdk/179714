format 222
"tree" // jdk1.8::com::sun::source::tree
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/source/tree/"
  java_package "com.sun.source.tree"
  classview 172418 "tree"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 842114 "AnnotatedTypeTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an annotated type

For example:
<pre>
   {@code @}<em>annotationType String</em>
   {@code @}<em>annotationType</em> ( <em>arguments</em> ) <em>Date</em>
</pre>

@see \"JSR 308: Annotations on Java Types\"

@author Mahmood Ali
@since 1.8
"
      classrelation 2868610 // <generalisation>
	relation 2868610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2868610 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6005762 "getAnnotations"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends AnnotationTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6005890 "getUnderlyingType"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 842242 "ExpressionTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node used as the base class for the different types of
expressions.

@jls chapter 15

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2868482 // <generalisation>
	relation 2868482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2868482 // <generalisation>
	  b parent class_ref 842370 // Tree
      end
    end

    class 842370 "Tree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Common interface for all nodes in an abstract syntax tree.

<p><b>WARNING:</b> This interface and its sub-interfaces are
subject to change as the Java&trade; programming language evolves.
These interfaces are implemented by the JDK Java compiler (javac)
and should not be implemented either directly or indirectly by
other applications.

@author Peter von der Ah&eacute;
@author Jonathan Gibbons

@since 1.6
"
      class 842498 "Kind"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	java_annotation "@jdk.Exported
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1314306 "ANNOTATED_TYPE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(AnnotatedTypeTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1314434 "ANNOTATION"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(AnnotationTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link AnnotationTree}
representing declaration annotations.
"
	end

	attribute 1314562 "TYPE_ANNOTATION"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(AnnotationTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link AnnotationTree}
representing type annotations.
"
	end

	attribute 1314690 "ARRAY_ACCESS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ArrayAccessTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ArrayAccessTree}.
"
	end

	attribute 1314818 "ARRAY_TYPE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ArrayTypeTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ArrayTypeTree}.
"
	end

	attribute 1314946 "ASSERT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(AssertTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link AssertTree}.
"
	end

	attribute 1315074 "ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(AssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link AssignmentTree}.
"
	end

	attribute 1315202 "BLOCK"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BlockTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BlockTree}.
"
	end

	attribute 1315330 "BREAK"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BreakTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BreakTree}.
"
	end

	attribute 1315458 "CASE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CaseTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CaseTree}.
"
	end

	attribute 1315586 "CATCH"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CatchTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CatchTree}.
"
	end

	attribute 1315714 "CLASS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ClassTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ClassTree} representing classes.
"
	end

	attribute 1315842 "COMPILATION_UNIT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompilationUnitTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompilationUnitTree}.
"
	end

	attribute 1315970 "CONDITIONAL_EXPRESSION"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ConditionalExpressionTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ConditionalExpressionTree}.
"
	end

	attribute 1316098 "CONTINUE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ContinueTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ContinueTree}.
"
	end

	attribute 1316226 "DO_WHILE_LOOP"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(DoWhileLoopTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link DoWhileLoopTree}.
"
	end

	attribute 1316354 "ENHANCED_FOR_LOOP"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(EnhancedForLoopTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link EnhancedForLoopTree}.
"
	end

	attribute 1316482 "EXPRESSION_STATEMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ExpressionStatementTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ExpressionStatementTree}.
"
	end

	attribute 1316610 "MEMBER_SELECT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(MemberSelectTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link MemberSelectTree}.
"
	end

	attribute 1316738 "MEMBER_REFERENCE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(MemberReferenceTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link MemberReferenceTree}.
"
	end

	attribute 1316866 "FOR_LOOP"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ForLoopTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ForLoopTree}.
"
	end

	attribute 1316994 "IDENTIFIER"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(IdentifierTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link IdentifierTree}.
"
	end

	attribute 1317122 "IF"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(IfTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link IfTree}.
"
	end

	attribute 1317250 "IMPORT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ImportTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ImportTree}.
"
	end

	attribute 1317378 "INSTANCE_OF"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(InstanceOfTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link InstanceOfTree}.
"
	end

	attribute 1317506 "LABELED_STATEMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LabeledStatementTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LabeledStatementTree}.
"
	end

	attribute 1317634 "METHOD"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(MethodTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link MethodTree}.
"
	end

	attribute 1317762 "METHOD_INVOCATION"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(MethodInvocationTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link MethodInvocationTree}.
"
	end

	attribute 1317890 "MODIFIERS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ModifiersTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ModifiersTree}.
"
	end

	attribute 1318018 "NEW_ARRAY"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(NewArrayTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link NewArrayTree}.
"
	end

	attribute 1318146 "NEW_CLASS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(NewClassTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link NewClassTree}.
"
	end

	attribute 1318274 "LAMBDA_EXPRESSION"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LambdaExpressionTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LambdaExpressionTree}.
"
	end

	attribute 1318402 "PARENTHESIZED"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ParenthesizedTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ParenthesizedTree}.
"
	end

	attribute 1318530 "PRIMITIVE_TYPE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(PrimitiveTypeTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link PrimitiveTypeTree}.
"
	end

	attribute 1318658 "RETURN"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ReturnTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ReturnTree}.
"
	end

	attribute 1318786 "EMPTY_STATEMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(EmptyStatementTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link EmptyStatementTree}.
"
	end

	attribute 1318914 "SWITCH"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(SwitchTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link SwitchTree}.
"
	end

	attribute 1319042 "SYNCHRONIZED"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(SynchronizedTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link SynchronizedTree}.
"
	end

	attribute 1319170 "THROW"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ThrowTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ThrowTree}.
"
	end

	attribute 1319298 "TRY"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(TryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link TryTree}.
"
	end

	attribute 1319426 "PARAMETERIZED_TYPE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ParameterizedTypeTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ParameterizedTypeTree}.
"
	end

	attribute 1319554 "UNION_TYPE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnionTypeTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnionTypeTree}.
"
	end

	attribute 1319682 "INTERSECTION_TYPE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(IntersectionTypeTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link IntersectionTypeTree}.
"
	end

	attribute 1319810 "TYPE_CAST"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(TypeCastTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link TypeCastTree}.
"
	end

	attribute 1319938 "TYPE_PARAMETER"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(TypeParameterTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link TypeParameterTree}.
"
	end

	attribute 1320066 "VARIABLE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(VariableTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link VariableTree}.
"
	end

	attribute 1320194 "WHILE_LOOP"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(WhileLoopTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link WhileLoopTree}.
"
	end

	attribute 1320322 "POSTFIX_INCREMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnaryTree} representing postfix
increment operator {@code ++}.
"
	end

	attribute 1320450 "POSTFIX_DECREMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnaryTree} representing postfix
decrement operator {@code --}.
"
	end

	attribute 1320578 "PREFIX_INCREMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnaryTree} representing prefix
increment operator {@code ++}.
"
	end

	attribute 1320706 "PREFIX_DECREMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnaryTree} representing prefix
decrement operator {@code --}.
"
	end

	attribute 1320834 "UNARY_PLUS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnaryTree} representing unary plus
operator {@code +}.
"
	end

	attribute 1320962 "UNARY_MINUS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnaryTree} representing unary minus
operator {@code -}.
"
	end

	attribute 1321090 "BITWISE_COMPLEMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnaryTree} representing bitwise
complement operator {@code ~}.
"
	end

	attribute 1321218 "LOGICAL_COMPLEMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(UnaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link UnaryTree} representing logical
complement operator {@code !}.
"
	end

	attribute 1321346 "MULTIPLY"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
multiplication {@code *}.
"
	end

	attribute 1321474 "DIVIDE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
division {@code /}.
"
	end

	attribute 1321602 "REMAINDER"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
remainder {@code %}.
"
	end

	attribute 1321730 "PLUS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
addition or string concatenation {@code +}.
"
	end

	attribute 1321858 "MINUS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
subtraction {@code -}.
"
	end

	attribute 1321986 "LEFT_SHIFT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
left shift {@code <<}.
"
	end

	attribute 1322114 "RIGHT_SHIFT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
right shift {@code >>}.
"
	end

	attribute 1322242 "UNSIGNED_RIGHT_SHIFT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
unsigned right shift {@code >>>}.
"
	end

	attribute 1322370 "LESS_THAN"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
less-than {@code <}.
"
	end

	attribute 1322498 "GREATER_THAN"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
greater-than {@code >}.
"
	end

	attribute 1322626 "LESS_THAN_EQUAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
less-than-equal {@code <=}.
"
	end

	attribute 1322754 "GREATER_THAN_EQUAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
greater-than-equal {@code >=}.
"
	end

	attribute 1322882 "EQUAL_TO"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
equal-to {@code ==}.
"
	end

	attribute 1323010 "NOT_EQUAL_TO"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
not-equal-to {@code !=}.
"
	end

	attribute 1323138 "AND"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
bitwise and logical \"and\" {@code &}.
"
	end

	attribute 1323266 "XOR"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
bitwise and logical \"xor\" {@code ^}.
"
	end

	attribute 1323394 "OR"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
bitwise and logical \"or\" {@code |}.
"
	end

	attribute 1323522 "CONDITIONAL_AND"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
conditional-and {@code &&}.
"
	end

	attribute 1323650 "CONDITIONAL_OR"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(BinaryTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link BinaryTree} representing
conditional-or {@code ||}.
"
	end

	attribute 1323778 "MULTIPLY_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
multiplication assignment {@code *=}.
"
	end

	attribute 1323906 "DIVIDE_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
division assignment {@code /=}.
"
	end

	attribute 1324034 "REMAINDER_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
remainder assignment {@code %=}.
"
	end

	attribute 1324162 "PLUS_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
addition or string concatenation assignment {@code +=}.
"
	end

	attribute 1324290 "MINUS_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
subtraction assignment {@code -=}.
"
	end

	attribute 1324418 "LEFT_SHIFT_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
left shift assignment {@code <<=}.
"
	end

	attribute 1324546 "RIGHT_SHIFT_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
right shift assignment {@code >>=}.
"
	end

	attribute 1324674 "UNSIGNED_RIGHT_SHIFT_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
unsigned right shift assignment {@code >>>=}.
"
	end

	attribute 1324802 "AND_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
bitwise and logical \"and\" assignment {@code &=}.
"
	end

	attribute 1324930 "XOR_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
bitwise and logical \"xor\" assignment {@code ^=}.
"
	end

	attribute 1325058 "OR_ASSIGNMENT"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(CompoundAssignmentTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link CompoundAssignmentTree} representing
bitwise and logical \"or\" assignment {@code |=}.
"
	end

	attribute 1325186 "INT_LITERAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LiteralTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LiteralTree} representing
an integral literal expression of type {@code int}.
"
	end

	attribute 1325314 "LONG_LITERAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LiteralTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LiteralTree} representing
an integral literal expression of type {@code long}.
"
	end

	attribute 1325442 "FLOAT_LITERAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LiteralTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LiteralTree} representing
a floating-point literal expression of type {@code float}.
"
	end

	attribute 1325570 "DOUBLE_LITERAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LiteralTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LiteralTree} representing
a floating-point literal expression of type {@code double}.
"
	end

	attribute 1325698 "BOOLEAN_LITERAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LiteralTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LiteralTree} representing
a boolean literal expression of type {@code boolean}.
"
	end

	attribute 1325826 "CHAR_LITERAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LiteralTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LiteralTree} representing
a character literal expression of type {@code char}.
"
	end

	attribute 1325954 "STRING_LITERAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LiteralTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LiteralTree} representing
a string literal expression of type {@link String}.
"
	end

	attribute 1326082 "NULL_LITERAL"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(LiteralTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link LiteralTree} representing
the use of {@code null}.
"
	end

	attribute 1326210 "UNBOUNDED_WILDCARD"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(WildcardTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link WildcardTree} representing
an unbounded wildcard type argument.
"
	end

	attribute 1326338 "EXTENDS_WILDCARD"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(WildcardTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link WildcardTree} representing
an extends bounded wildcard type argument.
"
	end

	attribute 1326466 "SUPER_WILDCARD"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(WildcardTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link WildcardTree} representing
a super bounded wildcard type argument.
"
	end

	attribute 1326594 "ERRONEOUS"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ErroneousTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ErroneousTree}.
"
	end

	attribute 1326722 "INTERFACE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ClassTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ClassTree} representing interfaces.
"
	end

	attribute 1326850 "ENUM"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ClassTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ClassTree} representing enums.
"
	end

	attribute 1326978 "ANNOTATION_TYPE"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(ClassTree.class),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Used for instances of {@link ClassTree} representing annotation types.
"
	end

	attribute 1327106 "OTHER"
	  public type class_ref 842498 // Kind
	  cpp_decl ""
	  java_decl "  ${@}${name}(null),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "An implementation-reserved node. This is the not the node
you are looking for.
"
	end

	operation 6005250 "Kind"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "intf" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Tree> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 6005378 "asInterface"
	  public return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 2868354 // associatedInterface (<unidirectional association>)
	  relation 2868354 --->
	    a role_name "associatedInterface" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends Tree> ${name}${value};
"
	      classrelation_ref 2868354 // associatedInterface (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end
      end

      operation 6005506 "getKind"
	public return_type class_ref 842498 // Kind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the kind of this tree.

@return the kind of this tree.
"
      end

      operation 6005634 "accept"
	public explicit_return_type "R"
	nparams 2
	  param inout name "visitor" type class_ref 842626 // TreeVisitor
	  param inout name "data" explicit_type "D"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R,D> ${type} ${name}${(}${t0}<R,D> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accept method used to implement the visitor pattern.  The
visitor pattern is used to implement operations on trees.

@param <R> result type of this operation.
@param <D> type of additional data.
"
      end
    end

    class 842626 "TreeVisitor"
      visibility public stereotype "interface"
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of trees, in the style of the visitor design pattern.
Classes implementing this interface are used to operate
on a tree when the kind of tree is unknown at compile time.
When a visitor is passed to an tree's {@link Tree#accept
accept} method, the <tt>visit<i>XYZ</i></tt> method most applicable
to that tree is invoked.

<p> Classes implementing this interface may or may not throw a
{@code NullPointerException} if the additional parameter {@code p}
is {@code null}; see documentation of the implementing class for
details.

<p> <b>WARNING:</b> It is possible that methods will be added to
this interface to accommodate new, currently unknown, language
structures added to future versions of the Java&trade; programming
language.  Therefore, visitor classes directly implementing this
interface may be source incompatible with future versions of the
platform.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Peter von der Ah&eacute;
@author Jonathan Gibbons

@since 1.6
"
      operation 6020098 "visitAnnotatedType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 842114 // AnnotatedTypeTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6020226 "visitAnnotation"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 842754 // AnnotationTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6020354 "visitMethodInvocation"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 847490 // MethodInvocationTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6020482 "visitAssert"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 843138 // AssertTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6020610 "visitAssignment"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 843394 // AssignmentTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6020738 "visitCompoundAssignment"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 844802 // CompoundAssignmentTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6020866 "visitBinary"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 843522 // BinaryTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6020994 "visitBlock"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 843650 // BlockTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6021122 "visitBreak"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 843778 // BreakTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6021250 "visitCase"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 843906 // CaseTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6021378 "visitCatch"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 844034 // CatchTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6021506 "visitClass"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 844290 // ClassTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6021634 "visitConditionalExpression"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 844930 // ConditionalExpressionTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6021762 "visitContinue"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 845058 // ContinueTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6021890 "visitDoWhileLoop"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 845186 // DoWhileLoopTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6022018 "visitErroneous"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 845570 // ErroneousTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6022146 "visitExpressionStatement"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 845698 // ExpressionStatementTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6022274 "visitEnhancedForLoop"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 845442 // EnhancedForLoopTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6022402 "visitForLoop"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 845826 // ForLoopTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6022530 "visitIdentifier"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 845954 // IdentifierTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6022658 "visitIf"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 846082 // IfTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6022786 "visitImport"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 846210 // ImportTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6022914 "visitArrayAccess"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 842882 // ArrayAccessTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6023042 "visitLabeledStatement"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 846594 // LabeledStatementTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6023170 "visitLiteral"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 846978 // LiteralTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6023298 "visitMethod"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 847618 // MethodTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6023426 "visitModifiers"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 844418 // ModifiersTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6023554 "visitNewArray"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 847874 // NewArrayTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6023682 "visitNewClass"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 848002 // NewClassTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6023810 "visitLambdaExpression"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 846722 // LambdaExpressionTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6023938 "visitParenthesized"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 848258 // ParenthesizedTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6024066 "visitReturn"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 848642 // ReturnTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6024194 "visitMemberSelect"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 847362 // MemberSelectTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6024322 "visitMemberReference"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 847106 // MemberReferenceTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6024450 "visitEmptyStatement"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 845314 // EmptyStatementTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6024578 "visitSwitch"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 849154 // SwitchTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6024706 "visitSynchronized"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 849282 // SynchronizedTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6024834 "visitThrow"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 849410 // ThrowTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6024962 "visitCompilationUnit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 844546 // CompilationUnitTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6025090 "visitTry"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 849538 // TryTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6025218 "visitParameterizedType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 848130 // ParameterizedTypeTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6025346 "visitUnionType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 849666 // UnionTypeTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6025474 "visitIntersectionType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 846466 // IntersectionTypeTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6025602 "visitArrayType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 843010 // ArrayTypeTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6025730 "visitTypeCast"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 849794 // TypeCastTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6025858 "visitPrimitiveType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 848386 // PrimitiveTypeTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6025986 "visitTypeParameter"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 849922 // TypeParameterTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6026114 "visitInstanceOf"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 846338 // InstanceOfTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6026242 "visitUnary"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 850050 // UnaryTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6026370 "visitVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 844162 // VariableTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6026498 "visitWhileLoop"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 850178 // WhileLoopTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6026626 "visitWildcard"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 850306 // WildcardTree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6026754 "visitOther"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "node" type class_ref 842370 // Tree
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 842754 "AnnotationTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an annotation.

For example:
<pre>
   {@code @}<em>annotationType</em>
   {@code @}<em>annotationType</em> ( <em>arguments</em> )
</pre>

@jls section 9.7

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2868738 // <generalisation>
	relation 2868738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2868738 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6006018 "getAnnotationType"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6006146 "getArguments"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExpressionTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 842882 "ArrayAccessTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an array access expression.

For example:
<pre>
  <em>expression</em> [ <em>index</em> ]
</pre>

@jls section 15.13

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2868866 // <generalisation>
	relation 2868866 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2868866 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6006274 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6006402 "getIndex"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 843010 "ArrayTypeTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an array type.

For example:
<pre>
  <em>type</em> []
</pre>

@jls section 10.1

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2868994 // <generalisation>
	relation 2868994 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2868994 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6006530 "getType"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 843138 "AssertTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an 'assert' statement.

For example:
<pre>
  assert <em>condition</em> ;

  assert <em>condition</em> : <em>detail</em> ;
</pre>

@jls section 14.10

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2869250 // <generalisation>
	relation 2869250 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2869250 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6006658 "getCondition"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6006786 "getDetail"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 843266 "StatementTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node used as the base class for the different kinds of
statements.

@jls chapter 14

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2869122 // <generalisation>
	relation 2869122 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2869122 // <generalisation>
	  b parent class_ref 842370 // Tree
      end
    end

    class 843394 "AssignmentTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an assignment expression.

For example:
<pre>
  <em>variable</em> = <em>expression</em>
</pre>

@jls section 15.26.1

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2869378 // <generalisation>
	relation 2869378 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2869378 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6006914 "getVariable"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6007042 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 843522 "BinaryTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a binary expression.
Use {@link #getKind getKind} to determine the kind of operator.

For example:
<pre>
  <em>leftOperand</em> <em>operator</em> <em>rightOperand</em>
</pre>

@jls sections 15.17 to 15.24

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2869506 // <generalisation>
	relation 2869506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2869506 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6007170 "getLeftOperand"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6007298 "getRightOperand"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 843650 "BlockTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a statement block.

For example:
<pre>
  { }

  { <em>statements</em> }

  static { <em>statements</em> }
</pre>

@jls section 14.2

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2869634 // <generalisation>
	relation 2869634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2869634 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6007426 "isStatic"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6007554 "getStatements"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends StatementTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 843778 "BreakTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'break' statement.

For example:
<pre>
  break;

  break <em>label</em> ;
</pre>

@jls section 14.15

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2869762 // <generalisation>
	relation 2869762 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2869762 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6007682 "getLabel"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 843906 "CaseTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'case' in a 'switch' statement.

For example:
<pre>
  case <em>expression</em> :
      <em>statements</em>

  default :
      <em>statements</em>
</pre>

@jls section 14.11

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2869890 // <generalisation>
	relation 2869890 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2869890 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6007810 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return null if and only if this Case is {@code default:}
"
      end

      operation 6007938 "getStatements"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends StatementTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 844034 "CatchTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'catch' block in a 'try' statement.

For example:
<pre>
  catch ( <em>parameter</em> )
      <em>block</em>
</pre>

@jls section 14.20

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2870018 // <generalisation>
	relation 2870018 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2870018 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6008066 "getParameter"
	public return_type class_ref 844162 // VariableTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6008194 "getBlock"
	public return_type class_ref 843650 // BlockTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 844162 "VariableTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a variable declaration.

For example:
<pre>
  <em>modifiers</em> <em>type</em> <em>name</em> <em>initializer</em> ;
  <em>modifiers</em> <em>type</em> <em>qualified-name</em>.this
</pre>

@jls sections 8.3 and 14.4

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2875010 // <generalisation>
	relation 2875010 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2875010 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6028290 "getModifiers"
	public return_type class_ref 844418 // ModifiersTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6028418 "getName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6028546 "getNameExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6028674 "getType"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6028802 "getInitializer"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 844290 "ClassTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a class, interface, enum, or annotation
type declaration.

For example:
<pre>
  <em>modifiers</em> class <em>simpleName</em> <em>typeParameters</em>
      extends <em>extendsClause</em>
      implements <em>implementsClause</em>
  {
      <em>members</em>
  }
</pre>

@jls sections 8.1, 8.9, 9.1, and 9.6

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2870146 // <generalisation>
	relation 2870146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2870146 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6008322 "getModifiers"
	public return_type class_ref 844418 // ModifiersTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6008450 "getSimpleName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6008578 "getTypeParameters"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeParameterTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6008706 "getExtendsClause"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6008834 "getImplementsClause"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6008962 "getMembers"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 844418 "ModifiersTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for the modifiers, including annotations, for a declaration.

For example:
<pre>
  <em>flags</em>

  <em>flags</em> <em>annotations</em>
</pre>

@jls sections 8.1.1, 8.3.1, 8.4.3, 8.5.1, 8.8.3, 9.1.1, and 9.7

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2873090 // <generalisation>
	relation 2873090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2873090 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6016770 "getFlags"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Modifier> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6016898 "getAnnotations"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends AnnotationTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 844546 "CompilationUnitTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents the abstract syntax tree for compilation units (source
files) and package declarations (package-info.java).

@jls sections 7.3, and 7.4

@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 2870274 // <generalisation>
	relation 2870274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2870274 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6009090 "getPackageAnnotations"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends AnnotationTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6009218 "getPackageName"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6009346 "getImports"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ImportTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6009474 "getTypeDecls"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6009602 "getSourceFile"
	public return_type class_ref 841858 // JavaFileObject
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6009730 "getLineMap"
	public return_type class_ref 844674 // LineMap
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the line map for this compilation unit, if available.
Returns null if the line map is not available.
@return the line map for this compilation unit
"
      end
    end

    class 844674 "LineMap"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Provides methods to convert between character positions and line numbers
for a compilation unit.

@since 1.6
"
      operation 6013826 "getStartPosition"
	public explicit_return_type "long"
	nparams 1
	  param in name "line" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the start position of a line.

@param line line number (beginning at 1)
@return     position of first character in line
@throws  IndexOutOfBoundsException
          if {@code lineNumber < 1}
          if {@code lineNumber > no. of lines}
"
      end

      operation 6013954 "getPosition"
	public explicit_return_type "long"
	nparams 2
	  param in name "line" explicit_type "long"
	  param in name "column" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the position corresponding to a (line,column).

@param   line    line number (beginning at 1)
@param   column  tab-expanded column number (beginning 1)

@return  position of character
@throws  IndexOutOfBoundsException
          if {@code line < 1}
          if {@code line > no. of lines}
"
      end

      operation 6014082 "getLineNumber"
	public explicit_return_type "long"
	nparams 1
	  param in name "pos" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the line containing a position; a line termination
character is on the line it terminates.

@param   pos  character offset of the position
@return the line number of pos (first line is 1)
"
      end

      operation 6014210 "getColumnNumber"
	public explicit_return_type "long"
	nparams 1
	  param in name "pos" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find the column for a character position.
Tab characters preceding the position on the same line
will be expanded when calculating the column number.

@param  pos   character offset of the position
@return       the tab-expanded column number of pos (first column is 1)
"
      end
    end

    class 844802 "CompoundAssignmentTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for compound assignment operator.
Use {@link #getKind getKind} to determine the kind of operator.

For example:
<pre>
  <em>variable</em> <em>operator</em> <em>expression</em>
</pre>

@jls section 15.26.2

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2870402 // <generalisation>
	relation 2870402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2870402 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6009858 "getVariable"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6009986 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 844930 "ConditionalExpressionTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for the conditional operator ? :.

For example:
<pre>
  <em>condition</em> ? <em>trueExpression</em> : <em>falseExpression</em>
</pre>

@jls section 15.25

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2870530 // <generalisation>
	relation 2870530 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2870530 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6010114 "getCondition"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6010242 "getTrueExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6010370 "getFalseExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 845058 "ContinueTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'continue' statement.

For example:
<pre>
  continue;
  continue <em>label</em> ;
</pre>

@jls section 14.16

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2870658 // <generalisation>
	relation 2870658 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2870658 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6010498 "getLabel"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 845186 "DoWhileLoopTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'do' statement.

For example:
<pre>
  do
      <em>statement</em>
  while ( <em>expression</em> );
</pre>

@jls section 14.13

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2870786 // <generalisation>
	relation 2870786 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2870786 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6010626 "getCondition"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6010754 "getStatement"
	public return_type class_ref 843266 // StatementTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 845314 "EmptyStatementTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an empty (skip) statement.

For example:
<pre>
   ;
</pre>

@jls section 14.6

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2870914 // <generalisation>
	relation 2870914 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2870914 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end
    end

    class 845442 "EnhancedForLoopTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an \"enhanced\" 'for' loop statement.

For example:
<pre>
  for ( <em>variable</em> : <em>expression</em> )
      <em>statement</em>
</pre>

@jls section 14.14.2

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2871042 // <generalisation>
	relation 2871042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2871042 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6010882 "getVariable"
	public return_type class_ref 844162 // VariableTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6011010 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6011138 "getStatement"
	public return_type class_ref 843266 // StatementTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 845570 "ErroneousTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node to stand in for a malformed expression.

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2871170 // <generalisation>
	relation 2871170 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2871170 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6011266 "getErrorTrees"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 845698 "ExpressionStatementTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an expression statement.

For example:
<pre>
  <em>expression</em> ;
</pre>

@jls section 14.8

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2871298 // <generalisation>
	relation 2871298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2871298 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6011394 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 845826 "ForLoopTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a basic 'for' loop statement.

For example:
<pre>
  for ( <em>initializer</em> ; <em>condition</em> ; <em>update</em> )
      <em>statement</em>
</pre>

@jls section 14.14.1

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2871426 // <generalisation>
	relation 2871426 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2871426 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6011522 "getInitializer"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends StatementTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6011650 "getCondition"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6011778 "getUpdate"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExpressionStatementTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6011906 "getStatement"
	public return_type class_ref 843266 // StatementTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 845954 "IdentifierTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an identifier expression.

For example:
<pre>
  <em>name</em>
</pre>

@jls section 6.5.6.1

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2871554 // <generalisation>
	relation 2871554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2871554 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6012034 "getName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 846082 "IfTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an 'if' statement.

For example:
<pre>
  if ( <em>condition</em> )
     <em>thenStatement</em>

  if ( <em>condition</em> )
      <em>thenStatement</em>
  else
      <em>elseStatement</em>
</pre>

@jls section 14.9

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2871682 // <generalisation>
	relation 2871682 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2871682 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6012162 "getCondition"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6012290 "getThenStatement"
	public return_type class_ref 843266 // StatementTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6012418 "getElseStatement"
	public return_type class_ref 843266 // StatementTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return null if this if statement has no else branch.
"
      end
    end

    class 846210 "ImportTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an import statement.

For example:
<pre>
  import <em>qualifiedIdentifier</em> ;

  static import <em>qualifiedIdentifier</em> ;
</pre>

@jls section 7.5

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2871810 // <generalisation>
	relation 2871810 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2871810 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6012546 "isStatic"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6012674 "getQualifiedIdentifier"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return a qualified identifier ending in \"*\" if and only if
this is an import-on-demand.
"
      end
    end

    class 846338 "InstanceOfTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an 'instanceof' expression.

For example:
<pre>
  <em>expression</em> instanceof <em>type</em>
</pre>

@jls section 15.20.2

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2871938 // <generalisation>
	relation 2871938 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2871938 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6012802 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6012930 "getType"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 846466 "IntersectionTypeTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an intersection type in a cast expression.

@author Maurizio Cimadamore

@since 1.8
"
      classrelation 2872066 // <generalisation>
	relation 2872066 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2872066 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6013058 "getBounds"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 846594 "LabeledStatementTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a labeled statement.

For example:
<pre>
  <em>label</em> : <em>statement</em>
</pre>

@jls section 14.7

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2872194 // <generalisation>
	relation 2872194 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2872194 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6013186 "getLabel"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6013314 "getStatement"
	public return_type class_ref 843266 // StatementTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 846722 "LambdaExpressionTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a lambda expression.

For example:
<pre>{@code
  ()->{}
  (List<String> ls)->ls.size()
  (x,y)-> { return x + y; }
}</pre>
"
      classrelation 2872322 // <generalisation>
	relation 2872322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2872322 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      class 846850 "BodyKind"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	java_annotation "@jdk.Exported
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1327234 "EXPRESSION"
	  public type class_ref 846850 // BodyKind
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " enum constant for expression lambdas 
"
	end

	attribute 1327362 "STATEMENT"
	  public type class_ref 846850 // BodyKind
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " enum constant for statement lambdas "
	end
      end

      operation 6013442 "getParameters"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends VariableTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6013570 "getBody"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6013698 "getBodyKind"
	public return_type class_ref 846850 // BodyKind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 846978 "LiteralTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a literal expression.
Use {@link #getKind getKind} to determine the kind of literal.

For example:
<pre>
  <em>value</em>
</pre>

@jls section 15.28

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2872450 // <generalisation>
	relation 2872450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2872450 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6014338 "getValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 847106 "MemberReferenceTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a member reference expression.

For example:
<pre>
  <em>expression</em> # <em>[ identifier | new ]</em>
</pre>

@since 1.8
"
      classrelation 2872578 // <generalisation>
	relation 2872578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2872578 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      class 847234 "ReferenceMode"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	java_annotation "@jdk.Exported
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1327490 "INVOKE"
	  public type class_ref 847234 // ReferenceMode
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " enum constant for method references 
"
	end

	attribute 1327618 "NEW"
	  public type class_ref 847234 // ReferenceMode
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " enum constant for constructor references "
	end
      end

      operation 6014466 "getMode"
	public return_type class_ref 847234 // ReferenceMode
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6014594 "getQualifierExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6014722 "getName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6014850 "getTypeArguments"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExpressionTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 847362 "MemberSelectTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a member access expression.

For example:
<pre>
  <em>expression</em> . <em>identifier</em>
</pre>

@jls sections 6.5, 15.11,and 15.12

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2872706 // <generalisation>
	relation 2872706 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2872706 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6014978 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6015106 "getIdentifier"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 847490 "MethodInvocationTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a method invocation expression.

For example:
<pre>
  <em>identifier</em> ( <em>arguments</em> )

  this . <em>typeArguments</em> <em>identifier</em> ( <em>arguments</em> )
</pre>

@jls section 15.12

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2872834 // <generalisation>
	relation 2872834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2872834 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6015234 "getTypeArguments"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6015362 "getMethodSelect"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6015490 "getArguments"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExpressionTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 847618 "MethodTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a method or annotation type element declaration.

For example:
<pre>
  <em>modifiers</em> <em>typeParameters</em> <em>type</em> <em>name</em>
     ( <em>parameters</em> )
     <em>body</em>

  <em>modifiers</em> <em>type</em> <em>name</em> () default <em>defaultValue</em>
</pre>

@jls sections 8.4, 8.6, 8.7, 9.4, and 9.6

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2872962 // <generalisation>
	relation 2872962 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2872962 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6015618 "getModifiers"
	public return_type class_ref 844418 // ModifiersTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6015746 "getName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6015874 "getReturnType"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6016002 "getTypeParameters"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeParameterTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6016130 "getParameters"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends VariableTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6016258 "getReceiverParameter"
	public return_type class_ref 844162 // VariableTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an explicit receiver parameter (\"this\" parameter).

@return an explicit receiver parameter (\"this\" parameter)
@since 1.8
"
      end

      operation 6016386 "getThrows"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExpressionTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6016514 "getBody"
	public return_type class_ref 843650 // BlockTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6016642 "getDefaultValue"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 847874 "NewArrayTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for an expression to create a new instance of an array.

For example:
<pre>
  new <em>type</em> <em>dimensions</em> <em>initializers</em>

  new <em>type</em> <em>dimensions</em> [ ] <em>initializers</em>
</pre>

@jls section 15.10

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2873218 // <generalisation>
	relation 2873218 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2873218 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6017026 "getType"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6017154 "getDimensions"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExpressionTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6017282 "getInitializers"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExpressionTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6017410 "getAnnotations"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends AnnotationTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6017538 "getDimAnnotations"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends List<? extends AnnotationTree>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 848002 "NewClassTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node to declare a new instance of a class.

For example:
<pre>
  new <em>identifier</em> ( )

  new <em>identifier</em> ( <em>arguments</em> )

  new <em>typeArguments</em> <em>identifier</em> ( <em>arguments</em> )
      <em>classBody</em>

  <em>enclosingExpression</em>.new <em>identifier</em> ( <em>arguments</em> )
</pre>

@jls section 15.9

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2873346 // <generalisation>
	relation 2873346 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2873346 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6017666 "getEnclosingExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6017794 "getTypeArguments"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6017922 "getIdentifier"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6018050 "getArguments"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends ExpressionTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6018178 "getClassBody"
	public return_type class_ref 844290 // ClassTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 848130 "ParameterizedTypeTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a type expression involving type parameters.

For example:
<pre>
  <em>type</em> &lt; <em>typeArguments</em> &gt;
</pre>

@jls section 4.5.1

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2873474 // <generalisation>
	relation 2873474 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2873474 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6018306 "getType"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6018434 "getTypeArguments"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 848258 "ParenthesizedTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a parenthesized expression.  Note: parentheses
not be preserved by the parser.

For example:
<pre>
  ( <em>expression</em> )
</pre>

@jls section 15.8.5

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2873602 // <generalisation>
	relation 2873602 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2873602 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6018562 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 848386 "PrimitiveTypeTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a primitive type.

For example:
<pre>
  <em>primitiveTypeKind</em>
</pre>

@jls section 4.2

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2873730 // <generalisation>
	relation 2873730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2873730 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6018690 "getPrimitiveTypeKind"
	public return_type class_ref 848514 // TypeKind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 848642 "ReturnTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'return' statement.

For example:
<pre>
  return;
  return <em>expression</em>;
</pre>

@jls section 14.17

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2873858 // <generalisation>
	relation 2873858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2873858 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6018818 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 848770 "Scope"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for determining locally available program elements, such as
local variables and imports.
Upon creation, a Scope is associated with a given program position;
for example, a {@linkplain Tree tree node}. This position may be used to
infer an enclosing method and/or class.

<p>A Scope does not itself contain the details of the elements corresponding
to the parameters, methods and fields of the methods and classes containing
its position. However, these elements can be determined from the enclosing
elements.

<p>Scopes may be contained in an enclosing scope. The outermost scope contains
those elements available via \"star import\" declarations; the scope within that
contains the top level elements of the compilation unit, including any named
imports.

@since 1.6
"
      operation 6018946 "getEnclosingScope"
	public return_type class_ref 848770 // Scope
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the enclosing scope.
"
      end

      operation 6019074 "getEnclosingClass"
	public return_type class_ref 848898 // TypeElement
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the innermost type element containing the position of this scope
"
      end

      operation 6019202 "getEnclosingMethod"
	public return_type class_ref 849026 // ExecutableElement
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the innermost executable element containing the position of this scope.
"
      end

      operation 6019330 "getLocalElements"
	public return_type class_ref 184322 // Iterable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Element> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the elements directly contained in this scope.
"
      end
    end

    class 849154 "SwitchTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'switch' statement.

For example:
<pre>
  switch ( <em>expression</em> ) {
    <em>cases</em>
  }
</pre>

@jls section 14.11

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2873986 // <generalisation>
	relation 2873986 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2873986 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6019458 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6019586 "getCases"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CaseTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 849282 "SynchronizedTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'synchronized' statement.

For example:
<pre>
  synchronized ( <em>expression</em> )
      <em>block</em>
</pre>

@jls section 14.19

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2874114 // <generalisation>
	relation 2874114 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2874114 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6019714 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6019842 "getBlock"
	public return_type class_ref 843650 // BlockTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 849410 "ThrowTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'throw' statement.

For example:
<pre>
  throw <em>expression</em>;
</pre>

@jls section 14.18

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2874242 // <generalisation>
	relation 2874242 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2874242 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6019970 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 849538 "TryTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'try' statement.

For example:
<pre>
  try
      <em>block</em>
  <em>catches</em>
  finally
      <em>finallyBlock</em>
</pre>

@jls section 14.20

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2874370 // <generalisation>
	relation 2874370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2874370 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6026882 "getBlock"
	public return_type class_ref 843650 // BlockTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6027010 "getCatches"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CatchTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6027138 "getFinallyBlock"
	public return_type class_ref 843650 // BlockTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6027266 "getResources"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 849666 "UnionTypeTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a union type expression in a multicatch var declaration.

@author Maurizio Cimadamore

@since 1.7
"
      classrelation 2874882 // <generalisation>
	relation 2874882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2874882 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6028162 "getTypeAlternatives"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 849794 "TypeCastTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a type cast expression.

For example:
<pre>
  ( <em>type</em> ) <em>expression</em>
</pre>

@jls section 15.16

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2874498 // <generalisation>
	relation 2874498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2874498 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6027394 "getType"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6027522 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 849922 "TypeParameterTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a type parameter.

For example:
<pre>
  <em>name</em>

  <em>name</em> extends <em>bounds</em>

  <em>annotations</em> <em>name</em>
</pre>

@jls section 4.4

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2874626 // <generalisation>
	relation 2874626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2874626 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6027650 "getName"
	public return_type class_ref 838018 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6027778 "getBounds"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Tree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6027906 "getAnnotations"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends AnnotationTree> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return annotations on the type parameter declaration.

Annotations need Target meta-annotations of
{@link java.lang.annotation.ElementType#TYPE_PARAMETER} or
{@link java.lang.annotation.ElementType#TYPE_USE}
to appear in this position.

@return annotations on the type parameter declaration
@since 1.8
"
      end
    end

    class 850050 "UnaryTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for postfix and unary expressions.
Use {@link #getKind getKind} to determine the kind of operator.

For example:
<pre>
  <em>operator</em> <em>expression</em>

  <em>expression</em> <em>operator</em>
</pre>

@jls sections 15.14 and 15.15

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2874754 // <generalisation>
	relation 2874754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2874754 // <generalisation>
	  b parent class_ref 842242 // ExpressionTree
      end

      operation 6028034 "getExpression"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 850178 "WhileLoopTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a 'while' loop statement.

For example:
<pre>
  while ( <em>condition</em> )
    <em>statement</em>
</pre>


@jls section 14.12

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2875138 // <generalisation>
	relation 2875138 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2875138 // <generalisation>
	  b parent class_ref 843266 // StatementTree
      end

      operation 6028930 "getCondition"
	public return_type class_ref 842242 // ExpressionTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6029058 "getStatement"
	public return_type class_ref 843266 // StatementTree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 850306 "WildcardTree"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@jdk.Exported
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A tree node for a wildcard type argument.
Use {@link #getKind getKind} to determine the kind of bound.

For example:
<pre>
  ?

  ? extends <em>bound</em>

  ? super <em>bound</em>
</pre>

@jls section 4.5.1

@author Peter von der Ah&eacute;
@author Jonathan Gibbons
@since 1.6
"
      classrelation 2875266 // <generalisation>
	relation 2875266 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 2875266 // <generalisation>
	  b parent class_ref 842370 // Tree
      end

      operation 6029186 "getBound"
	public return_type class_ref 842370 // Tree
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 165378 "tree"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 605186 "Tree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 842370 // Tree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 605314 "ExpressionTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 842242 // ExpressionTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 605442 "AnnotatedTypeTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 842114 // AnnotatedTypeTree
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 605570 "AnnotationTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 842754 // AnnotationTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 605698 "ArrayAccessTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 842882 // ArrayAccessTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 605826 "ArrayTypeTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 843010 // ArrayTypeTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 605954 "StatementTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 843266 // StatementTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 606082 "AssertTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 843138 // AssertTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 606210 "AssignmentTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 843394 // AssignmentTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 606338 "BinaryTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 843522 // BinaryTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 606466 "BlockTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 843650 // BlockTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 606594 "BreakTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 843778 // BreakTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 606722 "CaseTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 843906 // CaseTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 606850 "CatchTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 844034 // CatchTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 606978 "ClassTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 844290 // ClassTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 607106 "CompilationUnitTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.tools.JavaFileObject;
${definition}"
      associated_elems
	class_ref 844546 // CompilationUnitTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 607234 "CompoundAssignmentTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 844802 // CompoundAssignmentTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 607362 "ConditionalExpressionTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 844930 // ConditionalExpressionTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 607490 "ContinueTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 845058 // ContinueTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 607618 "DoWhileLoopTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 845186 // DoWhileLoopTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 607746 "EmptyStatementTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 845314 // EmptyStatementTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 607874 "EnhancedForLoopTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 845442 // EnhancedForLoopTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 608002 "ErroneousTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 845570 // ErroneousTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 608130 "ExpressionStatementTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 845698 // ExpressionStatementTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 608258 "ForLoopTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 845826 // ForLoopTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 608386 "IdentifierTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 845954 // IdentifierTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 608514 "IfTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 846082 // IfTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 608642 "ImportTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 846210 // ImportTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 608770 "InstanceOfTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 846338 // InstanceOfTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 608898 "IntersectionTypeTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 846466 // IntersectionTypeTree
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 609026 "LabeledStatementTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 846594 // LabeledStatementTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 609154 "LambdaExpressionTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 846722 // LambdaExpressionTree
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 609282 "LineMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 844674 // LineMap
      end
      comment "Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 609410 "LiteralTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 846978 // LiteralTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 609538 "MemberReferenceTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 847106 // MemberReferenceTree
      end
      comment "Copyright (c) 2011, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 609666 "MemberSelectTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 847362 // MemberSelectTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 609794 "MethodInvocationTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 847490 // MethodInvocationTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 609922 "MethodTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 847618 // MethodTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 610050 "ModifiersTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Set;
import javax.lang.model.element.Modifier;
${definition}"
      associated_elems
	class_ref 844418 // ModifiersTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 610178 "NewArrayTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 847874 // NewArrayTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 610306 "NewClassTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 848002 // NewClassTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 610434 "ParameterizedTypeTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 848130 // ParameterizedTypeTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 610562 "ParenthesizedTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 848258 // ParenthesizedTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 610690 "PrimitiveTypeTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.type.TypeKind;
${definition}"
      associated_elems
	class_ref 848386 // PrimitiveTypeTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 610818 "ReturnTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 848642 // ReturnTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 610946 "Scope"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Element;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
${definition}"
      associated_elems
	class_ref 848770 // Scope
      end
      comment "Copyright (c) 2006, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 611074 "SwitchTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 849154 // SwitchTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 611202 "SynchronizedTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 849282 // SynchronizedTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 611330 "ThrowTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 849410 // ThrowTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 611458 "TreeVisitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 842626 // TreeVisitor
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 611586 "TryTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 849538 // TryTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 611714 "TypeCastTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 849794 // TypeCastTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 611842 "TypeParameterTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 849922 // TypeParameterTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 611970 "UnaryTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 850050 // UnaryTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 612098 "UnionTypeTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 849666 // UnionTypeTree
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 612226 "VariableTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Name;
${definition}"
      associated_elems
	class_ref 844162 // VariableTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 612354 "WhileLoopTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 850178 // WhileLoopTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 612482 "WildcardTree"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 850306 // WildcardTree
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
