class UnmodifiableEntrySet
!!!8690050.java!!!	UnmodifiableEntrySet(inout s : Set)
                // Need to cast to raw in order to work around a limitation in the type system
                super((Set)s);
!!!8690178.java!!!	entryConsumer(inout action : Consumer) : Consumer
                return e -> action.accept(new UnmodifiableEntry<>(e));
!!!8690306.java!!!	forEach(inout action : Consumer) : void
                Objects.requireNonNull(action);
                c.forEach(entryConsumer(action));
!!!8691586.java!!!	spliterator() : Spliterator
                return new UnmodifiableEntrySetSpliterator<>(
                        (Spliterator<Map.Entry<K, V>>) c.spliterator());
!!!8691714.java!!!	stream() : Stream
                return StreamSupport.stream(spliterator(), false);
!!!8691842.java!!!	parallelStream() : Stream
                return StreamSupport.stream(spliterator(), true);
!!!8691970.java!!!	iterator() : Iterator
                return new Iterator<Map.Entry<K,V>>() {
                    private final Iterator<? extends Map.Entry<? extends K, ? extends V>> i = c.iterator();

                    public boolean hasNext() {
                        return i.hasNext();
                    }
                    public Map.Entry<K,V> next() {
                        return new UnmodifiableEntry<>(i.next());
                    }
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
!!!8692098.java!!!	toArray() : Object
                Object[] a = c.toArray();
                for (int i=0; i<a.length; i++)
                    a[i] = new UnmodifiableEntry<>((Map.Entry<? extends K, ? extends V>)a[i]);
                return a;
!!!8692226.java!!!	toArray(inout a : T [[]]) : T
                // We don't pass a to c.toArray, to avoid window of
                // vulnerability wherein an unscrupulous multithreaded client
                // could get his hands on raw (unwrapped) Entries from c.
                Object[] arr = c.toArray(a.length==0 ? a : Arrays.copyOf(a, 0));

                for (int i=0; i<arr.length; i++)
                    arr[i] = new UnmodifiableEntry<>((Map.Entry<? extends K, ? extends V>)arr[i]);

                if (arr.length > a.length)
                    return (T[])arr;

                System.arraycopy(arr, 0, a, 0, arr.length);
                if (a.length > arr.length)
                    a[arr.length] = null;
                return a;
!!!8692354.java!!!	contains(inout o : Object) : boolean
                if (!(o instanceof Map.Entry))
                    return false;
                return c.contains(
                    new UnmodifiableEntry<>((Map.Entry<?,?>) o));
!!!8692482.java!!!	containsAll(inout coll : Collection) : boolean
                for (Object e : coll) {
                    if (!contains(e)) // Invokes safe contains() above
                        return false;
                }
                return true;
!!!8692610.java!!!	equals(inout o : Object) : boolean
                if (o == this)
                    return true;

                if (!(o instanceof Set))
                    return false;
                Set<?> s = (Set<?>) o;
                if (s.size() != c.size())
                    return false;
                return containsAll(s); // Invokes safe containsAll() above
