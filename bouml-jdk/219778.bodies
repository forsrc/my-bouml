class BindingIteratorImpl
!!!1066498.java!!!	BindingIteratorImpl(inout orb : ORB)
        super();
        this.orb = orb ;
!!!1066626.java!!!	next_one(inout b : BindingHolder) : boolean
        // NextOne actually returns the next one
        return NextOne(b);
!!!1066754.java!!!	next_n(in how_many : int, inout blh : BindingListHolder) : boolean
        if( how_many == 0 ) {
            throw new BAD_PARAM( " 'how_many' parameter is set to 0 which is" +
            " invalid" );
        }
        return list( how_many, blh );
!!!1066882.java!!!	list(in how_many : int, inout blh : BindingListHolder) : boolean
        // Take the smallest of what's left and what's being asked for
        int numberToGet = Math.min(RemainingElements(),how_many);

        // Create a resulting BindingList
        Binding[] bl = new Binding[numberToGet];
        BindingHolder bh = new BindingHolder();
        int i = 0;
        // Keep iterating as long as there are entries
        while (i < numberToGet && this.NextOne(bh) == true) {
            bl[i] = bh.value;
            i++;
        }
        // Found any at all?
        if (i == 0) {
            // No
            blh.value = new Binding[0];
            return false;
        }

        // Set into holder
        blh.value = bl;

        return true;
!!!1067010.java!!!	destroy() : void
        // Destroy actually destroys
        this.Destroy();
