format 222
"type" // jdk1.8::javax::lang::model::type
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/lang/model/type/"
  java_package "javax.lang.model.type"
  classview 172546 "type"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 848514 "TypeKind"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The kind of a type mirror.

<p>Note that it is possible additional type kinds will be added to
accommodate new, currently unknown, language structures added to
future versions of the Java&trade; programming language.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see TypeMirror
@since 1.6
"
      attribute 2258178 "BOOLEAN"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The primitive type {@code boolean}.

"
      end

      attribute 2258306 "BYTE"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The primitive type {@code byte}.

"
      end

      attribute 2258434 "SHORT"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The primitive type {@code short}.

"
      end

      attribute 2258562 "INT"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The primitive type {@code int}.

"
      end

      attribute 2258690 "LONG"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The primitive type {@code long}.

"
      end

      attribute 2258818 "CHAR"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The primitive type {@code char}.

"
      end

      attribute 2258946 "FLOAT"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The primitive type {@code float}.

"
      end

      attribute 2259074 "DOUBLE"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The primitive type {@code double}.

"
      end

      attribute 2259202 "VOID"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The pseudo-type corresponding to the keyword {@code void}.
@see NoType

"
      end

      attribute 2259330 "NONE"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A pseudo-type used where no actual type is appropriate.
@see NoType

"
      end

      attribute 2259458 "NULL"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The null type.

"
      end

      attribute 2259586 "ARRAY"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An array type.

"
      end

      attribute 2259714 "DECLARED"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A class or interface type.

"
      end

      attribute 2259842 "ERROR"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A class or interface type that could not be resolved.

"
      end

      attribute 2259970 "TYPEVAR"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A type variable.

"
      end

      attribute 2260098 "WILDCARD"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A wildcard type argument.

"
      end

      attribute 2260226 "PACKAGE"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A pseudo-type corresponding to a package element.
@see NoType

"
      end

      attribute 2260354 "EXECUTABLE"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A method, constructor, or initializer.

"
      end

      attribute 2260482 "OTHER"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An implementation-reserved type.
This is not the type you are looking for.

"
      end

      attribute 2260610 "UNION"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "A union type.

@since 1.7

"
      end

      attribute 2260738 "INTERSECTION"
	public type class_ref 848514 // TypeKind
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "An intersection type.

@since 1.8
"
      end

      operation 9710338 "isPrimitive"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this kind corresponds to a primitive
type and {@code false} otherwise.
@return {@code true} if this kind corresponds to a primitive type
"
      end
    end

    class 852226 "TypeMirror"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a type in the Java programming language.
Types include primitive types, declared types (class and interface types),
array types, type variables, and the null type.
Also represented are wildcard type arguments,
the signature and return types of executables,
and pseudo-types corresponding to packages and to the keyword {@code void}.

<p> Types should be compared using the utility methods in {@link
Types}.  There is no guarantee that any particular type will always
be represented by the same object.

<p> To implement operations based on the class of an {@code
TypeMirror} object, either use a {@linkplain TypeVisitor visitor}
or use the result of the {@link #getKind} method.  Using {@code
instanceof} is <em>not</em> necessarily a reliable idiom for
determining the effective class of an object in this modeling
hierarchy since an implementation may choose to have a single
object implement multiple {@code TypeMirror} subinterfaces.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see Element
@see Types
@since 1.6
"
      classrelation 3772802 // <generalisation>
	relation 3772802 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3772802 // <generalisation>
	  b parent class_ref 1179266 // AnnotatedConstruct
      end

      operation 9707522 "getKind"
	public return_type class_ref 848514 // TypeKind
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code kind} of this type.

@return the kind of this type
"
      end

      operation 9707650 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obeys the general contract of {@link Object#equals Object.equals}.
This method does not, however, indicate whether two types represent
the same type.
Semantic comparisons of type equality should instead use
{@link Types#isSameType(TypeMirror, TypeMirror)}.
The results of {@code t1.equals(t2)} and
{@code Types.isSameType(t1, t2)} may differ.

@param obj  the object to be compared with this type
@return {@code true} if the specified object is equal to this one
"
      end

      operation 9707778 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obeys the general contract of {@link Object#hashCode Object.hashCode}.

@see #equals
"
      end

      operation 9707906 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an informative string representation of this type.  If
possible, the string should be of a form suitable for
representing this type in source code.  Any names embedded in
the result are qualified if possible.

@return a string representation of this type
"
      end

      operation 9708034 "accept"
	public explicit_return_type "R"
	nparams 2
	  param inout name "v" type class_ref 1181186 // TypeVisitor
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R, P> ${type} ${name}${(}${t0}<R, P> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a visitor to this type.

@param <R> the return type of the visitor's methods
@param <P> the type of the additional parameter to the visitor's methods
@param v   the visitor operating on this type
@param p   additional parameter to the visitor
@return a visitor-specified result
"
      end
    end

    class 852354 "DeclaredType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a declared type, either a class type or an interface type.
This includes parameterized types such as {@code java.util.Set<String>}
as well as raw types.

<p> While a {@code TypeElement} represents a class or interface
<i>element</i>, a {@code DeclaredType} represents a class
or interface <i>type</i>, the latter being a use
(or <i>invocation</i>) of the former.
See {@link TypeElement} for more on this distinction.

<p> The supertypes (both class and interface types) of a declared
type may be found using the {@link
Types#directSupertypes(TypeMirror)} method.  This returns the
supertypes with any type arguments substituted in.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see TypeElement
@since 1.6
"
      classrelation 3773186 // <generalisation>
	relation 3773186 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3773186 // <generalisation>
	  b parent class_ref 1181058 // ReferenceType
      end

      operation 9708290 "asElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the element corresponding to this type.

@return the element corresponding to this type
"
      end

      operation 9708418 "getEnclosingType"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of the innermost enclosing instance or a
{@code NoType} of kind {@code NONE} if there is no enclosing
instance.  Only types corresponding to inner classes have an
enclosing instance.

@return a type mirror for the enclosing type
@jls 8.1.3 Inner Classes and Enclosing Instances
@jls 15.9.2 Determining Enclosing Instances
"
      end

      operation 9708546 "getTypeArguments"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the actual type arguments of this type.
For a type nested within a parameterized type
(such as {@code Outer<String>.Inner<Number>}), only the type
arguments of the innermost type are included.

@return the actual type arguments of this type, or an empty list
          if none
"
      end
    end

    class 852482 "ErrorType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a class or interface type that cannot be properly modeled.
This may be the result of a processing error,
such as a missing class file or erroneous source code.
Most queries for
information derived from such a type (such as its members or its
supertype) will not, in general, return meaningful results.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 3773314 // <generalisation>
	relation 3773314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3773314 // <generalisation>
	  b parent class_ref 852354 // DeclaredType
      end
    end

    class 1180930 "ArrayType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an array type.
A multidimensional array type is represented as an array type
whose component type is also an array type.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 3773058 // <generalisation>
	relation 3773058 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3773058 // <generalisation>
	  b parent class_ref 1181058 // ReferenceType
      end

      operation 9708162 "getComponentType"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the component type of this array type.

@return the component type of this array type
"
      end
    end

    class 1181058 "ReferenceType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a reference type.
These include class and interface types, array types, type variables,
and the null type.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 3772930 // <generalisation>
	relation 3772930 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3772930 // <generalisation>
	  b parent class_ref 852226 // TypeMirror
      end
    end

    class 1181186 "TypeVisitor"
      visibility public stereotype "interface"
      nformals 2
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A visitor of types, in the style of the
visitor design pattern.  Classes implementing this
interface are used to operate on a type when the kind of
type is unknown at compile time.  When a visitor is passed to a
type's {@link TypeMirror#accept accept} method, the <tt>visit<i>XYZ</i></tt>
method most applicable to that type is invoked.

<p> Classes implementing this interface may or may not throw a
{@code NullPointerException} if the additional parameter {@code p}
is {@code null}; see documentation of the implementing class for
details.

<p> <b>WARNING:</b> It is possible that methods will be added to
this interface to accommodate new, currently unknown, language
structures added to future versions of the Java&trade; programming
language.  Therefore, visitor classes directly implementing this
interface may be source incompatible with future versions of the
platform.  To avoid this source incompatibility, visitor
implementations are encouraged to instead extend the appropriate
abstract visitor class that implements this interface.  However, an
API should generally use this visitor interface as the type for
parameters, return type, etc. rather than one of the abstract
classes.

<p>Note that methods to accommodate new language constructs could
be added in a source <em>compatible</em> way if they were added as
<em>default methods</em>.  However, default methods are only
available on Java SE 8 and higher releases and the {@code
javax.lang.model.*} packages bundled in Java SE 8 are required to
also be runnable on Java SE 7.  Therefore, default methods
<em>cannot</em> be used when extending {@code javax.lang.model.*}
to cover Java SE 8 language features.  However, default methods may
be used in subsequent revisions of the {@code javax.lang.model.*}
packages that are only required to run on Java SE 8 and higher
platform versions.

@param <R> the return type of this visitor's methods.  Use {@link
           Void} for visitors that do not need to return results.
@param <P> the type of the additional parameter to this visitor's
           methods.  Use {@code Void} for visitors that do not need an
           additional parameter.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      operation 9710850 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852226 // TypeMirror
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a type.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9710978 "visit"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "t" type class_ref 852226 // TypeMirror
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A convenience method equivalent to {@code v.visit(t, null)}.
@param t the element to visit
@return  a visitor-specified result
"
      end

      operation 9711106 "visitPrimitive"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182082 // PrimitiveType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a primitive type.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9711234 "visitNull"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181954 // NullType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits the null type.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9711362 "visitArray"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1180930 // ArrayType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an array type.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9711490 "visitDeclared"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852354 // DeclaredType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a declared type.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9711618 "visitError"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852482 // ErrorType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an error type.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9711746 "visitTypeVariable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182210 // TypeVariable
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a type variable.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9711874 "visitWildcard"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182338 // WildcardType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a wildcard type.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9712002 "visitExecutable"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181314 // ExecutableType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an executable type.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9712130 "visitNoType"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181826 // NoType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a {@link NoType} instance.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
"
      end

      operation 9712258 "visitUnknown"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 852226 // TypeMirror
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an unknown kind of type.
This can occur if the language evolves and new kinds
of types are added to the {@code TypeMirror} hierarchy.
@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
@throws UnknownTypeException
 a visitor implementation may optionally throw this exception
"
      end

      operation 9712386 "visitUnion"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1182466 // UnionType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits a union type.

@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
@since 1.7
"
      end

      operation 9712514 "visitIntersection"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" type class_ref 1181442 // IntersectionType
	  param inout name "p" explicit_type "P"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Visits an intersection type.

@param t the type to visit
@param p a visitor-specified parameter
@return  a visitor-specified result
@since 1.8
"
      end
    end

    class 1181314 "ExecutableType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents the type of an executable.  An <i>executable</i>
is a method, constructor, or initializer.

<p> The executable is
represented as when viewed as a method (or constructor or
initializer) of some reference type.
If that reference type is parameterized, then its actual
type arguments are substituted into any types returned by the methods of
this interface.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see ExecutableElement
@since 1.6
"
      classrelation 3773442 // <generalisation>
	relation 3773442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3773442 // <generalisation>
	  b parent class_ref 852226 // TypeMirror
      end

      operation 9708674 "getTypeVariables"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeVariable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type variables declared by the formal type parameters
of this executable.

@return the type variables declared by the formal type parameters,
         or an empty list if there are none
"
      end

      operation 9708802 "getReturnType"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the return type of this executable.
Returns a {@link NoType} with kind {@link TypeKind#VOID VOID}
if this executable is not a method, or is a method that does not
return a value.

@return the return type of this executable
"
      end

      operation 9708930 "getParameterTypes"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the types of this executable's formal parameters.

@return the types of this executable's formal parameters,
         or an empty list if there are none
"
      end

      operation 9709058 "getReceiverType"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the receiver type of this executable,
or {@link javax.lang.model.type.NoType NoType} with
kind {@link javax.lang.model.type.TypeKind#NONE NONE}
if the executable has no receiver type.

An executable which is an instance method, or a constructor of an
inner class, has a receiver type derived from the {@linkplain
ExecutableElement#getEnclosingElement declaring type}.

An executable which is a static method, or a constructor of a
non-inner class, or an initializer (static or instance), has no
receiver type.

@return the receiver type of this executable
@since 1.8
"
      end

      operation 9709186 "getThrownTypes"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exceptions and other throwables listed in this
executable's {@code throws} clause.

@return the exceptions and other throwables listed in this
         executable's {@code throws} clause,
         or an empty list if there are none.
"
      end
    end

    class 1181442 "IntersectionType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an intersection type.

<p>An intersection type can be either implicitly or explicitly
declared in a program. For example, the bound of the type parameter
{@code <T extends Number & Runnable>} is an (implicit) intersection
type.  As of {@link javax.lang.model.SourceVersion#RELEASE_8
RELEASE_8}, this is represented by an {@code IntersectionType} with
{@code Number} and {@code Runnable} as its bounds.

@implNote Also as of {@link
javax.lang.model.SourceVersion#RELEASE_8 RELEASE_8}, in the
reference implementation an {@code IntersectionType} is used to
model the explicit target type of a cast expression.

@since 1.8
"
      classrelation 3773570 // <generalisation>
	relation 3773570 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3773570 // <generalisation>
	  b parent class_ref 852226 // TypeMirror
      end

      operation 9709314 "getBounds"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the bounds comprising this intersection type.

@return the bounds of this intersection types.
"
      end
    end

    class 1181570 "MirroredTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when an application attempts to access the {@link Class} object
corresponding to a {@link TypeMirror}.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see MirroredTypesException
@see Element#getAnnotation(Class)
@since 1.6
"
      classrelation 3773954 // <generalisation>
	relation 3773954 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3773954 // <generalisation>
	  b parent class_ref 1181698 // MirroredTypesException
      end

      attribute 2258050 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 269"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3774082 // type (<unidirectional association>)
	relation 3774082 --->
	  a role_name "type" private
	    comment " cannot be serialized"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3774082 // type (<unidirectional association>)
	  b parent class_ref 852226 // TypeMirror
      end

      operation 9709954 "MirroredTypeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 852226 // TypeMirror
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new MirroredTypeException for the specified type.

@param type  the type being accessed
"
      end

      operation 9710082 "getTypeMirror"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type mirror corresponding to the type being accessed.
The type mirror may be unavailable if this exception has been
serialized and then read back in.

@return the type mirror, or {@code null} if unavailable
"
      end

      operation 9710210 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Explicitly set all transient fields.
"
      end
    end

    class 1181698 "MirroredTypesException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when an application attempts to access a sequence of {@link
Class} objects each corresponding to a {@link TypeMirror}.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see MirroredTypeException
@see Element#getAnnotation(Class)
@since 1.6
"
      classrelation 3773698 // <generalisation>
	relation 3773698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3773698 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 2257922 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 269"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3773826 // types (<unidirectional association>)
	relation 3773826 --->
	  a role_name "types" package
	    comment " cannot be serialized"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends TypeMirror> ${name}${value};
"
	    classrelation_ref 3773826 // types (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 9709442 "MirroredTypesException"
	package explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "type" type class_ref 852226 // TypeMirror
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Trusted constructor to be called by MirroredTypeException.
"
      end

      operation 9709570 "MirroredTypesException"
	public explicit_return_type ""
	nparams 1
	  param inout name "types" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends TypeMirror> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new MirroredTypesException for the specified types.

@param types  the types being accessed
"
      end

      operation 9709698 "getTypeMirrors"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type mirrors corresponding to the types being accessed.
The type mirrors may be unavailable if this exception has been
serialized and then read back in.

@return the type mirrors in construction order, or {@code null} if unavailable
"
      end

      operation 9709826 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Explicitly set all transient fields.
"
      end
    end

    class 1181826 "NoType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A pseudo-type used where no actual type is appropriate.
The kinds of {@code NoType} are:
<ul>
<li>{@link TypeKind#VOID VOID} - corresponds to the keyword {@code void}.
<li>{@link TypeKind#PACKAGE PACKAGE} - the pseudo-type of a package element.
<li>{@link TypeKind#NONE NONE} - used in other cases
  where no actual type is appropriate; for example, the superclass
  of {@code java.lang.Object}.
</ul>

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see ExecutableElement#getReturnType()
@since 1.6
"
      classrelation 3774210 // <generalisation>
	relation 3774210 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3774210 // <generalisation>
	  b parent class_ref 852226 // TypeMirror
      end
    end

    class 1181954 "NullType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents the null type.
This is the type of the expression {@code null},

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 3774338 // <generalisation>
	relation 3774338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3774338 // <generalisation>
	  b parent class_ref 1181058 // ReferenceType
      end
    end

    class 1182082 "PrimitiveType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a primitive type.  These include
{@code boolean}, {@code byte}, {@code short}, {@code int},
{@code long}, {@code char}, {@code float}, and {@code double}.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 3774466 // <generalisation>
	relation 3774466 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3774466 // <generalisation>
	  b parent class_ref 852226 // TypeMirror
      end
    end

    class 1182210 "TypeVariable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a type variable.
A type variable may be explicitly declared by a
{@linkplain TypeParameterElement type parameter} of a
type, method, or constructor.
A type variable may also be declared implicitly, as by
the capture conversion of a wildcard type argument
(see chapter 5 of
<cite>The Java&trade; Language Specification</cite>).

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see TypeParameterElement
@since 1.6
"
      classrelation 3774594 // <generalisation>
	relation 3774594 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3774594 // <generalisation>
	  b parent class_ref 1181058 // ReferenceType
      end

      operation 9710466 "asElement"
	public return_type class_ref 851842 // Element
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the element corresponding to this type variable.

@return the element corresponding to this type variable
"
      end

      operation 9710594 "getUpperBound"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the upper bound of this type variable.

<p> If this type variable was declared with no explicit
upper bounds, the result is {@code java.lang.Object}.
If it was declared with multiple upper bounds,
the result is an {@linkplain IntersectionType intersection type};
individual bounds can be found by examining the result's
{@linkplain IntersectionType#getBounds() bounds}.

@return the upper bound of this type variable
"
      end

      operation 9710722 "getLowerBound"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lower bound of this type variable.  While a type
parameter cannot include an explicit lower bound declaration,
capture conversion can produce a type variable with a
non-trivial lower bound.  Type variables otherwise have a
lower bound of {@link NullType}.

@return the lower bound of this type variable
"
      end
    end

    class 1182338 "WildcardType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a wildcard type argument.
Examples include:    <pre><tt>
  ?
  ? extends Number
  ? super T
</tt></pre>

<p> A wildcard may have its upper bound explicitly set by an
{@code extends} clause, its lower bound explicitly set by a
{@code super} clause, or neither (but not both).

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@since 1.6
"
      classrelation 3775234 // <generalisation>
	relation 3775234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3775234 // <generalisation>
	  b parent class_ref 852226 // TypeMirror
      end

      operation 9713154 "getExtendsBound"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the upper bound of this wildcard.
If no upper bound is explicitly declared,
{@code null} is returned.

@return the upper bound of this wildcard
"
      end

      operation 9713282 "getSuperBound"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lower bound of this wildcard.
If no lower bound is explicitly declared,
{@code null} is returned.

@return the lower bound of this wildcard
"
      end
    end

    class 1182466 "UnionType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a union type.

As of the {@link javax.lang.model.SourceVersion#RELEASE_7
RELEASE_7} source version, union types can appear as the type
of a multi-catch exception parameter.

@since 1.7
"
      classrelation 3774722 // <generalisation>
	relation 3774722 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3774722 // <generalisation>
	  b parent class_ref 852226 // TypeMirror
      end

      operation 9712642 "getAlternatives"
	public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends TypeMirror> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the alternatives comprising this union type.

@return the alternatives comprising this union type.
"
      end
    end

    class 1182594 "UnknownTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Indicates that an unknown kind of type was encountered.  This can
occur if the language evolves and new kinds of types are added to
the {@code TypeMirror} hierarchy.  May be thrown by a {@linkplain
TypeVisitor type visitor} to indicate that the visitor was created
for a prior version of the language.

@author Joseph D. Darcy
@author Scott Seligman
@author Peter von der Ah&eacute;
@see TypeVisitor#visitUnknown
@since 1.6
"
      classrelation 3774850 // <generalisation>
	relation 3774850 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3774850 // <generalisation>
	  b parent class_ref 1179394 // UnknownEntityException
      end

      attribute 2260866 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 269L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3774978 // type (<unidirectional association>)
	relation 3774978 --->
	  a role_name "type" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3774978 // type (<unidirectional association>)
	  b parent class_ref 852226 // TypeMirror
      end

      classrelation 3775106 // parameter (<unidirectional association>)
	relation 3775106 --->
	  a role_name "parameter" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3775106 // parameter (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 9712770 "UnknownTypeException"
	public explicit_return_type ""
	nparams 2
	  param inout name "t" type class_ref 852226 // TypeMirror
	  param inout name "p" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code UnknownTypeException}.The {@code p}
parameter may be used to pass in an additional argument with
information about the context in which the unknown type was
encountered; for example, the visit methods of {@link
TypeVisitor} may pass in their additional parameter.

@param t the unknown type, may be {@code null}
@param p an additional parameter, may be {@code null}
"
      end

      operation 9712898 "getUnknownType"
	public return_type class_ref 852226 // TypeMirror
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the unknown type.
The value may be unavailable if this exception has been
serialized and then read back in.

@return the unknown type, or {@code null} if unavailable
"
      end

      operation 9713026 "getArgument"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the additional argument.

@return the additional argument
"
      end
    end
  end

  deploymentview 172546 "type"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 843138 "TypeMirror"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import java.util.List;
import javax.lang.model.element.*;
import javax.lang.model.util.Types;
${definition}"
      associated_elems
	class_ref 852226 // TypeMirror
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 843266 "ReferenceType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1181058 // ReferenceType
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 843394 "ArrayType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1180930 // ArrayType
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 843522 "DeclaredType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Types;
${definition}"
      associated_elems
	class_ref 852354 // DeclaredType
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 843650 "ErrorType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 852482 // ErrorType
      end
      comment "Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 843778 "ExecutableType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import javax.lang.model.element.ExecutableElement;
${definition}"
      associated_elems
	class_ref 1181314 // ExecutableType
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 843906 "IntersectionType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 1181442 // IntersectionType
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 844034 "MirroredTypesException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import java.io.ObjectInputStream;
import java.io.IOException;
import javax.lang.model.element.Element;
${definition}"
      associated_elems
	class_ref 1181698 // MirroredTypesException
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 844162 "MirroredTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectInputStream;
import java.io.IOException;
import javax.lang.model.element.Element;
${definition}"
      associated_elems
	class_ref 1181570 // MirroredTypeException
      end
      comment "Copyright (c) 2005, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 844290 "NoType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.ExecutableElement;
${definition}"
      associated_elems
	class_ref 1181826 // NoType
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 844418 "NullType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1181954 // NullType
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 844546 "PrimitiveType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1182082 // PrimitiveType
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 844674 "TypeKind"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 848514 // TypeKind
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 844802 "TypeVariable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.Element;
import javax.lang.model.element.TypeParameterElement;
import javax.lang.model.util.Types;
${definition}"
      associated_elems
	class_ref 1182210 // TypeVariable
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 844930 "TypeVisitor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.element.*;
${definition}"
      associated_elems
	class_ref 1181186 // TypeVisitor
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 845058 "UnionType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.List;
${definition}"
      associated_elems
	class_ref 1182466 // UnionType
      end
      comment "Copyright (c) 2010, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 845186 "UnknownTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.lang.model.UnknownEntityException;
${definition}"
      associated_elems
	class_ref 1182594 // UnknownTypeException
      end
      comment "Copyright (c) 2005, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 845314 "WildcardType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1182338 // WildcardType
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
