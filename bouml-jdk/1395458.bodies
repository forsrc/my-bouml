class ColumnIterator
!!!11812866.java!!!	disablePercentages() : void
            percentages = null;
!!!11812994.java!!!	updatePercentagesAndAdjustmentWeights(in span : int) : void
            adjustmentWeights = new int[columnRequirements.length];
            for (int i = 0; i < columnRequirements.length; i++) {
                adjustmentWeights[i] = 0;
            }
            if (relativeCells) {
                percentages = new int[columnRequirements.length];
            } else {
                percentages = null;
            }
            int nrows = getRowCount();
            for (int rowIndex = 0; rowIndex < nrows; rowIndex++) {
                RowView row = getRow(rowIndex);
                int col = 0;
                int ncells = row.getViewCount();
                for (int cell = 0; cell < ncells; cell++, col++) {
                    View cv = row.getView(cell);
                    for (; row.isFilled(col); col++); // advance to a free column
                    int rowSpan = getRowsOccupied(cv);
                    int colSpan = getColumnsOccupied(cv);
                    AttributeSet a = cv.getAttributes();
                    CSS.LengthValue lv = (CSS.LengthValue)
                        a.getAttribute(CSS.Attribute.WIDTH);
                    if ( lv != null ) {
                        int len = (int) (lv.getValue(span) / colSpan + 0.5f);
                        for (int i = 0; i < colSpan; i++) {
                            if (lv.isPercentage()) {
                                // add a percentage requirement
                                percentages[col+i] = Math.max(percentages[col+i], len);
                                adjustmentWeights[col + i] = Math.max(adjustmentWeights[col + i], WorstAdjustmentWeight);
                            } else {
                                adjustmentWeights[col + i] = Math.max(adjustmentWeights[col + i], WorstAdjustmentWeight - 1);
                            }
                        }
                    }
                    col += colSpan - 1;
                }
            }
!!!11813122.java!!!	setLayoutArrays(inout offsets : int [[]], inout spans : int [[]], in targetSpan : int) : void
            this.offsets = offsets;
            this.spans = spans;
            updatePercentagesAndAdjustmentWeights(targetSpan);
!!!11813250.java!!!	getCount() : int
            return columnRequirements.length;
!!!11813378.java!!!	setIndex(in i : int) : void
            col = i;
!!!11813506.java!!!	setOffset(in offs : int) : void
            offsets[col] = offs;
!!!11813634.java!!!	getOffset() : int
            return offsets[col];
!!!11813762.java!!!	setSpan(in span : int) : void
            spans[col] = span;
!!!11813890.java!!!	getSpan() : int
            return spans[col];
!!!11814018.java!!!	getMinimumSpan(in parentSpan : float) : float
            // do not care for percentages, since min span can't
            // be less than columnRequirements[col].minimum,
            // but can be less than percentage value.
            return columnRequirements[col].minimum;
!!!11814146.java!!!	getPreferredSpan(in parentSpan : float) : float
            if ((percentages != null) && (percentages[col] != 0)) {
                return Math.max(percentages[col], columnRequirements[col].minimum);
            }
            return columnRequirements[col].preferred;
!!!11814274.java!!!	getMaximumSpan(in parentSpan : float) : float
            return columnRequirements[col].maximum;
!!!11814402.java!!!	getBorderWidth() : float
            return borderWidth;
!!!11814530.java!!!	getLeadingCollapseSpan() : float
            return cellSpacing;
!!!11814658.java!!!	getTrailingCollapseSpan() : float
            return cellSpacing;
!!!11814786.java!!!	getAdjustmentWeight() : int
            return adjustmentWeights[col];
