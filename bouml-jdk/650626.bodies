class DocumentTypeImpl
!!!4245634.java!!!	DocumentTypeImpl(inout ownerDocument : CoreDocumentImpl, inout name : String)
        super(ownerDocument);

        this.name = name;
        // DOM
        entities  = new NamedNodeMapImpl(this);
        notations = new NamedNodeMapImpl(this);

        // NON-DOM
        elements = new NamedNodeMapImpl(this);

!!!4245762.java!!!	DocumentTypeImpl(inout ownerDocument : CoreDocumentImpl, inout qualifiedName : String, inout publicID : String, inout systemID : String)
        this(ownerDocument, qualifiedName);
        this.publicID = publicID;
        this.systemID = systemID;

!!!4245890.java!!!	getPublicId() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        return publicID;
!!!4246018.java!!!	getSystemId() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        return systemID;
!!!4246146.java!!!	setInternalSubset(inout internalSubset : String) : void
        if (needsSyncData()) {
            synchronizeData();
        }
        this.internalSubset = internalSubset;
!!!4246274.java!!!	getInternalSubset() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        return internalSubset;
!!!4246402.java!!!	getNodeType() : short
        return Node.DOCUMENT_TYPE_NODE;
!!!4246530.java!!!	getNodeName() : String
        if (needsSyncData()) {
            synchronizeData();
        }
        return name;
!!!4246658.java!!!	cloneNode(inout deep : boolean) : Node

        DocumentTypeImpl newnode = (DocumentTypeImpl)super.cloneNode(deep);
        // NamedNodeMaps must be cloned explicitly, to avoid sharing them.
        newnode.entities  = entities.cloneMap(newnode);
        newnode.notations = notations.cloneMap(newnode);
        newnode.elements  = elements.cloneMap(newnode);

        return newnode;

!!!4246786.java!!!	getTextContent() : String
        return null;
!!!4246914.java!!!	setTextContent(inout textContent : String) : void
        // no-op
!!!4247042.java!!!	isEqualNode(inout arg : Node) : boolean

        if (!super.isEqualNode(arg)) {
            return false;
        }

        if (needsSyncData()) {
            synchronizeData();
        }
        DocumentTypeImpl argDocType = (DocumentTypeImpl) arg;

        //test if the following string attributes are equal: publicId,
        //systemId, internalSubset.
        if ((getPublicId() == null && argDocType.getPublicId() != null)
            || (getPublicId() != null && argDocType.getPublicId() == null)
            || (getSystemId() == null && argDocType.getSystemId() != null)
            || (getSystemId() != null && argDocType.getSystemId() == null)
            || (getInternalSubset() == null
                && argDocType.getInternalSubset() != null)
            || (getInternalSubset() != null
                && argDocType.getInternalSubset() == null)) {
            return false;
        }

        if (getPublicId() != null) {
            if (!getPublicId().equals(argDocType.getPublicId())) {
                return false;
            }
        }

        if (getSystemId() != null) {
            if (!getSystemId().equals(argDocType.getSystemId())) {
                return false;
            }
        }

        if (getInternalSubset() != null) {
            if (!getInternalSubset().equals(argDocType.getInternalSubset())) {
                return false;
            }
        }

        //test if NamedNodeMaps entities and notations are equal
        NamedNodeMapImpl argEntities = argDocType.entities;

        if ((entities == null && argEntities != null)
            || (entities != null && argEntities == null))
            return false;

        if (entities != null && argEntities != null) {
            if (entities.getLength() != argEntities.getLength())
                return false;

            for (int index = 0; entities.item(index) != null; index++) {
                Node entNode1 = entities.item(index);
                Node entNode2 =
                    argEntities.getNamedItem(entNode1.getNodeName());

                if (!((NodeImpl) entNode1).isEqualNode((NodeImpl) entNode2))
                    return false;
            }
        }

        NamedNodeMapImpl argNotations = argDocType.notations;

        if ((notations == null && argNotations != null)
            || (notations != null && argNotations == null))
            return false;

        if (notations != null && argNotations != null) {
            if (notations.getLength() != argNotations.getLength())
                return false;

            for (int index = 0; notations.item(index) != null; index++) {
                Node noteNode1 = notations.item(index);
                Node noteNode2 =
                    argNotations.getNamedItem(noteNode1.getNodeName());

                if (!((NodeImpl) noteNode1).isEqualNode((NodeImpl) noteNode2))
                    return false;
            }
        }

        return true;
!!!4247170.java!!!	setOwnerDocument(inout doc : CoreDocumentImpl) : void
        super.setOwnerDocument(doc);
        entities.setOwnerDocument(doc);
        notations.setOwnerDocument(doc);
        elements.setOwnerDocument(doc);
!!!4247298.java!!!	getNodeNumber() : int
         // If the doctype has a document owner, get the node number
         // relative to the owner doc
         if (getOwnerDocument()!=null)
            return super.getNodeNumber();

         // The doctype is disconnected and not associated with any document.
         // Assign the doctype a number relative to the implementation.
         if (doctypeNumber==0) {

            CoreDOMImplementationImpl cd = (CoreDOMImplementationImpl)CoreDOMImplementationImpl.getDOMImplementation();
            doctypeNumber = cd.assignDocTypeNumber();
         }
         return doctypeNumber;
!!!4247426.java!!!	getName() : String

        if (needsSyncData()) {
            synchronizeData();
        }
        return name;

!!!4247554.java!!!	getEntities() : NamedNodeMap
        if (needsSyncChildren()) {
            synchronizeChildren();
            }
        return entities;
!!!4247682.java!!!	getNotations() : NamedNodeMap
        if (needsSyncChildren()) {
            synchronizeChildren();
            }
        return notations;
!!!4247810.java!!!	setReadOnly(inout readOnly : boolean, inout deep : boolean) : void

        if (needsSyncChildren()) {
            synchronizeChildren();
        }
        super.setReadOnly(readOnly, deep);

        // set read-only property
        elements.setReadOnly(readOnly, true);
        entities.setReadOnly(readOnly, true);
        notations.setReadOnly(readOnly, true);

!!!4247938.java!!!	getElements() : NamedNodeMap
        if (needsSyncChildren()) {
            synchronizeChildren();
        }
        return elements;
!!!4248066.java!!!	setUserData(inout key : String, inout data : Object, inout handler : UserDataHandler) : Object
        if(userData == null)
            userData = new HashMap<>();
        if (data == null) {
            if (userData != null) {
                UserDataRecord udr = userData.remove(key);
                if (udr != null) {
                    return udr.fData;
                }
            }
            return null;
        }
        else {
            UserDataRecord udr = userData.put(key, new UserDataRecord(data, handler));
            if (udr != null) {
                return udr.fData;
            }
        }
        return null;
!!!4248194.java!!!	getUserData(inout key : String) : Object
        if (userData == null) {
            return null;
        }
        UserDataRecord udr = userData.get(key);
        if (udr != null) {
            return udr.fData;
        }
        return null;
!!!4248322.java!!!	getUserDataRecord() : Map
        return userData;
!!!4248450.java!!!	writeObject(inout out : ObjectOutputStream) : void
        // Convert the HashMap to Hashtable
        Hashtable<String, UserDataRecord> ud = (userData == null)? null : new Hashtable<>(userData);

        // Write serialized fields
        ObjectOutputStream.PutField pf = out.putFields();
        pf.put("name", name);
        pf.put("entities", entities);
        pf.put("notations", notations);
        pf.put("elements", elements);
        pf.put("publicID", publicID);
        pf.put("systemID", systemID);
        pf.put("internalSubset", internalSubset);
        pf.put("doctypeNumber", doctypeNumber);
        pf.put("userData", ud);
        out.writeFields();
!!!4248578.java!!!	readObject(inout in : ObjectInputStream) : void
        // We have to read serialized fields first.
        ObjectInputStream.GetField gf = in.readFields();
        name = (String)gf.get("name", null);
        entities = (NamedNodeMapImpl)gf.get("entities", null);
        notations = (NamedNodeMapImpl)gf.get("notations", null);
        elements = (NamedNodeMapImpl)gf.get("elements", null);
        publicID = (String)gf.get("publicID", null);
        systemID = (String)gf.get("systemID", null);
        internalSubset = (String)gf.get("internalSubset", null);
        doctypeNumber = gf.get("doctypeNumber", 0);

        Hashtable<String, UserDataRecord> ud =
                (Hashtable<String, UserDataRecord>)gf.get("userData", null);

        //convert the Hashtable back to HashMap
        if (ud != null) userData = new HashMap<>(ud);
