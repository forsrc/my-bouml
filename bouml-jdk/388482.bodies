class HashSet
!!!8811138.java!!!	HashSet()
        map = new HashMap<>();
!!!8811266.java!!!	HashSet(inout c : Collection)
        map = new HashMap<>(Math.max((int) (c.size()/.75f) + 1, 16));
        addAll(c);
!!!8811394.java!!!	HashSet(in initialCapacity : int, in loadFactor : float)
        map = new HashMap<>(initialCapacity, loadFactor);
!!!8811522.java!!!	HashSet(in initialCapacity : int)
        map = new HashMap<>(initialCapacity);
!!!8811650.java!!!	HashSet(in initialCapacity : int, in loadFactor : float, inout dummy : boolean)
        map = new LinkedHashMap<>(initialCapacity, loadFactor);
!!!8811778.java!!!	iterator() : Iterator
        return map.keySet().iterator();
!!!8811906.java!!!	size() : int
        return map.size();
!!!8812034.java!!!	isEmpty() : boolean
        return map.isEmpty();
!!!8812162.java!!!	contains(inout o : Object) : boolean
        return map.containsKey(o);
!!!8812290.java!!!	add(inout e : E) : boolean
        return map.put(e, PRESENT)==null;
!!!8812418.java!!!	remove(inout o : Object) : boolean
        return map.remove(o)==PRESENT;
!!!8812546.java!!!	clear() : void
        map.clear();
!!!8812674.java!!!	clone() : Object
        try {
            HashSet<E> newSet = (HashSet<E>) super.clone();
            newSet.map = (HashMap<E, Object>) map.clone();
            return newSet;
        } catch (CloneNotSupportedException e) {
            throw new InternalError(e);
        }
!!!8812802.java!!!	writeObject(inout s : ObjectOutputStream) : void
        // Write out any hidden serialization magic
        s.defaultWriteObject();

        // Write out HashMap capacity and load factor
        s.writeInt(map.capacity());
        s.writeFloat(map.loadFactor());

        // Write out size
        s.writeInt(map.size());

        // Write out all elements in the proper order.
        for (E e : map.keySet())
            s.writeObject(e);
!!!8812930.java!!!	readObject(inout s : ObjectInputStream) : void
        // Read in any hidden serialization magic
        s.defaultReadObject();

        // Read capacity and verify non-negative.
        int capacity = s.readInt();
        if (capacity < 0) {
            throw new InvalidObjectException("Illegal capacity: " +
                                             capacity);
        }

        // Read load factor and verify positive and non NaN.
        float loadFactor = s.readFloat();
        if (loadFactor <= 0 || Float.isNaN(loadFactor)) {
            throw new InvalidObjectException("Illegal load factor: " +
                                             loadFactor);
        }

        // Read size and verify non-negative.
        int size = s.readInt();
        if (size < 0) {
            throw new InvalidObjectException("Illegal size: " +
                                             size);
        }

        // Set the capacity according to the size and load factor ensuring that
        // the HashMap is at least 25% full but clamping to maximum capacity.
        capacity = (int) Math.min(size * Math.min(1 / loadFactor, 4.0f),
                HashMap.MAXIMUM_CAPACITY);

        // Create backing HashMap
        map = (((HashSet<?>)this) instanceof LinkedHashSet ?
               new LinkedHashMap<E,Object>(capacity, loadFactor) :
               new HashMap<E,Object>(capacity, loadFactor));

        // Read in all elements in the proper order.
        for (int i=0; i<size; i++) {
            @SuppressWarnings("unchecked")
                E e = (E) s.readObject();
            map.put(e, PRESENT);
        }
!!!8813058.java!!!	spliterator() : Spliterator
        return new HashMap.KeySpliterator<E,Object>(map, 0, -1, 0, 0);
