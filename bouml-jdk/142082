format 222
"concurrent" // jdk1.8::com::sun::corba::se::impl::orbutil::concurrent
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/corba/se/impl/orbutil/concurrent/"
  java_package "com.sun.corba.se.impl.orbutil.concurrent"
  classview 139394 "concurrent"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 228994 "CondVar"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is designed for fans of POSIX pthreads programming.
If you restrict yourself to Mutexes and CondVars, you can
use most of your favorite constructions. Don't randomly mix them
with synchronized methods or blocks though.
<p>
Method names and behavior are as close as is reasonable to
those in POSIX.
<p>
<b>Sample Usage.</b> Here is a full version of a bounded buffer
that implements the BoundedChannel interface, written in
a style reminscent of that in POSIX programming books.
<pre>
class CVBuffer implements BoundedChannel {
  private final Mutex mutex;
  private final CondVar notFull;
  private final CondVar notEmpty;
  private int count = 0;
  private int takePtr = 0;
  private int putPtr = 0;
  private final Object[] array;

  public CVBuffer(int capacity) {
    array = new Object[capacity];
    mutex = new Mutex();
    notFull = new CondVar(mutex);
    notEmpty = new CondVar(mutex);
  }

  public int capacity() { return array.length; }

  public void put(Object x) throws InterruptedException {
    mutex.acquire();
    try {
      while (count == array.length) {
        notFull.await();
      }
      array[putPtr] = x;
      putPtr = (putPtr + 1) % array.length;
      ++count;
      notEmpty.signal();
    }
    finally {
      mutex.release();
    }
  }

  public Object take() throws InterruptedException {
    Object x = null;
    mutex.acquire();
    try {
      while (count == 0) {
        notEmpty.await();
      }
      x = array[takePtr];
      array[takePtr] = null;
      takePtr = (takePtr + 1) % array.length;
      --count;
      notFull.signal();
    }
    finally {
      mutex.release();
    }
    return x;
  }

  public boolean offer(Object x, long msecs) throws InterruptedException {
    mutex.acquire();
    try {
      if (count == array.length) {
        notFull.timedwait(msecs);
        if (count == array.length)
          return false;
      }
      array[putPtr] = x;
      putPtr = (putPtr + 1) % array.length;
      ++count;
      notEmpty.signal();
      return true;
    }
    finally {
      mutex.release();
    }
  }

  public Object poll(long msecs) throws InterruptedException {
    Object x = null;
    mutex.acquire();
    try {
      if (count == 0) {
        notEmpty.timedwait(msecs);
        if (count == 0)
          return null;
      }
      x = array[takePtr];
      array[takePtr] = null;
      takePtr = (takePtr + 1) % array.length;
      --count;
      notFull.signal();
    }
    finally {
      mutex.release();
    }
    return x;
  }
}

</pre>
@see Mutex
<p>[<a href=\"http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html\"> Introduction to this package. </a>]

"
      attribute 307458 "debug_"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 363010 // mutex_ (<unidirectional association>)
	relation 363010 --->
	  a role_name "mutex_" const_relation protected
	    comment " The mutex *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 363010 // mutex_ (<unidirectional association>)
	  b parent class_ref 236034 // Sync
      end

      classrelation 363138 // remutex_ (<unidirectional association>)
	relation 363138 --->
	  a role_name "remutex_" const_relation protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 363138 // remutex_ (<unidirectional association>)
	  b parent class_ref 254210 // ReentrantMutex
      end

      operation 1278466 "releaseMutex"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1278594 "acquireMutex"
	private explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1278722 "CondVar"
	public explicit_return_type ""
	nparams 2
	  param inout name "mutex" type class_ref 236034 // Sync
	  param inout name "debug" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new CondVar that relies on the given mutual
exclusion lock.
@param mutex A mutual exclusion lock which must either be non-reentrant,
or else be ReentrantMutex.
Standard usage is to supply an instance of <code>Mutex</code>,
but, for example, a Semaphore initialized to 1 also works.
On the other hand, many other Sync implementations would not
work here, so some care is required to supply a sensible
synchronization object.
In normal use, the mutex should be one that is used for <em>all</em>
synchronization of the object using the CondVar. Generally,
to prevent nested monitor lockouts, this
object should not use any native Java synchronized blocks.
"
      end

      operation 1278850 "CondVar"
	public explicit_return_type ""
	nparams 1
	  param inout name "mutex" type class_ref 236034 // Sync
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1278978 "await"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wait for notification. This operation at least momentarily
releases the mutex. The mutex is always held upon return,
even if interrupted.
@exception InterruptedException if the thread was interrupted
before or during the wait. However, if the thread is interrupted
after the wait but during mutex re-acquisition, the interruption
is ignored, while still ensuring
that the currentThread's interruption state stays true, so can
be probed by callers.
"
      end

      operation 1279106 "timedwait"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "msecs" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wait for at most msecs for notification.
This operation at least momentarily
releases the mutex. The mutex is always held upon return,
even if interrupted.
@param msecs The time to wait. A value less than or equal to zero
causes a momentarily release
and re-acquire of the mutex, and always returns false.
@return false if at least msecs have elapsed
upon resumption; else true. A
false return does NOT necessarily imply that the thread was
not notified. For example, it might have been notified
after the time elapsed but just before resuming.
@exception InterruptedException if the thread was interrupted
before or during the wait.
"
      end

      operation 1279234 "signal"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notify a waiting thread.
If one exists, a non-interrupted thread will return
normally (i.e., not via InterruptedException) from await or timedwait.
"
      end

      operation 1279362 "broadcast"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Notify all waiting threads *"
      end
    end

    class 236034 "Sync"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Main interface for locks, gates, and conditions.
<p>
Sync objects isolate waiting and notification for particular
logical states, resource availability, events, and the like that are
shared across multiple threads. Use of Syncs sometimes
(but by no means always) adds flexibility and efficiency
compared to the use of plain java monitor methods
and locking, and are sometimes (but by no means always)
simpler to program with.
<p>

Most Syncs are intended to be used primarily (although
not exclusively) in  before/after constructions such as:
<pre>
class X {
  Sync gate;
  // ...

  public void m() {
    try {
      gate.acquire();  // block until condition holds
      try {
        // ... method body
      }
      finally {
        gate.release()
      }
    }
    catch (InterruptedException ex) {
      // ... evasive action
    }
  }

  public void m2(Sync cond) { // use supplied condition
    try {
      if (cond.attempt(10)) {         // try the condition for 10 ms
        try {
          // ... method body
        }
        finally {
          cond.release()
        }
      }
    }
    catch (InterruptedException ex) {
      // ... evasive action
    }
  }
}
</pre>
Syncs may be used in somewhat tedious but more flexible replacements
for built-in Java synchronized blocks. For example:
<pre>
class HandSynched {
  private double state_ = 0.0;
  private final Sync lock;  // use lock type supplied in constructor
  public HandSynched(Sync l) { lock = l; }

  public void changeState(double d) {
    try {
      lock.acquire();
      try     { state_ = updateFunction(d); }
      finally { lock.release(); }
    }
    catch(InterruptedException ex) { }
  }

  public double getState() {
    double d = 0.0;
    try {
      lock.acquire();
      try     { d = accessFunction(state_); }
      finally { lock.release(); }
    }
    catch(InterruptedException ex){}
    return d;
  }
  private double updateFunction(double d) { ... }
  private double accessFunction(double d) { ... }
}
</pre>
If you have a lot of such methods, and they take a common
form, you can standardize this using wrappers. Some of these
wrappers are standardized in LockedExecutor, but you can make others.
For example:
<pre>
class HandSynchedV2 {
  private double state_ = 0.0;
  private final Sync lock;  // use lock type supplied in constructor
  public HandSynchedV2(Sync l) { lock = l; }

  protected void runSafely(Runnable r) {
    try {
      lock.acquire();
      try { r.run(); }
      finally { lock.release(); }
    }
    catch (InterruptedException ex) { // propagate without throwing
      Thread.currentThread().interrupt();
    }
  }

  public void changeState(double d) {
    runSafely(new Runnable() {
      public void run() { state_ = updateFunction(d); }
    });
  }
  // ...
}
</pre>
<p>
One reason to bother with such constructions is to use deadlock-
avoiding back-offs when dealing with locks involving multiple objects.
For example, here is a Cell class that uses attempt to back-off
and retry if two Cells are trying to swap values with each other
at the same time.
<pre>
class Cell {
  long value;
  Sync lock = ... // some sync implementation class
  void swapValue(Cell other) {
    for (;;) {
      try {
        lock.acquire();
        try {
          if (other.lock.attempt(100)) {
            try {
              long t = value;
              value = other.value;
              other.value = t;
              return;
            }
            finally { other.lock.release(); }
          }
        }
        finally { lock.release(); }
      }
      catch (InterruptedException ex) { return; }
    }
  }
}
</pre>
<p>
Here is an even fancier version, that uses lock re-ordering
upon conflict:
<pre>
class Cell {
  long value;
  Sync lock = ...;
  private static boolean trySwap(Cell a, Cell b) {
    a.lock.acquire();
    try {
      if (!b.lock.attempt(0))
        return false;
      try {
        long t = a.value;
        a.value = b.value;
        b.value = t;
        return true;
      }
      finally { other.lock.release(); }
    }
    finally { lock.release(); }
    return false;
  }

 void swapValue(Cell other) {
   try {
     while (!trySwap(this, other) &&
           !tryswap(other, this))
       Thread.sleep(1);
   }
   catch (InterruptedException ex) { return; }
 }
}
</pre>
<p>
Interruptions are in general handled as early as possible.
Normally, InterruptionExceptions are thrown
in acquire and attempt(msec) if interruption
is detected upon entry to the method, as well as in any
later context surrounding waits.
However, interruption status is ignored in release();
<p>
Timed versions of attempt report failure via return value.
If so desired, you can transform such constructions to use exception
throws via
<pre>
  if (!c.attempt(timeval)) throw new TimeoutException(timeval);
</pre>
<p>
The TimoutSync wrapper class can be used to automate such usages.
<p>
All time values are expressed in milliseconds as longs, which have a maximum
value of Long.MAX_VALUE, or almost 300,000 centuries. It is not
known whether JVMs actually deal correctly with such extreme values.
For convenience, some useful time values are defined as static constants.
<p>
All implementations of the three Sync methods guarantee to
somehow employ Java <code>synchronized</code> methods or blocks,
and so entail the memory operations described in JLS
chapter 17 which ensure that variables are loaded and flushed
within before/after constructions.
<p>
Syncs may also be used in spinlock constructions. Although
it is normally best to just use acquire(), various forms
of busy waits can be implemented. For a simple example
(but one that would probably never be preferable to using acquire()):
<pre>
class X {
  Sync lock = ...
  void spinUntilAcquired() throws InterruptedException {
    // Two phase.
    // First spin without pausing.
    int purespins = 10;
    for (int i = 0; i < purespins; ++i) {
      if (lock.attempt(0))
        return true;
    }
    // Second phase - use timed waits
    long waitTime = 1; // 1 millisecond
    for (;;) {
      if (lock.attempt(waitTime))
        return true;
      else
        waitTime = waitTime * 3 / 2 + 1; // increase 50%
    }
  }
}
</pre>
<p>
In addition pure synchronization control, Syncs
may be useful in any context requiring before/after methods.
For example, you can use an ObservableSync
(perhaps as part of a LayeredSync) in order to obtain callbacks
before and after each method invocation for a given class.
<p>

<p>[<a href=\"http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html\"> Introduction to this package. </a>]
"
      operation 1279490 "acquire"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Wait (possibly forever) until successful passage.
 Fail only upon interuption. Interruptions always result in
 `clean' failures. On failure,  you can be sure that it has not
 been acquired, and that no
 corresponding release should be performed. Conversely,
 a normal return guarantees that the acquire was successful.
"
      end

      operation 1279618 "attempt"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "msecs" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wait at most msecs to pass; report whether passed.
<p>
The method has best-effort semantics:
The msecs bound cannot
be guaranteed to be a precise upper bound on wait time in Java.
Implementations generally can only attempt to return as soon as possible
after the specified bound. Also, timers in Java do not stop during garbage
collection, so timeouts can occur just because a GC intervened.
So, msecs arguments should be used in
a coarse-grained manner. Further,
implementations cannot always guarantee that this method
will return at all without blocking indefinitely when used in
unintended ways. For example, deadlocks may be encountered
when called in an unintended context.
<p>
@param msecs the number of milleseconds to wait.
An argument less than or equal to zero means not to wait at all.
However, this may still require
access to a synchronization lock, which can impose unbounded
delay if there is a lot of contention among threads.
@return true if acquired
"
      end

      operation 1279746 "release"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Potentially enable others to pass.
<p>
Because release does not raise exceptions,
it can be used in `finally' clauses without requiring extra
embedded try/catch blocks. But keep in mind that
as with any java method, implementations may
still throw unchecked exceptions such as Error or NullPointerException
when faced with uncontinuable errors. However, these should normally
only be caught by higher-level error handlers.
"
      end

      attribute 307586 "ONE_SECOND"
	class_attribute const_attribute public explicit_type "long"
	init_value " 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "  One second, in milliseconds; convenient as a time-out value *
"
      end

      attribute 307714 "ONE_MINUTE"
	class_attribute const_attribute public explicit_type "long"
	init_value " 60 * ONE_SECOND"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "  One minute, in milliseconds; convenient as a time-out value *
"
      end

      attribute 307842 "ONE_HOUR"
	class_attribute const_attribute public explicit_type "long"
	init_value " 60 * ONE_MINUTE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "  One hour, in milliseconds; convenient as a time-out value *
"
      end

      attribute 307970 "ONE_DAY"
	class_attribute const_attribute public explicit_type "long"
	init_value " 24 * ONE_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "  One day, in milliseconds; convenient as a time-out value *
"
      end

      attribute 308098 "ONE_WEEK"
	class_attribute const_attribute public explicit_type "long"
	init_value " 7 * ONE_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "  One week, in milliseconds; convenient as a time-out value *
"
      end

      attribute 308226 "ONE_YEAR"
	class_attribute const_attribute public explicit_type "long"
	init_value " (long)(365.2425 * ONE_DAY)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "  One year in milliseconds; convenient as a time-out value  *
 Not that it matters, but there is some variation across
 standard sources about value at msec precision.
 The value used is the same as in java.util.GregorianCalendar
"
      end

      attribute 308354 "ONE_CENTURY"
	class_attribute const_attribute public explicit_type "long"
	init_value " 100 * ONE_YEAR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "  One century in milliseconds; convenient as a time-out value *
"
      end
    end

    class 254210 "ReentrantMutex"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 363650 // <realization>
	relation 363650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 363650 // <realization>
	  b parent class_ref 236034 // Sync
      end

      classrelation 363778 // holder_ (<unidirectional association>)
	relation 363778 --->
	  a role_name "holder_" init_value " null" protected
	    comment " The thread holding the lock *
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 363778 // holder_ (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      attribute 308738 "counter_"
	protected explicit_type "int"
	init_value " 0 "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " number of times thread has acquired the lock *
"
      end

      attribute 308866 "debug"
	protected explicit_type "boolean"
	init_value " false "
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 1280642 "ReentrantMutex"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1280770 "ReentrantMutex"
	public explicit_return_type ""
	nparams 1
	  param inout name "debug" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1280898 "acquire"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1281026 "acquireAll"
	package explicit_return_type "void"
	nparams 1
	  param in name "count" explicit_type "int"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1281154 "release"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1281282 "releaseAll"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1281410 "attempt"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "msecs" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 254338 "DebugMutex"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      classrelation 363266 // <realization>
	relation 363266 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 363266 // <realization>
	  b parent class_ref 236034 // Sync
      end

      attribute 308482 "inuse_"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The lock status *
"
      end

      classrelation 363394 // holder_ (<unidirectional association>)
	relation 363394 --->
	  a role_name "holder_" init_value " null" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 363394 // holder_ (<unidirectional association>)
	  b parent class_ref 128642 // Thread
      end

      operation 1279874 "acquire"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1280002 "release"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1280130 "attempt"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "msecs" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 254466 "Mutex"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple non-reentrant mutual exclusion lock.
The lock is free upon construction. Each acquire gets the
lock, and each release frees it. Releasing a lock that
is already free has no effect.
<p>
This implementation makes no attempt to provide any fairness
or ordering guarantees. If you need them, consider using one of
the Semaphore implementations as a locking mechanism.
<p>
<b>Sample usage</b><br>
<p>
Mutex can be useful in constructions that cannot be
expressed using java synchronized blocks because the
acquire/release pairs do not occur in the same method or
code block. For example, you can use them for hand-over-hand
locking across the nodes of a linked list. This allows
extremely fine-grained locking,  and so increases
potential concurrency, at the cost of additional complexity and
overhead that would normally make this worthwhile only in cases of
extreme contention.
<pre>
class Node {
  Object item;
  Node next;
  Mutex lock = new Mutex(); // each node keeps its own lock

  Node(Object x, Node n) { item = x; next = n; }
}

class List {
   protected Node head; // pointer to first node of list

   // Use plain java synchronization to protect head field.
   //  (We could instead use a Mutex here too but there is no
   //  reason to do so.)
   protected synchronized Node getHead() { return head; }

   boolean search(Object x) throws InterruptedException {
     Node p = getHead();
     if (p == null) return false;

     //  (This could be made more compact, but for clarity of illustration,
     //  all of the cases that can arise are handled separately.)

     p.lock.acquire();              // Prime loop by acquiring first lock.
                                    //    (If the acquire fails due to
                                    //    interrupt, the method will throw
                                    //    InterruptedException now,
                                    //    so there is no need for any
                                    //    further cleanup.)
     for (;;) {
       if (x.equals(p.item)) {
         p.lock.release();          // release current before return
         return true;
       }
       else {
         Node nextp = p.next;
         if (nextp == null) {
           p.lock.release();       // release final lock that was held
           return false;
         }
         else {
           try {
             nextp.lock.acquire(); // get next lock before releasing current
           }
           catch (InterruptedException ex) {
             p.lock.release();    // also release current if acquire fails
             throw ex;
           }
           p.lock.release();      // release old lock now that new one held
           p = nextp;
         }
       }
     }
   }

   synchronized void add(Object x) { // simple prepend
     // The use of `synchronized'  here protects only head field.
     // The method does not need to wait out other traversers
     // who have already made it past head.

     head = new Node(x, head);
   }

   // ...  other similar traversal and update methods ...
}
</pre>
<p>
@see Semaphore
<p>[<a href=\"http://gee.cs.oswego.edu/dl/classes/EDU/oswego/cs/dl/util/concurrent/intro.html\"> Introduction to this package. </a>]
"
      classrelation 363522 // <realization>
	relation 363522 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 363522 // <realization>
	  b parent class_ref 236034 // Sync
      end

      attribute 308610 "inuse_"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The lock status *
"
      end

      operation 1280258 "acquire"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1280386 "release"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1280514 "attempt"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "msecs" explicit_type "long"
	nexceptions 1
	  exception class_ref 129666 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 254594 "SyncUtil"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 1281538 "SyncUtil"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1281666 "acquire"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "sync" type class_ref 236034 // Sync
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Method to acquire a Sync without ever throwing an
InterruptedException.  Useful when a mutex is being
used in place of Java synchronization.
"
      end
    end
  end

  deploymentview 135810 "concurrent"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 196994 "CondVar"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.corba.se.impl.orbutil.ORBUtility;
${definition}"
      associated_elems
	class_ref 228994 // CondVar
      end
      comment "Copyright (c) 2001, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















File: ConditionVariable.java

Originally written by Doug Lea and released into the public domain.
This may be used for any purposes whatsoever without acknowledgment.
Thanks for the assistance and support of Sun Microsystems Labs,
and everyone contributing, testing, and using this code.

History:
Date       Who                What
11Jun1998  dl               Create public version
08dec2001  kmc              Added support for Reentrant Mutexes
"
    end

    artifact 197122 "Sync"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 236034 // Sync
      end
      comment "Copyright (c) 2001, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















File: Sync.java

Originally written by Doug Lea and released into the public domain.
This may be used for any purposes whatsoever without acknowledgment.
Thanks for the assistance and support of Sun Microsystems Labs,
and everyone contributing, testing, and using this code.

History:
Date       Who                What
11Jun1998  dl               Create public version
5Aug1998  dl               Added some convenient time constants
"
    end

    artifact 197250 "DebugMutex"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import org.omg.CORBA.INTERNAL;
${definition}"
      associated_elems
	class_ref 254338 // DebugMutex
      end
      comment "Copyright (c) 2001, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















File: Mutex.java

Originally written by Doug Lea and released into the public domain.
This may be used for any purposes whatsoever without acknowledgment.
Thanks for the assistance and support of Sun Microsystems Labs,
and everyone contributing, testing, and using this code.

History:
Date       Who                What
11Jun1998  dl               Create public version
"
    end

    artifact 197378 "Mutex"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 254466 // Mutex
      end
      comment "Copyright (c) 2001, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















File: Mutex.java

Originally written by Doug Lea and released into the public domain.
This may be used for any purposes whatsoever without acknowledgment.
Thanks for the assistance and support of Sun Microsystems Labs,
and everyone contributing, testing, and using this code.

History:
Date       Who                What
11Jun1998  dl               Create public version
"
    end

    artifact 197506 "ReentrantMutex"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.corba.se.impl.orbutil.ORBUtility;
import org.omg.CORBA.INTERNAL;
${definition}"
      associated_elems
	class_ref 254210 // ReentrantMutex
      end
      comment "Copyright (c) 2001, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















File: Mutex.java

Originally written by Doug Lea and released into the public domain.
This may be used for any purposes whatsoever without acknowledgment.
Thanks for the assistance and support of Sun Microsystems Labs,
and everyone contributing, testing, and using this code.

History:
Date       Who                What
11Jun1998  dl               Create public version
"
    end

    artifact 197634 "SyncUtil"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.corba.se.impl.orbutil.concurrent.Sync;
${definition}"
      associated_elems
	class_ref 254594 // SyncUtil
      end
      comment "Copyright (c) 2001, 2002, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
