class TypeKindVisitor6
!!!9731586.java!!!	TypeKindVisitor6()
        super(null);
!!!9731714.java!!!	TypeKindVisitor6(inout defaultValue : R)
        super(defaultValue);
!!!9731842.java!!!	visitPrimitive(inout t : PrimitiveType, inout p : P) : R
        TypeKind k = t.getKind();
        switch (k) {
        case BOOLEAN:
            return visitPrimitiveAsBoolean(t, p);

        case BYTE:
            return visitPrimitiveAsByte(t, p);

        case SHORT:
            return visitPrimitiveAsShort(t, p);

        case INT:
            return visitPrimitiveAsInt(t, p);

        case LONG:
            return visitPrimitiveAsLong(t, p);

        case CHAR:
            return visitPrimitiveAsChar(t, p);

        case FLOAT:
            return visitPrimitiveAsFloat(t, p);

        case DOUBLE:
            return visitPrimitiveAsDouble(t, p);

        default:
            throw new AssertionError("Bad kind " + k + " for PrimitiveType" + t);
        }
!!!9731970.java!!!	visitPrimitiveAsBoolean(inout t : PrimitiveType, inout p : P) : R
        return defaultAction(t, p);
!!!9732098.java!!!	visitPrimitiveAsByte(inout t : PrimitiveType, inout p : P) : R
        return defaultAction(t, p);
!!!9732226.java!!!	visitPrimitiveAsShort(inout t : PrimitiveType, inout p : P) : R
        return defaultAction(t, p);
!!!9732354.java!!!	visitPrimitiveAsInt(inout t : PrimitiveType, inout p : P) : R
        return defaultAction(t, p);
!!!9732482.java!!!	visitPrimitiveAsLong(inout t : PrimitiveType, inout p : P) : R
        return defaultAction(t, p);
!!!9732610.java!!!	visitPrimitiveAsChar(inout t : PrimitiveType, inout p : P) : R
        return defaultAction(t, p);
!!!9732738.java!!!	visitPrimitiveAsFloat(inout t : PrimitiveType, inout p : P) : R
        return defaultAction(t, p);
!!!9732866.java!!!	visitPrimitiveAsDouble(inout t : PrimitiveType, inout p : P) : R
        return defaultAction(t, p);
!!!9732994.java!!!	visitNoType(inout t : NoType, inout p : P) : R
        TypeKind k = t.getKind();
        switch (k) {
        case VOID:
            return visitNoTypeAsVoid(t, p);

        case PACKAGE:
            return visitNoTypeAsPackage(t, p);

        case NONE:
            return visitNoTypeAsNone(t, p);

        default:
            throw new AssertionError("Bad kind " + k + " for NoType" + t);
        }
!!!9733122.java!!!	visitNoTypeAsVoid(inout t : NoType, inout p : P) : R
        return defaultAction(t, p);
!!!9733250.java!!!	visitNoTypeAsPackage(inout t : NoType, inout p : P) : R
        return defaultAction(t, p);
!!!9733378.java!!!	visitNoTypeAsNone(inout t : NoType, inout p : P) : R
        return defaultAction(t, p);
