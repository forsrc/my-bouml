class GraphicsConfiguration
!!!6231170.java!!!	createCompatibleImage(in width : int, in height : int) : BufferedImage
        ColorModel model = getColorModel();
        WritableRaster raster =
            model.createCompatibleWritableRaster(width, height);
        return new BufferedImage(model, raster,
                                 model.isAlphaPremultiplied(), null);
!!!6231298.java!!!	createCompatibleImage(in width : int, in height : int, in transparency : int) : BufferedImage
        if (getColorModel().getTransparency() == transparency) {
            return createCompatibleImage(width, height);
        }

        ColorModel cm = getColorModel(transparency);
        if (cm == null) {
            throw new IllegalArgumentException("Unknown transparency: " +
                                               transparency);
        }
        WritableRaster wr = cm.createCompatibleWritableRaster(width, height);
        return new BufferedImage(cm, wr, cm.isAlphaPremultiplied(), null);
!!!6231426.java!!!	createCompatibleVolatileImage(in width : int, in height : int) : VolatileImage
        VolatileImage vi = null;
        try {
            vi = createCompatibleVolatileImage(width, height,
                                               null, Transparency.OPAQUE);
        } catch (AWTException e) {
            // shouldn't happen: we're passing in null caps
            assert false;
        }
        return vi;
!!!6231554.java!!!	createCompatibleVolatileImage(in width : int, in height : int, in transparency : int) : VolatileImage
        VolatileImage vi = null;
        try {
            vi = createCompatibleVolatileImage(width, height, null, transparency);
        } catch (AWTException e) {
            // shouldn't happen: we're passing in null caps
            assert false;
        }
        return vi;
!!!6231682.java!!!	createCompatibleVolatileImage(in width : int, in height : int, inout caps : ImageCapabilities) : VolatileImage
        return createCompatibleVolatileImage(width, height, caps,
                                             Transparency.OPAQUE);
!!!6231810.java!!!	createCompatibleVolatileImage(in width : int, in height : int, inout caps : ImageCapabilities, in transparency : int) : VolatileImage
        VolatileImage vi =
            new SunVolatileImage(this, width, height, transparency, caps);
        if (caps != null && caps.isAccelerated() &&
            !vi.getCapabilities().isAccelerated())
        {
            throw new AWTException("Supplied image capabilities could not " +
                                   "be met by this graphics configuration.");
        }
        return vi;
!!!6232706.java!!!	getBufferCapabilities() : BufferCapabilities
        if (defaultBufferCaps == null) {
            defaultBufferCaps = new DefaultBufferCapabilities(
                getImageCapabilities());
        }
        return defaultBufferCaps;
!!!6232834.java!!!	getImageCapabilities() : ImageCapabilities
        if (defaultImageCaps == null) {
            defaultImageCaps = new ImageCapabilities(false);
        }
        return defaultImageCaps;
!!!6232962.java!!!	isTranslucencyCapable() : boolean
        // Overridden in subclasses
        return false;
