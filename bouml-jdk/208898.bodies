class ServerSocket
!!!7520386.java!!!	ServerSocket(inout impl : SocketImpl)
        this.impl = impl;
        impl.setServerSocket(this);
!!!7520514.java!!!	ServerSocket()
        setImpl();
!!!7520642.java!!!	ServerSocket(in port : int)
        this(port, 50, null);
!!!7520770.java!!!	ServerSocket(in port : int, in backlog : int)
        this(port, backlog, null);
!!!7520898.java!!!	ServerSocket(in port : int, in backlog : int, inout bindAddr : InetAddress)
        setImpl();
        if (port < 0 || port > 0xFFFF)
            throw new IllegalArgumentException(
                       "Port value out of range: " + port);
        if (backlog < 1)
          backlog = 50;
        try {
            bind(new InetSocketAddress(bindAddr, port), backlog);
        } catch(SecurityException e) {
            close();
            throw e;
        } catch(IOException e) {
            close();
            throw e;
        }
!!!7521026.java!!!	getImpl() : SocketImpl
        if (!created)
            createImpl();
        return impl;
!!!7521154.java!!!	checkOldImpl() : void
        if (impl == null)
            return;
        // SocketImpl.connect() is a protected method, therefore we need to use
        // getDeclaredMethod, therefore we need permission to access the member
        try {
            AccessController.doPrivileged(
                new PrivilegedExceptionAction<Void>() {
                    public Void run() throws NoSuchMethodException {
                        impl.getClass().getDeclaredMethod("connect",
                                                          SocketAddress.class,
                                                          int.class);
                        return null;
                    }
                });
        } catch (java.security.PrivilegedActionException e) {
            oldImpl = true;
        }
!!!7521282.java!!!	setImpl() : void
        if (factory != null) {
            impl = factory.createSocketImpl();
            checkOldImpl();
        } else {
            // No need to do a checkOldImpl() here, we know it's an up to date
            // SocketImpl!
            impl = new SocksSocketImpl();
        }
        if (impl != null)
            impl.setServerSocket(this);
!!!7521410.java!!!	createImpl() : void
        if (impl == null)
            setImpl();
        try {
            impl.create(true);
            created = true;
        } catch (IOException e) {
            throw new SocketException(e.getMessage());
        }
!!!7521538.java!!!	bind(inout endpoint : SocketAddress) : void
        bind(endpoint, 50);
!!!7521666.java!!!	bind(inout endpoint : SocketAddress, in backlog : int) : void
        if (isClosed())
            throw new SocketException("Socket is closed");
        if (!oldImpl && isBound())
            throw new SocketException("Already bound");
        if (endpoint == null)
            endpoint = new InetSocketAddress(0);
        if (!(endpoint instanceof InetSocketAddress))
            throw new IllegalArgumentException("Unsupported address type");
        InetSocketAddress epoint = (InetSocketAddress) endpoint;
        if (epoint.isUnresolved())
            throw new SocketException("Unresolved address");
        if (backlog < 1)
          backlog = 50;
        try {
            SecurityManager security = System.getSecurityManager();
            if (security != null)
                security.checkListen(epoint.getPort());
            getImpl().bind(epoint.getAddress(), epoint.getPort());
            getImpl().listen(backlog);
            bound = true;
        } catch(SecurityException e) {
            bound = false;
            throw e;
        } catch(IOException e) {
            bound = false;
            throw e;
        }
!!!7521794.java!!!	getInetAddress() : InetAddress
        if (!isBound())
            return null;
        try {
            InetAddress in = getImpl().getInetAddress();
            SecurityManager sm = System.getSecurityManager();
            if (sm != null)
                sm.checkConnect(in.getHostAddress(), -1);
            return in;
        } catch (SecurityException e) {
            return InetAddress.getLoopbackAddress();
        } catch (SocketException e) {
            // nothing
            // If we're bound, the impl has been created
            // so we shouldn't get here
        }
        return null;
!!!7521922.java!!!	getLocalPort() : int
        if (!isBound())
            return -1;
        try {
            return getImpl().getLocalPort();
        } catch (SocketException e) {
            // nothing
            // If we're bound, the impl has been created
            // so we shouldn't get here
        }
        return -1;
!!!7522050.java!!!	getLocalSocketAddress() : SocketAddress
        if (!isBound())
            return null;
        return new InetSocketAddress(getInetAddress(), getLocalPort());
!!!7522178.java!!!	accept() : Socket
        if (isClosed())
            throw new SocketException("Socket is closed");
        if (!isBound())
            throw new SocketException("Socket is not bound yet");
        Socket s = new Socket((SocketImpl) null);
        implAccept(s);
        return s;
!!!7522306.java!!!	implAccept(inout s : Socket) : void
        SocketImpl si = null;
        try {
            if (s.impl == null)
              s.setImpl();
            else {
                s.impl.reset();
            }
            si = s.impl;
            s.impl = null;
            si.address = new InetAddress();
            si.fd = new FileDescriptor();
            getImpl().accept(si);

            SecurityManager security = System.getSecurityManager();
            if (security != null) {
                security.checkAccept(si.getInetAddress().getHostAddress(),
                                     si.getPort());
            }
        } catch (IOException e) {
            if (si != null)
                si.reset();
            s.impl = si;
            throw e;
        } catch (SecurityException e) {
            if (si != null)
                si.reset();
            s.impl = si;
            throw e;
        }
        s.impl = si;
        s.postAccept();
!!!7522434.java!!!	close() : void
        synchronized(closeLock) {
            if (isClosed())
                return;
            if (created)
                impl.close();
            closed = true;
        }
!!!7522562.java!!!	getChannel() : ServerSocketChannel
        return null;
!!!7522690.java!!!	isBound() : boolean
        // Before 1.3 ServerSockets were always bound during creation
        return bound || oldImpl;
!!!7522818.java!!!	isClosed() : boolean
        synchronized(closeLock) {
            return closed;
        }
!!!7522946.java!!!	setSoTimeout(in timeout : int) : void
        if (isClosed())
            throw new SocketException("Socket is closed");
        getImpl().setOption(SocketOptions.SO_TIMEOUT, new Integer(timeout));
!!!7523074.java!!!	getSoTimeout() : int
        if (isClosed())
            throw new SocketException("Socket is closed");
        Object o = getImpl().getOption(SocketOptions.SO_TIMEOUT);
        /* extra type safety */
        if (o instanceof Integer) {
            return ((Integer) o).intValue();
        } else {
            return 0;
        }
!!!7523202.java!!!	setReuseAddress(inout on : boolean) : void
        if (isClosed())
            throw new SocketException("Socket is closed");
        getImpl().setOption(SocketOptions.SO_REUSEADDR, Boolean.valueOf(on));
!!!7523330.java!!!	getReuseAddress() : boolean
        if (isClosed())
            throw new SocketException("Socket is closed");
        return ((Boolean) (getImpl().getOption(SocketOptions.SO_REUSEADDR))).booleanValue();
!!!7523458.java!!!	toString() : String
        if (!isBound())
            return "ServerSocket[unbound]";
        InetAddress in;
        if (System.getSecurityManager() != null)
            in = InetAddress.getLoopbackAddress();
        else
            in = impl.getInetAddress();
        return "ServerSocket[addr=" + in +
                ",localport=" + impl.getLocalPort()  + "]";
!!!7523586.java!!!	setBound() : void
        bound = true;
!!!7523714.java!!!	setCreated() : void
        created = true;
!!!7523842.java!!!	setSocketFactory(inout fac : SocketImplFactory) : void
        if (factory != null) {
            throw new SocketException("factory already defined");
        }
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkSetFactory();
        }
        factory = fac;
!!!7523970.java!!!	setReceiveBufferSize(in size : int) : void
        if (!(size > 0)) {
            throw new IllegalArgumentException("negative receive size");
        }
        if (isClosed())
            throw new SocketException("Socket is closed");
        getImpl().setOption(SocketOptions.SO_RCVBUF, new Integer(size));
!!!7524098.java!!!	getReceiveBufferSize() : int
        if (isClosed())
            throw new SocketException("Socket is closed");
        int result = 0;
        Object o = getImpl().getOption(SocketOptions.SO_RCVBUF);
        if (o instanceof Integer) {
            result = ((Integer)o).intValue();
        }
        return result;
!!!7524226.java!!!	setPerformancePreferences(in connectionTime : int, in latency : int, in bandwidth : int) : void
        /* Not implemented yet */
