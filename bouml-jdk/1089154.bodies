class OptionalInt
!!!8867074.java!!!	OptionalInt()
        this.isPresent = false;
        this.value = 0;
!!!8867202.java!!!	empty() : OptionalInt
        return EMPTY;
!!!8867330.java!!!	OptionalInt(in value : int)
        this.isPresent = true;
        this.value = value;
!!!8867458.java!!!	of(in value : int) : OptionalInt
        return new OptionalInt(value);
!!!8867586.java!!!	getAsInt() : int
        if (!isPresent) {
            throw new NoSuchElementException("No value present");
        }
        return value;
!!!8867714.java!!!	isPresent() : boolean
        return isPresent;
!!!8867842.java!!!	ifPresent(inout consumer : IntConsumer) : void
        if (isPresent)
            consumer.accept(value);
!!!8867970.java!!!	orElse(in other : int) : int
        return isPresent ? value : other;
!!!8868098.java!!!	orElseGet(inout other : IntSupplier) : int
        return isPresent ? value : other.getAsInt();
!!!8868226.java!!!	orElseThrow(inout exceptionSupplier : Supplier) : int
        if (isPresent) {
            return value;
        } else {
            throw exceptionSupplier.get();
        }
!!!8868354.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof OptionalInt)) {
            return false;
        }

        OptionalInt other = (OptionalInt) obj;
        return (isPresent && other.isPresent)
                ? value == other.value
                : isPresent == other.isPresent;
!!!8868482.java!!!	hashCode() : int
        return isPresent ? Integer.hashCode(value) : 0;
!!!8868610.java!!!	toString() : String
        return isPresent
                ? String.format("OptionalInt[%s]", value)
                : "OptionalInt.empty";
