class ScheduledFutureTask
!!!9223298.java!!!	ScheduledFutureTask(inout r : Runnable, inout result : V, in ns : long)
            super(r, result);
            this.time = ns;
            this.period = 0;
            this.sequenceNumber = sequencer.getAndIncrement();
!!!9223426.java!!!	ScheduledFutureTask(inout r : Runnable, inout result : V, in ns : long, in period : long)
            super(r, result);
            this.time = ns;
            this.period = period;
            this.sequenceNumber = sequencer.getAndIncrement();
!!!9223554.java!!!	ScheduledFutureTask(inout callable : Callable, in ns : long)
            super(callable);
            this.time = ns;
            this.period = 0;
            this.sequenceNumber = sequencer.getAndIncrement();
!!!9223682.java!!!	getDelay(inout unit : TimeUnit) : long
            return unit.convert(time - now(), NANOSECONDS);
!!!9223810.java!!!	compareTo(inout other : Delayed) : int
            if (other == this) // compare zero if same object
                return 0;
            if (other instanceof ScheduledFutureTask) {
                ScheduledFutureTask<?> x = (ScheduledFutureTask<?>)other;
                long diff = time - x.time;
                if (diff < 0)
                    return -1;
                else if (diff > 0)
                    return 1;
                else if (sequenceNumber < x.sequenceNumber)
                    return -1;
                else
                    return 1;
            }
            long diff = getDelay(NANOSECONDS) - other.getDelay(NANOSECONDS);
            return (diff < 0) ? -1 : (diff > 0) ? 1 : 0;
!!!9223938.java!!!	isPeriodic() : boolean
            return period != 0;
!!!9224066.java!!!	setNextRunTime() : void
            long p = period;
            if (p > 0)
                time += p;
            else
                time = triggerTime(-p);
!!!9224194.java!!!	cancel(inout mayInterruptIfRunning : boolean) : boolean
            boolean cancelled = super.cancel(mayInterruptIfRunning);
            if (cancelled && removeOnCancel && heapIndex >= 0)
                remove(this);
            return cancelled;
!!!9224322.java!!!	run() : void
            boolean periodic = isPeriodic();
            if (!canRunInCurrentRunState(periodic))
                cancel(false);
            else if (!periodic)
                ScheduledFutureTask.super.run();
            else if (ScheduledFutureTask.super.runAndReset()) {
                setNextRunTime();
                reExecutePeriodic(outerTask);
            }
