class SortingIterator
!!!4051458.java!!!	SortingIterator(inout source : DTMAxisIterator, inout factory : NodeSortRecordFactory)
        _source = source;
        _factory = factory;
!!!4051586.java!!!	next() : int
        return _current < _free ? _data[_current++].getNode() : END;
!!!4051714.java!!!	setStartNode(in node : int) : DTMAxisIterator
        try {
            _source.setStartNode(_startNode = node);
            _data = new NodeSortRecord[INIT_DATA_SIZE];
            _free = 0;

            // gather all nodes from the source iterator
            while ((node = _source.next()) != END) {
                addRecord(_factory.makeNodeSortRecord(node,_free));
            }
            // now sort the records
            quicksort(0, _free - 1);

            _current = 0;
            return this;
        }
        catch (Exception e) {
            return this;
        }
!!!4051842.java!!!	getPosition() : int
        return _current == 0 ? 1 : _current;
!!!4051970.java!!!	getLast() : int
        return _free;
!!!4052098.java!!!	setMark() : void
        _source.setMark();
        _markedNode = _current;
!!!4052226.java!!!	gotoMark() : void
        _source.gotoMark();
        _current = _markedNode;
!!!4052354.java!!!	cloneIterator() : DTMAxisIterator
        try {
            final SortingIterator clone = (SortingIterator) super.clone();
            clone._source = _source.cloneIterator();
            clone._factory = _factory;          // shared between clones
            clone._data = _data;                // shared between clones
            clone._free = _free;
            clone._current = _current;
            clone.setRestartable(false);
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
!!!4052482.java!!!	addRecord(inout record : NodeSortRecord) : void
        if (_free == _data.length) {
            NodeSortRecord[] newArray = new NodeSortRecord[_data.length * 2];
            System.arraycopy(_data, 0, newArray, 0, _free);
            _data = newArray;
        }
        _data[_free++] = record;
!!!4052610.java!!!	quicksort(in p : int, in r : int) : void
        while (p < r) {
            final int q = partition(p, r);
            quicksort(p, q);
            p = q + 1;
        }
!!!4052738.java!!!	partition(in p : int, in r : int) : int
        final NodeSortRecord x = _data[(p + r) >>> 1];
        int i = p - 1;
        int j = r + 1;
        while (true) {
            while (x.compareTo(_data[--j]) < 0);
            while (x.compareTo(_data[++i]) > 0);
            if (i < j) {
                final NodeSortRecord t = _data[i];
                _data[i] = _data[j];
                _data[j] = t;
            }
            else {
                return(j);
            }
        }
