class IDLJavaSerializationOutputStream
!!!460546.java!!!	IDLJavaSerializationOutputStream(in encodingVersion : byte)
        super();
        this.encodingVersion = encodingVersion;
!!!460674.java!!!	init(inout orb : ORB, inout littleEndian : boolean, inout bufferManager : BufferManagerWrite, in streamFormatVersion : byte, inout usePooledByteBuffers : boolean) : void
        this.orb = (ORB) orb;
        this.bufferManager = bufferManager;
        wrapper = ORBUtilSystemException.get((ORB) orb,
                                             CORBALogDomains.RPC_ENCODING);
        bos =
            new _ByteArrayOutputStream(ORBConstants.GIOP_DEFAULT_BUFFER_SIZE);
!!!460802.java!!!	initObjectOutputStream() : void
        //System.out.print(" os ");
        if (os != null) {
            throw wrapper.javaStreamInitFailed();
        }
        try {
            os = new MarshalObjectOutputStream(bos, orb);
        } catch (Exception e) {
            throw wrapper.javaStreamInitFailed(e);
        }
!!!460930.java!!!	write_boolean(inout value : boolean) : void
        try {
            os.writeBoolean(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_boolean");
        }
!!!461058.java!!!	write_char(in value : char) : void
        try {
            os.writeChar(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_char");
        }
!!!461186.java!!!	write_wchar(in value : char) : void
        this.write_char(value);
!!!461314.java!!!	write_octet(in value : byte) : void

        // check if size < [ GIOPHeader(12) + requestID(4)] bytes
        if (bos.size() < directWriteLength) {
            bos.write(value); // direct write.
            if (bos.size() == directWriteLength) {
                initObjectOutputStream();
            }
            return;
        }

        try {
            os.writeByte(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_octet");
        }
!!!461442.java!!!	write_short(in value : short) : void
        try {
            os.writeShort(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_short");
        }
!!!461570.java!!!	write_ushort(in value : short) : void
        this.write_short(value);
!!!461698.java!!!	write_long(in value : int) : void

        // check if size < [ GIOPHeader(12) + requestID(4)] bytes
        if (bos.size() < directWriteLength) {

            // Use big endian (network byte order). This is fixed.
            // Both the writer and reader use the same byte order.
            bos.write((byte)((value >>> 24) & 0xFF));
            bos.write((byte)((value >>> 16) & 0xFF));
            bos.write((byte)((value >>> 8) & 0xFF));
            bos.write((byte)((value >>> 0) & 0xFF));

            if (bos.size() == directWriteLength) {
                initObjectOutputStream();
            } else if (bos.size() > directWriteLength) {
                // Cannot happen. All direct writes are contained
                // within the first 16 bytes.
                wrapper.javaSerializationException("write_long");
            }
            return;
        }

        try {
            os.writeInt(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_long");
        }
!!!461826.java!!!	write_ulong(in value : int) : void
        this.write_long(value);
!!!461954.java!!!	write_longlong(in value : long) : void
        try {
            os.writeLong(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_longlong");
        }
!!!462082.java!!!	write_ulonglong(in value : long) : void
        this.write_longlong(value);
!!!462210.java!!!	write_float(in value : float) : void
        try {
            os.writeFloat(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_float");
        }
!!!462338.java!!!	write_double(in value : double) : void
        try {
            os.writeDouble(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_double");
        }
!!!462466.java!!!	write_string(inout value : String) : void
        try {
            os.writeUTF(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_string");
        }
!!!462594.java!!!	write_wstring(inout value : String) : void
        try {
            os.writeObject(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_wstring");
        }
!!!462722.java!!!	write_boolean_array(inout value : boolean [[]], in offset : int, in length : int) : void
        for (int i = 0; i < length; i++) {
            write_boolean(value[offset + i]);
        }
!!!462850.java!!!	write_char_array(inout value : char [[]], in offset : int, in length : int) : void
        for (int i = 0; i < length; i++) {
            write_char(value[offset + i]);
        }
!!!462978.java!!!	write_wchar_array(inout value : char [[]], in offset : int, in length : int) : void
        write_char_array(value, offset, length);
!!!463106.java!!!	write_octet_array(inout value : byte [[]], in offset : int, in length : int) : void
        try {
            os.write(value, offset, length);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_octet_array");
        }
!!!463234.java!!!	write_short_array(inout value : short [[]], in offset : int, in length : int) : void
        for (int i = 0; i < length; i++) {
            write_short(value[offset + i]);
        }
!!!463362.java!!!	write_ushort_array(inout value : short [[]], in offset : int, in length : int) : void
        write_short_array(value, offset, length);
!!!463490.java!!!	write_long_array(inout value : int [[]], in offset : int, in length : int) : void
        for (int i = 0; i < length; i++) {
            write_long(value[offset + i]);
        }
!!!463618.java!!!	write_ulong_array(inout value : int [[]], in offset : int, in length : int) : void
        write_long_array(value, offset, length);
!!!463746.java!!!	write_longlong_array(inout value : long [[]], in offset : int, in length : int) : void
        for (int i = 0; i < length; i++) {
            write_longlong(value[offset + i]);
        }
!!!463874.java!!!	write_ulonglong_array(inout value : long [[]], in offset : int, in length : int) : void
        write_longlong_array(value, offset, length);
!!!464002.java!!!	write_float_array(inout value : float [[]], in offset : int, in length : int) : void
        for (int i = 0; i < length; i++) {
            write_float(value[offset + i]);
        }
!!!464130.java!!!	write_double_array(inout value : double [[]], in offset : int, in length : int) : void
        for (int i = 0; i < length; i++) {
            write_double(value[offset + i]);
        }
!!!464258.java!!!	write_Object(inout value : Object) : void
        if (value == null) {
            IOR nullIOR = IORFactories.makeIOR(orb);
            nullIOR.write(parent);
            return;
        }
        // IDL to Java formal 01-06-06 1.21.4.2
        if (value instanceof org.omg.CORBA.LocalObject) {
            throw wrapper.writeLocalObject(CompletionStatus.COMPLETED_MAYBE);
        }
        IOR ior = ORBUtility.connectAndGetIOR(orb, value);
        ior.write(parent);
        return;
!!!464386.java!!!	write_TypeCode(inout tc : TypeCode) : void
        if (tc == null) {
            throw wrapper.nullParam(CompletionStatus.COMPLETED_MAYBE);
        }
        TypeCodeImpl tci;
        if (tc instanceof TypeCodeImpl) {
            tci = (TypeCodeImpl) tc;
        } else {
            tci = new TypeCodeImpl(orb, tc);
        }
        tci.write_value((org.omg.CORBA_2_3.portable.OutputStream) parent);
!!!464514.java!!!	write_any(inout any : Any) : void
        if (any == null) {
            throw wrapper.nullParam(CompletionStatus.COMPLETED_MAYBE);
        }
        write_TypeCode(any.type());
        any.write_value(parent);
!!!464642.java!!!	write_Principal(inout p : Principal) : void
        // We don't need an implementation for this method, since principal
        // is absent in GIOP version 1.2 or above.
        write_long(p.name().length);
        write_octet_array(p.name(), 0, p.name().length);
!!!464770.java!!!	write_fixed(inout bigDecimal : BigDecimal) : void
        // This string might contain sign and/or dot
        this.write_fixed(bigDecimal.toString(), bigDecimal.signum());
!!!464898.java!!!	write_fixed(inout string : String, in signum : int) : void

        int stringLength = string.length();

        // Each octet contains (up to) two decimal digits.
        byte doubleDigit = 0;
        char ch;
        byte digit;

        // First calculate the string length without optional sign and dot.
        int numDigits = 0;
        for (int i=0; i<stringLength; i++) {
            ch = string.charAt(i);
            if (ch == '-' || ch == '+' || ch == '.')
                continue;
            numDigits++;
        }

        for (int i=0; i<stringLength; i++) {
            ch = string.charAt(i);
            if (ch == '-' || ch == '+' || ch == '.')
                continue;
            digit = (byte)Character.digit(ch, 10);
            if (digit == -1) {
                throw wrapper.badDigitInFixed(
                                            CompletionStatus.COMPLETED_MAYBE);
            }
            // If the fixed type has an odd number of decimal digits, then the
            // representation begins with the first (most significant) digit.
            // Otherwise, this first half-octet is all zero, and the first
            // digit is in the second half-octet.
            if (numDigits % 2 == 0) {
                doubleDigit |= digit;
                this.write_octet(doubleDigit);
                doubleDigit = 0;
            } else {
                doubleDigit |= (digit << 4);
            }
            numDigits--;
        }

        // The sign configuration in the last half-octet of the representation,
        // is 0xD for negative numbers and 0xC for positive and zero values.
        if (signum == -1) {
            doubleDigit |= 0xd;
        } else {
            doubleDigit |= 0xc;
        }
        this.write_octet(doubleDigit);
!!!465026.java!!!	orb() : ORB
        return this.orb;
!!!465154.java!!!	write_value(inout value : Serializable) : void
        write_value(value, (String) null);
!!!465282.java!!!	write_value(inout value : Serializable, inout clz : Class) : void
        write_value(value);
!!!465410.java!!!	write_value(inout value : Serializable, inout repository_id : String) : void
        try {
            os.writeObject(value);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_value");
        }
!!!465538.java!!!	write_value(inout value : Serializable, inout factory : BoxedValueHelper) : void
        this.write_value(value, (String) null);
!!!465666.java!!!	write_abstract_interface(inout obj : Object) : void

        boolean isCorbaObject = false; // Assume value type.
        org.omg.CORBA.Object theCorbaObject = null;

        // Is it a CORBA.Object?
        if (obj != null && obj instanceof org.omg.CORBA.Object) {
            theCorbaObject = (org.omg.CORBA.Object)obj;
            isCorbaObject = true;
        }

        // Write the boolean flag.
        this.write_boolean(isCorbaObject);

        // Now write out the object.
        if (isCorbaObject) {
            write_Object(theCorbaObject);
        } else {
            try {
                write_value((java.io.Serializable)obj);
            } catch(ClassCastException cce) {
                if (obj instanceof java.io.Serializable) {
                    throw cce;
                } else {
                    ORBUtility.throwNotSerializableForCorba(
                                                    obj.getClass().getName());
                }
            }
        }
!!!465794.java!!!	start_block() : void
        throw wrapper.giopVersionError();
!!!465922.java!!!	end_block() : void
        throw wrapper.giopVersionError();
!!!466050.java!!!	putEndian() : void
        throw wrapper.giopVersionError();
!!!466178.java!!!	writeTo(inout s : OutputStream) : void
        try {
            os.flush();
            bos.writeTo(s);
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "writeTo");
        }
!!!466306.java!!!	toByteArray() : byte
        try {
            os.flush();
            return bos.toByteArray(); // new copy.
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "toByteArray");
        }
!!!466434.java!!!	write_Abstract(inout value : Object) : void
        write_abstract_interface(value);
!!!466562.java!!!	write_Value(inout value : Serializable) : void
        write_value(value);
!!!466690.java!!!	write_any_array(inout value : Any [[]], in offset : int, in length : int) : void
        for(int i = 0; i < length; i++) {
            write_any(value[offset + i]);
        }
!!!466818.java!!!	_truncatable_ids() : String
        throw wrapper.giopVersionError();
!!!466946.java!!!	getSize() : int
        try {
            os.flush();
            return bos.size();
        } catch (Exception e) {
            throw wrapper.javaSerializationException(e, "write_boolean");
        }
!!!467074.java!!!	getIndex() : int
        return getSize();
!!!467202.java!!!	getRealIndex(in index : int) : int
        return getSize();
!!!467330.java!!!	setIndex(in value : int) : void
        throw wrapper.giopVersionError();
!!!467458.java!!!	getByteBuffer() : ByteBuffer
        throw wrapper.giopVersionError();
!!!467586.java!!!	setByteBuffer(inout byteBuffer : ByteBuffer) : void
        throw wrapper.giopVersionError();
!!!467714.java!!!	isLittleEndian() : boolean
        // Java serialization uses network byte order, that is, big-endian.
        return false;
!!!467842.java!!!	getByteBufferWithInfo() : ByteBufferWithInfo
        try {
            os.flush();
        } catch (Exception e) {
            throw wrapper.javaSerializationException(
                                            e, "getByteBufferWithInfo");
        }
        ByteBuffer byteBuffer = ByteBuffer.wrap(bos.getByteArray());
        byteBuffer.limit(bos.size());
        return new ByteBufferWithInfo(this.orb, byteBuffer, bos.size());
!!!467970.java!!!	setByteBufferWithInfo(inout bbwi : ByteBufferWithInfo) : void
        throw wrapper.giopVersionError();
!!!468098.java!!!	getBufferManager() : BufferManagerWrite
        return bufferManager;
!!!468226.java!!!	write_fixed(inout bigDecimal : BigDecimal, in digits : short, in scale : short) : void
        String string = bigDecimal.toString();
        String integerPart;
        String fractionPart;
        StringBuffer stringBuffer;

        // Get rid of the sign
        if (string.charAt(0) == '-' || string.charAt(0) == '+') {
            string = string.substring(1);
        }

        // Determine integer and fraction parts
        int dotIndex = string.indexOf('.');
        if (dotIndex == -1) {
            integerPart = string;
            fractionPart = null;
        } else if (dotIndex == 0 ) {
            integerPart = null;
            fractionPart = string;
        } else {
            integerPart = string.substring(0, dotIndex);
            fractionPart = string.substring(dotIndex + 1);
        }

        // Pad both parts with zeros as necessary
        stringBuffer = new StringBuffer(digits);
        if (fractionPart != null) {
            stringBuffer.append(fractionPart);
        }
        while (stringBuffer.length() < scale) {
            stringBuffer.append('0');
        }
        if (integerPart != null) {
            stringBuffer.insert(0, integerPart);
        }
        while (stringBuffer.length() < digits) {
            stringBuffer.insert(0, '0');
        }

        // This string contains no sign or dot
        this.write_fixed(stringBuffer.toString(), bigDecimal.signum());
!!!468354.java!!!	writeOctetSequenceTo(inout s : OutputStream) : void
        byte[] buf = this.toByteArray(); // new copy.
        s.write_long(buf.length);
        s.write_octet_array(buf, 0, buf.length);
!!!468482.java!!!	getGIOPVersion() : GIOPVersion
        return GIOPVersion.V1_2;
!!!468610.java!!!	writeIndirection(in tag : int, in posIndirectedTo : int) : void
        throw wrapper.giopVersionError();
!!!468866.java!!!	printBuffer() : void
        byte[] buf = this.toByteArray();

        System.out.println("+++++++ Output Buffer ++++++++");
        System.out.println();
        System.out.println("Current position: " + buf.length);
        //System.out.println("Total length : " + buf.length);
        System.out.println();

        char[] charBuf = new char[16];

        try {

            for (int i = 0; i < buf.length; i += 16) {

                int j = 0;

                // For every 16 bytes, there is one line
                // of output.  First, the hex output of
                // the 16 bytes with each byte separated
                // by a space.
                while (j < 16 && j + i < buf.length) {
                    int k = buf[i + j];
                    if (k < 0)
                        k = 256 + k;
                    String hex = Integer.toHexString(k);
                    if (hex.length() == 1)
                        hex = "0" + hex;
                    System.out.print(hex + " ");
                    j++;
                }

                // Add any extra spaces to align the
                // text column in case we didn't end
                // at 16
                while (j < 16) {
                    System.out.print("   ");
                    j++;
                }

                // Now output the ASCII equivalents.  Non-ASCII
                // characters are shown as periods.
                int x = 0;

                while (x < 16 && x + i < buf.length) {
                    if (ORBUtility.isPrintable((char)buf[i + x])) {
                        charBuf[x] = (char) buf[i + x];
                    } else {
                        charBuf[x] = '.';
                    }
                    x++;
                }
                System.out.println(new String(charBuf, 0, x));
            }
        } catch (Throwable t) {
            t.printStackTrace();
        }
        System.out.println("++++++++++++++++++++++++++++++");
!!!468994.java!!!	alignOnBoundary(in octetBoundary : int) : void
        throw wrapper.giopVersionError();
!!!469122.java!!!	setHeaderPadding(inout headerPadding : boolean) : void
        // no-op. We don't care about body alignment while using
        // Java serialization. What the GIOP spec states does not apply here.
!!!469250.java!!!	start_value(inout rep_id : String) : void
        throw wrapper.giopVersionError();
!!!469378.java!!!	end_value() : void
        throw wrapper.giopVersionError();
