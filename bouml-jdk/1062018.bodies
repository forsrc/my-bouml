class Unit
!!!8555906.java!!!	Unit(inout name : String, inout estimatedDuration : Duration)
            this.name = name;
            this.duration = estimatedDuration;
!!!8556034.java!!!	getDuration() : Duration
            return duration;
!!!8556162.java!!!	isDurationEstimated() : boolean
            return true;
!!!8556290.java!!!	isDateBased() : boolean
            return true;
!!!8556418.java!!!	isTimeBased() : boolean
            return false;
!!!8556546.java!!!	isSupportedBy(inout temporal : Temporal) : boolean
            return temporal.isSupported(EPOCH_DAY);
!!!8556674.java!!!	addTo(inout temporal : R, in amount : long) : R
            switch (this) {
                case WEEK_BASED_YEARS:
                    return (R) temporal.with(WEEK_BASED_YEAR,
                            Math.addExact(temporal.get(WEEK_BASED_YEAR), amount));
                case QUARTER_YEARS:
                    // no overflow (256 is multiple of 4)
                    return (R) temporal.plus(amount / 256, YEARS)
                            .plus((amount % 256) * 3, MONTHS);
                default:
                    throw new IllegalStateException("Unreachable");
            }
!!!8556802.java!!!	between(inout temporal1Inclusive : Temporal, inout temporal2Exclusive : Temporal) : long
            if (temporal1Inclusive.getClass() != temporal2Exclusive.getClass()) {
                return temporal1Inclusive.until(temporal2Exclusive, this);
            }
            switch(this) {
                case WEEK_BASED_YEARS:
                    return Math.subtractExact(temporal2Exclusive.getLong(WEEK_BASED_YEAR),
                            temporal1Inclusive.getLong(WEEK_BASED_YEAR));
                case QUARTER_YEARS:
                    return temporal1Inclusive.until(temporal2Exclusive, MONTHS) / 3;
                default:
                    throw new IllegalStateException("Unreachable");
            }
!!!8556930.java!!!	toString() : String
            return name;
