class JMenuItem
!!!10551554.java!!!	JMenuItem()
        this(null, (Icon)null);
!!!10551682.java!!!	JMenuItem(inout icon : Icon)
        this(null, icon);
!!!10551810.java!!!	JMenuItem(inout text : String)
        this(text, (Icon)null);
!!!10551938.java!!!	JMenuItem(inout a : Action)
        this();
        setAction(a);
!!!10552066.java!!!	JMenuItem(inout text : String, inout icon : Icon)
        setModel(new DefaultButtonModel());
        init(text, icon);
        initFocusability();
!!!10552194.java!!!	JMenuItem(inout text : String, in mnemonic : int)
        setModel(new DefaultButtonModel());
        init(text, null);
        setMnemonic(mnemonic);
        initFocusability();
!!!10552322.java!!!	setModel(inout newModel : ButtonModel) : void
        super.setModel(newModel);
        if(newModel instanceof DefaultButtonModel) {
            ((DefaultButtonModel)newModel).setMenuItem(true);
        }
!!!10552450.java!!!	initFocusability() : void
        setFocusable(false);
!!!10552578.java!!!	init(inout text : String, inout icon : Icon) : void
        if(text != null) {
            setText(text);
        }

        if(icon != null) {
            setIcon(icon);
        }

        // Listen for Focus events
        addFocusListener(new MenuItemFocusListener());
        setUIProperty("borderPainted", Boolean.FALSE);
        setFocusPainted(false);
        setHorizontalTextPosition(JButton.TRAILING);
        setHorizontalAlignment(JButton.LEADING);
        updateUI();
!!!10552962.java!!!	setUI(inout ui : MenuItemUI) : void
        super.setUI(ui);
!!!10553090.java!!!	updateUI() : void
        setUI((MenuItemUI)UIManager.getUI(this));
!!!10553218.java!!!	getUIClassID() : String
        return uiClassID;
!!!10553346.java!!!	setArmed(inout b : boolean) : void
        ButtonModel model = getModel();

        boolean oldValue = model.isArmed();
        if(model.isArmed() != b) {
            model.setArmed(b);
        }
!!!10553474.java!!!	isArmed() : boolean
        ButtonModel model = getModel();
        return model.isArmed();
!!!10553602.java!!!	setEnabled(inout b : boolean) : void
        // Make sure we aren't armed!
        if (!b && !UIManager.getBoolean("MenuItem.disabledAreNavigable")) {
            setArmed(false);
        }
        super.setEnabled(b);
!!!10553730.java!!!	alwaysOnTop() : boolean
        // Fix for bug #4482165
        if (SwingUtilities.getAncestorOfClass(JInternalFrame.class, this) !=
                null) {
            return false;
        }
        return true;
!!!10553858.java!!!	setAccelerator(inout keyStroke : KeyStroke) : void
        KeyStroke oldAccelerator = accelerator;
        this.accelerator = keyStroke;
        repaint();
        revalidate();
        firePropertyChange("accelerator", oldAccelerator, accelerator);
!!!10553986.java!!!	getAccelerator() : KeyStroke
        return this.accelerator;
!!!10554114.java!!!	configurePropertiesFromAction(inout a : Action) : void
        super.configurePropertiesFromAction(a);
        configureAcceleratorFromAction(a);
!!!10554242.java!!!	setIconFromAction(inout a : Action) : void
        Icon icon = null;
        if (a != null) {
            icon = (Icon)a.getValue(Action.SMALL_ICON);
        }
        setIcon(icon);
!!!10554498.java!!!	smallIconChanged(inout a : Action) : void
        setIconFromAction(a);
!!!10554626.java!!!	configureAcceleratorFromAction(inout a : Action) : void
        KeyStroke ks = (a==null) ? null :
            (KeyStroke)a.getValue(Action.ACCELERATOR_KEY);
        setAccelerator(ks);
!!!10554754.java!!!	actionPropertyChanged(inout action : Action, inout propertyName : String) : void
        if (propertyName == Action.ACCELERATOR_KEY) {
            configureAcceleratorFromAction(action);
        }
        else {
            super.actionPropertyChanged(action, propertyName);
        }
!!!10554882.java!!!	processMouseEvent(inout e : MouseEvent, inout path : MenuElement [[]], inout manager : MenuSelectionManager) : void
        processMenuDragMouseEvent(
                 new MenuDragMouseEvent(e.getComponent(), e.getID(),
                                        e.getWhen(),
                                        e.getModifiers(), e.getX(), e.getY(),
                                        e.getXOnScreen(), e.getYOnScreen(),
                                        e.getClickCount(), e.isPopupTrigger(),
                                        path, manager));
!!!10555010.java!!!	processKeyEvent(inout e : KeyEvent, inout path : MenuElement [[]], inout manager : MenuSelectionManager) : void
        if (DEBUG) {
            System.out.println("in JMenuItem.processKeyEvent/3 for " + getText() +
                                   "  " + KeyStroke.getKeyStrokeForEvent(e));
        }
        MenuKeyEvent mke = new MenuKeyEvent(e.getComponent(), e.getID(),
                                             e.getWhen(), e.getModifiers(),
                                             e.getKeyCode(), e.getKeyChar(),
                                             path, manager);
        processMenuKeyEvent(mke);

        if (mke.isConsumed())  {
            e.consume();
        }
!!!10555138.java!!!	processMenuDragMouseEvent(inout e : MenuDragMouseEvent) : void
        switch (e.getID()) {
        case MouseEvent.MOUSE_ENTERED:
            isMouseDragged = false; fireMenuDragMouseEntered(e); break;
        case MouseEvent.MOUSE_EXITED:
            isMouseDragged = false; fireMenuDragMouseExited(e); break;
        case MouseEvent.MOUSE_DRAGGED:
            isMouseDragged = true; fireMenuDragMouseDragged(e); break;
        case MouseEvent.MOUSE_RELEASED:
            if(isMouseDragged) fireMenuDragMouseReleased(e); break;
        default:
            break;
        }
!!!10555266.java!!!	processMenuKeyEvent(inout e : MenuKeyEvent) : void
        if (DEBUG) {
            System.out.println("in JMenuItem.processMenuKeyEvent for " + getText()+
                                   "  " + KeyStroke.getKeyStrokeForEvent(e));
        }
        switch (e.getID()) {
        case KeyEvent.KEY_PRESSED:
            fireMenuKeyPressed(e); break;
        case KeyEvent.KEY_RELEASED:
            fireMenuKeyReleased(e); break;
        case KeyEvent.KEY_TYPED:
            fireMenuKeyTyped(e); break;
        default:
            break;
        }
!!!10555394.java!!!	fireMenuDragMouseEntered(inout event : MenuDragMouseEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuDragMouseListener.class) {
                // Lazily create the event:
                ((MenuDragMouseListener)listeners[i+1]).menuDragMouseEntered(event);
            }
        }
!!!10555522.java!!!	fireMenuDragMouseExited(inout event : MenuDragMouseEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuDragMouseListener.class) {
                // Lazily create the event:
                ((MenuDragMouseListener)listeners[i+1]).menuDragMouseExited(event);
            }
        }
!!!10555650.java!!!	fireMenuDragMouseDragged(inout event : MenuDragMouseEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuDragMouseListener.class) {
                // Lazily create the event:
                ((MenuDragMouseListener)listeners[i+1]).menuDragMouseDragged(event);
            }
        }
!!!10555778.java!!!	fireMenuDragMouseReleased(inout event : MenuDragMouseEvent) : void
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuDragMouseListener.class) {
                // Lazily create the event:
                ((MenuDragMouseListener)listeners[i+1]).menuDragMouseReleased(event);
            }
        }
!!!10555906.java!!!	fireMenuKeyPressed(inout event : MenuKeyEvent) : void
        if (DEBUG) {
            System.out.println("in JMenuItem.fireMenuKeyPressed for " + getText()+
                                   "  " + KeyStroke.getKeyStrokeForEvent(event));
        }
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuKeyListener.class) {
                // Lazily create the event:
                ((MenuKeyListener)listeners[i+1]).menuKeyPressed(event);
            }
        }
!!!10556034.java!!!	fireMenuKeyReleased(inout event : MenuKeyEvent) : void
        if (DEBUG) {
            System.out.println("in JMenuItem.fireMenuKeyReleased for " + getText()+
                                   "  " + KeyStroke.getKeyStrokeForEvent(event));
        }
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuKeyListener.class) {
                // Lazily create the event:
                ((MenuKeyListener)listeners[i+1]).menuKeyReleased(event);
            }
        }
!!!10556162.java!!!	fireMenuKeyTyped(inout event : MenuKeyEvent) : void
        if (DEBUG) {
            System.out.println("in JMenuItem.fireMenuKeyTyped for " + getText()+
                                   "  " + KeyStroke.getKeyStrokeForEvent(event));
        }
        // Guaranteed to return a non-null array
        Object[] listeners = listenerList.getListenerList();
        // Process the listeners last to first, notifying
        // those that are interested in this event
        for (int i = listeners.length-2; i>=0; i-=2) {
            if (listeners[i]==MenuKeyListener.class) {
                // Lazily create the event:
                ((MenuKeyListener)listeners[i+1]).menuKeyTyped(event);
            }
        }
!!!10556290.java!!!	menuSelectionChanged(inout isIncluded : boolean) : void
        setArmed(isIncluded);
!!!10556418.java!!!	getSubElements() : MenuElement
        return new MenuElement[0];
!!!10556546.java!!!	getComponent() : Component
        return this;
!!!10556674.java!!!	addMenuDragMouseListener(inout l : MenuDragMouseListener) : void
        listenerList.add(MenuDragMouseListener.class, l);
!!!10556802.java!!!	removeMenuDragMouseListener(inout l : MenuDragMouseListener) : void
        listenerList.remove(MenuDragMouseListener.class, l);
!!!10556930.java!!!	getMenuDragMouseListeners() : MenuDragMouseListener
        return listenerList.getListeners(MenuDragMouseListener.class);
!!!10557058.java!!!	addMenuKeyListener(inout l : MenuKeyListener) : void
        listenerList.add(MenuKeyListener.class, l);
!!!10557186.java!!!	removeMenuKeyListener(inout l : MenuKeyListener) : void
        listenerList.remove(MenuKeyListener.class, l);
!!!10557314.java!!!	getMenuKeyListeners() : MenuKeyListener
        return listenerList.getListeners(MenuKeyListener.class);
!!!10557442.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
        if (getUIClassID().equals(uiClassID)) {
            updateUI();
        }
!!!10557570.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
        if (getUIClassID().equals(uiClassID)) {
            byte count = JComponent.getWriteObjCounter(this);
            JComponent.setWriteObjCounter(this, --count);
            if (count == 0 && ui != null) {
                ui.installUI(this);
            }
        }
!!!10557698.java!!!	paramString() : String
        return super.paramString();
!!!10557826.java!!!	getAccessibleContext() : AccessibleContext
        if (accessibleContext == null) {
            accessibleContext = new AccessibleJMenuItem();
        }
        return accessibleContext;
