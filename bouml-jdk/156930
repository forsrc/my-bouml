format 222
"mbeanserver" // jdk1.8::com::sun::jmx::mbeanserver
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/jmx/mbeanserver/"
  java_package "com.sun.jmx.mbeanserver"
  classview 152066 "mbeanserver"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 487938 "MBeanInstantiator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Implements the MBeanInstantiator interface. Provides methods for
instantiating objects, finding the class given its name and using
different class loaders, deserializing objects in the context of a
given class loader.

@since 1.5
"
      classrelation 975490 // clr (<unidirectional association>)
	relation 975490 --->
	  a role_name "clr" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 975490 // clr (<unidirectional association>)
	  b parent class_ref 489474 // ModifiableClassLoaderRepository
      end

      operation 2970242 "MBeanInstantiator"
	package explicit_return_type ""
	nparams 1
	  param inout name "clr" type class_ref 489474 // ModifiableClassLoaderRepository
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "    private MetaData meta = null;"
      end

      operation 2970370 "testCreation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This methods tests if the MBean class makes it possible to
instantiate an MBean of this class in the MBeanServer.
e.g. it must have a public constructor, be a concrete class...
"
      end

      operation 2970498 "findClassWithDefaultLoaderRepository"
	public return_type class_ref 130818 // Class
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the class with the specified name using this object's
Default Loader Repository.
"
      end

      operation 2970626 "findClass"
	public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the class for the specified class name using the MBean
Interceptor's classloader
"
      end

      operation 2970754 "findClass"
	public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "aLoader" type class_ref 485506 // ObjectName
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the class for the specified class name using the specified
class loader
"
      end

      operation 2970882 "findSignatureClasses"
	public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an array of Class corresponding to the given signature, using
the specified class loader.
"
      end

      operation 2971010 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "theClass" type class_ref 130818 // Class
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object given its class, using its empty constructor.
The call returns a reference to the newly created object.
"
      end

      operation 2971138 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "theClass" type class_ref 130818 // Class
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object given its class, the parameters and
signature of its constructor The call returns a reference to
the newly created object.
"
      end

      operation 2971266 "deserialize"
	public return_type class_ref 168962 // ObjectInputStream
	nparams 2
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 487682 // OperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "De-serializes a byte array in the context of a classloader.

@param loader the classloader to use for de-serialization
@param data The byte array to be de-sererialized.

@return  The de-serialized object stream.

@exception OperationsException Any of the usual Input/Output related
exceptions.
"
      end

      operation 2971394 "deserialize"
	public return_type class_ref 168962 // ObjectInputStream
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487682 // OperationsException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "De-serializes a byte array in the context of a given MBean class loader.
<P>The class loader is the one that loaded the class with name
\"className\".
<P>The name of the class loader to be used for loading the specified
class is specified. If null, a default one has to be provided (for a
MBean Server, its own class loader will be used).

@param className The name of the class whose class loader should
 be used for the de-serialization.
@param data The byte array to be de-sererialized.
@param loaderName The name of the class loader to be used for loading
the specified class. If null, a default one has to be provided (for a
MBean Server, its own class loader will be used).

@return  The de-serialized object stream.

@exception InstanceNotFoundException The specified class loader MBean is
not found.
@exception OperationsException Any of the usual Input/Output related
exceptions.
@exception ReflectionException The specified class could not be loaded
by the specified class loader.
"
      end

      operation 2971522 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object using the list of all class loaders registered
in the MBean Interceptor
(using its {@link javax.management.loading.ClassLoaderRepository}).
<P>The object's class should have a public constructor.
<P>It returns a reference to the newly created object.
<P>The newly created object is not registered in the MBean Interceptor.

@param className The class name of the object to be instantiated.

@return The newly instantiated object.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or the
<CODE>java.lang.Exception</CODE> that occurred when trying to invoke the
object's constructor.
@exception MBeanException The constructor of the object has thrown an
exception
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: the className passed in
parameter is null.
"
      end

      operation 2971650 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 3
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object using the class Loader specified by its
<CODE>ObjectName</CODE>.
<P>If the loader name is null, a default one has to be provided (for a
MBean Server, the ClassLoader that loaded it will be used).
<P>The object's class should have a public constructor.
<P>It returns a reference to the newly created object.
<P>The newly created object is not registered in the MBean Interceptor.

@param className The class name of the MBean to be instantiated.
@param loaderName The object name of the class loader to be used.

@return The newly instantiated object.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or the
<CODE>java.lang.Exception</CODE> that occurred when trying to invoke the
object's constructor.
@exception MBeanException The constructor of the object has thrown an
exception.
@exception InstanceNotFoundException The specified class loader is not
registered in the MBeanServerInterceptor.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: the className passed in
parameter is null.
"
      end

      operation 2971778 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object using the list of all class loaders registered
in the MBean server
(using its {@link javax.management.loading.ClassLoaderRepository}).
<P>The object's class should have a public constructor.
<P>The call returns a reference to the newly created object.
<P>The newly created object is not registered in the MBean Interceptor.

@param className The class name of the object to be instantiated.
@param params An array containing the parameters of the constructor to
be invoked.
@param signature An array containing the signature of the constructor to
be invoked.

@return The newly instantiated object.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or the
<CODE>java.lang.Exception</CODE> that occurred when trying to invoke the
object's constructor.
@exception MBeanException The constructor of the object has thrown an
exception
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: the className passed in
parameter is null.
"
      end

      operation 2971906 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 5
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 3
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object. The class loader to be used is identified by its
object name.
<P>If the object name of the loader is null, a default has to be
provided (for example, for a MBean Server, the ClassLoader that loaded
it will be used).
<P>The object's class should have a public constructor.
<P>The call returns a reference to the newly created object.
<P>The newly created object is not registered in the MBean server.

@param className The class name of the object to be instantiated.
@param params An array containing the parameters of the constructor to
be invoked.
@param signature An array containing the signature of the constructor to
be invoked.
@param loaderName The object name of the class loader to be used.

@return The newly instantiated object.

@exception ReflectionException Wraps a
<CODE>java.lang.ClassNotFoundException</CODE> or the
<CODE>java.lang.Exception</CODE> that occurred when trying to invoke the
object's constructor.
@exception MBeanException The constructor of the object has thrown an
exception
@exception InstanceNotFoundException The specified class loader is not
registered in the MBean Interceptor.
@exception RuntimeOperationsException Wraps a
<CODE>java.lang.IllegalArgumentException</CODE>: the className passed in
parameter is null.
"
      end

      operation 2972034 "getClassLoaderRepository"
	public return_type class_ref 489474 // ModifiableClassLoaderRepository
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Default Loader Repository used by this instantiator object.
"
      end

      operation 2972162 "loadClass"
	class_operation package return_type class_ref 130818 // Class
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load a class with the specified loader, or with this object
class loader if the specified loader is null.
"
      end

      operation 2972290 "loadSignatureClasses"
	class_operation package return_type class_ref 130818 // Class
	nparams 2
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "loader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the classes specified in the signature with the given loader,
or with this object class loader.
"
      end

      operation 2972418 "findConstructor"
	private return_type class_ref 189186 // Constructor
	nparams 2
	  param inout name "c" type class_ref 130818 // Class
	  param inout name "params" type class_ref 130818 // Class
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}, ${t1}<?>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 975618 // primitiveClasses (<unidirectional association>)
	relation 975618 --->
	  a role_name "primitiveClasses" init_value " Util.newMap()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Class<?>> ${name}${value};
"
	    classrelation_ref 975618 // primitiveClasses (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 138754 "initialization"
	
	cpp "" ""
	java "  static {
        for (Class<?> c : new Class<?>[] {byte.class, short.class, int.class,
                                          long.class, float.class, double.class,
                                          char.class, boolean.class})
            primitiveClasses.put(c.getName(), c);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 2972546 "checkMBeanPermission"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "clazz" type class_ref 130818 // Class
	  param inout name "member" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2972674 "checkMBeanPermission"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "classname" type class_ref 128130 // String
	  param inout name "member" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "actions" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2972802 "ensureClassAccess"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "clazz" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2972930 "getClassLoader"
	private return_type class_ref 129026 // ClassLoader
	nparams 1
	  param in name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 488194 "Repository"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This repository does not support persistency.

@since 1.5
"
      class 488962 "RegistrationContext"
	visibility public stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 2933762 "registering"
	  public explicit_return_type "void"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by {@link #addMBean}.
Can throw a RuntimeOperationsException to cancel the
registration.
"
	end

	operation 2933890 "unregistered"
	  public explicit_return_type "void"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called by {@link #remove}.
Any exception thrown by this method will be ignored.
"
	end
      end

      classrelation 963586 // domainTb (<unidirectional association>)
	relation 963586 --->
	  a role_name "domainTb" const_relation private
	    comment " Private fields -------------------------------------------->

The structure for storing the objects is very basic.
A Hashtable is used for storing the different domains
For each domain, a hashtable contains the instances with
canonical key property list string as key and named object
aggregated from given object name and mbean instance as value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,Map<String,NamedObject>> ${name}${value};
"
	    classrelation_ref 963586 // domainTb (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 620034 "nbElements"
	volatile private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Number of elements contained in the Repository

"
      end

      classrelation 963714 // domain (<unidirectional association>)
	relation 963714 --->
	  a role_name "domain" const_relation private
	    comment "
Domain name of the server the repository is attached to.
It is quicker to store the information in the repository rather
than querying the framework each time the info is required.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 963714 // domain (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 963842 // lock (<unidirectional association>)
	relation 963842 --->
	  a role_name "lock" const_relation private
	    comment "
We use a global reentrant read write lock to protect the repository.
This seems safer and more efficient: we are using Maps of Maps,
Guaranteing consistency while using Concurent objects at each level
may be more difficult.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 963842 // lock (<unidirectional association>)
	  b parent class_ref 489090 // ReentrantReadWriteLock
      end

      class 489218 "ObjectNamePattern"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 963970 // keys (<unidirectional association>)
	  relation 963970 --->
	    a role_name "keys" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 963970 // keys (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 964098 // values (<unidirectional association>)
	  relation 964098 --->
	    a role_name "values" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 964098 // values (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 964226 // properties (<unidirectional association>)
	  relation 964226 --->
	    a role_name "properties" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 964226 // properties (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 620162 "isPropertyListPattern"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 620290 "isPropertyValuePattern"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 964354 // pattern (<unidirectional association>)
	  relation 964354 --->
	    a role_name "pattern" const_relation public
	      comment "
The ObjectName pattern against which ObjectNames are matched.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 964354 // pattern (<unidirectional association>)
	    b parent class_ref 485506 // ObjectName
	end

	operation 2934018 "ObjectNamePattern"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "pattern" type class_ref 485506 // ObjectName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Builds a new ObjectNamePattern object from an ObjectName pattern.
@param pattern The ObjectName pattern under examination.
"
	end

	operation 2934146 "ObjectNamePattern"
	  package explicit_return_type ""
	  nparams 5
	    param inout name "propertyListPattern" explicit_type "boolean"
	    param inout name "propertyValuePattern" explicit_type "boolean"
	    param inout name "canonicalProps" type class_ref 128130 // String
	    param inout name "keyPropertyList" type class_ref 130178 // Map
	    param inout name "pattern" type class_ref 485506 // ObjectName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String,String> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Builds a new ObjectNamePattern object from an ObjectName pattern
constituents.
@param propertyListPattern pattern.isPropertyListPattern().
@param propertyValuePattern pattern.isPropertyValuePattern().
@param canonicalProps pattern.getCanonicalKeyPropertyListString().
@param keyPropertyList pattern.getKeyPropertyList().
@param pattern The ObjectName pattern under examination.
"
	end

	operation 2934274 "matchKeys"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "name" type class_ref 485506 // ObjectName
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return true if the given ObjectName matches the ObjectName pattern
for which this object has been built.
WARNING: domain name is not considered here because it is supposed
         not to be wildcard when called. PropertyList is also
         supposed not to be zero-length.
@param name The ObjectName we want to match against the pattern.
@return true if <code>name</code> matches the pattern.
"
	end
      end

      operation 2934402 "addAllMatching"
	private explicit_return_type "void"
	nparams 3
	  param in name "moiTb" type class_ref 130178 // Map
	  param in name "result" type class_ref 192258 // Set
	  param in name "pattern" type class_ref 489218 // ObjectNamePattern
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<String,NamedObject> ${p0}, final ${t1}<NamedObject> ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add all the matching objects from the given hashtable in the
result set for the given ObjectNamePattern
Do not check whether the domains match (only check for matching
key property lists - see <i>matchKeys()</i>)
"
      end

      operation 2934530 "addNewDomMoi"
	private explicit_return_type "void"
	nparams 4
	  param in name "object" type class_ref 488450 // DynamicMBean
	  param in name "dom" type class_ref 128130 // String
	  param in name "name" type class_ref 485506 // ObjectName
	  param in name "context" type class_ref 488962 // RegistrationContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2934658 "registering"
	private explicit_return_type "void"
	nparams 1
	  param inout name "context" type class_ref 488962 // RegistrationContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2934786 "unregistering"
	private explicit_return_type "void"
	nparams 2
	  param inout name "context" type class_ref 488962 // RegistrationContext
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2934914 "addMoiToTb"
	private explicit_return_type "void"
	nparams 5
	  param in name "object" type class_ref 488450 // DynamicMBean
	  param in name "name" type class_ref 485506 // ObjectName
	  param in name "key" type class_ref 128130 // String
	  param in name "moiTb" type class_ref 130178 // Map
	  param in name "context" type class_ref 488962 // RegistrationContext
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3}<String,NamedObject> ${p3}, final ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2935042 "retrieveNamedObject"
	private return_type class_ref 489346 // NamedObject
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the named object contained in repository
from the given objectname.
"
      end

      operation 2935170 "Repository"
	public explicit_return_type ""
	nparams 1
	  param inout name "domain" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Private methods <=============================================
 Protected methods --------------------------------------------->
 Protected methods <=============================================
 Public methods --------------------------------------------->

Construct a new repository with the given default domain.
"
      end

      operation 2935298 "Repository"
	public explicit_return_type ""
	nparams 2
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "fairLock" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a new repository with the given default domain.
"
      end

      operation 2935426 "getDomains"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of domains in which any MBean is currently
registered.

"
      end

      operation 2935554 "addMBean"
	public explicit_return_type "void"
	nparams 3
	  param in name "object" type class_ref 488450 // DynamicMBean
	  param inout name "name" type class_ref 485506 // ObjectName
	  param in name "context" type class_ref 488962 // RegistrationContext
	nexceptions 1
	  exception class_ref 485762 // InstanceAlreadyExistsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Stores an MBean associated with its object name in the repository.

@param object  MBean to be stored in the repository.
@param name    MBean object name.
@param context A registration context. If non null, the repository
               will call {@link RegistrationContext#registering()
               context.registering()} from within the repository
               lock, when it has determined that the {@code object}
               can be stored in the repository with that {@code name}.
               If {@link RegistrationContext#registering()
               context.registering()} throws an exception, the
               operation is abandonned, the MBean is not added to the
               repository, and a {@link RuntimeOperationsException}
               is thrown.
"
      end

      operation 2935682 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether an MBean of the name specified is already stored in
the repository.

@param name name of the MBean to find.

@return  true if the MBean is stored in the repository,
         false otherwise.
"
      end

      operation 2935810 "retrieve"
	public return_type class_ref 488450 // DynamicMBean
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the MBean of the name specified from the repository. The
object name must match exactly.

@param name name of the MBean to retrieve.

@return  The retrieved MBean if it is contained in the repository,
         null otherwise.
"
      end

      operation 2935938 "query"
	public return_type class_ref 192258 // Set
	nparams 2
	  param inout name "pattern" type class_ref 485506 // ObjectName
	  param inout name "query" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<NamedObject> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Selects and retrieves the list of MBeans whose names match the specified
object name pattern and which match the specified query expression
(optionally).

@param pattern The name of the MBean(s) to retrieve - may be a specific
object or a name pattern allowing multiple MBeans to be selected.
@param query query expression to apply when selecting objects - this
parameter will be ignored when the Repository Service does not
support filtering.

@return  The list of MBeans selected. There may be zero, one or many
         MBeans returned in the set.
"
      end

      operation 2936066 "remove"
	public explicit_return_type "void"
	nparams 2
	  param in name "name" type class_ref 485506 // ObjectName
	  param in name "context" type class_ref 488962 // RegistrationContext
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an MBean from the repository.

@param name name of the MBean to remove.
@param context A registration context. If non null, the repository
               will call {@link RegistrationContext#unregistered()
               context.unregistered()} from within the repository
               lock, just after the mbean associated with
               {@code name} is removed from the repository.
               If {@link RegistrationContext#unregistered()
               context.unregistered()} is not expected to throw any
               exception. If it does, the exception is logged
               and swallowed.

@exception InstanceNotFoundException The MBean does not exist in
           the repository.
"
      end

      operation 2936194 "getCount"
	public return_type class_ref 137602 // Integer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of MBeans stored in the repository.

@return  Number of MBeans.
"
      end

      operation 2936322 "getDefaultDomain"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of the domain currently used by default in the
repository.

@return  A string giving the name of the default domain name.
"
      end
    end

    class 489346 "NamedObject"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is used for storing a pair (name, object) where name is
an object name and object is a reference to the object.

@since 1.5
"
      classrelation 981378 // name (<unidirectional association>)
	relation 981378 --->
	  a role_name "name" const_relation private
	    comment "
Object name.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 981378 // name (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      classrelation 981506 // object (<unidirectional association>)
	relation 981506 --->
	  a role_name "object" const_relation private
	    comment "
Object reference.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 981506 // object (<unidirectional association>)
	  b parent class_ref 488450 // DynamicMBean
      end

      operation 2991490 "NamedObject"
	public explicit_return_type ""
	nparams 2
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "object" type class_ref 488450 // DynamicMBean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows a named object to be created.

@param objectName The object name of the object.
@param object A reference to the object.
"
      end

      operation 2991618 "NamedObject"
	public explicit_return_type ""
	nparams 2
	  param inout name "objectName" type class_ref 128130 // String
	  param inout name "object" type class_ref 488450 // DynamicMBean
	nexceptions 1
	  exception class_ref 499330 // MalformedObjectNameException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows a named object to be created.

@param objectName The string representation of the object name of the object.
@param object A reference to the object.

@exception MalformedObjectNameException The string passed does not have the format of a valid ObjectName
"
      end

      operation 2991746 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the current object name with another object name.

@param object  The Named Object that the current object name is to be
       compared with.

@return  True if the two named objects are equal, otherwise false.
"
      end

      operation 2991874 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this named object.

"
      end

      operation 2992002 "getName"
	public return_type class_ref 485506 // ObjectName
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the object name.
"
      end

      operation 2992130 "getObject"
	public return_type class_ref 488450 // DynamicMBean
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the object
"
      end
    end

    class 489474 "ModifiableClassLoaderRepository"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface keeps the list of Class Loaders registered in the
MBean Server.
It provides the necessary methods to load classes using the
registered Class Loaders, and to add/remove class loaders from the
list.

@since 1.5
"
      classrelation 964738 // <generalisation>
	relation 964738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 964738 // <generalisation>
	  b parent class_ref 487810 // ClassLoaderRepository
      end

      operation 2937858 "addClassLoader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "loader" type class_ref 129026 // ClassLoader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add an anonymous ClassLoader to the repository.
"
      end

      operation 2937986 "removeClassLoader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "loader" type class_ref 129026 // ClassLoader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove the specified ClassLoader to the repository.
The class loader may or may not be anonymous.
"
      end

      operation 2938114 "addClassLoader"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "loader" type class_ref 129026 // ClassLoader
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a named ClassLoader to the repository.
"
      end

      operation 2938242 "removeClassLoader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a named ClassLoader from the repository.
"
      end

      operation 2938370 "getClassLoader"
	public return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a named ClassLoader from the repository.
"
      end
    end

    class 489602 "ClassLoaderRepositorySupport"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class keeps the list of Class Loaders registered in the MBean Server.
It provides the necessary methods to load classes using the
registered Class Loaders.

@since 1.5
"
      classrelation 964866 // <realization>
	relation 964866 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 964866 // <realization>
	  b parent class_ref 489474 // ModifiableClassLoaderRepository
      end

      class 489730 "LoaderEntry"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 964994 // name (<unidirectional association>)
	  relation 964994 --->
	    a role_name "name" package
	      comment " can be null"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 964994 // name (<unidirectional association>)
	    b parent class_ref 485506 // ObjectName
	end

	classrelation 965122 // loader (<unidirectional association>)
	  relation 965122 --->
	    a role_name "loader" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 965122 // loader (<unidirectional association>)
	    b parent class_ref 129026 // ClassLoader
	end

	operation 2938498 "LoaderEntry"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "name" type class_ref 485506 // ObjectName
	    param inout name "loader" type class_ref 129026 // ClassLoader
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 965250 // EMPTY_LOADER_ARRAY (<unidirectional association>)
	relation 965250 --->
	  a role_name "EMPTY_LOADER_ARRAY" multiplicity "[]" init_value " new LoaderEntry[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 965250 // EMPTY_LOADER_ARRAY (<unidirectional association>)
	  b parent class_ref 489730 // LoaderEntry
      end

      classrelation 965378 // loaders (<unidirectional association>)
	relation 965378 --->
	  a role_name "loaders" multiplicity "[]" init_value " EMPTY_LOADER_ARRAY" private
	    comment "
List of class loaders
Only read-only actions should be performed on this object.

We do O(n) operations on this array, e.g. when removing
a ClassLoader.  The assumption is that the number of elements
is small, probably less than ten, and that the vast majority
of operations are searches (loadClass) which are by definition
linear.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 965378 // loaders (<unidirectional association>)
	  b parent class_ref 489730 // LoaderEntry
      end

      operation 2938626 "add"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "cl" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same behavior as add(Object o) in {@link java.util.List}.
Replace the loader list with a new one in which the new
loader has been added.
"
      end

      operation 2938754 "remove"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "cl" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same behavior as remove(Object o) in {@link java.util.List}.
Replace the loader list with a new one in which the old loader
has been removed.

The ObjectName may be null, in which case the entry to
be removed must also have a null ObjectName and the ClassLoader
values must match.  If the ObjectName is not null, then
the first entry with a matching ObjectName is removed,
regardless of whether ClassLoader values match.  (In fact,
the ClassLoader parameter will usually be null in this case.)
"
      end

      classrelation 965506 // search (<unidirectional association>)
	relation 965506 --->
	  a role_name "search" init_value "
        new Hashtable<String,List<ClassLoader>>(10)" const_relation private
	    comment "
List of valid search

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String,List<ClassLoader>> ${name}${value};
"
	    classrelation_ref 965506 // search (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 965634 // loadersWithNames (<unidirectional association>)
	relation 965634 --->
	  a role_name "loadersWithNames" init_value "
        new Hashtable<ObjectName,ClassLoader>(10)" const_relation private
	    comment "
List of named class loaders.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName,ClassLoader> ${name}${value};
"
	    classrelation_ref 965634 // loadersWithNames (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 2938882 "loadClass"
	public return_type class_ref 130818 // Class
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " from javax.management.loading.DefaultLoaderRepository"
      end

      operation 2939010 "loadClassWithout"
	public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "without" type class_ref 129026 // ClassLoader
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " from javax.management.loading.DefaultLoaderRepository"
      end

      operation 2939138 "loadClassBefore"
	public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "stop" type class_ref 129026 // ClassLoader
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2939266 "loadClass"
	private return_type class_ref 130818 // Class
	nparams 4
	  param in name "list" type class_ref 489730 // LoaderEntry
	multiplicity "[]"
	  param in name "className" type class_ref 128130 // String
	  param in name "without" type class_ref 129026 // ClassLoader
	  param in name "stop" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}final ${t0}[] ${p0}, final ${t1} ${p1}, final ${t2} ${p2}, final ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2939394 "startValidSearch"
	private explicit_return_type "void"
	nparams 2
	  param inout name "aloader" type class_ref 129026 // ClassLoader
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2939522 "stopValidSearch"
	private explicit_return_type "void"
	nparams 2
	  param inout name "aloader" type class_ref 129026 // ClassLoader
	  param inout name "className" type class_ref 128130 // String
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2939650 "addClassLoader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2939778 "removeClassLoader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2939906 "addClassLoader"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2940034 "removeClassLoader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2940162 "getClassLoader"
	public return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 489858 "ConvertingMethod"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 2940290 "from"
	class_operation package return_type class_ref 489858 // ConvertingMethod
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2940418 "getMethod"
	package return_type class_ref 137858 // Method
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2940546 "getDescriptor"
	package return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2940674 "getGenericReturnType"
	package return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2940802 "getGenericParameterTypes"
	package return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2940930 "getName"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2941058 "getOpenReturnType"
	package return_type class_ref 490242 // OpenType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2941186 "getOpenParameterTypes"
	package return_type class_ref 490242 // OpenType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2941314 "checkCallFromOpen"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that this method will be callable when we are going from
open types to Java types, for example when we are going from
an MXBean wrapper to the underlying resource.
The parameters will be converted to
Java types, so they must be \"reconstructible\".  The return
value will be converted to an Open Type, so if it is convertible
at all there is no further check needed.
"
      end

      operation 2941442 "checkCallToOpen"
	package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that this method will be callable when we are going from
Java types to open types, for example when we are going from
an MXBean proxy to the open types that it will be mapped to.
The return type will be converted back to a Java type, so it
must be \"reconstructible\".  The parameters will be converted to
open types, so if it is convertible at all there is no further
check needed.
"
      end

      operation 2941570 "getOpenSignature"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2941698 "toOpenReturnValue"
	package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "lookup" type class_ref 490370 // MXBeanLookup
	  param inout name "ret" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2941826 "fromOpenReturnValue"
	package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "lookup" type class_ref 490370 // MXBeanLookup
	  param inout name "ret" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2941954 "toOpenParameters"
	package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "lookup" type class_ref 490370 // MXBeanLookup
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2942082 "fromOpenParameters"
	package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2942210 "toOpenParameter"
	package return_type class_ref 129538 // Object
	nparams 3
	  param inout name "lookup" type class_ref 490370 // MXBeanLookup
	  param inout name "param" type class_ref 129538 // Object
	  param in name "paramNo" explicit_type "int"
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2942338 "fromOpenParameter"
	package return_type class_ref 129538 // Object
	nparams 3
	  param inout name "lookup" type class_ref 490370 // MXBeanLookup
	  param inout name "param" type class_ref 129538 // Object
	  param in name "paramNo" explicit_type "int"
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2942466 "invokeWithOpenReturn"
	package return_type class_ref 129538 // Object
	nparams 3
	  param inout name "lookup" type class_ref 490370 // MXBeanLookup
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 193410 // InvocationTargetException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2942594 "invokeWithOpenReturn"
	private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 193410 // InvocationTargetException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2942722 "methodName"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2942850 "ConvertingMethod"
	private explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 965762 // noStrings (<unidirectional association>)
	relation 965762 --->
	  a role_name "noStrings" multiplicity "[]" init_value " new String[0]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 965762 // noStrings (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 965890 // method (<unidirectional association>)
	relation 965890 --->
	  a role_name "method" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 965890 // method (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      classrelation 966018 // returnMapping (<unidirectional association>)
	relation 966018 --->
	  a role_name "returnMapping" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 966018 // returnMapping (<unidirectional association>)
	  b parent class_ref 490626 // MXBeanMapping
      end

      classrelation 966146 // paramMappings (<unidirectional association>)
	relation 966146 --->
	  a role_name "paramMappings" multiplicity "[]" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 966146 // paramMappings (<unidirectional association>)
	  b parent class_ref 490626 // MXBeanMapping
      end

      attribute 620418 "paramConversionIsIdentity"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 490370 "MXBeanLookup"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "@since 1.6


This class handles the mapping between MXBean references and
ObjectNames.  Consider an MXBean interface like this:

public interface ModuleMXBean {
    ProductMXBean getProduct();
    void setProduct(ProductMXBean product);
}

This defines an attribute called \"Product\" whose originalType will
be ProductMXBean and whose openType will be ObjectName.  The
mapping happens as follows.

When the MXBean's getProduct method is called, it is supposed to
return a reference to another MXBean, or a proxy for another
MXBean.  The MXBean layer has to convert this into an ObjectName.
If it's a reference to another MXBean, it needs to be able to look
up the name under which that MXBean has been registered in this
MBeanServer; this is the purpose of the mxbeanToObjectName map.  If
it's a proxy, it can check that the MBeanServer matches and if so
extract the ObjectName from the proxy.

When the setProduct method is called on a proxy for this MXBean,
the argument can be either an MXBean reference (only really logical
if the proxy has a local MBeanServer) or another proxy.  So the
mapping logic is the same as for getProduct on the MXBean.

When the MXBean's setProduct method is called, it needs to convert
the ObjectName into an object implementing the ProductMXBean
interface.  We could have a lookup table that reverses
mxbeanToObjectName, but this could violate the general JMX property
that you cannot obtain a reference to an MBean object.  So we
always use a proxy for this.  However we do have an
objectNameToProxy map that allows us to reuse proxy instances.

When the getProduct method is called on a proxy for this MXBean, it
must convert the returned ObjectName into an instance of
ProductMXBean.  Again it can do this by making a proxy.

From the above, it is clear that the logic for getX on an MXBean is
the same as for setX on a proxy, and vice versa.
"
      operation 2987650 "MXBeanLookup"
	private explicit_return_type ""
	nparams 1
	  param inout name "mbsc" type class_ref 485250 // MBeanServerConnection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2987778 "lookupFor"
	class_operation package return_type class_ref 490370 // MXBeanLookup
	nparams 1
	  param inout name "mbsc" type class_ref 485250 // MBeanServerConnection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2987906 "objectNameToMXBean"
	package explicit_return_type "T"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "type" type class_ref 130818 // Class
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2988034 "mxbeanToObjectName"
	package return_type class_ref 485506 // ObjectName
	nparams 1
	  param inout name "mxbean" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2988162 "addReference"
	package explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "mxbean" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 485762 // InstanceAlreadyExistsException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2988290 "removeReference"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "mxbean" type class_ref 129538 // Object
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2988418 "getLookup"
	class_operation package return_type class_ref 490370 // MXBeanLookup
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2988546 "setLookup"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "lookup" type class_ref 490370 // MXBeanLookup
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 979202 // currentLookup (<unidirectional association>)
	relation 979202 --->
	  a role_name "currentLookup" init_value "
            new ThreadLocal<MXBeanLookup>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MXBeanLookup> ${name}${value};
"
	    classrelation_ref 979202 // currentLookup (<unidirectional association>)
	  b parent class_ref 129282 // ThreadLocal
      end

      classrelation 979330 // mbsc (<unidirectional association>)
	relation 979330 --->
	  a role_name "mbsc" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 979330 // mbsc (<unidirectional association>)
	  b parent class_ref 485250 // MBeanServerConnection
      end

      classrelation 979458 // mxbeanToObjectName (<unidirectional association>)
	relation 979458 --->
	  a role_name "mxbeanToObjectName" init_value " WeakIdentityHashMap.make()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object, ObjectName> ${name}${value};
"
	    classrelation_ref 979458 // mxbeanToObjectName (<unidirectional association>)
	  b parent class_ref 498306 // WeakIdentityHashMap
      end

      classrelation 979586 // objectNameToProxy (<unidirectional association>)
	relation 979586 --->
	  a role_name "objectNameToProxy" init_value " newMap()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectName, WeakReference<Object>> ${name}${value};
"
	    classrelation_ref 979586 // objectNameToProxy (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 979714 // mbscToLookup (<unidirectional association>)
	relation 979714 --->
	  a role_name "mbscToLookup" init_value " WeakIdentityHashMap.make()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MBeanServerConnection,
                                             WeakReference<MXBeanLookup>> ${name}${value};
"
	    classrelation_ref 979714 // mbscToLookup (<unidirectional association>)
	  b parent class_ref 498306 // WeakIdentityHashMap
      end
    end

    class 490626 "MXBeanMapping"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A custom mapping between Java types and Open types for use in MXBeans.
To define such a mapping, subclass this class and define at least the
{@link #fromOpenValue fromOpenValue} and {@link #toOpenValue toOpenValue}
methods, and optionally the {@link #checkReconstructible} method.
Then either use an {@link MXBeanMappingClass} annotation on your custom
Java types, or include this MXBeanMapping in an
{@link MXBeanMappingFactory}.</p>

<p>For example, suppose we have a class {@code MyLinkedList}, which looks
like this:</p>

<pre>
public class MyLinkedList {
    public MyLinkedList(String name, MyLinkedList next) {...}
    public String getName() {...}
    public MyLinkedList getNext() {...}
}
</pre>

<p>This is not a valid type for MXBeans, because it contains a
self-referential property \"next\" defined by the {@code getNext()}
method.  MXBeans do not support recursive types.  So we would like
to specify a mapping for {@code MyLinkedList} explicitly. When an
MXBean interface contains {@code MyLinkedList}, that will be mapped
into a {@code String[]}, which is a valid Open Type.</p>

<p>To define this mapping, we first subclass {@code MXBeanMapping}:</p>

<pre>
public class MyLinkedListMapping extends MXBeanMapping {
    public MyLinkedListMapping(Type type) throws OpenDataException {
        super(MyLinkedList.class, ArrayType.getArrayType(SimpleType.STRING));
        if (type != MyLinkedList.class)
            throw new OpenDataException(\"Mapping only valid for MyLinkedList\");
    }

    {@literal @Override}
    public Object fromOpenValue(Object openValue) throws InvalidObjectException {
        String[] array = (String[]) openValue;
        MyLinkedList list = null;
        for (int i = array.length - 1; i &gt;= 0; i--)
            list = new MyLinkedList(array[i], list);
        return list;
    }

    {@literal @Override}
    public Object toOpenValue(Object javaValue) throws OpenDataException {
        ArrayList&lt;String&gt; array = new ArrayList&lt;String&gt;();
        for (MyLinkedList list = (MyLinkedList) javaValue; list != null;
             list = list.getNext())
            array.add(list.getName());
        return array.toArray(new String[0]);
    }
}
</pre>

<p>The call to the superclass constructor specifies what the
original Java type is ({@code MyLinkedList.class}) and what Open
Type it is mapped to ({@code
ArrayType.getArrayType(SimpleType.STRING)}). The {@code
fromOpenValue} method says how we go from the Open Type ({@code
String[]}) to the Java type ({@code MyLinkedList}), and the {@code
toOpenValue} method says how we go from the Java type to the Open
Type.</p>

<p>With this mapping defined, we can annotate the {@code MyLinkedList}
class appropriately:</p>

<pre>
{@literal @MXBeanMappingClass}(MyLinkedListMapping.class)
public class MyLinkedList {...}
</pre>

<p>Now we can use {@code MyLinkedList} in an MXBean interface and it
will work.</p>

<p>If we are unable to modify the {@code MyLinkedList} class,
we can define an {@link MXBeanMappingFactory}.  See the documentation
of that class for further details.</p>

@see <a href=\"../MXBean.html#custom\">MXBean specification, section
\"Custom MXBean type mappings\"</a>
"
      classrelation 966530 // javaType (<unidirectional association>)
	relation 966530 --->
	  a role_name "javaType" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 966530 // javaType (<unidirectional association>)
	  b parent class_ref 490114 // Type
      end

      classrelation 966658 // openType (<unidirectional association>)
	relation 966658 --->
	  a role_name "openType" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 966658 // openType (<unidirectional association>)
	  b parent class_ref 490242 // OpenType
      end

      classrelation 966786 // openClass (<unidirectional association>)
	relation 966786 --->
	  a role_name "openClass" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 966786 // openClass (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 2943234 "MXBeanMapping"
	protected explicit_return_type ""
	nparams 2
	  param inout name "javaType" type class_ref 490114 // Type
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Construct a mapping between the given Java type and the given
Open Type.</p>

@param javaType the Java type (for example, {@code MyLinkedList}).
@param openType the Open Type (for example, {@code
ArrayType.getArrayType(SimpleType.STRING)})

@throws NullPointerException if either argument is null.
"
      end

      operation 2943362 "getJavaType"
	public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The Java type that was supplied to the constructor.</p>
@return the Java type that was supplied to the constructor.
"
      end

      operation 2943490 "getOpenType"
	public return_type class_ref 490242 // OpenType
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The Open Type that was supplied to the constructor.</p>
@return the Open Type that was supplied to the constructor.
"
      end

      operation 2943618 "getOpenClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The Java class that corresponds to instances of the
{@linkplain #getOpenType() Open Type} for this mapping.</p>
@return the Java class that corresponds to instances of the
Open Type for this mapping.
@see OpenType#getClassName
"
      end

      operation 2943746 "makeOpenClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "javaType" type class_ref 490114 // Type
	  param inout name "openType" type class_ref 490242 // OpenType
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2943874 "fromOpenValue"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "openValue" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Convert an instance of the Open Type into the Java type.
@param openValue the value to be converted.
@return the converted value.
@throws InvalidObjectException if the value cannot be converted.
"
      end

      operation 2944002 "toOpenValue"
	abstract public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "javaValue" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Convert an instance of the Java type into the Open Type.
@param javaValue the value to be converted.
@return the converted value.
@throws OpenDataException if the value cannot be converted.
"
      end

      operation 2944130 "checkReconstructible"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Throw an appropriate InvalidObjectException if we will not
be able to convert back from the open data to the original Java
object.  The {@link #fromOpenValue fromOpenValue} throws an
exception if a given open data value cannot be converted.  This
method throws an exception if <em>no</em> open data values can
be converted.  The default implementation of this method never
throws an exception.  Subclasses can override it as
appropriate.</p>
@throws InvalidObjectException if {@code fromOpenValue} will throw
an exception no matter what its argument is.
"
      end
    end

    class 490754 "DefaultMXBeanMappingFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "  <p>A converter between Java types and the limited set of classes
  defined by Open MBeans.</p>

  <p>A Java type is an instance of java.lang.reflect.Type.  For our
  purposes, it is either a Class, such as String.class or int.class;
  or a ParameterizedType, such as List<String> or Map<Integer,
  String[]>.  On J2SE 1.4 and earlier, it can only be a Class.</p>

  <p>Each Type is associated with an DefaultMXBeanMappingFactory.  The
  DefaultMXBeanMappingFactory defines an OpenType corresponding to the Type, plus a
  Java class corresponding to the OpenType.  For example:</p>

  <pre>
  Type                     Open class     OpenType
  ----                     ----------     --------
  Integer                Integer        SimpleType.INTEGER
  int                            int            SimpleType.INTEGER
  Integer[]              Integer[]      ArrayType(1, SimpleType.INTEGER)
  int[]                  Integer[]      ArrayType(SimpleType.INTEGER, true)
  String[][]             String[][]     ArrayType(2, SimpleType.STRING)
  List<String>                   String[]       ArrayType(1, SimpleType.STRING)
  ThreadState (an Enum)    String         SimpleType.STRING
  Map<Integer, String[]>   TabularData          TabularType(
                                          CompositeType(
                                            {\"key\", SimpleType.INTEGER},
                                            {\"value\",
                                              ArrayType(1,
                                               SimpleType.STRING)}),
                                          indexNames={\"key\"})
  </pre>

  <p>Apart from simple types, arrays, and collections, Java types are
  converted through introspection into CompositeType.  The Java type
  must have at least one getter (method such as \"int getSize()\" or
  \"boolean isBig()\"), and we must be able to deduce how to
  reconstruct an instance of the Java class from the values of the
  getters using one of various heuristics.</p>

@since 1.6
"
      classrelation 966402 // <generalisation>
	relation 966402 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 966402 // <generalisation>
	  b parent class_ref 490882 // MXBeanMappingFactory
      end

      class 491010 "NonNullMXBeanMapping"
	abstract visibility package 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 966914 // <generalisation>
	  relation 966914 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 966914 // <generalisation>
	    b parent class_ref 490626 // MXBeanMapping
	end

	operation 2944258 "NonNullMXBeanMapping"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "javaType" type class_ref 490114 // Type
	    param inout name "openType" type class_ref 490242 // OpenType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2944386 "fromOpenValue"
	  public return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "openValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2944514 "toOpenValue"
	  public return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "javaValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2944642 "fromNonNullOpenValue"
	  abstract package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "openValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2944770 "toNonNullOpenValue"
	  abstract package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "javaValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2944898 "isIdentity"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "<p>True if and only if this MXBeanMapping's toOpenValue and
fromOpenValue methods are the identity function.</p>
"
	end
      end

      operation 2945026 "isIdentity"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "mapping" type class_ref 490626 // MXBeanMapping
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 491138 "Mappings"
	visibility private 
	nactuals 2
	actual class class_ref 192002 // WeakHashMap
	  rank 0 explicit_value ""
	actual class class_ref 192002 // WeakHashMap
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 967042 // <realization>
	  relation 967042 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 967042 // <realization>
	    b parent class_ref 192002 // WeakHashMap
	end
      end

      classrelation 967170 // mappings (<unidirectional association>)
	relation 967170 --->
	  a role_name "mappings" init_value " new Mappings()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 967170 // mappings (<unidirectional association>)
	  b parent class_ref 491138 // Mappings
      end

      classrelation 967298 // permanentMappings (<unidirectional association>)
	relation 967298 --->
	  a role_name "permanentMappings" init_value " newList()" class_relation const_relation private
	    comment " Following List simply serves to keep a reference to predefined
MXBeanMappings so they don't get garbage collected. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MXBeanMapping> ${name}${value};
"
	    classrelation_ref 967298 // permanentMappings (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      operation 2945154 "getMapping"
	class_operation private return_type class_ref 490626 // MXBeanMapping
	nparams 1
	  param inout name "type" type class_ref 490114 // Type
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2945282 "putMapping"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "type" type class_ref 490114 // Type
	  param inout name "mapping" type class_ref 490626 // MXBeanMapping
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2945410 "putPermanentMapping"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "type" type class_ref 490114 // Type
	  param inout name "mapping" type class_ref 490626 // MXBeanMapping
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      extra_member 138370 "initialization"
	
	cpp "" ""
	java "  static {
        /* Set up the mappings for Java types that map to SimpleType.  */

        final OpenType<?>[] simpleTypes = {
            BIGDECIMAL, BIGINTEGER, BOOLEAN, BYTE, CHARACTER, DATE,
            DOUBLE, FLOAT, INTEGER, LONG, OBJECTNAME, SHORT, STRING,
            VOID,
        };

        for (int i = 0; i < simpleTypes.length; i++) {
            final OpenType<?> t = simpleTypes[i];
            Class<?> c;
            try {
                c = Class.forName(t.getClassName(), false,
                                  ObjectName.class.getClassLoader());
            } catch (ClassNotFoundException e) {
                // the classes that these predefined types declare must exist!
                throw new Error(e);
            }
            final MXBeanMapping mapping = new IdentityMapping(c, t);
            putPermanentMapping(c, mapping);

            if (c.getName().startsWith(\"java.lang.\")) {
                try {
                    final Field typeField = c.getField(\"TYPE\");
                    final Class<?> primitiveType = (Class<?>) typeField.get(null);
                    final MXBeanMapping primitiveMapping =
                        new IdentityMapping(primitiveType, t);
                    putPermanentMapping(primitiveType, primitiveMapping);
                    if (primitiveType != void.class) {
                        final Class<?> primitiveArrayType =
                            Array.newInstance(primitiveType, 0).getClass();
                        final OpenType<?> primitiveArrayOpenType =
                            ArrayType.getPrimitiveArrayType(primitiveArrayType);
                        final MXBeanMapping primitiveArrayMapping =
                            new IdentityMapping(primitiveArrayType,
                                                primitiveArrayOpenType);
                        putPermanentMapping(primitiveArrayType,
                                            primitiveArrayMapping);
                    }
                } catch (NoSuchFieldException e) {
                    // OK: must not be a primitive wrapper
                } catch (IllegalAccessException e) {
                    // Should not reach here
                    assert(false);
                }
            }
        }
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 2945538 "mappingForType"
	public return_type class_ref 490626 // MXBeanMapping
	nparams 2
	  param inout name "objType" type class_ref 490114 // Type
	  param inout name "factory" type class_ref 490882 // MXBeanMappingFactory
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Get the converter for the given Java type, creating it if necessary. "
      end

      operation 2945666 "makeMapping"
	private return_type class_ref 490626 // MXBeanMapping
	nparams 2
	  param inout name "objType" type class_ref 490114 // Type
	  param inout name "factory" type class_ref 490882 // MXBeanMappingFactory
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2945794 "makeEnumMapping"
	class_operation private return_type class_ref 490626 // MXBeanMapping
	nparams 2
	  param inout name "enumClass" type class_ref 130818 // Class
	  param inout name "fake" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Enum<T>> ${type} ${name}${(}${t0}<?> ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2945922 "makeArrayOrCollectionMapping"
	private return_type class_ref 490626 // MXBeanMapping
	nparams 3
	  param inout name "collectionType" type class_ref 490114 // Type
	  param inout name "elementType" type class_ref 490114 // Type
	  param inout name "factory" type class_ref 490882 // MXBeanMappingFactory
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Make the converter for an array type, or a collection such as
List<String> or Set<Integer>.  We never see one-dimensional
primitive arrays (e.g. int[]) here because they use the identity
converter and are registered as such in the static initializer.
"
      end

      classrelation 967426 // keyArray (<unidirectional association>)
	relation 967426 --->
	  a role_name "keyArray" multiplicity "[]" init_value " {\"key\"}" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 967426 // keyArray (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 967554 // keyValueArray (<unidirectional association>)
	relation 967554 --->
	  a role_name "keyValueArray" multiplicity "[]" init_value " {\"key\", \"value\"}" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 967554 // keyValueArray (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 2946050 "makeTabularMapping"
	private return_type class_ref 490626 // MXBeanMapping
	nparams 5
	  param inout name "objType" type class_ref 490114 // Type
	  param inout name "sortedMap" explicit_type "boolean"
	  param inout name "keyType" type class_ref 490114 // Type
	  param inout name "valueType" type class_ref 490114 // Type
	  param inout name "factory" type class_ref 490882 // MXBeanMappingFactory
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2946178 "makeParameterizedTypeMapping"
	private return_type class_ref 490626 // MXBeanMapping
	nparams 2
	  param inout name "objType" type class_ref 491266 // ParameterizedType
	  param inout name "factory" type class_ref 490882 // MXBeanMappingFactory
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " We know how to translate List<E>, Set<E>, SortedSet<E>,
Map<K,V>, SortedMap<K,V>, and that's it.  We don't accept
subtypes of those because we wouldn't know how to deserialize
them.  We don't accept Queue<E> because it is unlikely people
would use that as a parameter or return type in an MBean.  "
      end

      operation 2946306 "makeMXBeanRefMapping"
	class_operation private return_type class_ref 490626 // MXBeanMapping
	nparams 1
	  param inout name "t" type class_ref 490114 // Type
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2946434 "makeCompositeMapping"
	private return_type class_ref 490626 // MXBeanMapping
	nparams 2
	  param inout name "c" type class_ref 130818 // Class
	  param inout name "factory" type class_ref 490882 // MXBeanMappingFactory
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 491394 "IdentityMapping"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 967682 // <generalisation>
	  relation 967682 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 967682 // <generalisation>
	    b parent class_ref 491010 // NonNullMXBeanMapping
	end

	operation 2946562 "IdentityMapping"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "targetType" type class_ref 490114 // Type
	    param inout name "openType" type class_ref 490242 // OpenType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2946690 "isIdentity"
	  package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2946818 "fromNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "openValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2946946 "toNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "javaValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 491522 "EnumMapping"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends "Enum<T>"
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 967810 // <generalisation>
	  relation 967810 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 967810 // <generalisation>
	    b parent class_ref 491010 // NonNullMXBeanMapping
	end

	operation 2947074 "EnumMapping"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "enumClass" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2947202 "toNonNullOpenValue"
	  cpp_inline package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2947330 "fromNonNullOpenValue"
	  cpp_inline package explicit_return_type "T"
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	classrelation 967938 // enumClass (<unidirectional association>)
	  relation 967938 --->
	    a role_name "enumClass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 967938 // enumClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end
      end

      class 491650 "ArrayMapping"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 968066 // <generalisation>
	  relation 968066 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 968066 // <generalisation>
	    b parent class_ref 491010 // NonNullMXBeanMapping
	end

	operation 2947458 "ArrayMapping"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "targetType" type class_ref 490114 // Type
	    param inout name "openArrayType" type class_ref 491778 // ArrayType
	    param inout name "openArrayClass" type class_ref 130818 // Class
	    param inout name "elementMapping" type class_ref 490626 // MXBeanMapping
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2947586 "toNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2947714 "fromNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "openValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2947842 "checkReconstructible"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 968194 // elementMapping (<unidirectional association>)
	  relation 968194 --->
	    a role_name "elementMapping" const_relation private
	      comment "
DefaultMXBeanMappingFactory for the elements of this array.  If this is an
         array of arrays, the converter converts the second-level arrays,
         not the deepest elements.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 968194 // elementMapping (<unidirectional association>)
	    b parent class_ref 490626 // MXBeanMapping
	end
      end

      class 491906 "CollectionMapping"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 968322 // <generalisation>
	  relation 968322 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 968322 // <generalisation>
	    b parent class_ref 491010 // NonNullMXBeanMapping
	end

	operation 2947970 "CollectionMapping"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "targetType" type class_ref 490114 // Type
	    param inout name "openArrayType" type class_ref 491778 // ArrayType
	    param inout name "openArrayClass" type class_ref 130818 // Class
	    param inout name "elementMapping" type class_ref 490626 // MXBeanMapping
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2948098 "toNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2948226 "fromNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "openValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2948354 "checkReconstructible"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 968450 // collectionClass (<unidirectional association>)
	  relation 968450 --->
	    a role_name "collectionClass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends Collection<?>> ${name}${value};
"
	      classrelation_ref 968450 // collectionClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 968578 // elementMapping (<unidirectional association>)
	  relation 968578 --->
	    a role_name "elementMapping" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 968578 // elementMapping (<unidirectional association>)
	    b parent class_ref 490626 // MXBeanMapping
	end
      end

      class 492034 "MXBeanRefMapping"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 968706 // <generalisation>
	  relation 968706 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 968706 // <generalisation>
	    b parent class_ref 491010 // NonNullMXBeanMapping
	end

	operation 2948482 "MXBeanRefMapping"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "intf" type class_ref 490114 // Type
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2948610 "toNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "javaValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2948738 "fromNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "openValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2948866 "lookupNotNull"
	  private return_type class_ref 490370 // MXBeanLookup
	  nparams 1
	    param inout name "excClass" type class_ref 130818 // Class
	  nexceptions 1
	    explicit_exception "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Exception> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 492162 "TabularMapping"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 968834 // <generalisation>
	  relation 968834 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 968834 // <generalisation>
	    b parent class_ref 491010 // NonNullMXBeanMapping
	end

	operation 2948994 "TabularMapping"
	  package explicit_return_type ""
	  nparams 5
	    param inout name "targetType" type class_ref 490114 // Type
	    param inout name "sortedMap" explicit_type "boolean"
	    param inout name "tabularType" type class_ref 492290 // TabularType
	    param inout name "keyConverter" type class_ref 490626 // MXBeanMapping
	    param inout name "valueConverter" type class_ref 490626 // MXBeanMapping
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2949122 "toNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2949250 "fromNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "openValue" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2949378 "checkReconstructible"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	attribute 620546 "sortedMap"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 968962 // keyMapping (<unidirectional association>)
	  relation 968962 --->
	    a role_name "keyMapping" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 968962 // keyMapping (<unidirectional association>)
	    b parent class_ref 490626 // MXBeanMapping
	end

	classrelation 969090 // valueMapping (<unidirectional association>)
	  relation 969090 --->
	    a role_name "valueMapping" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 969090 // valueMapping (<unidirectional association>)
	    b parent class_ref 490626 // MXBeanMapping
	end
      end

      class 492418 "CompositeMapping"
	visibility private 
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 969218 // <generalisation>
	  relation 969218 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 969218 // <generalisation>
	    b parent class_ref 491010 // NonNullMXBeanMapping
	end

	operation 2949506 "CompositeMapping"
	  package explicit_return_type ""
	  nparams 5
	    param inout name "targetClass" type class_ref 130818 // Class
	    param inout name "compositeType" type class_ref 492546 // CompositeType
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "getters" type class_ref 137858 // Method
	  multiplicity "[]"
	    param inout name "factory" type class_ref 490882 // MXBeanMappingFactory
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2949634 "toNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 490498 // OpenDataException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2949762 "makeCompositeBuilder"
	  private explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Determine how to convert back from the CompositeData into
the original Java type.  For a type that is not reconstructible,
this method will fail every time, and will throw the right
exception. "
	end

	operation 2949890 "checkReconstructible"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2950018 "fromNonNullOpenValue"
	  package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	classrelation 969346 // itemNames (<unidirectional association>)
	  relation 969346 --->
	    a role_name "itemNames" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 969346 // itemNames (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 969474 // getters (<unidirectional association>)
	  relation 969474 --->
	    a role_name "getters" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 969474 // getters (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end

	classrelation 969602 // getterMappings (<unidirectional association>)
	  relation 969602 --->
	    a role_name "getterMappings" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 969602 // getterMappings (<unidirectional association>)
	    b parent class_ref 490626 // MXBeanMapping
	end

	classrelation 969730 // compositeBuilder (<unidirectional association>)
	  relation 969730 --->
	    a role_name "compositeBuilder" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 969730 // compositeBuilder (<unidirectional association>)
	    b parent class_ref 492674 // CompositeBuilder
	end
      end

      class 492674 "CompositeBuilder"
	abstract visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 2950146 "CompositeBuilder"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "targetClass" type class_ref 130818 // Class
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2950274 "getTargetClass"
	  package return_type class_ref 130818 // Class
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2950402 "getItemNames"
	  package return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2950530 "applicable"
	  abstract package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "getters" type class_ref 137858 // Method
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " If the subclass is appropriate for targetClass, then the
method returns null.  If the subclass is not appropriate,
then the method returns an explanation of why not.  If the
subclass should be appropriate but there is a problem,
then the method throws InvalidObjectException.  "
	end

	operation 2950658 "possibleCause"
	  package return_type class_ref 129922 // Throwable
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " If the subclass returns an explanation of why it is not applicable,
it can additionally indicate an exception with details.  This is
potentially confusing, because the real problem could be that one
of the other subclasses is supposed to be applicable but isn't.
But the advantage of less information loss probably outweighs the
disadvantage of possible confusion.  "
	end

	operation 2950786 "fromCompositeData"
	  abstract package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "cd" type class_ref 492802 // CompositeData
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "converters" type class_ref 490626 // MXBeanMapping
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 969858 // targetClass (<unidirectional association>)
	  relation 969858 --->
	    a role_name "targetClass" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 969858 // targetClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 969986 // itemNames (<unidirectional association>)
	  relation 969986 --->
	    a role_name "itemNames" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 969986 // itemNames (<unidirectional association>)
	    b parent class_ref 128130 // String
	end
      end

      class 492930 "CompositeBuilderViaFrom"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 970114 // <generalisation>
	  relation 970114 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 970114 // <generalisation>
	    b parent class_ref 492674 // CompositeBuilder
	end

	operation 2950914 "CompositeBuilderViaFrom"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "targetClass" type class_ref 130818 // Class
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2951042 "applicable"
	  package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "getters" type class_ref 137858 // Method
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2951170 "fromCompositeData"
	  package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "cd" type class_ref 492802 // CompositeData
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "converters" type class_ref 490626 // MXBeanMapping
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 970242 // fromMethod (<unidirectional association>)
	  relation 970242 --->
	    a role_name "fromMethod" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 970242 // fromMethod (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end
      end

      class 493058 "CompositeBuilderCheckGetters"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 970370 // <generalisation>
	  relation 970370 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 970370 // <generalisation>
	    b parent class_ref 492674 // CompositeBuilder
	end

	operation 2951298 "CompositeBuilderCheckGetters"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "targetClass" type class_ref 130818 // Class
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "getterConverters" type class_ref 490626 // MXBeanMapping
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2951426 "applicable"
	  package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "getters" type class_ref 137858 // Method
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2951554 "possibleCause"
	  package return_type class_ref 129922 // Throwable
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2951682 "fromCompositeData"
	  package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "cd" type class_ref 492802 // CompositeData
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "converters" type class_ref 490626 // MXBeanMapping
	  multiplicity "[]"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 970498 // getterConverters (<unidirectional association>)
	  relation 970498 --->
	    a role_name "getterConverters" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 970498 // getterConverters (<unidirectional association>)
	    b parent class_ref 490626 // MXBeanMapping
	end

	classrelation 970626 // possibleCause (<unidirectional association>)
	  relation 970626 --->
	    a role_name "possibleCause" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 970626 // possibleCause (<unidirectional association>)
	    b parent class_ref 129922 // Throwable
	end
      end

      class 493186 "CompositeBuilderViaSetters"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 970754 // <generalisation>
	  relation 970754 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 970754 // <generalisation>
	    b parent class_ref 492674 // CompositeBuilder
	end

	operation 2951810 "CompositeBuilderViaSetters"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "targetClass" type class_ref 130818 // Class
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2951938 "applicable"
	  package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "getters" type class_ref 137858 // Method
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2952066 "fromCompositeData"
	  package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "cd" type class_ref 492802 // CompositeData
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "converters" type class_ref 490626 // MXBeanMapping
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 970882 // setters (<unidirectional association>)
	  relation 970882 --->
	    a role_name "setters" multiplicity "[]" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 970882 // setters (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end
      end

      class 493314 "CompositeBuilderViaConstructor"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 971010 // <generalisation>
	  relation 971010 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 971010 // <generalisation>
	    b parent class_ref 492674 // CompositeBuilder
	end

	class 493442 "AnnotationHelper"
	  visibility package 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 971138 // constructorPropertiesClass (<unidirectional association>)
	    relation 971138 --->
	      a role_name "constructorPropertiesClass" class_relation private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends Annotation> ${name}${value};
"
		classrelation_ref 971138 // constructorPropertiesClass (<unidirectional association>)
	      b parent class_ref 130818 // Class
	  end

	  classrelation 971266 // valueMethod (<unidirectional association>)
	    relation 971266 --->
	      a role_name "valueMethod" class_relation private
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 971266 // valueMethod (<unidirectional association>)
	      b parent class_ref 137858 // Method
	  end

	  extra_member 138498 "initialization"
	    
	    cpp "" ""
	    java "  static {
                findConstructorPropertiesClass();
            }"
	    php ""
	    python ""
	    idl ""
	    mysql ""
	  end

	  operation 2952194 "findConstructorPropertiesClass"
	    class_operation private explicit_return_type "void"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@SuppressWarnings(\"unchecked\")
"
	    
	    
	    
	  end

	  operation 2952322 "isAvailable"
	    class_operation package explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 2952450 "getPropertyNames"
	    class_operation package return_type class_ref 128130 // String
	    nparams 1
	      param inout name "constr" type class_ref 189186 // Constructor
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	operation 2952578 "CompositeBuilderViaConstructor"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "targetClass" type class_ref 130818 // Class
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2952706 "applicable"
	  package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "getters" type class_ref 137858 // Method
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2952834 "fromCompositeData"
	  package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "cd" type class_ref 492802 // CompositeData
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "mappings" type class_ref 490626 // MXBeanMapping
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 171650 // InvalidObjectException
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2952962 "subset"
	  class_operation private explicit_return_type "boolean"
	  nparams 2
	    param inout name "sub" type class_ref 238082 // BitSet
	    param inout name "sup" type class_ref 238082 // BitSet
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 493570 "Constr"
	  visibility private 
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 971394 // constructor (<unidirectional association>)
	    relation 971394 --->
	      a role_name "constructor" const_relation package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
		classrelation_ref 971394 // constructor (<unidirectional association>)
	      b parent class_ref 189186 // Constructor
	  end

	  attribute 620674 "paramIndexes"
	    const_attribute package explicit_type "int"
	    multiplicity "[]"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	  end

	  classrelation 971522 // presentParams (<unidirectional association>)
	    relation 971522 --->
	      a role_name "presentParams" const_relation package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 971522 // presentParams (<unidirectional association>)
	      b parent class_ref 238082 // BitSet
	  end

	  operation 2953090 "Constr"
	    package explicit_return_type ""
	    nparams 3
	      param inout name "constructor" type class_ref 189186 // Constructor
	      param inout name "paramIndexes" explicit_type "int"
	    multiplicity "[]"
	      param inout name "presentParams" type class_ref 238082 // BitSet
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 971650 // annotatedConstructors (<unidirectional association>)
	  relation 971650 --->
	    a role_name "annotatedConstructors" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Constr> ${name}${value};
"
	      classrelation_ref 971650 // annotatedConstructors (<unidirectional association>)
	    b parent class_ref 175362 // List
	end
      end

      class 493698 "CompositeBuilderViaProxy"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 971778 // <generalisation>
	  relation 971778 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 971778 // <generalisation>
	    b parent class_ref 492674 // CompositeBuilder
	end

	operation 2953218 "CompositeBuilderViaProxy"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "targetClass" type class_ref 130818 // Class
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2953346 "applicable"
	  package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "getters" type class_ref 137858 // Method
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2953474 "fromCompositeData"
	  package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "cd" type class_ref 492802 // CompositeData
	    param inout name "itemNames" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "converters" type class_ref 490626 // MXBeanMapping
	  multiplicity "[]"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 2953602 "invalidObjectException"
	class_operation package return_type class_ref 171650 // InvalidObjectException
	nparams 2
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2953730 "invalidObjectException"
	class_operation package return_type class_ref 171650 // InvalidObjectException
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2953858 "openDataException"
	class_operation package return_type class_ref 490498 // OpenDataException
	nparams 2
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2953986 "openDataException"
	class_operation package return_type class_ref 490498 // OpenDataException
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2954114 "mustBeComparable"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "collection" type class_ref 130818 // Class
	  param inout name "element" type class_ref 490114 // Type
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2954242 "decapitalize"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility method to take a string and convert it to normal Java variable
name capitalization.  This normally means converting the first
character from upper case to lower case, but in the (unusual) special
case when there is more than one character and both the first and
second characters are upper case, we leave it alone.
<p>
Thus \"FooBah\" becomes \"fooBah\" and \"X\" becomes \"x\", but \"URL\" stays
as \"URL\".

@param  name The string to be decapitalized.
@return  The decapitalized version of the string.
"
      end

      operation 2954370 "capitalize"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reverse operation for java.beans.Introspector.decapitalize.  For any s,
capitalize(decapitalize(s)).equals(s).  The reverse is not true:
e.g. capitalize(\"uRL\") produces \"URL\" which is unchanged by
decapitalize.
"
      end

      operation 2954498 "propertyName"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 971906 // inProgress (<unidirectional association>)
	relation 971906 --->
	  a role_name "inProgress" init_value " newIdentityHashMap()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Type, Type> ${name}${value};
"
	    classrelation_ref 971906 // inProgress (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end
    end

    class 490882 "MXBeanMappingFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Defines how types are mapped for a given MXBean or set of MXBeans.
An {@code MXBeanMappingFactory} can be specified either through the
{@link MXBeanMappingFactoryClass} annotation, or through the
{@link javax.management.JMX.MBeanOptions JMX.MBeanOptions} argument to a
{@link javax.management.StandardMBean StandardMBean} constructor or MXBean
proxy.</p>

<p>An {@code MXBeanMappingFactory} must return an {@code MXBeanMapping}
for any Java type that appears in the MXBeans that the factory is being
used for.  Usually it does that by handling any custom types, and
forwarding everything else to the {@linkplain #DEFAULT default mapping
factory}.</p>

<p>Consider the {@code MyLinkedList} example from the {@link MXBeanMapping}
documentation.  If we are unable to change the {@code MyLinkedList} class
to add an {@link MXBeanMappingClass} annotation, we could achieve the same
effect by defining {@code MyLinkedListMappingFactory} as follows:</p>

<pre>
public class MyLinkedListMappingFactory extends MXBeanMappingFactory {
    public MyLinkedListMappingFactory() {}

    public MXBeanMapping mappingForType(Type t, MXBeanMappingFactory f)
    throws OpenDataException {
        if (t == MyLinkedList.class)
            return new MyLinkedListMapping(t);
        else
            return MXBeanMappingFactory.DEFAULT.mappingForType(t, f);
    }
}
</pre>

<p>The mapping factory handles only the {@code MyLinkedList} class.
Every other type is forwarded to the default mapping factory.
This includes types such as {@code MyLinkedList[]} and
{@code List<MyLinkedList>}; the default mapping factory will recursively
invoke {@code MyLinkedListMappingFactory} to map the contained
{@code MyLinkedList} type.</p>

<p>Once we have defined {@code MyLinkedListMappingFactory}, we can use
it in an MXBean interface like this:</p>

<pre>
{@literal @MXBeanMappingFactoryClass}(MyLinkedListMappingFactory.class)
public interface SomethingMXBean {
    public MyLinkedList getSomething();
}
</pre>

<p>Alternatively we can annotate the package that {@code SomethingMXBean}
appears in, or we can supply the factory to a {@link
javax.management.StandardMBean StandardMBean} constructor or MXBean
proxy.</p>

@see <a href=\"../MXBean.html#custom\">MXBean specification, section
\"Custom MXBean type mappings\"</a>
"
      operation 2942978 "MXBeanMappingFactory"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Construct an instance of this class.</p>
"
      end

      classrelation 966274 // DEFAULT (<unidirectional association>)
	relation 966274 --->
	  a role_name "DEFAULT" init_value "
            new DefaultMXBeanMappingFactory()" class_relation const_relation public
	    comment "
<p>Mapping factory that applies the default rules for MXBean
mappings, as described in the <a
href=\"../MXBean.html#MXBean-spec\">MXBean specification</a>.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 966274 // DEFAULT (<unidirectional association>)
	  b parent class_ref 490882 // MXBeanMappingFactory
      end

      operation 2943106 "mappingForType"
	abstract public return_type class_ref 490626 // MXBeanMapping
	nparams 2
	  param inout name "t" type class_ref 490114 // Type
	  param inout name "f" type class_ref 490882 // MXBeanMappingFactory
	nexceptions 1
	  exception class_ref 490498 // OpenDataException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the mapping for the given Java type.  Typically, a
mapping factory will return mappings for types it handles, and
forward other types to another mapping factory, most often
the {@linkplain #DEFAULT default one}.</p>
@param t the Java type to be mapped.
@param f the original mapping factory that was consulted to do
the mapping.  A mapping factory should pass this parameter intact
if it forwards a type to another mapping factory.  In the example,
this is how {@code MyLinkedListMappingFactory} works for types
like {@code MyLinkedList[]} and {@code List<MyLinkedList>}.
@return the mapping for the given type.
@throws OpenDataException if this type cannot be mapped.  This
exception is appropriate if the factory is supposed to handle
all types of this sort (for example, all linked lists), but
cannot handle this particular type.
"
      end
    end

    class 493826 "DescriptorCache"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 2954626 "DescriptorCache"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2954754 "getInstance"
	class_operation package return_type class_ref 493826 // DescriptorCache
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2954882 "getInstance"
	class_operation public return_type class_ref 493826 // DescriptorCache
	nparams 1
	  param inout name "proof" type class_ref 493954 // JMX
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2955010 "get"
	public return_type class_ref 494082 // ImmutableDescriptor
	nparams 1
	  param inout name "descriptor" type class_ref 494082 // ImmutableDescriptor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2955138 "union"
	public return_type class_ref 494082 // ImmutableDescriptor
	nparams 1
	  param inout name "" explicit_type "Descriptor...descriptors"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 972034 // instance (<unidirectional association>)
	relation 972034 --->
	  a role_name "instance" init_value " new DescriptorCache()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 972034 // instance (<unidirectional association>)
	  b parent class_ref 493826 // DescriptorCache
      end

      classrelation 972162 // map (<unidirectional association>)
	relation 972162 --->
	  a role_name "map" init_value " new WeakHashMap<ImmutableDescriptor,
                              WeakReference<ImmutableDescriptor>>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ImmutableDescriptor,
                              WeakReference<ImmutableDescriptor>> ${name}${value};
"
	    classrelation_ref 972162 // map (<unidirectional association>)
	  b parent class_ref 192002 // WeakHashMap
      end
    end

    class 494210 "DynamicMBean2"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A dynamic MBean that wraps an underlying resource.  A version of this
interface might eventually appear in the public JMX API.

@since 1.6
"
      classrelation 972290 // <generalisation>
	relation 972290 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 972290 // <generalisation>
	  b parent class_ref 488450 // DynamicMBean
      end

      operation 2956034 "getResource"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The resource corresponding to this MBean.  This is the object whose
class name should be reflected by the MBean's
getMBeanInfo().getClassName() for example.  For a \"plain\"
DynamicMBean it will be \"this\".  For an MBean that wraps another
object, like javax.management.StandardMBean, it will be the wrapped
object.
"
      end

      operation 2956162 "getClassName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The name of this MBean's class, as used by permission checks.
This is typically equal to getResource().getClass().getName().
This method is typically faster, sometimes much faster,
than getMBeanInfo().getClassName(), but should return the same
result.
"
      end

      operation 2956290 "preRegister2"
	public explicit_return_type "void"
	nparams 2
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Additional registration hook.  This method is called after
{@link javax.management.MBeanRegistration#preRegister preRegister}.
Unlike that method, if it throws an exception and the MBean implements
{@code MBeanRegistration}, then {@link
javax.management.MBeanRegistration#postRegister postRegister(false)}
will be called on the MBean.  This is the behavior that the MBean
expects for a problem that does not come from its own preRegister
method.
"
      end

      operation 2956418 "registerFailed"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Additional registration hook.  This method is called if preRegister
and preRegister2 succeed, but then the MBean cannot be registered
(for example because there is already another MBean of the same name).
"
      end
    end

    class 494338 "GetPropertyAction"
      visibility public 
      nactuals 1
      actual class class_ref 250114 // PrivilegedAction
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class to be used by the method <tt>AccessControler.doPrivileged</tt>
to get a system property.

@since 1.5
"
      classrelation 972418 // <realization>
	relation 972418 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 972418 // <realization>
	  b parent class_ref 250114 // PrivilegedAction
      end

      classrelation 972546 // key (<unidirectional association>)
	relation 972546 --->
	  a role_name "key" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 972546 // key (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 2956546 "GetPropertyAction"
	public explicit_return_type ""
	nparams 1
	  param inout name "key" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2956674 "run"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 494466 "Introspector"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class contains the methods for performing all the tests needed to verify
that a class represents a JMX compliant MBean.

@since 1.5
"
      attribute 620802 "ALLOW_NONPUBLIC_MBEAN"
	class_attribute const_attribute public explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 138626 "initialization"
	
	cpp "" ""
	java "  static {
        String val = AccessController.doPrivileged(new GetPropertyAction(\"jdk.jmx.mbeans.allowNonPublic\"));
        ALLOW_NONPUBLIC_MBEAN = Boolean.parseBoolean(val);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 2956802 "Introspector"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------------------------
 PRIVATE CONSTRUCTORS
------------------------------------------

 private constructor defined to \"hide\" the default public constructor"
      end

      operation 2956930 "isDynamic"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------------------------
 PUBLIC METHODS
------------------------------------------


Tell whether a MBean of the given class is a Dynamic MBean.
This method does nothing more than returning
<pre>
javax.management.DynamicMBean.class.isAssignableFrom(c)
</pre>
This method does not check for any JMX MBean compliance:
<ul><li>If <code>true</code> is returned, then instances of
    <code>c</code> are DynamicMBean.</li>
    <li>If <code>false</code> is returned, then no further
    assumption can be made on instances of <code>c</code>.
    In particular, instances of <code>c</code> may, or may not
    be JMX standard MBeans.</li>
</ul>
@param c The class of the MBean under examination.
@return <code>true</code> if instances of <code>c</code> are
        Dynamic MBeans, <code>false</code> otherwise.

"
      end

      operation 2957058 "testCreation"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic method for testing that a MBean of a given class can be
instantiated by the MBean server.<p>
This method checks that:
<ul><li>The given class is a concrete class.</li>
    <li>The given class exposes at least one public constructor.</li>
</ul>
If these conditions are not met, throws a NotCompliantMBeanException.
@param c The class of the MBean we want to create.
@exception NotCompliantMBeanException if the MBean class makes it
           impossible to instantiate the MBean from within the
           MBeanServer.

"
      end

      operation 2957186 "checkCompliance"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "mbeanClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2957314 "makeDynamicMBean"
	class_operation public return_type class_ref 488450 // DynamicMBean
	nparams 1
	  param inout name "mbean" explicit_type "T"
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2957442 "testCompliance"
	class_operation public return_type class_ref 487426 // MBeanInfo
	nparams 1
	  param inout name "baseClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic method for testing if a given class is a JMX compliant MBean.

@param baseClass The class to be tested

@return <code>null</code> if the MBean is a DynamicMBean,
        the computed {@link javax.management.MBeanInfo} otherwise.
@exception NotCompliantMBeanException The specified class is not a
           JMX compliant MBean
"
      end

      operation 2957570 "testComplianceMXBeanInterface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "interfaceClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests the given interface class for being a compliant MXBean interface.
A compliant MXBean interface is any publicly accessible interface
following the {@link MXBean} conventions.
@param interfaceClass An interface class to test for the MXBean compliance
@throws NotCompliantMBeanException Thrown when the tested interface
is not public or contradicts the {@link MXBean} conventions.
"
      end

      operation 2957698 "testComplianceMBeanInterface"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "interfaceClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests the given interface class for being a compliant MBean interface.
A compliant MBean interface is any publicly accessible interface
following the {@code MBean} conventions.
@param interfaceClass An interface class to test for the MBean compliance
@throws NotCompliantMBeanException Thrown when the tested interface
is not public or contradicts the {@code MBean} conventions.
"
      end

      operation 2957826 "testCompliance"
	class_operation public return_type class_ref 487426 // MBeanInfo
	nparams 2
	  param in name "baseClass" type class_ref 130818 // Class
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Basic method for testing if a given class is a JMX compliant
Standard MBean.  This method is only called by the legacy code
in com.sun.management.jmx.

@param baseClass The class to be tested.

@param mbeanInterface the MBean interface that the class implements,
or null if the interface must be determined by introspection.

@return the computed {@link javax.management.MBeanInfo}.
@exception NotCompliantMBeanException The specified class is not a
           JMX compliant Standard MBean
"
      end

      operation 2957954 "getClassMBeanInfo"
	class_operation private return_type class_ref 487426 // MBeanInfo
	nparams 3
	  param inout name "introspector" type class_ref 494594 // MBeanIntrospector
	  param inout name "baseClass" type class_ref 130818 // Class
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<M> ${type} ${name}${(}${t0}<M> ${p0}, ${t1}<?> ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2958082 "getMBeanInterface"
	class_operation public return_type class_ref 130818 // Class
	nparams 1
	  param inout name "baseClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the MBean interface implemented by a JMX Standard
MBean class. This method is only called by the legacy
code in \"com.sun.management.jmx\".

@param baseClass The class to be tested.

@return The MBean interface implemented by the MBean.
        Return <code>null</code> if the MBean is a DynamicMBean,
        or if no MBean interface is found.
"
      end

      operation 2958210 "getStandardMBeanInterface"
	class_operation public return_type class_ref 130818 // Class
	nparams 1
	  param inout name "baseClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<? super T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the MBean interface implemented by a JMX Standard MBean class.

@param baseClass The class to be tested.

@return The MBean interface implemented by the Standard MBean.

@throws NotCompliantMBeanException The specified class is
not a JMX compliant Standard MBean.
"
      end

      operation 2958338 "getMXBeanInterface"
	class_operation public return_type class_ref 130818 // Class
	nparams 1
	  param inout name "baseClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<? super T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the MXBean interface implemented by a JMX MXBean class.

@param baseClass The class to be tested.

@return The MXBean interface implemented by the MXBean.

@throws NotCompliantMBeanException The specified class is
not a JMX compliant MXBean.
"
      end

      operation 2958466 "findMBeanInterface"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "aClass" type class_ref 130818 // Class
	  param inout name "aName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<? super T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "------------------------------------------
 PRIVATE METHODS
------------------------------------------


Try to find the MBean interface corresponding to the class aName
- i.e. <i>aName</i>MBean, from within aClass and its superclasses.
"
      end

      operation 2958594 "descriptorForElement"
	class_operation public return_type class_ref 489986 // Descriptor
	nparams 1
	  param in name "elmt" type class_ref 494722 // AnnotatedElement
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2958722 "descriptorForAnnotations"
	class_operation public return_type class_ref 489986 // Descriptor
	nparams 1
	  param inout name "annots" type class_ref 494850 // Annotation
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2958850 "throwException"
	class_operation package return_type class_ref 486146 // NotCompliantMBeanException
	nparams 2
	  param inout name "notCompliant" type class_ref 130818 // Class
	  param inout name "cause" type class_ref 129922 // Throwable
	nexceptions 2
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws a NotCompliantMBeanException or a SecurityException.
@param notCompliant the class which was under examination
@param cause the raeson why NotCompliantMBeanException should
       be thrown.
@return nothing - this method always throw an exception.
        The return type makes it possible to write
        <pre> throw throwException(clazz,cause); </pre>
@throws SecurityException - if cause is a SecurityException
@throws NotCompliantMBeanException otherwise.
"
      end

      operation 2958978 "annotationToField"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert a value from an annotation element to a descriptor field value
 E.g. with @interface Foo {class value()} an annotation @Foo(String.class)
 will produce a Descriptor field value \"java.lang.String\""
      end

      operation 2959106 "equals"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "x" type class_ref 129538 // Object
	  param inout name "y" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " This must be consistent with the check for duplicate field values in
 ImmutableDescriptor.union.  But we don't expect to be called very
 often so this inefficient check should be enough."
      end

      operation 2959234 "implementsMBean"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "c" type class_ref 130818 // Class
	  param inout name "clName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<? super T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the XXMBean interface or null if no such interface exists

@param c The interface to be tested
@param clName The name of the class implementing this interface
"
      end

      operation 2959362 "elementFromComplex"
	class_operation public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "complex" type class_ref 129538 // Object
	  param inout name "element" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 486530 // AttributeNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 494978 "SimpleIntrospector"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 2959490 "SimpleIntrospector"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 972674 // GET_METHOD_PREFIX (<unidirectional association>)
	  relation 972674 --->
	    a role_name "GET_METHOD_PREFIX" init_value " \"get\"" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 972674 // GET_METHOD_PREFIX (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 972802 // IS_METHOD_PREFIX (<unidirectional association>)
	  relation 972802 --->
	    a role_name "IS_METHOD_PREFIX" init_value " \"is\"" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 972802 // IS_METHOD_PREFIX (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 972930 // cache (<unidirectional association>)
	  relation 972930 --->
	    a role_name "cache" init_value "
            Collections.synchronizedMap(
                new WeakHashMap<Class<?>,SoftReference<List<Method>>> ())" class_relation const_relation private
	      comment " cache to avoid repeated lookups
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>,SoftReference<List<Method>>> ${name}${value};
"
	      classrelation_ref 972930 // cache (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	operation 2959618 "getCachedMethods"
	  class_operation private return_type class_ref 175362 // List
	  nparams 1
	    param inout name "clazz" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the list of methods cached for the given class, or {@code null}
if not cached.
"
	end

	operation 2959746 "isReadMethod"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param inout name "method" type class_ref 137858 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns {@code true} if the given method is a \"getter\" method (where
\"getter\" method is a public method of the form getXXX or \"boolean
isXXX\")
"
	end

	operation 2959874 "getReadMethods"
	  class_operation package return_type class_ref 175362 // List
	  nparams 1
	    param inout name "clazz" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the list of \"getter\" methods for the given class. The list
is ordered so that isXXX methods appear before getXXX methods - this
is for compatibility with the JavaBeans Introspector.
"
	end

	operation 2960002 "getReadMethod"
	  class_operation package return_type class_ref 137858 // Method
	  nparams 2
	    param inout name "clazz" type class_ref 130818 // Class
	    param inout name "property" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the \"getter\" to read the given property from the given class or
{@code null} if no method is found.
"
	end
      end

      class 495106 "BeansHelper"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 973058 // introspectorClass (<unidirectional association>)
	  relation 973058 --->
	    a role_name "introspectorClass" init_value "
            getClass(\"java.beans.Introspector\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 973058 // introspectorClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 973186 // beanInfoClass (<unidirectional association>)
	  relation 973186 --->
	    a role_name "beanInfoClass" init_value "
            (introspectorClass == null) ? null : getClass(\"java.beans.BeanInfo\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 973186 // beanInfoClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 973314 // getPropertyDescriptorClass (<unidirectional association>)
	  relation 973314 --->
	    a role_name "getPropertyDescriptorClass" init_value "
            (beanInfoClass == null) ? null : getClass(\"java.beans.PropertyDescriptor\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 973314 // getPropertyDescriptorClass (<unidirectional association>)
	    b parent class_ref 130818 // Class
	end

	classrelation 973442 // getBeanInfo (<unidirectional association>)
	  relation 973442 --->
	    a role_name "getBeanInfo" init_value "
            getMethod(introspectorClass, \"getBeanInfo\", Class.class)" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 973442 // getBeanInfo (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end

	classrelation 973570 // getPropertyDescriptors (<unidirectional association>)
	  relation 973570 --->
	    a role_name "getPropertyDescriptors" init_value "
            getMethod(beanInfoClass, \"getPropertyDescriptors\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 973570 // getPropertyDescriptors (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end

	classrelation 973698 // getPropertyName (<unidirectional association>)
	  relation 973698 --->
	    a role_name "getPropertyName" init_value "
            getMethod(getPropertyDescriptorClass, \"getName\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 973698 // getPropertyName (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end

	classrelation 973826 // getReadMethod (<unidirectional association>)
	  relation 973826 --->
	    a role_name "getReadMethod" init_value "
            getMethod(getPropertyDescriptorClass, \"getReadMethod\")" class_relation const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 973826 // getReadMethod (<unidirectional association>)
	    b parent class_ref 137858 // Method
	end

	operation 2960130 "getClass"
	  class_operation private return_type class_ref 130818 // Class
	  nparams 1
	    param inout name "name" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2960258 "getMethod"
	  class_operation private return_type class_ref 137858 // Method
	  nparams 3
	    param inout name "clazz" type class_ref 130818 // Class
	    param inout name "name" type class_ref 128130 // String
	    param inout name "paramTypes" explicit_type "Class<?>..."
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2960386 "BeansHelper"
	  private explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2960514 "isAvailable"
	  class_operation package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns {@code true} if java.beans is available.
"
	end

	operation 2960642 "getBeanInfo"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "clazz" type class_ref 130818 // Class
	  nexceptions 1
	    exception class_ref 132226 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes java.beans.Introspector.getBeanInfo(Class)
"
	end

	operation 2960770 "getPropertyDescriptors"
	  class_operation package return_type class_ref 129538 // Object
	  nparams 1
	    param inout name "bi" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes java.beans.BeanInfo.getPropertyDescriptors()
"
	end

	operation 2960898 "getPropertyName"
	  class_operation package return_type class_ref 128130 // String
	  nparams 1
	    param inout name "pd" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes java.beans.PropertyDescriptor.getName()
"
	end

	operation 2961026 "getReadMethod"
	  class_operation package return_type class_ref 137858 // Method
	  nparams 1
	    param inout name "pd" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes java.beans.PropertyDescriptor.getReadMethod()
"
	end
      end
    end

    class 494594 "MBeanIntrospector"
      abstract visibility package 
      nformals 1
      formal name "M" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An introspector for MBeans of a certain type.  There is one instance
of this class for Standard MBeans, and one for every MXBeanMappingFactory;
these two cases correspond to the two concrete subclasses of this abstract
class.

@param <M> the representation of methods for this kind of MBean:
Method for Standard MBeans, ConvertingMethod for MXBeans.

@since 1.6


Using a type parameter <M> allows us to deal with the fact that
Method and ConvertingMethod have no useful common ancestor, on
which we could call getName, getGenericReturnType, etc.  A simpler approach
would be to wrap every Method in an object that does have a common
ancestor with ConvertingMethod.  But that would mean an extra object
for every Method in every Standard MBean interface.
"
      class 496386 "PerInterfaceMap"
	visibility package 
	nformals 1
	formal name "M" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 192002 // WeakHashMap
	  rank 0 explicit_value ""
	actual class class_ref 192002 // WeakHashMap
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 975746 // <realization>
	  relation 975746 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 975746 // <realization>
	    b parent class_ref 192002 // WeakHashMap
	end
      end

      operation 2973058 "getPerInterfaceMap"
	abstract cpp_inline package return_type class_ref 496386 // PerInterfaceMap
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<M> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The map from interface to PerInterface for this type of MBean. "
      end

      class 496514 "MBeanInfoMap"
	visibility package 
	nactuals 2
	actual class class_ref 192002 // WeakHashMap
	  rank 0 explicit_value ""
	actual class class_ref 192002 // WeakHashMap
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 976258 // <realization>
	  relation 976258 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 976258 // <realization>
	    b parent class_ref 192002 // WeakHashMap
	end
      end

      operation 2973186 "getMBeanInfoMap"
	abstract cpp_inline package return_type class_ref 496514 // MBeanInfoMap
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The map from concrete implementation class and interface to
MBeanInfo for this type of MBean.
"
      end

      operation 2973314 "getAnalyzer"
	abstract cpp_inline package return_type class_ref 495874 // MBeanAnalyzer
	nparams 1
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<M> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Make an interface analyzer for this type of MBean. "
      end

      operation 2973442 "isMXBean"
	abstract cpp_inline package explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " True if MBeans with this kind of introspector are MXBeans. "
      end

      operation 2973570 "mFrom"
	abstract cpp_inline package explicit_return_type "M"
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Find the M corresponding to the given Method. "
      end

      operation 2973698 "getName"
	abstract cpp_inline package return_type class_ref 128130 // String
	nparams 1
	  param inout name "m" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Get the name of this method. "
      end

      operation 2973826 "getGenericReturnType"
	abstract cpp_inline package return_type class_ref 490114 // Type
	nparams 1
	  param inout name "m" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the return type of this method.  This is the return type
of a method in a Java interface, so for MXBeans it is the
declared Java type, not the mapped Open Type.
"
      end

      operation 2973954 "getGenericParameterTypes"
	abstract cpp_inline package return_type class_ref 490114 // Type
	nparams 1
	  param inout name "m" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the parameter types of this method in the Java interface
it came from.
"
      end

      operation 2974082 "getSignature"
	abstract cpp_inline package return_type class_ref 128130 // String
	nparams 1
	  param inout name "m" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the signature of this method as a caller would have to supply
it in MBeanServer.invoke.  For MXBeans, the named types will be
the mapped Open Types for the parameters.
"
      end

      operation 2974210 "checkMethod"
	abstract cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "m" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check that this method is valid.  For example, a method in an
MXBean interface is not valid if one of its parameters cannot be
mapped to an Open Type.
"
      end

      operation 2974338 "invokeM2"
	abstract cpp_inline package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "m" explicit_type "M"
	  param inout name "target" type class_ref 129538 // Object
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 193410 // InvocationTargetException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 486018 // MBeanException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke the method with the given target and arguments.

@param cookie Additional information about the target.  For an
MXBean, this is the MXBeanLookup associated with the MXBean.


It would be cleaner if the type of the cookie were a
type parameter to this class, but that would involve a lot of
messy type parameter propagation just to avoid a couple of casts.
"
      end

      operation 2974466 "validParameter"
	abstract cpp_inline package explicit_return_type "boolean"
	nparams 4
	  param inout name "m" explicit_type "M"
	  param inout name "value" type class_ref 129538 // Object
	  param in name "paramNo" explicit_type "int"
	  param inout name "cookie" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test whether the given value is valid for the given parameter of this
M.
"
      end

      operation 2974594 "getMBeanAttributeInfo"
	abstract cpp_inline package return_type class_ref 496642 // MBeanAttributeInfo
	nparams 3
	  param inout name "attributeName" type class_ref 128130 // String
	  param inout name "getter" explicit_type "M"
	  param inout name "setter" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an MBeanAttributeInfo for the given attribute based on the
given getter and setter.  One but not both of the getter and setter
may be null.
"
      end

      operation 2974722 "getMBeanOperationInfo"
	abstract cpp_inline package return_type class_ref 496770 // MBeanOperationInfo
	nparams 2
	  param inout name "operationName" type class_ref 128130 // String
	  param inout name "operation" explicit_type "M"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an MBeanOperationInfo for the given operation based on
the M it was derived from.
"
      end

      operation 2974850 "getBasicMBeanDescriptor"
	abstract cpp_inline package return_type class_ref 489986 // Descriptor
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a Descriptor containing fields that MBeans of this kind will
always have.  For example, MXBeans will always have \"mxbean=true\".
"
      end

      operation 2974978 "getMBeanDescriptor"
	abstract cpp_inline package return_type class_ref 489986 // Descriptor
	nparams 1
	  param inout name "resourceClass" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get a Descriptor containing additional fields beyond the ones
from getBasicMBeanDescriptor that MBeans whose concrete class
is resourceClass will always have.
"
      end

      operation 2975106 "getMethods"
	cpp_inline package return_type class_ref 175362 // List
	nparams 1
	  param in name "mbeanType" type class_ref 130818 // Class
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method> ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the methods to be analyzed to build the MBean interface.
"
      end

      operation 2975234 "getPerInterface"
	cpp_inline package return_type class_ref 496898 // PerInterface
	nparams 1
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<M> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2975362 "makeInterfaceMBeanInfo"
	cpp_inline private return_type class_ref 487426 // MBeanInfo
	nparams 2
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "analyzer" type class_ref 495874 // MBeanAnalyzer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<M> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make the MBeanInfo skeleton for the given MBean interface using
the given analyzer.  This will never be the MBeanInfo of any real
MBean (because the getClassName() must be a concrete class), but
its MBeanAttributeInfo[] and MBeanOperationInfo[] can be inserted
into such an MBeanInfo, and its Descriptor can be the basis for
the MBeanInfo's Descriptor.
"
      end

      operation 2975490 "consistent"
	cpp_inline package explicit_return_type "boolean"
	nparams 2
	  param inout name "getter" explicit_type "M"
	  param inout name "setter" explicit_type "M"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " True if the given getter and setter are consistent. "
      end

      operation 2975618 "invokeM"
	cpp_inline package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "m" explicit_type "M"
	  param inout name "target" type class_ref 129538 // Object
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke the given M on the given target with the given args and cookie.
Wrap exceptions appropriately.
"
      end

      operation 2975746 "invokeSetter"
	cpp_inline package explicit_return_type "void"
	nparams 5
	  param inout name "name" type class_ref 128130 // String
	  param inout name "setter" explicit_type "M"
	  param inout name "target" type class_ref 129538 // Object
	  param inout name "arg" type class_ref 129538 // Object
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486914 // InvalidAttributeValueException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke the given setter on the given target with the given argument
and cookie.  Wrap exceptions appropriately.

 If the value is of the wrong type for the method we are about to
invoke, we are supposed to throw an InvalidAttributeValueException.
Rather than making the check always, we invoke the method, then
if it throws an exception we check the type to see if that was
what caused the exception.  The assumption is that an exception
from an invalid type will arise before any user method is ever
called (either in reflection or in OpenConverter).
"
      end

      operation 2975874 "maybeInvalidParameter"
	cpp_inline private explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param inout name "setter" explicit_type "M"
	  param inout name "arg" type class_ref 129538 // Object
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 486914 // InvalidAttributeValueException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2976002 "isValidParameter"
	class_operation cpp_inline package explicit_return_type "boolean"
	nparams 3
	  param inout name "m" type class_ref 137858 // Method
	  param inout name "value" type class_ref 129538 // Object
	  param in name "paramNo" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2976130 "unwrapInvocationTargetException"
	class_operation cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 193410 // InvocationTargetException
	nexceptions 1
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 497026 "MBeanInfoMaker"
	visibility private 
	nactuals 2
	actual class class_ref 495874 // MBeanAnalyzer
	  rank 0 explicit_value ""
	actual class class_ref 496002 // MBeanVisitor
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 975874 // <realization>
	  relation 975874 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 975874 // <realization>
	    b parent class_ref 496002 // MBeanVisitor
	end

	operation 2976258 "visitAttribute"
	  cpp_inline public explicit_return_type "void"
	  nparams 3
	    param inout name "attributeName" type class_ref 128130 // String
	    param inout name "getter" explicit_type "M"
	    param inout name "setter" explicit_type "M"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2976386 "visitOperation"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "operationName" type class_ref 128130 // String
	    param inout name "operation" explicit_type "M"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2976514 "makeMBeanInfo"
	  cpp_inline package return_type class_ref 487426 // MBeanInfo
	  nparams 2
	    param inout name "mbeanInterface" type class_ref 130818 // Class
	    param inout name "description" type class_ref 128130 // String
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Make an MBeanInfo based on the attributes and operations
 found in the interface. "
	end

	classrelation 976002 // attrs (<unidirectional association>)
	  relation 976002 --->
	    a role_name "attrs" init_value " newList()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MBeanAttributeInfo> ${name}${value};
"
	      classrelation_ref 976002 // attrs (<unidirectional association>)
	    b parent class_ref 175362 // List
	end

	classrelation 976130 // ops (<unidirectional association>)
	  relation 976130 --->
	    a role_name "ops" init_value " newList()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<MBeanOperationInfo> ${name}${value};
"
	      classrelation_ref 976130 // ops (<unidirectional association>)
	    b parent class_ref 175362 // List
	end
      end

      operation 2976642 "getMBeanInfo"
	cpp_inline package return_type class_ref 487426 // MBeanInfo
	nparams 2
	  param inout name "resource" type class_ref 129538 // Object
	  param inout name "perInterface" type class_ref 496898 // PerInterface
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<M> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the MBeanInfo for the given resource, based on the given
per-interface data.
"
      end

      operation 2976770 "getClassMBeanInfo"
	cpp_inline package return_type class_ref 487426 // MBeanInfo
	nparams 2
	  param inout name "resourceClass" type class_ref 130818 // Class
	  param inout name "perInterface" type class_ref 496898 // PerInterface
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<M> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the basic MBeanInfo for resources of the given class and
per-interface data.  This MBeanInfo might not be the final MBeanInfo
for instances of the class, because if the class is a
NotificationBroadcaster then each instance gets to decide what
MBeanNotificationInfo[] to put in its own MBeanInfo.
"
      end

      operation 2976898 "findNotifications"
	class_operation cpp_inline package return_type class_ref 497154 // MBeanNotificationInfo
	nparams 1
	  param inout name "moi" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2977026 "findConstructors"
	class_operation cpp_inline private return_type class_ref 497282 // MBeanConstructorInfo
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 495234 "JmxMBeanServer"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This is the base class for MBean manipulation on the agent side. It
contains the methods necessary for the creation, registration, and
deletion of MBeans as well as the access methods for registered MBeans.
This is the core component of the JMX infrastructure.
<P>
Every MBean which is added to the MBean server becomes manageable:
its attributes and operations become remotely accessible through
the connectors/adaptors connected to that MBean server.
A Java object cannot be registered in the MBean server unless it is a
JMX compliant MBean.
<P>
When an MBean is registered or unregistered in the MBean server an
{@link javax.management.MBeanServerNotification MBeanServerNotification}
Notification is emitted. To register an object as listener to
MBeanServerNotifications you should call the MBean server method
{@link #addNotificationListener addNotificationListener} with
the <CODE>ObjectName</CODE> of the
{@link javax.management.MBeanServerDelegate MBeanServerDelegate}.
This <CODE>ObjectName</CODE> is:
<BR>
<CODE>JMImplementation:type=MBeanServerDelegate</CODE>.

@since 1.5
"
      classrelation 974082 // <realization>
	relation 974082 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 974082 // <realization>
	  b parent class_ref 495362 // SunJmxMBeanServer
      end

      attribute 620930 "DEFAULT_FAIR_LOCK_POLICY"
	class_attribute const_attribute public explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Control the default locking policy of the repository.
 By default, we will be using a fair locking policy.

"
      end

      classrelation 974210 // instantiator (<unidirectional association>)
	relation 974210 --->
	  a role_name "instantiator" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 974210 // instantiator (<unidirectional association>)
	  b parent class_ref 487938 // MBeanInstantiator
      end

      classrelation 974338 // secureClr (<unidirectional association>)
	relation 974338 --->
	  a role_name "secureClr" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 974338 // secureClr (<unidirectional association>)
	  b parent class_ref 495490 // SecureClassLoaderRepository
      end

      attribute 621058 "interceptorsEnabled"
	const_attribute private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if interceptors are enabled *
"
      end

      classrelation 974466 // outerShell (<unidirectional association>)
	relation 974466 --->
	  a role_name "outerShell" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 974466 // outerShell (<unidirectional association>)
	  b parent class_ref 485122 // MBeanServer
      end

      classrelation 974594 // mbsInterceptor (<unidirectional association>)
	relation 974594 --->
	  a role_name "mbsInterceptor" init_value " null" volatile private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 974594 // mbsInterceptor (<unidirectional association>)
	  b parent class_ref 485122 // MBeanServer
      end

      classrelation 974722 // mBeanServerDelegateObject (<unidirectional association>)
	relation 974722 --->
	  a role_name "mBeanServerDelegateObject" const_relation private
	    comment " The MBeanServerDelegate object representing the MBean Server 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 974722 // mBeanServerDelegateObject (<unidirectional association>)
	  b parent class_ref 488066 // MBeanServerDelegate
      end

      operation 2961794 "JmxMBeanServer"
	package explicit_return_type ""
	nparams 3
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "outer" type class_ref 485122 // MBeanServer
	  param inout name "delegate" type class_ref 488066 // MBeanServerDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<b>Package:</b> Creates an MBeanServer with the
specified default domain name, outer interface, and delegate.
<p>The default domain name is used as the domain part in the ObjectName
of MBeans if no domain is specified by the user.
<ul><b>Note:</b>Using this constructor directly is strongly
    discouraged. You should use
    {@link javax.management.MBeanServerFactory#createMBeanServer(java.lang.String)}
    or
    {@link javax.management.MBeanServerFactory#newMBeanServer(java.lang.String)}
    instead.
    <p>
    By default, interceptors are disabled. Use
    {@link #JmxMBeanServer(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,boolean)} to enable them.
</ul>
@param domain The default domain name used by this MBeanServer.
@param outer A pointer to the MBeanServer object that must be
       passed to the MBeans when invoking their
       {@link javax.management.MBeanRegistration} interface.
@param delegate A pointer to the MBeanServerDelegate associated
       with the new MBeanServer. The new MBeanServer must register
       this MBean in its MBean repository.
@exception IllegalArgumentException if the instantiator is null.
"
      end

      operation 2961922 "JmxMBeanServer"
	package explicit_return_type ""
	nparams 4
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "outer" type class_ref 485122 // MBeanServer
	  param inout name "delegate" type class_ref 488066 // MBeanServerDelegate
	  param inout name "interceptors" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<b>Package:</b> Creates an MBeanServer with the
specified default domain name, outer interface, and delegate.
<p>The default domain name is used as the domain part in the ObjectName
of MBeans if no domain is specified by the user.
<ul><b>Note:</b>Using this constructor directly is strongly
    discouraged. You should use
    {@link javax.management.MBeanServerFactory#createMBeanServer(java.lang.String)}
    or
    {@link javax.management.MBeanServerFactory#newMBeanServer(java.lang.String)}
    instead.
</ul>
@param domain The default domain name used by this MBeanServer.
@param outer A pointer to the MBeanServer object that must be
       passed to the MBeans when invoking their
       {@link javax.management.MBeanRegistration} interface.
@param delegate A pointer to the MBeanServerDelegate associated
       with the new MBeanServer. The new MBeanServer must register
       this MBean in its MBean repository.
@param interceptors If <code>true</code>,
       {@link MBeanServerInterceptor} will be enabled (default is
       <code>false</code>)
       Note: this parameter is not taken into account by this
       implementation - the default value <code>false</code> is
       always used.
@exception IllegalArgumentException if the instantiator is null.
"
      end

      operation 2962050 "JmxMBeanServer"
	package explicit_return_type ""
	nparams 5
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "outer" type class_ref 485122 // MBeanServer
	  param inout name "delegate" type class_ref 488066 // MBeanServerDelegate
	  param inout name "instantiator" type class_ref 487938 // MBeanInstantiator
	  param inout name "interceptors" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<b>Package:</b> Creates an MBeanServer.
@param domain The default domain name used by this MBeanServer.
@param outer A pointer to the MBeanServer object that must be
       passed to the MBeans when invoking their
       {@link javax.management.MBeanRegistration} interface.
@param delegate A pointer to the MBeanServerDelegate associated
       with the new MBeanServer. The new MBeanServer must register
       this MBean in its MBean repository.
@param instantiator The MBeanInstantiator that will be used to
       instantiate MBeans and take care of class loading issues.
@param metadata The MetaData object that will be used by the
       MBean server in order to invoke the MBean interface of
       the registered MBeans.
@param interceptors If <code>true</code>,
       {@link MBeanServerInterceptor} will be enabled (default is
       <code>false</code>).
"
      end

      operation 2962178 "JmxMBeanServer"
	package explicit_return_type ""
	nparams 6
	  param inout name "domain" type class_ref 128130 // String
	  param inout name "outer" type class_ref 485122 // MBeanServer
	  param inout name "delegate" type class_ref 488066 // MBeanServerDelegate
	  param inout name "instantiator" type class_ref 487938 // MBeanInstantiator
	  param inout name "interceptors" explicit_type "boolean"
	  param inout name "fairLock" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<b>Package:</b> Creates an MBeanServer.
@param domain The default domain name used by this MBeanServer.
@param outer A pointer to the MBeanServer object that must be
       passed to the MBeans when invoking their
       {@link javax.management.MBeanRegistration} interface.
@param delegate A pointer to the MBeanServerDelegate associated
       with the new MBeanServer. The new MBeanServer must register
       this MBean in its MBean repository.
@param instantiator The MBeanInstantiator that will be used to
       instantiate MBeans and take care of class loading issues.
@param metadata The MetaData object that will be used by the
       MBean server in order to invoke the MBean interface of
       the registered MBeans.
@param interceptors If <code>true</code>,
       {@link MBeanServerInterceptor} will be enabled (default is
       <code>false</code>).
@param fairLock If {@code true}, the MBean repository will use a {@link
       java.util.concurrent.locks.ReentrantReadWriteLock#ReentrantReadWriteLock(boolean)
       fair locking} policy.
"
      end

      operation 2962306 "interceptorsEnabled"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether {@link MBeanServerInterceptor}s are enabled on this
object.
@return <code>true</code> if {@link MBeanServerInterceptor}s are
        enabled.
@see #newMBeanServer(java.lang.String,javax.management.MBeanServer,javax.management.MBeanServerDelegate,boolean)
"
      end

      operation 2962434 "getMBeanInstantiator"
	public return_type class_ref 487938 // MBeanInstantiator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the MBeanInstantiator associated to this MBeanServer.
@exception UnsupportedOperationException if
           {@link MBeanServerInterceptor}s
           are not enabled on this object.
@see #interceptorsEnabled
"
      end

      operation 2962562 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 5
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates and registers an MBean in the MBean server.
The MBean server will use its
{@link javax.management.loading.ClassLoaderRepository Default Loader Repository}
to load the class of the MBean.
An object name is associated to the MBean.
If the object name given is null, the MBean can automatically
provide its own name by implementing the
{@link javax.management.MBeanRegistration MBeanRegistration} interface.
The call returns an <CODE>ObjectInstance</CODE> object representing
the newly created MBean.

@param className The class name of the MBean to be instantiated.
@param name The object name of the MBean. May be null.

@return  An <CODE>ObjectInstance</CODE>, containing the
    <CODE>ObjectName</CODE> and the Java class name of the newly
    instantiated MBean.

@exception ReflectionException Wraps an
    <CODE>{@link java.lang.ClassNotFoundException}</CODE> or an
    <CODE>{@link java.lang.Exception}</CODE> that occurred
    when trying to invoke the MBean's constructor.
@exception InstanceAlreadyExistsException The MBean is already
    under the control of the MBean server.
@exception MBeanRegistrationException The <CODE>preRegister()</CODE>
    (<CODE>MBeanRegistration</CODE> interface) method of the MBean
    has thrown an exception. The MBean will not be registered.
@exception MBeanException The constructor of the MBean has thrown
    an exception.
@exception NotCompliantMBeanException This class is not a JMX
    compliant MBean.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
    The className passed in parameter is null, the
    <CODE>ObjectName</CODE> passed in parameter contains a pattern
    or no <CODE>ObjectName</CODE> is specified for the MBean.

"
      end

      operation 2962690 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	nexceptions 6
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates and registers an MBean in the MBean server.
The class loader to be used is identified by its object  name.
An object name is associated to the MBean.
If the object name  of the loader is null, the ClassLoader that
loaded the MBean server will be used.
If the MBean's object name given is null, the MBean can
automatically provide its own name by implementing the
{@link javax.management.MBeanRegistration MBeanRegistration} interface.
The call returns an <CODE>ObjectInstance</CODE> object representing
the newly created MBean.

@param className The class name of the MBean to be instantiated.
@param name The object name of the MBean. May be null.
@param loaderName The object name of the class loader to be used.

@return  An <CODE>ObjectInstance</CODE>, containing the
    <CODE>ObjectName</CODE> and the Java class name
    of the newly instantiated MBean.

@exception ReflectionException  Wraps an
    <CODE>{@link java.lang.ClassNotFoundException}</CODE> or an
    <CODE>{@link java.lang.Exception}</CODE> that occurred when trying
    to invoke the MBean's constructor.
@exception InstanceAlreadyExistsException The MBean is already
    under the control of the MBean server.
@exception MBeanRegistrationException The <CODE>preRegister()</CODE>
    (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
    has thrown an exception. The MBean will not be registered.
@exception MBeanException The constructor of the MBean has thrown
    an exception
@exception NotCompliantMBeanException This class is not a JMX
    compliant MBean.
@exception InstanceNotFoundException The specified class loader
    is not registered in the MBean server.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
    className passed in parameter is null, the <CODE>ObjectName</CODE>
    passed in parameter contains a pattern or no
    <CODE>ObjectName</CODE> is specified for the MBean.
"
      end

      operation 2962818 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 5
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates and registers an MBean in the MBean server.
The MBean server will use its
{@link javax.management.loading.ClassLoaderRepository Default Loader Repository}
to load the class of the MBean.
An object name is associated to the MBean.
If the object name given is null, the MBean can automatically
provide its own name by implementing the
{@link javax.management.MBeanRegistration MBeanRegistration} interface.
The call returns an <CODE>ObjectInstance</CODE> object representing
the newly created MBean.

@param className The class name of the MBean to be instantiated.
@param name The object name of the MBean. May be null.
@param params An array containing the parameters of the constructor
    to be invoked.
@param signature An array containing the signature of the
    constructor to be invoked.

@return  An <CODE>ObjectInstance</CODE>, containing the
    <CODE>ObjectName</CODE> and the Java class name
    of the newly instantiated MBean.

@exception ReflectionException Wraps a
    <CODE>{@link java.lang.ClassNotFoundException}</CODE> or an
    <CODE>{@link java.lang.Exception}</CODE> that occurred
    when trying to invoke the MBean's constructor.
@exception InstanceAlreadyExistsException The MBean is already
    under the control of the MBean server.
@exception MBeanRegistrationException The <CODE>preRegister()</CODE>
    (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
    has thrown an exception. The MBean will not be registered.
@exception MBeanException The constructor of the MBean has
    thrown an exception.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
    className passed in parameter is null, the <CODE>ObjectName</CODE>
    passed in parameter contains a pattern or no
    <CODE>ObjectName</CODE> is specified for the MBean.

"
      end

      operation 2962946 "createMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 5
	  param inout name "className" type class_ref 128130 // String
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 6
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486146 // NotCompliantMBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates and registers an MBean in the MBean server.
The class loader to be used is identified by its object name.
An object name is associated to the MBean. If the object name
of the loader is not specified, the ClassLoader that loaded the
MBean server will be used.
If  the MBean object name given is null, the MBean can automatically
provide its own name by implementing the
{@link javax.management.MBeanRegistration MBeanRegistration} interface.
The call returns an <CODE>ObjectInstance</CODE> object representing
the newly created MBean.

@param className The class name of the MBean to be instantiated.
@param name The object name of the MBean. May be null.
@param params An array containing the parameters of the constructor
     to be invoked.
@param signature An array containing the signature of the
    constructor to be invoked.
@param loaderName The object name of the class loader to be used.

@return  An <CODE>ObjectInstance</CODE>, containing the
    <CODE>ObjectName</CODE> and the Java class name of the newly
    instantiated MBean.

@exception ReflectionException Wraps a
    <CODE>{@link java.lang.ClassNotFoundException}</CODE> or an
    <CODE>{@link java.lang.Exception}</CODE>
    that occurred when trying to invoke the MBean's constructor.
@exception InstanceAlreadyExistsException The MBean is already
    under the control of the MBean server.
@exception MBeanRegistrationException The <CODE>preRegister()</CODE>
    (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
    has thrown an exception. The MBean will not be registered.
@exception MBeanException The constructor of the MBean has
     thrown an exception
@exception InstanceNotFoundException The specified class loader is
     not registered in the MBean server.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
    className passed in parameter is null, the <CODE>ObjectName</CODE>
    passed in parameter contains a pattern or no
    <CODE>ObjectName</CODE> is specified for the MBean.

"
      end

      operation 2963074 "registerMBean"
	public return_type class_ref 485378 // ObjectInstance
	nparams 2
	  param inout name "object" type class_ref 129538 // Object
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 3
	  exception class_ref 485762 // InstanceAlreadyExistsException
	  exception class_ref 485890 // MBeanRegistrationException
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers a pre-existing object as an MBean with the MBean server.
If the object name given is null, the MBean may automatically
provide its own name by implementing the
{@link javax.management.MBeanRegistration MBeanRegistration}  interface.
The call returns an <CODE>ObjectInstance</CODE> object representing
the registered MBean.

@param object The  MBean to be registered as an MBean.
@param name The object name of the MBean. May be null.

@return The <CODE>ObjectInstance</CODE> for the MBean that has been
     registered.

@exception InstanceAlreadyExistsException The MBean is already
     under the control of the MBean server.
@exception MBeanRegistrationException The <CODE>preRegister()</CODE>
     (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
     has thrown an exception. The MBean will not be registered.
@exception NotCompliantMBeanException This object is not a JMX
     compliant MBean
@exception RuntimeOperationsException Wraps an
     <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
     object passed in parameter is null or no object name is specified.

"
      end

      operation 2963202 "unregisterMBean"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485890 // MBeanRegistrationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "De-registers an MBean from the MBean server. The MBean is identified by
its object name. Once the method has been invoked, the MBean may
no longer be accessed by its object name.

@param name The object name of the MBean to be de-registered.

@exception InstanceNotFoundException The MBean specified is not
    registered in the MBean server.
@exception MBeanRegistrationException The <code>preDeregister()</code>
    (<CODE>MBeanRegistration</CODE>  interface) method of the MBean
    has thrown an exception.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
    object name in parameter is null or the MBean you are when
    trying to de-register is the
    {@link javax.management.MBeanServerDelegate MBeanServerDelegate}
    MBean.
"
      end

      operation 2963330 "getObjectInstance"
	public return_type class_ref 485378 // ObjectInstance
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <CODE>ObjectInstance</CODE> for a given MBean registered
with the MBean server.

@param name The object name of the MBean.

@return The <CODE>ObjectInstance</CODE> associated to the MBean
      specified by <VAR>name</VAR>.

@exception InstanceNotFoundException The MBean specified is not
      registered in the MBean server.
"
      end

      operation 2963458 "queryMBeans"
	public return_type class_ref 192258 // Set
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "query" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectInstance> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets MBeans controlled by the MBean server. This method allows any
of the following to be obtained: All MBeans, a set of MBeans specified
by pattern matching on the <CODE>ObjectName</CODE> and/or a Query
expression, a specific MBean. When the object name is null or no
domain and key properties are specified, all objects are to be
selected (and filtered if a query is specified). It returns the
set of <CODE>ObjectInstance</CODE> objects (containing the
<CODE>ObjectName</CODE> and the Java Class name) for
the selected MBeans.

@param name The object name pattern identifying the MBeans to
     be retrieved. If null or or no domain and key properties
     are specified, all the MBeans registered will be retrieved.
@param query The query expression to be applied for selecting
     MBeans. If null no query expression will be applied for
     selecting MBeans.

@return  A set containing the <CODE>ObjectInstance</CODE> objects
     for the selected MBeans.
     If no MBean satisfies the query an empty list is returned.

"
      end

      operation 2963586 "queryNames"
	public return_type class_ref 192258 // Set
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "query" type class_ref 486402 // QueryExp
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ObjectName> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the names of MBeans controlled by the MBean server. This method
enables any of the following to be obtained: The names of all MBeans,
the names of a set of MBeans specified by pattern matching on the
<CODE>ObjectName</CODE> and/or a Query expression, a specific
MBean name (equivalent to testing whether an MBean is registered).
When the object name is null or or no domain and key properties are
specified, all objects are selected (and filtered if a query is
specified). It returns the set of ObjectNames for the MBeans
selected.

@param name The object name pattern identifying the MBeans to be
    retrieved. If null or no domain and key properties are
    specified, all the MBeans registered will be retrieved.
@param query The query expression to be applied for selecting
    MBeans. If null no query expression will be applied for
    selecting MBeans.

@return  A set containing the ObjectNames for the MBeans selected.
    If no MBean satisfies the query, an empty list is returned.

"
      end

      operation 2963714 "isRegistered"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether an MBean, identified by its object name, is already
registered with the MBean server.

@param name The object name of the MBean to be checked.

@return  True if the MBean is already registered in the MBean server,
    false otherwise.

@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The object
     name in parameter is null.

"
      end

      operation 2963842 "getMBeanCount"
	public return_type class_ref 137602 // Integer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of MBeans registered in the MBean server.
"
      end

      operation 2963970 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attribute" type class_ref 128130 // String
	nexceptions 4
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of a specific attribute of a named MBean. The MBean
is identified by its object name.

@param name The object name of the MBean from which the attribute
    is to be retrieved.
@param attribute A String specifying the name of the attribute to be
    retrieved.

@return  The value of the retrieved attribute.

@exception AttributeNotFoundException The attribute specified
    is not accessible in the MBean.
@exception MBeanException  Wraps an exception thrown by the
    MBean's getter.
@exception InstanceNotFoundException The MBean specified is not
    registered in the MBean server.
@exception ReflectionException  Wraps an
    <CODE>{@link java.lang.Exception}</CODE> thrown when trying to
    invoke the setter.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
    The object name in parameter is null or the attribute in
    parameter is null.
"
      end

      operation 2964098 "getAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attributes" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables the values of several attributes of a named MBean. The MBean
is identified by its object name.

@param name The object name of the MBean from which the attributes are
    retrieved.
@param attributes A list of the attributes to be retrieved.

@return The list of the retrieved attributes.

@exception InstanceNotFoundException The MBean specified is not
    registered in the MBean server.
@exception ReflectionException An exception occurred when trying
    to invoke the getAttributes method of a Dynamic MBean.
@exception RuntimeOperationsException Wrap an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
    object name in parameter is null or attributes in parameter
    is null.

"
      end

      operation 2964226 "setAttribute"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attribute" type class_ref 486786 // Attribute
	nexceptions 5
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of a specific attribute of a named MBean. The MBean
is identified by its object name.

@param name The name of the MBean within which the attribute is
    to be set.
@param attribute The identification of the attribute to be set
    and the value it is to be set to.

@exception InstanceNotFoundException The MBean specified is
    not registered in the MBean server.
@exception AttributeNotFoundException The attribute specified is
    not accessible in the MBean.
@exception InvalidAttributeValueException The value specified for
    the attribute is not valid.
@exception MBeanException Wraps an exception thrown by the
    MBean's setter.
@exception ReflectionException  Wraps an
    <CODE>{@link java.lang.Exception}</CODE> thrown when trying
    to invoke the setter.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
    object name in parameter is null or the attribute in parameter
    is null.
"
      end

      operation 2964354 "setAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "attributes" type class_ref 486658 // AttributeList
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the values of several attributes of a named MBean. The MBean is
identified by its object name.

@param name The object name of the MBean within which the
    attributes are to  be set.
@param attributes A list of attributes: The identification of the
    attributes to be set and  the values they are to be set to.

@return  The list of attributes that were set, with their new values.

@exception InstanceNotFoundException The MBean specified is not
     registered in the MBean server.
@exception ReflectionException An exception occurred when trying
     to invoke the getAttributes method of a Dynamic MBean.
@exception RuntimeOperationsException Wraps an
     <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
    The object name in parameter is null or  attributes in
    parameter is null.

"
      end

      operation 2964482 "invoke"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "operationName" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes an operation on an MBean.

@param name The object name of the MBean on which the method is to be
    invoked.
@param operationName The name of the operation to be invoked.
@param params An array containing the parameters to be set when
    the operation is invoked
@param signature An array containing the signature of the operation.
    The class objects will be loaded using the same class loader as
    the one used for loading the MBean on which the operation was
    invoked.

@return  The object returned by the operation, which represents the
     result ofinvoking the operation on the  MBean specified.

@exception InstanceNotFoundException The MBean specified is not
      registered in the MBean server.
@exception MBeanException  Wraps an exception thrown by the MBean's
      invoked method.
@exception ReflectionException  Wraps an
      <CODE>{@link java.lang.Exception}</CODE> thrown while trying
       to invoke the method.

"
      end

      operation 2964610 "getDefaultDomain"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default domain used for naming the MBean.
The default domain name is used as the domain part in the ObjectName
of MBeans if no domain is specified by the user.
"
      end

      operation 2964738 "getDomains"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " From MBeanServer"
      end

      operation 2964866 "addNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to a registered MBean.

@param name The name of the MBean on which the listener should be added.
@param listener The listener object which will handle the
       notifications emitted by the registered MBean.
@param filter The filter object. If filter is null, no filtering
       will be performed before handling notifications.
@param handback The context to be sent to the listener when a
       notification is emitted.

@exception InstanceNotFoundException The MBean name provided does
      not match any of the registered MBeans.
"
      end

      operation 2964994 "addNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a listener to a registered MBean.

@param name The name of the MBean on which the listener should be added.
@param listener The object name of the listener which will handle the
       notifications emitted by the registered MBean.
@param filter The filter object. If filter is null, no filtering will
       be performed before handling notifications.
@param handback The context to be sent to the listener when a
       notification is emitted.

@exception InstanceNotFoundException The MBean name of the
      notification listener or of the notification broadcaster
      does not match any of the registered MBeans.
"
      end

      operation 2965122 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2965250 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2965378 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2965506 "removeNotificationListener"
	public explicit_return_type "void"
	nparams 4
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "listener" type class_ref 485506 // ObjectName
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487298 // ListenerNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2965634 "getMBeanInfo"
	public return_type class_ref 487426 // MBeanInfo
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487554 // IntrospectionException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method discovers the attributes and operations that an MBean exposes
for management.

@param name The name of the MBean to analyze

@return  An instance of <CODE>MBeanInfo</CODE> allowing the retrieval of
all attributes and operations of this MBean.

@exception IntrospectionException An exception occurs during
introspection.
@exception InstanceNotFoundException The MBean specified is not found.
@exception ReflectionException An exception occurred when trying to
invoke the getMBeanInfo of a Dynamic MBean.
"
      end

      operation 2965762 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object using the list of all class loaders registered
in the MBean server (using its
{@link javax.management.loading.ClassLoaderRepository Default Loader Repository}).
The object's class should have a public constructor.
It returns a reference to the newly created object.
The newly created object is not registered in the MBean server.

@param className The class name of the object to be instantiated.

@return The newly instantiated object.

@exception ReflectionException Wraps the
    <CODE>{@link java.lang.ClassNotFoundException}</CODE> or the
    <CODE>{@link java.lang.Exception}</CODE> that
    occurred when trying to invoke the object's constructor.
@exception MBeanException The constructor of the object has thrown
    an exception.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
    The className passed in parameter is null.

"
      end

      operation 2965890 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	nexceptions 3
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object using the class Loader specified by its
<CODE>ObjectName</CODE>.
If the loader name is null, the ClassLoader that loaded the
MBean Server will be used.
The object's class should have a public constructor.
It returns a reference to the newly created object.
The newly created object is not registered in the MBean server.

@param className The class name of the MBean to be instantiated.
@param loaderName The object name of the class loader to be used.

@return The newly instantiated object.

@exception ReflectionException Wraps the
    <CODE>{@link java.lang.ClassNotFoundException}</CODE> or the
    <CODE>{@link java.lang.Exception}</CODE> that
    occurred when trying to invoke the object's constructor.
@exception MBeanException The constructor of the object has thrown
    an exception.
@exception InstanceNotFoundException The specified class loader
    is not registered in the MBaenServer.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>: The
    className passed in parameter is null.

"
      end

      operation 2966018 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object using the list of all class loaders registered
in the MBean server (using its
{@link javax.management.loading.ClassLoaderRepository Default Loader Repository}).
The object's class should have a public constructor.
The call returns a reference to the newly created object.
The newly created object is not registered in the MBean server.

@param className The class name of the object to be instantiated.
@param params An array containing the parameters of the constructor
    to be invoked.
@param signature An array containing the signature of the
    constructor to be invoked.

@return The newly instantiated object.

@exception ReflectionException Wraps the
    <CODE>{@link java.lang.ClassNotFoundException}</CODE> or the
    <CODE>{@link java.lang.Exception}</CODE> that
    occurred when trying to invoke the object's constructor.
@exception MBeanException The constructor of the object has thrown
    an exception.
@exception RuntimeOperationsException Wraps an
    <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
    The className passed in parameter is null.

"
      end

      operation 2966146 "instantiate"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 485634 // ReflectionException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an object. The class loader to be used is identified
by its object name. If the object name of the loader is null,
the ClassLoader that loaded the MBean server will be used.
The object's class should have a public constructor.
The call returns a reference to the newly created object.
The newly created object is not registered in the MBean server.

@param className The class name of the object to be instantiated.
@param params An array containing the parameters of the constructor
    to be invoked.
@param signature An array containing the signature of the constructor
    to be invoked.
@param loaderName The object name of the class loader to be used.

@return The newly instantiated object.

@exception ReflectionException Wraps the
   <CODE>{@link java.lang.ClassNotFoundException}</CODE> or the
   <CODE>{@link java.lang.Exception}</CODE> that
   occurred when trying to invoke the object's constructor.
@exception MBeanException The constructor of the object has thrown
   an exception.
@exception InstanceNotFoundException The specified class loader
   is not registered in the MBean server.
@exception RuntimeOperationsException Wraps an
   <CODE>{@link java.lang.IllegalArgumentException}</CODE>:
   The className passed in parameter is null.

"
      end

      operation 2966274 "isInstanceOf"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the MBean specified is an instance of the specified
class, false otherwise.

@param name The <CODE>ObjectName</CODE> of the MBean.
@param className The name of the class.

@return true if the MBean specified is an instance of the specified
    class, false otherwise.

@exception InstanceNotFoundException The MBean specified is not
    registered in the MBean server.
"
      end

      operation 2966402 "deserialize"
	public return_type class_ref 168962 // ObjectInputStream
	nparams 2
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487682 // OperationsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "De-serializes a byte array in the context of the class loader
of an MBean.

@param name The name of the MBean whose class loader should
    be used for the de-serialization.
@param data The byte array to be de-sererialized.

@return  The de-serialized object stream.

@exception InstanceNotFoundException The MBean specified is not
    found.
@exception OperationsException Any of the usual Input/Output
    related exceptions.

"
      end

      operation 2966530 "deserialize"
	public return_type class_ref 168962 // ObjectInputStream
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 487682 // OperationsException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "De-serializes a byte array in the context of a given MBean class loader.
The class loader is the one that loaded the class with name \"className\".

@param className The name of the class whose class loader should be
     used for the de-serialization.
@param data The byte array to be de-sererialized.

@return  The de-serialized object stream.

@exception OperationsException Any of the usual Input/Output
     related exceptions.
@exception ReflectionException The specified class could not be
     loaded by the default loader repository

"
      end

      operation 2966658 "deserialize"
	public return_type class_ref 168962 // ObjectInputStream
	nparams 3
	  param inout name "className" type class_ref 128130 // String
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 486274 // InstanceNotFoundException
	  exception class_ref 487682 // OperationsException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "De-serializes a byte array in the context of a given MBean class loader.
The class loader is the one that loaded the class with name \"className\".
The name of the class loader to be used for loading the specified
class is specified.
If null, the MBean Server's class loader will be used.

@param className The name of the class whose class loader should be
    used for the de-serialization.
@param data The byte array to be de-sererialized.
@param loaderName The name of the class loader to be used for
    loading the specified class.
    If null, the MBean Server's class loader will be used.

@return  The de-serialized object stream.

@exception InstanceNotFoundException The specified class loader
    MBean is not found.
@exception OperationsException Any of the usual Input/Output
    related exceptions.
@exception ReflectionException The specified class could not
    be loaded by the specified class loader.

"
      end

      operation 2966786 "initialize"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this MBeanServer, registering the MBeanServerDelegate.
<p>This method must be called once, before using the MBeanServer.
"
      end

      operation 2966914 "getMBeanServerInterceptor"
	public return_type class_ref 485122 // MBeanServer
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the MBeanServerInterceptor.
@exception UnsupportedOperationException if
           {@link MBeanServerInterceptor}s
           are not enabled on this object.
@see #interceptorsEnabled
"
      end

      operation 2967042 "setMBeanServerInterceptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "interceptor" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the MBeanServerInterceptor.
@exception UnsupportedOperationException if
           {@link MBeanServerInterceptor}s
           are not enabled on this object.
@see #interceptorsEnabled
"
      end

      operation 2967170 "getClassLoaderFor"
	public return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "mbeanName" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the {@link java.lang.ClassLoader} that was used for
loading the class of the named MBean.
@param mbeanName The ObjectName of the MBean.
@return The ClassLoader used for that MBean.
@exception InstanceNotFoundException if the named MBean is not found.
"
      end

      operation 2967298 "getClassLoader"
	public return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "loaderName" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 486274 // InstanceNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the named {@link java.lang.ClassLoader}.
@param loaderName The ObjectName of the ClassLoader.
@return The named ClassLoader.
@exception InstanceNotFoundException if the named ClassLoader
is not found.
"
      end

      operation 2967426 "getClassLoaderRepository"
	public return_type class_ref 487810 // ClassLoaderRepository
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the ClassLoaderRepository for that MBeanServer.
@return The ClassLoaderRepository for that MBeanServer.
"
      end

      operation 2967554 "getMBeanServerDelegate"
	public return_type class_ref 488066 // MBeanServerDelegate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2967682 "newMBeanServerDelegate"
	class_operation public return_type class_ref 488066 // MBeanServerDelegate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " These methods are called by the JMX MBeanServerBuilder.

This method creates a new MBeanServerDelegate for a new MBeanServer.
When creating a new MBeanServer the
{@link javax.management.MBeanServerBuilder} first calls this method
in order to create a new MBeanServerDelegate.
<br>Then it calls
<code>newMBeanServer(defaultDomain,outer,delegate,interceptors)</code>
passing the <var>delegate</var> that should be used by the MBeanServer
implementation.
<p>Note that the passed <var>delegate</var> might not be directly the
MBeanServerDelegate that was returned by this method. It could
be, for instance, a new object wrapping the previously
returned object.

@return A new {@link javax.management.MBeanServerDelegate}.
"
      end

      operation 2967810 "newMBeanServer"
	class_operation public return_type class_ref 485122 // MBeanServer
	nparams 4
	  param inout name "defaultDomain" type class_ref 128130 // String
	  param inout name "outer" type class_ref 485122 // MBeanServer
	  param inout name "delegate" type class_ref 488066 // MBeanServerDelegate
	  param inout name "interceptors" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method creates a new MBeanServer implementation object.
When creating a new MBeanServer the
{@link javax.management.MBeanServerBuilder} first calls
<code>newMBeanServerDelegate()</code> in order to obtain a new
{@link javax.management.MBeanServerDelegate} for the new
MBeanServer. Then it calls
<code>newMBeanServer(defaultDomain,outer,delegate)</code>
passing the <var>delegate</var> that should be used by the
MBeanServer  implementation.
<p>Note that the passed <var>delegate</var> might not be directly the
MBeanServerDelegate that was returned by this implementation. It could
be, for instance, a new object wrapping the previously
returned delegate.
<p>The <var>outer</var> parameter is a pointer to the MBeanServer that
should be passed to the {@link javax.management.MBeanRegistration}
interface when registering MBeans inside the MBeanServer.
If <var>outer</var> is <code>null</code>, then the MBeanServer
implementation is free to use its own <code>this</code> pointer when
invoking the {@link javax.management.MBeanRegistration} interface.
<p>This makes it possible for a MBeanServer implementation to wrap
another MBeanServer implementation, in order to implement, e.g,
security checks, or to prevent access to the actual MBeanServer
implementation by returning a pointer to a wrapping object.

@param defaultDomain Default domain of the new MBeanServer.
@param outer A pointer to the MBeanServer object that must be
       passed to the MBeans when invoking their
       {@link javax.management.MBeanRegistration} interface.
@param delegate A pointer to the MBeanServerDelegate associated
       with the new MBeanServer. The new MBeanServer must register
       this MBean in its MBean repository.
@param interceptors If <code>true</code>,
       {@link MBeanServerInterceptor}s will be enabled (default is
       <code>false</code>).
       Note: this parameter is not taken into account by this
       implementation - the default value <code>false</code> is
       always used.
@return A new private implementation of an MBeanServer.
@see #interceptorsEnabled
@see javax.management.MBeanServerBuilder
@see com.sun.jmx.mbeanserver.JmxMBeanServerBuilder
"
      end

      operation 2967938 "cloneObjectName"
	private return_type class_ref 485506 // ObjectName
	nparams 1
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " JMX OBJECT CLONING
-------------------

Clone object name.
"
      end

      operation 2968066 "cloneAttribute"
	private return_type class_ref 486786 // Attribute
	nparams 1
	  param inout name "attribute" type class_ref 486786 // Attribute
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone attribute.
"
      end

      operation 2968194 "cloneAttributeList"
	private return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "list" type class_ref 486658 // AttributeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone attribute list.
"
      end

      operation 2968322 "checkMBeanPermission"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "classname" type class_ref 128130 // String
	  param inout name "member" type class_ref 128130 // String
	  param inout name "objectName" type class_ref 485506 // ObjectName
	  param inout name "actions" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " SECURITY CHECKS
----------------"
      end

      operation 2968450 "checkNewMBeanServerPermission"
	class_operation private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 495362 "SunJmxMBeanServer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Extends the MBeanServer interface to
provide methods for getting the MetaData and MBeanServerInstantiator
objects associated with an MBeanServer.

@since 1.5
"
      classrelation 973954 // <generalisation>
	relation 973954 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 973954 // <generalisation>
	  b parent class_ref 485122 // MBeanServer
      end

      operation 2961154 "getMBeanInstantiator"
	public return_type class_ref 487938 // MBeanInstantiator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the MBeanInstantiator associated to this MBeanServer.
@exception UnsupportedOperationException if
           {@link MBeanServerInterceptor}s
           are not enabled on this object.
@see #interceptorsEnabled
"
      end

      operation 2961282 "interceptorsEnabled"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell whether {@link MBeanServerInterceptor}s are enabled on this
object.
@return <code>true</code> if {@link MBeanServerInterceptor}s are
        enabled.
@see #getMBeanServerInterceptor
@see #setMBeanServerInterceptor
@see #getMBeanInstantiator
@see com.sun.jmx.mbeanserver.JmxMBeanServerBuilder
"
      end

      operation 2961410 "getMBeanServerInterceptor"
	public return_type class_ref 485122 // MBeanServer
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the MBeanServerInterceptor.
@exception UnsupportedOperationException if
           {@link MBeanServerInterceptor}s
           are not enabled on this object.
@see #interceptorsEnabled
"
      end

      operation 2961538 "setMBeanServerInterceptor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "interceptor" type class_ref 485122 // MBeanServer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the MBeanServerInterceptor.
@exception UnsupportedOperationException if
           {@link MBeanServerInterceptor}s
           are not enabled on this object.
@see #interceptorsEnabled
"
      end

      operation 2961666 "getMBeanServerDelegate"
	public return_type class_ref 488066 // MBeanServerDelegate
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return the MBeanServerDelegate representing the MBeanServer.
Notifications can be sent from the MBean server delegate using
the method {@link MBeanServerDelegate#sendNotification}
in the returned object.</p>

"
      end
    end

    class 495490 "SecureClassLoaderRepository"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Fix security hole in ClassLoaderRepository. This class wraps
the actual ClassLoaderRepository implementation so that
only the methods from {@link javax.management.loading.ClassLoaderRepository}
can be accessed (read-only).

@since 1.5
"
      classrelation 982914 // <realization>
	relation 982914 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 982914 // <realization>
	  b parent class_ref 487810 // ClassLoaderRepository
      end

      classrelation 983042 // clr (<unidirectional association>)
	relation 983042 --->
	  a role_name "clr" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 983042 // clr (<unidirectional association>)
	  b parent class_ref 487810 // ClassLoaderRepository
      end

      operation 2993922 "SecureClassLoaderRepository"
	public explicit_return_type ""
	nparams 1
	  param inout name "clr" type class_ref 487810 // ClassLoaderRepository
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new secure ClassLoaderRepository wrapping an
unsecure implementation.
@param clr Unsecure {@link ClassLoaderRepository} implementation
           to wrap.
"
      end

      operation 2994050 "loadClass"
	public return_type class_ref 130818 // Class
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2994178 "loadClassWithout"
	public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2994306 "loadClassBefore"
	public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "className" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 495618 "JmxMBeanServerBuilder"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents a builder that creates
{@link javax.management.MBeanServer} implementations.
The JMX {@link javax.management.MBeanServerFactory} allows
for applications to provide their custom MBeanServer
implementation. This class is not used when the whole Sun Reference JMX
Implementation is used. However it may be used to substitute Sun
MBeanServer implementation to another JMX implementation.
<p>
Contrarily to the default {@link javax.management.MBeanServerBuilder
javax.management.MBeanServerBuilder} this MBeanServerBuilder returns
MBeanServers on which
{@link com.sun.jmx.interceptor.MBeanServerInterceptor}s are enabled.

@since 1.5
"
      classrelation 974850 // <generalisation>
	relation 974850 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 974850 // <generalisation>
	  b parent class_ref 495746 // MBeanServerBuilder
      end

      operation 2968962 "newMBeanServerDelegate"
	public return_type class_ref 488066 // MBeanServerDelegate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method creates a new MBeanServerDelegate for a new MBeanServer.
When creating a new MBeanServer the
{@link javax.management.MBeanServerFactory} first calls this method
in order to create a new MBeanServerDelegate.
<br>Then it calls
<code>newMBeanServer(defaultDomain,outer,delegate)</code>
passing the <var>delegate</var> that should be used by the MBeanServer
implementation.
<p>Note that the passed <var>delegate</var> might not be directly the
MBeanServerDelegate that was returned by this method. It could
be, for instance, a new object wrapping the previously
returned object.

@return A new {@link javax.management.MBeanServerDelegate}.
"
      end

      operation 2969090 "newMBeanServer"
	public return_type class_ref 485122 // MBeanServer
	nparams 3
	  param inout name "defaultDomain" type class_ref 128130 // String
	  param inout name "outer" type class_ref 485122 // MBeanServer
	  param inout name "delegate" type class_ref 488066 // MBeanServerDelegate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method creates a new MBeanServer implementation object.
When creating a new MBeanServer the
{@link javax.management.MBeanServerFactory} first calls
<code>newMBeanServerDelegate()</code> in order to obtain a new
{@link javax.management.MBeanServerDelegate} for the new
MBeanServer. Then it calls
<code>newMBeanServer(defaultDomain,outer,delegate)</code>
passing the <var>delegate</var> that should be used by the
MBeanServer  implementation.
<p>Note that the passed <var>delegate</var> might not be directly the
MBeanServerDelegate that was returned by this implementation. It could
be, for instance, a new object wrapping the previously
returned delegate.
<p>The <var>outer</var> parameter is a pointer to the MBeanServer that
should be passed to the {@link javax.management.MBeanRegistration}
interface when registering MBeans inside the MBeanServer.
If <var>outer</var> is <code>null</code>, then the MBeanServer
implementation is free to use its own <code>this</code> pointer when
invoking the {@link javax.management.MBeanRegistration} interface.
<p>This makes it possible for a MBeanServer implementation to wrap
another MBeanServer implementation, in order to implement, e.g,
security checks, or to prevent access to the actual MBeanServer
implementation by returning a pointer to a wrapping object.
<p>
This MBeanServerBuilder makes it possible to create MBeanServer
which support {@link com.sun.jmx.interceptor.MBeanServerInterceptor}s.

@param defaultDomain Default domain of the new MBeanServer.
@param outer A pointer to the MBeanServer object that must be
       passed to the MBeans when invoking their
       {@link javax.management.MBeanRegistration} interface.
@param delegate A pointer to the MBeanServerDelegate associated
       with the new MBeanServer. The new MBeanServer must register
       this MBean in its MBean repository.

@return A new private implementation of an MBeanServer.
"
      end
    end

    class 495874 "MBeanAnalyzer"
      visibility package 
      nformals 1
      formal name "M" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>An analyzer for a given MBean interface.  The analyzer can
be for Standard MBeans or MXBeans, depending on the MBeanIntrospector
passed at construction.

<p>The analyzer can
visit the attributes and operations of the interface, calling
a caller-supplied visitor method for each one.</p>

@param <M> Method or ConvertingMethod according as this is a
Standard MBean or an MXBean.

@since 1.6
"
      class 496002 "MBeanVisitor"
	visibility package stereotype "interface"
	nformals 1
	formal name "M" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 2969218 "visitAttribute"
	  cpp_inline public explicit_return_type "void"
	  nparams 3
	    param inout name "attributeName" type class_ref 128130 // String
	    param inout name "getter" explicit_type "M"
	    param inout name "setter" explicit_type "M"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2969346 "visitOperation"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "operationName" type class_ref 128130 // String
	    param inout name "operation" explicit_type "M"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 2969474 "visit"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "visitor" type class_ref 496002 // MBeanVisitor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<M> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 974978 // opMap (<unidirectional association>)
	relation 974978 --->
	  a role_name "opMap" init_value " newInsertionOrderMap()" private
	    comment " Map op name to method 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, List<M>> ${name}${value};
"
	    classrelation_ref 974978 // opMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 975106 // attrMap (<unidirectional association>)
	relation 975106 --->
	  a role_name "attrMap" init_value " newInsertionOrderMap()" private
	    comment " Map attr name to getter and/or setter 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, AttrMethods<M>> ${name}${value};
"
	    classrelation_ref 975106 // attrMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      class 496130 "AttrMethods"
	visibility private 
	nformals 1
	formal name "M" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 621186 "getter"
	  package explicit_type "M"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 621314 "setter"
	  package explicit_type "M"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      operation 2969602 "analyzer"
	class_operation cpp_inline package return_type class_ref 495874 // MBeanAnalyzer
	nparams 2
	  param inout name "mbeanType" type class_ref 130818 // Class
	  param inout name "introspector" type class_ref 494594 // MBeanIntrospector
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<M> ${type}<M> ${name}${(}${t0}<?> ${p0}, ${t1}<M> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Return an MBeanAnalyzer for the given MBean interface and
MBeanIntrospector.  Calling this method twice with the same
parameters may return the same object or two different but
equivalent objects.

 Currently it's two different but equivalent objects.  This only
 really impacts proxy generation.  For MBean creation, the
 cached PerInterface object for an MBean interface means that
 an analyzer will not be recreated for a second MBean using the
 same interface."
      end

      operation 2969730 "MBeanAnalyzer"
	cpp_inline private explicit_return_type ""
	nparams 2
	  param inout name "mbeanType" type class_ref 130818 // Class
	  param inout name "introspector" type class_ref 494594 // MBeanIntrospector
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<M> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2969858 "initMaps"
	cpp_inline private explicit_return_type "void"
	nparams 2
	  param inout name "mbeanType" type class_ref 130818 // Class
	  param inout name "introspector" type class_ref 494594 // MBeanIntrospector
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<M> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Introspect the mbeanInterface and initialize this object's maps.
"
      end

      class 496258 "MethodOrder"
	visibility private 
	nactuals 1
	actual class class_ref 184962 // Comparator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 975234 // <realization>
	  relation 975234 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 975234 // <realization>
	    b parent class_ref 184962 // Comparator
	end

	operation 2969986 "compare"
	  cpp_inline public explicit_return_type "int"
	  nparams 2
	    param inout name "a" type class_ref 137858 // Method
	    param inout name "b" type class_ref 137858 // Method
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 975362 // instance (<unidirectional association>)
	  relation 975362 --->
	    a role_name "instance" init_value " new MethodOrder()" class_relation const_relation public
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 975362 // instance (<unidirectional association>)
	    b parent class_ref 496258 // MethodOrder
	end
      end

      operation 2970114 "eliminateCovariantMethods"
	class_operation cpp_inline package return_type class_ref 175362 // List
	nparams 1
	  param inout name "startMethods" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method> ${name}${(}${t0}<Method> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Eliminate methods that are overridden with a covariant return type.
Reflection will return both the original and the overriding method
but only the overriding one is of interest.  We return the methods
in the same order they arrived in.  This isn't required by the spec
but existing code may depend on it and users may be used to seeing
operations or attributes appear in a particular order.

Because of the way this method works, if the same Method appears
more than once in the given List then it will be completely deleted!
So don't do that.  "
      end
    end

    class 496898 "PerInterface"
      visibility package 
      nformals 1
      formal name "M" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Per-MBean-interface behavior.  A single instance of this class can be shared
by all MBeans of the same kind (Standard MBean or MXBean) that have the same
MBean interface.

@since 1.6
"
      operation 2992514 "PerInterface"
	cpp_inline package explicit_return_type ""
	nparams 4
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	  param inout name "introspector" type class_ref 494594 // MBeanIntrospector
	  param inout name "analyzer" type class_ref 495874 // MBeanAnalyzer
	  param inout name "mbeanInfo" type class_ref 487426 // MBeanInfo
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<M> ${p1}, ${t2}<M> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2992642 "getMBeanInterface"
	cpp_inline package return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2992770 "getMBeanInfo"
	cpp_inline package return_type class_ref 487426 // MBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2992898 "isMXBean"
	cpp_inline package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2993026 "getAttribute"
	cpp_inline package return_type class_ref 129538 // Object
	nparams 3
	  param inout name "resource" type class_ref 129538 // Object
	  param inout name "attribute" type class_ref 128130 // String
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2993154 "setAttribute"
	cpp_inline package explicit_return_type "void"
	nparams 4
	  param inout name "resource" type class_ref 129538 // Object
	  param inout name "attribute" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 4
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2993282 "invoke"
	cpp_inline package return_type class_ref 129538 // Object
	nparams 5
	  param inout name "resource" type class_ref 129538 // Object
	  param inout name "operation" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2993410 "noSuchMethod"
	cpp_inline private return_type class_ref 129538 // Object
	nparams 6
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "resource" type class_ref 129538 // Object
	  param inout name "operation" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4}[] ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when invoke doesn't find the named method.
Before throwing an exception, we check to see whether the
jmx.invoke.getters property is set, and if so whether the method
being invoked might be a getter or a setter.  If so we invoke it
and return the result.  This is for compatibility
with code based on JMX RI 1.0 or 1.1 which allowed invoking getters
and setters.  It is *not* recommended that new code use this feature.

Since this method is either going to throw an exception or use
functionality that is strongly discouraged, we consider that its
performance is not very important.

A simpler way to implement the functionality would be to add the getters
and setters to the operations map when jmx.invoke.getters is set.
However, that means that the property is consulted when an MBean
interface is being introspected and not thereafter.  Previously,
the property was consulted on every invocation.  So this simpler
implementation could potentially break code that sets and unsets
the property at different times.
"
      end

      operation 2993538 "sigString"
	cpp_inline private return_type class_ref 128130 // String
	nparams 1
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 499586 "InitMaps"
	visibility private 
	nactuals 2
	actual class class_ref 495874 // MBeanAnalyzer
	  rank 0 explicit_value ""
	actual class class_ref 496002 // MBeanVisitor
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 981890 // <realization>
	  relation 981890 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 981890 // <realization>
	    b parent class_ref 496002 // MBeanVisitor
	end

	operation 2993666 "visitAttribute"
	  cpp_inline public explicit_return_type "void"
	  nparams 3
	    param inout name "attributeName" type class_ref 128130 // String
	    param inout name "getter" explicit_type "M"
	    param inout name "setter" explicit_type "M"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2993794 "visitOperation"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "operationName" type class_ref 128130 // String
	    param inout name "operation" explicit_type "M"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 499714 "MethodAndSig"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 621826 "method"
	  package explicit_type "M"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 982018 // signature (<unidirectional association>)
	  relation 982018 --->
	    a role_name "signature" multiplicity "[]" package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 982018 // signature (<unidirectional association>)
	    b parent class_ref 128130 // String
	end
      end

      classrelation 982146 // mbeanInterface (<unidirectional association>)
	relation 982146 --->
	  a role_name "mbeanInterface" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 982146 // mbeanInterface (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 982274 // introspector (<unidirectional association>)
	relation 982274 --->
	  a role_name "introspector" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<M> ${name}${value};
"
	    classrelation_ref 982274 // introspector (<unidirectional association>)
	  b parent class_ref 494594 // MBeanIntrospector
      end

      classrelation 982402 // mbeanInfo (<unidirectional association>)
	relation 982402 --->
	  a role_name "mbeanInfo" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 982402 // mbeanInfo (<unidirectional association>)
	  b parent class_ref 487426 // MBeanInfo
      end

      classrelation 982530 // getters (<unidirectional association>)
	relation 982530 --->
	  a role_name "getters" init_value " newMap()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, M> ${name}${value};
"
	    classrelation_ref 982530 // getters (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 982658 // setters (<unidirectional association>)
	relation 982658 --->
	  a role_name "setters" init_value " newMap()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, M> ${name}${value};
"
	    classrelation_ref 982658 // setters (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 982786 // ops (<unidirectional association>)
	relation 982786 --->
	  a role_name "ops" init_value " newMap()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, List<MethodAndSig>> ${name}${value};
"
	    classrelation_ref 982786 // ops (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end
    end

    class 497410 "MBeanServerDelegateImpl"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is the MBean implementation of the MBeanServerDelegate.

@since 1.5
"
      classrelation 977282 // <generalisation>
	relation 977282 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 977282 // <generalisation>
	  b parent class_ref 488066 // MBeanServerDelegate
      end

      classrelation 977410 // <realization>
	relation 977410 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 977410 // <realization>
	  b parent class_ref 488450 // DynamicMBean
      end

      classrelation 977538 // <realization>
	relation 977538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 977538 // <realization>
	  b parent class_ref 488578 // MBeanRegistration
      end

      classrelation 977666 // attributeNames (<unidirectional association>)
	relation 977666 --->
	  a role_name "attributeNames" multiplicity "[]" init_value " new String[] {
        \"MBeanServerId\",
        \"SpecificationName\",
        \"SpecificationVersion\",
        \"SpecificationVendor\",
        \"ImplementationName\",
        \"ImplementationVersion\",
        \"ImplementationVendor\"
    }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 977666 // attributeNames (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 977794 // attributeInfos (<unidirectional association>)
	relation 977794 --->
	  a role_name "attributeInfos" multiplicity "[]" init_value "
        new MBeanAttributeInfo[] {
            new MBeanAttributeInfo(\"MBeanServerId\",\"java.lang.String\",
                                   \"The MBean server agent identification\",
                                   true,false,false),
            new MBeanAttributeInfo(\"SpecificationName\",\"java.lang.String\",
                                   \"The full name of the JMX specification \"+
                                   \"implemented by this product.\",
                                   true,false,false),
            new MBeanAttributeInfo(\"SpecificationVersion\",\"java.lang.String\",
                                   \"The version of the JMX specification \"+
                                   \"implemented by this product.\",
                                   true,false,false),
            new MBeanAttributeInfo(\"SpecificationVendor\",\"java.lang.String\",
                                   \"The vendor of the JMX specification \"+
                                   \"implemented by this product.\",
                                   true,false,false),
            new MBeanAttributeInfo(\"ImplementationName\",\"java.lang.String\",
                                   \"The JMX implementation name \"+
                                   \"(the name of this product)\",
                                   true,false,false),
            new MBeanAttributeInfo(\"ImplementationVersion\",\"java.lang.String\",
                                   \"The JMX implementation version \"+
                                   \"(the version of this product).\",
                                   true,false,false),
            new MBeanAttributeInfo(\"ImplementationVendor\",\"java.lang.String\",
                                   \"the JMX implementation vendor \"+
                                   \"(the vendor of this product).\",
                                   true,false,false)
                }" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 977794 // attributeInfos (<unidirectional association>)
	  b parent class_ref 496642 // MBeanAttributeInfo
      end

      classrelation 977922 // delegateInfo (<unidirectional association>)
	relation 977922 --->
	  a role_name "delegateInfo" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 977922 // delegateInfo (<unidirectional association>)
	  b parent class_ref 487426 // MBeanInfo
      end

      operation 2980866 "MBeanServerDelegateImpl"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2980994 "preRegister"
	public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2981122 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 315010 // Boolean
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2981250 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2981378 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2981506 "getAttribute"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "attribute" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the value of a specific attribute of the MBeanServerDelegate.

@param attribute The name of the attribute to be retrieved

@return  The value of the attribute retrieved.

@exception AttributeNotFoundException
@exception MBeanException
           Wraps a <CODE>java.lang.Exception</CODE> thrown by the
           MBean's getter.
"
      end

      operation 2981634 "setAttribute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "attribute" type class_ref 486786 // Attribute
	nexceptions 4
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method always fail since all MBeanServerDelegateMBean attributes
are read-only.

@param attribute The identification of the attribute to
be set and  the value it is to be set to.

@exception AttributeNotFoundException
"
      end

      operation 2981762 "getAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes it possible to get the values of several attributes of
the MBeanServerDelegate.

@param attributes A list of the attributes to be retrieved.

@return  The list of attributes retrieved.

"
      end

      operation 2981890 "setAttributes"
	public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 486658 // AttributeList
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method always return an empty list since all
MBeanServerDelegateMBean attributes are read-only.

@param attributes A list of attributes: The identification of the
attributes to be set and  the values they are to be set to.

@return  The list of attributes that were set, with their new values.
         In fact, this method always return an empty list since all
         MBeanServerDelegateMBean attributes are read-only.
"
      end

      operation 2982018 "invoke"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "actionName" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always fails since the MBeanServerDelegate MBean has no operation.

@param actionName The name of the action to be invoked.
@param params An array containing the parameters to be set when the
       action is invoked.
@param signature An array containing the signature of the action.

@return  The object returned by the action, which represents
         the result of invoking the action on the MBean specified.

@exception MBeanException  Wraps a <CODE>java.lang.Exception</CODE>
        thrown by the MBean's invoked method.
@exception ReflectionException  Wraps a
     <CODE>java.lang.Exception</CODE> thrown while trying to invoke
     the method.
"
      end

      operation 2982146 "getMBeanInfo"
	public return_type class_ref 487426 // MBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides the MBeanInfo describing the MBeanServerDelegate.

@return  The MBeanInfo describing the MBeanServerDelegate.

"
      end
    end

    class 498050 "MBeanSupport"
      abstract visibility public 
      nformals 1
      formal name "M" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base class for MBeans.  There is one instance of this class for
every Standard MBean and every MXBean.  We try to limit the amount
of information per instance so we can handle very large numbers of
MBeans comfortably.

@param <M> either Method or ConvertingMethod, for Standard MBeans
and MXBeans respectively.

@since 1.6


We maintain a couple of caches to increase sharing between
different MBeans of the same type and also to reduce creation time
for the second and subsequent instances of the same type.

The first cache maps from an MBean interface to a PerInterface
object containing information parsed out of the interface.  The
interface is either a Standard MBean interface or an MXBean
interface, and there is one cache for each case.

The PerInterface includes an MBeanInfo.  This contains the
attributes and operations parsed out of the interface's methods,
plus a basic Descriptor for the interface containing at least the
interfaceClassName field and any fields derived from annotations on
the interface.  This MBeanInfo can never be the MBeanInfo for any
actual MBean, because an MBeanInfo's getClassName() is the name of
a concrete class and we don't know what the class will be.
Furthermore a real MBeanInfo may need to add constructors and/or
notifications to the MBeanInfo.

The PerInterface also contains an MBeanDispatcher which is able to
route getAttribute, setAttribute, and invoke to the appropriate
method of the interface, including doing any necessary translation
of parameters and return values for MXBeans.

The PerInterface also contains the original Class for the interface.

We need to be careful about references.  When there are no MBeans
with a given interface, there must not be any strong references to
the interface Class.  Otherwise it could never be garbage collected,
and neither could its ClassLoader or any other classes loaded by
its ClassLoader.  Therefore the cache must wrap the PerInterface
in a WeakReference.  Each instance of MBeanSupport has a strong
reference to its PerInterface, which prevents PerInterface instances
from being garbage-collected prematurely.

The second cache maps from a concrete class and an MBean interface
that that class implements to the MBeanInfo for that class and
interface.  (The ability to specify an interface separately comes
from the class StandardMBean.  MBeans registered directly in the
MBean Server will always have the same interface here.)

The MBeanInfo in this second cache will be the MBeanInfo from the
PerInterface cache for the given itnerface, but with the
getClassName() having the concrete class's name, and the public
constructors based on the concrete class's constructors.  This
MBeanInfo can be shared between all instances of the concrete class
specifying the same interface, except instances that are
NotificationBroadcasters.  NotificationBroadcasters supply the
MBeanNotificationInfo[] in the MBeanInfo based on the instance
method NotificationBroadcaster.getNotificationInfo(), so two
instances of the same concrete class do not necessarily have the
same MBeanNotificationInfo[].  Currently we do not try to detect
when they do, although it would probably be worthwhile doing that
since it is a very common case.

Standard MBeans additionally have the property that
getNotificationInfo() must in principle be called every time
getMBeanInfo() is called for the MBean, since the returned array is
allowed to change over time.  We attempt to reduce the cost of
doing this by detecting when the Standard MBean is a subclass of
NotificationBroadcasterSupport that does not override
getNotificationInfo(), meaning that the MBeanNotificationInfo[] is
the one that was supplied to the constructor.  MXBeans do not have
this problem because their getNotificationInfo() method is called
only once.

"
      classrelation 978050 // <realization>
	relation 978050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 978050 // <realization>
	  b parent class_ref 494210 // DynamicMBean2
      end

      classrelation 978178 // <realization>
	relation 978178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 978178 // <realization>
	  b parent class_ref 488578 // MBeanRegistration
      end

      operation 2982274 "MBeanSupport"
	cpp_inline package explicit_return_type ""
	nparams 2
	  param inout name "resource" explicit_type "T"
	  param inout name "mbeanInterfaceType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2982402 "getMBeanIntrospector"
	abstract cpp_inline package return_type class_ref 494594 // MBeanIntrospector
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<M> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return the appropriate introspector for this type of MBean. "
      end

      operation 2982530 "getCookie"
	abstract cpp_inline package return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a cookie for this MBean.  This cookie will be passed to
MBean method invocations where it can supply additional information
to the invocation.  For example, with MXBeans it can be used to
supply the MXBeanLookup context for resolving inter-MXBean references.
"
      end

      operation 2982658 "isMXBean"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2982786 "register"
	abstract cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Methods that javax.management.StandardMBean should call from its
 preRegister and postRegister, given that it is not supposed to
 call the contained object's preRegister etc methods even if it has them"
      end

      operation 2982914 "unregister"
	abstract cpp_inline public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2983042 "preRegister"
	cpp_inline public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2983170 "preRegister2"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2983298 "registerFailed"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2983426 "postRegister"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 315010 // Boolean
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2983554 "preDeregister"
	cpp_inline public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2983682 "postDeregister"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2983810 "getAttribute"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "attribute" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2983938 "getAttributes"
	cpp_inline public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2984066 "setAttribute"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "attribute" type class_ref 486786 // Attribute
	nexceptions 4
	  exception class_ref 486530 // AttributeNotFoundException
	  exception class_ref 486914 // InvalidAttributeValueException
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2984194 "setAttributes"
	cpp_inline public return_type class_ref 486658 // AttributeList
	nparams 1
	  param inout name "attributes" type class_ref 486658 // AttributeList
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2984322 "invoke"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "operation" type class_ref 128130 // String
	  param inout name "params" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "signature" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 486018 // MBeanException
	  exception class_ref 485634 // ReflectionException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2984450 "getMBeanInfo"
	cpp_inline public return_type class_ref 487426 // MBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Overridden by StandardMBeanSupport"
      end

      operation 2984578 "getClassName"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2984706 "getResource"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2984834 "getMBeanInterface"
	cpp_inline public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 978306 // mbeanInfo (<unidirectional association>)
	relation 978306 --->
	  a role_name "mbeanInfo" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 978306 // mbeanInfo (<unidirectional association>)
	  b parent class_ref 487426 // MBeanInfo
      end

      classrelation 978434 // resource (<unidirectional association>)
	relation 978434 --->
	  a role_name "resource" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 978434 // resource (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 978562 // perInterface (<unidirectional association>)
	relation 978562 --->
	  a role_name "perInterface" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<M> ${name}${value};
"
	    classrelation_ref 978562 // perInterface (<unidirectional association>)
	  b parent class_ref 496898 // PerInterface
      end
    end

    class 498178 "MXBeanIntrospector"
      visibility package 
      nactuals 1
      actual class class_ref 494594 // MBeanIntrospector
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Introspector for MXBeans.  There is exactly one instance of this class.

@since 1.6
"
      classrelation 978690 // <realization>
	relation 978690 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 978690 // <realization>
	  b parent class_ref 494594 // MBeanIntrospector
      end

      classrelation 978818 // instance (<unidirectional association>)
	relation 978818 --->
	  a role_name "instance" init_value " new MXBeanIntrospector()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 978818 // instance (<unidirectional association>)
	  b parent class_ref 498178 // MXBeanIntrospector
      end

      operation 2984962 "getInstance"
	class_operation package return_type class_ref 498178 // MXBeanIntrospector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2985090 "getPerInterfaceMap"
	package return_type class_ref 496386 // PerInterfaceMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ConvertingMethod> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2985218 "getMBeanInfoMap"
	package return_type class_ref 496514 // MBeanInfoMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2985346 "getAnalyzer"
	package return_type class_ref 495874 // MBeanAnalyzer
	nparams 1
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ConvertingMethod> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2985474 "isMXBean"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2985602 "mFrom"
	package return_type class_ref 489858 // ConvertingMethod
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2985730 "getName"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "m" type class_ref 489858 // ConvertingMethod
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2985858 "getGenericReturnType"
	package return_type class_ref 490114 // Type
	nparams 1
	  param inout name "m" type class_ref 489858 // ConvertingMethod
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2985986 "getGenericParameterTypes"
	package return_type class_ref 490114 // Type
	nparams 1
	  param inout name "m" type class_ref 489858 // ConvertingMethod
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2986114 "getSignature"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "m" type class_ref 489858 // ConvertingMethod
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2986242 "checkMethod"
	package explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 489858 // ConvertingMethod
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2986370 "invokeM2"
	package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "m" type class_ref 489858 // ConvertingMethod
	  param inout name "target" type class_ref 129538 // Object
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 193410 // InvocationTargetException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2986498 "validParameter"
	package explicit_return_type "boolean"
	nparams 4
	  param inout name "m" type class_ref 489858 // ConvertingMethod
	  param inout name "value" type class_ref 129538 // Object
	  param in name "paramNo" explicit_type "int"
	  param inout name "cookie" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2986626 "getMBeanAttributeInfo"
	package return_type class_ref 496642 // MBeanAttributeInfo
	nparams 3
	  param inout name "attributeName" type class_ref 128130 // String
	  param inout name "getter" type class_ref 489858 // ConvertingMethod
	  param inout name "setter" type class_ref 489858 // ConvertingMethod
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2986754 "getMBeanOperationInfo"
	package return_type class_ref 496770 // MBeanOperationInfo
	nparams 2
	  param inout name "operationName" type class_ref 128130 // String
	  param inout name "operation" type class_ref 489858 // ConvertingMethod
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2986882 "getBasicMBeanDescriptor"
	package return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2987010 "getMBeanDescriptor"
	package return_type class_ref 489986 // Descriptor
	nparams 1
	  param inout name "resourceClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2987138 "typeDescriptor"
	class_operation private return_type class_ref 489986 // Descriptor
	nparams 2
	  param inout name "openType" type class_ref 490242 // OpenType
	  param inout name "originalType" type class_ref 490114 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2987266 "canUseOpenInfo"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "type" type class_ref 490114 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>True if this type can be faithfully represented in an
OpenMBean*Info.</p>

<p>Compatibility with JSR 174 means that primitive types must be
represented by an MBean*Info whose getType() is the primitive type
string, e.g. \"int\".  If we used an OpenMBean*Info then this string
would be the wrapped type, e.g. \"java.lang.Integer\".</p>

<p>Compatibility with JMX 1.2 (including J2SE 5.0) means that arrays
of primitive types cannot use an ArrayType representing an array of
primitives, because that didn't exist in JMX 1.2.</p>
"
      end

      operation 2987394 "originalTypeString"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "type" type class_ref 490114 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2987522 "typeName"
	class_operation package return_type class_ref 128130 // String
	nparams 1
	  param inout name "type" type class_ref 490114 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 978946 // perInterfaceMap (<unidirectional association>)
	relation 978946 --->
	  a role_name "perInterfaceMap" init_value " new PerInterfaceMap<ConvertingMethod>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ConvertingMethod> ${name}${value};
"
	    classrelation_ref 978946 // perInterfaceMap (<unidirectional association>)
	  b parent class_ref 496386 // PerInterfaceMap
      end

      classrelation 979074 // mbeanInfoMap (<unidirectional association>)
	relation 979074 --->
	  a role_name "mbeanInfoMap" init_value " new MBeanInfoMap()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 979074 // mbeanInfoMap (<unidirectional association>)
	  b parent class_ref 496514 // MBeanInfoMap
      end
    end

    class 498306 "WeakIdentityHashMap"
      visibility package 
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A map where keys are compared using identity comparison (like
IdentityHashMap) but where the presence of an object as a key in
the map does not prevent it being garbage collected (like
WeakHashMap).  This class does not implement the Map interface
because it is difficult to ensure correct semantics for iterators
over the entrySet().</p>

<p>Because we do not implement Map, we do not copy the questionable
interface where you can call get(k) or remove(k) for any type of k,
which of course can only have an effect if k is of type K.</p>

<p>This map does not support null keys.</p>


The approach
is to wrap each key in a WeakReference and use the wrapped value as
a key in an ordinary HashMap.  The WeakReference has to be a
subclass IdentityWeakReference (IWR) where two IWRs are equal if
they refer to the same object.  This enables us to find the entry
again.
"
      operation 2999554 "WeakIdentityHashMap"
	cpp_inline private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2999682 "make"
	class_operation cpp_inline package return_type class_ref 498306 // WeakIdentityHashMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2999810 "get"
	cpp_inline package explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2999938 "put"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3000066 "remove"
	cpp_inline public explicit_return_type "V"
	nparams 1
	  param inout name "key" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3000194 "expunge"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3000322 "makeReference"
	cpp_inline private return_type class_ref 131330 // WeakReference
	nparams 1
	  param inout name "referent" explicit_type "K"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3000450 "makeReference"
	cpp_inline private return_type class_ref 131330 // WeakReference
	nparams 2
	  param inout name "referent" explicit_type "K"
	  param inout name "q" type class_ref 130946 // ReferenceQueue
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${t0} ${p0}, ${t1}<K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 500482 "IdentityWeakReference"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 983938 // <realization>
	  relation 983938 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 983938 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	operation 3000578 "IdentityWeakReference"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "o" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3000706 "IdentityWeakReference"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "o" explicit_type "T"
	    param inout name "q" type class_ref 130946 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3000834 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3000962 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 621954 "hashCode"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end
      end

      classrelation 984066 // map (<unidirectional association>)
	relation 984066 --->
	  a role_name "map" init_value " newMap()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<WeakReference<K>, V> ${name}${value};
"
	    classrelation_ref 984066 // map (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      classrelation 984194 // refQueue (<unidirectional association>)
	relation 984194 --->
	  a role_name "refQueue" init_value " new ReferenceQueue<K>()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	    classrelation_ref 984194 // refQueue (<unidirectional association>)
	  b parent class_ref 130946 // ReferenceQueue
      end
    end

    class 498434 "MXBeanProxy"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Helper class for an {@link InvocationHandler} that forwards methods from an
MXBean interface to a named
MXBean in an MBean Server and handles translation between the
arbitrary Java types in the interface and the Open Types used
by the MXBean.</p>

@since 1.6
"
      operation 2988674 "MXBeanProxy"
	public explicit_return_type ""
	nparams 1
	  param inout name "mxbeanInterface" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 498562 "Visitor"
	visibility private 
	nactuals 2
	actual class class_ref 495874 // MBeanAnalyzer
	  rank 0 explicit_value ""
	actual class class_ref 496002 // MBeanVisitor
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 979842 // <realization>
	  relation 979842 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 979842 // <realization>
	    b parent class_ref 496002 // MBeanVisitor
	end

	operation 2988802 "visitAttribute"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "attributeName" type class_ref 128130 // String
	    param inout name "getter" type class_ref 489858 // ConvertingMethod
	    param inout name "setter" type class_ref 489858 // ConvertingMethod
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2988930 "visitOperation"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "operationName" type class_ref 128130 // String
	    param inout name "operation" type class_ref 489858 // ConvertingMethod
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 498690 "Handler"
	abstract visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 2989058 "Handler"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "name" type class_ref 128130 // String
	    param inout name "cm" type class_ref 489858 // ConvertingMethod
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2989186 "getName"
	  package return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2989314 "getConvertingMethod"
	  package return_type class_ref 489858 // ConvertingMethod
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2989442 "invoke"
	  abstract package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "mbsc" type class_ref 485250 // MBeanServerConnection
	    param inout name "name" type class_ref 485506 // ObjectName
	    param inout name "args" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 132226 // Exception
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 979970 // name (<unidirectional association>)
	  relation 979970 --->
	    a role_name "name" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 979970 // name (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 980098 // convertingMethod (<unidirectional association>)
	  relation 980098 --->
	    a role_name "convertingMethod" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 980098 // convertingMethod (<unidirectional association>)
	    b parent class_ref 489858 // ConvertingMethod
	end
      end

      class 498818 "GetHandler"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 980226 // <generalisation>
	  relation 980226 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 980226 // <generalisation>
	    b parent class_ref 498690 // Handler
	end

	operation 2989570 "GetHandler"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "attributeName" type class_ref 128130 // String
	    param inout name "cm" type class_ref 489858 // ConvertingMethod
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2989698 "invoke"
	  package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "mbsc" type class_ref 485250 // MBeanServerConnection
	    param inout name "name" type class_ref 485506 // ObjectName
	    param inout name "args" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 132226 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 498946 "SetHandler"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 980354 // <generalisation>
	  relation 980354 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 980354 // <generalisation>
	    b parent class_ref 498690 // Handler
	end

	operation 2989826 "SetHandler"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "attributeName" type class_ref 128130 // String
	    param inout name "cm" type class_ref 489858 // ConvertingMethod
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2989954 "invoke"
	  package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "mbsc" type class_ref 485250 // MBeanServerConnection
	    param inout name "name" type class_ref 485506 // ObjectName
	    param inout name "args" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 132226 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 499074 "InvokeHandler"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 980482 // <generalisation>
	  relation 980482 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 980482 // <generalisation>
	    b parent class_ref 498690 // Handler
	end

	operation 2990082 "InvokeHandler"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "operationName" type class_ref 128130 // String
	    param inout name "signature" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "cm" type class_ref 489858 // ConvertingMethod
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2990210 "invoke"
	  package return_type class_ref 129538 // Object
	  nparams 3
	    param inout name "mbsc" type class_ref 485250 // MBeanServerConnection
	    param inout name "name" type class_ref 485506 // ObjectName
	    param inout name "args" type class_ref 129538 // Object
	  multiplicity "[]"
	  nexceptions 1
	    exception class_ref 132226 // Exception
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 980610 // signature (<unidirectional association>)
	  relation 980610 --->
	    a role_name "signature" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 980610 // signature (<unidirectional association>)
	    b parent class_ref 128130 // String
	end
      end

      operation 2990338 "invoke"
	public return_type class_ref 129538 // Object
	nparams 4
	  param inout name "mbsc" type class_ref 485250 // MBeanServerConnection
	  param inout name "name" type class_ref 485506 // ObjectName
	  param inout name "method" type class_ref 137858 // Method
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 980738 // handlerMap (<unidirectional association>)
	relation 980738 --->
	  a role_name "handlerMap" init_value " newMap()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Method, Handler> ${name}${value};
"
	    classrelation_ref 980738 // handlerMap (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end
    end

    class 499202 "MXBeanSupport"
      visibility public 
      nactuals 1
      actual class class_ref 498050 // MBeanSupport
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base class for MXBeans.

@since 1.6
"
      classrelation 980866 // <realization>
	relation 980866 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 980866 // <realization>
	  b parent class_ref 498050 // MBeanSupport
      end

      operation 2990466 "MXBeanSupport"
	public explicit_return_type ""
	nparams 2
	  param inout name "resource" explicit_type "T"
	  param inout name "mxbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Construct an MXBean that wraps the given resource using the
given MXBean interface.</p>

@param resource the underlying resource for the new MXBean.

@param mxbeanInterface the interface to be used to determine
the MXBean's management interface.

@param <T> a type parameter that allows the compiler to check
that {@code resource} implements {@code mxbeanInterface},
provided that {@code mxbeanInterface} is a class constant like
{@code SomeMXBean.class}.

@throws IllegalArgumentException if {@code resource} is null or
if it does not implement the class {@code mxbeanInterface} or if
that class is not a valid MXBean interface.
"
      end

      operation 2990594 "getMBeanIntrospector"
	package return_type class_ref 494594 // MBeanIntrospector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<ConvertingMethod> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2990722 "getCookie"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2990850 "findMXBeanInterface"
	class_operation package return_type class_ref 130818 // Class
	nparams 1
	  param inout name "resourceClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<? super T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2990978 "transitiveInterfaces"
	class_operation private return_type class_ref 192258 // Set
	nparams 1
	  param inout name "c" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<?>> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return all interfaces inherited by this class, directly or
indirectly through the parent class and interfaces.
"
      end

      operation 2991106 "transitiveInterfaces"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "c" type class_ref 130818 // Class
	  param inout name "intfs" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<Class<?>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2991234 "register"
	public explicit_return_type "void"
	nparams 2
	  param inout name "server" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	nexceptions 1
	  exception class_ref 485762 // InstanceAlreadyExistsException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "The sequence of events for tracking inter-MXBean references is
relatively complicated.  We use the magical preRegister2 method
which the MBeanServer knows about.  The steps during registration
are:
(1) Call user preRegister, if any.  If exception, abandon.
(2) Call preRegister2 and hence this register method.  If exception,
call postRegister(false) and abandon.
(3) Try to register the MBean.  If exception, call registerFailed()
which will call the unregister method.  (Also call postRegister(false).)
(4) If we get this far, we can call postRegister(true).

When we are wrapped in an instance of javax.management.StandardMBean,
things are simpler.  That class calls this method from its preRegister,
and propagates any exception.  There is no user preRegister in this case.
If this method succeeds but registration subsequently fails,
StandardMBean calls unregister from its postRegister(false) method.
"
      end

      operation 2991362 "unregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 980994 // lock (<unidirectional association>)
	relation 980994 --->
	  a role_name "lock" init_value " new Object()" const_relation private
	    comment " for mxbeanLookup and objectName"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 980994 // lock (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      classrelation 981122 // mxbeanLookup (<unidirectional association>)
	relation 981122 --->
	  a role_name "mxbeanLookup" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 981122 // mxbeanLookup (<unidirectional association>)
	  b parent class_ref 490370 // MXBeanLookup
      end

      classrelation 981250 // objectName (<unidirectional association>)
	relation 981250 --->
	  a role_name "objectName" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 981250 // objectName (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end
    end

    class 499458 "ObjectInputStreamWithLoader"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class deserializes an object in the context of a specific class loader.

@since 1.5
"
      classrelation 981634 // <generalisation>
	relation 981634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 981634 // <generalisation>
	  b parent class_ref 168962 // ObjectInputStream
      end

      classrelation 981762 // loader (<unidirectional association>)
	relation 981762 --->
	  a role_name "loader" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 981762 // loader (<unidirectional association>)
	  b parent class_ref 129026 // ClassLoader
      end

      operation 2992258 "ObjectInputStreamWithLoader"
	public explicit_return_type ""
	nparams 2
	  param inout name "in" type class_ref 146434 // InputStream
	  param inout name "theLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@exception IOException Signals that an I/O exception of some
sort has occurred.
@exception StreamCorruptedException The object stream is corrupt.
"
      end

      operation 2992386 "resolveClass"
	protected return_type class_ref 130818 // Class
	nparams 1
	  param inout name "aClass" type class_ref 170242 // ObjectStreamClass
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 499842 "StandardMBeanIntrospector"
      visibility package 
      nactuals 1
      actual class class_ref 494594 // MBeanIntrospector
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "@since 1.6
"
      classrelation 983170 // <realization>
	relation 983170 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 983170 // <realization>
	  b parent class_ref 494594 // MBeanIntrospector
      end

      classrelation 983298 // instance (<unidirectional association>)
	relation 983298 --->
	  a role_name "instance" init_value "
        new StandardMBeanIntrospector()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 983298 // instance (<unidirectional association>)
	  b parent class_ref 499842 // StandardMBeanIntrospector
      end

      operation 2994434 "getInstance"
	class_operation package return_type class_ref 499842 // StandardMBeanIntrospector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2994562 "getPerInterfaceMap"
	package return_type class_ref 496386 // PerInterfaceMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2994690 "getMBeanInfoMap"
	package return_type class_ref 496514 // MBeanInfoMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2994818 "getAnalyzer"
	package return_type class_ref 495874 // MBeanAnalyzer
	nparams 1
	  param inout name "mbeanInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2994946 "isMXBean"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2995074 "mFrom"
	package return_type class_ref 137858 // Method
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2995202 "getName"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2995330 "getGenericReturnType"
	package return_type class_ref 490114 // Type
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2995458 "getGenericParameterTypes"
	package return_type class_ref 490114 // Type
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2995586 "getSignature"
	package return_type class_ref 128130 // String
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2995714 "checkMethod"
	package explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2995842 "invokeM2"
	package return_type class_ref 129538 // Object
	nparams 4
	  param inout name "m" type class_ref 137858 // Method
	  param inout name "target" type class_ref 129538 // Object
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "cookie" type class_ref 129538 // Object
	nexceptions 3
	  exception class_ref 193410 // InvocationTargetException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 486018 // MBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2995970 "validParameter"
	package explicit_return_type "boolean"
	nparams 4
	  param inout name "m" type class_ref 137858 // Method
	  param inout name "value" type class_ref 129538 // Object
	  param in name "paramNo" explicit_type "int"
	  param inout name "cookie" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2996098 "getMBeanAttributeInfo"
	package return_type class_ref 496642 // MBeanAttributeInfo
	nparams 3
	  param inout name "attributeName" type class_ref 128130 // String
	  param inout name "getter" type class_ref 137858 // Method
	  param inout name "setter" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2996226 "getMBeanOperationInfo"
	package return_type class_ref 496770 // MBeanOperationInfo
	nparams 2
	  param inout name "operationName" type class_ref 128130 // String
	  param inout name "operation" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2996354 "getBasicMBeanDescriptor"
	package return_type class_ref 489986 // Descriptor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2996482 "getMBeanDescriptor"
	package return_type class_ref 489986 // Descriptor
	nparams 1
	  param inout name "resourceClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2996610 "isDefinitelyImmutableInfo"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "implClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Return true if and only if we can be sure that the given MBean implementation
class has immutable MBeanInfo.  A Standard MBean that is a
NotificationBroadcaster is allowed to return different values at
different times from its getNotificationInfo() method, which is when
we might not know if it is immutable.  But if it is a subclass of
NotificationBroadcasterSupport and does not override
getNotificationInfo(), then we know it won't change.
"
      end

      classrelation 983426 // definitelyImmutable (<unidirectional association>)
	relation 983426 --->
	  a role_name "definitelyImmutable" init_value "
            new WeakHashMap<Class<?>, Boolean>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>, Boolean> ${name}${value};
"
	    classrelation_ref 983426 // definitelyImmutable (<unidirectional association>)
	  b parent class_ref 192002 // WeakHashMap
      end

      classrelation 983554 // perInterfaceMap (<unidirectional association>)
	relation 983554 --->
	  a role_name "perInterfaceMap" init_value " new PerInterfaceMap<Method>()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Method> ${name}${value};
"
	    classrelation_ref 983554 // perInterfaceMap (<unidirectional association>)
	  b parent class_ref 496386 // PerInterfaceMap
      end

      classrelation 983682 // mbeanInfoMap (<unidirectional association>)
	relation 983682 --->
	  a role_name "mbeanInfoMap" init_value " new MBeanInfoMap()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 983682 // mbeanInfoMap (<unidirectional association>)
	  b parent class_ref 496514 // MBeanInfoMap
      end
    end

    class 499970 "StandardMBeanSupport"
      visibility public 
      nactuals 1
      actual class class_ref 498050 // MBeanSupport
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base class for Standard MBeans.

@since 1.6
"
      classrelation 983810 // <realization>
	relation 983810 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 983810 // <realization>
	  b parent class_ref 498050 // MBeanSupport
      end

      operation 2996738 "StandardMBeanSupport"
	public explicit_return_type ""
	nparams 2
	  param inout name "resource" explicit_type "T"
	  param inout name "mbeanInterfaceType" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 486146 // NotCompliantMBeanException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Construct a Standard MBean that wraps the given resource using the
given Standard MBean interface.</p>

@param resource the underlying resource for the new MBean.
@param mbeanInterfaceType the class or interface to be used to determine
      the MBean's management interface.  An interface if this is a
      classic Standard MBean; a class if this is a {@code @ManagedResource}.
@param <T> a type parameter that allows the compiler to check
      that {@code resource} implements {@code mbeanInterfaceType},
      provided that {@code mbeanInterfaceType} is a class constant like
      {@code SomeMBean.class}.
@throws IllegalArgumentException if {@code resource} is null or
      if it does not implement the class {@code mbeanInterfaceType} or if
      that class is not a valid Standard MBean interface.
"
      end

      operation 2996866 "getMBeanIntrospector"
	package return_type class_ref 494594 // MBeanIntrospector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2996994 "getCookie"
	package return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2997122 "register"
	public explicit_return_type "void"
	nparams 2
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2997250 "unregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 2997378 "getMBeanInfo"
	public return_type class_ref 487426 // MBeanInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Standard MBeans that are NotificationBroadcasters can return a different
MBeanNotificationInfo[] every time getMBeanInfo() is called, so we have
to reconstruct this MBeanInfo if necessary.
"
      end
    end

    class 500098 "Util"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 2997506 "newObjectName"
	class_operation public return_type class_ref 485506 // ObjectName
	nparams 1
	  param inout name "string" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2997634 "newMap"
	class_operation package return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2997762 "newSynchronizedMap"
	class_operation package return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2997890 "newIdentityHashMap"
	class_operation package return_type class_ref 500226 // IdentityHashMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2998018 "newSynchronizedIdentityHashMap"
	class_operation package return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2998146 "newSortedMap"
	class_operation package return_type class_ref 500354 // SortedMap
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2998274 "newSortedMap"
	class_operation package return_type class_ref 500354 // SortedMap
	nparams 1
	  param inout name "comp" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2998402 "newInsertionOrderMap"
	class_operation package return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V> ${type}<K, V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2998530 "newSet"
	class_operation package return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2998658 "newSet"
	class_operation package return_type class_ref 192258 // Set
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2998786 "newList"
	class_operation package return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2998914 "newList"
	class_operation package return_type class_ref 175362 // List
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2999042 "cast"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "x" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " This method can be used by code that is deliberately violating the
allowed checked casts.  Rather than marking the whole method containing
the code with @SuppressWarnings, you can use a call to this method for
the exact place where you need to escape the constraints.  Typically
you will \"import static\" this method and then write either
   X x = cast(y);
or, if that doesn't work (e.g. X is a type variable)
   Util.<X>cast(y);
"
      end

      operation 2999170 "hashCode"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "names" type class_ref 128130 // String
	multiplicity "[]"
	  param inout name "values" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a descriptor hashcode from its names and values.
@param names  the sorted array of descriptor names.
@param values the array of descriptor values.
@return a hash code value, as described in {@link #hashCode(Descriptor)}
"
      end

      operation 2999298 "wildmatch"
	class_operation private explicit_return_type "boolean"
	nparams 6
	  param in name "str" type class_ref 128130 // String
	  param in name "pat" type class_ref 128130 // String
	  param in name "stri" explicit_type "int"
	  param in name "strend" explicit_type "int"
	  param in name "pati" explicit_type "int"
	  param in name "patend" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, ${t2} ${p2}, final ${t3} ${p3}, ${t4} ${p4}, final ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Match a part of a string against a shell-style pattern.
The only pattern characters recognized are <code>?</code>,
standing for any one character,
and <code>*</code>, standing for any string of
characters, including the empty string. For instance,
{@code wildmatch(\"sandwich\",\"sa?d*ch\",1,4,1,4)} will match
{@code \"and\"} against {@code \"a?d\"}.

@param str  the string containing the sequence to match.
@param pat  a string containing a pattern to match the sub string
against.
@param stri   the index in the string at which matching should begin.
@param strend the index in the string at which the matching should
end.
@param pati   the index in the pattern at which matching should begin.
@param patend the index in the pattern at which the matching should
end.

@return true if and only if the string matches the pattern.

 The algorithm is a classical one.  We advance pointers in
parallel through str and pat.  If we encounter a star in pat,
we remember its position and continue advancing.  If at any
stage we get a mismatch between str and pat, we look to see if
there is a remembered star.  If not, we fail.  If so, we
retreat pat to just past that star and str to the position
after the last one we tried, and we let the match advance
again.

Even though there is only one remembered star position, the
algorithm works when there are several stars in the pattern.
When we encounter the second star, we forget the first one.
This is OK, because if we get to the second star in A*B*C
(where A etc are arbitrary strings), we have already seen AXB.
We're therefore setting up a match of *C against the remainder
of the string, which will match if that remainder looks like
YC, so the whole string looks like AXBYC.
"
      end

      operation 2999426 "wildmatch"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "str" type class_ref 128130 // String
	  param inout name "pat" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Match a string against a shell-style pattern.  The only pattern
characters recognized are <code>?</code>, standing for any one
character, and <code>*</code>, standing for any string of
characters, including the empty string.

@param str the string to match.
@param pat the pattern to match the string against.

@return true if and only if the string matches the pattern.
"
      end
    end
  end

  deploymentview 145922 "mbeanserver"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 324098 "Repository"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.defaults.ServiceName;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.logging.Level;
import java.util.Map;
import java.util.Set;
import javax.management.DynamicMBean;
import javax.management.InstanceAlreadyExistsException;
import javax.management.InstanceNotFoundException;
import javax.management.ObjectName;
import javax.management.QueryExp;
import javax.management.RuntimeOperationsException;
import static com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER;
${definition}"
      associated_elems
	class_ref 488194 // Repository
      end
      comment "Copyright (c) 1999, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 324482 "ModifiableClassLoaderRepository"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.ObjectName;
import javax.management.loading.ClassLoaderRepository;
${definition}"
      associated_elems
	class_ref 489474 // ModifiableClassLoaderRepository
      end
      comment "Copyright (c) 2002, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 324610 "ClassLoaderRepositorySupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.Permission;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import javax.management.MBeanPermission;
import javax.management.ObjectName;
import javax.management.loading.PrivateClassLoader;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 489602 // ClassLoaderRepositorySupport
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 324738 "ConvertingMethod"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import javax.management.Descriptor;
import javax.management.MBeanException;
import javax.management.openmbean.OpenDataException;
import javax.management.openmbean.OpenType;
import sun.reflect.misc.MethodUtil;
${definition}"
      associated_elems
	class_ref 489858 // ConvertingMethod
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 324866 "MXBeanMappingFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.openmbean.*;
import com.sun.jmx.mbeanserver.MXBeanMapping;
import com.sun.jmx.mbeanserver.DefaultMXBeanMappingFactory;
import java.lang.reflect.Type;
${definition}"
      associated_elems
	class_ref 490882 // MXBeanMappingFactory
      end
      comment "Copyright (c) 2007, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 324994 "MXBeanMapping"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.lang.reflect.Type;
import javax.management.openmbean.OpenDataException;
import javax.management.openmbean.OpenType;
${definition}"
      associated_elems
	class_ref 490626 // MXBeanMapping
      end
      comment "Copyright (c) 2007, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 325122 "DefaultMXBeanMappingFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.remote.util.EnvHelp;
import java.io.InvalidObjectException;
import java.lang.annotation.Annotation;
import java.lang.annotation.ElementType;
import java.lang.ref.WeakReference;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Proxy;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.WeakHashMap;
import javax.management.JMX;
import javax.management.ObjectName;
import javax.management.openmbean.ArrayType;
import javax.management.openmbean.CompositeData;
import javax.management.openmbean.CompositeDataInvocationHandler;
import javax.management.openmbean.CompositeDataSupport;
import javax.management.openmbean.CompositeDataView;
import javax.management.openmbean.CompositeType;
import javax.management.openmbean.OpenDataException;
import javax.management.openmbean.OpenType;
import javax.management.openmbean.SimpleType;
import javax.management.openmbean.TabularData;
import javax.management.openmbean.TabularDataSupport;
import javax.management.openmbean.TabularType;
import sun.reflect.misc.MethodUtil;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 490754 // DefaultMXBeanMappingFactory
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 325250 "DescriptorCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.WeakReference;
import java.util.WeakHashMap;
import javax.management.Descriptor;
import javax.management.ImmutableDescriptor;
import javax.management.JMX;
${definition}"
      associated_elems
	class_ref 493826 // DescriptorCache
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 325506 "DynamicMBean2"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.DynamicMBean;
import javax.management.MBeanServer;
import javax.management.ObjectName;
${definition}"
      associated_elems
	class_ref 494210 // DynamicMBean2
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 325634 "GetPropertyAction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PrivilegedAction;
${definition}"
      associated_elems
	class_ref 494338 // GetPropertyAction
      end
      comment "Copyright (c) 2002, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 325762 "Introspector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import java.lang.ref.SoftReference;
import java.lang.reflect.AnnotatedElement;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.Proxy;
import java.lang.reflect.UndeclaredThrowableException;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.WeakHashMap;
import javax.management.Descriptor;
import javax.management.DescriptorKey;
import javax.management.DynamicMBean;
import javax.management.ImmutableDescriptor;
import javax.management.MBeanInfo;
import javax.management.NotCompliantMBeanException;
import com.sun.jmx.remote.util.EnvHelp;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.security.AccessController;
import javax.management.AttributeNotFoundException;
import javax.management.openmbean.CompositeData;
import sun.reflect.misc.MethodUtil;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 494466 // Introspector
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 325890 "SunJmxMBeanServer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.MBeanServer;
import javax.management.MBeanServerDelegate;
${definition}"
      associated_elems
	class_ref 495362 // SunJmxMBeanServer
      end
      comment "Copyright (c) 2000, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 326018 "JmxMBeanServer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.interceptor.DefaultMBeanServerInterceptor;
import com.sun.jmx.interceptor.MBeanServerInterceptor;
import java.io.ObjectInputStream;
import java.security.AccessController;
import java.security.Permission;
import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.InstanceAlreadyExistsException;
import javax.management.InstanceNotFoundException;
import javax.management.IntrospectionException;
import javax.management.InvalidAttributeValueException;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanPermission;
import javax.management.MBeanRegistrationException;
import javax.management.MBeanServer;
import javax.management.MBeanServerDelegate;
import javax.management.MBeanServerPermission;
import javax.management.NotCompliantMBeanException;
import javax.management.NotificationFilter;
import javax.management.NotificationListener;
import javax.management.ObjectInstance;
import javax.management.ObjectName;
import javax.management.OperationsException;
import javax.management.QueryExp;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
import javax.management.loading.ClassLoaderRepository;
${definition}"
      associated_elems
	class_ref 495234 // JmxMBeanServer
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 326274 "JmxMBeanServerBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.MBeanServer;
import javax.management.MBeanServerDelegate;
import javax.management.MBeanServerBuilder;
${definition}"
      associated_elems
	class_ref 495618 // JmxMBeanServerBuilder
      end
      comment "Copyright (c) 2002, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 326402 "MBeanAnalyzer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.security.AccessController;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.management.NotCompliantMBeanException;
import static com.sun.jmx.mbeanserver.Util.*;
${definition}"
      associated_elems
	class_ref 495874 // MBeanAnalyzer
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 326530 "MBeanInstantiator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Modifier;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.Permission;
import java.security.Permissions;
import java.security.PrivilegedAction;
import java.security.ProtectionDomain;
import java.util.Map;
import java.util.logging.Level;
import javax.management.InstanceNotFoundException;
import javax.management.MBeanException;
import javax.management.MBeanPermission;
import javax.management.NotCompliantMBeanException;
import javax.management.ObjectName;
import javax.management.OperationsException;
import javax.management.ReflectionException;
import javax.management.RuntimeErrorException;
import javax.management.RuntimeMBeanException;
import javax.management.RuntimeOperationsException;
import sun.reflect.misc.ConstructorUtil;
import sun.reflect.misc.ReflectUtil;
import static com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER;
${definition}"
      associated_elems
	class_ref 487938 // MBeanInstantiator
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 326658 "MBeanIntrospector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.WeakReference;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.List;
import java.util.WeakHashMap;
import javax.management.Descriptor;
import javax.management.ImmutableDescriptor;
import javax.management.IntrospectionException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanConstructorInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanOperationInfo;
import javax.management.NotCompliantMBeanException;
import javax.management.NotificationBroadcaster;
import javax.management.ReflectionException;
import sun.reflect.misc.ReflectUtil;
import static com.sun.jmx.mbeanserver.Util.*;
${definition}"
      associated_elems
	class_ref 494594 // MBeanIntrospector
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 327426 "MBeanServerDelegateImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.logging.Level;
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.DynamicMBean;
import javax.management.InvalidAttributeValueException;
import javax.management.JMRuntimeException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.MBeanServerDelegate;
import javax.management.ObjectName;
import javax.management.ReflectionException;
import javax.management.RuntimeOperationsException;
${definition}"
      associated_elems
	class_ref 497410 // MBeanServerDelegateImpl
      end
      comment "Copyright (c) 2002, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 327554 "MBeanSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.Attribute;
import javax.management.AttributeList;
import javax.management.AttributeNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.NotCompliantMBeanException;
import javax.management.ObjectName;
import javax.management.ReflectionException;
import com.sun.jmx.mbeanserver.MXBeanMappingFactory;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 498050 // MBeanSupport
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 327682 "MXBeanIntrospector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.MBeanIntrospector.MBeanInfoMap;
import com.sun.jmx.mbeanserver.MBeanIntrospector.PerInterfaceMap;
import java.lang.annotation.Annotation;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import javax.management.Descriptor;
import javax.management.ImmutableDescriptor;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanException;
import javax.management.MBeanOperationInfo;
import javax.management.MBeanParameterInfo;
import javax.management.NotCompliantMBeanException;
import javax.management.openmbean.OpenMBeanAttributeInfoSupport;
import javax.management.openmbean.OpenMBeanOperationInfoSupport;
import javax.management.openmbean.OpenMBeanParameterInfo;
import javax.management.openmbean.OpenMBeanParameterInfoSupport;
import javax.management.openmbean.OpenType;
${definition}"
      associated_elems
	class_ref 498178 // MXBeanIntrospector
      end
      comment "Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 327810 "MXBeanLookup"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
import java.lang.ref.WeakReference;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Proxy;
import java.security.AccessController;
import javax.management.InstanceAlreadyExistsException;
import javax.management.JMX;
import javax.management.MBeanServerConnection;
import javax.management.MBeanServerInvocationHandler;
import javax.management.ObjectName;
import javax.management.openmbean.OpenDataException;
import static com.sun.jmx.mbeanserver.Util.*;
${definition}"
      associated_elems
	class_ref 490370 // MXBeanLookup
      end
      comment "Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 327938 "MXBeanProxy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
import java.util.Map;
import javax.management.Attribute;
import javax.management.MBeanServerConnection;
import javax.management.NotCompliantMBeanException;
import javax.management.ObjectName;
import static com.sun.jmx.mbeanserver.Util.*;
${definition}"
      associated_elems
	class_ref 498434 // MXBeanProxy
      end
      comment "Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 328066 "MXBeanSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.Set;
import javax.management.InstanceAlreadyExistsException;
import javax.management.JMX;
import javax.management.MBeanServer;
import javax.management.NotCompliantMBeanException;
import javax.management.ObjectName;
import static com.sun.jmx.mbeanserver.Util.*;
${definition}"
      associated_elems
	class_ref 499202 // MXBeanSupport
      end
      comment "Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 328194 "NamedObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.*;
${definition}"
      associated_elems
	class_ref 489346 // NamedObject
      end
      comment "Copyright (c) 1999, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 328322 "ObjectInputStreamWithLoader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamClass;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 499458 // ObjectInputStreamWithLoader
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 328450 "PerInterface"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import javax.management.AttributeNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanInfo;
import javax.management.ReflectionException;
import static com.sun.jmx.mbeanserver.Util.*;
${definition}"
      associated_elems
	class_ref 496898 // PerInterface
      end
      comment "Copyright (c) 2005, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 328578 "SecureClassLoaderRepository"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.loading.ClassLoaderRepository;
${definition}"
      associated_elems
	class_ref 495490 // SecureClassLoaderRepository
      end
      comment "Copyright (c) 2002, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 328706 "StandardMBeanIntrospector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.WeakHashMap;
import javax.management.Descriptor;
import javax.management.ImmutableDescriptor;
import javax.management.IntrospectionException;
import javax.management.MBeanAttributeInfo;
import javax.management.MBeanException;
import javax.management.MBeanOperationInfo;
import javax.management.NotCompliantMBeanException;
import javax.management.NotificationBroadcaster;
import javax.management.NotificationBroadcasterSupport;
import sun.reflect.misc.MethodUtil;
${definition}"
      associated_elems
	class_ref 499842 // StandardMBeanIntrospector
      end
      comment "Copyright (c) 2005, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 328834 "StandardMBeanSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.reflect.Method;
import javax.management.MBeanInfo;
import javax.management.MBeanServer;
import javax.management.NotCompliantMBeanException;
import javax.management.ObjectName;
${definition}"
      associated_elems
	class_ref 499970 // StandardMBeanSupport
      end
      comment "Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 328962 "Util"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;
${definition}"
      associated_elems
	class_ref 500098 // Util
      end
      comment "Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 329090 "WeakIdentityHashMap"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.Map;
import static com.sun.jmx.mbeanserver.Util.*;
${definition}"
      associated_elems
	class_ref 498306 // WeakIdentityHashMap
      end
      comment "Copyright (c) 2005, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
