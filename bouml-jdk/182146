format 222
"attribute" // jdk1.8::java::nio::file::attribute
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/nio/file/attribute/"
  java_package "java.nio.file.attribute"
  classview 174850 "attribute"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 985730 "FileAttribute"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that encapsulates the value of a file attribute that can be set
atomically when creating a new file or directory by invoking the {@link
java.nio.file.Files#createFile createFile} or {@link
java.nio.file.Files#createDirectory createDirectory} methods.

@param <T> The type of the file attribute value

@since 1.7
@see PosixFilePermissions#asFileAttribute
"
      operation 7864194 "name"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the attribute name.

@return The attribute name
"
      end

      operation 7864322 "value"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the attribute value.

@return The attribute value
"
      end
    end

    class 996098 "PosixFilePermission"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the bits for use with the {@link PosixFileAttributes#permissions()
permissions} attribute.

<p> The {@link PosixFilePermissions} class defines methods for manipulating
set of permissions.

@since 1.7
"
      attribute 1829378 "OWNER_READ"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Read permission, owner.

"
      end

      attribute 1829506 "OWNER_WRITE"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Write permission, owner.

"
      end

      attribute 1829634 "OWNER_EXECUTE"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Execute/search permission, owner.

"
      end

      attribute 1829762 "GROUP_READ"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Read permission, group.

"
      end

      attribute 1829890 "GROUP_WRITE"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Write permission, group.

"
      end

      attribute 1830018 "GROUP_EXECUTE"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Execute/search permission, group.

"
      end

      attribute 1830146 "OTHERS_READ"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Read permission, others.

"
      end

      attribute 1830274 "OTHERS_WRITE"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Write permission, others.

"
      end

      attribute 1830402 "OTHERS_EXECUTE"
	public type class_ref 996098 // PosixFilePermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Execute/search permission, others.
"
      end
    end

    class 996226 "UserPrincipal"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code Principal} representing an identity used to determine access rights
to objects in a file system.

<p> On many platforms and file systems an entity requires appropriate access
rights or permissions in order to access objects in a file system. The
access rights are generally performed by checking the identity of the entity.
For example, on implementations that use Access Control Lists (ACLs) to
enforce privilege separation then a file in the file system may have an
associated ACL that determines the access rights of identities specified in
the ACL.

<p> A {@code UserPrincipal} object is an abstract representation of an
identity. It has a {@link #getName() name} that is typically the username or
account name that it represents. User principal objects may be obtained using
a {@link UserPrincipalLookupService}, or returned by {@link
FileAttributeView} implementations that provide access to identity related
attributes. For example, the {@link AclFileAttributeView} and {@link
PosixFileAttributeView} provide access to a file's {@link
PosixFileAttributes#owner owner}.

@since 1.7
"
      classrelation 3320322 // <generalisation>
	relation 3320322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3320322 // <generalisation>
	  b parent class_ref 510594 // Principal
      end
    end

    class 996354 "FileTime"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents the value of a file's time stamp attribute. For example, it may
represent the time that the file was last
{@link BasicFileAttributes#lastModifiedTime() modified},
{@link BasicFileAttributes#lastAccessTime() accessed},
or {@link BasicFileAttributes#creationTime() created}.

<p> Instances of this class are immutable.

@since 1.7
@see java.nio.file.Files#setLastModifiedTime
@see java.nio.file.Files#getLastModifiedTime
"
      classrelation 3319810 // <realization>
	relation 3319810 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3319810 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3319938 // unit (<unidirectional association>)
	relation 3319938 --->
	  a role_name "unit" const_relation private
	    comment "
The unit of granularity to interpret the value. Null if
this {@code FileTime} is converted from an {@code Instant},
the {@code value} and {@code unit} pair will not be used
in this scenario.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3319938 // unit (<unidirectional association>)
	  b parent class_ref 935938 // TimeUnit
      end

      attribute 1827330 "value"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The value since the epoch; can be negative.

"
      end

      classrelation 3320066 // instant (<unidirectional association>)
	relation 3320066 --->
	  a role_name "instant" private
	    comment "
The value as Instant (created lazily, if not from an instant)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3320066 // instant (<unidirectional association>)
	  b parent class_ref 1003778 // Instant
      end

      classrelation 3320194 // valueAsString (<unidirectional association>)
	relation 3320194 --->
	  a role_name "valueAsString" private
	    comment "
The value return by toString (created lazily)

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3320194 // valueAsString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7864450 "FileTime"
	private explicit_return_type ""
	nparams 3
	  param in name "value" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.
"
      end

      operation 7864578 "from"
	class_operation public return_type class_ref 996354 // FileTime
	nparams 2
	  param in name "value" explicit_type "long"
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code FileTime} representing a value at the given unit of
granularity.

@param   value
         the value since the epoch (1970-01-01T00:00:00Z); can be
         negative
@param   unit
         the unit of granularity to interpret the value

@return  a {@code FileTime} representing the given value
"
      end

      operation 7864706 "fromMillis"
	class_operation public return_type class_ref 996354 // FileTime
	nparams 1
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code FileTime} representing the given value in milliseconds.

@param   value
         the value, in milliseconds, since the epoch
         (1970-01-01T00:00:00Z); can be negative

@return  a {@code FileTime} representing the given value
"
      end

      operation 7864834 "from"
	class_operation public return_type class_ref 996354 // FileTime
	nparams 1
	  param inout name "instant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code FileTime} representing the same point of time value
on the time-line as the provided {@code Instant} object.

@param   instant
         the instant to convert
@return  a {@code FileTime} representing the same point on the time-line
         as the provided instant
@since 1.8
"
      end

      operation 7864962 "to"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 935938 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value at the given unit of granularity.

<p> Conversion from a coarser granularity that would numerically overflow
saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}
if positive.

@param   unit
         the unit of granularity for the return value

@return  value in the given unit of granularity, since the epoch
         since the epoch (1970-01-01T00:00:00Z); can be negative
"
      end

      operation 7865090 "toMillis"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value in milliseconds.

<p> Conversion from a coarser granularity that would numerically overflow
saturate to {@code Long.MIN_VALUE} if negative or {@code Long.MAX_VALUE}
if positive.

@return  the value in milliseconds, since the epoch (1970-01-01T00:00:00Z)
"
      end

      attribute 1827458 "HOURS_PER_DAY"
	class_attribute const_attribute private explicit_type "long"
	init_value " 24L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Time unit constants for conversion.

"
      end

      attribute 1827586 "MINUTES_PER_HOUR"
	class_attribute const_attribute private explicit_type "long"
	init_value " 60L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1827714 "SECONDS_PER_MINUTE"
	class_attribute const_attribute private explicit_type "long"
	init_value " 60L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1827842 "SECONDS_PER_HOUR"
	class_attribute const_attribute private explicit_type "long"
	init_value " SECONDS_PER_MINUTE * MINUTES_PER_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1827970 "SECONDS_PER_DAY"
	class_attribute const_attribute private explicit_type "long"
	init_value " SECONDS_PER_HOUR * HOURS_PER_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1828098 "MILLIS_PER_SECOND"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1828226 "MICROS_PER_SECOND"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1000_000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1828354 "NANOS_PER_SECOND"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1000_000_000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1828482 "NANOS_PER_MILLI"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1000_000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1828610 "NANOS_PER_MICRO"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1828738 "MIN_SECOND"
	class_attribute const_attribute private explicit_type "long"
	init_value " -31557014167219200L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The epoch second of Instant.MIN.
"
      end

      attribute 1828866 "MAX_SECOND"
	class_attribute const_attribute private explicit_type "long"
	init_value " 31556889864403199L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The epoch second of Instant.MAX.
"
      end

      operation 7865218 "scale"
	class_operation private explicit_return_type "long"
	nparams 3
	  param in name "d" explicit_type "long"
	  param in name "m" explicit_type "long"
	  param in name "over" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scale d by m, checking for overflow.
"
      end

      operation 7865346 "toInstant"
	public return_type class_ref 1003778 // Instant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this {@code FileTime} object to an {@code Instant}.

<p> The conversion creates an {@code Instant} that represents the
same point on the time-line as this {@code FileTime}.

<p> {@code FileTime} can store points on the time-line further in the
future and further in the past than {@code Instant}. Conversion
from such further time points saturates to {@link Instant#MIN} if
earlier than {@code Instant.MIN} or {@link Instant#MAX} if later
than {@code Instant.MAX}.

@return  an instant representing the same point on the time-line as
         this {@code FileTime} object
@since 1.8
"
      end

      operation 7865474 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Tests this {@code FileTime} for equality with the given object.

<p> The result is {@code true} if and only if the argument is not {@code
null} and is a {@code FileTime} that represents the same time. This
method satisfies the general contract of the {@code Object.equals} method.

@param   obj
         the object to compare with

@return  {@code true} if, and only if, the given object is a {@code
         FileTime} that represents the same time
"
      end

      operation 7865602 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Computes a hash code for this file time.

<p> The hash code is based upon the value represented, and satisfies the
general contract of the {@link Object#hashCode} method.

@return  the hash-code value
"
      end

      operation 7865730 "toDays"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7865858 "toExcessNanos"
	private explicit_return_type "long"
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7865986 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 996354 // FileTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the value of two {@code FileTime} objects for order.

@param   other
         the other {@code FileTime} to be compared

@return  {@code 0} if this {@code FileTime} is equal to {@code other}, a
         value less than 0 if this {@code FileTime} represents a time
         that is before {@code other}, and a value greater than 0 if this
         {@code FileTime} represents a time that is after {@code other}
"
      end

      attribute 1828994 "DAYS_PER_10000_YEARS"
	class_attribute const_attribute private explicit_type "long"
	init_value " 146097L * 25L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " days in a 400 year cycle = 146097
 days in a 10,000 year cycle = 146097 * 25
 seconds per day = 86400
"
      end

      attribute 1829122 "SECONDS_PER_10000_YEARS"
	class_attribute const_attribute private explicit_type "long"
	init_value " 146097L * 25L * 86400L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1829250 "SECONDS_0000_TO_1970"
	class_attribute const_attribute private explicit_type "long"
	init_value " ((146097L * 5L) - (30L * 365L + 7L)) * 86400L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7866114 "append"
	private return_type class_ref 173058 // StringBuilder
	nparams 3
	  param inout name "sb" type class_ref 173058 // StringBuilder
	  param in name "w" explicit_type "int"
	  param in name "d" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " append year/month/day/hour/minute/second/nano with width and 0 padding"
      end

      operation 7866242 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representation of this {@code FileTime}. The string
is returned in the <a
href=\"http://www.w3.org/TR/NOTE-datetime\">ISO&nbsp;8601</a> format:
<pre>
    YYYY-MM-DDThh:mm:ss[.s+]Z
</pre>
where \"{@code [.s+]}\" represents a dot followed by one of more digits
for the decimal fraction of a second. It is only present when the decimal
fraction of a second is not zero. For example, {@code
FileTime.fromMillis(1234567890000L).toString()} yields {@code
\"2009-02-13T23:31:30Z\"}, and {@code FileTime.fromMillis(1234567890123L).toString()}
yields {@code \"2009-02-13T23:31:30.123Z\"}.

<p> A {@code FileTime} is primarily intended to represent the value of a
file's time stamp. Where used to represent <i>extreme values</i>, where
the year is less than \"{@code 0001}\" or greater than \"{@code 9999}\" then
this method deviates from ISO 8601 in the same manner as the
<a href=\"http://www.w3.org/TR/xmlschema-2/#deviantformats\">XML Schema
language</a>. That is, the year may be expanded to more than four digits
and may be negative-signed. If more than four digits then leading zeros
are not present. The year before \"{@code 0001}\" is \"{@code -0001}\".

@return  the string representation of this file time
"
      end
    end

    class 996994 "UserPrincipalLookupService"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object to lookup user and group principals by name. A {@link UserPrincipal}
represents an identity that may be used to determine access rights to objects
in a file system. A {@link GroupPrincipal} represents a <em>group identity</em>.
A {@code UserPrincipalLookupService} defines methods to lookup identities by
name or group name (which are typically user or account names). Whether names
and group names are case sensitive or not depends on the implementation.
The exact definition of a group is implementation specific but typically a
group represents an identity created for administrative purposes so as to
determine the access rights for the members of the group. In particular it is
implementation specific if the <em>namespace</em> for names and groups is the
same or is distinct. To ensure consistent and correct behavior across
platforms it is recommended that this API be used as if the namespaces are
distinct. In other words, the {@link #lookupPrincipalByName
lookupPrincipalByName} should be used to lookup users, and {@link
#lookupPrincipalByGroupName lookupPrincipalByGroupName} should be used to
lookup groups.

@since 1.7

@see java.nio.file.FileSystem#getUserPrincipalLookupService
"
      operation 7869186 "UserPrincipalLookupService"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes a new instance of this class.
"
      end

      operation 7869314 "lookupPrincipalByName"
	abstract public return_type class_ref 996226 // UserPrincipal
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lookup a user principal by name.

@param   name
         the string representation of the user principal to lookup

@return  a user principal

@throws  UserPrincipalNotFoundException
         the principal does not exist
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, it checks {@link RuntimePermission}<tt>(\"lookupUserInformation\")</tt>
"
      end

      operation 7869442 "lookupPrincipalByGroupName"
	abstract public return_type class_ref 1003906 // GroupPrincipal
	nparams 1
	  param inout name "group" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lookup a group principal by group name.

<p> Where an implementation does not support any notion of group then
this method always throws {@link UserPrincipalNotFoundException}. Where
the namespace for user accounts and groups is the same, then this method
is identical to invoking {@link #lookupPrincipalByName
lookupPrincipalByName}.

@param   group
         the string representation of the group to lookup

@return  a group principal

@throws  UserPrincipalNotFoundException
         the principal does not exist or is not a group
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, it checks {@link RuntimePermission}<tt>(\"lookupUserInformation\")</tt>
"
      end
    end

    class 998786 "BasicFileAttributes"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Basic attributes associated with a file in a file system.

<p> Basic file attributes are attributes that are common to many file systems
and consist of mandatory and optional file attributes as defined by this
interface.

<p> <b>Usage Example:</b>
<pre>
   Path file = ...
   BasicFileAttributes attrs = Files.readAttributes(file, BasicFileAttributes.class);
</pre>

@since 1.7

@see BasicFileAttributeView
"
      operation 7861378 "lastModifiedTime"
	public return_type class_ref 996354 // FileTime
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time of last modification.

<p> If the file system implementation does not support a time stamp
to indicate the time of last modification then this method returns an
implementation specific default value, typically a {@code FileTime}
representing the epoch (1970-01-01T00:00:00Z).

@return  a {@code FileTime} representing the time the file was last
         modified
"
      end

      operation 7861506 "lastAccessTime"
	public return_type class_ref 996354 // FileTime
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time of last access.

<p> If the file system implementation does not support a time stamp
to indicate the time of last access then this method returns
an implementation specific default value, typically the {@link
#lastModifiedTime() last-modified-time} or a {@code FileTime}
representing the epoch (1970-01-01T00:00:00Z).

@return  a {@code FileTime} representing the time of last access
"
      end

      operation 7861634 "creationTime"
	public return_type class_ref 996354 // FileTime
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the creation time. The creation time is the time that the file
was created.

<p> If the file system implementation does not support a time stamp
to indicate the time when the file was created then this method returns
an implementation specific default value, typically the {@link
#lastModifiedTime() last-modified-time} or a {@code FileTime}
representing the epoch (1970-01-01T00:00:00Z).

@return   a {@code FileTime} representing the time the file was created
"
      end

      operation 7861762 "isRegularFile"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether the file is a regular file with opaque content.

@return {@code true} if the file is a regular file with opaque content
"
      end

      operation 7861890 "isDirectory"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether the file is a directory.

@return {@code true} if the file is a directory
"
      end

      operation 7862018 "isSymbolicLink"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether the file is a symbolic link.

@return {@code true} if the file is a symbolic link
"
      end

      operation 7862146 "isOther"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells whether the file is something other than a regular file, directory,
or symbolic link.

@return {@code true} if the file something other than a regular file,
        directory or symbolic link
"
      end

      operation 7862274 "size"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the file (in bytes). The size may differ from the
actual size on the file system due to compression, support for sparse
files, or other reasons. The size of files that are not {@link
#isRegularFile regular} files is implementation specific and
therefore unspecified.

@return  the file size, in bytes
"
      end

      operation 7862402 "fileKey"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that uniquely identifies the given file, or {@code
null} if a file key is not available. On some platforms or file systems
it is possible to use an identifier, or a combination of identifiers to
uniquely identify a file. Such identifiers are important for operations
such as file tree traversal in file systems that support <a
href=\"../package-summary.html#links\">symbolic links</a> or file systems
that allow a file to be an entry in more than one directory. On UNIX file
systems, for example, the <em>device ID</em> and <em>inode</em> are
commonly used for such purposes.

<p> The file key returned by this method can only be guaranteed to be
unique if the file system and files remain static. Whether a file system
re-uses identifiers after a file is deleted is implementation dependent and
therefore unspecified.

<p> File keys returned by this method can be compared for equality and are
suitable for use in collections. If the file system and files remain static,
and two files are the {@link java.nio.file.Files#isSameFile same} with
non-{@code null} file keys, then their file keys are equal.

@return an object that uniquely identifies the given file, or {@code null}

@see java.nio.file.Files#walkFileTree
"
      end
    end

    class 1002114 "AclEntry"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An entry in an access control list (ACL).

<p> The ACL entry represented by this class is based on the ACL model
specified in <a href=\"http://www.ietf.org/rfc/rfc3530.txt\"><i>RFC&nbsp;3530:
Network File System (NFS) version 4 Protocol</i></a>. Each entry has four
components as follows:

<ol>
   <li><p> The {@link #type() type} component determines if the entry
   grants or denies access. </p></li>

   <li><p> The {@link #principal() principal} component, sometimes called the
   \"who\" component, is a {@link UserPrincipal} corresponding to the identity
   that the entry grants or denies access
   </p></li>

   <li><p> The {@link #permissions permissions} component is a set of
   {@link AclEntryPermission permissions}
   </p></li>

   <li><p> The {@link #flags flags} component is a set of {@link AclEntryFlag
   flags} to indicate how entries are inherited and propagated </p></li>
</ol>

<p> ACL entries are created using an associated {@link Builder} object by
invoking its {@link Builder#build build} method.

<p> ACL entries are immutable and are safe for use by multiple concurrent
threads.

@since 1.7
"
      classrelation 3317506 // type (<unidirectional association>)
	relation 3317506 --->
	  a role_name "type" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3317506 // type (<unidirectional association>)
	  b parent class_ref 1002242 // AclEntryType
      end

      classrelation 3317634 // who (<unidirectional association>)
	relation 3317634 --->
	  a role_name "who" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3317634 // who (<unidirectional association>)
	  b parent class_ref 996226 // UserPrincipal
      end

      classrelation 3317762 // perms (<unidirectional association>)
	relation 3317762 --->
	  a role_name "perms" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AclEntryPermission> ${name}${value};
"
	    classrelation_ref 3317762 // perms (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3317890 // flags (<unidirectional association>)
	relation 3317890 --->
	  a role_name "flags" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AclEntryFlag> ${name}${value};
"
	    classrelation_ref 3317890 // flags (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      attribute 1824386 "hash"
	volatile private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " cached hash code
"
      end

      operation 7857922 "AclEntry"
	private explicit_return_type ""
	nparams 4
	  param inout name "type" type class_ref 1002242 // AclEntryType
	  param inout name "who" type class_ref 996226 // UserPrincipal
	  param inout name "perms" type class_ref 192258 // Set
	  param inout name "flags" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<AclEntryPermission> ${p2}, ${t3}<AclEntryFlag> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " private constructor"
      end

      class 1002626 "Builder"
	visibility public 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3318018 // type (<unidirectional association>)
	  relation 3318018 --->
	    a role_name "type" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3318018 // type (<unidirectional association>)
	    b parent class_ref 1002242 // AclEntryType
	end

	classrelation 3318146 // who (<unidirectional association>)
	  relation 3318146 --->
	    a role_name "who" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3318146 // who (<unidirectional association>)
	    b parent class_ref 996226 // UserPrincipal
	end

	classrelation 3318274 // perms (<unidirectional association>)
	  relation 3318274 --->
	    a role_name "perms" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AclEntryPermission> ${name}${value};
"
	      classrelation_ref 3318274 // perms (<unidirectional association>)
	    b parent class_ref 192258 // Set
	end

	classrelation 3318402 // flags (<unidirectional association>)
	  relation 3318402 --->
	    a role_name "flags" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<AclEntryFlag> ${name}${value};
"
	      classrelation_ref 3318402 // flags (<unidirectional association>)
	    b parent class_ref 192258 // Set
	end

	operation 7858050 "Builder"
	  private explicit_return_type ""
	  nparams 4
	    param inout name "type" type class_ref 1002242 // AclEntryType
	    param inout name "who" type class_ref 996226 // UserPrincipal
	    param inout name "perms" type class_ref 192258 // Set
	    param inout name "flags" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<AclEntryPermission> ${p2}, ${t3}<AclEntryFlag> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7858178 "build"
	  public return_type class_ref 1002114 // AclEntry
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an {@link AclEntry} from the components of this builder.
The type and who components are required to have been set in order
to construct an {@code AclEntry}.

@return  a new ACL entry

@throws  IllegalStateException
         if the type or who component have not been set
"
	end

	operation 7858306 "setType"
	  public return_type class_ref 1002626 // Builder
	  nparams 1
	    param inout name "type" type class_ref 1002242 // AclEntryType
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the type component of this builder.

@param   type  the component type
@return  this builder
"
	end

	operation 7858434 "setPrincipal"
	  public return_type class_ref 1002626 // Builder
	  nparams 1
	    param inout name "who" type class_ref 996226 // UserPrincipal
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the principal component of this builder.

@param   who  the principal component
@return  this builder
"
	end

	operation 7858562 "checkSet"
	  class_operation private explicit_return_type "void"
	  nparams 2
	    param inout name "set" type class_ref 192258 // Set
	    param inout name "type" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " check set only contains elements of the given type"
	end

	operation 7858690 "setPermissions"
	  public return_type class_ref 1002626 // Builder
	  nparams 1
	    param inout name "perms" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<AclEntryPermission> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the permissions component of this builder. On return, the
permissions component of this builder is a copy of the given set.

@param   perms  the permissions component
@return  this builder

@throws  ClassCastException
         if the set contains elements that are not of type {@code
         AclEntryPermission}
"
	end

	operation 7858818 "setPermissions"
	  public return_type class_ref 1002626 // Builder
	  nparams 1
	    param inout name "" explicit_type "AclEntryPermission...perms"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the permissions component of this builder. On return, the
permissions component of this builder is a copy of the permissions in
the given array.

@param   perms  the permissions component
@return  this builder
"
	end

	operation 7858946 "setFlags"
	  public return_type class_ref 1002626 // Builder
	  nparams 1
	    param inout name "flags" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<AclEntryFlag> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the flags component of this builder. On return, the flags
component of this builder is a copy of the given set.

@param   flags  the flags component
@return  this builder

@throws  ClassCastException
         if the set contains elements that are not of type {@code
         AclEntryFlag}
"
	end

	operation 7859074 "setFlags"
	  public return_type class_ref 1002626 // Builder
	  nparams 1
	    param inout name "" explicit_type "AclEntryFlag...flags"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the flags component of this builder. On return, the flags
component of this builder is a copy of the flags in the given
array.

@param   flags  the flags component
@return  this builder
"
	end
      end

      operation 7859202 "newBuilder"
	class_operation public return_type class_ref 1002626 // Builder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new builder. The initial value of the type and who
components is {@code null}. The initial value of the permissions and
flags components is the empty set.

@return  a new builder
"
      end

      operation 7859330 "newBuilder"
	class_operation public return_type class_ref 1002626 // Builder
	nparams 1
	  param inout name "entry" type class_ref 1002114 // AclEntry
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new builder with the components of an existing ACL entry.

@param   entry  an ACL entry
@return  a new builder
"
      end

      operation 7859458 "type"
	public return_type class_ref 1002242 // AclEntryType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ACL entry type.

@return the ACL entry type
"
      end

      operation 7859586 "principal"
	public return_type class_ref 996226 // UserPrincipal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the principal component.

@return the principal component
"
      end

      operation 7859714 "permissions"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<AclEntryPermission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the permissions component.

<p> The returned set is a modifiable copy of the permissions.

@return the permissions component
"
      end

      operation 7859842 "flags"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<AclEntryFlag> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the flags component.

<p> The returned set is a modifiable copy of the flags.

@return the flags component
"
      end

      operation 7859970 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "ob" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Compares the specified object with this ACL entry for equality.

<p> If the given object is not an {@code AclEntry} then this method
immediately returns {@code false}.

<p> For two ACL entries to be considered equals requires that they are
both the same type, their who components are equal, their permissions
components are equal, and their flags components are equal.

<p> This method satisfies the general contract of the {@link
java.lang.Object#equals(Object) Object.equals} method. </p>

@param   ob   the object to which this object is to be compared

@return  {@code true} if, and only if, the given object is an AclEntry that
         is identical to this AclEntry
"
      end

      operation 7860098 "hash"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "h" explicit_type "int"
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7860226 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the hash-code value for this ACL entry.

<p> This method satisfies the general contract of the {@link
Object#hashCode} method.
"
      end

      operation 7860354 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the string representation of this ACL entry.

@return  the string representation of this entry
"
      end
    end

    class 1002242 "AclEntryType"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A typesafe enumeration of the access control entry types.

@since 1.7
"
      attribute 1826818 "ALLOW"
	public type class_ref 1002242 // AclEntryType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Explicitly grants access to a file or directory.

"
      end

      attribute 1826946 "DENY"
	public type class_ref 1002242 // AclEntryType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Explicitly denies access to a file or directory.

"
      end

      attribute 1827074 "AUDIT"
	public type class_ref 1002242 // AclEntryType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Log, in a system dependent way, the access specified in the
permissions component of the ACL entry.

"
      end

      attribute 1827202 "ALARM"
	public type class_ref 1002242 // AclEntryType
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Generate an alarm, in a system dependent way, the access specified in the
permissions component of the ACL entry.
"
      end
    end

    class 1002370 "AclEntryPermission"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the permissions for use with the permissions component of an ACL
{@link AclEntry entry}.

@since 1.7
"
      attribute 1825026 "READ_DATA"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to read the data of the file.

"
      end

      attribute 1825154 "WRITE_DATA"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to modify the file's data.

"
      end

      attribute 1825282 "APPEND_DATA"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to append data to a file.

"
      end

      attribute 1825410 "READ_NAMED_ATTRS"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to read the named attributes of a file.

<p> <a href=\"http://www.ietf.org/rfc/rfc3530.txt\">RFC&nbsp;3530: Network
File System (NFS) version 4 Protocol</a> defines <em>named attributes</em>
as opaque files associated with a file in the file system.

"
      end

      attribute 1825538 "WRITE_NAMED_ATTRS"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to write the named attributes of a file.

<p> <a href=\"http://www.ietf.org/rfc/rfc3530.txt\">RFC&nbsp;3530: Network
File System (NFS) version 4 Protocol</a> defines <em>named attributes</em>
as opaque files associated with a file in the file system.

"
      end

      attribute 1825666 "EXECUTE"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to execute a file.

"
      end

      attribute 1825794 "DELETE_CHILD"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to delete a file or directory within a directory.

"
      end

      attribute 1825922 "READ_ATTRIBUTES"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The ability to read (non-acl) file attributes.

"
      end

      attribute 1826050 "WRITE_ATTRIBUTES"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The ability to write (non-acl) file attributes.

"
      end

      attribute 1826178 "DELETE"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to delete the file.

"
      end

      attribute 1826306 "READ_ACL"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to read the ACL attribute.

"
      end

      attribute 1826434 "WRITE_ACL"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to write the ACL attribute.

"
      end

      attribute 1826562 "WRITE_OWNER"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to change the owner.

"
      end

      attribute 1826690 "SYNCHRONIZE"
	public type class_ref 1002370 // AclEntryPermission
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Permission to access file locally at the server with synchronous reads
and writes.
"
      end

      classrelation 3318530 // LIST_DIRECTORY (<unidirectional association>)
	relation 3318530 --->
	  a role_name "LIST_DIRECTORY" init_value " READ_DATA" class_relation const_relation public
	    comment "
Permission to list the entries of a directory (equal to {@link #READ_DATA})

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3318530 // LIST_DIRECTORY (<unidirectional association>)
	  b parent class_ref 1002370 // AclEntryPermission
      end

      classrelation 3318658 // ADD_FILE (<unidirectional association>)
	relation 3318658 --->
	  a role_name "ADD_FILE" init_value " WRITE_DATA" class_relation const_relation public
	    comment "
Permission to add a new file to a directory (equal to {@link #WRITE_DATA})

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3318658 // ADD_FILE (<unidirectional association>)
	  b parent class_ref 1002370 // AclEntryPermission
      end

      classrelation 3318786 // ADD_SUBDIRECTORY (<unidirectional association>)
	relation 3318786 --->
	  a role_name "ADD_SUBDIRECTORY" init_value " APPEND_DATA" class_relation const_relation public
	    comment "
Permission to create a subdirectory to a directory (equal to {@link #APPEND_DATA})

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3318786 // ADD_SUBDIRECTORY (<unidirectional association>)
	  b parent class_ref 1002370 // AclEntryPermission
      end
    end

    class 1002498 "AclEntryFlag"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the flags for used by the flags component of an ACL {@link AclEntry
entry}.

<p> In this release, this class does not define flags related to {@link
AclEntryType#AUDIT} and {@link AclEntryType#ALARM} entry types.

@since 1.7
"
      attribute 1824514 "FILE_INHERIT"
	public type class_ref 1002498 // AclEntryFlag
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Can be placed on a directory and indicates that the ACL entry should be
added to each new non-directory file created.

"
      end

      attribute 1824642 "DIRECTORY_INHERIT"
	public type class_ref 1002498 // AclEntryFlag
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Can be placed on a directory and indicates that the ACL entry should be
added to each new directory created.

"
      end

      attribute 1824770 "NO_PROPAGATE_INHERIT"
	public type class_ref 1002498 // AclEntryFlag
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Can be placed on a directory to indicate that the ACL entry should not
be placed on the newly created directory which is inheritable by
subdirectories of the created directory.

"
      end

      attribute 1824898 "INHERIT_ONLY"
	public type class_ref 1002498 // AclEntryFlag
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Can be placed on a directory but does not apply to the directory,
only to newly created files/directories as specified by the
{@link #FILE_INHERIT} and {@link #DIRECTORY_INHERIT} flags.
"
      end
    end

    class 1002754 "AclFileAttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A file attribute view that supports reading or updating a file's Access
Control Lists (ACL) or file owner attributes.

<p> ACLs are used to specify access rights to file system objects. An ACL is
an ordered list of {@link AclEntry access-control-entries}, each specifying a
{@link UserPrincipal} and the level of access for that user principal. This
file attribute view defines the {@link #getAcl() getAcl}, and {@link
#setAcl(List) setAcl} methods to read and write ACLs based on the ACL
model specified in <a href=\"http://www.ietf.org/rfc/rfc3530.txt\"><i>RFC&nbsp;3530:
Network File System (NFS) version 4 Protocol</i></a>. This file attribute view
is intended for file system implementations that support the NFSv4 ACL model
or have a <em>well-defined</em> mapping between the NFSv4 ACL model and the ACL
model used by the file system. The details of such mapping are implementation
dependent and are therefore unspecified.

<p> This class also extends {@code FileOwnerAttributeView} so as to define
methods to get and set the file owner.

<p> When a file system provides access to a set of {@link FileStore
file-systems} that are not homogeneous then only some of the file systems may
support ACLs. The {@link FileStore#supportsFileAttributeView
supportsFileAttributeView} method can be used to test if a file system
supports ACLs.

<h2>Interoperability</h2>

RFC&nbsp;3530 allows for special user identities to be used on platforms that
support the POSIX defined access permissions. The special user identities
are \"{@code OWNER@}\", \"{@code GROUP@}\", and \"{@code EVERYONE@}\". When both
the {@code AclFileAttributeView} and the {@link PosixFileAttributeView}
are supported then these special user identities may be included in ACL {@link
AclEntry entries} that are read or written. The file system's {@link
UserPrincipalLookupService} may be used to obtain a {@link UserPrincipal}
to represent these special identities by invoking the {@link
UserPrincipalLookupService#lookupPrincipalByName lookupPrincipalByName}
method.

<p> <b>Usage Example:</b>
Suppose we wish to add an entry to an existing ACL to grant \"joe\" access:
<pre>
    // lookup \"joe\"
    UserPrincipal joe = file.getFileSystem().getUserPrincipalLookupService()
        .lookupPrincipalByName(\"joe\");

    // get view
    AclFileAttributeView view = Files.getFileAttributeView(file, AclFileAttributeView.class);

    // create ACE to give \"joe\" read access
    AclEntry entry = AclEntry.newBuilder()
        .setType(AclEntryType.ALLOW)
        .setPrincipal(joe)
        .setPermissions(AclEntryPermission.READ_DATA, AclEntryPermission.READ_ATTRIBUTES)
        .build();

    // read ACL, insert ACE, re-write ACL
    List&lt;AclEntry&gt; acl = view.getAcl();
    acl.add(0, entry);   // insert before any DENY entries
    view.setAcl(acl);
</pre>

<h2> Dynamic Access </h2>
<p> Where dynamic access to file attributes is required, the attributes
supported by this attribute view are as follows:
<blockquote>
<table border=\"1\" cellpadding=\"8\" summary=\"Supported attributes\">
  <tr>
    <th> Name </th>
    <th> Type </th>
  </tr>
  <tr>
    <td> \"acl\" </td>
    <td> {@link List}&lt;{@link AclEntry}&gt; </td>
  </tr>
  <tr>
    <td> \"owner\" </td>
    <td> {@link UserPrincipal} </td>
  </tr>
</table>
</blockquote>

<p> The {@link Files#getAttribute getAttribute} method may be used to read
the ACL or owner attributes as if by invoking the {@link #getAcl getAcl} or
{@link #getOwner getOwner} methods.

<p> The {@link Files#setAttribute setAttribute} method may be used to
update the ACL or owner attributes as if by invoking the {@link #setAcl setAcl}
or {@link #setOwner setOwner} methods.

<h2> Setting the ACL when creating a file </h2>

<p> Implementations supporting this attribute view may also support setting
the initial ACL when creating a file or directory. The initial ACL
may be provided to methods such as {@link Files#createFile createFile} or {@link
Files#createDirectory createDirectory} as an {@link FileAttribute} with {@link
FileAttribute#name name} {@code \"acl:acl\"} and a {@link FileAttribute#value
value} that is the list of {@code AclEntry} objects.

<p> Where an implementation supports an ACL model that differs from the NFSv4
defined ACL model then setting the initial ACL when creating the file must
translate the ACL to the model supported by the file system. Methods that
create a file should reject (by throwing {@link IOException IOException})
any attempt to create a file that would be less secure as a result of the
translation.

@since 1.7
"
      classrelation 3319170 // <generalisation>
	relation 3319170 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3319170 // <generalisation>
	  b parent class_ref 1002882 // FileOwnerAttributeView
      end

      operation 7860994 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the name of the attribute view. Attribute views of this type
have the name {@code \"acl\"}.
"
      end

      operation 7861122 "getAcl"
	public return_type class_ref 175362 // List
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<AclEntry> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the access control list.

<p> When the file system uses an ACL model that differs from the NFSv4
defined ACL model, then this method returns an ACL that is the translation
of the ACL to the NFSv4 ACL model.

<p> The returned list is modifiable so as to facilitate changes to the
existing ACL. The {@link #setAcl setAcl} method is used to update
the file's ACL attribute.

@return  an ordered list of {@link AclEntry entries} representing the
         ACL

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkRead(String) checkRead} method
         denies read access to the file.
"
      end

      operation 7861250 "setAcl"
	public explicit_return_type "void"
	nparams 1
	  param inout name "acl" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<AclEntry> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates (replace) the access control list.

<p> Where the file system supports Access Control Lists, and it uses an
ACL model that differs from the NFSv4 defined ACL model, then this method
must translate the ACL to the model supported by the file system. This
method should reject (by throwing {@link IOException IOException}) any
attempt to write an ACL that would appear to make the file more secure
than would be the case if the ACL were updated. Where an implementation
does not support a mapping of {@link AclEntryType#AUDIT} or {@link
AclEntryType#ALARM} entries, then this method ignores these entries when
writing the ACL.

<p> If an ACL entry contains a {@link AclEntry#principal user-principal}
that is not associated with the same provider as this attribute view then
{@link ProviderMismatchException} is thrown. Additional validation, if
any, is implementation dependent.

<p> If the file system supports other security related file attributes
(such as a file {@link PosixFileAttributes#permissions
access-permissions} for example), the updating the access control list
may also cause these security related attributes to be updated.

@param   acl
         the new access control list

@throws  IOException
         if an I/O error occurs or the ACL is invalid
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the file.
"
      end
    end

    class 1002882 "FileOwnerAttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A file attribute view that supports reading or updating the owner of a file.
This file attribute view is intended for file system implementations that
support a file attribute that represents an identity that is the owner of
the file. Often the owner of a file is the identity of the entity that
created the file.

<p> The {@link #getOwner getOwner} or {@link #setOwner setOwner} methods may
be used to read or update the owner of the file.

<p> The {@link java.nio.file.Files#getAttribute getAttribute} and
{@link java.nio.file.Files#setAttribute setAttribute} methods may also be
used to read or update the owner. In that case, the owner attribute is
identified by the name {@code \"owner\"}, and the value of the attribute is
a {@link UserPrincipal}.

@since 1.7
"
      classrelation 3319042 // <generalisation>
	relation 3319042 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3319042 // <generalisation>
	  b parent class_ref 1003010 // FileAttributeView
      end

      operation 7860610 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the name of the attribute view. Attribute views of this type
have the name {@code \"owner\"}.
"
      end

      operation 7860738 "getOwner"
	public return_type class_ref 996226 // UserPrincipal
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read the file owner.

<p> It it implementation specific if the file owner can be a {@link
GroupPrincipal group}.

@return  the file owner

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link
         RuntimePermission}<tt>(\"accessUserInformation\")</tt> or its
         {@link SecurityManager#checkRead(String) checkRead} method
         denies read access to the file.
"
      end

      operation 7860866 "setOwner"
	public explicit_return_type "void"
	nparams 1
	  param inout name "owner" type class_ref 996226 // UserPrincipal
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the file owner.

<p> It it implementation specific if the file owner can be a {@link
GroupPrincipal group}. To ensure consistent and correct behavior
across platforms it is recommended that this method should only be used
to set the file owner to a user principal that is not a group.

@param   owner
         the new file owner

@throws  IOException
         if an I/O error occurs, or the {@code owner} parameter is a
         group and this implementation does not support setting the owner
         to a group
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link
         RuntimePermission}<tt>(\"accessUserInformation\")</tt> or its
         {@link SecurityManager#checkWrite(String) checkWrite} method
         denies write access to the file.
"
      end
    end

    class 1003010 "FileAttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An attribute view that is a read-only or updatable view of non-opaque
values associated with a file in a filesystem. This interface is extended or
implemented by specific file attribute views that define methods to read
and/or update the attributes of a file.

@since 1.7

@see java.nio.file.Files#getFileAttributeView(Path,Class,java.nio.file.LinkOption[])
"
      classrelation 3318914 // <generalisation>
	relation 3318914 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3318914 // <generalisation>
	  b parent class_ref 1003138 // AttributeView
      end
    end

    class 1003138 "AttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that provides a read-only or updatable <em>view</em> of non-opaque
values associated with an object in a filesystem. This interface is extended
or implemented by specific attribute views that define the attributes
supported by the view. A specific attribute view will typically define
type-safe methods to read or update the attributes that it supports.

@since 1.7
"
      operation 7860482 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the attribute view.

@return the name of the attribute view
"
      end
    end

    class 1003266 "BasicFileAttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A file attribute view that provides a view of a <em>basic set</em> of file
attributes common to many file systems. The basic set of file attributes
consist of <em>mandatory</em> and <em>optional</em> file attributes as
defined by the {@link BasicFileAttributes} interface.

<p> The file attributes are retrieved from the file system as a <em>bulk
operation</em> by invoking the {@link #readAttributes() readAttributes} method.
This class also defines the {@link #setTimes setTimes} method to update the
file's time attributes.

<p> Where dynamic access to file attributes is required, the attributes
supported by this attribute view have the following names and types:
<blockquote>
 <table border=\"1\" cellpadding=\"8\" summary=\"Supported attributes\">
  <tr>
    <th> Name </th>
    <th> Type </th>
  </tr>
 <tr>
    <td> \"lastModifiedTime\" </td>
    <td> {@link FileTime} </td>
  </tr>
  <tr>
    <td> \"lastAccessTime\" </td>
    <td> {@link FileTime} </td>
  </tr>
  <tr>
    <td> \"creationTime\" </td>
    <td> {@link FileTime} </td>
  </tr>
  <tr>
    <td> \"size\" </td>
    <td> {@link Long} </td>
  </tr>
  <tr>
    <td> \"isRegularFile\" </td>
    <td> {@link Boolean} </td>
  </tr>
  <tr>
    <td> \"isDirectory\" </td>
    <td> {@link Boolean} </td>
  </tr>
  <tr>
    <td> \"isSymbolicLink\" </td>
    <td> {@link Boolean} </td>
  </tr>
  <tr>
    <td> \"isOther\" </td>
    <td> {@link Boolean} </td>
  </tr>
  <tr>
    <td> \"fileKey\" </td>
    <td> {@link Object} </td>
  </tr>
</table>
</blockquote>

<p> The {@link java.nio.file.Files#getAttribute getAttribute} method may be
used to read any of these attributes as if by invoking the {@link
#readAttributes() readAttributes()} method.

<p> The {@link java.nio.file.Files#setAttribute setAttribute} method may be
used to update the file's last modified time, last access time or create time
attributes as if by invoking the {@link #setTimes setTimes} method.

@since 1.7
"
      classrelation 3319298 // <generalisation>
	relation 3319298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3319298 // <generalisation>
	  b parent class_ref 1003010 // FileAttributeView
      end

      operation 7862530 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the name of the attribute view. Attribute views of this type
have the name {@code \"basic\"}.
"
      end

      operation 7862658 "readAttributes"
	public return_type class_ref 998786 // BasicFileAttributes
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads the basic file attributes as a bulk operation.

<p> It is implementation specific if all file attributes are read as an
atomic operation with respect to other file system operations.

@return  the file attributes

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, its {@link SecurityManager#checkRead(String) checkRead}
         method is invoked to check read access to the file
"
      end

      operation 7862786 "setTimes"
	public explicit_return_type "void"
	nparams 3
	  param inout name "lastModifiedTime" type class_ref 996354 // FileTime
	  param inout name "lastAccessTime" type class_ref 996354 // FileTime
	  param inout name "createTime" type class_ref 996354 // FileTime
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates any or all of the file's last modified time, last access time,
and create time attributes.

<p> This method updates the file's timestamp attributes. The values are
converted to the epoch and precision supported by the file system.
Converting from finer to coarser granularities result in precision loss.
The behavior of this method when attempting to set a timestamp that is
not supported or to a value that is outside the range supported by the
underlying file store is not defined. It may or not fail by throwing an
{@code IOException}.

<p> If any of the {@code lastModifiedTime}, {@code lastAccessTime},
or {@code createTime} parameters has the value {@code null} then the
corresponding timestamp is not changed. An implementation may require to
read the existing values of the file attributes when only some, but not
all, of the timestamp attributes are updated. Consequently, this method
may not be an atomic operation with respect to other file system
operations. Reading and re-writing existing values may also result in
precision loss. If all of the {@code lastModifiedTime}, {@code
lastAccessTime} and {@code createTime} parameters are {@code null} then
this method has no effect.

<p> <b>Usage Example:</b>
Suppose we want to change a file's last access time.
<pre>
   Path path = ...
   FileTime time = ...
   Files.getFileAttributeView(path, BasicFileAttributeView.class).setTimes(null, time, null);
</pre>

@param   lastModifiedTime
         the new last modified time, or {@code null} to not change the
         value
@param   lastAccessTime
         the last access time, or {@code null} to not change the value
@param   createTime
         the file's create time, or {@code null} to not change the value

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, its  {@link SecurityManager#checkWrite(String) checkWrite}
         method is invoked to check write access to the file

@see java.nio.file.Files#setLastModifiedTime
"
      end
    end

    class 1003394 "DosFileAttributes"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "File attributes associated with a file in a file system that supports
legacy \"DOS\" attributes.

<p> <b>Usage Example:</b>
<pre>
   Path file = ...
   DosFileAttributes attrs = Files.readAttributes(file, DosFileAttributes.class);
</pre>

@since 1.7
"
      classrelation 3319426 // <generalisation>
	relation 3319426 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3319426 // <generalisation>
	  b parent class_ref 998786 // BasicFileAttributes
      end

      operation 7862914 "isReadOnly"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the read-only attribute.

<p> This attribute is often used as a simple access control mechanism
to prevent files from being deleted or updated. Whether the file system
or platform does any enforcement to prevent <em>read-only</em> files
from being updated is implementation specific.

@return  the value of the read-only attribute
"
      end

      operation 7863042 "isHidden"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the hidden attribute.

<p> This attribute is often used to indicate if the file is visible to
users.

@return  the value of the hidden attribute
"
      end

      operation 7863170 "isArchive"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the archive attribute.

<p> This attribute is typically used by backup programs.

@return  the value of the archive attribute
"
      end

      operation 7863298 "isSystem"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the system attribute.

<p> This attribute is often used to indicate that the file is a component
of the operating system.

@return  the value of the system attribute
"
      end
    end

    class 1003522 "DosFileAttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A file attribute view that provides a view of the legacy \"DOS\" file attributes.
These attributes are supported by file systems such as the File Allocation
Table (FAT) format commonly used in <em>consumer devices</em>.

<p> A {@code DosFileAttributeView} is a {@link BasicFileAttributeView} that
additionally supports access to the set of DOS attribute flags that are used
to indicate if the file is read-only, hidden, a system file, or archived.

<p> Where dynamic access to file attributes is required, the attributes
supported by this attribute view are as defined by {@code
BasicFileAttributeView}, and in addition, the following attributes are
supported:
<blockquote>
<table border=\"1\" cellpadding=\"8\" summary=\"Supported attributes\">
  <tr>
    <th> Name </th>
    <th> Type </th>
  </tr>
  <tr>
    <td> readonly </td>
    <td> {@link Boolean} </td>
  </tr>
  <tr>
    <td> hidden </td>
    <td> {@link Boolean} </td>
  </tr>
  <tr>
    <td> system </td>
    <td> {@link Boolean} </td>
  </tr>
  <tr>
    <td> archive </td>
    <td> {@link Boolean} </td>
  </tr>
</table>
</blockquote>

<p> The {@link java.nio.file.Files#getAttribute getAttribute} method may
be used to read any of these attributes, or any of the attributes defined by
{@link BasicFileAttributeView} as if by invoking the {@link #readAttributes
readAttributes()} method.

<p> The {@link java.nio.file.Files#setAttribute setAttribute} method may
be used to update the file's last modified time, last access time or create
time attributes as defined by {@link BasicFileAttributeView}. It may also be
used to update the DOS attributes as if by invoking the {@link #setReadOnly
setReadOnly}, {@link #setHidden setHidden}, {@link #setSystem setSystem}, and
{@link #setArchive setArchive} methods respectively.

@since 1.7
"
      classrelation 3319554 // <generalisation>
	relation 3319554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3319554 // <generalisation>
	  b parent class_ref 1003266 // BasicFileAttributeView
      end

      operation 7863426 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the name of the attribute view. Attribute views of this type
have the name {@code \"dos\"}.
"
      end

      operation 7863554 "readAttributes"
	public return_type class_ref 1003394 // DosFileAttributes
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@throws  IOException                             {@inheritDoc}
@throws  SecurityException                       {@inheritDoc}
"
      end

      operation 7863682 "setReadOnly"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value of the read-only attribute.

<p> It is implementation specific if the attribute can be updated as an
atomic operation with respect to other file system operations. An
implementation may, for example, require to read the existing value of
the DOS attribute in order to update this attribute.

@param   value
         the new value of the attribute

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default, and a security manager is installed,
         its  {@link SecurityManager#checkWrite(String) checkWrite} method
         is invoked to check write access to the file
"
      end

      operation 7863810 "setHidden"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value of the hidden attribute.

<p> It is implementation specific if the attribute can be updated as an
atomic operation with respect to other file system operations. An
implementation may, for example, require to read the existing value of
the DOS attribute in order to update this attribute.

@param   value
         the new value of the attribute

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default, and a security manager is installed,
         its  {@link SecurityManager#checkWrite(String) checkWrite} method
         is invoked to check write access to the file
"
      end

      operation 7863938 "setSystem"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value of the system attribute.

<p> It is implementation specific if the attribute can be updated as an
atomic operation with respect to other file system operations. An
implementation may, for example, require to read the existing value of
the DOS attribute in order to update this attribute.

@param   value
         the new value of the attribute

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default, and a security manager is installed,
         its  {@link SecurityManager#checkWrite(String) checkWrite} method
         is invoked to check write access to the file
"
      end

      operation 7864066 "setArchive"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the value of the archive attribute.

<p> It is implementation specific if the attribute can be updated as an
atomic operation with respect to other file system operations. An
implementation may, for example, require to read the existing value of
the DOS attribute in order to update this attribute.

@param   value
         the new value of the attribute

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default, and a security manager is installed,
         its  {@link SecurityManager#checkWrite(String) checkWrite} method
         is invoked to check write access to the file
"
      end
    end

    class 1003650 "FileStoreAttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An attribute view that is a read-only or updatable view of the attributes of
a {@link java.nio.file.FileStore}.

@since 1.7
"
      classrelation 3319682 // <generalisation>
	relation 3319682 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3319682 // <generalisation>
	  b parent class_ref 1003138 // AttributeView
      end
    end

    class 1003906 "GroupPrincipal"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code UserPrincipal} representing a <em>group identity</em>, used to
determine access rights to objects in a file system. The exact definition of
a group is implementation specific, but typically, it represents an identity
created for administrative purposes so as to determine the access rights for
the members of the group. Whether an entity can be a member of multiple
groups, and whether groups can be nested, are implementation specified and
therefore not specified.

@since 1.7

@see UserPrincipalLookupService#lookupPrincipalByGroupName
"
      classrelation 3320450 // <generalisation>
	relation 3320450 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3320450 // <generalisation>
	  b parent class_ref 996226 // UserPrincipal
      end
    end

    class 1004034 "PosixFileAttributes"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "File attributes associated with files on file systems used by operating systems
that implement the Portable Operating System Interface (POSIX) family of
standards.

<p> The POSIX attributes of a file are retrieved using a {@link
PosixFileAttributeView} by invoking its {@link
PosixFileAttributeView#readAttributes readAttributes} method.

@since 1.7
"
      classrelation 3320578 // <generalisation>
	relation 3320578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3320578 // <generalisation>
	  b parent class_ref 998786 // BasicFileAttributes
      end

      operation 7866370 "owner"
	public return_type class_ref 996226 // UserPrincipal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the owner of the file.

@return  the file owner

@see PosixFileAttributeView#setOwner
"
      end

      operation 7866498 "group"
	public return_type class_ref 1003906 // GroupPrincipal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the group owner of the file.

@return  the file group owner

@see PosixFileAttributeView#setGroup
"
      end

      operation 7866626 "permissions"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PosixFilePermission> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the permissions of the file. The file permissions are returned
as a set of {@link PosixFilePermission} elements. The returned set is a
copy of the file permissions and is modifiable. This allows the result
to be modified and passed to the {@link PosixFileAttributeView#setPermissions
setPermissions} method to update the file's permissions.

@return  the file permissions

@see PosixFileAttributeView#setPermissions
"
      end
    end

    class 1004162 "PosixFileAttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A file attribute view that provides a view of the file attributes commonly
associated with files on file systems used by operating systems that implement
the Portable Operating System Interface (POSIX) family of standards.

<p> Operating systems that implement the <a href=\"http://www.opengroup.org\">
POSIX</a> family of standards commonly use file systems that have a
file <em>owner</em>, <em>group-owner</em>, and related <em>access
permissions</em>. This file attribute view provides read and write access
to these attributes.

<p> The {@link #readAttributes() readAttributes} method is used to read the
file's attributes. The file {@link PosixFileAttributes#owner() owner} is
represented by a {@link UserPrincipal} that is the identity of the file owner
for the purposes of access control. The {@link PosixFileAttributes#group()
group-owner}, represented by a {@link GroupPrincipal}, is the identity of the
group owner, where a group is an identity created for administrative purposes
so as to determine the access rights for the members of the group.

<p> The {@link PosixFileAttributes#permissions() permissions} attribute is a
set of access permissions. This file attribute view provides access to the nine
permission defined by the {@link PosixFilePermission} class.
These nine permission bits determine the <em>read</em>, <em>write</em>, and
<em>execute</em> access for the file owner, group, and others (others
meaning identities other than the owner and members of the group). Some
operating systems and file systems may provide additional permission bits
but access to these other bits is not defined by this class in this release.

<p> <b>Usage Example:</b>
Suppose we need to print out the owner and access permissions of a file:
<pre>
    Path file = ...
    PosixFileAttributes attrs = Files.getFileAttributeView(file, PosixFileAttributeView.class)
        .readAttributes();
    System.out.format(\"%s %s%n\",
        attrs.owner().getName(),
        PosixFilePermissions.toString(attrs.permissions()));
</pre>

<h2> Dynamic Access </h2>
<p> Where dynamic access to file attributes is required, the attributes
supported by this attribute view are as defined by {@link
BasicFileAttributeView} and {@link FileOwnerAttributeView}, and in addition,
the following attributes are supported:
<blockquote>
<table border=\"1\" cellpadding=\"8\" summary=\"Supported attributes\">
  <tr>
    <th> Name </th>
    <th> Type </th>
  </tr>
 <tr>
    <td> \"permissions\" </td>
    <td> {@link Set}&lt;{@link PosixFilePermission}&gt; </td>
  </tr>
  <tr>
    <td> \"group\" </td>
    <td> {@link GroupPrincipal} </td>
  </tr>
</table>
</blockquote>

<p> The {@link Files#getAttribute getAttribute} method may be used to read
any of these attributes, or any of the attributes defined by {@link
BasicFileAttributeView} as if by invoking the {@link #readAttributes
readAttributes()} method.

<p> The {@link Files#setAttribute setAttribute} method may be used to update
the file's last modified time, last access time or create time attributes as
defined by {@link BasicFileAttributeView}. It may also be used to update
the permissions, owner, or group-owner as if by invoking the {@link
#setPermissions setPermissions}, {@link #setOwner setOwner}, and {@link
#setGroup setGroup} methods respectively.

<h2> Setting Initial Permissions </h2>
<p> Implementations supporting this attribute view may also support setting
the initial permissions when creating a file or directory. The
initial permissions are provided to the {@link Files#createFile createFile}
or {@link Files#createDirectory createDirectory} methods as a {@link
FileAttribute} with {@link FileAttribute#name name} {@code \"posix:permissions\"}
and a {@link FileAttribute#value value} that is the set of permissions. The
following example uses the {@link PosixFilePermissions#asFileAttribute
asFileAttribute} method to construct a {@code FileAttribute} when creating a
file:

<pre>
    Path path = ...
    Set&lt;PosixFilePermission&gt; perms =
        EnumSet.of(OWNER_READ, OWNER_WRITE, OWNER_EXECUTE, GROUP_READ);
    Files.createFile(path, PosixFilePermissions.asFileAttribute(perms));
</pre>

<p> When the access permissions are set at file creation time then the actual
value of the permissions may differ that the value of the attribute object.
The reasons for this are implementation specific. On UNIX systems, for
example, a process has a <em>umask</em> that impacts the permission bits
of newly created files. Where an implementation supports the setting of
the access permissions, and the underlying file system supports access
permissions, then it is required that the value of the actual access
permissions will be equal or less than the value of the attribute
provided to the {@link Files#createFile createFile} or {@link
Files#createDirectory createDirectory} methods. In other words, the file may
be more secure than requested.

@since 1.7
"
      classrelation 3320706 // <generalisation>
	relation 3320706 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3320706 // <generalisation>
	  b parent class_ref 1003266 // BasicFileAttributeView
      end

      classrelation 3320834 // <generalisation>
	relation 3320834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3320834 // <generalisation>
	  b parent class_ref 1002882 // FileOwnerAttributeView
      end

      operation 7866754 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the name of the attribute view. Attribute views of this type
have the name {@code \"posix\"}.
"
      end

      operation 7866882 "readAttributes"
	public return_type class_ref 1004034 // PosixFileAttributes
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@throws  IOException                {@inheritDoc}
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkRead(String) checkRead} method
         denies read access to the file.
"
      end

      operation 7867010 "setPermissions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "perms" type class_ref 192258 // Set
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PosixFilePermission> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the file permissions.

@param   perms
         the new set of permissions

@throws  ClassCastException
         if the sets contains elements that are not of type {@code
         PosixFilePermission}
@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the file.
"
      end

      operation 7867138 "setGroup"
	public explicit_return_type "void"
	nparams 1
	  param inout name "group" type class_ref 1003906 // GroupPrincipal
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the file group-owner.

@param   group
         the new file group-owner

@throws  IOException
         if an I/O error occurs
@throws  SecurityException
         In the case of the default provider, and a security manager is
         installed, it denies {@link RuntimePermission}<tt>(\"accessUserInformation\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the file.
"
      end
    end

    class 1004290 "PosixFilePermissions"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class consists exclusively of static methods that operate on sets of
{@link PosixFilePermission} objects.

@since 1.7
"
      operation 7867266 "PosixFilePermissions"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7867394 "writeBits"
	class_operation private explicit_return_type "void"
	nparams 4
	  param inout name "sb" type class_ref 173058 // StringBuilder
	  param inout name "r" explicit_type "boolean"
	  param inout name "w" explicit_type "boolean"
	  param inout name "x" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Write string representation of permission bits to {@code sb}."
      end

      operation 7867522 "toString"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "perms" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PosixFilePermission> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code String} representation of a set of permissions. It
is guaranteed that the returned {@code String} can be parsed by the
{@link #fromString} method.

<p> If the set contains {@code null} or elements that are not of type
{@code PosixFilePermission} then these elements are ignored.

@param   perms
         the set of permissions

@return  the string representation of the permission set
"
      end

      operation 7867650 "isSet"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "c" explicit_type "char"
	  param in name "setValue" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7867778 "isR"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7867906 "isW"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7868034 "isX"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7868162 "fromString"
	class_operation public return_type class_ref 192258 // Set
	nparams 1
	  param inout name "perms" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PosixFilePermission> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of permissions corresponding to a given {@code String}
representation.

<p> The {@code perms} parameter is a {@code String} representing the
permissions. It has 9 characters that are interpreted as three sets of
three. The first set refers to the owner's permissions; the next to the
group permissions and the last to others. Within each set, the first
character is {@code 'r'} to indicate permission to read, the second
character is {@code 'w'} to indicate permission to write, and the third
character is {@code 'x'} for execute permission. Where a permission is
not set then the corresponding character is set to {@code '-'}.

<p> <b>Usage Example:</b>
Suppose we require the set of permissions that indicate the owner has read,
write, and execute permissions, the group has read and execute permissions
and others have none.
<pre>
  Set&lt;PosixFilePermission&gt; perms = PosixFilePermissions.fromString(\"rwxr-x---\");
</pre>

@param   perms
         string representing a set of permissions

@return  the resulting set of permissions

@throws  IllegalArgumentException
         if the string cannot be converted to a set of permissions

@see #toString(Set)
"
      end

      operation 7868290 "asFileAttribute"
	class_operation public return_type class_ref 985730 // FileAttribute
	nparams 1
	  param inout name "perms" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Set<PosixFilePermission>> ${name}${(}${t0}<PosixFilePermission> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@link FileAttribute}, encapsulating a copy of the given file
permissions, suitable for passing to the {@link java.nio.file.Files#createFile
createFile} or {@link java.nio.file.Files#createDirectory createDirectory}
methods.

@param   perms
         the set of permissions

@return  an attribute encapsulating the given file permissions with
         {@link FileAttribute#name name} {@code \"posix:permissions\"}

@throws  ClassCastException
         if the set contains elements that are not of type {@code
         PosixFilePermission}
"
      end
    end

    class 1004418 "UserDefinedFileAttributeView"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A file attribute view that provides a view of a file's user-defined
attributes, sometimes known as <em>extended attributes</em>. User-defined
file attributes are used to store metadata with a file that is not meaningful
to the file system. It is primarily intended for file system implementations
that support such a capability directly but may be emulated. The details of
such emulation are highly implementation specific and therefore not specified.

<p> This {@code FileAttributeView} provides a view of a file's user-defined
attributes as a set of name/value pairs, where the attribute name is
represented by a {@code String}. An implementation may require to encode and
decode from the platform or file system representation when accessing the
attribute. The value has opaque content. This attribute view defines the
{@link #read read} and {@link #write write} methods to read the value into
or write from a {@link ByteBuffer}. This {@code FileAttributeView} is not
intended for use where the size of an attribute value is larger than {@link
Integer#MAX_VALUE}.

<p> User-defined attributes may be used in some implementations to store
security related attributes so consequently, in the case of the default
provider at least, all methods that access user-defined attributes require the
{@code RuntimePermission(\"accessUserDefinedAttributes\")} permission when a
security manager is installed.

<p> The {@link java.nio.file.FileStore#supportsFileAttributeView
supportsFileAttributeView} method may be used to test if a specific {@link
java.nio.file.FileStore FileStore} supports the storage of user-defined
attributes.

<p> Where dynamic access to file attributes is required, the {@link
java.nio.file.Files#getAttribute getAttribute} method may be used to read
the attribute value. The attribute value is returned as a byte array (byte[]).
The {@link java.nio.file.Files#setAttribute setAttribute} method may be used
to write the value of a user-defined attribute from a buffer (as if by
invoking the {@link #write write} method), or byte array (byte[]).

@since 1.7
"
      classrelation 3320962 // <generalisation>
	relation 3320962 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3320962 // <generalisation>
	  b parent class_ref 1003010 // FileAttributeView
      end

      operation 7868418 "name"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the name of this attribute view. Attribute views of this type
have the name {@code \"user\"}.
"
      end

      operation 7868546 "list"
	public return_type class_ref 175362 // List
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list containing the names of the user-defined attributes.

@return  An unmodifiable list containing the names of the file's
         user-defined

@throws  IOException
         If an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link
         RuntimePermission}<tt>(\"accessUserDefinedAttributes\")</tt>
         or its {@link SecurityManager#checkRead(String) checkRead} method
         denies read access to the file.
"
      end

      operation 7868674 "size"
	public explicit_return_type "int"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the value of a user-defined attribute.

@param   name
         The attribute name

@return  The size of the attribute value, in bytes.

@throws  ArithmeticException
         If the size of the attribute is larger than {@link Integer#MAX_VALUE}
@throws  IOException
         If an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link
         RuntimePermission}<tt>(\"accessUserDefinedAttributes\")</tt>
         or its {@link SecurityManager#checkRead(String) checkRead} method
         denies read access to the file.
"
      end

      operation 7868802 "read"
	public explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "dst" type class_ref 149890 // ByteBuffer
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Read the value of a user-defined attribute into a buffer.

<p> This method reads the value of the attribute into the given buffer
as a sequence of bytes, failing if the number of bytes remaining in
the buffer is insufficient to read the complete attribute value. The
number of bytes transferred into the buffer is {@code n}, where {@code n}
is the size of the attribute value. The first byte in the sequence is at
index {@code p} and the last byte is at index {@code p + n - 1}, where
{@code p} is the buffer's position. Upon return the buffer's position
will be equal to {@code p + n}; its limit will not have changed.

<p> <b>Usage Example:</b>
Suppose we want to read a file's MIME type that is stored as a user-defined
attribute with the name \"{@code user.mimetype}\".
<pre>
   UserDefinedFileAttributeView view =
       Files.getFileAttributeView(path, UserDefinedFileAttributeView.class);
   String name = \"user.mimetype\";
   ByteBuffer buf = ByteBuffer.allocate(view.size(name));
   view.read(name, buf);
   buf.flip();
   String value = Charset.defaultCharset().decode(buf).toString();
</pre>

@param   name
         The attribute name
@param   dst
         The destination buffer

@return  The number of bytes read, possibly zero

@throws  IllegalArgumentException
         If the destination buffer is read-only
@throws  IOException
         If an I/O error occurs or there is insufficient space in the
         destination buffer for the attribute value
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link
         RuntimePermission}<tt>(\"accessUserDefinedAttributes\")</tt>
         or its {@link SecurityManager#checkRead(String) checkRead} method
         denies read access to the file.

@see #size
"
      end

      operation 7868930 "write"
	public explicit_return_type "int"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "src" type class_ref 149890 // ByteBuffer
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes the value of a user-defined attribute from a buffer.

<p> This method writes the value of the attribute from a given buffer as
a sequence of bytes. The size of the value to transfer is {@code r},
where {@code r} is the number of bytes remaining in the buffer, that is
{@code src.remaining()}. The sequence of bytes is transferred from the
buffer starting at index {@code p}, where {@code p} is the buffer's
position. Upon return, the buffer's position will be equal to {@code
p + n}, where {@code n} is the number of bytes transferred; its limit
will not have changed.

<p> If an attribute of the given name already exists then its value is
replaced. If the attribute does not exist then it is created. If it
implementation specific if a test to check for the existence of the
attribute and the creation of attribute are atomic with respect to other
file system activities.

<p> Where there is insufficient space to store the attribute, or the
attribute name or value exceed an implementation specific maximum size
then an {@code IOException} is thrown.

<p> <b>Usage Example:</b>
Suppose we want to write a file's MIME type as a user-defined attribute:
<pre>
   UserDefinedFileAttributeView view =
       FIles.getFileAttributeView(path, UserDefinedFileAttributeView.class);
   view.write(\"user.mimetype\", Charset.defaultCharset().encode(\"text/html\"));
</pre>

@param   name
         The attribute name
@param   src
         The buffer containing the attribute value

@return  The number of bytes written, possibly zero

@throws  IOException
         If an I/O error occurs
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link
         RuntimePermission}<tt>(\"accessUserDefinedAttributes\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the file.
"
      end

      operation 7869058 "delete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes a user-defined attribute.

@param   name
         The attribute name

@throws  IOException
         If an I/O error occurs or the attribute does not exist
@throws  SecurityException
         In the case of the default provider, a security manager is
         installed, and it denies {@link
         RuntimePermission}<tt>(\"accessUserDefinedAttributes\")</tt>
         or its {@link SecurityManager#checkWrite(String) checkWrite}
         method denies write access to the file.
"
      end
    end

    class 1004546 "UserPrincipalNotFoundException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Checked exception thrown when a lookup of {@link UserPrincipal} fails because
the principal does not exist.

@since 1.7
"
      classrelation 3321090 // <generalisation>
	relation 3321090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3321090 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 1830530 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " -5369283889045833024L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3321218 // name (<unidirectional association>)
	relation 3321218 --->
	  a role_name "name" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3321218 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 7869570 "UserPrincipalNotFoundException"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of this class.

@param   name
         the principal name; may be {@code null}
"
      end

      operation 7869698 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the user principal name if this exception was created with the
user principal name that was not found, otherwise <tt>null</tt>.

@return  the user principal name or {@code null}
"
      end
    end
  end

  deploymentview 168578 "attribute"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 737922 "AclEntry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_elems
	class_ref 1002114 // AclEntry
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 738050 "AclEntryFlag"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1002498 // AclEntryFlag
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 738178 "AclEntryPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1002370 // AclEntryPermission
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 738306 "AclEntryType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1002242 // AclEntryType
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 738434 "AttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1003138 // AttributeView
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 738562 "FileAttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1003010 // FileAttributeView
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 738690 "FileOwnerAttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1002882 // FileOwnerAttributeView
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 738818 "AclFileAttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.*;
import java.util.List;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1002754 // AclFileAttributeView
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 738946 "BasicFileAttributes"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 998786 // BasicFileAttributes
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 739074 "BasicFileAttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1003266 // BasicFileAttributeView
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 739202 "DosFileAttributes"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1003394 // DosFileAttributes
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 739330 "DosFileAttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1003522 // DosFileAttributeView
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 739458 "FileAttribute"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 985730 // FileAttribute
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 739586 "FileStoreAttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1003650 // FileStoreAttributeView
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 739714 "FileTime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.Objects;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_elems
	class_ref 996354 // FileTime
      end
      comment "Copyright (c) 2009, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 739842 "UserPrincipal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.Principal;
${definition}"
      associated_elems
	class_ref 996226 // UserPrincipal
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 739970 "GroupPrincipal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1003906 // GroupPrincipal
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 740098 "PosixFileAttributes"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1004034 // PosixFileAttributes
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 740226 "PosixFileAttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.file.*;
import java.util.Set;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1004162 // PosixFileAttributeView
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 740354 "PosixFilePermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 996098 // PosixFilePermission
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 740482 "PosixFilePermissions"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import static java.nio.file.attribute.PosixFilePermission.*;
${definition}"
      associated_elems
	class_ref 1004290 // PosixFilePermissions
      end
      comment "Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 740610 "UserDefinedFileAttributeView"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.util.List;
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1004418 // UserDefinedFileAttributeView
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 740738 "UserPrincipalLookupService"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 996994 // UserPrincipalLookupService
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 740866 "UserPrincipalNotFoundException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1004546 // UserPrincipalNotFoundException
      end
      comment "Copyright (c) 2007, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
