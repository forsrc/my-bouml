class XPStyle
!!!2769282.java!!!	invalidateStyle() : void
        xp = null;
        themeActive = null;
        skinPainter.flush();
!!!2769410.java!!!	getXP() : XPStyle
        if (themeActive == null) {
            Toolkit toolkit = Toolkit.getDefaultToolkit();
            themeActive =
                (Boolean)toolkit.getDesktopProperty("win.xpstyle.themeActive");
            if (themeActive == null) {
                themeActive = Boolean.FALSE;
            }
            if (themeActive.booleanValue()) {
                GetPropertyAction propertyAction =
                    new GetPropertyAction("swing.noxp");
                if (AccessController.doPrivileged(propertyAction) == null &&
                    ThemeReader.isThemed() &&
                    !(UIManager.getLookAndFeel()
                      instanceof WindowsClassicLookAndFeel)) {

                    xp = new XPStyle();
                }
            }
        }
        return ThemeReader.isXPStyleEnabled() ? xp : null;
!!!2769538.java!!!	isVista() : boolean
        XPStyle xp = XPStyle.getXP();
        return (xp != null && xp.isSkinDefined(null, Part.CP_DROPDOWNBUTTONRIGHT));
!!!2769666.java!!!	getString(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop) : String
        return getTypeEnumName(c, part, state, prop);
!!!2769794.java!!!	getTypeEnum(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop) : TypeEnum
        int enumValue = ThemeReader.getEnum(part.getControlName(c), part.getValue(),
                                            State.getValue(part, state),
                                            prop.getValue());
        return TypeEnum.getTypeEnum(prop, enumValue);
!!!2769922.java!!!	getTypeEnumName(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop) : String
        int enumValue = ThemeReader.getEnum(part.getControlName(c), part.getValue(),
                                            State.getValue(part, state),
                                            prop.getValue());
        if (enumValue == -1) {
            return null;
        }
        return TypeEnum.getTypeEnum(prop, enumValue).getName();
!!!2770050.java!!!	getInt(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop, in fallback : int) : int
        return ThemeReader.getInt(part.getControlName(c), part.getValue(),
                                  State.getValue(part, state),
                                  prop.getValue());
!!!2770178.java!!!	getDimension(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop) : Dimension
        Dimension d = ThemeReader.getPosition(part.getControlName(c), part.getValue(),
                                              State.getValue(part, state),
                                              prop.getValue());
        return (d != null) ? d : new Dimension();
!!!2770306.java!!!	getPoint(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop) : Point
        Dimension d = ThemeReader.getPosition(part.getControlName(c), part.getValue(),
                                              State.getValue(part, state),
                                              prop.getValue());
        return (d != null) ? new Point(d.width, d.height) : new Point();
!!!2770434.java!!!	getMargin(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop) : Insets
        Insets insets = ThemeReader.getThemeMargins(part.getControlName(c), part.getValue(),
                                                    State.getValue(part, state),
                                                    prop.getValue());
        return (insets != null) ? insets : new Insets(0, 0, 0, 0);
!!!2770562.java!!!	getColor(inout skin : XPStyle::Skin, inout prop : Prop, inout fallback : Color) : Color
        String key = skin.toString() + "." + prop.name();
        Part part = skin.part;
        Color color = colorMap.get(key);
        if (color == null) {
            color = ThemeReader.getColor(part.getControlName(null), part.getValue(),
                                         State.getValue(part, skin.state),
                                         prop.getValue());
            if (color != null) {
                color = new ColorUIResource(color);
                colorMap.put(key, color);
            }
        }
        return (color != null) ? color : fallback;
!!!2770690.java!!!	getColor(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop, inout fallback : Color) : Color
        return getColor(new Skin(c, part, state), prop, fallback);
!!!2770818.java!!!	getBorder(inout c : Component, inout part : Part) : Border
        if (part == Part.MENU) {
            // Special case because XP has no skin for menus
            if (flatMenus) {
                // TODO: The classic border uses this color, but we should
                // create a new UI property called "PopupMenu.borderColor"
                // instead.
                return new XPFillBorder(UIManager.getColor("InternalFrame.borderShadow"),
                                        1);
            } else {
                return null;    // Will cause L&F to use classic border
            }
        }
        Skin skin = new Skin(c, part, null);
        Border border = borderMap.get(skin.string);
        if (border == null) {
            String bgType = getTypeEnumName(c, part, null, Prop.BGTYPE);
            if ("borderfill".equalsIgnoreCase(bgType)) {
                int thickness = getInt(c, part, null, Prop.BORDERSIZE, 1);
                Color color = getColor(skin, Prop.BORDERCOLOR, Color.black);
                border = new XPFillBorder(color, thickness);
                if (part == Part.CP_COMBOBOX) {
                    border = new XPStatefulFillBorder(color, thickness, part, Prop.BORDERCOLOR);
                }
            } else if ("imagefile".equalsIgnoreCase(bgType)) {
                Insets m = getMargin(c, part, null, Prop.SIZINGMARGINS);
                if (m != null) {
                    if (getBoolean(c, part, null, Prop.BORDERONLY)) {
                        border = new XPImageBorder(c, part);
                    } else if (part == Part.CP_COMBOBOX) {
                        border = new EmptyBorder(1, 1, 1, 1);
                    } else {
                        if(part == Part.TP_BUTTON) {
                            border = new XPEmptyBorder(new Insets(3,3,3,3));
                        } else {
                            border = new XPEmptyBorder(m);
                        }
                    }
                }
            }
            if (border != null) {
                borderMap.put(skin.string, border);
            }
        }
        return border;
!!!2772866.java!!!	isSkinDefined(inout c : Component, inout part : Part) : boolean
        return (part.getValue() == 0)
            || ThemeReader.isThemePartDefined(
                   part.getControlName(c), part.getValue(), 0);
!!!2772994.java!!!	getSkin(inout c : Component, inout part : Part) : XPStyle::Skin
        assert isSkinDefined(c, part) : "part " + part + " is not defined";
        return new Skin(c, part, null);
!!!2773122.java!!!	getThemeTransitionDuration(inout c : Component, inout part : Part, inout stateFrom : Thread::State, inout stateTo : Thread::State, inout prop : Prop) : long
         return ThemeReader.getThemeTransitionDuration(part.getControlName(c),
                                          part.getValue(),
                                          State.getValue(part, stateFrom),
                                          State.getValue(part, stateTo),
                                          (prop != null) ? prop.getValue() : 0);
!!!2776578.java!!!	XPStyle()
        flatMenus = getSysBoolean(Prop.FLATMENUS);

        colorMap  = new HashMap<String, Color>();
        borderMap = new HashMap<String, Border>();
        // Note: All further access to the maps must be synchronized
!!!2776706.java!!!	getBoolean(inout c : Component, inout part : Part, inout state : Thread::State, inout prop : Prop) : boolean
        return ThemeReader.getBoolean(part.getControlName(c), part.getValue(),
                                      State.getValue(part, state),
                                      prop.getValue());
!!!2776834.java!!!	getPartSize(inout part : Part, inout state : Thread::State) : Dimension
        return ThemeReader.getPartSize(part.getControlName(null), part.getValue(),
                                       State.getValue(part, state));
!!!2776962.java!!!	getSysBoolean(inout prop : Prop) : boolean
        // We can use any widget name here, I guess.
        return ThemeReader.getSysBoolean("window", prop.getValue());
