class EncryptionMethodImpl
!!!5368578.java!!!	EncryptionMethodImpl(inout algorithm : String)
                URI tmpAlgorithm = null;
                try {
                    tmpAlgorithm = new URI(algorithm);
                } catch (URISyntaxException ex) {
                    throw (IllegalArgumentException)
                    new IllegalArgumentException().initCause(ex);
                }
                this.algorithm = tmpAlgorithm.toString();
                encryptionMethodInformation = new LinkedList<Element>();
!!!5368706.java!!!	getAlgorithm() : String
                return algorithm;
!!!5368834.java!!!	getKeySize() : int
                return keySize;
!!!5368962.java!!!	setKeySize(in size : int) : void
                keySize = size;
!!!5369090.java!!!	getOAEPparams() : byte
                return oaepParams;
!!!5369218.java!!!	setOAEPparams(inout params : byte [[]]) : void
                oaepParams = params;
!!!5369346.java!!!	setDigestAlgorithm(inout digestAlgorithm : String) : void
                this.digestAlgorithm = digestAlgorithm;
!!!5369474.java!!!	getDigestAlgorithm() : String
                return digestAlgorithm;
!!!5369602.java!!!	setMGFAlgorithm(inout mgfAlgorithm : String) : void
                this.mgfAlgorithm = mgfAlgorithm;
!!!5369730.java!!!	getMGFAlgorithm() : String
                return mgfAlgorithm;
!!!5369858.java!!!	getEncryptionMethodInformation() : Iterator
                return encryptionMethodInformation.iterator();
!!!5369986.java!!!	addEncryptionMethodInformation(inout info : Element) : void
                encryptionMethodInformation.add(info);
!!!5370114.java!!!	removeEncryptionMethodInformation(inout info : Element) : void
                encryptionMethodInformation.remove(info);
!!!5370242.java!!!	toElement() : Element
                Element result =
                    XMLUtils.createElementInEncryptionSpace(
                        contextDocument, EncryptionConstants._TAG_ENCRYPTIONMETHOD
                    );
                result.setAttributeNS(null, EncryptionConstants._ATT_ALGORITHM, algorithm);
                if (keySize > 0) {
                    result.appendChild(
                        XMLUtils.createElementInEncryptionSpace(
                            contextDocument, EncryptionConstants._TAG_KEYSIZE
                    ).appendChild(contextDocument.createTextNode(String.valueOf(keySize))));
                }
                if (null != oaepParams) {
                    Element oaepElement =
                        XMLUtils.createElementInEncryptionSpace(
                            contextDocument, EncryptionConstants._TAG_OAEPPARAMS
                        );
                    oaepElement.appendChild(contextDocument.createTextNode(Base64.encode(oaepParams)));
                    result.appendChild(oaepElement);
                }
                if (digestAlgorithm != null) {
                    Element digestElement =
                        XMLUtils.createElementInSignatureSpace(contextDocument, Constants._TAG_DIGESTMETHOD);
                    digestElement.setAttributeNS(null, "Algorithm", digestAlgorithm);
                    result.appendChild(digestElement);
                }
                if (mgfAlgorithm != null) {
                    Element mgfElement =
                        XMLUtils.createElementInEncryption11Space(
                            contextDocument, EncryptionConstants._TAG_MGF
                        );
                    mgfElement.setAttributeNS(null, "Algorithm", mgfAlgorithm);
                    mgfElement.setAttributeNS(
                        Constants.NamespaceSpecNS,
                        "xmlns:" + ElementProxy.getDefaultPrefix(EncryptionConstants.EncryptionSpec11NS),
                        EncryptionConstants.EncryptionSpec11NS
                    );
                    result.appendChild(mgfElement);
                }
                Iterator<Element> itr = encryptionMethodInformation.iterator();
                while (itr.hasNext()) {
                    result.appendChild(itr.next());
                }

                return result;
