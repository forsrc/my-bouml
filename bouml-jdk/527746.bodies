class ThreadService
!!!3308930.java!!!	ThreadService(in threadNumber : int)
        if (threadNumber <= 0) {
            throw new IllegalArgumentException("The thread number should bigger than zero.");
        }

        minThreads = threadNumber;
        threadList = new ExecutorThread[threadNumber];

        priority = Thread.currentThread().getPriority();
        cloader = Thread.currentThread().getContextClassLoader();

!!!3309058.java!!!	submitTask(inout task : Task) : void
        submitTask((Runnable)task);
!!!3309186.java!!!	submitTask(inout task : Runnable) : void
        stateCheck();

        if (task == null) {
            throw new IllegalArgumentException("No task specified.");
        }

        synchronized(jobList) {
            jobList.add(jobList.size(), task);

            jobList.notify();
        }

        createThread();
!!!3309314.java!!!	removeTask(inout task : Runnable) : Runnable
        stateCheck();

        Runnable removed = null;
        synchronized(jobList) {
            int lg = jobList.indexOf(task);
            if (lg >= 0) {
                removed = jobList.remove(lg);
            }
        }
        if (removed != null && removed instanceof Task)
            ((Task) removed).cancel();
        return removed;
!!!3309442.java!!!	removeAll() : void
        stateCheck();

        final Object[] jobs;
        synchronized(jobList) {
            jobs = jobList.toArray();
            jobList.clear();
        }
        final int len = jobs.length;
        for (int i=0; i<len ; i++) {
            final Object o = jobs[i];
            if (o!= null && o instanceof Task) ((Task)o).cancel();
        }
!!!3309570.java!!!	terminate() : void

        if (terminated == true) {
            return;
        }

        terminated = true;

        synchronized(jobList) {
            jobList.notifyAll();
        }

        removeAll();

        for (int i=0; i<currThreds; i++) {
            try {
                threadList[i].interrupt();
            } catch (Exception e) {
                // TODO
            }
        }

        threadList = null;
!!!3309954.java!!!	stateCheck() : void
        if (terminated) {
            throw new IllegalStateException("The thread service has been terminated.");
        }
!!!3310082.java!!!	createThread() : void
        if (idle < 1) {
            synchronized(threadList) {
                if (jobList.size() > 0 && currThreds < minThreads) {
                    ExecutorThread et = new ExecutorThread();
                    et.start();
                    threadList[currThreds++] = et;
                }
            }
        }
