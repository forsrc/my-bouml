format 222
"tree" // jdk1.8::javax::swing::tree
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/swing/tree/"
  java_package "javax.swing.tree"
  classview 149762 "tree"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 410242 "TreeNode"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the requirements for an object that can be used as a
tree node in a JTree.
<p>
Implementations of <code>TreeNode</code> that override <code>equals</code>
will typically need to override <code>hashCode</code> as well.  Refer
to {@link javax.swing.tree.TreeModel} for more information.

For further information and examples of using tree nodes,
see <a
href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\">How to Use Tree Nodes</a>
in <em>The Java Tutorial.</em>

@author Rob Davis
@author Scott Violet
"
      operation 2380930 "getChildAt"
	public return_type class_ref 410242 // TreeNode
	nparams 1
	  param in name "childIndex" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child <code>TreeNode</code> at index
<code>childIndex</code>.
"
      end

      operation 2381058 "getChildCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of children <code>TreeNode</code>s the receiver
contains.
"
      end

      operation 2381186 "getParent"
	public return_type class_ref 410242 // TreeNode
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent <code>TreeNode</code> of the receiver.
"
      end

      operation 2381314 "getIndex"
	public explicit_return_type "int"
	nparams 1
	  param inout name "node" type class_ref 410242 // TreeNode
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of <code>node</code> in the receivers children.
If the receiver does not contain <code>node</code>, -1 will be
returned.
"
      end

      operation 2381442 "getAllowsChildren"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the receiver allows children.
"
      end

      operation 2381570 "isLeaf"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the receiver is a leaf.
"
      end

      operation 2381698 "children"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the children of the receiver as an <code>Enumeration</code>.
"
      end
    end

    class 447874 "DefaultTreeCellRenderer"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Displays an entry in a tree.
<code>DefaultTreeCellRenderer</code> is not opaque and
unless you subclass paint you should not change this.
See <a
href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\">How to Use Trees</a>
in <em>The Java Tutorial</em>
for examples of customizing node display using this class.
<p>
The set of icons and colors used by {@code DefaultTreeCellRenderer}
can be configured using the various setter methods. The value for
each property is initialized from the defaults table. When the
look and feel changes ({@code updateUI} is invoked), any properties
that have a value of type {@code UIResource} are refreshed from the
defaults table. The following table lists the mapping between
{@code DefaultTreeCellRenderer} property and defaults table key:
<table border=\"1\" cellpadding=\"1\" cellspacing=\"0\" summary=\"\">
  <tr valign=\"top\"  align=\"left\">
    <th style=\"background-color:#CCCCFF\" align=\"left\">Property:
    <th style=\"background-color:#CCCCFF\" align=\"left\">Key:
  <tr><td>\"leafIcon\"<td>\"Tree.leafIcon\"
  <tr><td>\"closedIcon\"<td>\"Tree.closedIcon\"
  <tr><td>\"openIcon\"<td>\"Tree.openIcon\"
  <tr><td>\"textSelectionColor\"<td>\"Tree.selectionForeground\"
  <tr><td>\"textNonSelectionColor\"<td>\"Tree.textForeground\"
  <tr><td>\"backgroundSelectionColor\"<td>\"Tree.selectionBackground\"
  <tr><td>\"backgroundNonSelectionColor\"<td>\"Tree.textBackground\"
  <tr><td>\"borderSelectionColor\"<td>\"Tree.selectionBorderColor\"
</table>
<p>
<strong><a name=\"override\">Implementation Note:</a></strong>
This class overrides
<code>invalidate</code>,
<code>validate</code>,
<code>revalidate</code>,
<code>repaint</code>,
and
<code>firePropertyChange</code>
solely to improve performance.
If not overridden, these frequently called methods would execute code paths
that are unnecessary for the default tree cell renderer.
If you write your own renderer,
take care to weigh the benefits and
drawbacks of overriding these methods.

<p>
<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@author Rob Davis
@author Ray Ryan
@author Scott Violet
"
      classrelation 870146 // <generalisation>
	relation 870146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 870146 // <generalisation>
	  b parent class_ref 359810 // JLabel
      end

      classrelation 870274 // <realization>
	relation 870274 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 870274 // <realization>
	  b parent class_ref 448002 // TreeCellRenderer
      end

      classrelation 870402 // tree (<unidirectional association>)
	relation 870402 --->
	  a role_name "tree" private
	    comment " Last tree the renderer was painted in. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 870402 // tree (<unidirectional association>)
	  b parent class_ref 448130 // JTree
      end

      attribute 565122 "selected"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Is the value currently selected. 
"
      end

      attribute 565250 "hasFocus"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if has focus. 
"
      end

      attribute 565378 "drawsFocusBorderAroundIcon"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " True if draws focus border around icon as well. 
"
      end

      attribute 565506 "drawDashedFocusIndicator"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " If true, a dashed line is drawn as the focus indicator. 
"
      end

      classrelation 870530 // treeBGColor (<unidirectional association>)
	relation 870530 --->
	  a role_name "treeBGColor" private
	    comment " If drawDashedFocusIndicator is true, the following are used.

Background color of the tree.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 870530 // treeBGColor (<unidirectional association>)
	  b parent class_ref 323458 // Color
      end

      classrelation 870658 // focusBGColor (<unidirectional association>)
	relation 870658 --->
	  a role_name "focusBGColor" private
	    comment "
Color to draw the focus indicator in, determined from the background.
color.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 870658 // focusBGColor (<unidirectional association>)
	  b parent class_ref 323458 // Color
      end

      classrelation 870786 // closedIcon (<unidirectional association>)
	relation 870786 --->
	  a role_name "closedIcon" protected
	    comment " Icons
 Icon used to show non-leaf nodes that aren't expanded. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 870786 // closedIcon (<unidirectional association>)
	  b parent class_ref 352642 // Icon
      end

      classrelation 870914 // leafIcon (<unidirectional association>)
	relation 870914 --->
	  a role_name "leafIcon" protected
	    comment " Icon used to show leaf nodes. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 870914 // leafIcon (<unidirectional association>)
	  b parent class_ref 352642 // Icon
      end

      classrelation 871042 // openIcon (<unidirectional association>)
	relation 871042 --->
	  a role_name "openIcon" protected
	    comment " Icon used to show non-leaf nodes that are expanded. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 871042 // openIcon (<unidirectional association>)
	  b parent class_ref 352642 // Icon
      end

      classrelation 871170 // textSelectionColor (<unidirectional association>)
	relation 871170 --->
	  a role_name "textSelectionColor" protected
	    comment " Colors
 Color to use for the foreground for selected nodes. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 871170 // textSelectionColor (<unidirectional association>)
	  b parent class_ref 323458 // Color
      end

      classrelation 871298 // textNonSelectionColor (<unidirectional association>)
	relation 871298 --->
	  a role_name "textNonSelectionColor" protected
	    comment " Color to use for the foreground for non-selected nodes. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 871298 // textNonSelectionColor (<unidirectional association>)
	  b parent class_ref 323458 // Color
      end

      classrelation 871426 // backgroundSelectionColor (<unidirectional association>)
	relation 871426 --->
	  a role_name "backgroundSelectionColor" protected
	    comment " Color to use for the background when a node is selected. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 871426 // backgroundSelectionColor (<unidirectional association>)
	  b parent class_ref 323458 // Color
      end

      classrelation 871554 // backgroundNonSelectionColor (<unidirectional association>)
	relation 871554 --->
	  a role_name "backgroundNonSelectionColor" protected
	    comment " Color to use for the background when the node isn't selected. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 871554 // backgroundNonSelectionColor (<unidirectional association>)
	  b parent class_ref 323458 // Color
      end

      classrelation 871682 // borderSelectionColor (<unidirectional association>)
	relation 871682 --->
	  a role_name "borderSelectionColor" protected
	    comment " Color to use for the focus indicator when the node has focus. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 871682 // borderSelectionColor (<unidirectional association>)
	  b parent class_ref 323458 // Color
      end

      attribute 565634 "isDropCell"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 565762 "fillBackground"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 565890 "inited"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Set to true after the constructor has run.

"
      end

      operation 2694530 "DefaultTreeCellRenderer"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code DefaultTreeCellRenderer}. Icons and text color are
determined from the {@code UIManager}.
"
      end

      operation 2694658 "updateUI"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@since 1.7
"
      end

      operation 2694786 "getDefaultOpenIcon"
	public return_type class_ref 352642 // Icon
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default icon, for the current laf, that is used to
represent non-leaf nodes that are expanded.
"
      end

      operation 2694914 "getDefaultClosedIcon"
	public return_type class_ref 352642 // Icon
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default icon, for the current laf, that is used to
represent non-leaf nodes that are not expanded.
"
      end

      operation 2695042 "getDefaultLeafIcon"
	public return_type class_ref 352642 // Icon
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default icon, for the current laf, that is used to
represent leaf nodes.
"
      end

      operation 2695170 "setOpenIcon"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newIcon" type class_ref 352642 // Icon
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the icon used to represent non-leaf nodes that are expanded.
"
      end

      operation 2695298 "getOpenIcon"
	public return_type class_ref 352642 // Icon
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the icon used to represent non-leaf nodes that are expanded.
"
      end

      operation 2695426 "setClosedIcon"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newIcon" type class_ref 352642 // Icon
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the icon used to represent non-leaf nodes that are not expanded.
"
      end

      operation 2695554 "getClosedIcon"
	public return_type class_ref 352642 // Icon
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the icon used to represent non-leaf nodes that are not
expanded.
"
      end

      operation 2695682 "setLeafIcon"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newIcon" type class_ref 352642 // Icon
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the icon used to represent leaf nodes.
"
      end

      operation 2695810 "getLeafIcon"
	public return_type class_ref 352642 // Icon
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the icon used to represent leaf nodes.
"
      end

      operation 2695938 "setTextSelectionColor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newColor" type class_ref 323458 // Color
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the color the text is drawn with when the node is selected.
"
      end

      operation 2696066 "getTextSelectionColor"
	public return_type class_ref 323458 // Color
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color the text is drawn with when the node is selected.
"
      end

      operation 2696194 "setTextNonSelectionColor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newColor" type class_ref 323458 // Color
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the color the text is drawn with when the node isn't selected.
"
      end

      operation 2696322 "getTextNonSelectionColor"
	public return_type class_ref 323458 // Color
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color the text is drawn with when the node isn't selected.
"
      end

      operation 2696450 "setBackgroundSelectionColor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newColor" type class_ref 323458 // Color
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the color to use for the background if node is selected.
"
      end

      operation 2696578 "getBackgroundSelectionColor"
	public return_type class_ref 323458 // Color
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color to use for the background if node is selected.
"
      end

      operation 2696706 "setBackgroundNonSelectionColor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newColor" type class_ref 323458 // Color
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the background color to be used for non selected nodes.
"
      end

      operation 2696834 "getBackgroundNonSelectionColor"
	public return_type class_ref 323458 // Color
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the background color to be used for non selected nodes.
"
      end

      operation 2696962 "setBorderSelectionColor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newColor" type class_ref 323458 // Color
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the color to use for the border.
"
      end

      operation 2697090 "getBorderSelectionColor"
	public return_type class_ref 323458 // Color
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color the border is drawn.
"
      end

      operation 2697218 "setFont"
	public explicit_return_type "void"
	nparams 1
	  param inout name "font" type class_ref 340354 // Font
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclassed to map <code>FontUIResource</code>s to null. If
<code>font</code> is null, or a <code>FontUIResource</code>, this
has the effect of letting the font of the JTree show
through. On the other hand, if <code>font</code> is non-null, and not
a <code>FontUIResource</code>, the font becomes <code>font</code>.
"
      end

      operation 2697346 "getFont"
	public return_type class_ref 340354 // Font
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the font of this component.
@return this component's font; if a font has not been set
for this component, the font of its parent is returned
"
      end

      operation 2697474 "setBackground"
	public explicit_return_type "void"
	nparams 1
	  param inout name "color" type class_ref 323458 // Color
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Subclassed to map <code>ColorUIResource</code>s to null. If
<code>color</code> is null, or a <code>ColorUIResource</code>, this
has the effect of letting the background color of the JTree show
through. On the other hand, if <code>color</code> is non-null, and not
a <code>ColorUIResource</code>, the background becomes
<code>color</code>.
"
      end

      operation 2697602 "getTreeCellRendererComponent"
	public return_type class_ref 338818 // Component
	nparams 7
	  param inout name "tree" type class_ref 448130 // JTree
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "sel" explicit_type "boolean"
	  param inout name "expanded" explicit_type "boolean"
	  param inout name "leaf" explicit_type "boolean"
	  param in name "row" explicit_type "int"
	  param inout name "hasFocus" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Configures the renderer based on the passed in components.
The value is set from messaging the tree with
<code>convertValueToText</code>, which ultimately invokes
<code>toString</code> on <code>value</code>.
The foreground color is set based on the selection and the icon
is set based on the <code>leaf</code> and <code>expanded</code>
parameters.
"
      end

      operation 2697730 "paint"
	public explicit_return_type "void"
	nparams 1
	  param inout name "g" type class_ref 343682 // Graphics
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Paints the value.  The background is filled based on selected.
"
      end

      operation 2697858 "paintFocus"
	private explicit_return_type "void"
	nparams 6
	  param inout name "g" type class_ref 343682 // Graphics
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	  param inout name "notColor" type class_ref 323458 // Color
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2697986 "getLabelStart"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2698114 "getPreferredSize"
	public return_type class_ref 316802 // Dimension
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overrides <code>JComponent.getPreferredSize</code> to
return slightly wider preferred size value.
"
      end

      operation 2698242 "validate"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2698370 "invalidate"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.

@since 1.5
"
      end

      operation 2698498 "revalidate"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2698626 "repaint"
	public explicit_return_type "void"
	nparams 5
	  param in name "tm" explicit_type "long"
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2698754 "repaint"
	public explicit_return_type "void"
	nparams 1
	  param inout name "r" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2698882 "repaint"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.

@since 1.5
"
      end

      operation 2699010 "firePropertyChange"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param inout name "oldValue" type class_ref 129538 // Object
	  param inout name "newValue" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2699138 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param in name "oldValue" explicit_type "byte"
	  param in name "newValue" explicit_type "byte"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2699266 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param in name "oldValue" explicit_type "char"
	  param in name "newValue" explicit_type "char"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2699394 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param in name "oldValue" explicit_type "short"
	  param in name "newValue" explicit_type "short"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2699522 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param in name "oldValue" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2699650 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param in name "oldValue" explicit_type "long"
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2699778 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param in name "oldValue" explicit_type "float"
	  param in name "newValue" explicit_type "float"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2699906 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param in name "oldValue" explicit_type "double"
	  param in name "newValue" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end

      operation 2700034 "firePropertyChange"
	public explicit_return_type "void"
	nparams 3
	  param inout name "propertyName" type class_ref 128130 // String
	  param inout name "oldValue" explicit_type "boolean"
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden for performance reasons.
See the <a href=\"#override\">Implementation Note</a>
for more information.
"
      end
    end

    class 448002 "TreeCellRenderer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the requirements for an object that displays a tree node.
See <a
href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\">How to Use Trees</a>
in <em>The Java Tutorial</em>
for an example of implementing a tree cell renderer
that displays custom icons.

@author Rob Davis
@author Ray Ryan
@author Scott Violet
"
      operation 2694402 "getTreeCellRendererComponent"
	public return_type class_ref 338818 // Component
	nparams 7
	  param inout name "tree" type class_ref 448130 // JTree
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "selected" explicit_type "boolean"
	  param inout name "expanded" explicit_type "boolean"
	  param inout name "leaf" explicit_type "boolean"
	  param in name "row" explicit_type "int"
	  param inout name "hasFocus" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the current tree cell to <code>value</code>.
If <code>selected</code> is true, the cell will be drawn as if
selected. If <code>expanded</code> is true the node is currently
expanded and if <code>leaf</code> is true the node represents a
leaf and if <code>hasFocus</code> is true the node currently has
focus. <code>tree</code> is the <code>JTree</code> the receiver is being
configured for.  Returns the <code>Component</code> that the renderer
uses to draw the value.
<p>
The <code>TreeCellRenderer</code> is also responsible for rendering the
the cell representing the tree's current DnD drop location if
it has one. If this renderer cares about rendering
the DnD drop location, it should query the tree directly to
see if the given row represents the drop location:
<pre>
    JTree.DropLocation dropLocation = tree.getDropLocation();
    if (dropLocation != null
            &amp;&amp; dropLocation.getChildIndex() == -1
            &amp;&amp; tree.getRowForPath(dropLocation.getPath()) == row) {

        // this row represents the current drop location
        // so render it specially, perhaps with a different color
    }
</pre>

@return  the <code>Component</code> that the renderer uses to draw the value
"
      end
    end

    class 448770 "TreePath"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code TreePath} represents an array of objects that uniquely
identify the path to a node in a tree. The elements of the array
are ordered with the root as the first element of the array. For
example, a file on the file system is uniquely identified based on
the array of parent directories and the name of the file. The path
{@code /tmp/foo/bar} could be represented by a {@code TreePath} as
{@code new TreePath(new Object[] {\"tmp\", \"foo\", \"bar\"})}.
<p>
{@code TreePath} is used extensively by {@code JTree} and related classes.
For example, {@code JTree} represents the selection as an array of
{@code TreePath}s. When used with {@code JTree}, the elements of the
path are the objects returned from the {@code TreeModel}. When {@code JTree}
is paired with {@code DefaultTreeModel}, the elements of the
path are {@code TreeNode}s. The following example illustrates extracting
the user object from the selection of a {@code JTree}:
<pre>
  DefaultMutableTreeNode root = ...;
  DefaultTreeModel model = new DefaultTreeModel(root);
  JTree tree = new JTree(model);
  ...
  TreePath selectedPath = tree.getSelectionPath();
  DefaultMutableTreeNode selectedNode =
      ((DefaultMutableTreeNode)selectedPath.getLastPathComponent()).
      getUserObject();
</pre>
Subclasses typically need override only {@code
getLastPathComponent}, and {@code getParentPath}. As {@code JTree}
internally creates {@code TreePath}s at various points, it's
generally not useful to subclass {@code TreePath} and use with
{@code JTree}.
<p>
While {@code TreePath} is serializable, a {@code
NotSerializableException} is thrown if any elements of the path are
not serializable.
<p>
For further information and examples of using tree paths,
see <a
href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\">How to Use Trees</a>
in <em>The Java Tutorial.</em>
<p>
<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@author Scott Violet
@author Philip Milne
"
      classrelation 4741634 // <generalisation>
	relation 4741634 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4741634 // <generalisation>
	  b parent class_ref 129538 // Object
      end

      classrelation 4741762 // <realization>
	relation 4741762 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4741762 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 4741890 // parentPath (<unidirectional association>)
	relation 4741890 --->
	  a role_name "parentPath" private
	    comment " Path representing the parent, null if lastPathComponent represents
the root. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4741890 // parentPath (<unidirectional association>)
	  b parent class_ref 448770 // TreePath
      end

      classrelation 4742018 // lastPathComponent (<unidirectional association>)
	relation 4742018 --->
	  a role_name "lastPathComponent" private
	    comment " Last path component. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4742018 // lastPathComponent (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 11900802 "TreePath"
	public explicit_return_type ""
	nparams 1
	  param inout name "path" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ConstructorProperties({\"path\"})
"
	
	
	
	comment "Creates a {@code TreePath} from an array. The array uniquely
identifies the path to a node.

@param path an array of objects representing the path to a node
@throws IllegalArgumentException if {@code path} is {@code null},
        empty, or contains a {@code null} value
"
      end

      operation 11900930 "TreePath"
	public explicit_return_type ""
	nparams 1
	  param inout name "lastPathComponent" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code TreePath} containing a single element. This is
used to construct a {@code TreePath} identifying the root.

@param lastPathComponent the root
@see #TreePath(Object[])
@throws IllegalArgumentException if {@code lastPathComponent} is
        {@code null}
"
      end

      operation 11901058 "TreePath"
	protected explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 448770 // TreePath
	  param inout name "lastPathComponent" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code TreePath} with the specified parent and element.

@param parent the path to the parent, or {@code null} to indicate
       the root
@param lastPathComponent the last path element
@throws IllegalArgumentException if {@code lastPathComponent} is
        {@code null}
"
      end

      operation 11901186 "TreePath"
	protected explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 129538 // Object
	multiplicity "[]"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code TreePath} from an array. The returned
{@code TreePath} represents the elements of the array from
{@code 0} to {@code length - 1}.
<p>
This constructor is used internally, and generally not useful outside
of subclasses.

@param path the array to create the {@code TreePath} from
@param length identifies the number of elements in {@code path} to
       create the {@code TreePath} from
@throws NullPointerException if {@code path} is {@code null}
@throws ArrayIndexOutOfBoundsException if {@code length - 1} is
        outside the range of the array
@throws IllegalArgumentException if any of the elements from
        {@code 0} to {@code length - 1} are {@code null}
"
      end

      operation 11901314 "TreePath"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty {@code TreePath}.  This is provided for
subclasses that represent paths in a different
manner. Subclasses that use this constructor must override
{@code getLastPathComponent}, and {@code getParentPath}.
"
      end

      operation 11901442 "getPath"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an ordered array of the elements of this {@code TreePath}.
The first element is the root.

@return an array of the elements in this {@code TreePath}
"
      end

      operation 11901570 "getLastPathComponent"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last element of this path.

@return the last element in the path
"
      end

      operation 11901698 "getPathCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in the path.

@return the number of elements in the path
"
      end

      operation 11901826 "getPathComponent"
	public return_type class_ref 129538 // Object
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path element at the specified index.

@param index the index of the element requested
@return the element at the specified index
@throws IllegalArgumentException if the index is outside the
        range of this path
"
      end

      operation 11901954 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code TreePath} to the specified object. This returns
{@code true} if {@code o} is a {@code TreePath} with the exact
same elements (as determined by using {@code equals} on each
element of the path).

@param o the object to compare
"
      end

      operation 11902082 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hash code of this {@code TreePath}. The hash code of a
{@code TreePath} is the hash code of the last element in the path.

@return the hashCode for the object
"
      end

      operation 11902210 "isDescendant"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "aTreePath" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if <code>aTreePath</code> is a
descendant of this
{@code TreePath}. A {@code TreePath} {@code P1} is a descendant of a
{@code TreePath} {@code P2}
if {@code P1} contains all of the elements that make up
{@code P2's} path.
For example, if this object has the path {@code [a, b]},
and <code>aTreePath</code> has the path {@code [a, b, c]},
then <code>aTreePath</code> is a descendant of this object.
However, if <code>aTreePath</code> has the path {@code [a]},
then it is not a descendant of this object.  By this definition
a {@code TreePath} is always considered a descendant of itself.
That is, <code>aTreePath.isDescendant(aTreePath)</code> returns
{@code true}.

@param aTreePath the {@code TreePath} to check
@return true if <code>aTreePath</code> is a descendant of this path
"
      end

      operation 11902338 "pathByAddingChild"
	public return_type class_ref 448770 // TreePath
	nparams 1
	  param inout name "child" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new path containing all the elements of this path
plus <code>child</code>. <code>child</code> is the last element
of the newly created {@code TreePath}.

@param child the path element to add
@throws NullPointerException if {@code child} is {@code null}
"
      end

      operation 11902466 "getParentPath"
	public return_type class_ref 448770 // TreePath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code TreePath} of the parent. A return value of
{@code null} indicates this is the root node.

@return the parent path
"
      end

      operation 11902594 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string that displays and identifies this
object's properties.

@return a String representation of this object
"
      end
    end

    class 449026 "TreeCellEditor"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Adds to CellEditor the extensions necessary to configure an editor
in a tree.

@see javax.swing.JTree

@author Scott Violet
"
      classrelation 4072578 // <generalisation>
	relation 4072578 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4072578 // <generalisation>
	  b parent class_ref 1262850 // CellEditor
      end

      operation 10464130 "getTreeCellEditorComponent"
	public return_type class_ref 338818 // Component
	nparams 6
	  param inout name "tree" type class_ref 448130 // JTree
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "isSelected" explicit_type "boolean"
	  param inout name "expanded" explicit_type "boolean"
	  param inout name "leaf" explicit_type "boolean"
	  param in name "row" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets an initial <I>value</I> for the editor.  This will cause
the editor to stopEditing and lose any partially edited value
if the editor is editing when this method is called. <p>

Returns the component that should be added to the client's
Component hierarchy.  Once installed in the client's hierarchy
this component will then be able to draw and receive user input.

@param   tree            the JTree that is asking the editor to edit;
                         this parameter can be null
@param   value           the value of the cell to be edited
@param   isSelected      true if the cell is to be rendered with
                         selection highlighting
@param   expanded        true if the node is expanded
@param   leaf            true if the node is a leaf node
@param   row             the row index of the node being edited
@return  the component for editing
"
      end
    end

    class 449154 "AbstractLayoutCache"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@author Scott Violet
"
      class 449282 "NodeDimensions"
	abstract visibility public 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	operation 2727298 "getNodeDimensions"
	  abstract public return_type class_ref 314114 // Rectangle
	  nparams 5
	    param inout name "value" type class_ref 129538 // Object
	    param in name "row" explicit_type "int"
	    param in name "depth" explicit_type "int"
	    param inout name "expanded" explicit_type "boolean"
	    param inout name "bounds" type class_ref 314114 // Rectangle
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns, by reference in bounds, the size and x origin to
place value at. The calling method is responsible for determining
the Y location. If bounds is <code>null</code>, a newly created
<code>Rectangle</code> should be returned,
otherwise the value should be placed in bounds and returned.

@param value the <code>value</code> to be represented
@param row row being queried
@param depth the depth of the row
@param expanded true if row is expanded, false otherwise
@param bounds  a <code>Rectangle</code> containing the size needed
             to represent <code>value</code>
@return a <code>Rectangle</code> containing the node dimensions,
             or <code>null</code> if node has no dimension
"
	end
      end

      classrelation 878722 // <realization>
	relation 878722 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 878722 // <realization>
	  b parent class_ref 451842 // RowMapper
      end

      classrelation 878850 // nodeDimensions (<unidirectional association>)
	relation 878850 --->
	  a role_name "nodeDimensions" protected
	    comment " Object responsible for getting the size of a node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 878850 // nodeDimensions (<unidirectional association>)
	  b parent class_ref 449282 // NodeDimensions
      end

      classrelation 878978 // treeModel (<unidirectional association>)
	relation 878978 --->
	  a role_name "treeModel" protected
	    comment " Model providing information. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 878978 // treeModel (<unidirectional association>)
	  b parent class_ref 449410 // TreeModel
      end

      classrelation 879106 // treeSelectionModel (<unidirectional association>)
	relation 879106 --->
	  a role_name "treeSelectionModel" protected
	    comment " Selection model. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 879106 // treeSelectionModel (<unidirectional association>)
	  b parent class_ref 449538 // TreeSelectionModel
      end

      attribute 568578 "rootVisible"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if the root node is displayed, false if its children are
the highest visible nodes.

"
      end

      attribute 568706 "rowHeight"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Height to use for each row.  If this is &lt;= 0 the renderer will be
used to determine the height for each row.

"
      end

      operation 2723330 "setNodeDimensions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "nd" type class_ref 449282 // NodeDimensions
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the renderer that is responsible for drawing nodes in the tree
and which is therefore responsible for calculating the dimensions of
individual nodes.

@param nd a <code>NodeDimensions</code> object
"
      end

      operation 2723458 "getNodeDimensions"
	public return_type class_ref 449282 // NodeDimensions
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the object that renders nodes in the tree, and which is
responsible for calculating the dimensions of individual nodes.

@return the <code>NodeDimensions</code> object
"
      end

      operation 2723586 "setModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newModel" type class_ref 449410 // TreeModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>TreeModel</code> that will provide the data.

@param newModel the <code>TreeModel</code> that is to
         provide the data
"
      end

      operation 2723714 "getModel"
	public return_type class_ref 449410 // TreeModel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>TreeModel</code> that is providing the data.

@return the <code>TreeModel</code> that is providing the data
"
      end

      operation 2723842 "setRootVisible"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rootVisible" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the root node from
the <code>TreeModel</code> is visible.

@param rootVisible true if the root node of the tree is to be displayed
@see #rootVisible
@beaninfo
       bound: true
 description: Whether or not the root node
              from the TreeModel is visible.
"
      end

      operation 2723970 "isRootVisible"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the root node of the tree is displayed.

@return true if the root node of the tree is displayed
@see #rootVisible
"
      end

      operation 2724098 "setRowHeight"
	public explicit_return_type "void"
	nparams 1
	  param in name "rowHeight" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the height of each cell.  If the specified value
is less than or equal to zero the current cell renderer is
queried for each row's height.

@param rowHeight the height of each cell, in pixels
@beaninfo
       bound: true
 description: The height of each cell.
"
      end

      operation 2724226 "getRowHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the height of each row.  If the returned value is less than
or equal to 0 the height for each row is determined by the
renderer.
"
      end

      operation 2724354 "setSelectionModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newLSM" type class_ref 449538 // TreeSelectionModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>TreeSelectionModel</code> used to manage the
selection to new LSM.

@param newLSM  the new <code>TreeSelectionModel</code>
"
      end

      operation 2724482 "getSelectionModel"
	public return_type class_ref 449538 // TreeSelectionModel
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the model used to maintain the selection.

@return the <code>treeSelectionModel</code>
"
      end

      operation 2724610 "getPreferredHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preferred height.

@return the preferred height
"
      end

      operation 2724738 "getPreferredWidth"
	public explicit_return_type "int"
	nparams 1
	  param inout name "bounds" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preferred width for the passed in region.
The region is defined by the path closest to
<code>(bounds.x, bounds.y)</code> and
ends at <code>bounds.height + bounds.y</code>.
If <code>bounds</code> is <code>null</code>,
the preferred width for all the nodes
will be returned (and this may be a VERY expensive
computation).

@param bounds the region being queried
@return the preferred width for the passed in region
"
      end

      operation 2724866 "isExpanded"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Abstract methods that must be implemented to be concrete.


Returns true if the value identified by row is currently expanded.
"
      end

      operation 2724994 "getBounds"
	abstract public return_type class_ref 314114 // Rectangle
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "placeIn" type class_ref 314114 // Rectangle
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a rectangle giving the bounds needed to draw path.

@param path     a <code>TreePath</code> specifying a node
@param placeIn  a <code>Rectangle</code> object giving the
         available space
@return a <code>Rectangle</code> object specifying the space to be used
"
      end

      operation 2725122 "getPathForRow"
	abstract public return_type class_ref 448770 // TreePath
	nparams 1
	  param in name "row" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path for passed in row.  If row is not visible
<code>null</code> is returned.

@param row  the row being queried
@return the <code>TreePath</code> for the given row
"
      end

      operation 2725250 "getRowForPath"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the row that the last item identified in path is visible
at.  Will return -1 if any of the elements in path are not
currently visible.

@param path the <code>TreePath</code> being queried
@return the row where the last item in path is visible or -1
        if any elements in path aren't currently visible
"
      end

      operation 2725378 "getPathClosestTo"
	abstract public return_type class_ref 448770 // TreePath
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path to the node that is closest to x,y.  If
there is nothing currently visible this will return <code>null</code>,
otherwise it'll always return a valid path.
If you need to test if the
returned object is exactly at x, y you should get the bounds for
the returned path and test x, y against that.

@param x the horizontal component of the desired location
@param y the vertical component of the desired location
@return the <code>TreePath</code> closest to the specified point
"
      end

      operation 2725506 "getVisiblePathsFrom"
	abstract public return_type class_ref 185986 // Enumeration
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TreePath> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Enumerator</code> that increments over the visible
paths starting at the passed in location. The ordering of the
enumeration is based on how the paths are displayed.
The first element of the returned enumeration will be path,
unless it isn't visible,
in which case <code>null</code> will be returned.

@param path the starting location for the enumeration
@return the <code>Enumerator</code> starting at the desired location
"
      end

      operation 2725634 "getVisibleChildCount"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of visible children for row.

@param path  the path being queried
@return the number of visible children for the specified path
"
      end

      operation 2725762 "setExpandedState"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "isExpanded" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the path <code>path</code> expanded state to
<code>isExpanded</code>.

@param path  the path being expanded or collapsed
@param isExpanded true if the path should be expanded, false otherwise
"
      end

      operation 2725890 "getExpandedState"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the path is expanded, and visible.

@param path  the path being queried
@return true if the path is expanded and visible, false otherwise
"
      end

      operation 2726018 "getRowCount"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Number of rows being displayed.

@return the number of rows being displayed
"
      end

      operation 2726146 "invalidateSizes"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the <code>TreeState</code> that it needs to recalculate
all the sizes it is referencing.
"
      end

      operation 2726274 "invalidatePathBounds"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instructs the <code>LayoutCache</code> that the bounds for
<code>path</code> are invalid, and need to be updated.

@param path the path being updated
"
      end

      operation 2726402 "treeNodesChanged"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TreeModelListener methods
 AbstractTreeState does not directly become a TreeModelListener on
 the model, it is up to some other object to forward these methods.


<p>
Invoked after a node (or a set of siblings) has changed in some
way. The node(s) have not changed locations in the tree or
altered their children arrays, but other attributes have
changed and may affect presentation. Example: the name of a
file has changed, but it is in the same location in the file
system.</p>

<p>e.path() returns the path the parent of the changed node(s).</p>

<p>e.childIndices() returns the index(es) of the changed node(s).</p>

@param e  the <code>TreeModelEvent</code>
"
      end

      operation 2726530 "treeNodesInserted"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invoked after nodes have been inserted into the tree.</p>

<p>e.path() returns the parent of the new nodes</p>
<p>e.childIndices() returns the indices of the new nodes in
ascending order.</p>

@param e the <code>TreeModelEvent</code>
"
      end

      operation 2726658 "treeNodesRemoved"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invoked after nodes have been removed from the tree.  Note that
if a subtree is removed from the tree, this method may only be
invoked once for the root of the removed subtree, not once for
each individual set of siblings removed.</p>

<p>e.path() returns the former parent of the deleted nodes.</p>

<p>e.childIndices() returns the indices the nodes had before they were deleted in ascending order.</p>

@param e the <code>TreeModelEvent</code>
"
      end

      operation 2726786 "treeStructureChanged"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invoked after the tree has drastically changed structure from a
given node down.  If the path returned by <code>e.getPath()</code>
is of length one and the first element does not identify the
current root node the first element should become the new root
of the tree.</p>

<p>e.path() holds the path to the node.</p>
<p>e.childIndices() returns null.</p>

@param e the <code>TreeModelEvent</code>
"
      end

      operation 2726914 "getRowsForPaths"
	public explicit_return_type "int"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " RowMapper


Returns the rows that the <code>TreePath</code> instances in
<code>path</code> are being displayed at.
This method should return an array of the same length as that passed
in, and if one of the <code>TreePaths</code>
in <code>path</code> is not valid its entry in the array should
be set to -1.

@param paths the array of <code>TreePath</code>s being queried
@return an array of the same length that is passed in containing
         the rows that each corresponding where each
         <code>TreePath</code> is displayed; if <code>paths</code>
         is <code>null</code>, <code>null</code> is returned
"
      end

      operation 2727042 "getNodeDimensions"
	protected return_type class_ref 314114 // Rectangle
	nparams 5
	  param inout name "value" type class_ref 129538 // Object
	  param in name "row" explicit_type "int"
	  param in name "depth" explicit_type "int"
	  param inout name "expanded" explicit_type "boolean"
	  param inout name "placeIn" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Local methods that subclassers may wish to use that are primarly
 convenience methods.


Returns, by reference in <code>placeIn</code>,
the size needed to represent <code>value</code>.
If <code>inPlace</code> is <code>null</code>, a newly created
<code>Rectangle</code> should be returned, otherwise the value
should be placed in <code>inPlace</code> and returned. This will
return <code>null</code> if there is no renderer.

@param value the <code>value</code> to be represented
@param row  row being queried
@param depth the depth of the row
@param expanded true if row is expanded, false otherwise
@param placeIn  a <code>Rectangle</code> containing the size needed
         to represent <code>value</code>
@return a <code>Rectangle</code> containing the node dimensions,
         or <code>null</code> if node has no dimension
"
      end

      operation 2727170 "isFixedRowHeight"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the height of each row is a fixed size.
"
      end
    end

    class 449410 "TreeModel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The model used by <code>JTree</code>.
<p>
<code>JTree</code> and its related classes make extensive use of
<code>TreePath</code>s for identifying nodes in the <code>TreeModel</code>.
If a <code>TreeModel</code> returns the same object, as compared by
<code>equals</code>, at two different indices under the same parent
than the resulting <code>TreePath</code> objects will be considered equal
as well. Some implementations may assume that if two
<code>TreePath</code>s are equal, they identify the same node. If this
condition is not met, painting problems and other oddities may result.
In other words, if <code>getChild</code> for a given parent returns
the same Object (as determined by <code>equals</code>) problems may
result, and it is recommended you avoid doing this.
<p>
Similarly <code>JTree</code> and its related classes place
<code>TreePath</code>s in <code>Map</code>s.  As such if
a node is requested twice, the return values must be equal
(using the <code>equals</code> method) and have the same
<code>hashCode</code>.
<p>
For further information on tree models,
including an example of a custom implementation,
see <a
href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\">How to Use Trees</a>
in <em>The Java Tutorial.</em>

@see TreePath

@author Rob Davis
@author Ray Ryan
"
      operation 11876866 "getRoot"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root of the tree.  Returns <code>null</code>
only if the tree has no nodes.

@return  the root of the tree
"
      end

      operation 11876994 "getChild"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "parent" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child of <code>parent</code> at index <code>index</code>
in the parent's
child array.  <code>parent</code> must be a node previously obtained
from this data source. This should not return <code>null</code>
if <code>index</code>
is a valid index for <code>parent</code> (that is <code>index &gt;= 0 &amp;&amp;
index &lt; getChildCount(parent</code>)).

@param   parent  a node in the tree, obtained from this data source
@return  the child of <code>parent</code> at index <code>index</code>
"
      end

      operation 11877122 "getChildCount"
	public explicit_return_type "int"
	nparams 1
	  param inout name "parent" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of children of <code>parent</code>.
Returns 0 if the node
is a leaf or if it has no children.  <code>parent</code> must be a node
previously obtained from this data source.

@param   parent  a node in the tree, obtained from this data source
@return  the number of children of the node <code>parent</code>
"
      end

      operation 11877250 "isLeaf"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <code>true</code> if <code>node</code> is a leaf.
It is possible for this method to return <code>false</code>
even if <code>node</code> has no children.
A directory in a filesystem, for example,
may contain no files; the node representing
the directory is not a leaf, but it also has no children.

@param   node  a node in the tree, obtained from this data source
@return  true if <code>node</code> is a leaf
"
      end

      operation 11877378 "valueForPathChanged"
	public explicit_return_type "void"
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "newValue" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Messaged when the user has altered the value for the item identified
by <code>path</code> to <code>newValue</code>.
If <code>newValue</code> signifies a truly new value
the model should post a <code>treeNodesChanged</code> event.

@param path path to the node that the user has altered
@param newValue the new value from the TreeCellEditor
"
      end

      operation 11877506 "getIndexOfChild"
	public explicit_return_type "int"
	nparams 2
	  param inout name "parent" type class_ref 129538 // Object
	  param inout name "child" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of child in parent.  If either <code>parent</code>
or <code>child</code> is <code>null</code>, returns -1.
If either <code>parent</code> or <code>child</code> don't
belong to this tree model, returns -1.

@param parent a node in the tree, obtained from this data source
@param child the node we are interested in
@return the index of the child in the parent, or -1 if either
   <code>child</code> or <code>parent</code> are <code>null</code>
   or don't belong to this tree model
"
      end

      operation 11877634 "addTreeModelListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 449922 // TreeModelListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Change Events


Adds a listener for the <code>TreeModelEvent</code>
posted after the tree changes.

@param   l       the listener to add
@see     #removeTreeModelListener
"
      end

      operation 11877762 "removeTreeModelListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 449922 // TreeModelListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener previously added with
<code>addTreeModelListener</code>.

@see     #addTreeModelListener
@param   l       the listener to remove
"
      end
    end

    class 449538 "TreeSelectionModel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents the current state of the selection for
the tree component.
For information and examples of using tree selection models,
see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\">How to Use Trees</a>
in <em>The Java Tutorial.</em>

<p>
The state of the tree selection is characterized by
a set of TreePaths, and optionally a set of integers. The mapping
from TreePath to integer is done by way of an instance of RowMapper.
It is not necessary for a TreeSelectionModel to have a RowMapper to
correctly operate, but without a RowMapper <code>getSelectionRows</code>
will return null.

<p>

A TreeSelectionModel can be configured to allow only one
path (<code>SINGLE_TREE_SELECTION</code>) a number of
contiguous paths (<code>CONTIGUOUS_TREE_SELECTION</code>) or a number of
discontiguous paths (<code>DISCONTIGUOUS_TREE_SELECTION</code>).
A <code>RowMapper</code> is used to determine if TreePaths are
contiguous.
In the absence of a RowMapper <code>CONTIGUOUS_TREE_SELECTION</code> and
<code>DISCONTIGUOUS_TREE_SELECTION</code> behave the same, that is they
allow any number of paths to be contained in the TreeSelectionModel.

<p>

For a selection model of <code>CONTIGUOUS_TREE_SELECTION</code> any
time the paths are changed (<code>setSelectionPath</code>,
<code>addSelectionPath</code> ...) the TreePaths are again checked to
make they are contiguous. A check of the TreePaths can also be forced
by invoking <code>resetRowSelection</code>. How a set of discontiguous
TreePaths is mapped to a contiguous set is left to implementors of
this interface to enforce a particular policy.

<p>

Implementations should combine duplicate TreePaths that are
added to the selection. For example, the following code
<pre>
  TreePath[] paths = new TreePath[] { treePath, treePath };
  treeSelectionModel.setSelectionPaths(paths);
</pre>
should result in only one path being selected:
<code>treePath</code>, and
not two copies of <code>treePath</code>.

<p>

The lead TreePath is the last path that was added (or set). The lead
row is then the row that corresponds to the TreePath as determined
from the RowMapper.

@author Scott Violet
"
      attribute 2609666 "SINGLE_TREE_SELECTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Selection can only contain one path at a time. 
"
      end

      attribute 2609794 "CONTIGUOUS_TREE_SELECTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Selection can only be contiguous. This will only be enforced if
a RowMapper instance is provided. That is, if no RowMapper is set
this behaves the same as DISCONTIGUOUS_TREE_SELECTION. 
"
      end

      attribute 2609922 "DISCONTIGUOUS_TREE_SELECTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Selection can contain any number of items that are not necessarily
contiguous. 
"
      end

      operation 11882114 "setSelectionMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the selection model, which must be one of SINGLE_TREE_SELECTION,
CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.
<p>
This may change the selection if the current selection is not valid
for the new mode. For example, if three TreePaths are
selected when the mode is changed to <code>SINGLE_TREE_SELECTION</code>,
only one TreePath will remain selected. It is up to the particular
implementation to decide what TreePath remains selected.
"
      end

      operation 11882242 "getSelectionMode"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current selection mode, one of
<code>SINGLE_TREE_SELECTION</code>,
<code>CONTIGUOUS_TREE_SELECTION</code> or
<code>DISCONTIGUOUS_TREE_SELECTION</code>.
"
      end

      operation 11882370 "setSelectionPath"
	public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the selection to path. If this represents a change, then
the TreeSelectionListeners are notified. If <code>path</code> is
null, this has the same effect as invoking <code>clearSelection</code>.

@param path new path to select
"
      end

      operation 11882498 "setSelectionPaths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the selection to path. If this represents a change, then
the TreeSelectionListeners are notified. If <code>paths</code> is
null, this has the same effect as invoking <code>clearSelection</code>.

@param paths new selection
"
      end

      operation 11882626 "addSelectionPath"
	public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds path to the current selection. If path is not currently
in the selection the TreeSelectionListeners are notified. This has
no effect if <code>path</code> is null.

@param path the new path to add to the current selection
"
      end

      operation 11882754 "addSelectionPaths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds paths to the current selection.  If any of the paths in
paths are not currently in the selection the TreeSelectionListeners
are notified. This has
no effect if <code>paths</code> is null.

@param paths the new paths to add to the current selection
"
      end

      operation 11882882 "removeSelectionPath"
	public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes path from the selection. If path is in the selection
The TreeSelectionListeners are notified. This has no effect if
<code>path</code> is null.

@param path the path to remove from the selection
"
      end

      operation 11883010 "removeSelectionPaths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes paths from the selection.  If any of the paths in
<code>paths</code>
are in the selection, the TreeSelectionListeners are notified.
This method has no effect if <code>paths</code> is null.

@param paths the path to remove from the selection
"
      end

      operation 11883138 "getSelectionPath"
	public return_type class_ref 448770 // TreePath
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first path in the selection. How first is defined is
up to implementors, and may not necessarily be the TreePath with
the smallest integer value as determined from the
<code>RowMapper</code>.
"
      end

      operation 11883266 "getSelectionPaths"
	public return_type class_ref 448770 // TreePath
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the paths in the selection. This will return null (or an
empty array) if nothing is currently selected.
"
      end

      operation 11883394 "getSelectionCount"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of paths that are selected.
"
      end

      operation 11883522 "isPathSelected"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the path, <code>path</code>, is in the current
selection.
"
      end

      operation 11883650 "isSelectionEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the selection is currently empty.
"
      end

      operation 11883778 "clearSelection"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empties the current selection.  If this represents a change in the
current selection, the selection listeners are notified.
"
      end

      operation 11883906 "setRowMapper"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newMapper" type class_ref 451842 // RowMapper
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the RowMapper instance. This instance is used to determine
the row for a particular TreePath.
"
      end

      operation 11884034 "getRowMapper"
	public return_type class_ref 451842 // RowMapper
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the RowMapper instance that is able to map a TreePath to a
row.
"
      end

      operation 11884162 "getSelectionRows"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all of the currently selected rows. This will return
null (or an empty array) if there are no selected TreePaths or
a RowMapper has not been set.
"
      end

      operation 11884290 "getMinSelectionRow"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smallest value obtained from the RowMapper for the
current set of selected TreePaths. If nothing is selected,
or there is no RowMapper, this will return -1.
"
      end

      operation 11884418 "getMaxSelectionRow"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest value obtained from the RowMapper for the
current set of selected TreePaths. If nothing is selected,
or there is no RowMapper, this will return -1.
"
      end

      operation 11884546 "isRowSelected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "row" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the row identified by <code>row</code> is selected.
"
      end

      operation 11884674 "resetRowSelection"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this object's mapping from TreePaths to rows. This should
be invoked when the mapping from TreePaths to integers has changed
(for example, a node has been expanded).
<p>
You do not normally have to call this; JTree and its associated
listeners will invoke this for you. If you are implementing your own
view class, then you will have to invoke this.
"
      end

      operation 11884802 "getLeadSelectionRow"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lead selection index. That is the last index that was
added.
"
      end

      operation 11884930 "getLeadSelectionPath"
	public return_type class_ref 448770 // TreePath
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last path that was added. This may differ from the
leadSelectionPath property maintained by the JTree.
"
      end

      operation 11885058 "addPropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 347266 // PropertyChangeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a PropertyChangeListener to the listener list.
The listener is registered for all properties.
<p>
A PropertyChangeEvent will get fired when the selection mode
changes.

@param listener  the PropertyChangeListener to be added
"
      end

      operation 11885186 "removePropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 347266 // PropertyChangeListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a PropertyChangeListener from the listener list.
This removes a PropertyChangeListener that was registered
for all properties.

@param listener  the PropertyChangeListener to be removed
"
      end

      operation 11885314 "addTreeSelectionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 449794 // TreeSelectionListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds x to the list of listeners that are notified each time the
set of selected TreePaths changes.

@param x the new listener to be added
"
      end

      operation 11885442 "removeTreeSelectionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 449794 // TreeSelectionListener
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes x from the list of listeners that are notified each time
the set of selected TreePaths changes.

@param x the listener to remove
"
      end
    end

    class 451842 "RowMapper"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the requirements for an object that translates paths in
the tree into display rows.

@author Scott Violet
"
      operation 2723202 "getRowsForPaths"
	public explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the rows that the TreePath instances in <code>path</code>
are being displayed at. The receiver should return an array of
the same length as that passed in, and if one of the TreePaths
in <code>path</code> is not valid its entry in the array should
be set to -1.
"
      end
    end

    class 1306114 "ExpandVetoException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception used to stop and expand/collapse from happening.
See <a
href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/treewillexpandlistener.html\">How to Write a Tree-Will-Expand Listener</a>
in <em>The Java Tutorial</em>
for further information and examples.

@author Scott Violet
"
      classrelation 4739970 // <generalisation>
	relation 4739970 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4739970 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      classrelation 4740098 // event (<unidirectional association>)
	relation 4740098 --->
	  a role_name "event" protected
	    comment " The event that the exception was created for. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4740098 // event (<unidirectional association>)
	  b parent class_ref 450562 // TreeExpansionEvent
      end

      operation 11891202 "ExpandVetoException"
	public explicit_return_type ""
	nparams 1
	  param inout name "event" type class_ref 450562 // TreeExpansionEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ExpandVetoException object with no message.

@param event  a TreeExpansionEvent object
"
      end

      operation 11891330 "ExpandVetoException"
	public explicit_return_type ""
	nparams 2
	  param inout name "event" type class_ref 450562 // TreeExpansionEvent
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an ExpandVetoException object with the specified message.

@param event    a TreeExpansionEvent object
@param message  a String containing the message
"
      end
    end

    class 1374338 "DefaultTreeCellEditor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>TreeCellEditor</code>. You need to supply an
instance of <code>DefaultTreeCellRenderer</code>
so that the icons can be obtained. You can optionally supply
a <code>TreeCellEditor</code> that will be layed out according
to the icon in the <code>DefaultTreeCellRenderer</code>.
If you do not supply a <code>TreeCellEditor</code>,
a <code>TextField</code> will be used. Editing is started
on a triple mouse click, or after a click, pause, click and
a delay of 1200 milliseconds.
<p>
<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@see javax.swing.JTree

@author Scott Violet
"
      classrelation 4616450 // <realization>
	relation 4616450 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4616450 // <realization>
	  b parent class_ref 354306 // ActionListener
      end

      classrelation 4616578 // <realization>
	relation 4616578 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4616578 // <realization>
	  b parent class_ref 449026 // TreeCellEditor
      end

      classrelation 4616706 // <realization>
	relation 4616706 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4616706 // <realization>
	  b parent class_ref 449794 // TreeSelectionListener
      end

      classrelation 4616834 // realEditor (<unidirectional association>)
	relation 4616834 --->
	  a role_name "realEditor" protected
	    comment " Editor handling the editing. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4616834 // realEditor (<unidirectional association>)
	  b parent class_ref 449026 // TreeCellEditor
      end

      classrelation 4616962 // renderer (<unidirectional association>)
	relation 4616962 --->
	  a role_name "renderer" protected
	    comment " Renderer, used to get border and offsets from. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4616962 // renderer (<unidirectional association>)
	  b parent class_ref 447874 // DefaultTreeCellRenderer
      end

      classrelation 4617090 // editingContainer (<unidirectional association>)
	relation 4617090 --->
	  a role_name "editingContainer" protected
	    comment " Editing container, will contain the <code>editorComponent</code>. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4617090 // editingContainer (<unidirectional association>)
	  b parent class_ref 338690 // Container
      end

      classrelation 4617218 // editingComponent (<unidirectional association>)
	relation 4617218 --->
	  a role_name "editingComponent" protected
	    comment "
Component used in editing, obtained from the
<code>editingContainer</code>.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4617218 // editingComponent (<unidirectional association>)
	  b parent class_ref 338818 // Component
      end

      attribute 2551938 "canEdit"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "As of Java 2 platform v1.4 this field should no longer be used. If
you wish to provide similar behavior you should directly override
<code>isCellEditable</code>.

"
      end

      attribute 2552066 "offset"
	protected explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Used in editing. Indicates x position to place
<code>editingComponent</code>.

"
      end

      classrelation 4617346 // tree (<unidirectional association>)
	relation 4617346 --->
	  a role_name "tree" protected
	    comment " <code>JTree</code> instance listening too. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4617346 // tree (<unidirectional association>)
	  b parent class_ref 448130 // JTree
      end

      classrelation 4617474 // lastPath (<unidirectional association>)
	relation 4617474 --->
	  a role_name "lastPath" protected
	    comment " Last path that was selected. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4617474 // lastPath (<unidirectional association>)
	  b parent class_ref 448770 // TreePath
      end

      classrelation 4617602 // timer (<unidirectional association>)
	relation 4617602 --->
	  a role_name "timer" protected
	    comment " Used before starting the editing session. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4617602 // timer (<unidirectional association>)
	  b parent class_ref 354690 // Timer
      end

      attribute 2552194 "lastRow"
	protected explicit_type "int"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Row that was last passed into
<code>getTreeCellEditorComponent</code>.

"
      end

      classrelation 4617730 // borderSelectionColor (<unidirectional association>)
	relation 4617730 --->
	  a role_name "borderSelectionColor" protected
	    comment " True if the border selection color should be drawn. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4617730 // borderSelectionColor (<unidirectional association>)
	  b parent class_ref 323458 // Color
      end

      classrelation 4617858 // editingIcon (<unidirectional association>)
	relation 4617858 --->
	  a role_name "editingIcon" protected
	    comment " Icon to use when editing. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4617858 // editingIcon (<unidirectional association>)
	  b parent class_ref 352642 // Icon
      end

      classrelation 4617986 // font (<unidirectional association>)
	relation 4617986 --->
	  a role_name "font" protected
	    comment "
Font to paint with, <code>null</code> indicates
font of renderer is to be used.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4617986 // font (<unidirectional association>)
	  b parent class_ref 340354 // Font
      end

      operation 11582722 "DefaultTreeCellEditor"
	public explicit_return_type ""
	nparams 2
	  param inout name "tree" type class_ref 448130 // JTree
	  param inout name "renderer" type class_ref 447874 // DefaultTreeCellRenderer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DefaultTreeCellEditor</code>
object for a JTree using the specified renderer and
a default editor. (Use this constructor for normal editing.)

@param tree      a <code>JTree</code> object
@param renderer  a <code>DefaultTreeCellRenderer</code> object
"
      end

      operation 11582850 "DefaultTreeCellEditor"
	public explicit_return_type ""
	nparams 3
	  param inout name "tree" type class_ref 448130 // JTree
	  param inout name "renderer" type class_ref 447874 // DefaultTreeCellRenderer
	  param inout name "editor" type class_ref 449026 // TreeCellEditor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>DefaultTreeCellEditor</code>
object for a <code>JTree</code> using the
specified renderer and the specified editor. (Use this constructor
for specialized editing.)

@param tree      a <code>JTree</code> object
@param renderer  a <code>DefaultTreeCellRenderer</code> object
@param editor    a <code>TreeCellEditor</code> object
"
      end

      operation 11582978 "setBorderSelectionColor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newColor" type class_ref 323458 // Color
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the color to use for the border.
@param newColor the new border color
"
      end

      operation 11583106 "getBorderSelectionColor"
	public return_type class_ref 323458 // Color
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the color the border is drawn.
@return the border selection color
"
      end

      operation 11583234 "setFont"
	public explicit_return_type "void"
	nparams 1
	  param inout name "font" type class_ref 340354 // Font
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the font to edit with. <code>null</code> indicates
the renderers font should be used. This will NOT
override any font you have set in the editor
the receiver was instantiated with. If <code>null</code>
for an editor was passed in a default editor will be
created that will pick up this font.

@param font  the editing <code>Font</code>
@see #getFont
"
      end

      operation 11583362 "getFont"
	public return_type class_ref 340354 // Font
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the font used for editing.

@return the editing <code>Font</code>
@see #setFont
"
      end

      operation 11583490 "getTreeCellEditorComponent"
	public return_type class_ref 338818 // Component
	nparams 6
	  param inout name "tree" type class_ref 448130 // JTree
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "isSelected" explicit_type "boolean"
	  param inout name "expanded" explicit_type "boolean"
	  param inout name "leaf" explicit_type "boolean"
	  param in name "row" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TreeCellEditor


Configures the editor.  Passed onto the <code>realEditor</code>.
"
      end

      operation 11583618 "getCellEditorValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value currently being edited.
@return the value currently being edited
"
      end

      operation 11583746 "isCellEditable"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 525698 // EventObject
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the <code>realEditor</code> returns true to this
message, <code>prepareForEditing</code>
is messaged and true is returned.
"
      end

      operation 11583874 "shouldSelectCell"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 525698 // EventObject
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Messages the <code>realEditor</code> for the return value.
"
      end

      operation 11584002 "stopCellEditing"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the <code>realEditor</code> will allow editing to stop,
the <code>realEditor</code> is removed and true is returned,
otherwise false is returned.
"
      end

      operation 11584130 "cancelCellEditing"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Messages <code>cancelCellEditing</code> to the
<code>realEditor</code> and removes it from this instance.
"
      end

      operation 11584258 "addCellEditorListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 449666 // CellEditorListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the <code>CellEditorListener</code>.
@param l the listener to be added
"
      end

      operation 11584386 "removeCellEditorListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 449666 // CellEditorListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the previously added <code>CellEditorListener</code>.
@param l the listener to be removed
"
      end

      operation 11584514 "getCellEditorListeners"
	public return_type class_ref 449666 // CellEditorListener
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all the <code>CellEditorListener</code>s added
to this DefaultTreeCellEditor with addCellEditorListener().

@return all of the <code>CellEditorListener</code>s added or an empty
        array if no listeners have been added
@since 1.4
"
      end

      operation 11584642 "valueChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 451202 // TreeSelectionEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TreeSelectionListener


Resets <code>lastPath</code>.
"
      end

      operation 11584770 "actionPerformed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 354434 // ActionEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ActionListener (for Timer).


Messaged when the timer fires, this will start the editing
session.
"
      end

      operation 11584898 "setTree"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newTree" type class_ref 448130 // JTree
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Local methods


Sets the tree currently editing for. This is needed to add
a selection listener.
@param newTree the new tree to be edited
"
      end

      operation 11585026 "shouldStartEditingTimer"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 525698 // EventObject
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if <code>event</code> is a <code>MouseEvent</code>
and the click count is 1.
@param event  the event being studied
"
      end

      operation 11585154 "startEditingTimer"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts the editing timer.
"
      end

      operation 11585282 "canEditImmediately"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 525698 // EventObject
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if <code>event</code> is <code>null</code>,
or it is a <code>MouseEvent</code> with a click count &gt; 2
and <code>inHitRegion</code> returns true.
@param event the event being studied
"
      end

      operation 11585410 "inHitRegion"
	protected explicit_return_type "boolean"
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the passed in location is a valid mouse location
to start editing from. This is implemented to return false if
<code>x</code> is &lt;= the width of the icon and icon gap displayed
by the renderer. In other words this returns true if the user
clicks over the text part displayed by the renderer, and false
otherwise.
@param x the x-coordinate of the point
@param y the y-coordinate of the point
@return true if the passed in location is a valid mouse location
"
      end

      operation 11585538 "determineOffset"
	protected explicit_return_type "void"
	nparams 6
	  param inout name "tree" type class_ref 448130 // JTree
	  param inout name "value" type class_ref 129538 // Object
	  param inout name "isSelected" explicit_type "boolean"
	  param inout name "expanded" explicit_type "boolean"
	  param inout name "leaf" explicit_type "boolean"
	  param in name "row" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11585666 "prepareForEditing"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked just before editing is to start. Will add the
<code>editingComponent</code> to the
<code>editingContainer</code>.
"
      end

      operation 11585794 "createContainer"
	protected return_type class_ref 338690 // Container
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates the container to manage placement of
<code>editingComponent</code>.
"
      end

      operation 11585922 "createTreeCellEditor"
	protected return_type class_ref 449026 // TreeCellEditor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is invoked if a <code>TreeCellEditor</code>
is not supplied in the constructor.
It returns a <code>TextField</code> editor.
@return a new <code>TextField</code> editor
"
      end

      operation 11586050 "cleanupAfterEditing"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cleans up any state after editing has completed. Removes the
<code>editingComponent</code> the <code>editingContainer</code>.
"
      end

      operation 11586178 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Serialization support."
      end

      operation 11586306 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1374466 "DefaultTextField"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4618114 // <generalisation>
	  relation 4618114 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 4618114 // <generalisation>
	    b parent class_ref 360066 // JTextField
	end

	classrelation 4618242 // border (<unidirectional association>)
	  relation 4618242 --->
	    a role_name "border" protected
	      comment " Border to use. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4618242 // border (<unidirectional association>)
	    b parent class_ref 357122 // Border
	end

	operation 11586434 "DefaultTextField"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "border" type class_ref 357122 // Border
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a
<code>DefaultTreeCellEditor.DefaultTextField</code> object.

@param border  a <code>Border</code> object
@since 1.4
"
	end

	operation 11586562 "setBorder"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "border" type class_ref 357122 // Border
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the border of this component.<p>
This is a bound property.

@param border the border to be rendered for this component
@see Border
@see CompoundBorder
@beaninfo
       bound: true
   preferred: true
   attribute: visualUpdate true
 description: The component's border.
"
	end

	operation 11586690 "getBorder"
	  public return_type class_ref 357122 // Border
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Overrides <code>JComponent.getBorder</code> to
returns the current border.
"
	end

	operation 11586818 "getFont"
	  public return_type class_ref 340354 // Font
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " implements java.awt.MenuContainer"
	end

	operation 11586946 "getPreferredSize"
	  public return_type class_ref 316802 // Dimension
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Overrides <code>JTextField.getPreferredSize</code> to
return the preferred size based on current font, if set,
or else use renderer's font.
@return a <code>Dimension</code> object containing
  the preferred size
"
	end
      end

      class 1374594 "EditorContainer"
	visibility public 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4618370 // <generalisation>
	  relation 4618370 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 4618370 // <generalisation>
	    b parent class_ref 338690 // Container
	end

	operation 11587074 "EditorContainer"
	  public explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an <code>EditorContainer</code> object.
"
	end

	operation 11587202 "EditorContainer"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " This should not be used. It will be removed when new API is
 allowed."
	end

	operation 11587330 "paint"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "g" type class_ref 343682 // Graphics
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Overrides <code>Container.paint</code> to paint the node's
icon and use the selection color for the background.
"
	end

	operation 11587458 "doLayout"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Lays out this <code>Container</code>.  If editing,
the editor will be placed at
<code>offset</code> in the x direction and 0 for y.
"
	end

	operation 11587586 "calculateIconY"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "icon" type class_ref 352642 // Icon
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Calculate the y location for the icon.
"
	end

	operation 11587714 "getPreferredSize"
	  public return_type class_ref 316802 // Dimension
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the preferred size for the <code>Container</code>.
This will be at least preferred size of the editor plus
<code>offset</code>.
@return a <code>Dimension</code> containing the preferred
  size for the <code>Container</code>; if
  <code>editingComponent</code> is <code>null</code> the
  <code>Dimension</code> returned is 0, 0
"
	end
      end
    end

    class 1400450 "DefaultMutableTreeNode"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>DefaultMutableTreeNode</code> is a general-purpose node in a tree data
structure.
For examples of using default mutable tree nodes, see
<a
href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\">How to Use Trees</a>
in <em>The Java Tutorial.</em>

<p>

A tree node may have at most one parent and 0 or more children.
<code>DefaultMutableTreeNode</code> provides operations for examining and modifying a
node's parent and children and also operations for examining the tree that
the node is a part of.  A node's tree is the set of all nodes that can be
reached by starting at the node and following all the possible links to
parents and children.  A node with no parent is the root of its tree; a
node with no children is a leaf.  A tree may consist of many subtrees,
each node acting as the root for its own subtree.
<p>
This class provides enumerations for efficiently traversing a tree or
subtree in various orders or for following the path between two nodes.
A <code>DefaultMutableTreeNode</code> may also hold a reference to a user object, the
use of which is left to the user.  Asking a <code>DefaultMutableTreeNode</code> for its
string representation with <code>toString()</code> returns the string
representation of its user object.
<p>
<b>This is not a thread safe class.</b>If you intend to use
a DefaultMutableTreeNode (or a tree of TreeNodes) in more than one thread, you
need to do your own synchronizing. A good convention to adopt is
synchronizing on the root node of a tree.
<p>
While DefaultMutableTreeNode implements the MutableTreeNode interface and
will allow you to add in any implementation of MutableTreeNode not all
of the methods in DefaultMutableTreeNode will be applicable to all
MutableTreeNodes implementations. Especially with some of the enumerations
that are provided, using some of these methods assumes the
DefaultMutableTreeNode contains only DefaultMutableNode instances. All
of the TreeNode/MutableTreeNode methods will behave as defined no
matter what implementations are added.

<p>
<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@see MutableTreeNode

@author Rob Davis
"
      classrelation 4734850 // <realization>
	relation 4734850 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4734850 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 4735106 // <realization>
	relation 4735106 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4735106 // <realization>
	  b parent class_ref 1400578 // MutableTreeNode
      end

      classrelation 4735234 // <realization>
	relation 4735234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4735234 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2609282 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4298474751201349152L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 4735362 // EMPTY_ENUMERATION (<unidirectional association>)
	relation 4735362 --->
	  a role_name "EMPTY_ENUMERATION" init_value " Collections.emptyEnumeration()" class_relation const_relation public
	    comment "
An enumeration that is always empty. This is used when an enumeration
of a leaf node's children is requested.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TreeNode> ${name}${value};
"
	    classrelation_ref 4735362 // EMPTY_ENUMERATION (<unidirectional association>)
	  b parent class_ref 185986 // Enumeration
      end

      classrelation 4735490 // parent (<unidirectional association>)
	relation 4735490 --->
	  a role_name "parent" protected
	    comment " this node's parent, or null if this node has no parent 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4735490 // parent (<unidirectional association>)
	  b parent class_ref 1400578 // MutableTreeNode
      end

      classrelation 4735618 // children (<unidirectional association>)
	relation 4735618 --->
	  a role_name "children" protected
	    comment " array of children, may be null if this node has no children 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4735618 // children (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      classrelation 4735746 // userObject (<unidirectional association>)
	relation 4735746 --->
	  a role_name "userObject" protected
	    comment " optional user object 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4735746 // userObject (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      attribute 2609410 "allowsChildren"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " true if the node is able to have children 
"
      end

      operation 11867522 "DefaultMutableTreeNode"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a tree node that has no parent and no children, but which
allows children.
"
      end

      operation 11867650 "DefaultMutableTreeNode"
	public explicit_return_type ""
	nparams 1
	  param inout name "userObject" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a tree node with no parent, no children, but which allows
children, and initializes it with the specified user object.

@param userObject an Object provided by the user that constitutes
                  the node's data
"
      end

      operation 11867778 "DefaultMutableTreeNode"
	public explicit_return_type ""
	nparams 2
	  param inout name "userObject" type class_ref 129538 // Object
	  param inout name "allowsChildren" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a tree node with no parent, no children, initialized with
the specified user object, and that allows children only if
specified.

@param userObject an Object provided by the user that constitutes
       the node's data
@param allowsChildren if true, the node is allowed to have child
       nodes -- otherwise, it is always a leaf node
"
      end

      operation 11867906 "insert"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newChild" type class_ref 1400578 // MutableTreeNode
	  param in name "childIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Primitives


Removes <code>newChild</code> from its present parent (if it has a
parent), sets the child's parent to this node, and then adds the child
to this node's child array at index <code>childIndex</code>.
<code>newChild</code> must not be null and must not be an ancestor of
this node.

@param   newChild        the MutableTreeNode to insert under this node
@param   childIndex      the index in this node's child array
                         where this node is to be inserted
@exception       ArrayIndexOutOfBoundsException  if
                         <code>childIndex</code> is out of bounds
@exception       IllegalArgumentException        if
                         <code>newChild</code> is null or is an
                         ancestor of this node
@exception       IllegalStateException   if this node does not allow
                                         children
@see     #isNodeDescendant
"
      end

      operation 11868034 "remove"
	public explicit_return_type "void"
	nparams 1
	  param in name "childIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the child at the specified index from this node's children
and sets that node's parent to null. The child node to remove
must be a <code>MutableTreeNode</code>.

@param   childIndex      the index in this node's child array
                         of the child to remove
@exception       ArrayIndexOutOfBoundsException  if
                         <code>childIndex</code> is out of bounds
"
      end

      operation 11868162 "setParent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newParent" type class_ref 1400578 // MutableTreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Transient
"
	
	
	
	comment "Sets this node's parent to <code>newParent</code> but does not
change the parent's child array.  This method is called from
<code>insert()</code> and <code>remove()</code> to
reassign a child's parent, it should not be messaged from anywhere
else.

@param   newParent       this node's new parent
"
      end

      operation 11868290 "getParent"
	public return_type class_ref 410242 // TreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this node's parent or null if this node has no parent.

@return  this node's parent TreeNode, or null if this node has no parent
"
      end

      operation 11868418 "getChildAt"
	public return_type class_ref 410242 // TreeNode
	nparams 1
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child at the specified index in this node's child array.

@param   index   an index into this node's child array
@exception       ArrayIndexOutOfBoundsException  if <code>index</code>
                                         is out of bounds
@return  the TreeNode in this node's child array at  the specified index
"
      end

      operation 11868546 "getChildCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of children of this node.

@return  an int giving the number of children of this node
"
      end

      operation 11868674 "getIndex"
	public explicit_return_type "int"
	nparams 1
	  param inout name "aChild" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the specified child in this node's child array.
If the specified node is not a child of this node, returns
<code>-1</code>.  This method performs a linear search and is O(n)
where n is the number of children.

@param   aChild  the TreeNode to search for among this node's children
@exception       IllegalArgumentException        if <code>aChild</code>
                                                 is null
@return  an int giving the index of the node in this node's child
         array, or <code>-1</code> if the specified node is a not
         a child of this node
"
      end

      operation 11868802 "children"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns a forward-order enumeration of this node's
children.  Modifying this node's child array invalidates any child
enumerations created before the modification.

@return  an Enumeration of this node's children
"
      end

      operation 11868930 "setAllowsChildren"
	public explicit_return_type "void"
	nparams 1
	  param inout name "allows" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not this node is allowed to have children.
If <code>allows</code> is false, all of this node's children are
removed.
<p>
Note: By default, a node allows children.

@param   allows  true if this node is allowed to have children
"
      end

      operation 11869058 "getAllowsChildren"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this node is allowed to have children.

@return  true if this node allows children, else false
"
      end

      operation 11869186 "setUserObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "userObject" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the user object for this node to <code>userObject</code>.

@param   userObject      the Object that constitutes this node's
                         user-specified data
@see     #getUserObject
@see     #toString
"
      end

      operation 11869314 "getUserObject"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this node's user object.

@return  the Object stored at this node by the user
@see     #setUserObject
@see     #toString
"
      end

      operation 11869442 "removeFromParent"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Derived methods


Removes the subtree rooted at this node from the tree, giving this
node a null parent.  Does nothing if this node is the root of its
tree.
"
      end

      operation 11869570 "remove"
	public explicit_return_type "void"
	nparams 1
	  param inout name "aChild" type class_ref 1400578 // MutableTreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes <code>aChild</code> from this node's child array, giving it a
null parent.

@param   aChild  a child of this node to remove
@exception       IllegalArgumentException        if <code>aChild</code>
                                 is null or is not a child of this node
"
      end

      operation 11869698 "removeAllChildren"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of this node's children, setting their parents to null.
If this node has no children, this method does nothing.
"
      end

      operation 11869826 "add"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newChild" type class_ref 1400578 // MutableTreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes <code>newChild</code> from its parent and makes it a child of
this node by adding it to the end of this node's child array.

@see             #insert
@param   newChild        node to add as a child of this node
@exception       IllegalArgumentException    if <code>newChild</code>
                                         is null
@exception       IllegalStateException   if this node does not allow
                                         children
"
      end

      operation 11869954 "isNodeAncestor"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "anotherNode" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Tree Queries


Returns true if <code>anotherNode</code> is an ancestor of this node
-- if it is this node, this node's parent, or an ancestor of this
node's parent.  (Note that a node is considered an ancestor of itself.)
If <code>anotherNode</code> is null, this method returns false.  This
operation is at worst O(h) where h is the distance from the root to
this node.

@see             #isNodeDescendant
@see             #getSharedAncestor
@param   anotherNode     node to test as an ancestor of this node
@return  true if this node is a descendant of <code>anotherNode</code>
"
      end

      operation 11870082 "isNodeDescendant"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "anotherNode" type class_ref 1400450 // DefaultMutableTreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if <code>anotherNode</code> is a descendant of this node
-- if it is this node, one of this node's children, or a descendant of
one of this node's children.  Note that a node is considered a
descendant of itself.  If <code>anotherNode</code> is null, returns
false.  This operation is at worst O(h) where h is the distance from the
root to <code>anotherNode</code>.

@see     #isNodeAncestor
@see     #getSharedAncestor
@param   anotherNode     node to test as descendant of this node
@return  true if this node is an ancestor of <code>anotherNode</code>
"
      end

      operation 11870210 "getSharedAncestor"
	public return_type class_ref 410242 // TreeNode
	nparams 1
	  param inout name "aNode" type class_ref 1400450 // DefaultMutableTreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the nearest common ancestor to this node and <code>aNode</code>.
Returns null, if no such ancestor exists -- if this node and
<code>aNode</code> are in different trees or if <code>aNode</code> is
null.  A node is considered an ancestor of itself.

@see     #isNodeAncestor
@see     #isNodeDescendant
@param   aNode   node to find common ancestor with
@return  nearest ancestor common to this node and <code>aNode</code>,
         or null if none
"
      end

      operation 11870338 "isNodeRelated"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "aNode" type class_ref 1400450 // DefaultMutableTreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if <code>aNode</code> is in the same tree
as this node.  Returns false if <code>aNode</code> is null.

@see     #getSharedAncestor
@see     #getRoot
@return  true if <code>aNode</code> is in the same tree as this node;
         false if <code>aNode</code> is null
"
      end

      operation 11870466 "getDepth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the depth of the tree rooted at this node -- the longest
distance from this node to a leaf.  If this node has no children,
returns 0.  This operation is much more expensive than
<code>getLevel()</code> because it must effectively traverse the entire
tree rooted at this node.

@see     #getLevel
@return  the depth of the tree whose root is this node
"
      end

      operation 11870594 "getLevel"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of levels above this node -- the distance from
the root to this node.  If this node is the root, returns 0.

@see     #getDepth
@return  the number of levels above this node
"
      end

      operation 11870722 "getPath"
	public return_type class_ref 410242 // TreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path from the root, to get to this node.  The last
element in the path is this node.

@return an array of TreeNode objects giving the path, where the
        first element in the path is the root and the last
        element is this node.
"
      end

      operation 11870850 "getPathToRoot"
	protected return_type class_ref 410242 // TreeNode
	nparams 2
	  param inout name "aNode" type class_ref 410242 // TreeNode
	  param in name "depth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Builds the parents of node up to and including the root node,
where the original node is the last element in the returned array.
The length of the returned array gives the node's depth in the
tree.

@param aNode  the TreeNode to get the path for
@param depth  an int giving the number of steps already taken towards
       the root (on recursive calls), used to size the returned array
@return an array of TreeNodes giving the path from the root to the
        specified node
"
      end

      operation 11870978 "getUserObjectPath"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the user object path, from the root, to get to this node.
If some of the TreeNodes in the path have null user objects, the
returned path will contain nulls.
"
      end

      operation 11871106 "getRoot"
	public return_type class_ref 410242 // TreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root of the tree that contains this node.  The root is
the ancestor with a null parent.

@see     #isNodeAncestor
@return  the root of the tree that contains this node
"
      end

      operation 11871234 "isRoot"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this node is the root of the tree.  The root is
the only node in the tree with a null parent; every tree has exactly
one root.

@return  true if this node is the root of its tree
"
      end

      operation 11871362 "getNextNode"
	public return_type class_ref 1400450 // DefaultMutableTreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the node that follows this node in a preorder traversal of this
node's tree.  Returns null if this node is the last node of the
traversal.  This is an inefficient way to traverse the entire tree; use
an enumeration, instead.

@see     #preorderEnumeration
@return  the node that follows this node in a preorder traversal, or
         null if this node is last
"
      end

      operation 11871490 "getPreviousNode"
	public return_type class_ref 1400450 // DefaultMutableTreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the node that precedes this node in a preorder traversal of
this node's tree.  Returns <code>null</code> if this node is the
first node of the traversal -- the root of the tree.
This is an inefficient way to
traverse the entire tree; use an enumeration, instead.

@see     #preorderEnumeration
@return  the node that precedes this node in a preorder traversal, or
         null if this node is the first
"
      end

      operation 11871618 "preorderEnumeration"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an enumeration that traverses the subtree rooted at
this node in preorder.  The first node returned by the enumeration's
<code>nextElement()</code> method is this node.<P>

Modifying the tree by inserting, removing, or moving a node invalidates
any enumerations created before the modification.

@see     #postorderEnumeration
@return  an enumeration for traversing the tree in preorder
"
      end

      operation 11871746 "postorderEnumeration"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an enumeration that traverses the subtree rooted at
this node in postorder.  The first node returned by the enumeration's
<code>nextElement()</code> method is the leftmost leaf.  This is the
same as a depth-first traversal.<P>

Modifying the tree by inserting, removing, or moving a node invalidates
any enumerations created before the modification.

@see     #depthFirstEnumeration
@see     #preorderEnumeration
@return  an enumeration for traversing the tree in postorder
"
      end

      operation 11871874 "breadthFirstEnumeration"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an enumeration that traverses the subtree rooted at
this node in breadth-first order.  The first node returned by the
enumeration's <code>nextElement()</code> method is this node.<P>

Modifying the tree by inserting, removing, or moving a node invalidates
any enumerations created before the modification.

@see     #depthFirstEnumeration
@return  an enumeration for traversing the tree in breadth-first order
"
      end

      operation 11872002 "depthFirstEnumeration"
	public return_type class_ref 185986 // Enumeration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an enumeration that traverses the subtree rooted at
this node in depth-first order.  The first node returned by the
enumeration's <code>nextElement()</code> method is the leftmost leaf.
This is the same as a postorder traversal.<P>

Modifying the tree by inserting, removing, or moving a node invalidates
any enumerations created before the modification.

@see     #breadthFirstEnumeration
@see     #postorderEnumeration
@return  an enumeration for traversing the tree in depth-first order
"
      end

      operation 11872130 "pathFromAncestorEnumeration"
	public return_type class_ref 185986 // Enumeration
	nparams 1
	  param inout name "ancestor" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an enumeration that follows the path from
<code>ancestor</code> to this node.  The enumeration's
<code>nextElement()</code> method first returns <code>ancestor</code>,
then the child of <code>ancestor</code> that is an ancestor of this
node, and so on, and finally returns this node.  Creation of the
enumeration is O(m) where m is the number of nodes between this node
and <code>ancestor</code>, inclusive.  Each <code>nextElement()</code>
message is O(1).<P>

Modifying the tree by inserting, removing, or moving a node invalidates
any enumerations created before the modification.

@see             #isNodeAncestor
@see             #isNodeDescendant
@exception       IllegalArgumentException if <code>ancestor</code> is
                                         not an ancestor of this node
@return  an enumeration for following the path from an ancestor of
         this node to this one
"
      end

      operation 11872258 "isNodeChild"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "aNode" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Child Queries


Returns true if <code>aNode</code> is a child of this node.  If
<code>aNode</code> is null, this method returns false.

@return  true if <code>aNode</code> is a child of this node; false if
                 <code>aNode</code> is null
"
      end

      operation 11872386 "getFirstChild"
	public return_type class_ref 410242 // TreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this node's first child.  If this node has no children,
throws NoSuchElementException.

@return  the first child of this node
@exception       NoSuchElementException  if this node has no children
"
      end

      operation 11872514 "getLastChild"
	public return_type class_ref 410242 // TreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this node's last child.  If this node has no children,
throws NoSuchElementException.

@return  the last child of this node
@exception       NoSuchElementException  if this node has no children
"
      end

      operation 11872642 "getChildAfter"
	public return_type class_ref 410242 // TreeNode
	nparams 1
	  param inout name "aChild" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child in this node's child array that immediately
follows <code>aChild</code>, which must be a child of this node.  If
<code>aChild</code> is the last child, returns null.  This method
performs a linear search of this node's children for
<code>aChild</code> and is O(n) where n is the number of children; to
traverse the entire array of children, use an enumeration instead.

@see             #children
@exception       IllegalArgumentException if <code>aChild</code> is
                                 null or is not a child of this node
@return  the child of this node that immediately follows
         <code>aChild</code>
"
      end

      operation 11872770 "getChildBefore"
	public return_type class_ref 410242 // TreeNode
	nparams 1
	  param inout name "aChild" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child in this node's child array that immediately
precedes <code>aChild</code>, which must be a child of this node.  If
<code>aChild</code> is the first child, returns null.  This method
performs a linear search of this node's children for <code>aChild</code>
and is O(n) where n is the number of children.

@exception       IllegalArgumentException if <code>aChild</code> is null
                                         or is not a child of this node
@return  the child of this node that immediately precedes
         <code>aChild</code>
"
      end

      operation 11872898 "isNodeSibling"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "anotherNode" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Sibling Queries


Returns true if <code>anotherNode</code> is a sibling of (has the
same parent as) this node.  A node is its own sibling.  If
<code>anotherNode</code> is null, returns false.

@param   anotherNode     node to test as sibling of this node
@return  true if <code>anotherNode</code> is a sibling of this node
"
      end

      operation 11873026 "getSiblingCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of siblings of this node.  A node is its own sibling
(if it has no parent or no siblings, this method returns
<code>1</code>).

@return  the number of siblings of this node
"
      end

      operation 11873154 "getNextSibling"
	public return_type class_ref 1400450 // DefaultMutableTreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next sibling of this node in the parent's children array.
Returns null if this node has no parent or is the parent's last child.
This method performs a linear search that is O(n) where n is the number
of children; to traverse the entire array, use the parent's child
enumeration instead.

@see     #children
@return  the sibling of this node that immediately follows this node
"
      end

      operation 11873282 "getPreviousSibling"
	public return_type class_ref 1400450 // DefaultMutableTreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the previous sibling of this node in the parent's children
array.  Returns null if this node has no parent or is the parent's
first child.  This method performs a linear search that is O(n) where n
is the number of children.

@return  the sibling of this node that immediately precedes this node
"
      end

      operation 11873410 "isLeaf"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Leaf Queries


Returns true if this node has no children.  To distinguish between
nodes that have no children and nodes that <i>cannot</i> have
children (e.g. to distinguish files from empty directories), use this
method in conjunction with <code>getAllowsChildren</code>

@see     #getAllowsChildren
@return  true if this node has no children
"
      end

      operation 11873538 "getFirstLeaf"
	public return_type class_ref 1400450 // DefaultMutableTreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the first leaf that is a descendant of this node --
either this node or its first child's first leaf.
Returns this node if it is a leaf.

@see     #isLeaf
@see     #isNodeDescendant
@return  the first leaf in the subtree rooted at this node
"
      end

      operation 11873666 "getLastLeaf"
	public return_type class_ref 1400450 // DefaultMutableTreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds and returns the last leaf that is a descendant of this node --
either this node or its last child's last leaf.
Returns this node if it is a leaf.

@see     #isLeaf
@see     #isNodeDescendant
@return  the last leaf in the subtree rooted at this node
"
      end

      operation 11873794 "getNextLeaf"
	public return_type class_ref 1400450 // DefaultMutableTreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the leaf after this node or null if this node is the
last leaf in the tree.
<p>
In this implementation of the <code>MutableNode</code> interface,
this operation is very inefficient. In order to determine the
next node, this method first performs a linear search in the
parent's child-list in order to find the current node.
<p>
That implementation makes the operation suitable for short
traversals from a known position. But to traverse all of the
leaves in the tree, you should use <code>depthFirstEnumeration</code>
to enumerate the nodes in the tree and use <code>isLeaf</code>
on each node to determine which are leaves.

@see     #depthFirstEnumeration
@see     #isLeaf
@return  returns the next leaf past this node
"
      end

      operation 11873922 "getPreviousLeaf"
	public return_type class_ref 1400450 // DefaultMutableTreeNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the leaf before this node or null if this node is the
first leaf in the tree.
<p>
In this implementation of the <code>MutableNode</code> interface,
this operation is very inefficient. In order to determine the
previous node, this method first performs a linear search in the
parent's child-list in order to find the current node.
<p>
That implementation makes the operation suitable for short
traversals from a known position. But to traverse all of the
leaves in the tree, you should use <code>depthFirstEnumeration</code>
to enumerate the nodes in the tree and use <code>isLeaf</code>
on each node to determine which are leaves.

@see             #depthFirstEnumeration
@see             #isLeaf
@return  returns the leaf before this node
"
      end

      operation 11874050 "getLeafCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the total number of leaves that are descendants of this node.
If this node is a leaf, returns <code>1</code>.  This method is O(n)
where n is the number of descendants of this node.

@see     #isNodeAncestor
@return  the number of leaves beneath this node
"
      end

      operation 11874178 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Overrides


Returns the result of sending <code>toString()</code> to this node's
user object, or the empty string if the node has no user object.

@see     #getUserObject
"
      end

      operation 11874306 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridden to make clone public.  Returns a shallow copy of this node;
the new node has no parent or children and has a reference to the same
user object, if any.

@return  a copy of this node
"
      end

      operation 11874434 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Serialization support."
      end

      operation 11874562 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1400706 "PreorderEnumeration"
	visibility private 
	nactuals 1
	actual class class_ref 185986 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4735874 // <realization>
	  relation 4735874 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 4735874 // <realization>
	    b parent class_ref 185986 // Enumeration
	end

	classrelation 4736002 // stack (<unidirectional association>)
	  relation 4736002 --->
	    a role_name "stack" init_value " new Stack<Enumeration>()" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Enumeration> ${name}${value};
"
	      classrelation_ref 4736002 // stack (<unidirectional association>)
	    b parent class_ref 183810 // Stack
	end

	operation 11874690 "PreorderEnumeration"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "rootNode" type class_ref 410242 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11874818 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11874946 "nextElement"
	  public return_type class_ref 410242 // TreeNode
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1400834 "PostorderEnumeration"
	visibility package 
	nactuals 1
	actual class class_ref 185986 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4736130 // <realization>
	  relation 4736130 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 4736130 // <realization>
	    b parent class_ref 185986 // Enumeration
	end

	classrelation 4736258 // root (<unidirectional association>)
	  relation 4736258 --->
	    a role_name "root" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4736258 // root (<unidirectional association>)
	    b parent class_ref 410242 // TreeNode
	end

	classrelation 4736386 // children (<unidirectional association>)
	  relation 4736386 --->
	    a role_name "children" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TreeNode> ${name}${value};
"
	      classrelation_ref 4736386 // children (<unidirectional association>)
	    b parent class_ref 185986 // Enumeration
	end

	classrelation 4736514 // subtree (<unidirectional association>)
	  relation 4736514 --->
	    a role_name "subtree" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TreeNode> ${name}${value};
"
	      classrelation_ref 4736514 // subtree (<unidirectional association>)
	    b parent class_ref 185986 // Enumeration
	end

	operation 11875074 "PostorderEnumeration"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "rootNode" type class_ref 410242 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11875202 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11875330 "nextElement"
	  public return_type class_ref 410242 // TreeNode
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1400962 "BreadthFirstEnumeration"
	visibility package 
	nactuals 1
	actual class class_ref 185986 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4736642 // <realization>
	  relation 4736642 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 4736642 // <realization>
	    b parent class_ref 185986 // Enumeration
	end

	class 1401090 "Queue"
	  visibility package 
	  cpp_decl ""
	  final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  class 1401218 "QNode"
	    visibility package 
	    cpp_decl ""
	    final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	    php_decl ""
	    python_2_2 python_decl ""
	    idl_decl ""
	    explicit_switch_type ""
	    mysql_decl ""
	    
	    classrelation 4737154 // object (<unidirectional association>)
	      relation 4737154 --->
		a role_name "object" public
		  java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		  classrelation_ref 4737154 // object (<unidirectional association>)
		b parent class_ref 129538 // Object
	    end

	    classrelation 4737282 // next (<unidirectional association>)
	      relation 4737282 --->
		a role_name "next" public
		  comment " null if end"
		  java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		  classrelation_ref 4737282 // next (<unidirectional association>)
		b parent class_ref 1401218 // QNode
	    end

	    operation 11875842 "QNode"
	      public explicit_return_type ""
	      nparams 2
	        param inout name "object" type class_ref 129538 // Object
	        param inout name "next" type class_ref 1401218 // QNode
	      
	      preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	      
	      
	      
	    end
	  end

	  classrelation 4736898 // head (<unidirectional association>)
	    relation 4736898 --->
	      a role_name "head" package
		comment " null if empty"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 4736898 // head (<unidirectional association>)
	      b parent class_ref 1401218 // QNode
	  end

	  classrelation 4737026 // tail (<unidirectional association>)
	    relation 4737026 --->
	      a role_name "tail" package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 4737026 // tail (<unidirectional association>)
	      b parent class_ref 1401218 // QNode
	  end

	  operation 11875970 "enqueue"
	    public explicit_return_type "void"
	    nparams 1
	      param inout name "anObject" type class_ref 129538 // Object
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 11876098 "dequeue"
	    public return_type class_ref 129538 // Object
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 11876226 "firstObject"
	    public return_type class_ref 129538 // Object
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 11876354 "isEmpty"
	    public explicit_return_type "boolean"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	classrelation 4736770 // queue (<unidirectional association>)
	  relation 4736770 --->
	    a role_name "queue" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4736770 // queue (<unidirectional association>)
	    b parent class_ref 1401090 // Queue
	end

	operation 11875458 "BreadthFirstEnumeration"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "rootNode" type class_ref 410242 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11875586 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11875714 "nextElement"
	  public return_type class_ref 410242 // TreeNode
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1401346 "PathBetweenNodesEnumeration"
	visibility package 
	nactuals 1
	actual class class_ref 185986 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4737410 // <realization>
	  relation 4737410 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 4737410 // <realization>
	    b parent class_ref 185986 // Enumeration
	end

	classrelation 4737538 // stack (<unidirectional association>)
	  relation 4737538 --->
	    a role_name "stack" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TreeNode> ${name}${value};
"
	      classrelation_ref 4737538 // stack (<unidirectional association>)
	    b parent class_ref 183810 // Stack
	end

	operation 11876482 "PathBetweenNodesEnumeration"
	  public explicit_return_type ""
	  nparams 2
	    param inout name "ancestor" type class_ref 410242 // TreeNode
	    param inout name "descendant" type class_ref 410242 // TreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11876610 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11876738 "nextElement"
	  public return_type class_ref 410242 // TreeNode
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 1400578 "MutableTreeNode"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the requirements for a tree node object that can change --
by adding or removing child nodes, or by changing the contents
of a user object stored in the node.

@see DefaultMutableTreeNode
@see javax.swing.JTree

@author Rob Davis
@author Scott Violet
"
      classrelation 4734978 // <generalisation>
	relation 4734978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4734978 // <generalisation>
	  b parent class_ref 410242 // TreeNode
      end

      operation 11866754 "insert"
	public explicit_return_type "void"
	nparams 2
	  param inout name "child" type class_ref 1400578 // MutableTreeNode
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds <code>child</code> to the receiver at <code>index</code>.
<code>child</code> will be messaged with <code>setParent</code>.
"
      end

      operation 11866882 "remove"
	public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the child at <code>index</code> from the receiver.
"
      end

      operation 11867010 "remove"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1400578 // MutableTreeNode
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes <code>node</code> from the receiver. <code>setParent</code>
will be messaged on <code>node</code>.
"
      end

      operation 11867138 "setUserObject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "object" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the user object of the receiver to <code>object</code>.
"
      end

      operation 11867266 "removeFromParent"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the receiver from its parent.
"
      end

      operation 11867394 "setParent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newParent" type class_ref 1400578 // MutableTreeNode
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the parent of the receiver to <code>newParent</code>.
"
      end
    end

    class 1401474 "DefaultTreeModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A simple tree data model that uses TreeNodes.
For further information and examples that use DefaultTreeModel,
see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html\">How to Use Trees</a>
in <em>The Java Tutorial.</em>
<p>
<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@author Rob Davis
@author Ray Ryan
@author Scott Violet
"
      classrelation 4737666 // <realization>
	relation 4737666 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4737666 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 4737794 // <realization>
	relation 4737794 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4737794 // <realization>
	  b parent class_ref 449410 // TreeModel
      end

      classrelation 4737922 // root (<unidirectional association>)
	relation 4737922 --->
	  a role_name "root" protected
	    comment " Root of the tree. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4737922 // root (<unidirectional association>)
	  b parent class_ref 410242 // TreeNode
      end

      classrelation 4738050 // listenerList (<unidirectional association>)
	relation 4738050 --->
	  a role_name "listenerList" init_value " new EventListenerList()" protected
	    comment " Listeners. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4738050 // listenerList (<unidirectional association>)
	  b parent class_ref 354946 // EventListenerList
      end

      attribute 2609538 "asksAllowsChildren"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Determines how the <code>isLeaf</code> method figures
out if a node is a leaf node. If true, a node is a leaf
node if it does not allow children. (If it allows
children, it is not a leaf node, even if no children
are present.) That lets you distinguish between <i>folder</i>
nodes and <i>file</i> nodes in a file system, for example.
<p>
If this value is false, then any node which has no
children is a leaf node, and any node may acquire
children.

@see TreeNode#getAllowsChildren
@see TreeModel#isLeaf
@see #setAsksAllowsChildren

"
      end

      operation 11877890 "DefaultTreeModel"
	public explicit_return_type ""
	nparams 1
	  param inout name "root" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@ConstructorProperties({\"root\"})
"
	
	
	
	comment "Creates a tree in which any node can have children.

@param root a TreeNode object that is the root of the tree
@see #DefaultTreeModel(TreeNode, boolean)
"
      end

      operation 11878018 "DefaultTreeModel"
	public explicit_return_type ""
	nparams 2
	  param inout name "root" type class_ref 410242 // TreeNode
	  param inout name "asksAllowsChildren" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a tree specifying whether any node can have children,
or whether only certain nodes can have children.

@param root a TreeNode object that is the root of the tree
@param asksAllowsChildren a boolean, false if any node can
       have children, true if each node is asked to see if
       it can have children
@see #asksAllowsChildren
"
      end

      operation 11878146 "setAsksAllowsChildren"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets whether or not to test leafness by asking getAllowsChildren()
or isLeaf() to the TreeNodes.  If newvalue is true, getAllowsChildren()
is messaged, otherwise isLeaf() is messaged.
"
      end

      operation 11878274 "asksAllowsChildren"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells how leaf nodes are determined.

@return true if only nodes which do not allow children are
        leaf nodes, false if nodes which have no children
        (even if allowed) are leaf nodes
@see #asksAllowsChildren
"
      end

      operation 11878402 "setRoot"
	public explicit_return_type "void"
	nparams 1
	  param inout name "root" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the root to <code>root</code>. A null <code>root</code> implies
the tree is to display nothing, and is legal.
"
      end

      operation 11878530 "getRoot"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root of the tree.  Returns null only if the tree has
no nodes.

@return  the root of the tree
"
      end

      operation 11878658 "getIndexOfChild"
	public explicit_return_type "int"
	nparams 2
	  param inout name "parent" type class_ref 129538 // Object
	  param inout name "child" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of child in parent.
If either the parent or child is <code>null</code>, returns -1.
@param parent a note in the tree, obtained from this data source
@param child the node we are interested in
@return the index of the child in the parent, or -1
   if either the parent or the child is <code>null</code>
"
      end

      operation 11878786 "getChild"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "parent" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the child of <I>parent</I> at index <I>index</I> in the parent's
child array.  <I>parent</I> must be a node previously obtained from
this data source. This should not return null if <i>index</i>
is a valid index for <i>parent</i> (that is <i>index</i> &gt;= 0 &amp;&amp;
<i>index</i> &lt; getChildCount(<i>parent</i>)).

@param   parent  a node in the tree, obtained from this data source
@return  the child of <I>parent</I> at index <I>index</I>
"
      end

      operation 11878914 "getChildCount"
	public explicit_return_type "int"
	nparams 1
	  param inout name "parent" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of children of <I>parent</I>.  Returns 0 if the node
is a leaf or if it has no children.  <I>parent</I> must be a node
previously obtained from this data source.

@param   parent  a node in the tree, obtained from this data source
@return  the number of children of the node <I>parent</I>
"
      end

      operation 11879042 "isLeaf"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the specified node is a leaf node.
The way the test is performed depends on the
<code>askAllowsChildren</code> setting.

@param node the node to check
@return true if the node is a leaf node

@see #asksAllowsChildren
@see TreeModel#isLeaf
"
      end

      operation 11879170 "reload"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke this method if you've modified the {@code TreeNode}s upon which
this model depends. The model will notify all of its listeners that the
model has changed.
"
      end

      operation 11879298 "valueForPathChanged"
	public explicit_return_type "void"
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "newValue" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This sets the user object of the TreeNode identified by path
and posts a node changed.  If you use custom user objects in
the TreeModel you're going to need to subclass this and
set the user object of the changed node to something meaningful.
"
      end

      operation 11879426 "insertNodeInto"
	public explicit_return_type "void"
	nparams 3
	  param inout name "newChild" type class_ref 1400578 // MutableTreeNode
	  param inout name "parent" type class_ref 1400578 // MutableTreeNode
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked this to insert newChild at location index in parents children.
This will then message nodesWereInserted to create the appropriate
event. This is the preferred way to add children as it will create
the appropriate event.
"
      end

      operation 11879554 "removeNodeFromParent"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1400578 // MutableTreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Message this to remove node from its parent. This will message
nodesWereRemoved to create the appropriate event. This is the
preferred way to remove a node as it handles the event creation
for you.
"
      end

      operation 11879682 "nodeChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke this method after you've changed how node is to be
represented in the tree.
"
      end

      operation 11879810 "reload"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke this method if you've modified the {@code TreeNode}s upon which
this model depends. The model will notify all of its listeners that the
model has changed below the given node.

@param node the node below which the model has changed
"
      end

      operation 11879938 "nodesWereInserted"
	public explicit_return_type "void"
	nparams 2
	  param inout name "node" type class_ref 410242 // TreeNode
	  param inout name "childIndices" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke this method after you've inserted some TreeNodes into
node.  childIndices should be the index of the new elements and
must be sorted in ascending order.
"
      end

      operation 11880066 "nodesWereRemoved"
	public explicit_return_type "void"
	nparams 3
	  param inout name "node" type class_ref 410242 // TreeNode
	  param inout name "childIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "removedChildren" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke this method after you've removed some TreeNodes from
node.  childIndices should be the index of the removed elements and
must be sorted in ascending order. And removedChildren should be
the array of the children objects that were removed.
"
      end

      operation 11880194 "nodesChanged"
	public explicit_return_type "void"
	nparams 2
	  param inout name "node" type class_ref 410242 // TreeNode
	  param inout name "childIndices" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke this method after you've changed how the children identified by
childIndicies are to be represented in the tree.
"
      end

      operation 11880322 "nodeStructureChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoke this method if you've totally changed the children of
node and its children's children...  This will post a
treeStructureChanged event.
"
      end

      operation 11880450 "getPathToRoot"
	public return_type class_ref 410242 // TreeNode
	nparams 1
	  param inout name "aNode" type class_ref 410242 // TreeNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Builds the parents of node up to and including the root node,
where the original node is the last element in the returned array.
The length of the returned array gives the node's depth in the
tree.

@param aNode the TreeNode to get the path for
"
      end

      operation 11880578 "getPathToRoot"
	protected return_type class_ref 410242 // TreeNode
	nparams 2
	  param inout name "aNode" type class_ref 410242 // TreeNode
	  param in name "depth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Builds the parents of node up to and including the root node,
where the original node is the last element in the returned array.
The length of the returned array gives the node's depth in the
tree.

@param aNode  the TreeNode to get the path for
@param depth  an int giving the number of steps already taken towards
       the root (on recursive calls), used to size the returned array
@return an array of TreeNodes giving the path from the root to the
        specified node
"
      end

      operation 11880706 "addTreeModelListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 449922 // TreeModelListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  Events


Adds a listener for the TreeModelEvent posted after the tree changes.

@see     #removeTreeModelListener
@param   l       the listener to add
"
      end

      operation 11880834 "removeTreeModelListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "l" type class_ref 449922 // TreeModelListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a listener previously added with <B>addTreeModelListener()</B>.

@see     #addTreeModelListener
@param   l       the listener to remove
"
      end

      operation 11880962 "getTreeModelListeners"
	public return_type class_ref 449922 // TreeModelListener
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all the tree model listeners
registered on this model.

@return all of this model's <code>TreeModelListener</code>s
        or an empty
        array if no tree model listeners are currently registered

@see #addTreeModelListener
@see #removeTreeModelListener

@since 1.4
"
      end

      operation 11881090 "fireTreeNodesChanged"
	protected explicit_return_type "void"
	nparams 4
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "path" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "childIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "children" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all listeners that have registered interest for
notification on this event type.  The event instance
is lazily created using the parameters passed into
the fire method.

@param source the source of the {@code TreeModelEvent};
              typically {@code this}
@param path the path to the parent of the nodes that changed; use
            {@code null} to identify the root has changed
@param childIndices the indices of the changed elements
@param children the changed elements
"
      end

      operation 11881218 "fireTreeNodesInserted"
	protected explicit_return_type "void"
	nparams 4
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "path" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "childIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "children" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all listeners that have registered interest for
notification on this event type.  The event instance
is lazily created using the parameters passed into
the fire method.

@param source the source of the {@code TreeModelEvent};
              typically {@code this}
@param path the path to the parent the nodes were added to
@param childIndices the indices of the new elements
@param children the new elements
"
      end

      operation 11881346 "fireTreeNodesRemoved"
	protected explicit_return_type "void"
	nparams 4
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "path" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "childIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "children" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all listeners that have registered interest for
notification on this event type.  The event instance
is lazily created using the parameters passed into
the fire method.

@param source the source of the {@code TreeModelEvent};
              typically {@code this}
@param path the path to the parent the nodes were removed from
@param childIndices the indices of the removed elements
@param children the removed elements
"
      end

      operation 11881474 "fireTreeStructureChanged"
	protected explicit_return_type "void"
	nparams 4
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "path" type class_ref 129538 // Object
	multiplicity "[]"
	  param inout name "childIndices" explicit_type "int"
	multiplicity "[]"
	  param inout name "children" type class_ref 129538 // Object
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2}[] ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all listeners that have registered interest for
notification on this event type.  The event instance
is lazily created using the parameters passed into
the fire method.

@param source the source of the {@code TreeModelEvent};
              typically {@code this}
@param path the path to the parent of the structure that has changed;
            use {@code null} to identify the root has changed
@param childIndices the indices of the affected elements
@param children the affected elements
"
      end

      operation 11881602 "fireTreeStructureChanged"
	private explicit_return_type "void"
	nparams 2
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all listeners that have registered interest for
notification on this event type.  The event instance
is lazily created using the parameters passed into
the fire method.

@param source the source of the {@code TreeModelEvent};
              typically {@code this}
@param path the path to the parent of the structure that has changed;
            use {@code null} to identify the root has changed
"
      end

      operation 11881730 "getListeners"
	public explicit_return_type "T"
	nparams 1
	  param inout name "listenerType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends EventListener> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all the objects currently registered
as <code><em>Foo</em>Listener</code>s
upon this model.
<code><em>Foo</em>Listener</code>s are registered using the
<code>add<em>Foo</em>Listener</code> method.

<p>

You can specify the <code>listenerType</code> argument
with a class literal,
such as
<code><em>Foo</em>Listener.class</code>.
For example, you can query a
<code>DefaultTreeModel</code> <code>m</code>
for its tree model listeners with the following code:

<pre>TreeModelListener[] tmls = (TreeModelListener[])(m.getListeners(TreeModelListener.class));</pre>

If no such listeners exist, this method returns an empty array.

@param listenerType the type of listeners requested; this parameter
         should specify an interface that descends from
         <code>java.util.EventListener</code>
@return an array of all objects registered as
         <code><em>Foo</em>Listener</code>s on this component,
         or an empty array if no such
         listeners have been added
@exception ClassCastException if <code>listenerType</code>
         doesn't specify a class or interface that implements
         <code>java.util.EventListener</code>

@see #getTreeModelListeners

@since 1.3
"
      end

      operation 11881858 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Serialization support."
      end

      operation 11881986 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1401602 "DefaultTreeSelectionModel"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Default implementation of TreeSelectionModel.  Listeners are notified
whenever
the paths in the selection change, not the rows. In order
to be able to track row changes you may wish to become a listener
for expansion events on the tree and test for changes from there.
<p>resetRowSelection is called from any of the methods that update
the selected paths. If you subclass any of these methods to
filter what is allowed to be selected, be sure and message
<code>resetRowSelection</code> if you do not message super.

<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@see javax.swing.JTree

@author Scott Violet
"
      classrelation 4738178 // <realization>
	relation 4738178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4738178 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      classrelation 4738306 // <realization>
	relation 4738306 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4738306 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 4738434 // <realization>
	relation 4738434 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4738434 // <realization>
	  b parent class_ref 449538 // TreeSelectionModel
      end

      classrelation 4738562 // SELECTION_MODE_PROPERTY (<unidirectional association>)
	relation 4738562 --->
	  a role_name "SELECTION_MODE_PROPERTY" init_value " \"selectionMode\"" class_relation const_relation public
	    comment " Property name for selectionMode. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4738562 // SELECTION_MODE_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4738690 // changeSupport (<unidirectional association>)
	relation 4738690 --->
	  a role_name "changeSupport" protected
	    comment " Used to messaged registered listeners. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4738690 // changeSupport (<unidirectional association>)
	  b parent class_ref 360578 // SwingPropertyChangeSupport
      end

      classrelation 4738818 // selection (<unidirectional association>)
	relation 4738818 --->
	  a role_name "selection" multiplicity "[]" protected
	    comment " Paths that are currently selected.  Will be null if nothing is
currently selected. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 4738818 // selection (<unidirectional association>)
	  b parent class_ref 448770 // TreePath
      end

      classrelation 4738946 // listenerList (<unidirectional association>)
	relation 4738946 --->
	  a role_name "listenerList" init_value " new EventListenerList()" protected
	    comment " Event listener list. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4738946 // listenerList (<unidirectional association>)
	  b parent class_ref 354946 // EventListenerList
      end

      classrelation 4739074 // rowMapper (<unidirectional association>)
	relation 4739074 --->
	  a role_name "rowMapper" protected
	    comment " Provides a row for a given path. 
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4739074 // rowMapper (<unidirectional association>)
	  b parent class_ref 451842 // RowMapper
      end

      classrelation 4739202 // listSelectionModel (<unidirectional association>)
	relation 4739202 --->
	  a role_name "listSelectionModel" protected
	    comment " Handles maintaining the list selection model. The RowMapper is used
to map from a TreePath to a row, and the value is then placed here. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4739202 // listSelectionModel (<unidirectional association>)
	  b parent class_ref 1268994 // DefaultListSelectionModel
      end

      attribute 2610050 "selectionMode"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Mode for the selection, will be either SINGLE_TREE_SELECTION,
CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.

"
      end

      classrelation 4739330 // leadPath (<unidirectional association>)
	relation 4739330 --->
	  a role_name "leadPath" protected
	    comment " Last path that was added. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4739330 // leadPath (<unidirectional association>)
	  b parent class_ref 448770 // TreePath
      end

      attribute 2610178 "leadIndex"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Index of the lead path in selection. 
"
      end

      attribute 2610306 "leadRow"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Lead row. 
"
      end

      classrelation 4739458 // uniquePaths (<unidirectional association>)
	relation 4739458 --->
	  a role_name "uniquePaths" private
	    comment " Used to make sure the paths are unique, will contain all the paths
in <code>selection</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TreePath, Boolean> ${name}${value};
"
	    classrelation_ref 4739458 // uniquePaths (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      classrelation 4739586 // lastPaths (<unidirectional association>)
	relation 4739586 --->
	  a role_name "lastPaths" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TreePath, Boolean> ${name}${value};
"
	    classrelation_ref 4739586 // lastPaths (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      classrelation 4739714 // tempPaths (<unidirectional association>)
	relation 4739714 --->
	  a role_name "tempPaths" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 4739714 // tempPaths (<unidirectional association>)
	  b parent class_ref 448770 // TreePath
      end

      operation 11885570 "DefaultTreeSelectionModel"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of DefaultTreeSelectionModel that is
empty, with a selection mode of DISCONTIGUOUS_TREE_SELECTION.
"
      end

      operation 11885698 "setRowMapper"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newMapper" type class_ref 451842 // RowMapper
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the RowMapper instance. This instance is used to determine
the row for a particular TreePath.
"
      end

      operation 11885826 "getRowMapper"
	public return_type class_ref 451842 // RowMapper
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the RowMapper instance that is able to map a TreePath to a
row.
"
      end

      operation 11885954 "setSelectionMode"
	public explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the selection model, which must be one of SINGLE_TREE_SELECTION,
CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. If mode
is not one of the defined value,
<code>DISCONTIGUOUS_TREE_SELECTION</code> is assumed.
<p>This may change the selection if the current selection is not valid
for the new mode. For example, if three TreePaths are
selected when the mode is changed to <code>SINGLE_TREE_SELECTION</code>,
only one TreePath will remain selected. It is up to the particular
implementation to decide what TreePath remains selected.
<p>
Setting the mode to something other than the defined types will
result in the mode becoming <code>DISCONTIGUOUS_TREE_SELECTION</code>.
"
      end

      operation 11886082 "getSelectionMode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the selection mode, one of <code>SINGLE_TREE_SELECTION</code>,
<code>DISCONTIGUOUS_TREE_SELECTION</code> or
<code>CONTIGUOUS_TREE_SELECTION</code>.
"
      end

      operation 11886210 "setSelectionPath"
	public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the selection to path. If this represents a change, then
the TreeSelectionListeners are notified. If <code>path</code> is
null, this has the same effect as invoking <code>clearSelection</code>.

@param path new path to select
"
      end

      operation 11886338 "setSelectionPaths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "pPaths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the selection. Whether the supplied paths are taken as the
new selection depends upon the selection mode. If the supplied
array is {@code null}, or empty, the selection is cleared. If
the selection mode is {@code SINGLE_TREE_SELECTION}, only the
first path in {@code pPaths} is used. If the selection
mode is {@code CONTIGUOUS_TREE_SELECTION} and the supplied paths
are not contiguous, then only the first path in {@code pPaths} is
used. If the selection mode is
{@code DISCONTIGUOUS_TREE_SELECTION}, then all paths are used.
<p>
All {@code null} paths in {@code pPaths} are ignored.
<p>
If this represents a change, all registered {@code
TreeSelectionListener}s are notified.
<p>
The lead path is set to the last unique path.
<p>
The paths returned from {@code getSelectionPaths} are in the same
order as those supplied to this method.

@param pPaths the new selection
"
      end

      operation 11886466 "addSelectionPath"
	public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds path to the current selection. If path is not currently
in the selection the TreeSelectionListeners are notified. This has
no effect if <code>path</code> is null.

@param path the new path to add to the current selection
"
      end

      operation 11886594 "addSelectionPaths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds paths to the current selection. If any of the paths in
paths are not currently in the selection the TreeSelectionListeners
are notified. This has
no effect if <code>paths</code> is null.
<p>The lead path is set to the last element in <code>paths</code>.
<p>If the selection mode is <code>CONTIGUOUS_TREE_SELECTION</code>,
and adding the new paths would make the selection discontiguous.
Then two things can result: if the TreePaths in <code>paths</code>
are contiguous, then the selection becomes these TreePaths,
otherwise the TreePaths aren't contiguous and the selection becomes
the first TreePath in <code>paths</code>.

@param paths the new path to add to the current selection
"
      end

      operation 11886722 "removeSelectionPath"
	public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes path from the selection. If path is in the selection
The TreeSelectionListeners are notified. This has no effect if
<code>path</code> is null.

@param path the path to remove from the selection
"
      end

      operation 11886850 "removeSelectionPaths"
	public explicit_return_type "void"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes paths from the selection.  If any of the paths in paths
are in the selection the TreeSelectionListeners are notified.
This has no effect if <code>paths</code> is null.

@param paths the paths to remove from the selection
"
      end

      operation 11886978 "getSelectionPath"
	public return_type class_ref 448770 // TreePath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first path in the selection. This is useful if there
if only one item currently selected.
"
      end

      operation 11887106 "getSelectionPaths"
	public return_type class_ref 448770 // TreePath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the selection.

@return the selection
"
      end

      operation 11887234 "getSelectionCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of paths that are selected.
"
      end

      operation 11887362 "isPathSelected"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the path, <code>path</code>,
is in the current selection.
"
      end

      operation 11887490 "isSelectionEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the selection is currently empty.
"
      end

      operation 11887618 "clearSelection"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Empties the current selection.  If this represents a change in the
current selection, the selection listeners are notified.
"
      end

      operation 11887746 "addTreeSelectionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 449794 // TreeSelectionListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds x to the list of listeners that are notified each time the
set of selected TreePaths changes.

@param x the new listener to be added
"
      end

      operation 11887874 "removeTreeSelectionListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 449794 // TreeSelectionListener
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes x from the list of listeners that are notified each time
the set of selected TreePaths changes.

@param x the listener to remove
"
      end

      operation 11888002 "getTreeSelectionListeners"
	public return_type class_ref 449794 // TreeSelectionListener
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all the tree selection listeners
registered on this model.

@return all of this model's <code>TreeSelectionListener</code>s
        or an empty
        array if no tree selection listeners are currently registered

@see #addTreeSelectionListener
@see #removeTreeSelectionListener

@since 1.4
"
      end

      operation 11888130 "fireValueChanged"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 451202 // TreeSelectionEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies all listeners that are registered for
tree selection events on this object.
@see #addTreeSelectionListener
@see EventListenerList
"
      end

      operation 11888258 "getListeners"
	public explicit_return_type "T"
	nparams 1
	  param inout name "listenerType" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends EventListener> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all the objects currently registered
as <code><em>Foo</em>Listener</code>s
upon this model.
<code><em>Foo</em>Listener</code>s are registered using the
<code>add<em>Foo</em>Listener</code> method.

<p>

You can specify the <code>listenerType</code> argument
with a class literal,
such as
<code><em>Foo</em>Listener.class</code>.
For example, you can query a
<code>DefaultTreeSelectionModel</code> <code>m</code>
for its tree selection listeners with the following code:

<pre>TreeSelectionListener[] tsls = (TreeSelectionListener[])(m.getListeners(TreeSelectionListener.class));</pre>

If no such listeners exist, this method returns an empty array.

@param listenerType the type of listeners requested; this parameter
         should specify an interface that descends from
         <code>java.util.EventListener</code>
@return an array of all objects registered as
         <code><em>Foo</em>Listener</code>s on this component,
         or an empty array if no such
         listeners have been added
@exception ClassCastException if <code>listenerType</code>
         doesn't specify a class or interface that implements
         <code>java.util.EventListener</code>

@see #getTreeSelectionListeners
@see #getPropertyChangeListeners

@since 1.3
"
      end

      operation 11888386 "getSelectionRows"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the selection in terms of rows. There is not
necessarily a one-to-one mapping between the {@code TreePath}s
returned from {@code getSelectionPaths} and this method. In
particular, if a {@code TreePath} is not viewable (the {@code
RowMapper} returns {@code -1} for the row corresponding to the
{@code TreePath}), then the corresponding row is not included
in the returned array. For example, if the selection consists
of two paths, {@code A} and {@code B}, with {@code A} at row
{@code 10}, and {@code B} not currently viewable, then this method
returns an array with the single entry {@code 10}.

@return the selection in terms of rows
"
      end

      operation 11888514 "getMinSelectionRow"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the smallest value obtained from the RowMapper for the
current set of selected TreePaths. If nothing is selected,
or there is no RowMapper, this will return -1.
"
      end

      operation 11888642 "getMaxSelectionRow"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest value obtained from the RowMapper for the
current set of selected TreePaths. If nothing is selected,
or there is no RowMapper, this will return -1.
"
      end

      operation 11888770 "isRowSelected"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "row" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the row identified by <code>row</code> is selected.
"
      end

      operation 11888898 "resetRowSelection"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this object's mapping from TreePath to rows. This should
be invoked when the mapping from TreePaths to integers has changed
(for example, a node has been expanded).
<p>You do not normally have to call this, JTree and its associated
Listeners will invoke this for you. If you are implementing your own
View class, then you will have to invoke this.
<p>This will invoke <code>insureRowContinuity</code> to make sure
the currently selected TreePaths are still valid based on the
selection mode.
"
      end

      operation 11889026 "getLeadSelectionRow"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lead selection index. That is the last index that was
added.
"
      end

      operation 11889154 "getLeadSelectionPath"
	public return_type class_ref 448770 // TreePath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last path that was added. This may differ from the
leadSelectionPath property maintained by the JTree.
"
      end

      operation 11889282 "addPropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 347266 // PropertyChangeListener
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a PropertyChangeListener to the listener list.
The listener is registered for all properties.
<p>
A PropertyChangeEvent will get fired when the selection mode
changes.

@param listener  the PropertyChangeListener to be added
"
      end

      operation 11889410 "removePropertyChangeListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 347266 // PropertyChangeListener
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a PropertyChangeListener from the listener list.
This removes a PropertyChangeListener that was registered
for all properties.

@param listener  the PropertyChangeListener to be removed
"
      end

      operation 11889538 "getPropertyChangeListeners"
	public return_type class_ref 347266 // PropertyChangeListener
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of all the property change listeners
registered on this <code>DefaultTreeSelectionModel</code>.

@return all of this model's <code>PropertyChangeListener</code>s
        or an empty
        array if no property change listeners are currently registered

@see #addPropertyChangeListener
@see #removePropertyChangeListener

@since 1.4
"
      end

      operation 11889666 "insureRowContinuity"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes sure the currently selected <code>TreePath</code>s are valid
for the current selection mode.
If the selection mode is <code>CONTIGUOUS_TREE_SELECTION</code>
and a <code>RowMapper</code> exists, this will make sure all
the rows are contiguous, that is, when sorted all the rows are
in order with no gaps.
If the selection isn't contiguous, the selection is
reset to contain the first set, when sorted, of contiguous rows.
<p>
If the selection mode is <code>SINGLE_TREE_SELECTION</code> and
more than one TreePath is selected, the selection is reset to
contain the first path currently selected.
"
      end

      operation 11889794 "arePathsContiguous"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the paths are contiguous,
or this object has no RowMapper.
"
      end

      operation 11889922 "canPathsBeAdded"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to test if a particular set of <code>TreePath</code>s can
be added. This will return true if <code>paths</code> is null (or
empty), or this object has no RowMapper, or nothing is currently selected,
or the selection mode is <code>DISCONTIGUOUS_TREE_SELECTION</code>, or
adding the paths to the current selection still results in a
contiguous set of <code>TreePath</code>s.
"
      end

      operation 11890050 "canPathsBeRemoved"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "paths" type class_ref 448770 // TreePath
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the paths can be removed without breaking the
continuity of the model.
This is rather expensive.
"
      end

      operation 11890178 "notifyPathChange"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "changedPaths" type class_ref 141442 // Vector
	  param inout name "oldLeadSelection" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Deprecated
"
	
	
	
	comment "Notifies listeners of a change in path. changePaths should contain
instances of PathPlaceHolder.

@deprecated As of JDK version 1.7
"
      end

      operation 11890306 "updateLeadIndex"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the leadIndex instance variable.
"
      end

      operation 11890434 "insureUniqueness"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is obsolete and its implementation is now a noop.  It's
still called by setSelectionPaths and addSelectionPaths, but only
for backwards compatibility.
"
      end

      operation 11890562 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string that displays and identifies this
object's properties.

@return a String representation of this object
"
      end

      operation 11890690 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 129794 // CloneNotSupportedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a clone of this object with the same selection.
This method does not duplicate
selection listeners and property listeners.

@exception CloneNotSupportedException never thrown by instances of
                                      this class
"
      end

      operation 11890818 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Serialization support."
      end

      operation 11890946 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1401730 "PathPlaceHolder"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Holds a path and whether or not it is new.
"
      attribute 2610434 "isNew"
	protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 4739842 // path (<unidirectional association>)
	relation 4739842 --->
	  a role_name "path" protected
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4739842 // path (<unidirectional association>)
	  b parent class_ref 448770 // TreePath
      end

      operation 11891074 "PathPlaceHolder"
	package explicit_return_type ""
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "isNew" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1401858 "FixedHeightLayoutCache"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NOTE: This will become more open in a future release.
<p>
<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@author Scott Violet
"
      classrelation 4740226 // <generalisation>
	relation 4740226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4740226 // <generalisation>
	  b parent class_ref 449154 // AbstractLayoutCache
      end

      class 1401986 "FHTreeStateNode"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4740994 // <generalisation>
	  relation 4740994 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 4740994 // <generalisation>
	    b parent class_ref 1400450 // DefaultMutableTreeNode
	end

	attribute 2610690 "isExpanded"
	  protected explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Is this node expanded? 
"
	end

	attribute 2610818 "childIndex"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Index of this node from the model. 
"
	end

	attribute 2610946 "childCount"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Child count of the receiver. 
"
	end

	attribute 2611074 "row"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Row of the receiver. This is only valid if the row is expanded.

"
	end

	classrelation 4741122 // path (<unidirectional association>)
	  relation 4741122 --->
	    a role_name "path" protected
	      comment " Path of this node. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4741122 // path (<unidirectional association>)
	    b parent class_ref 448770 // TreePath
	end

	operation 11895426 "FHTreeStateNode"
	  public explicit_return_type ""
	  nparams 3
	    param inout name "userObject" type class_ref 129538 // Object
	    param in name "childIndex" explicit_type "int"
	    param in name "row" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11895554 "setParent"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "parent" type class_ref 1400578 // MutableTreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Overriden DefaultMutableTreeNode methods


Messaged when this node is added somewhere, resets the path
and adds a mapping from path to this node.
"
	end

	operation 11895682 "remove"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "childIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Messaged when this node is removed from its parent, this messages
<code>removedFromMapping</code> to remove all the children.
"
	end

	operation 11895810 "setUserObject"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Messaged to set the user object. This resets the path.
"
	end

	operation 11895938 "getChildIndex"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the index of the receiver in the model.
"
	end

	operation 11896066 "getTreePath"
	  public return_type class_ref 448770 // TreePath
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the <code>TreePath</code> of the receiver.
"
	end

	operation 11896194 "getChildAtModelIndex"
	  public return_type class_ref 1401986 // FHTreeStateNode
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the child for the passed in model index, this will
return <code>null</code> if the child for <code>index</code>
has not yet been created (expanded).
"
	end

	operation 11896322 "isVisible"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node is visible. This is determined by
asking all the parents if they are expanded.
"
	end

	operation 11896450 "getRow"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the row of the receiver.
"
	end

	operation 11896578 "getRowToModelIndex"
	  public explicit_return_type "int"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the row of the child with a model index of
<code>index</code>.
"
	end

	operation 11896706 "getTotalChildCount"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of children in the receiver by descending all
expanded nodes and messaging them with getTotalChildCount.
"
	end

	operation 11896834 "isExpanded"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node is expanded.
"
	end

	operation 11896962 "getVisibleLevel"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "The highest visible nodes have a depth of 0.
"
	end

	operation 11897090 "resetChildrenPaths"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "parentPath" type class_ref 448770 // TreePath
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Recreates the receivers path, and all its children's paths.
"
	end

	operation 11897218 "removeFromMapping"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes the receiver, and all its children, from the mapping
table.
"
	end

	operation 11897346 "createChildFor"
	  protected return_type class_ref 1401986 // FHTreeStateNode
	  nparams 1
	    param inout name "userObject" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new node to represent <code>userObject</code>.
This does NOT check to ensure there isn't already a child node
to manage <code>userObject</code>.
"
	end

	operation 11897474 "adjustRowBy"
	  protected explicit_return_type "void"
	  nparams 1
	    param in name "amount" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adjusts the receiver, and all its children rows by
<code>amount</code>.
"
	end

	operation 11897602 "adjustRowBy"
	  protected explicit_return_type "void"
	  nparams 2
	    param in name "amount" explicit_type "int"
	    param in name "startIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adjusts this node, its child, and its parent starting at
an index of <code>index</code> index is the index of the child
to start adjusting from, which is not necessarily the model
index.
"
	end

	operation 11897730 "didExpand"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Messaged when the node has expanded. This updates all of
the receivers children rows, as well as the total row count.
"
	end

	operation 11897858 "setRowAndChildren"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "nextRow" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the receivers row to <code>nextRow</code> and recursively
updates all the children of the receivers rows. The index the
next row is to be placed as is returned.
"
	end

	operation 11897986 "resetChildrenRowsFrom"
	  protected explicit_return_type "void"
	  nparams 3
	    param in name "newRow" explicit_type "int"
	    param in name "childIndex" explicit_type "int"
	    param in name "modelIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resets the receivers children's rows. Starting with the child
at <code>childIndex</code> (and <code>modelIndex</code>) to
<code>newRow</code>. This uses <code>setRowAndChildren</code>
to recursively descend children, and uses
<code>resetRowSelection</code> to ascend parents.

 This can be rather expensive, but is needed for the collapse
 case this is resulting from a remove (although I could fix
 that by having instances of FHTreeStateNode hold a ref to
 the number of children). I prefer this though, making determing
 the row of a particular node fast is very nice!"
	end

	operation 11898114 "makeVisible"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Makes the receiver visible, but invoking
<code>expandParentAndReceiver</code> on the superclass.
"
	end

	operation 11898242 "expandParentAndReceiver"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes <code>expandParentAndReceiver</code> on the parent,
and expands the receiver.
"
	end

	operation 11898370 "expand"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expands the receiver.
"
	end

	operation 11898498 "collapse"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "adjustRows" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Collapses the receiver. If <code>adjustRows</code> is true,
the rows of nodes after the receiver are adjusted.
"
	end

	operation 11898626 "isLeaf"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the receiver is a leaf.
"
	end

	operation 11898754 "addNode"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "newChild" type class_ref 1401986 // FHTreeStateNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds newChild to this nodes children at the appropriate location.
The location is determined from the childIndex of newChild.
"
	end

	operation 11898882 "removeChildAtModelIndex"
	  protected explicit_return_type "void"
	  nparams 2
	    param in name "modelIndex" explicit_type "int"
	    param inout name "isChildVisible" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes the child at <code>modelIndex</code>.
<code>isChildVisible</code> should be true if the receiver
is visible and expanded.
"
	end

	operation 11899010 "adjustChildIndexs"
	  protected explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param in name "amount" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adjusts the child indexs of the receivers children by
<code>amount</code>, starting at <code>index</code>.
"
	end

	operation 11899138 "childInsertedAtModelIndex"
	  protected explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "isExpandedAndVisible" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Messaged when a child has been inserted at index. For all the
children that have a childIndex &ge; index their index is incremented
by one.
"
	end

	operation 11899266 "getPathForRow"
	  protected explicit_return_type "boolean"
	  nparams 3
	    param in name "row" explicit_type "int"
	    param in name "nextRow" explicit_type "int"
	    param inout name "info" type class_ref 1402114 // SearchInfo
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if there is a row for <code>row</code>.
<code>nextRow</code> gives the bounds of the receiver.
Information about the found row is returned in <code>info</code>.
This should be invoked on root with <code>nextRow</code> set
to <code>getRowCount</code>().
"
	end

	operation 11899394 "getCountTo"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "stopIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Asks all the children of the receiver for their totalChildCount
and returns this value (plus stopIndex).
"
	end

	operation 11899522 "getNumExpandedChildrenTo"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "stopIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of children that are expanded to
<code>stopIndex</code>. This does not include the number
of children that the child at <code>stopIndex</code> might
have.
"
	end

	operation 11899650 "didAdjustTree"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Messaged when this node either expands or collapses.
"
	end
      end

      classrelation 4740354 // root (<unidirectional association>)
	relation 4740354 --->
	  a role_name "root" private
	    comment " Root node. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4740354 // root (<unidirectional association>)
	  b parent class_ref 1401986 // FHTreeStateNode
      end

      attribute 2610562 "rowCount"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Number of rows currently visible. 
"
      end

      classrelation 4740482 // boundsBuffer (<unidirectional association>)
	relation 4740482 --->
	  a role_name "boundsBuffer" private
	    comment "
Used in getting sizes for nodes to avoid creating a new Rectangle
every time a size is needed.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4740482 // boundsBuffer (<unidirectional association>)
	  b parent class_ref 314114 // Rectangle
      end

      classrelation 4740610 // treePathMapping (<unidirectional association>)
	relation 4740610 --->
	  a role_name "treePathMapping" private
	    comment "
Maps from TreePath to a FHTreeStateNode.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TreePath, FHTreeStateNode> ${name}${value};
"
	    classrelation_ref 4740610 // treePathMapping (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      class 1402114 "SearchInfo"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4741250 // node (<unidirectional association>)
	  relation 4741250 --->
	    a role_name "node" protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4741250 // node (<unidirectional association>)
	    b parent class_ref 1401986 // FHTreeStateNode
	end

	attribute 2611202 "isNodeParentNode"
	  protected explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2611330 "childIndex"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 11899778 "getPath"
	  protected return_type class_ref 448770 // TreePath
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 4740738 // info (<unidirectional association>)
	relation 4740738 --->
	  a role_name "info" private
	    comment "
Used for getting path/row information.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4740738 // info (<unidirectional association>)
	  b parent class_ref 1402114 // SearchInfo
      end

      classrelation 4740866 // tempStacks (<unidirectional association>)
	relation 4740866 --->
	  a role_name "tempStacks" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Stack<TreePath>> ${name}${value};
"
	    classrelation_ref 4740866 // tempStacks (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      operation 11891458 "FixedHeightLayoutCache"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11891586 "setModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newModel" type class_ref 449410 // TreeModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the TreeModel that will provide the data.

@param newModel the TreeModel that is to provide the data
"
      end

      operation 11891714 "setRootVisible"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rootVisible" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the root node from
the TreeModel is visible.

@param rootVisible true if the root node of the tree is to be displayed
@see #rootVisible
"
      end

      operation 11891842 "setRowHeight"
	public explicit_return_type "void"
	nparams 1
	  param in name "rowHeight" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the height of each cell. If rowHeight is less than or equal to
0 this will throw an IllegalArgumentException.

@param rowHeight the height of each cell, in pixels
"
      end

      operation 11891970 "getRowCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of visible rows.
"
      end

      operation 11892098 "invalidatePathBounds"
	public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does nothing, FixedHeightLayoutCache doesn't cache width, and that
is all that could change.
"
      end

      operation 11892226 "invalidateSizes"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the TreeState that it needs to recalculate all the sizes
it is referencing.
"
      end

      operation 11892354 "isExpanded"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the value identified by row is currently expanded.
"
      end

      operation 11892482 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "placeIn" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a rectangle giving the bounds needed to draw path.

@param path     a TreePath specifying a node
@param placeIn  a Rectangle object giving the available space
@return a Rectangle object specifying the space to be used
"
      end

      operation 11892610 "getPathForRow"
	public return_type class_ref 448770 // TreePath
	nparams 1
	  param in name "row" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path for passed in row.  If row is not visible
null is returned.
"
      end

      operation 11892738 "getRowForPath"
	public explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the row that the last item identified in path is visible
at.  Will return -1 if any of the elements in path are not
currently visible.
"
      end

      operation 11892866 "getPathClosestTo"
	public return_type class_ref 448770 // TreePath
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path to the node that is closest to x,y.  If
there is nothing currently visible this will return null, otherwise
it'll always return a valid path.  If you need to test if the
returned object is exactly at x, y you should get the bounds for
the returned path and test x, y against that.
"
      end

      operation 11892994 "getVisibleChildCount"
	public explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of visible children for row.
"
      end

      operation 11893122 "getVisiblePathsFrom"
	public return_type class_ref 185986 // Enumeration
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TreePath> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an Enumerator that increments over the visible paths
starting at the passed in location. The ordering of the enumeration
is based on how the paths are displayed.
"
      end

      operation 11893250 "setExpandedState"
	public explicit_return_type "void"
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "isExpanded" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the path <code>path</code> expanded state to
<code>isExpanded</code>.
"
      end

      operation 11893378 "getExpandedState"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the path is expanded, and visible.
"
      end

      operation 11893506 "treeNodesChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TreeModelListener methods


<p>Invoked after a node (or a set of siblings) has changed in some
way. The node(s) have not changed locations in the tree or
altered their children arrays, but other attributes have
changed and may affect presentation. Example: the name of a
file has changed, but it is in the same location in the file
system.</p>

<p>e.path() returns the path the parent of the changed node(s).</p>

<p>e.childIndices() returns the index(es) of the changed node(s).</p>
"
      end

      operation 11893634 "treeNodesInserted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invoked after nodes have been inserted into the tree.</p>

<p>e.path() returns the parent of the new nodes
<p>e.childIndices() returns the indices of the new nodes in
ascending order.
"
      end

      operation 11893762 "treeNodesRemoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invoked after nodes have been removed from the tree.  Note that
if a subtree is removed from the tree, this method may only be
invoked once for the root of the removed subtree, not once for
each individual set of siblings removed.</p>

<p>e.path() returns the former parent of the deleted nodes.</p>

<p>e.childIndices() returns the indices the nodes had before they were deleted in ascending order.</p>
"
      end

      operation 11893890 "treeStructureChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Invoked after the tree has drastically changed structure from a
given node down.  If the path returned by e.getPath() is of length
one and the first element does not identify the current root node
the first element should become the new root of the tree.

<p>e.path() holds the path to the node.</p>
<p>e.childIndices() returns null.</p>
"
      end

      operation 11894018 "visibleNodesChanged"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Local methods
"
      end

      operation 11894146 "getBounds"
	private return_type class_ref 314114 // Rectangle
	nparams 3
	  param inout name "parent" type class_ref 1401986 // FHTreeStateNode
	  param in name "childIndex" explicit_type "int"
	  param inout name "placeIn" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the bounds for the given node. If <code>childIndex</code>
is -1, the bounds of <code>parent</code> are returned, otherwise
the bounds of the node at <code>childIndex</code> are returned.
"
      end

      operation 11894274 "adjustRowCountBy"
	private explicit_return_type "void"
	nparams 1
	  param in name "changeAmount" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adjust the large row count of the AbstractTreeUI the receiver was
created with.
"
      end

      operation 11894402 "addMapping"
	private explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1401986 // FHTreeStateNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a mapping for node.
"
      end

      operation 11894530 "removeMapping"
	private explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1401986 // FHTreeStateNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for a previously added node.
"
      end

      operation 11894658 "getMapping"
	private return_type class_ref 1401986 // FHTreeStateNode
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the node previously added for <code>path</code>. This may
return null, if you to create a node use getNodeForPath.
"
      end

      operation 11894786 "rebuild"
	private explicit_return_type "void"
	nparams 1
	  param inout name "clearSelection" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sent to completely rebuild the visible tree. All nodes are collapsed.
"
      end

      operation 11894914 "getRowContainingYLocation"
	private explicit_return_type "int"
	nparams 1
	  param in name "location" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the row containing location.  If there
are no rows, -1 is returned.  If location is beyond the last
row index, the last row index is returned.
"
      end

      operation 11895042 "ensurePathIsExpanded"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "aPath" type class_ref 448770 // TreePath
	  param inout name "expandLast" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that all the path components in path are expanded, accept
for the last component which will only be expanded if expandLast
is true.
Returns true if succesful in finding the path.
"
      end

      operation 11895170 "createNodeForValue"
	private return_type class_ref 1401986 // FHTreeStateNode
	nparams 2
	  param inout name "value" type class_ref 129538 // Object
	  param in name "childIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an instance of FHTreeStateNode.
"
      end

      operation 11895298 "getNodeForPath"
	private return_type class_ref 1401986 // FHTreeStateNode
	nparams 3
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "onlyIfVisible" explicit_type "boolean"
	  param inout name "shouldCreate" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Messages getTreeNodeForPage(path, onlyIfVisible, shouldCreate,
path.length) as long as path is non-null and the length is {@literal >} 0.
Otherwise returns null.
"
      end

      class 1402242 "VisibleFHTreeStateNodeEnumeration"
	visibility private 
	nactuals 1
	actual class class_ref 185986 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4741378 // <realization>
	  relation 4741378 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 4741378 // <realization>
	    b parent class_ref 185986 // Enumeration
	end

	classrelation 4741506 // parent (<unidirectional association>)
	  relation 4741506 --->
	    a role_name "parent" protected
	      comment " Parent thats children are being enumerated. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4741506 // parent (<unidirectional association>)
	    b parent class_ref 1401986 // FHTreeStateNode
	end

	attribute 2611458 "nextIndex"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Index of next child. An index of -1 signifies parent should be
visibled next. 
"
	end

	attribute 2611586 "childCount"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Number of children in parent. 
"
	end

	operation 11899906 "VisibleFHTreeStateNodeEnumeration"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "node" type class_ref 1401986 // FHTreeStateNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11900034 "VisibleFHTreeStateNodeEnumeration"
	  protected explicit_return_type ""
	  nparams 2
	    param inout name "parent" type class_ref 1401986 // FHTreeStateNode
	    param in name "startIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11900162 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return true if more visible nodes.
"
	end

	operation 11900290 "nextElement"
	  public return_type class_ref 448770 // TreePath
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return next visible TreePath.
"
	end

	operation 11900418 "updateNextObject"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Determines the next object by invoking <code>updateNextIndex</code>
and if not succesful <code>findNextValidParent</code>.
"
	end

	operation 11900546 "findNextValidParent"
	  protected explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finds the next valid parent, this should be called when nextIndex
is beyond the number of children of the current parent.
"
	end

	operation 11900674 "updateNextIndex"
	  protected explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Updates <code>nextIndex</code> returning false if it is beyond
the number of children of parent.
"
	end
      end
    end

    class 1402370 "VariableHeightLayoutCache"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "NOTE: This will become more open in a future release.
<p>
<strong>Warning:</strong>
Serialized objects of this class will not be compatible with
future Swing releases. The current serialization support is
appropriate for short term storage or RMI between applications running
the same version of Swing.  As of 1.4, support for long term storage
of all JavaBeans&trade;
has been added to the <code>java.beans</code> package.
Please see {@link java.beans.XMLEncoder}.

@author Rob Davis
@author Ray Ryan
@author Scott Violet
"
      classrelation 4742146 // <generalisation>
	relation 4742146 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4742146 // <generalisation>
	  b parent class_ref 449154 // AbstractLayoutCache
      end

      classrelation 4742274 // visibleNodes (<unidirectional association>)
	relation 4742274 --->
	  a role_name "visibleNodes" private
	    comment "
The array of nodes that are currently visible, in the order they
are displayed.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 4742274 // visibleNodes (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      attribute 2611714 "updateNodeSizes"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This is set to true if one of the entries has an invalid size.

"
      end

      class 1402498 "TreeStateNode"
	visibility private 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4742914 // <generalisation>
	  relation 4742914 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 4742914 // <generalisation>
	    b parent class_ref 1400450 // DefaultMutableTreeNode
	end

	attribute 2611842 "preferredWidth"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Preferred size needed to draw the user object. 
"
	end

	attribute 2611970 "preferredHeight"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2612098 "xOrigin"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " X location that the user object will be drawn at. 
"
	end

	attribute 2612226 "yOrigin"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Y location that the user object will be drawn at. 
"
	end

	attribute 2612354 "expanded"
	  protected explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Is this node currently expanded? 
"
	end

	attribute 2612482 "hasBeenExpanded"
	  protected explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Has this node been expanded at least once? 
"
	end

	classrelation 4743042 // path (<unidirectional association>)
	  relation 4743042 --->
	    a role_name "path" protected
	      comment " Path of this node. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4743042 // path (<unidirectional association>)
	    b parent class_ref 448770 // TreePath
	end

	operation 11907586 "TreeStateNode"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "value" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11907714 "setParent"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "parent" type class_ref 1400578 // MutableTreeNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Overriden DefaultMutableTreeNode methods


Messaged when this node is added somewhere, resets the path
and adds a mapping from path to this node.
"
	end

	operation 11907842 "remove"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "childIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Messaged when this node is removed from its parent, this messages
<code>removedFromMapping</code> to remove all the children.
"
	end

	operation 11907970 "setUserObject"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "o" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Messaged to set the user object. This resets the path.
"
	end

	operation 11908098 "children"
	  public return_type class_ref 185986 // Enumeration
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the children of the receiver.
If the receiver is not currently expanded, this will return an
empty enumeration.
"
	end

	operation 11908226 "isLeaf"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the receiver is a leaf.
"
	end

	operation 11908354 "getNodeBounds"
	  public return_type class_ref 314114 // Rectangle
	  nparams 1
	    param inout name "placeIn" type class_ref 314114 // Rectangle
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " VariableHeightLayoutCache


Returns the location and size of this node.
"
	end

	operation 11908482 "getXOrigin"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return x location to draw node at.
"
	end

	operation 11908610 "getYOrigin"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the y origin the user object will be drawn at.
"
	end

	operation 11908738 "getPreferredHeight"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the preferred height of the receiver.
"
	end

	operation 11908866 "getPreferredWidth"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the preferred width of the receiver.
"
	end

	operation 11908994 "hasValidSize"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node has a valid size.
"
	end

	operation 11909122 "getRow"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the row of the receiver.
"
	end

	operation 11909250 "hasBeenExpanded"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node has been expanded at least once.
"
	end

	operation 11909378 "isExpanded"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the receiver has been expanded.
"
	end

	operation 11909506 "getLastVisibleNode"
	  public return_type class_ref 1402498 // TreeStateNode
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the last visible node that is a child of this
instance.
"
	end

	operation 11909634 "isVisible"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the receiver is currently visible.
"
	end

	operation 11909762 "getModelChildCount"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of children this will have. If the children
have not yet been loaded, this messages the model.
"
	end

	operation 11909890 "getVisibleChildCount"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the number of visible children, that is the number of
children that are expanded, or leafs.
"
	end

	operation 11910018 "toggleExpanded"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Toggles the receiver between expanded and collapsed.
"
	end

	operation 11910146 "makeVisible"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Makes the receiver visible, but invoking
<code>expandParentAndReceiver</code> on the superclass.
"
	end

	operation 11910274 "expand"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expands the receiver.
"
	end

	operation 11910402 "collapse"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Collapses the receiver.
"
	end

	operation 11910530 "getValue"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the value the receiver is representing. This is a cover
for getUserObject.
"
	end

	operation 11910658 "getTreePath"
	  public return_type class_ref 448770 // TreePath
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a TreePath instance for this node.
"
	end

	operation 11910786 "resetChildrenPaths"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "parentPath" type class_ref 448770 // TreePath
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Local methods


Recreates the receivers path, and all its children's paths.
"
	end

	operation 11910914 "setYOrigin"
	  protected explicit_return_type "void"
	  nparams 1
	    param in name "newYOrigin" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets y origin the user object will be drawn at to
<I>newYOrigin</I>.
"
	end

	operation 11911042 "shiftYOriginBy"
	  protected explicit_return_type "void"
	  nparams 1
	    param in name "offset" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Shifts the y origin by <code>offset</code>.
"
	end

	operation 11911170 "updatePreferredSize"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Updates the receivers preferredSize by invoking
<code>updatePreferredSize</code> with an argument of -1.
"
	end

	operation 11911298 "updatePreferredSize"
	  protected explicit_return_type "void"
	  nparams 1
	    param in name "index" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Updates the preferred size by asking the current renderer
for the Dimension needed to draw the user object this
instance represents.
"
	end

	operation 11911426 "markSizeInvalid"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Marks the receivers size as invalid. Next time the size, location
is asked for it will be obtained.
"
	end

	operation 11911554 "deepMarkSizeInvalid"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Marks the receivers size, and all its descendants sizes, as invalid.
"
	end

	operation 11911682 "getLoadedChildren"
	  protected return_type class_ref 185986 // Enumeration
	  nparams 1
	    param inout name "createIfNeeded" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the children of the receiver. If the children haven't
been loaded from the model and
<code>createIfNeeded</code> is true, the children are first
loaded.
"
	end

	operation 11911810 "didAdjustTree"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Messaged from expand and collapse. This is meant for subclassers
that may wish to do something interesting with this.
"
	end

	operation 11911938 "expandParentAndReceiver"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes <code>expandParentAndReceiver</code> on the parent,
and expands the receiver.
"
	end

	operation 11912066 "expand"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "adjustTree" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Expands this node in the tree.  This will load the children
from the treeModel if this node has not previously been
expanded.  If <I>adjustTree</I> is true the tree and selection
are updated accordingly.
"
	end

	operation 11912194 "collapse"
	  protected explicit_return_type "void"
	  nparams 1
	    param inout name "adjustTree" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Collapses this node in the tree.  If <I>adjustTree</I> is
true the tree and selection are updated accordingly.
"
	end

	operation 11912322 "removeFromMapping"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Removes the receiver, and all its children, from the mapping
table.
"
	end
      end

      classrelation 4742402 // root (<unidirectional association>)
	relation 4742402 --->
	  a role_name "root" private
	    comment "
The root node of the internal cache of nodes that have been shown.
If the treeModel is vending a network rather than a true tree,
there may be one cached node for each path to a modeled node.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4742402 // root (<unidirectional association>)
	  b parent class_ref 1402498 // TreeStateNode
      end

      classrelation 4742530 // boundsBuffer (<unidirectional association>)
	relation 4742530 --->
	  a role_name "boundsBuffer" private
	    comment "
Used in getting sizes for nodes to avoid creating a new Rectangle
every time a size is needed.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4742530 // boundsBuffer (<unidirectional association>)
	  b parent class_ref 314114 // Rectangle
      end

      classrelation 4742658 // treePathMapping (<unidirectional association>)
	relation 4742658 --->
	  a role_name "treePathMapping" private
	    comment "
Maps from <code>TreePath</code> to a <code>TreeStateNode</code>.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TreePath, TreeStateNode> ${name}${value};
"
	    classrelation_ref 4742658 // treePathMapping (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      classrelation 4742786 // tempStacks (<unidirectional association>)
	relation 4742786 --->
	  a role_name "tempStacks" private
	    comment "
A stack of stacks.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Stack<TreePath>> ${name}${value};
"
	    classrelation_ref 4742786 // tempStacks (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      operation 11902722 "VariableHeightLayoutCache"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11902850 "setModel"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newModel" type class_ref 449410 // TreeModel
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>TreeModel</code> that will provide the data.

@param newModel the <code>TreeModel</code> that is to provide the data
@beaninfo
       bound: true
 description: The TreeModel that will provide the data.
"
      end

      operation 11902978 "setRootVisible"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rootVisible" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether or not the root node from
the <code>TreeModel</code> is visible.

@param rootVisible true if the root node of the tree is to be displayed
@see #rootVisible
@beaninfo
       bound: true
 description: Whether or not the root node
              from the TreeModel is visible.
"
      end

      operation 11903106 "setRowHeight"
	public explicit_return_type "void"
	nparams 1
	  param in name "rowHeight" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the height of each cell.  If the specified value
is less than or equal to zero the current cell renderer is
queried for each row's height.

@param rowHeight the height of each cell, in pixels
@beaninfo
       bound: true
 description: The height of each cell.
"
      end

      operation 11903234 "setNodeDimensions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "nd" type class_ref 449282 // NodeDimensions
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the renderer that is responsible for drawing nodes in the tree.
@param nd the renderer
"
      end

      operation 11903362 "setExpandedState"
	public explicit_return_type "void"
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "isExpanded" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks the path <code>path</code> expanded state to
<code>isExpanded</code>.
@param path the <code>TreePath</code> of interest
@param isExpanded true if the path should be expanded, otherwise false
"
      end

      operation 11903490 "getExpandedState"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the path is expanded, and visible.
@return true if the path is expanded and visible, otherwise false
"
      end

      operation 11903618 "getBounds"
	public return_type class_ref 314114 // Rectangle
	nparams 2
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "placeIn" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Rectangle</code> enclosing the label portion
into which the item identified by <code>path</code> will be drawn.

@param path  the path to be drawn
@param placeIn the bounds of the enclosing rectangle
@return the bounds of the enclosing rectangle or <code>null</code>
   if the node could not be ascertained
"
      end

      operation 11903746 "getPathForRow"
	public return_type class_ref 448770 // TreePath
	nparams 1
	  param in name "row" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path for <code>row</code>.  If <code>row</code>
is not visible, <code>null</code> is returned.

@param row the location of interest
@return the path for <code>row</code>, or <code>null</code>
if <code>row</code> is not visible
"
      end

      operation 11903874 "getRowForPath"
	public explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the row where the last item identified in path is visible.
Will return -1 if any of the elements in path are not
currently visible.

@param path the <code>TreePath</code> of interest
@return the row where the last item in path is visible
"
      end

      operation 11904002 "getRowCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of visible rows.
@return the number of visible rows
"
      end

      operation 11904130 "invalidatePathBounds"
	public explicit_return_type "void"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instructs the <code>LayoutCache</code> that the bounds for
<code>path</code> are invalid, and need to be updated.

@param path the <code>TreePath</code> which is now invalid
"
      end

      operation 11904258 "getPreferredHeight"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preferred height.
@return the preferred height
"
      end

      operation 11904386 "getPreferredWidth"
	public explicit_return_type "int"
	nparams 1
	  param inout name "bounds" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the preferred width and height for the region in
<code>visibleRegion</code>.

@param bounds  the region being queried
"
      end

      operation 11904514 "getPathClosestTo"
	public return_type class_ref 448770 // TreePath
	nparams 2
	  param in name "x" explicit_type "int"
	  param in name "y" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the path to the node that is closest to x,y.  If
there is nothing currently visible this will return <code>null</code>,
otherwise it will always return a valid path.
If you need to test if the
returned object is exactly at x, y you should get the bounds for
the returned path and test x, y against that.

@param x  the x-coordinate
@param y  the y-coordinate
@return the path to the node that is closest to x, y
"
      end

      operation 11904642 "getVisiblePathsFrom"
	public return_type class_ref 185986 // Enumeration
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TreePath> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Enumerator</code> that increments over the visible paths
starting at the passed in location. The ordering of the enumeration
is based on how the paths are displayed.

@param path the location in the <code>TreePath</code> to start
@return an <code>Enumerator</code> that increments over the visible
    paths
"
      end

      operation 11904770 "getVisibleChildCount"
	public explicit_return_type "int"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of visible children for <code>path</code>.
@return the number of visible children for <code>path</code>
"
      end

      operation 11904898 "invalidateSizes"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informs the <code>TreeState</code> that it needs to recalculate
all the sizes it is referencing.
"
      end

      operation 11905026 "isExpanded"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the value identified by <code>path</code> is
currently expanded.
@return true if the value identified by <code>path</code> is
   currently expanded
"
      end

      operation 11905154 "treeNodesChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TreeModelListener methods


Invoked after a node (or a set of siblings) has changed in some
way. The node(s) have not changed locations in the tree or
altered their children arrays, but other attributes have
changed and may affect presentation. Example: the name of a
file has changed, but it is in the same location in the file
system.

<p><code>e.path</code> returns the path the parent of the
changed node(s).

<p><code>e.childIndices</code> returns the index(es) of the
changed node(s).

@param e the <code>TreeModelEvent</code> of interest
"
      end

      operation 11905282 "treeNodesInserted"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked after nodes have been inserted into the tree.

<p><code>e.path</code> returns the parent of the new nodes.
<p><code>e.childIndices</code> returns the indices of the new nodes in
ascending order.

@param e the <code>TreeModelEvent</code> of interest
"
      end

      operation 11905410 "treeNodesRemoved"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked after nodes have been removed from the tree.  Note that
if a subtree is removed from the tree, this method may only be
invoked once for the root of the removed subtree, not once for
each individual set of siblings removed.

<p><code>e.path</code> returns the former parent of the deleted nodes.

<p><code>e.childIndices</code> returns the indices the nodes had
before they were deleted in ascending order.

@param e the <code>TreeModelEvent</code> of interest
"
      end

      operation 11905538 "treeStructureChanged"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" type class_ref 450946 // TreeModelEvent
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invoked after the tree has drastically changed structure from a
given node down.  If the path returned by <code>e.getPath</code>
is of length one and the first element does not identify the
current root node the first element should become the new root
of the tree.

<p><code>e.path</code> holds the path to the node.
<p><code>e.childIndices</code> returns <code>null</code>.

@param e the <code>TreeModelEvent</code> of interest
"
      end

      operation 11905666 "visibleNodesChanged"
	private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Local methods
"
      end

      operation 11905794 "addMapping"
	private explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1402498 // TreeStateNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a mapping for node.
"
      end

      operation 11905922 "removeMapping"
	private explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 1402498 // TreeStateNode
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for a previously added node.
"
      end

      operation 11906050 "getMapping"
	private return_type class_ref 1402498 // TreeStateNode
	nparams 1
	  param inout name "path" type class_ref 448770 // TreePath
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the node previously added for <code>path</code>. This may
return null, if you to create a node use getNodeForPath.
"
      end

      operation 11906178 "getBounds"
	private return_type class_ref 314114 // Rectangle
	nparams 2
	  param in name "row" explicit_type "int"
	  param inout name "placeIn" type class_ref 314114 // Rectangle
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retursn the bounds for row, <code>row</code> by reference in
<code>placeIn</code>. If <code>placeIn</code> is null a new
Rectangle will be created and returned.
"
      end

      operation 11906306 "rebuild"
	private explicit_return_type "void"
	nparams 1
	  param inout name "clearSelection" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completely rebuild the tree, all expanded state, and node caches are
removed. All nodes are collapsed, except the root.
"
      end

      operation 11906434 "createNodeAt"
	private return_type class_ref 1402498 // TreeStateNode
	nparams 2
	  param inout name "parent" type class_ref 1402498 // TreeStateNode
	  param in name "childIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new node to represent the node at <I>childIndex</I> in
<I>parent</I>s children.  This should be called if the node doesn't
already exist and <I>parent</I> has been expanded at least once.
The newly created node will be made visible if <I>parent</I> is
currently expanded.  This does not update the position of any
cells, nor update the selection if it needs to be.  If succesful
in creating the new TreeStateNode, it is returned, otherwise
null is returned.
"
      end

      operation 11906562 "getNodeForPath"
	private return_type class_ref 1402498 // TreeStateNode
	nparams 3
	  param inout name "path" type class_ref 448770 // TreePath
	  param inout name "onlyIfVisible" explicit_type "boolean"
	  param inout name "shouldCreate" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the TreeStateNode identified by path.  This mirrors
the behavior of getNodeForPath, but tries to take advantage of
path if it is an instance of AbstractTreePath.
"
      end

      operation 11906690 "updateYLocationsFrom"
	private explicit_return_type "void"
	nparams 1
	  param in name "location" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates the y locations of all of the visible nodes after
location.
"
      end

      operation 11906818 "updateNodeSizes"
	private explicit_return_type "void"
	nparams 1
	  param inout name "updateAll" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the y origin of all the visible nodes as well as messaging
all the visible nodes to updatePreferredSize().  You should not
normally have to call this.  Expanding and contracting the nodes
automaticly adjusts the locations.
updateAll determines if updatePreferredSize() is call on all nodes
or just those that don't have a valid size.
"
      end

      operation 11906946 "getRowContainingYLocation"
	private explicit_return_type "int"
	nparams 1
	  param in name "location" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the row containing location.  If there
are no rows, -1 is returned.  If location is beyond the last
row index, the last row index is returned.
"
      end

      operation 11907074 "ensurePathIsExpanded"
	private explicit_return_type "void"
	nparams 2
	  param inout name "aPath" type class_ref 448770 // TreePath
	  param inout name "expandLast" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that all the path components in path are expanded, accept
for the last component which will only be expanded if expandLast
is true.
Returns true if succesful in finding the path.
"
      end

      operation 11907202 "getNode"
	private return_type class_ref 1402498 // TreeStateNode
	nparams 1
	  param in name "row" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the AbstractTreeUI.VisibleNode displayed at the given row
"
      end

      operation 11907330 "getMaxNodeWidth"
	private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum node width.
"
      end

      operation 11907458 "createNodeForValue"
	private return_type class_ref 1402498 // TreeStateNode
	nparams 1
	  param inout name "value" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Responsible for creating a TreeStateNode that will be used
to track display information about value.
"
      end

      class 1402626 "VisibleTreeStateNodeEnumeration"
	visibility private 
	nactuals 1
	actual class class_ref 185986 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4743170 // <realization>
	  relation 4743170 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 4743170 // <realization>
	    b parent class_ref 185986 // Enumeration
	end

	classrelation 4743298 // parent (<unidirectional association>)
	  relation 4743298 --->
	    a role_name "parent" protected
	      comment " Parent thats children are being enumerated. 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4743298 // parent (<unidirectional association>)
	    b parent class_ref 1402498 // TreeStateNode
	end

	attribute 2612610 "nextIndex"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Index of next child. An index of -1 signifies parent should be
visibled next. 
"
	end

	attribute 2612738 "childCount"
	  protected explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Number of children in parent. 
"
	end

	operation 11912450 "VisibleTreeStateNodeEnumeration"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "node" type class_ref 1402498 // TreeStateNode
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11912578 "VisibleTreeStateNodeEnumeration"
	  protected explicit_return_type ""
	  nparams 2
	    param inout name "parent" type class_ref 1402498 // TreeStateNode
	    param in name "startIndex" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11912706 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return true if more visible nodes.
"
	end

	operation 11912834 "nextElement"
	  public return_type class_ref 448770 // TreePath
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "@return next visible TreePath.
"
	end

	operation 11912962 "updateNextObject"
	  protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Determines the next object by invoking <code>updateNextIndex</code>
and if not succesful <code>findNextValidParent</code>.
"
	end

	operation 11913090 "findNextValidParent"
	  protected explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Finds the next valid parent, this should be called when nextIndex
is beyond the number of children of the current parent.
"
	end

	operation 11913218 "updateNextIndex"
	  protected explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Updates <code>nextIndex</code> returning false if it is beyond
the number of children of parent.
"
	end
      end
    end
  end

  deploymentview 144002 "tree"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 291970 "TreeNode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Enumeration;
${definition}"
      associated_elems
	class_ref 410242 // TreeNode
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 304898 "TreeCellRenderer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Component;
import javax.swing.JTree;
${definition}"
      associated_elems
	class_ref 448002 // TreeCellRenderer
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 305026 "DefaultTreeCellRenderer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Rectangle;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.FontUIResource;
import javax.swing.plaf.UIResource;
import javax.swing.plaf.basic.BasicGraphicsUtils;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.border.EmptyBorder;
import sun.swing.DefaultLookup;
${definition}"
      associated_elems
	class_ref 447874 // DefaultTreeCellRenderer
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 305922 "RowMapper"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.tree.TreePath;
${definition}"
      associated_elems
	class_ref 451842 // RowMapper
      end
      comment "Copyright (c) 1997, 1998, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 306050 "AbstractLayoutCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.event.TreeModelEvent;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.Enumeration;
${definition}"
      associated_elems
	class_ref 449154 // AbstractLayoutCache
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 926210 "TreeCellEditor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.awt.Component;
import javax.swing.CellEditor;
import javax.swing.JTree;
${definition}"
      associated_elems
	class_ref 449026 // TreeCellEditor
      end
      comment "Copyright (c) 1997, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 979202 "DefaultTreeCellEditor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.plaf.FontUIResource;
import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.io.*;
import java.util.EventObject;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 1374338 // DefaultTreeCellEditor
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 991746 "MutableTreeNode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1400578 // MutableTreeNode
      end
      comment "Copyright (c) 1997, 1999, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 991874 "DefaultMutableTreeNode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.beans.Transient;
import java.io.*;
import java.util.*;
${definition}"
      associated_elems
	class_ref 1400450 // DefaultMutableTreeNode
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 992002 "TreeModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.event.*;
${definition}"
      associated_elems
	class_ref 449410 // TreeModel
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 992130 "DefaultTreeModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.beans.ConstructorProperties;
import java.io.*;
import javax.swing.event.*;
${definition}"
      associated_elems
	class_ref 1401474 // DefaultTreeModel
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 992258 "TreeSelectionModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.event.*;
import java.beans.PropertyChangeListener;
${definition}"
      associated_elems
	class_ref 449538 // TreeSelectionModel
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 992386 "DefaultTreeSelectionModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.beans.PropertyChangeListener;
import java.io.*;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Enumeration;
import java.util.EventListener;
import java.util.Hashtable;
import java.util.List;
import java.util.Vector;
import javax.swing.event.*;
import javax.swing.DefaultListSelectionModel;
${definition}"
      associated_elems
	class_ref 1401602 // DefaultTreeSelectionModel
	class_ref 1401730 // PathPlaceHolder
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 992514 "ExpandVetoException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.event.TreeExpansionEvent;
${definition}"
      associated_elems
	class_ref 1306114 // ExpandVetoException
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 992642 "FixedHeightLayoutCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.event.TreeModelEvent;
import java.awt.Rectangle;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.NoSuchElementException;
import java.util.Stack;
import sun.swing.SwingUtilities2;
${definition}"
      associated_elems
	class_ref 1401858 // FixedHeightLayoutCache
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 992770 "TreePath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.beans.ConstructorProperties;
${definition}"
      associated_elems
	class_ref 448770 // TreePath
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 992898 "VariableHeightLayoutCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.swing.event.TreeModelEvent;
import java.awt.Rectangle;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.NoSuchElementException;
import java.util.Stack;
import java.util.Vector;
import sun.swing.SwingUtilities2;
${definition}"
      associated_elems
	class_ref 1402370 // VariableHeightLayoutCache
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
