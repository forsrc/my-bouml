class FilterExprIteratorSimple
!!!5825794.java!!!	FilterExprIteratorSimple()
    super(null);
!!!5825922.java!!!	FilterExprIteratorSimple(inout expr : Expression)
    super(null);
    m_expr = expr;
!!!5826050.java!!!	setRoot(in context : int, inout environment : Object) : void
        super.setRoot(context, environment);
        m_exprObj = executeFilterExpr(context, m_execContext, getPrefixResolver(),
                          getIsTopLevel(), m_stackFrame, m_expr);
!!!5826178.java!!!	executeFilterExpr(in context : int, inout xctxt : XPathContext, inout prefixResolver : PrefixResolver, inout isTopLevel : boolean, in stackFrame : int, inout expr : Expression) : XNodeSet
    PrefixResolver savedResolver = xctxt.getNamespaceContext();
    XNodeSet result = null;

    try
    {
      xctxt.pushCurrentNode(context);
      xctxt.setNamespaceContext(prefixResolver);

      // The setRoot operation can take place with a reset operation,
      // and so we may not be in the context of LocPathIterator#nextNode,
      // so we have to set up the variable context, execute the expression,
      // and then restore the variable context.

      if (isTopLevel)
      {
        // System.out.println("calling m_expr.execute(getXPathContext())");
        VariableStack vars = xctxt.getVarStack();

        // These three statements need to be combined into one operation.
        int savedStart = vars.getStackFrame();
        vars.setStackFrame(stackFrame);

        result = (com.sun.org.apache.xpath.internal.objects.XNodeSet) expr.execute(xctxt);
        result.setShouldCacheNodes(true);

        // These two statements need to be combined into one operation.
        vars.setStackFrame(savedStart);
      }
      else
          result = (com.sun.org.apache.xpath.internal.objects.XNodeSet) expr.execute(xctxt);

    }
    catch (javax.xml.transform.TransformerException se)
    {

      // TODO: Fix...
      throw new com.sun.org.apache.xml.internal.utils.WrappedRuntimeException(se);
    }
    finally
    {
      xctxt.popCurrentNode();
      xctxt.setNamespaceContext(savedResolver);
    }
    return result;
!!!5826306.java!!!	nextNode() : int
        if(m_foundLast)
                return DTM.NULL;

    int next;

    if (null != m_exprObj)
    {
      m_lastFetched = next = m_exprObj.nextNode();
    }
    else
      m_lastFetched = next = DTM.NULL;

    // m_lastFetched = next;
    if (DTM.NULL != next)
    {
      m_pos++;
      return next;
    }
    else
    {
      m_foundLast = true;

      return DTM.NULL;
    }
!!!5826434.java!!!	detach() : void
    if(m_allowDetach)
    {
                super.detach();
                m_exprObj.detach();
                m_exprObj = null;
    }
!!!5826562.java!!!	fixupVariables(inout vars : Vector, in globalsSize : int) : void
    super.fixupVariables(vars, globalsSize);
    m_expr.fixupVariables(vars, globalsSize);
!!!5826690.java!!!	getInnerExpression() : Expression
    return m_expr;
!!!5826818.java!!!	setInnerExpression(inout expr : Expression) : void
    expr.exprSetParent(this);
    m_expr = expr;
!!!5826946.java!!!	getAnalysisBits() : int
    if (null != m_expr && m_expr instanceof PathComponent)
    {
      return ((PathComponent) m_expr).getAnalysisBits();
    }
    return WalkerFactory.BIT_FILTER;
!!!5827074.java!!!	isDocOrdered() : boolean
    return m_exprObj.isDocOrdered();
!!!5827458.java!!!	callPredicateVisitors(inout visitor : XPathVisitor) : void
    m_expr.callVisitors(new filterExprOwner(), visitor);

    super.callPredicateVisitors(visitor);
!!!5827586.java!!!	deepEquals(inout expr : Expression) : boolean
    if (!super.deepEquals(expr))
      return false;

    FilterExprIteratorSimple fet = (FilterExprIteratorSimple) expr;
    if (!m_expr.deepEquals(fet.m_expr))
      return false;

    return true;
!!!5827714.java!!!	getAxis() : int
        if(null != m_exprObj)
        return m_exprObj.getAxis();
    else
        return Axis.FILTEREDLIST;
