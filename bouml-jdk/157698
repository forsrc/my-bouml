format 222
"remote" // jdk1.8::javax::management::remote
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/management/remote/"
  java_package "javax.management.remote"
  classview 152706 "remote"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 500866 "NotificationResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Result of a query for buffered notifications.  Notifications in
a notification buffer have positive, monotonically increasing
sequence numbers.  The result of a notification query contains the
following elements:</p>

<ul>

<li>The sequence number of the earliest notification still in
the buffer.

<li>The sequence number of the next notification available for
querying.  This will be the starting sequence number for the next
notification query.

<li>An array of (Notification,listenerID) pairs corresponding to
the returned notifications and the listeners they correspond to.

</ul>

<p>It is possible for the <code>nextSequenceNumber</code> to be less
than the <code>earliestSequenceNumber</code>.  This signifies that
notifications between the two might have been lost.</p>

@since 1.5
"
      classrelation 3860482 // <realization>
	relation 3860482 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3860482 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2300290 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1191800228721395279L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9951106 "NotificationResult"
	public explicit_return_type ""
	nparams 3
	  param in name "earliestSequenceNumber" explicit_type "long"
	  param in name "nextSequenceNumber" explicit_type "long"
	  param inout name "targetedNotifications" type class_ref 503682 // TargetedNotification
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a notification query result.</p>

@param earliestSequenceNumber the sequence number of the
earliest notification still in the buffer.
@param nextSequenceNumber the sequence number of the next
notification available for querying.
@param targetedNotifications the notifications resulting from
the query, and the listeners they correspond to.  This array
can be empty.

@exception IllegalArgumentException if
<code>targetedNotifications</code> is null or if
<code>earliestSequenceNumber</code> or
<code>nextSequenceNumber</code> is negative.
"
      end

      operation 9951234 "getEarliestSequenceNumber"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sequence number of the earliest notification still
in the buffer.

@return the sequence number of the earliest notification still
in the buffer.
"
      end

      operation 9951362 "getNextSequenceNumber"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sequence number of the next notification available
for querying.

@return the sequence number of the next notification available
for querying.
"
      end

      operation 9951490 "getTargetedNotifications"
	public return_type class_ref 503682 // TargetedNotification
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the notifications resulting from the query, and the
listeners they correspond to.

@return the notifications resulting from the query, and the
listeners they correspond to.  This array can be empty.
"
      end

      operation 9951618 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of the object.  The result
should be a concise but informative representation that is easy
for a person to read.

@return a string representation of the object.
"
      end

      operation 9951746 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2300418 "earliestSequenceNumber"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2300546 "nextSequenceNumber"
	private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3860610 // targetedNotifications (<unidirectional association>)
	relation 3860610 --->
	  a role_name "targetedNotifications" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3860610 // targetedNotifications (<unidirectional association>)
	  b parent class_ref 503682 // TargetedNotification
      end

      operation 9951874 "validate"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "targetedNotifications" type class_ref 503682 // TargetedNotification
	multiplicity "[]"
	  param in name "earliestSequenceNumber" explicit_type "long"
	  param in name "nextSequenceNumber" explicit_type "long"
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 503682 "TargetedNotification"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A (Notification, Listener ID) pair.</p>
<p>This class is used to associate an emitted notification
   with the listener ID to which it is targeted.</p>

@since 1.5
"
      classrelation 3860866 // <realization>
	relation 3860866 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3860866 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2300802 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7676132089779300926L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9952258 "TargetedNotification"
	public explicit_return_type ""
	nparams 2
	  param inout name "notification" type class_ref 488706 // Notification
	  param inout name "listenerID" type class_ref 137602 // Integer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " If we replace Integer with int...
     /**
      * <p>Constructs a <code>TargetedNotification</code> object.  The
      * object contains a pair (Notification, Listener ID).
      * The Listener ID identifies the client listener to which that
      * notification is targeted. The client listener ID is one
      * previously returned by the connector server in response to an
      * <code>addNotificationListener</code> request.</p>
      * @param notification Notification emitted from the MBean server.
      * @param listenerID   The ID of the listener to which this
      *        notification is targeted.
      */
     public TargetedNotification(Notification notification,
                              int listenerID) {
      this.notif = notification;
      this.id = listenerID;
     }

<p>Constructs a <code>TargetedNotification</code> object.  The
object contains a pair (Notification, Listener ID).
The Listener ID identifies the client listener to which that
notification is targeted. The client listener ID is one
previously returned by the connector server in response to an
<code>addNotificationListener</code> request.</p>
@param notification Notification emitted from the MBean server.
@param listenerID   The ID of the listener to which this
       notification is targeted.
@exception IllegalArgumentException if the <var>listenerID</var>
       or <var>notification</var> is null.
"
      end

      operation 9952386 "getNotification"
	public return_type class_ref 488706 // Notification
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The emitted notification.</p>

@return The notification.
"
      end

      operation 9952514 "getListenerID"
	public return_type class_ref 137602 // Integer
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The ID of the listener to which the notification is
   targeted.</p>

@return The listener ID.
"
      end

      operation 9952642 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a textual representation of this Targeted Notification.

@return a String representation of this Targeted Notification.
"
      end

      classrelation 3860994 // notif (<unidirectional association>)
	relation 3860994 --->
	  a role_name "notif" private
	    comment "
@serial A notification to transmit to the other side.
@see #getNotification()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3860994 // notif (<unidirectional association>)
	  b parent class_ref 488706 // Notification
      end

      classrelation 3861122 // id (<unidirectional association>)
	relation 3861122 --->
	  a role_name "id" private
	    comment "
@serial The ID of the listener to which the notification is
        targeted.
@see #getListenerID()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3861122 // id (<unidirectional association>)
	  b parent class_ref 137602 // Integer
      end

      operation 9952770 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "private final int id;
 Needed if we use int instead of Integer...
     private static int intValue(Integer id) {
      if (id == null) throw new
          IllegalArgumentException(\"Invalid listener ID: null\");
      return id.intValue();
     }"
      end

      operation 9952898 "validate"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "notif" type class_ref 488706 // Notification
	  param inout name "id" type class_ref 137602 // Integer
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 506242 "JMXConnectorProvider"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A provider for creating JMX API connector clients using a given
protocol.  Instances of this interface are created by {@link
JMXConnectorFactory} as part of its {@link
JMXConnectorFactory#newJMXConnector(JMXServiceURL, Map)
newJMXConnector} method.</p>

@since 1.5
"
      operation 3023362 "newJMXConnector"
	public return_type class_ref 506370 // JMXConnector
	nparams 2
	  param inout name "serviceURL" type class_ref 506498 // JMXServiceURL
	  param inout name "environment" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a new connector client that is ready to connect
to the connector server at the given address.  Each successful
call to this method produces a different
<code>JMXConnector</code> object.</p>

@param serviceURL the address of the connector server to connect to.

@param environment a read-only Map containing named attributes
to determine how the connection is made.  Keys in this map must
be Strings.  The appropriate type of each associated value
depends on the attribute.

@return a <code>JMXConnector</code> representing the new
connector client.  Each successful call to this method produces
a different object.

@exception NullPointerException if <code>serviceURL</code> or
<code>environment</code> is null.

@exception IOException It is recommended for a provider
implementation to throw {@code MalformedURLException} if the
protocol in the {@code serviceURL} is not recognized by this
provider, {@code JMXProviderException} if this is a provider
for the protocol in {@code serviceURL} but it cannot be used
for some reason or any other {@code IOException} if the
connection cannot be made because of a communication problem.
"
      end
    end

    class 506370 "JMXConnector"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The client end of a JMX API connector.  An object of this type can
be used to establish a connection to a connector server.</p>

<p>A newly-created object of this type is unconnected.  Its {@link
#connect connect} method must be called before it can be used.
However, objects created by {@link
JMXConnectorFactory#connect(JMXServiceURL, Map)
JMXConnectorFactory.connect} are already connected.</p>

@since 1.5
"
      classrelation 3855234 // <generalisation>
	relation 3855234 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3855234 // <generalisation>
	  b parent class_ref 146562 // Closeable
      end

      classrelation 3855362 // CREDENTIALS (<unidirectional association>)
	relation 3855362 --->
	  a role_name "CREDENTIALS" init_value "
         \"jmx.remote.credentials\"" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the credentials to send
to the connector server during connection.  The value
associated with this attribute, if any, is a serializable
object of an appropriate type for the server's {@link
JMXAuthenticator}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3855362 // CREDENTIALS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9940738 "connect"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Establishes the connection to the connector server.  This
method is equivalent to {@link #connect(Map)
connect(null)}.</p>

@exception IOException if the connection could not be made
because of a communication problem.

@exception SecurityException if the connection could not be
made for security reasons.
"
      end

      operation 9940866 "connect"
	public explicit_return_type "void"
	nparams 1
	  param inout name "env" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Establishes the connection to the connector server.</p>

<p>If <code>connect</code> has already been called successfully
on this object, calling it again has no effect.  If, however,
{@link #close} was called after <code>connect</code>, the new
<code>connect</code> will throw an <code>IOException</code>.

<p>Otherwise, either <code>connect</code> has never been called
on this object, or it has been called but produced an
exception.  Then calling <code>connect</code> will attempt to
establish a connection to the connector server.</p>

@param env the properties of the connection.  Properties in
this map override properties in the map specified when the
<code>JMXConnector</code> was created, if any.  This parameter
can be null, which is equivalent to an empty map.

@exception IOException if the connection could not be made
because of a communication problem.

@exception SecurityException if the connection could not be
made for security reasons.
"
      end

      operation 9940994 "getMBeanServerConnection"
	public return_type class_ref 485250 // MBeanServerConnection
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns an <code>MBeanServerConnection</code> object
representing a remote MBean server.  For a given
<code>JMXConnector</code>, two successful calls to this method
will usually return the same <code>MBeanServerConnection</code>
object, though this is not required.</p>

<p>For each method in the returned
<code>MBeanServerConnection</code>, calling the method causes
the corresponding method to be called in the remote MBean
server.  The value returned by the MBean server method is the
value returned to the client.  If the MBean server method
produces an <code>Exception</code>, the same
<code>Exception</code> is seen by the client.  If the MBean
server method, or the attempt to call it, produces an
<code>Error</code>, the <code>Error</code> is wrapped in a
{@link JMXServerErrorException}, which is seen by the
client.</p>

<p>Calling this method is equivalent to calling
{@link #getMBeanServerConnection(Subject) getMBeanServerConnection(null)}
meaning that no delegation subject is specified and that all the
operations called on the <code>MBeanServerConnection</code> must
use the authenticated subject, if any.</p>

@return an object that implements the
<code>MBeanServerConnection</code> interface by forwarding its
methods to the remote MBean server.

@exception IOException if a valid
<code>MBeanServerConnection</code> cannot be created, for
instance because the connection to the remote MBean server has
not yet been established (with the {@link #connect(Map)
connect} method), or it has been closed, or it has broken.
"
      end

      operation 9941122 "getMBeanServerConnection"
	public return_type class_ref 485250 // MBeanServerConnection
	nparams 1
	  param inout name "delegationSubject" type class_ref 503042 // Subject
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns an <code>MBeanServerConnection</code> object representing
a remote MBean server on which operations are performed on behalf of
the supplied delegation subject. For a given <code>JMXConnector</code>
and <code>Subject</code>, two successful calls to this method will
usually return the same <code>MBeanServerConnection</code> object,
though this is not required.</p>

<p>For each method in the returned
<code>MBeanServerConnection</code>, calling the method causes
the corresponding method to be called in the remote MBean
server on behalf of the given delegation subject instead of the
authenticated subject. The value returned by the MBean server
method is the value returned to the client. If the MBean server
method produces an <code>Exception</code>, the same
<code>Exception</code> is seen by the client. If the MBean
server method, or the attempt to call it, produces an
<code>Error</code>, the <code>Error</code> is wrapped in a
{@link JMXServerErrorException}, which is seen by the
client.</p>

@param delegationSubject the <code>Subject</code> on behalf of
which requests will be performed.  Can be null, in which case
requests will be performed on behalf of the authenticated
Subject, if any.

@return an object that implements the <code>MBeanServerConnection</code>
interface by forwarding its methods to the remote MBean server on behalf
of a given delegation subject.

@exception IOException if a valid <code>MBeanServerConnection</code>
cannot be created, for instance because the connection to the remote
MBean server has not yet been established (with the {@link #connect(Map)
connect} method), or it has been closed, or it has broken.
"
      end

      operation 9941250 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Closes the client connection to its server.  Any ongoing or new
request using the MBeanServerConnection returned by {@link
#getMBeanServerConnection()} will get an
<code>IOException</code>.</p>

<p>If <code>close</code> has already been called successfully
on this object, calling it again has no effect.  If
<code>close</code> has never been called, or if it was called
but produced an exception, an attempt will be made to close the
connection.  This attempt can succeed, in which case
<code>close</code> will return normally, or it can generate an
exception.</p>

<p>Closing a connection is a potentially slow operation.  For
example, if the server has crashed, the close operation might
have to wait for a network protocol timeout.  Callers that do
not want to block in a close operation should do it in a
separate thread.</p>

@exception IOException if the connection cannot be closed
cleanly.  If this exception is thrown, it is not known whether
the server end of the connection has been cleanly closed.
"
      end

      operation 9941378 "addConnectionNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "listener" type class_ref 487042 // NotificationListener
	  param inout name "filter" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Adds a listener to be informed of changes in connection
status.  The listener will receive notifications of type {@link
JMXConnectionNotification}.  An implementation can send other
types of notifications too.</p>

<p>Any number of listeners can be added with this method.  The
same listener can be added more than once with the same or
different values for the filter and handback.  There is no
special treatment of a duplicate entry.  For example, if a
listener is registered twice with no filter, then its
<code>handleNotification</code> method will be called twice for
each notification.</p>

@param listener a listener to receive connection status
notifications.
@param filter a filter to select which notifications are to be
delivered to the listener, or null if all notifications are to
be delivered.
@param handback an object to be given to the listener along
with each notification.  Can be null.

@exception NullPointerException if <code>listener</code> is
null.

@see #removeConnectionNotificationListener
@see javax.management.NotificationBroadcaster#addNotificationListener
"
      end

      operation 9941506 "removeConnectionNotificationListener"
	public explicit_return_type "void"
	nparams 1
	  param inout name "listener" type class_ref 487042 // NotificationListener
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Removes a listener from the list to be informed of changes
in status.  The listener must previously have been added.  If
there is more than one matching listener, all are removed.</p>

@param listener a listener to receive connection status
notifications.

@exception NullPointerException if <code>listener</code> is
null.

@exception ListenerNotFoundException if the listener is not
registered with this <code>JMXConnector</code>.

@see #removeConnectionNotificationListener(NotificationListener,
NotificationFilter, Object)
@see #addConnectionNotificationListener
@see javax.management.NotificationEmitter#removeNotificationListener
"
      end

      operation 9941634 "removeConnectionNotificationListener"
	public explicit_return_type "void"
	nparams 3
	  param inout name "l" type class_ref 487042 // NotificationListener
	  param inout name "f" type class_ref 487170 // NotificationFilter
	  param inout name "handback" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 487298 // ListenerNotFoundException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Removes a listener from the list to be informed of changes
in status.  The listener must previously have been added with
the same three parameters.  If there is more than one matching
listener, only one is removed.</p>

@param l a listener to receive connection status notifications.
@param f a filter to select which notifications are to be
delivered to the listener.  Can be null.
@param handback an object to be given to the listener along
with each notification.  Can be null.

@exception ListenerNotFoundException if the listener is not
registered with this <code>JMXConnector</code>, or is not
registered with the given filter and handback.

@see #removeConnectionNotificationListener(NotificationListener)
@see #addConnectionNotificationListener
@see javax.management.NotificationEmitter#removeNotificationListener
"
      end

      operation 9941762 "getConnectionId"
	public return_type class_ref 128130 // String
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Gets this connection's ID from the connector server.  For a
given connector server, every connection will have a unique id
which does not change during the lifetime of the
connection.</p>

@return the unique ID of this connection.  This is the same as
the ID that the connector server includes in its {@link
JMXConnectionNotification}s.  The {@link
javax.management.remote package description} describes the
conventions for connection IDs.

@exception IOException if the connection ID cannot be obtained,
for instance because the connection is closed or broken.
"
      end
    end

    class 506498 "JMXServiceURL"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The address of a JMX API connector server.  Instances of this class
are immutable.</p>

<p>The address is an <em>Abstract Service URL</em> for SLP, as
defined in RFC 2609 and amended by RFC 3111.  It must look like
this:</p>

<blockquote>

<code>service:jmx:<em>protocol</em>:<em>sap</em></code>

</blockquote>

<p>Here, <code><em>protocol</em></code> is the transport
protocol to be used to connect to the connector server.  It is
a string of one or more ASCII characters, each of which is a
letter, a digit, or one of the characters <code>+</code> or
<code>-</code>.  The first character must be a letter.
Uppercase letters are converted into lowercase ones.</p>

<p><code><em>sap</em></code> is the address at which the connector
server is found.  This address uses a subset of the syntax defined
by RFC 2609 for IP-based protocols.  It is a subset because the
<code>user@host</code> syntax is not supported.</p>

<p>The other syntaxes defined by RFC 2609 are not currently
supported by this class.</p>

<p>The supported syntax is:</p>

<blockquote>

<code>//<em>[host[</em>:<em>port]][url-path]</em></code>

</blockquote>

<p>Square brackets <code>[]</code> indicate optional parts of
the address.  Not all protocols will recognize all optional
parts.</p>

<p>The <code><em>host</em></code> is a host name, an IPv4 numeric
host address, or an IPv6 numeric address enclosed in square
brackets.</p>

<p>The <code><em>port</em></code> is a decimal port number.  0
means a default or anonymous port, depending on the protocol.</p>

<p>The <code><em>host</em></code> and <code><em>port</em></code>
can be omitted.  The <code><em>port</em></code> cannot be supplied
without a <code><em>host</em></code>.</p>

<p>The <code><em>url-path</em></code>, if any, begins with a slash
(<code>/</code>) or a semicolon (<code>;</code>) and continues to
the end of the address.  It can contain attributes using the
semicolon syntax specified in RFC 2609.  Those attributes are not
parsed by this class and incorrect attribute syntax is not
detected.</p>

<p>Although it is legal according to RFC 2609 to have a
<code><em>url-path</em></code> that begins with a semicolon, not
all implementations of SLP allow it, so it is recommended to avoid
that syntax.</p>

<p>Case is not significant in the initial
<code>service:jmx:<em>protocol</em></code> string or in the host
part of the address.  Depending on the protocol, case can be
significant in the <code><em>url-path</em></code>.</p>

@see <a
href=\"http://www.ietf.org/rfc/rfc2609.txt\">RFC 2609,
\"Service Templates and <code>Service:</code> Schemes\"</a>
@see <a
href=\"http://www.ietf.org/rfc/rfc3111.txt\">RFC 3111,
\"Service Location Protocol Modifications for IPv6\"</a>

@since 1.5
"
      classrelation 3858818 // <realization>
	relation 3858818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3858818 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2300034 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8173364409860779292L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9948930 "JMXServiceURL"
	public explicit_return_type ""
	nparams 1
	  param inout name "serviceURL" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a <code>JMXServiceURL</code> by parsing a Service URL
string.</p>

@param serviceURL the URL string to be parsed.

@exception NullPointerException if <code>serviceURL</code> is
null.

@exception MalformedURLException if <code>serviceURL</code>
does not conform to the syntax for an Abstract Service URL or
if it is not a valid name for a JMX Remote API service.  A
<code>JMXServiceURL</code> must begin with the string
<code>\"service:jmx:\"</code> (case-insensitive).  It must not
contain any characters that are not printable ASCII characters.
"
      end

      operation 9949058 "JMXServiceURL"
	public explicit_return_type ""
	nparams 3
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a <code>JMXServiceURL</code> with the given protocol,
host, and port.  This constructor is equivalent to
{@link #JMXServiceURL(String, String, int, String)
JMXServiceURL(protocol, host, port, null)}.</p>

@param protocol the protocol part of the URL.  If null, defaults
to <code>jmxmp</code>.

@param host the host part of the URL.  If null, defaults to the
local host name, as determined by
<code>InetAddress.getLocalHost().getHostName()</code>.  If it
is a numeric IPv6 address, it can optionally be enclosed in
square brackets <code>[]</code>.

@param port the port part of the URL.

@exception MalformedURLException if one of the parts is
syntactically incorrect, or if <code>host</code> is null and it
is not possible to find the local host name, or if
<code>port</code> is negative.
"
      end

      operation 9949186 "JMXServiceURL"
	public explicit_return_type ""
	nparams 4
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "host" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	  param inout name "urlPath" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a <code>JMXServiceURL</code> with the given parts.

@param protocol the protocol part of the URL.  If null, defaults
to <code>jmxmp</code>.

@param host the host part of the URL.  If null, defaults to the
local host name, as determined by
<code>InetAddress.getLocalHost().getHostName()</code>.  If it
is a numeric IPv6 address, it can optionally be enclosed in
square brackets <code>[]</code>.

@param port the port part of the URL.

@param urlPath the URL path part of the URL.  If null, defaults to
the empty string.

@exception MalformedURLException if one of the parts is
syntactically incorrect, or if <code>host</code> is null and it
is not possible to find the local host name, or if
<code>port</code> is negative.
"
      end

      classrelation 3858946 // INVALID_INSTANCE_MSG (<unidirectional association>)
	relation 3858946 --->
	  a role_name "INVALID_INSTANCE_MSG" init_value "
            \"Trying to deserialize an invalid instance of JMXServiceURL\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3858946 // INVALID_INSTANCE_MSG (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9949314 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "inputStream" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9949442 "validate"
	private explicit_return_type "void"
	nparams 4
	  param inout name "proto" type class_ref 128130 // String
	  param inout name "h" type class_ref 128130 // String
	  param in name "p" explicit_type "int"
	  param inout name "url" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9949570 "validate"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9949698 "validateHost"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "h" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 253442 // MalformedURLException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3859074 // randomException (<unidirectional association>)
	relation 3859074 --->
	  a role_name "randomException" init_value " new Exception()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3859074 // randomException (<unidirectional association>)
	  b parent class_ref 132226 // Exception
      end

      operation 9949826 "getProtocol"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The protocol part of the Service URL.

@return the protocol part of the Service URL.  This is never null.
"
      end

      operation 9949954 "getHost"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The host part of the Service URL.  If the Service URL was
constructed with the constructor that takes a URL string
parameter, the result is the substring specifying the host in
that URL.  If the Service URL was constructed with a
constructor that takes a separate host parameter, the result is
the string that was specified.  If that string was null, the
result is
<code>InetAddress.getLocalHost().getHostName()</code>.</p>

<p>In either case, if the host was specified using the
<code>[...]</code> syntax for numeric IPv6 addresses, the
square brackets are not included in the return value here.</p>

@return the host part of the Service URL.  This is never null.
"
      end

      operation 9950082 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The port of the Service URL.  If no port was
specified, the returned value is 0.</p>

@return the port of the Service URL, or 0 if none.
"
      end

      operation 9950210 "getURLPath"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The URL Path part of the Service URL.  This is an empty
string, or a string beginning with a slash (<code>/</code>), or
a string beginning with a semicolon (<code>;</code>).

@return the URL Path part of the Service URL.  This is never
null.
"
      end

      operation 9950338 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The string representation of this Service URL.  If the value
returned by this method is supplied to the
<code>JMXServiceURL</code> constructor, the resultant object is
equal to this one.</p>

<p>The <code><em>host</em></code> part of the returned string
is the value returned by {@link #getHost()}.  If that value
specifies a numeric IPv6 address, it is surrounded by square
brackets <code>[]</code>.</p>

<p>The <code><em>port</em></code> part of the returned string
is the value returned by {@link #getPort()} in its shortest
decimal form.  If the value is zero, it is omitted.</p>

@return the string representation of this Service URL.
"
      end

      operation 9950466 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Indicates whether some other object is equal to this one.
This method returns true if and only if <code>obj</code> is an
instance of <code>JMXServiceURL</code> whose {@link
#getProtocol()}, {@link #getHost()}, {@link #getPort()}, and
{@link #getURLPath()} methods return the same values as for
this object.  The values for {@link #getProtocol()} and {@link
#getHost()} can differ in case without affecting equality.

@param obj the reference object with which to compare.

@return <code>true</code> if this object is the same as the
<code>obj</code> argument; <code>false</code> otherwise.
"
      end

      operation 9950594 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9950722 "isNumericIPv6Address"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " True if this string, assumed to be a valid argument to
InetAddress.getByName, is a numeric IPv6 address.
"
      end

      operation 9950850 "indexOf"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "s" type class_ref 128130 // String
	  param in name "c" explicit_type "char"
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " like String.indexOf but returns string length not -1 if not present"
      end

      operation 9950978 "indexOfFirstNotInSet"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "s" type class_ref 128130 // String
	  param inout name "set" type class_ref 238082 // BitSet
	  param in name "fromIndex" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3859202 // alphaBitSet (<unidirectional association>)
	relation 3859202 --->
	  a role_name "alphaBitSet" init_value " new BitSet(128)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3859202 // alphaBitSet (<unidirectional association>)
	  b parent class_ref 238082 // BitSet
      end

      classrelation 3859330 // numericBitSet (<unidirectional association>)
	relation 3859330 --->
	  a role_name "numericBitSet" init_value " new BitSet(128)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3859330 // numericBitSet (<unidirectional association>)
	  b parent class_ref 238082 // BitSet
      end

      classrelation 3859458 // alphaNumericBitSet (<unidirectional association>)
	relation 3859458 --->
	  a role_name "alphaNumericBitSet" init_value " new BitSet(128)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3859458 // alphaNumericBitSet (<unidirectional association>)
	  b parent class_ref 238082 // BitSet
      end

      classrelation 3859586 // protocolBitSet (<unidirectional association>)
	relation 3859586 --->
	  a role_name "protocolBitSet" init_value " new BitSet(128)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3859586 // protocolBitSet (<unidirectional association>)
	  b parent class_ref 238082 // BitSet
      end

      classrelation 3859714 // hostNameBitSet (<unidirectional association>)
	relation 3859714 --->
	  a role_name "hostNameBitSet" init_value " new BitSet(128)" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3859714 // hostNameBitSet (<unidirectional association>)
	  b parent class_ref 238082 // BitSet
      end

      extra_member 182786 "initialization"
	
	cpp "" ""
	java "  static {
        /* J2SE 1.4 adds lots of handy methods to BitSet that would
           allow us to simplify here, e.g. by not writing loops, but
           we want to work on J2SE 1.3 too.  */

        for (char c = '0'; c <= '9'; c++)
            numericBitSet.set(c);

        for (char c = 'A'; c <= 'Z'; c++)
            alphaBitSet.set(c);
        for (char c = 'a'; c <= 'z'; c++)
            alphaBitSet.set(c);

        alphaNumericBitSet.or(alphaBitSet);
        alphaNumericBitSet.or(numericBitSet);

        protocolBitSet.or(alphaNumericBitSet);
        protocolBitSet.set('+');
        protocolBitSet.set('-');

        hostNameBitSet.or(alphaNumericBitSet);
        hostNameBitSet.set('-');
        hostNameBitSet.set('.');
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3859842 // protocol (<unidirectional association>)
	relation 3859842 --->
	  a role_name "protocol" private
	    comment "
The value returned by {@link #getProtocol()}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3859842 // protocol (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3859970 // host (<unidirectional association>)
	relation 3859970 --->
	  a role_name "host" private
	    comment "
The value returned by {@link #getHost()}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3859970 // host (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2300162 "port"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The value returned by {@link #getPort()}.

"
      end

      classrelation 3860098 // urlPath (<unidirectional association>)
	relation 3860098 --->
	  a role_name "urlPath" private
	    comment "
The value returned by {@link #getURLPath()}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3860098 // urlPath (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3860226 // toString (<unidirectional association>)
	relation 3860226 --->
	  a role_name "toString" private
	    comment "
Cached result of {@link #toString()}.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3860226 // toString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3860354 // logger (<unidirectional association>)
	relation 3860354 --->
	  a role_name "logger" init_value "
        new ClassLogger(\"javax.management.remote.misc\", \"JMXServiceURL\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3860354 // logger (<unidirectional association>)
	  b parent class_ref 502402 // ClassLogger
      end
    end

    class 507010 "JMXConnectorServerProvider"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>A provider for creating JMX API connector servers using a given
protocol.  Instances of this interface are created by {@link
JMXConnectorServerFactory} as part of its {@link
JMXConnectorServerFactory#newJMXConnectorServer(JMXServiceURL,Map,MBeanServer)
newJMXConnectorServer} method.</p>

@since 1.5
"
      operation 3031170 "newJMXConnectorServer"
	public return_type class_ref 507138 // JMXConnectorServer
	nparams 3
	  param inout name "serviceURL" type class_ref 506498 // JMXServiceURL
	  param inout name "environment" type class_ref 130178 // Map
	  param inout name "mbeanServer" type class_ref 485122 // MBeanServer
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a new connector server at the given address.  Each
successful call to this method produces a different
<code>JMXConnectorServer</code> object.</p>

@param serviceURL the address of the new connector server.  The
actual address of the new connector server, as returned by its
{@link JMXConnectorServer#getAddress() getAddress} method, will
not necessarily be exactly the same.  For example, it might
include a port number if the original address did not.

@param environment a read-only Map containing named attributes
to control the new connector server's behavior.  Keys in this
map must be Strings.  The appropriate type of each associated
value depends on the attribute.

@param mbeanServer the MBean server that this connector server
is attached to.  Null if this connector server will be attached
to an MBean server by being registered in it.

@return a <code>JMXConnectorServer</code> representing the new
connector server.  Each successful call to this method produces
a different object.

@exception NullPointerException if <code>serviceURL</code> or
<code>environment</code> is null.

@exception IOException It is recommended for a provider
implementation to throw {@code MalformedURLException} if the
protocol in the {@code serviceURL} is not recognized by this
provider, {@code JMXProviderException} if this is a provider
for the protocol in {@code serviceURL} but it cannot be used
for some reason or any other {@code IOException} if the
connector server cannot be created.
"
      end
    end

    class 507138 "JMXConnectorServer"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Superclass of every connector server.  A connector server is
attached to an MBean server.  It listens for client connection
requests and creates a connection for each one.</p>

<p>A connector server is associated with an MBean server either by
registering it in that MBean server, or by passing the MBean server
to its constructor.</p>

<p>A connector server is inactive when created.  It only starts
listening for client connections when the {@link #start() start}
method is called.  A connector server stops listening for client
connections when the {@link #stop() stop} method is called or when
the connector server is unregistered from its MBean server.</p>

<p>Stopping a connector server does not unregister it from its
MBean server.  A connector server once stopped cannot be
restarted.</p>

<p>Each time a client connection is made or broken, a notification
of class {@link JMXConnectionNotification} is emitted.</p>

@since 1.5
"
      classrelation 3856130 // <generalisation>
	relation 3856130 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3856130 // <generalisation>
	  b parent class_ref 497922 // NotificationBroadcasterSupport
      end

      classrelation 3856258 // <realization>
	relation 3856258 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3856258 // <realization>
	  b parent class_ref 1203586 // JMXConnectorServerMBean
      end

      classrelation 3856386 // <realization>
	relation 3856386 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3856386 // <realization>
	  b parent class_ref 488578 // MBeanRegistration
      end

      classrelation 3856514 // <realization>
	relation 3856514 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3856514 // <realization>
	  b parent class_ref 1203074 // JMXAddressable
      end

      classrelation 3856642 // AUTHENTICATOR (<unidirectional association>)
	relation 3856642 --->
	  a role_name "AUTHENTICATOR" init_value "
        \"jmx.remote.authenticator\"" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the authenticator for a
connector server.  The value associated with this attribute, if
any, must be an object that implements the interface {@link
JMXAuthenticator}.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3856642 // AUTHENTICATOR (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9944706 "JMXConnectorServer"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a connector server that will be registered as an
MBean in the MBean server it is attached to.  This constructor
is typically called by one of the <code>createMBean</code>
methods when creating, within an MBean server, a connector
server that makes it available remotely.</p>
"
      end

      operation 9944834 "JMXConnectorServer"
	public explicit_return_type ""
	nparams 1
	  param inout name "mbeanServer" type class_ref 485122 // MBeanServer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a connector server that is attached to the given
MBean server.  A connector server that is created in this way
can be registered in a different MBean server, or not registered
in any MBean server.</p>

@param mbeanServer the MBean server that this connector server
is attached to.  Null if this connector server will be attached
to an MBean server by being registered in it.
"
      end

      operation 9944962 "getMBeanServer"
	public return_type class_ref 485122 // MBeanServer
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns the MBean server that this connector server is
attached to.</p>

@return the MBean server that this connector server is attached
to, or null if it is not yet attached to an MBean server.
"
      end

      operation 9945090 "setMBeanServerForwarder"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mbsf" type class_ref 510850 // MBeanServerForwarder
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9945218 "getConnectionIds"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9945346 "toJMXConnector"
	public return_type class_ref 506370 // JMXConnector
	nparams 1
	  param inout name "env" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a client stub for this connector server.  A client
stub is a serializable object whose {@link
JMXConnector#connect(Map) connect} method can be used to make
one new connection to this connector server.</p>

<p>A given connector need not support the generation of client
stubs.  However, the connectors specified by the JMX Remote API do
(JMXMP Connector and RMI Connector).</p>

<p>The default implementation of this method uses {@link
#getAddress} and {@link JMXConnectorFactory} to generate the
stub, with code equivalent to the following:</p>

<pre>
JMXServiceURL addr = {@link #getAddress() getAddress()};
return {@link JMXConnectorFactory#newJMXConnector(JMXServiceURL, Map)
         JMXConnectorFactory.newJMXConnector(addr, env)};
</pre>

<p>A connector server for which this is inappropriate must
override this method so that it either implements the
appropriate logic or throws {@link
UnsupportedOperationException}.</p>

@param env client connection parameters of the same sort that
could be provided to {@link JMXConnector#connect(Map)
JMXConnector.connect(Map)}.  Can be null, which is equivalent
to an empty map.

@return a client stub that can be used to make a new connection
to this connector server.

@exception UnsupportedOperationException if this connector
server does not support the generation of client stubs.

@exception IllegalStateException if the JMXConnectorServer is
not started (see {@link JMXConnectorServerMBean#isActive()}).

@exception IOException if a communications problem means that a
stub cannot be created.
"
      end

      operation 9945474 "getNotificationInfo"
	public return_type class_ref 497154 // MBeanNotificationInfo
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "<p>Returns an array indicating the notifications that this MBean
sends. The implementation in <code>JMXConnectorServer</code>
returns an array with one element, indicating that it can emit
notifications of class {@link JMXConnectionNotification} with
the types defined in that class.  A subclass that can emit other
notifications should return an array that contains this element
plus descriptions of the other notifications.</p>

@return the array of possible notifications.
"
      end

      operation 9945602 "connectionOpened"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "connectionId" type class_ref 128130 // String
	  param inout name "message" type class_ref 128130 // String
	  param inout name "userData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Called by a subclass when a new client connection is opened.
Adds <code>connectionId</code> to the list returned by {@link
#getConnectionIds()}, then emits a {@link
JMXConnectionNotification} with type {@link
JMXConnectionNotification#OPENED}.</p>

@param connectionId the ID of the new connection.  This must be
different from the ID of any connection previously opened by
this connector server.

@param message the message for the emitted {@link
JMXConnectionNotification}.  Can be null.  See {@link
Notification#getMessage()}.

@param userData the <code>userData</code> for the emitted
{@link JMXConnectionNotification}.  Can be null.  See {@link
Notification#getUserData()}.

@exception NullPointerException if <code>connectionId</code> is
null.
"
      end

      operation 9945730 "connectionClosed"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "connectionId" type class_ref 128130 // String
	  param inout name "message" type class_ref 128130 // String
	  param inout name "userData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Called by a subclass when a client connection is closed
normally.  Removes <code>connectionId</code> from the list returned
by {@link #getConnectionIds()}, then emits a {@link
JMXConnectionNotification} with type {@link
JMXConnectionNotification#CLOSED}.</p>

@param connectionId the ID of the closed connection.

@param message the message for the emitted {@link
JMXConnectionNotification}.  Can be null.  See {@link
Notification#getMessage()}.

@param userData the <code>userData</code> for the emitted
{@link JMXConnectionNotification}.  Can be null.  See {@link
Notification#getUserData()}.

@exception NullPointerException if <code>connectionId</code>
is null.
"
      end

      operation 9945858 "connectionFailed"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "connectionId" type class_ref 128130 // String
	  param inout name "message" type class_ref 128130 // String
	  param inout name "userData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Called by a subclass when a client connection fails.
Removes <code>connectionId</code> from the list returned by
{@link #getConnectionIds()}, then emits a {@link
JMXConnectionNotification} with type {@link
JMXConnectionNotification#FAILED}.</p>

@param connectionId the ID of the failed connection.

@param message the message for the emitted {@link
JMXConnectionNotification}.  Can be null.  See {@link
Notification#getMessage()}.

@param userData the <code>userData</code> for the emitted
{@link JMXConnectionNotification}.  Can be null.  See {@link
Notification#getUserData()}.

@exception NullPointerException if <code>connectionId</code> is
null.
"
      end

      operation 9945986 "sendNotification"
	private explicit_return_type "void"
	nparams 4
	  param inout name "type" type class_ref 128130 // String
	  param inout name "connectionId" type class_ref 128130 // String
	  param inout name "message" type class_ref 128130 // String
	  param inout name "userData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9946114 "getNotificationSource"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9946242 "nextSequenceNumber"
	class_operation private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9946370 "preRegister"
	public return_type class_ref 485506 // ObjectName
	nparams 2
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	  param inout name "name" type class_ref 485506 // ObjectName
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " implements MBeanRegistration

<p>Called by an MBean server when this connector server is
registered in that MBean server.  This connector server becomes
attached to the MBean server and its {@link #getMBeanServer()}
method will return <code>mbs</code>.</p>

<p>If this connector server is already attached to an MBean
server, this method has no effect.  The MBean server it is
attached to is not necessarily the one it is being registered
in.</p>

@param mbs the MBean server in which this connection server is
being registered.

@param name The object name of the MBean.

@return The name under which the MBean is to be registered.

@exception NullPointerException if <code>mbs</code> or
<code>name</code> is null.
"
      end

      operation 9946498 "postRegister"
	public explicit_return_type "void"
	nparams 1
	  param inout name "registrationDone" type class_ref 315010 // Boolean
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9946626 "preDeregister"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Called by an MBean server when this connector server is
unregistered from that MBean server.  If this connector server
was attached to that MBean server by being registered in it,
and if the connector server is still active,
then unregistering it will call the {@link #stop stop} method.
If the <code>stop</code> method throws an exception, the
unregistration attempt will fail.  It is recommended to call
the <code>stop</code> method explicitly before unregistering
the MBean.</p>

@exception IOException if thrown by the {@link #stop stop} method.
"
      end

      operation 9946754 "postDeregister"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3856770 // mbeanServer (<unidirectional association>)
	relation 3856770 --->
	  a role_name "mbeanServer" init_value " null" private
	    comment "
The MBeanServer used by this server to execute a client request.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3856770 // mbeanServer (<unidirectional association>)
	  b parent class_ref 485122 // MBeanServer
      end

      classrelation 3856898 // myName (<unidirectional association>)
	relation 3856898 --->
	  a role_name "myName" private
	    comment "
The name used to registered this server in an MBeanServer.
It is null if the this server is not registered or has been unregistered.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3856898 // myName (<unidirectional association>)
	  b parent class_ref 485506 // ObjectName
      end

      classrelation 3857026 // connectionIds (<unidirectional association>)
	relation 3857026 --->
	  a role_name "connectionIds" init_value " new ArrayList<String>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3857026 // connectionIds (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      attribute 2299394 "sequenceNumberLock"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " new int[0]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2299522 "sequenceNumber"
	class_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 508034 "JMXPrincipal"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>The identity of a remote client of the JMX Remote API.</p>

<p>Principals such as this <code>JMXPrincipal</code>
may be associated with a particular <code>Subject</code>
to augment that <code>Subject</code> with an additional
identity.  Refer to the {@link javax.security.auth.Subject}
class for more information on how to achieve this.
Authorization decisions can then be based upon
the Principals associated with a <code>Subject</code>.

@see java.security.Principal
@see javax.security.auth.Subject
@since 1.5
"
      classrelation 3857922 // <realization>
	relation 3857922 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3857922 // <realization>
	  b parent class_ref 510594 // Principal
      end

      classrelation 3858050 // <realization>
	relation 3858050 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3858050 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 2299650 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4184480100214577411L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3858178 // name (<unidirectional association>)
	relation 3858178 --->
	  a role_name "name" private
	    comment "
@serial The JMX Remote API name for the identity represented by
this <code>JMXPrincipal</code> object.
@see #getName()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3858178 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9947266 "JMXPrincipal"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a JMXPrincipal for a given identity.</p>

@param name the JMX Remote API name for this identity.

@exception NullPointerException if the <code>name</code> is
<code>null</code>.
"
      end

      operation 9947394 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this principal.

<p>

@return the name of this <code>JMXPrincipal</code>.
"
      end

      operation 9947522 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this <code>JMXPrincipal</code>.

<p>

@return a string representation of this <code>JMXPrincipal</code>.
"
      end

      operation 9947650 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified Object with this <code>JMXPrincipal</code>
for equality.  Returns true if the given object is also a
<code>JMXPrincipal</code> and the two JMXPrincipals
have the same name.

<p>

@param o Object to be compared for equality with this
<code>JMXPrincipal</code>.

@return true if the specified Object is equal to this
<code>JMXPrincipal</code>.
"
      end

      operation 9947778 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code for this <code>JMXPrincipal</code>.

<p>

@return a hash code for this <code>JMXPrincipal</code>.
"
      end

      operation 9947906 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9948034 "validate"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 521346 // NullPointerException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 508290 "JMXAuthenticator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Interface to define how remote credentials are converted into a
JAAS Subject.  This interface is used by the RMI Connector Server,
and can be used by other connector servers.</p>

<p>The user-defined authenticator instance is passed to the
connector server in the environment map as the value of the
attribute {@link JMXConnectorServer#AUTHENTICATOR}.  For connector
servers that use only this authentication system, if this attribute
is not present or its value is <code>null</code> then no user
authentication will be performed and full access to the methods
exported by the <code>MBeanServerConnection</code> object will be
allowed.</p>

<p>If authentication is successful then an authenticated
{@link Subject subject} filled in with its associated
{@link Principal principals} is returned. Authorization checks
will be then performed based on the given set of principals.</p>

@since 1.5
"
      operation 3033474 "authenticate"
	public return_type class_ref 503042 // Subject
	nparams 1
	  param inout name "credentials" type class_ref 129538 // Object
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Authenticates the <code>MBeanServerConnection</code> client
with the given client credentials.</p>

@param credentials the user-defined credentials to be passed
into the server in order to authenticate the user before
creating the <code>MBeanServerConnection</code>.  The actual
type of this parameter, and whether it can be null, depends on
the connector.

@return the authenticated subject containing its associated principals.

@exception SecurityException if the server cannot authenticate the user
with the provided credentials.
"
      end
    end

    class 510850 "MBeanServerForwarder"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>An object of this class implements the MBeanServer interface and
wraps another object that also implements that interface.
Typically, an implementation of this interface performs some action
in some or all methods of the <code>MBeanServer</code> interface
before and/or after forwarding the method to the wrapped object.
Examples include security checking and logging.</p>

@since 1.5
"
      classrelation 999298 // <generalisation>
	relation 999298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 999298 // <generalisation>
	  b parent class_ref 485122 // MBeanServer
      end

      operation 3039234 "getMBeanServer"
	public return_type class_ref 485122 // MBeanServer
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the MBeanServer object to which requests will be forwarded.

@return the MBeanServer object to which requests will be forwarded,
or null if there is none.

@see #setMBeanServer
"
      end

      operation 3039362 "setMBeanServer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the MBeanServer object to which requests will be forwarded
after treatment by this object.

@param mbs the MBeanServer object to which requests will be forwarded.

@exception IllegalArgumentException if this object is already
forwarding to an MBeanServer object or if <code>mbs</code> is
null or if <code>mbs</code> is identical to this object.

@see #getMBeanServer
"
      end
    end

    class 1203074 "JMXAddressable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Implemented by objects that can have a {@code JMXServiceURL} address.
All {@link JMXConnectorServer} objects implement this interface.
Depending on the connector implementation, a {@link JMXConnector}
object may implement this interface too.  {@code JMXConnector}
objects for the RMI Connector are instances of
{@link javax.management.remote.rmi.RMIConnector RMIConnector} which
implements this interface.</p>

<p>An object implementing this interface might not have an address
at a given moment.  This is indicated by a null return value from
{@link #getAddress()}.</p>

@since 1.6
"
      operation 9940226 "getAddress"
	public return_type class_ref 506498 // JMXServiceURL
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The address of this object.</p>

@return the address of this object, or null if it
does not have one.
"
      end
    end

    class 1203202 "JMXConnectionNotification"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Notification emitted when a client connection is opened or
closed or when notifications are lost.  These notifications are
sent by connector servers (instances of {@link JMXConnectorServer})
and by connector clients (instances of {@link JMXConnector}).  For
certain connectors, a session can consist of a sequence of
connections.  Connection-opened and connection-closed notifications
will be sent for each one.</p>

<p>The notification type is one of the following:</p>

<table summary=\"JMXConnectionNotification Types\">

<tr>
<th align=left>Type</th>
<th align=left>Meaning</th>
</tr>

<tr>
<td><code>jmx.remote.connection.opened</code></td>
<td>A new client connection has been opened.</td>
</tr>

<tr>
<td><code>jmx.remote.connection.closed</code></td>
<td>A client connection has been closed.</td>
</tr>

<tr>
<td><code>jmx.remote.connection.failed</code></td>
<td>A client connection has failed unexpectedly.</td>
</tr>

<tr>
<td><code>jmx.remote.connection.notifs.lost</code></td>
<td>A client connection has potentially lost notifications.  This
notification only appears on the client side.</td>
</tr>
</table>

<p>The <code>timeStamp</code> of the notification is a time value
(consistent with {@link System#currentTimeMillis()}) indicating
when the notification was constructed.</p>

@since 1.5
"
      classrelation 3854466 // <generalisation>
	relation 3854466 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3854466 // <generalisation>
	  b parent class_ref 488706 // Notification
      end

      attribute 2299266 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2331308725952627538L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3854594 // OPENED (<unidirectional association>)
	relation 3854594 --->
	  a role_name "OPENED" init_value " \"jmx.remote.connection.opened\"" class_relation const_relation public
	    comment "
<p>Notification type string for a connection-opened notification.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3854594 // OPENED (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3854722 // CLOSED (<unidirectional association>)
	relation 3854722 --->
	  a role_name "CLOSED" init_value " \"jmx.remote.connection.closed\"" class_relation const_relation public
	    comment "
<p>Notification type string for a connection-closed notification.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3854722 // CLOSED (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3854850 // FAILED (<unidirectional association>)
	relation 3854850 --->
	  a role_name "FAILED" init_value " \"jmx.remote.connection.failed\"" class_relation const_relation public
	    comment "
<p>Notification type string for a connection-failed notification.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3854850 // FAILED (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3854978 // NOTIFS_LOST (<unidirectional association>)
	relation 3854978 --->
	  a role_name "NOTIFS_LOST" init_value "
        \"jmx.remote.connection.notifs.lost\"" class_relation const_relation public
	    comment "
<p>Notification type string for a connection that has possibly
lost notifications.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3854978 // NOTIFS_LOST (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 9940354 "JMXConnectionNotification"
	public explicit_return_type ""
	nparams 6
	  param inout name "type" type class_ref 128130 // String
	  param inout name "source" type class_ref 129538 // Object
	  param inout name "connectionId" type class_ref 128130 // String
	  param in name "sequenceNumber" explicit_type "long"
	  param inout name "message" type class_ref 128130 // String
	  param inout name "userData" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new connection notification.  The {@link
#getSource() source} of the notification depends on whether it
is being sent by a connector server or a connector client:

<ul>

<li>For a connector server, if it is registered in an MBean
server, the source is the {@link ObjectName} under which it is
registered.  Otherwise, it is a reference to the connector
server object itself, an instance of a subclass of {@link
JMXConnectorServer}.

<li>For a connector client, the source is a reference to the
connector client object, an instance of a class implementing
{@link JMXConnector}.

</ul>

@param type the type of the notification.  This is usually one
of the constants {@link #OPENED}, {@link #CLOSED}, {@link
#FAILED}, {@link #NOTIFS_LOST}.  It is not an error for it to
be a different string.

@param source the connector server or client emitting the
notification.

@param connectionId the ID of the connection within its
connector server.

@param sequenceNumber a non-negative integer.  It is expected
but not required that this number will be greater than any
previous <code>sequenceNumber</code> in a notification from
this source.

@param message an unspecified text message, typically containing
a human-readable description of the event.  Can be null.

@param userData an object whose type and meaning is defined by
the connector server.  Can be null.

@exception NullPointerException if <code>type</code>,
<code>source</code>, or <code>connectionId</code> is null.

@exception IllegalArgumentException if
<code>sequenceNumber</code> is negative.
"
      end

      operation 9940482 "nonNull"
	class_operation private return_type class_ref 129538 // Object
	nparams 1
	  param inout name "arg" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9940610 "getConnectionId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The connection ID to which this notification pertains.

@return the connection ID.
"
      end

      classrelation 3855106 // connectionId (<unidirectional association>)
	relation 3855106 --->
	  a role_name "connectionId" const_relation private
	    comment "
@serial The connection ID to which this notification pertains.
@see #getConnectionId()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3855106 // connectionId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end
    end

    class 1203330 "JMXConnectorFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Factory to create JMX API connector clients.  There
are no instances of this class.</p>

<p>Connections are usually made using the {@link
#connect(JMXServiceURL) connect} method of this class.  More
advanced applications can separate the creation of the connector
client, using {@link #newJMXConnector(JMXServiceURL, Map)
newJMXConnector} and the establishment of the connection itself, using
{@link JMXConnector#connect(Map)}.</p>

<p>Each client is created by an instance of {@link
JMXConnectorProvider}.  This instance is found as follows.  Suppose
the given {@link JMXServiceURL} looks like
<code>\"service:jmx:<em>protocol</em>:<em>remainder</em>\"</code>.
Then the factory will attempt to find the appropriate {@link
JMXConnectorProvider} for <code><em>protocol</em></code>.  Each
occurrence of the character <code>+</code> or <code>-</code> in
<code><em>protocol</em></code> is replaced by <code>.</code> or
<code>_</code>, respectively.</p>

<p>A <em>provider package list</em> is searched for as follows:</p>

<ol>

<li>If the <code>environment</code> parameter to {@link
#newJMXConnector(JMXServiceURL, Map) newJMXConnector} contains the
key <code>jmx.remote.protocol.provider.pkgs</code> then the
associated value is the provider package list.

<li>Otherwise, if the system property
<code>jmx.remote.protocol.provider.pkgs</code> exists, then its value
is the provider package list.

<li>Otherwise, there is no provider package list.

</ol>

<p>The provider package list is a string that is interpreted as a
list of non-empty Java package names separated by vertical bars
(<code>|</code>).  If the string is empty, then so is the provider
package list.  If the provider package list is not a String, or if
it contains an element that is an empty string, a {@link
JMXProviderException} is thrown.</p>

<p>If the provider package list exists and is not empty, then for
each element <code><em>pkg</em></code> of the list, the factory
will attempt to load the class

<blockquote>
<code><em>pkg</em>.<em>protocol</em>.ClientProvider</code>
</blockquote>

<p>If the <code>environment</code> parameter to {@link
#newJMXConnector(JMXServiceURL, Map) newJMXConnector} contains the
key <code>jmx.remote.protocol.provider.class.loader</code> then the
associated value is the class loader to use to load the provider.
If the associated value is not an instance of {@link
java.lang.ClassLoader}, an {@link
java.lang.IllegalArgumentException} is thrown.</p>

<p>If the <code>jmx.remote.protocol.provider.class.loader</code>
key is not present in the <code>environment</code> parameter, the
calling thread's context class loader is used.</p>

<p>If the attempt to load this class produces a {@link
ClassNotFoundException}, the search for a handler continues with
the next element of the list.</p>

<p>Otherwise, a problem with the provider found is signalled by a
{@link JMXProviderException} whose {@link
JMXProviderException#getCause() <em>cause</em>} indicates the underlying
exception, as follows:</p>

<ul>

<li>if the attempt to load the class produces an exception other
than <code>ClassNotFoundException</code>, that is the
<em>cause</em>;

<li>if {@link Class#newInstance()} for the class produces an
exception, that is the <em>cause</em>.

</ul>

<p>If no provider is found by the above steps, including the
default case where there is no provider package list, then the
implementation will use its own provider for
<code><em>protocol</em></code>, or it will throw a
<code>MalformedURLException</code> if there is none.  An
implementation may choose to find providers by other means.  For
example, it may support the <a
href=\"{@docRoot}/../technotes/guides/jar/jar.html#Service Provider\">
JAR conventions for service providers</a>, where the service
interface is <code>JMXConnectorProvider</code>.</p>

<p>Every implementation must support the RMI connector protocol with
the default RMI transport, specified with string <code>rmi</code>.
An implementation may optionally support the RMI connector protocol
with the RMI/IIOP transport, specified with the string
<code>iiop</code>.</p>

<p>Once a provider is found, the result of the
<code>newJMXConnector</code> method is the result of calling {@link
JMXConnectorProvider#newJMXConnector(JMXServiceURL,Map) newJMXConnector}
on the provider.</p>

<p>The <code>Map</code> parameter passed to the
<code>JMXConnectorProvider</code> is a new read-only
<code>Map</code> that contains all the entries that were in the
<code>environment</code> parameter to {@link
#newJMXConnector(JMXServiceURL,Map)
JMXConnectorFactory.newJMXConnector}, if there was one.
Additionally, if the
<code>jmx.remote.protocol.provider.class.loader</code> key is not
present in the <code>environment</code> parameter, it is added to
the new read-only <code>Map</code>.  The associated value is the
calling thread's context class loader.</p>

@since 1.5
"
      classrelation 3855490 // DEFAULT_CLASS_LOADER (<unidirectional association>)
	relation 3855490 --->
	  a role_name "DEFAULT_CLASS_LOADER" init_value "
        \"jmx.remote.default.class.loader\"" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the default class
loader. This class loader is used to deserialize return values and
exceptions from remote <code>MBeanServerConnection</code>
calls.  The value associated with this attribute is an instance
of {@link ClassLoader}.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3855490 // DEFAULT_CLASS_LOADER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3855618 // PROTOCOL_PROVIDER_PACKAGES (<unidirectional association>)
	relation 3855618 --->
	  a role_name "PROTOCOL_PROVIDER_PACKAGES" init_value "
        \"jmx.remote.protocol.provider.pkgs\"" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the provider packages
that are consulted when looking for the handler for a protocol.
The value associated with this attribute is a string with
package names separated by vertical bars (<code>|</code>).</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3855618 // PROTOCOL_PROVIDER_PACKAGES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3855746 // PROTOCOL_PROVIDER_CLASS_LOADER (<unidirectional association>)
	relation 3855746 --->
	  a role_name "PROTOCOL_PROVIDER_CLASS_LOADER" init_value "
        \"jmx.remote.protocol.provider.class.loader\"" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the class
loader for loading protocol providers.
The value associated with this attribute is an instance
of {@link ClassLoader}.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3855746 // PROTOCOL_PROVIDER_CLASS_LOADER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3855874 // PROTOCOL_PROVIDER_DEFAULT_PACKAGE (<unidirectional association>)
	relation 3855874 --->
	  a role_name "PROTOCOL_PROVIDER_DEFAULT_PACKAGE" init_value "
        \"com.sun.jmx.remote.protocol\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3855874 // PROTOCOL_PROVIDER_DEFAULT_PACKAGE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3856002 // logger (<unidirectional association>)
	relation 3856002 --->
	  a role_name "logger" init_value "
        new ClassLogger(\"javax.management.remote.misc\", \"JMXConnectorFactory\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3856002 // logger (<unidirectional association>)
	  b parent class_ref 502402 // ClassLogger
      end

      operation 9941890 "JMXConnectorFactory"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " There are no instances of this class.  "
      end

      operation 9942018 "connect"
	class_operation public return_type class_ref 506370 // JMXConnector
	nparams 1
	  param inout name "serviceURL" type class_ref 506498 // JMXServiceURL
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a connection to the connector server at the given
address.</p>

<p>This method is equivalent to {@link
#connect(JMXServiceURL,Map) connect(serviceURL, null)}.</p>

@param serviceURL the address of the connector server to
connect to.

@return a <code>JMXConnector</code> whose {@link
JMXConnector#connect connect} method has been called.

@exception NullPointerException if <code>serviceURL</code> is null.

@exception IOException if the connector client or the
connection cannot be made because of a communication problem.

@exception SecurityException if the connection cannot be made
for security reasons.
"
      end

      operation 9942146 "connect"
	class_operation public return_type class_ref 506370 // JMXConnector
	nparams 2
	  param inout name "serviceURL" type class_ref 506498 // JMXServiceURL
	  param inout name "environment" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a connection to the connector server at the given
address.</p>

<p>This method is equivalent to:</p>

<pre>
JMXConnector conn = JMXConnectorFactory.newJMXConnector(serviceURL,
                                                        environment);
conn.connect(environment);
</pre>

@param serviceURL the address of the connector server to connect to.

@param environment a set of attributes to determine how the
connection is made.  This parameter can be null.  Keys in this
map must be Strings.  The appropriate type of each associated
value depends on the attribute.  The contents of
<code>environment</code> are not changed by this call.

@return a <code>JMXConnector</code> representing the newly-made
connection.  Each successful call to this method produces a
different object.

@exception NullPointerException if <code>serviceURL</code> is null.

@exception IOException if the connector client or the
connection cannot be made because of a communication problem.

@exception SecurityException if the connection cannot be made
for security reasons.
"
      end

      operation 9942274 "newHashMap"
	class_operation private return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9942402 "newHashMap"
	class_operation private return_type class_ref 130178 // Map
	nparams 1
	  param inout name "map" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K> ${type}<K,Object> ${name}${(}${t0}<K,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9942530 "newJMXConnector"
	class_operation public return_type class_ref 506370 // JMXConnector
	nparams 2
	  param inout name "serviceURL" type class_ref 506498 // JMXServiceURL
	  param inout name "environment" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a connector client for the connector server at the
given address.  The resultant client is not connected until its
{@link JMXConnector#connect(Map) connect} method is called.</p>

@param serviceURL the address of the connector server to connect to.

@param environment a set of attributes to determine how the
connection is made.  This parameter can be null.  Keys in this
map must be Strings.  The appropriate type of each associated
value depends on the attribute.  The contents of
<code>environment</code> are not changed by this call.

@return a <code>JMXConnector</code> representing the new
connector client.  Each successful call to this method produces
a different object.

@exception NullPointerException if <code>serviceURL</code> is null.

@exception IOException if the connector client cannot be made
because of a communication problem.

@exception MalformedURLException if there is no provider for the
protocol in <code>serviceURL</code>.

@exception JMXProviderException if there is a provider for the
protocol in <code>serviceURL</code> but it cannot be used for
some reason.
"
      end

      operation 9942658 "resolvePkgs"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "env" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 1203458 // JMXProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9942786 "getProvider"
	class_operation package explicit_return_type "T"
	nparams 5
	  param inout name "serviceURL" type class_ref 506498 // JMXServiceURL
	  param in name "environment" type class_ref 130178 // Map
	  param inout name "providerClassName" type class_ref 128130 // String
	  param inout name "targetInterface" type class_ref 130818 // Class
	  param in name "loader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, final ${t1}<String, Object> ${p1}, ${t2} ${p2}, ${t3}<T> ${p3}, final ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9942914 "getProviderIterator"
	class_operation package return_type class_ref 132994 // Iterator
	nparams 2
	  param in name "providerClass" type class_ref 130818 // Class
	  param in name "loader" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}final ${t0}<T> ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9943042 "wrap"
	class_operation private return_type class_ref 129026 // ClassLoader
	nparams 1
	  param in name "parent" type class_ref 129026 // ClassLoader
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9943170 "getConnectorAsService"
	class_operation private return_type class_ref 506370 // JMXConnector
	nparams 3
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "url" type class_ref 506498 // JMXServiceURL
	  param inout name "map" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, ?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9943298 "getProvider"
	class_operation package explicit_return_type "T"
	nparams 5
	  param inout name "protocol" type class_ref 128130 // String
	  param inout name "pkgs" type class_ref 128130 // String
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "providerClassName" type class_ref 128130 // String
	  param inout name "targetInterface" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<T> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9943426 "resolveClassLoader"
	class_operation package return_type class_ref 129026 // ClassLoader
	nparams 1
	  param inout name "environment" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9943554 "protocol2package"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1203458 "JMXProviderException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Exception thrown by {@link JMXConnectorFactory} and
{@link JMXConnectorServerFactory} when a provider exists for
the required protocol but cannot be used for some reason.</p>

@see JMXConnectorFactory#newJMXConnector
@see JMXConnectorServerFactory#newJMXConnectorServer
@since 1.5
"
      classrelation 3858306 // <generalisation>
	relation 3858306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3858306 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 2299778 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3166703627550447198L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9948162 "JMXProviderException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a <code>JMXProviderException</code> with no
specified detail message.</p>
"
      end

      operation 9948290 "JMXProviderException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a <code>JMXProviderException</code> with the
specified detail message.</p>

@param message the detail message
"
      end

      operation 9948418 "JMXProviderException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Constructs a <code>JMXProviderException</code> with the
specified detail message and nested exception.</p>

@param message the detail message
@param cause the nested exception
"
      end

      operation 9948546 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3858434 // cause (<unidirectional association>)
	relation 3858434 --->
	  a role_name "cause" init_value " null" private
	    comment "
@serial An exception that caused this exception to be thrown.
        This field may be null.
@see #getCause()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3858434 // cause (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end
    end

    class 1203586 "JMXConnectorServerMBean"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>MBean interface for connector servers.  A JMX API connector server
is attached to an MBean server, and establishes connections to that
MBean server for remote clients.</p>

<p>A newly-created connector server is <em>inactive</em>, and does
not yet listen for connections.  Only when its {@link #start start}
method has been called does it start listening for connections.</p>

@since 1.5
"
      operation 9943682 "start"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Activates the connector server, that is, starts listening for
client connections.  Calling this method when the connector
server is already active has no effect.  Calling this method
when the connector server has been stopped will generate an
{@link IOException}.</p>

@exception IOException if it is not possible to start listening
or if the connector server has been stopped.

@exception IllegalStateException if the connector server has
not been attached to an MBean server.
"
      end

      operation 9943810 "stop"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Deactivates the connector server, that is, stops listening for
client connections.  Calling this method will also close all
client connections that were made by this server.  After this
method returns, whether normally or with an exception, the
connector server will not create any new client
connections.</p>

<p>Once a connector server has been stopped, it cannot be started
again.</p>

<p>Calling this method when the connector server has already
been stopped has no effect.  Calling this method when the
connector server has not yet been started will disable the
connector server object permanently.</p>

<p>If closing a client connection produces an exception, that
exception is not thrown from this method.  A {@link
JMXConnectionNotification} with type {@link
JMXConnectionNotification#FAILED} is emitted from this MBean
with the connection ID of the connection that could not be
closed.</p>

<p>Closing a connector server is a potentially slow operation.
For example, if a client machine with an open connection has
crashed, the close operation might have to wait for a network
protocol timeout.  Callers that do not want to block in a close
operation should do it in a separate thread.</p>

@exception IOException if the server cannot be closed cleanly.
When this exception is thrown, the server has already attempted
to close all client connections.  All client connections are
closed except possibly those that generated exceptions when the
server attempted to close them.
"
      end

      operation 9943938 "isActive"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Determines whether the connector server is active.  A connector
server starts being active when its {@link #start start} method
returns successfully and remains active until either its
{@link #stop stop} method is called or the connector server
fails.</p>

@return true if the connector server is active.
"
      end

      operation 9944066 "setMBeanServerForwarder"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mbsf" type class_ref 510850 // MBeanServerForwarder
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Inserts an object that intercepts requests for the MBean server
that arrive through this connector server.  This object will be
supplied as the <code>MBeanServer</code> for any new connection
created by this connector server.  Existing connections are
unaffected.</p>

<p>This method can be called more than once with different
{@link MBeanServerForwarder} objects.  The result is a chain
of forwarders.  The last forwarder added is the first in the chain.
In more detail:</p>

<ul>
<li><p>If this connector server is already associated with an
<code>MBeanServer</code> object, then that object is given to
{@link MBeanServerForwarder#setMBeanServer
mbsf.setMBeanServer}.  If doing so produces an exception, this
method throws the same exception without any other effect.</p>

<li><p>If this connector is not already associated with an
<code>MBeanServer</code> object, or if the
<code>mbsf.setMBeanServer</code> call just mentioned succeeds,
then <code>mbsf</code> becomes this connector server's
<code>MBeanServer</code>.</p>
</ul>

@param mbsf the new <code>MBeanServerForwarder</code>.

@exception IllegalArgumentException if the call to {@link
MBeanServerForwarder#setMBeanServer mbsf.setMBeanServer} fails
with <code>IllegalArgumentException</code>.  This includes the
case where <code>mbsf</code> is null.
"
      end

      operation 9944194 "getConnectionIds"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The list of IDs for currently-open connections to this
connector server.</p>

@return a new string array containing the list of IDs.  If
there are no currently-open connections, this array will be
empty.
"
      end

      operation 9944322 "getAddress"
	public return_type class_ref 506498 // JMXServiceURL
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The address of this connector server.</p>
<p>
The address returned may not be the exact original {@link JMXServiceURL}
that was supplied when creating the connector server, since the original
address may not always be complete. For example the port number may be
dynamically allocated when starting the connector server. Instead the
address returned is the actual {@link JMXServiceURL} of the
{@link JMXConnectorServer}. This is the address that clients supply
to {@link JMXConnectorFactory#connect(JMXServiceURL)}.
</p>
<p>Note that the address returned may be {@code null} if
   the {@code JMXConnectorServer} is not yet {@link #isActive active}.
</p>

@return the address of this connector server, or null if it
does not have one.
"
      end

      operation 9944450 "getAttributes"
	public return_type class_ref 130178 // Map
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String,?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>The attributes for this connector server.</p>

@return a read-only map containing the attributes for this
connector server.  Attributes whose values are not serializable
are omitted from this map.  If there are no serializable
attributes, the returned map is empty.
"
      end

      operation 9944578 "toJMXConnector"
	public return_type class_ref 506370 // JMXConnector
	nparams 1
	  param inout name "env" type class_ref 130178 // Map
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Returns a client stub for this connector server.  A client
stub is a serializable object whose {@link
JMXConnector#connect(Map) connect} method can be used to make
one new connection to this connector server.</p>

<p>A given connector need not support the generation of client
stubs.  However, the connectors specified by the JMX Remote API do
(JMXMP Connector and RMI Connector).</p>

@param env client connection parameters of the same sort that
can be provided to {@link JMXConnector#connect(Map)
JMXConnector.connect(Map)}.  Can be null, which is equivalent
to an empty map.

@return a client stub that can be used to make a new connection
to this connector server.

@exception UnsupportedOperationException if this connector
server does not support the generation of client stubs.

@exception IllegalStateException if the JMXConnectorServer is
not started (see {@link JMXConnectorServerMBean#isActive()}).

@exception IOException if a communications problem means that a
stub cannot be created.

"
      end
    end

    class 1203714 "JMXConnectorServerFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Factory to create JMX API connector servers.  There
are no instances of this class.</p>

<p>Each connector server is created by an instance of {@link
JMXConnectorServerProvider}.  This instance is found as follows.  Suppose
the given {@link JMXServiceURL} looks like
<code>\"service:jmx:<em>protocol</em>:<em>remainder</em>\"</code>.
Then the factory will attempt to find the appropriate {@link
JMXConnectorServerProvider} for <code><em>protocol</em></code>.  Each
occurrence of the character <code>+</code> or <code>-</code> in
<code><em>protocol</em></code> is replaced by <code>.</code> or
<code>_</code>, respectively.</p>

<p>A <em>provider package list</em> is searched for as follows:</p>

<ol>

<li>If the <code>environment</code> parameter to {@link
#newJMXConnectorServer(JMXServiceURL,Map,MBeanServer)
newJMXConnectorServer} contains the key
<code>jmx.remote.protocol.provider.pkgs</code> then the associated
value is the provider package list.

<li>Otherwise, if the system property
<code>jmx.remote.protocol.provider.pkgs</code> exists, then its value
is the provider package list.

<li>Otherwise, there is no provider package list.

</ol>

<p>The provider package list is a string that is interpreted as a
list of non-empty Java package names separated by vertical bars
(<code>|</code>).  If the string is empty, then so is the provider
package list.  If the provider package list is not a String, or if
it contains an element that is an empty string, a {@link
JMXProviderException} is thrown.</p>

<p>If the provider package list exists and is not empty, then for
each element <code><em>pkg</em></code> of the list, the factory
will attempt to load the class

<blockquote>
<code><em>pkg</em>.<em>protocol</em>.ServerProvider</code>
</blockquote>

<p>If the <code>environment</code> parameter to {@link
#newJMXConnectorServer(JMXServiceURL, Map, MBeanServer)
newJMXConnectorServer} contains the key
<code>jmx.remote.protocol.provider.class.loader</code> then the
associated value is the class loader to use to load the provider.
If the associated value is not an instance of {@link
java.lang.ClassLoader}, an {@link
java.lang.IllegalArgumentException} is thrown.</p>

<p>If the <code>jmx.remote.protocol.provider.class.loader</code>
key is not present in the <code>environment</code> parameter, the
calling thread's context class loader is used.</p>

<p>If the attempt to load this class produces a {@link
ClassNotFoundException}, the search for a handler continues with
the next element of the list.</p>

<p>Otherwise, a problem with the provider found is signalled by a
{@link JMXProviderException} whose {@link
JMXProviderException#getCause() <em>cause</em>} indicates the
underlying exception, as follows:</p>

<ul>

<li>if the attempt to load the class produces an exception other
than <code>ClassNotFoundException</code>, that is the
<em>cause</em>;

<li>if {@link Class#newInstance()} for the class produces an
exception, that is the <em>cause</em>.

</ul>

<p>If no provider is found by the above steps, including the
default case where there is no provider package list, then the
implementation will use its own provider for
<code><em>protocol</em></code>, or it will throw a
<code>MalformedURLException</code> if there is none.  An
implementation may choose to find providers by other means.  For
example, it may support the <a
href=\"{@docRoot}/../technotes/guides/jar/jar.html#Service Provider\">
JAR conventions for service providers</a>, where the service
interface is <code>JMXConnectorServerProvider</code>.</p>

<p>Every implementation must support the RMI connector protocol with
the default RMI transport, specified with string <code>rmi</code>.
An implementation may optionally support the RMI connector protocol
with the RMI/IIOP transport, specified with the string
<code>iiop</code>.</p>

<p>Once a provider is found, the result of the
<code>newJMXConnectorServer</code> method is the result of calling
{@link
JMXConnectorServerProvider#newJMXConnectorServer(JMXServiceURL,
Map, MBeanServer) newJMXConnectorServer} on the provider.</p>

<p>The <code>Map</code> parameter passed to the
<code>JMXConnectorServerProvider</code> is a new read-only
<code>Map</code> that contains all the entries that were in the
<code>environment</code> parameter to {@link
#newJMXConnectorServer(JMXServiceURL,Map,MBeanServer)
JMXConnectorServerFactory.newJMXConnectorServer}, if there was one.
Additionally, if the
<code>jmx.remote.protocol.provider.class.loader</code> key is not
present in the <code>environment</code> parameter, it is added to
the new read-only <code>Map</code>. The associated value is the
calling thread's context class loader.</p>

@since 1.5
"
      classrelation 3857154 // DEFAULT_CLASS_LOADER (<unidirectional association>)
	relation 3857154 --->
	  a role_name "DEFAULT_CLASS_LOADER" init_value "
        JMXConnectorFactory.DEFAULT_CLASS_LOADER" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the default class
loader.  This class loader is used to deserialize objects in
requests received from the client, possibly after consulting an
MBean-specific class loader.  The value associated with this
attribute is an instance of {@link ClassLoader}.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3857154 // DEFAULT_CLASS_LOADER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3857282 // DEFAULT_CLASS_LOADER_NAME (<unidirectional association>)
	relation 3857282 --->
	  a role_name "DEFAULT_CLASS_LOADER_NAME" init_value "
        \"jmx.remote.default.class.loader.name\"" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the default class
loader MBean name.  This class loader is used to deserialize objects in
requests received from the client, possibly after consulting an
MBean-specific class loader.  The value associated with this
attribute is an instance of {@link javax.management.ObjectName
ObjectName}.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3857282 // DEFAULT_CLASS_LOADER_NAME (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3857410 // PROTOCOL_PROVIDER_PACKAGES (<unidirectional association>)
	relation 3857410 --->
	  a role_name "PROTOCOL_PROVIDER_PACKAGES" init_value "
        \"jmx.remote.protocol.provider.pkgs\"" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the provider packages
that are consulted when looking for the handler for a protocol.
The value associated with this attribute is a string with
package names separated by vertical bars (<code>|</code>).</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3857410 // PROTOCOL_PROVIDER_PACKAGES (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3857538 // PROTOCOL_PROVIDER_CLASS_LOADER (<unidirectional association>)
	relation 3857538 --->
	  a role_name "PROTOCOL_PROVIDER_CLASS_LOADER" init_value "
        \"jmx.remote.protocol.provider.class.loader\"" class_relation const_relation public
	    comment "
<p>Name of the attribute that specifies the class
loader for loading protocol providers.
The value associated with this attribute is an instance
of {@link ClassLoader}.</p>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3857538 // PROTOCOL_PROVIDER_CLASS_LOADER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3857666 // PROTOCOL_PROVIDER_DEFAULT_PACKAGE (<unidirectional association>)
	relation 3857666 --->
	  a role_name "PROTOCOL_PROVIDER_DEFAULT_PACKAGE" init_value "
        \"com.sun.jmx.remote.protocol\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3857666 // PROTOCOL_PROVIDER_DEFAULT_PACKAGE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3857794 // logger (<unidirectional association>)
	relation 3857794 --->
	  a role_name "logger" init_value "
        new ClassLogger(\"javax.management.remote.misc\",\"JMXConnectorServerFactory\")" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3857794 // logger (<unidirectional association>)
	  b parent class_ref 502402 // ClassLogger
      end

      operation 9946882 "JMXConnectorServerFactory"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " There are no instances of this class.  "
      end

      operation 9947010 "getConnectorServerAsService"
	class_operation private return_type class_ref 507138 // JMXConnectorServer
	nparams 4
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "url" type class_ref 506498 // JMXServiceURL
	  param inout name "map" type class_ref 130178 // Map
	  param inout name "mbs" type class_ref 485122 // MBeanServer
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<String, ?> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9947138 "newJMXConnectorServer"
	class_operation public return_type class_ref 507138 // JMXConnectorServer
	nparams 3
	  param inout name "serviceURL" type class_ref 506498 // JMXServiceURL
	  param inout name "environment" type class_ref 130178 // Map
	  param inout name "mbeanServer" type class_ref 485122 // MBeanServer
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String,?> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Creates a connector server at the given address.  The
resultant server is not started until its {@link
JMXConnectorServer#start() start} method is called.</p>

@param serviceURL the address of the new connector server.  The
actual address of the new connector server, as returned by its
{@link JMXConnectorServer#getAddress() getAddress} method, will
not necessarily be exactly the same.  For example, it might
include a port number if the original address did not.

@param environment a set of attributes to control the new
connector server's behavior.  This parameter can be null.
Keys in this map must be Strings.  The appropriate type of each
associated value depends on the attribute.  The contents of
<code>environment</code> are not changed by this call.

@param mbeanServer the MBean server that this connector server
is attached to.  Null if this connector server will be attached
to an MBean server by being registered in it.

@return a <code>JMXConnectorServer</code> representing the new
connector server.  Each successful call to this method produces
a different object.

@exception NullPointerException if <code>serviceURL</code> is null.

@exception IOException if the connector server cannot be made
because of a communication problem.

@exception MalformedURLException if there is no provider for the
protocol in <code>serviceURL</code>.

@exception JMXProviderException if there is a provider for the
protocol in <code>serviceURL</code> but it cannot be used for
some reason.
"
      end
    end

    class 1203842 "JMXServerErrorException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception thrown as the result of a remote {@link MBeanServer}
method invocation when an <code>Error</code> is thrown while
processing the invocation in the remote MBean server.  A
<code>JMXServerErrorException</code> instance contains the original
<code>Error</code> that occurred as its cause.

@see java.rmi.ServerError
@since 1.5
"
      classrelation 3858562 // <generalisation>
	relation 3858562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3858562 // <generalisation>
	  b parent class_ref 146818 // IOException
      end

      attribute 2299906 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3996732239558744666L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9948674 "JMXServerErrorException"
	public explicit_return_type ""
	nparams 2
	  param inout name "s" type class_ref 128130 // String
	  param inout name "err" type class_ref 195842 // Error
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>JMXServerErrorException</code> with the specified
detail message and nested error.

@param s the detail message.
@param err the nested error.  An instance of this class can be
constructed where this parameter is null, but the standard
connectors will never do so.
"
      end

      operation 9948802 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3858690 // cause (<unidirectional association>)
	relation 3858690 --->
	  a role_name "cause" const_relation private
	    comment "
@serial An {@link Error} that caused this exception to be thrown.
@see #getCause()

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3858690 // cause (<unidirectional association>)
	  b parent class_ref 195842 // Error
      end
    end

    class 1203970 "SubjectDelegationPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Permission required by an authentication identity to perform
operations on behalf of an authorization identity.</p>

<p>A SubjectDelegationPermission contains a name (also referred
to as a \"target name\") but no actions list; you either have the
named permission or you don't.</p>

<p>The target name is the name of the authorization principal
classname followed by a period and the authorization principal
name, that is
<code>\"<em>PrincipalClassName</em>.<em>PrincipalName</em>\"</code>.</p>

<p>An asterisk may appear by itself, or if immediately preceded
by a \".\" may appear at the end of the target name, to signify a
wildcard match.</p>

<p>For example, \"*\", \"javax.management.remote.JMXPrincipal.*\" and
\"javax.management.remote.JMXPrincipal.delegate\" are valid target
names. The first one denotes any principal name from any principal
class, the second one denotes any principal name of the concrete
principal class <code>javax.management.remote.JMXPrincipal</code>
and the third one denotes a concrete principal name
<code>delegate</code> of the concrete principal class
<code>javax.management.remote.JMXPrincipal</code>.</p>

@since 1.5
"
      classrelation 3860738 // <generalisation>
	relation 3860738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3860738 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 2300674 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1481618113008682343L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9952002 "SubjectDelegationPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SubjectDelegationPermission with the specified name.
The name is the symbolic name of the SubjectDelegationPermission.

@param name the name of the SubjectDelegationPermission

@throws NullPointerException if <code>name</code> is
<code>null</code>.
@throws IllegalArgumentException if <code>name</code> is empty.
"
      end

      operation 9952130 "SubjectDelegationPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new SubjectDelegationPermission object with the
specified name.  The name is the symbolic name of the
SubjectDelegationPermission, and the actions String is
currently unused and must be null.

@param name the name of the SubjectDelegationPermission
@param actions must be null.

@throws NullPointerException if <code>name</code> is
<code>null</code>.
@throws IllegalArgumentException if <code>name</code> is empty
or <code>actions</code> is not null.
"
      end
    end
  end

  deploymentview 146562 "remote"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 331650 "JMXConnectorProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 506242 // JMXConnectorProvider
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 332162 "JMXConnectorServerProvider"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Map;
import javax.management.MBeanServer;
${definition}"
      associated_elems
	class_ref 507010 // JMXConnectorServerProvider
      end
      comment "Copyright (c) 2003, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 332930 "JMXAuthenticator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.Principal;
import javax.security.auth.Subject;
${definition}"
      associated_elems
	class_ref 508290 // JMXAuthenticator
      end
      comment "Copyright (c) 2003, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 333826 "MBeanServerForwarder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.MBeanServer;
${definition}"
      associated_elems
	class_ref 510850 // MBeanServerForwarder
      end
      comment "Copyright (c) 2003, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 868866 "JMXAddressable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1203074 // JMXAddressable
      end
      comment "Copyright (c) 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 868994 "JMXConnectionNotification"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.management.Notification;
import javax.management.ObjectName;
${definition}"
      associated_elems
	class_ref 1203202 // JMXConnectionNotification
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 869122 "JMXConnector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
import java.io.IOException;
import java.util.Map;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanServerConnection;
import javax.management.NotificationFilter;
import javax.management.NotificationListener;
import javax.security.auth.Subject;
${definition}"
      associated_elems
	class_ref 506370 // JMXConnector
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 869250 "JMXConnectorFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.mbeanserver.Util;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.ServiceLoader;
import java.util.StringTokenizer;
import java.security.AccessController;
import java.security.PrivilegedAction;
import com.sun.jmx.remote.util.ClassLogger;
import com.sun.jmx.remote.util.EnvHelp;
import sun.reflect.misc.ReflectUtil;
${definition}"
      associated_elems
	class_ref 1203330 // JMXConnectorFactory
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 869378 "JMXConnectorServerMBean"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.Map;
${definition}"
      associated_elems
	class_ref 1203586 // JMXConnectorServerMBean
      end
      comment "Copyright (c) 2002, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 869506 "JMXConnectorServer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.management.MBeanNotificationInfo;
import javax.management.MBeanRegistration;
import javax.management.MBeanServer;
import javax.management.Notification;
import javax.management.NotificationBroadcasterSupport;
import javax.management.ObjectName;
${definition}"
      associated_elems
	class_ref 507138 // JMXConnectorServer
      end
      comment "Copyright (c) 2003, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 869634 "JMXConnectorServerFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.remote.util.ClassLogger;
import com.sun.jmx.remote.util.EnvHelp;
import java.io.IOException;
import java.net.MalformedURLException;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.management.MBeanServer;
${definition}"
      associated_elems
	class_ref 1203714 // JMXConnectorServerFactory
      end
      comment "Copyright (c) 2003, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 869762 "JMXPrincipal"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.security.Principal;
${definition}"
      associated_elems
	class_ref 508034 // JMXPrincipal
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 869890 "JMXProviderException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_elems
	class_ref 1203458 // JMXProviderException
      end
      comment "Copyright (c) 2002, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 870018 "JMXServerErrorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import javax.management.MBeanServer;
${definition}"
      associated_elems
	class_ref 1203842 // JMXServerErrorException
      end
      comment "Copyright (c) 2002, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 870146 "JMXServiceURL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.remote.util.ClassLogger;
import com.sun.jmx.remote.util.EnvHelp;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.util.BitSet;
import java.util.StringTokenizer;
${definition}"
      associated_elems
	class_ref 506498 // JMXServiceURL
      end
      comment "Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 870274 "NotificationResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 500866 // NotificationResult
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 870402 "SubjectDelegationPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.BasicPermission;
${definition}"
      associated_elems
	class_ref 1203970 // SubjectDelegationPermission
      end
      comment "Copyright (c) 2003, 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 870530 "TargetedNotification"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import javax.management.Notification;
${definition}"
      associated_elems
	class_ref 503682 // TargetedNotification
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end

  package_ref 184706 // rmi
end
