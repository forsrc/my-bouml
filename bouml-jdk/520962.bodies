class SnmpVarBindList
!!!3122050.java!!!	SnmpVarBindList()
        super(5, 5) ;
!!!3122178.java!!!	SnmpVarBindList(in initialCapacity : int)
        super(initialCapacity) ;
!!!3122306.java!!!	SnmpVarBindList(inout name : String)
        super(5, 5) ;
        identity = name ;
!!!3122434.java!!!	SnmpVarBindList(inout list : SnmpVarBindList)
        super(list.size(), 5) ;
        list.copyInto(elementData) ;
        elementCount = list.size() ;
!!!3122562.java!!!	SnmpVarBindList(inout list : Vector)
        super(list.size(), 5);
        for (Enumeration<SnmpVarBind> e = list.elements(); e.hasMoreElements();) {
            final SnmpVarBind varBind = e.nextElement();
            addElement(varBind.clone());
        }
!!!3122690.java!!!	SnmpVarBindList(inout name : String, inout list : Vector)
        this(list);
        identity = name;
!!!3122818.java!!!	getTimestamp() : Timestamp
        return timestamp ;
!!!3122946.java!!!	setTimestamp(inout tstamp : Timestamp) : void
        timestamp = tstamp ;
!!!3123074.java!!!	getVarBindAt(in pos : int) : SnmpVarBind
        return elementAt(pos);
!!!3123202.java!!!	getVarBindCount() : int
        return size() ;
!!!3123330.java!!!	getVarBindList() : Enumeration
        return elements() ;
!!!3123458.java!!!	setVarBindList(inout list : Vector) : void
        setVarBindList(list, false) ;
!!!3123586.java!!!	setVarBindList(inout list : Vector, inout copy : boolean) : void
        synchronized (list) {
            final int max = list.size();
            setSize(max) ;
            list.copyInto(this.elementData) ;
            if (copy) {         // do deepcopy of all vars.
                for (int i = 0; i < max ; i++) {
                    SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
                    elementData[i] = avar.clone() ;
                }
            }
        }
!!!3123714.java!!!	addVarBindList(inout list : SnmpVarBindList) : void
        ensureCapacity(list.size() + size()) ;
        for (int i = 0; i < list.size(); i++) {
            addElement(list.getVarBindAt(i)) ;
        }
!!!3123842.java!!!	removeVarBindList(inout list : SnmpVarBindList) : boolean
        boolean result = true;
        for (int i = 0; i < list.size(); i++) {
            result = removeElement(list.getVarBindAt(i)) ;
        }
        return result;
!!!3123970.java!!!	replaceVarBind(inout var : SnmpVarBind, in pos : int) : void
        setElementAt(var, pos) ;
!!!3124098.java!!!	addVarBind(inout list : String [[]], inout inst : String) : void
        for (int i = 0; i < list.length; i++) {
            SnmpVarBind avar = new SnmpVarBind(list[i]) ;
            avar.addInstance(inst) ;
            addElement(avar) ;
        }
!!!3124226.java!!!	removeVarBind(inout list : String [[]], inout inst : String) : boolean
        boolean result = true;
        for (int i = 0; i < list.length; i++) {
            SnmpVarBind avar = new SnmpVarBind(list[i]) ;
            avar.addInstance(inst) ;
            int indexOid = indexOfOid(avar) ;
            try {
                removeElementAt(indexOid) ;
            } catch (ArrayIndexOutOfBoundsException e) {
                result = false ;
            }
        }
        return result ;
!!!3124354.java!!!	addVarBind(inout list : String [[]]) : void
        addVarBind(list, null) ;
!!!3124482.java!!!	removeVarBind(inout list : String [[]]) : boolean
        return removeVarBind(list, null) ;
!!!3124610.java!!!	addVarBind(inout name : String) : void
        SnmpVarBind avar ;
        avar = new SnmpVarBind(name) ;
        addVarBind(avar) ;
!!!3124738.java!!!	removeVarBind(inout name : String) : boolean
        SnmpVarBind avar ;
        int indexOid ;
        avar = new SnmpVarBind(name) ;
        indexOid = indexOfOid(avar) ;
        try {
            removeElementAt(indexOid) ;
            return true ;
        } catch (ArrayIndexOutOfBoundsException e) {
            return false ;
        }
!!!3124866.java!!!	addVarBind(inout var : SnmpVarBind) : void
        addElement(var) ;
!!!3124994.java!!!	removeVarBind(inout var : SnmpVarBind) : boolean
        return removeElement(var) ;
!!!3125122.java!!!	addInstance(inout inst : String) : void
        int max= size();
        for (int i = 0; i < max;  i++) {
            ((SnmpVarBind)elementData[i]).addInstance(inst) ;
        }
!!!3125250.java!!!	concat(inout list : Vector) : void
        ensureCapacity(size() + list.size()) ;
        for (Enumeration<SnmpVarBind> e = list.elements() ; e.hasMoreElements() ; ) {
            addElement(e.nextElement()) ;
        }
!!!3125378.java!!!	checkForValidValues() : boolean
        int max= this.size();
        for (int i = 0; i < max ; i++) {
            SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
            if (avar.isValidValue() == false)
                return false ;
        }
        return true ;
!!!3125506.java!!!	checkForUnspecifiedValue() : boolean
        int max= this.size();
        for (int i = 0; i < max ; i++) {
            SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
            if (avar.isUnspecifiedValue())
                return true ;
        }
        return false ;
!!!3125634.java!!!	splitAt(in pos : int) : SnmpVarBindList
        SnmpVarBindList splitVb = null ;
        if (pos > elementCount)
            return splitVb ;
        splitVb = new SnmpVarBindList() ; // size() - atPosition) ;
        int max= size();
        for (int i = pos; i < max ; i++)
            splitVb.addElement((SnmpVarBind) elementData[i]) ;
        elementCount = pos ;
        trimToSize() ;
        return splitVb ;
!!!3125762.java!!!	indexOfOid(inout var : SnmpVarBind, in min : int, in max : int) : int
        SnmpOid oidarg = var.getOid() ;
        for (int i = min; i < max ; i++) {
            SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
            if (oidarg.equals(avar.getOid()))
                return i ;
        }
        return -1 ;
!!!3125890.java!!!	indexOfOid(inout var : SnmpVarBind) : int
        return indexOfOid(var, 0, size()) ;
!!!3126018.java!!!	indexOfOid(inout oid : SnmpOid) : int
        int max = size();
        for (int i = 0; i < max ; i++) {
            SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
            if (oid.equals(avar.getOid()))
                return i ;
        }
        return -1 ;
!!!3126146.java!!!	cloneWithValue() : SnmpVarBindList
        SnmpVarBindList newvb = new SnmpVarBindList() ;
        newvb.setTimestamp(this.getTimestamp()) ;
        newvb.ensureCapacity(this.size()) ;
        for (int i = 0; i < this.size() ; i++) {
            SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
            newvb.addElement(avar.clone()) ;
        }
        return newvb ;
!!!3126274.java!!!	cloneWithoutValue() : SnmpVarBindList
        SnmpVarBindList newvb = new SnmpVarBindList() ;
        int max = this.size();
        newvb.ensureCapacity(max) ;
        for (int i = 0; i < max ; i++) {
            SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
            newvb.addElement((SnmpVarBind) avar.cloneWithoutValue()) ;
        }
        return newvb ;
!!!3126402.java!!!	clone() : SnmpVarBindList
        return cloneWithValue() ;
!!!3126530.java!!!	toVector(inout copy : boolean) : Vector
        final int count = elementCount;
        if (copy == false) return new Vector<>(this);
        Vector<SnmpVarBind> result = new Vector<>(count,5);
        for (int i = 0; i < count ; i++) {
            SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
            result.addElement(avar.clone()) ;
        }
        return result;
!!!3126658.java!!!	oidListToString() : String
        StringBuilder s = new StringBuilder(300) ;
        for (int i = 0 ; i < elementCount ; i++) {
            SnmpVarBind avar = (SnmpVarBind)elementData[i] ;
            s.append(avar.getOid().toString()).append("\n") ;
        }
        return s.toString() ;
!!!3126786.java!!!	varBindListToString() : String
        StringBuilder s = new StringBuilder(300) ;
        for (int i = 0; i < elementCount ; i++) {
            s.append(elementData[i].toString()).append("\n")  ;
        }
        return s.toString() ;
!!!3126914.java!!!	finalize() : void
        removeAllElements() ;
