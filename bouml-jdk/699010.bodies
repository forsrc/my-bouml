class SchemaGrammar
!!!4626434.java!!!	SchemaGrammar(inout targetNamespace : String, inout grammarDesc : XSDDescription, inout symbolTable : SymbolTable)
        fTargetNamespace = targetNamespace;
        fGrammarDescription = grammarDesc;
        fSymbolTable = symbolTable;

        // REVISIT: do we know the numbers of the following global decls
        // when creating this grammar? If so, we can pass the numbers in,
        // and use that number to initialize the following hashtables.
        fGlobalAttrDecls  = new SymbolHash();
        fGlobalAttrGrpDecls = new SymbolHash();
        fGlobalElemDecls = new SymbolHash();
        fGlobalGroupDecls = new SymbolHash();
        fGlobalNotationDecls = new SymbolHash();
        fGlobalIDConstraintDecls = new SymbolHash();

        // Extended tables
        fGlobalAttrDeclsExt  = new SymbolHash();
        fGlobalAttrGrpDeclsExt = new SymbolHash();
        fGlobalElemDeclsExt = new SymbolHash();
        fGlobalGroupDeclsExt = new SymbolHash();
        fGlobalNotationDeclsExt = new SymbolHash();
        fGlobalIDConstraintDeclsExt = new SymbolHash();
        fGlobalTypeDeclsExt = new SymbolHash();

        // All global elements table
        fAllGlobalElemDecls = new SymbolHash();

        // if we are parsing S4S, put built-in types in first
        // they might get overwritten by the types from S4S, but that's
        // considered what the application wants to do.
        if (fTargetNamespace == SchemaSymbols.URI_SCHEMAFORSCHEMA)
            fGlobalTypeDecls = SG_SchemaNS.fGlobalTypeDecls.makeClone();
        else
            fGlobalTypeDecls = new SymbolHash();
!!!4626562.java!!!	SchemaGrammar(inout grammar : SchemaGrammar)
        fTargetNamespace = grammar.fTargetNamespace;
        fGrammarDescription = grammar.fGrammarDescription.makeClone();
        //fGrammarDescription.fContextType |= XSDDescription.CONTEXT_COLLISION; // REVISIT
        fSymbolTable = grammar.fSymbolTable; // REVISIT

        fGlobalAttrDecls  = grammar.fGlobalAttrDecls.makeClone();
        fGlobalAttrGrpDecls = grammar.fGlobalAttrGrpDecls.makeClone();
        fGlobalElemDecls = grammar.fGlobalElemDecls.makeClone();
        fGlobalGroupDecls = grammar.fGlobalGroupDecls.makeClone();
        fGlobalNotationDecls = grammar.fGlobalNotationDecls.makeClone();
        fGlobalIDConstraintDecls = grammar.fGlobalIDConstraintDecls.makeClone();
        fGlobalTypeDecls = grammar.fGlobalTypeDecls.makeClone();

        // Extended tables
        fGlobalAttrDeclsExt  = grammar.fGlobalAttrDeclsExt.makeClone();
        fGlobalAttrGrpDeclsExt = grammar.fGlobalAttrGrpDeclsExt.makeClone();
        fGlobalElemDeclsExt = grammar.fGlobalElemDeclsExt.makeClone();
        fGlobalGroupDeclsExt = grammar.fGlobalGroupDeclsExt.makeClone();
        fGlobalNotationDeclsExt = grammar.fGlobalNotationDeclsExt.makeClone();
        fGlobalIDConstraintDeclsExt = grammar.fGlobalIDConstraintDeclsExt.makeClone();
        fGlobalTypeDeclsExt = grammar.fGlobalTypeDeclsExt.makeClone();

        // All global elements table
        fAllGlobalElemDecls = grammar.fAllGlobalElemDecls.makeClone();

        // Annotations associated with the "root" schema of this targetNamespace
        fNumAnnotations = grammar.fNumAnnotations;
        if (fNumAnnotations > 0) {
            fAnnotations = new XSAnnotationImpl[grammar.fAnnotations.length];
            System.arraycopy(grammar.fAnnotations, 0, fAnnotations, 0, fNumAnnotations);
        }

        // All substitution group information declared in this namespace
        fSubGroupCount = grammar.fSubGroupCount;
        if (fSubGroupCount > 0) {
            fSubGroups = new XSElementDecl[grammar.fSubGroups.length];
            System.arraycopy(grammar.fSubGroups, 0, fSubGroups, 0, fSubGroupCount);
        }

        // Array to store complex type decls for constraint checking
        fCTCount = grammar.fCTCount;
        if (fCTCount > 0) {
            fComplexTypeDecls = new XSComplexTypeDecl[grammar.fComplexTypeDecls.length];
            fCTLocators = new SimpleLocator[grammar.fCTLocators.length];
            System.arraycopy(grammar.fComplexTypeDecls, 0, fComplexTypeDecls, 0, fCTCount);
            System.arraycopy(grammar.fCTLocators, 0, fCTLocators, 0, fCTCount);
        }

        // Groups being redefined by restriction
        fRGCount = grammar.fRGCount;
        if (fRGCount > 0) {
            fRedefinedGroupDecls = new XSGroupDecl[grammar.fRedefinedGroupDecls.length];
            fRGLocators = new SimpleLocator[grammar.fRGLocators.length];
            System.arraycopy(grammar.fRedefinedGroupDecls, 0, fRedefinedGroupDecls, 0, fRGCount);
            System.arraycopy(grammar.fRGLocators, 0, fRGLocators, 0, fRGCount);
        }

        // List of imported grammars
        if (grammar.fImported != null) {
            fImported = new Vector();
            for (int i=0; i<grammar.fImported.size(); i++) {
                fImported.add(grammar.fImported.elementAt(i));
            }
        }

        // Locations
        if (grammar.fLocations != null) {
            for (int k=0; k<grammar.fLocations.size(); k++) {
                addDocument(null, (String)grammar.fLocations.elementAt(k));
            }
        }

!!!4633730.java!!!	getGrammarDescription() : XMLGrammarDescription
        return fGrammarDescription;
!!!4633858.java!!!	isNamespaceAware() : boolean
        return true;
!!!4633986.java!!!	setImportedGrammars(inout importedGrammars : Vector) : void
        fImported = importedGrammars;
!!!4634114.java!!!	getImportedGrammars() : Vector
        return fImported;
!!!4634242.java!!!	getTargetNamespace() : String
        return fTargetNamespace;
!!!4634370.java!!!	addGlobalAttributeDecl(inout decl : XSAttributeDecl) : void
        fGlobalAttrDecls.put(decl.fName, decl);
        decl.setNamespaceItem(this);
!!!4634498.java!!!	addGlobalAttributeDecl(inout decl : XSAttributeDecl, inout location : String) : void
        fGlobalAttrDeclsExt.put(((location!=null) ? location : "") + "," + decl.fName, decl);
        if (decl.getNamespaceItem() == null) {
            decl.setNamespaceItem(this);
        }
!!!4634626.java!!!	addGlobalAttributeGroupDecl(inout decl : XSAttributeGroupDecl) : void
        fGlobalAttrGrpDecls.put(decl.fName, decl);
        decl.setNamespaceItem(this);
!!!4634754.java!!!	addGlobalAttributeGroupDecl(inout decl : XSAttributeGroupDecl, inout location : String) : void
        fGlobalAttrGrpDeclsExt.put(((location!=null) ? location : "") + "," + decl.fName, decl);
        if (decl.getNamespaceItem() == null) {
            decl.setNamespaceItem(this);
        }
!!!4634882.java!!!	addGlobalElementDeclAll(inout decl : XSElementDecl) : void
        if (fAllGlobalElemDecls.get(decl) == null) {
            fAllGlobalElemDecls.put(decl, decl);
            // if there is a substitution group affiliation, store in an array,
            // for further constraint checking: UPA, PD, EDC
            if (decl.fSubGroup != null) {
               if (fSubGroupCount == fSubGroups.length)
                    fSubGroups = resize(fSubGroups, fSubGroupCount+INC_SIZE);
                fSubGroups[fSubGroupCount++] = decl;
            }
        }
!!!4635010.java!!!	addGlobalElementDecl(inout decl : XSElementDecl) : void
        fGlobalElemDecls.put(decl.fName, decl);
        decl.setNamespaceItem(this);
!!!4635138.java!!!	addGlobalElementDecl(inout decl : XSElementDecl, inout location : String) : void
        fGlobalElemDeclsExt.put(((location != null) ? location : "") + "," + decl.fName, decl);
        if (decl.getNamespaceItem() == null) {
            decl.setNamespaceItem(this);
        }
!!!4635266.java!!!	addGlobalGroupDecl(inout decl : XSGroupDecl) : void
        fGlobalGroupDecls.put(decl.fName, decl);
        decl.setNamespaceItem(this);
!!!4635394.java!!!	addGlobalGroupDecl(inout decl : XSGroupDecl, inout location : String) : void
        fGlobalGroupDeclsExt.put(((location!=null) ? location : "") + "," + decl.fName, decl);
        if (decl.getNamespaceItem() == null) {
            decl.setNamespaceItem(this);
        }
!!!4635522.java!!!	addGlobalNotationDecl(inout decl : XSNotationDecl) : void
        fGlobalNotationDecls.put(decl.fName, decl);
        decl.setNamespaceItem(this);
!!!4635650.java!!!	addGlobalNotationDecl(inout decl : XSNotationDecl, inout location : String) : void
        fGlobalNotationDeclsExt.put(((location!=null) ? location : "") + "," +decl.fName, decl);
        if (decl.getNamespaceItem() == null) {
            decl.setNamespaceItem(this);
        }
!!!4635778.java!!!	addGlobalTypeDecl(inout decl : XSTypeDefinition) : void
        fGlobalTypeDecls.put(decl.getName(), decl);
        if (decl instanceof XSComplexTypeDecl) {
            ((XSComplexTypeDecl) decl).setNamespaceItem(this);
        }
        else if (decl instanceof XSSimpleTypeDecl) {
            ((XSSimpleTypeDecl) decl).setNamespaceItem(this);
        }
!!!4635906.java!!!	addGlobalTypeDecl(inout decl : XSTypeDefinition, inout location : String) : void
        fGlobalTypeDeclsExt.put(((location!=null) ? location : "") + "," + decl.getName(), decl);
        if (decl.getNamespaceItem() == null) {
            if (decl instanceof XSComplexTypeDecl) {
                ((XSComplexTypeDecl) decl).setNamespaceItem(this);
            }
            else if (decl instanceof XSSimpleTypeDecl) {
                ((XSSimpleTypeDecl) decl).setNamespaceItem(this);
            }
        }
!!!4636034.java!!!	addGlobalComplexTypeDecl(inout decl : XSComplexTypeDecl) : void
        fGlobalTypeDecls.put(decl.getName(), decl);
        decl.setNamespaceItem(this);
!!!4636162.java!!!	addGlobalComplexTypeDecl(inout decl : XSComplexTypeDecl, inout location : String) : void
        fGlobalTypeDeclsExt.put(((location!=null) ? location : "") + "," + decl.getName(), decl);
        if (decl.getNamespaceItem() == null) {
            decl.setNamespaceItem(this);
        }
!!!4636290.java!!!	addGlobalSimpleTypeDecl(inout decl : XSSimpleType) : void
        fGlobalTypeDecls.put(decl.getName(), decl);
        if (decl instanceof XSSimpleTypeDecl) {
            ((XSSimpleTypeDecl) decl).setNamespaceItem(this);
        }
!!!4636418.java!!!	addGlobalSimpleTypeDecl(inout decl : XSSimpleType, inout location : String) : void
        fGlobalTypeDeclsExt.put(((location != null) ? location : "") + "," + decl.getName(), decl);
        if (decl.getNamespaceItem() == null && decl instanceof XSSimpleTypeDecl) {
            ((XSSimpleTypeDecl) decl).setNamespaceItem(this);
        }
!!!4636546.java!!!	addIDConstraintDecl(inout elmDecl : XSElementDecl, inout decl : IdentityConstraint) : void
        elmDecl.addIDConstraint(decl);
        fGlobalIDConstraintDecls.put(decl.getIdentityConstraintName(), decl);
!!!4636674.java!!!	addIDConstraintDecl(inout elmDecl : XSElementDecl, inout decl : IdentityConstraint, inout location : String) : void
        fGlobalIDConstraintDeclsExt.put(((location != null) ? location : "") + "," + decl.getIdentityConstraintName(), decl);
!!!4636802.java!!!	getGlobalAttributeDecl(inout declName : String) : XSAttributeDecl
        return(XSAttributeDecl)fGlobalAttrDecls.get(declName);
!!!4636930.java!!!	getGlobalAttributeDecl(inout declName : String, inout location : String) : XSAttributeDecl
        return(XSAttributeDecl)fGlobalAttrDeclsExt.get(((location != null) ? location : "") + "," + declName);
!!!4637058.java!!!	getGlobalAttributeGroupDecl(inout declName : String) : XSAttributeGroupDecl
        return(XSAttributeGroupDecl)fGlobalAttrGrpDecls.get(declName);
!!!4637186.java!!!	getGlobalAttributeGroupDecl(inout declName : String, inout location : String) : XSAttributeGroupDecl
        return(XSAttributeGroupDecl)fGlobalAttrGrpDeclsExt.get(((location != null) ? location : "") + "," + declName);
!!!4637314.java!!!	getGlobalElementDecl(inout declName : String) : XSElementDecl
        return(XSElementDecl)fGlobalElemDecls.get(declName);
!!!4637442.java!!!	getGlobalElementDecl(inout declName : String, inout location : String) : XSElementDecl
        return(XSElementDecl)fGlobalElemDeclsExt.get(((location != null) ? location : "") + "," + declName);
!!!4637570.java!!!	getGlobalGroupDecl(inout declName : String) : XSGroupDecl
        return(XSGroupDecl)fGlobalGroupDecls.get(declName);
!!!4637698.java!!!	getGlobalGroupDecl(inout declName : String, inout location : String) : XSGroupDecl
        return(XSGroupDecl)fGlobalGroupDeclsExt.get(((location != null) ? location : "") + "," + declName);
!!!4637826.java!!!	getGlobalNotationDecl(inout declName : String) : XSNotationDecl
        return(XSNotationDecl)fGlobalNotationDecls.get(declName);
!!!4637954.java!!!	getGlobalNotationDecl(inout declName : String, inout location : String) : XSNotationDecl
        return(XSNotationDecl)fGlobalNotationDeclsExt.get(((location != null) ? location : "") + "," + declName);
!!!4638082.java!!!	getGlobalTypeDecl(inout declName : String) : XSTypeDefinition
        return(XSTypeDefinition)fGlobalTypeDecls.get(declName);
!!!4638210.java!!!	getGlobalTypeDecl(inout declName : String, inout location : String) : XSTypeDefinition
        return(XSTypeDefinition)fGlobalTypeDeclsExt.get(((location != null) ? location : "") + "," + declName);
!!!4638338.java!!!	getIDConstraintDecl(inout declName : String) : IdentityConstraint
        return(IdentityConstraint)fGlobalIDConstraintDecls.get(declName);
!!!4638466.java!!!	getIDConstraintDecl(inout declName : String, inout location : String) : IdentityConstraint
        return(IdentityConstraint)fGlobalIDConstraintDeclsExt.get(((location != null) ? location : "") + "," + declName);
!!!4638594.java!!!	hasIDConstraints() : boolean
        return fGlobalIDConstraintDecls.getLength() > 0;
!!!4638722.java!!!	addComplexTypeDecl(inout decl : XSComplexTypeDecl, inout locator : SimpleLocator) : void
        if (fCTCount == fComplexTypeDecls.length) {
            fComplexTypeDecls = resize(fComplexTypeDecls, fCTCount+INC_SIZE);
            fCTLocators = resize(fCTLocators, fCTCount+INC_SIZE);
        }
        fCTLocators[fCTCount] = locator;
        fComplexTypeDecls[fCTCount++] = decl;
!!!4638850.java!!!	addRedefinedGroupDecl(inout derived : XSGroupDecl, inout base : XSGroupDecl, inout locator : SimpleLocator) : void
        if (fRGCount == fRedefinedGroupDecls.length) {
            // double array size each time.
            fRedefinedGroupDecls = resize(fRedefinedGroupDecls, fRGCount << 1);
            fRGLocators = resize(fRGLocators, fRGCount);
        }
        fRGLocators[fRGCount/2] = locator;
        fRedefinedGroupDecls[fRGCount++] = derived;
        fRedefinedGroupDecls[fRGCount++] = base;
!!!4638978.java!!!	getUncheckedComplexTypeDecls() : XSComplexTypeDecl
        if (fCTCount < fComplexTypeDecls.length) {
            fComplexTypeDecls = resize(fComplexTypeDecls, fCTCount);
            fCTLocators = resize(fCTLocators, fCTCount);
        }
        return fComplexTypeDecls;
!!!4639106.java!!!	getUncheckedCTLocators() : SimpleLocator
        if (fCTCount < fCTLocators.length) {
            fComplexTypeDecls = resize(fComplexTypeDecls, fCTCount);
            fCTLocators = resize(fCTLocators, fCTCount);
        }
        return fCTLocators;
!!!4639234.java!!!	getRedefinedGroupDecls() : XSGroupDecl
        if (fRGCount < fRedefinedGroupDecls.length) {
            fRedefinedGroupDecls = resize(fRedefinedGroupDecls, fRGCount);
            fRGLocators = resize(fRGLocators, fRGCount/2);
        }
        return fRedefinedGroupDecls;
!!!4639362.java!!!	getRGLocators() : SimpleLocator
        if (fRGCount < fRedefinedGroupDecls.length) {
            fRedefinedGroupDecls = resize(fRedefinedGroupDecls, fRGCount);
            fRGLocators = resize(fRGLocators, fRGCount/2);
        }
        return fRGLocators;
!!!4639490.java!!!	setUncheckedTypeNum(in newSize : int) : void
        fCTCount = newSize;
        fComplexTypeDecls = resize(fComplexTypeDecls, fCTCount);
        fCTLocators = resize(fCTLocators, fCTCount);
!!!4639618.java!!!	getSubstitutionGroups() : XSElementDecl
        if (fSubGroupCount < fSubGroups.length)
            fSubGroups = resize(fSubGroups, fSubGroupCount);
        return fSubGroups;
!!!4652546.java!!!	getS4SGrammar(in schemaVersion : short) : SchemaGrammar
        if (schemaVersion == Constants.SCHEMA_VERSION_1_0) {
            return SG_SchemaNS;
        }
        else {
            return SG_SchemaNSExtended;
        }
!!!4652674.java!!!	resize(inout oldArray : XSComplexTypeDecl [[]], in newSize : int) : XSComplexTypeDecl
        XSComplexTypeDecl[] newArray = new XSComplexTypeDecl[newSize];
        System.arraycopy(oldArray, 0, newArray, 0, Math.min(oldArray.length, newSize));
        return newArray;
!!!4652802.java!!!	resize(inout oldArray : XSGroupDecl [[]], in newSize : int) : XSGroupDecl
        XSGroupDecl[] newArray = new XSGroupDecl[newSize];
        System.arraycopy(oldArray, 0, newArray, 0, Math.min(oldArray.length, newSize));
        return newArray;
!!!4652930.java!!!	resize(inout oldArray : XSElementDecl [[]], in newSize : int) : XSElementDecl
        XSElementDecl[] newArray = new XSElementDecl[newSize];
        System.arraycopy(oldArray, 0, newArray, 0, Math.min(oldArray.length, newSize));
        return newArray;
!!!4653058.java!!!	resize(inout oldArray : SimpleLocator [[]], in newSize : int) : SimpleLocator
        SimpleLocator[] newArray = new SimpleLocator[newSize];
        System.arraycopy(oldArray, 0, newArray, 0, Math.min(oldArray.length, newSize));
        return newArray;
!!!4653186.java!!!	addDocument(inout document : Object, inout location : String) : void
        if (fDocuments == null) {
            fDocuments = new Vector();
            fLocations = new Vector();
        }
        fDocuments.addElement(document);
        fLocations.addElement(location);
!!!4653314.java!!!	removeDocument(in index : int) : void
        if (fDocuments != null &&
            index >= 0 &&
            index < fDocuments.size()) {
            fDocuments.removeElementAt(index);
            fLocations.removeElementAt(index);
        }
!!!4653442.java!!!	getSchemaNamespace() : String
        return fTargetNamespace;
!!!4653570.java!!!	getDOMParser() : DOMParser
        if (fDOMParser != null) {
            DOMParser parser = (DOMParser) fDOMParser.get();
            if (parser != null) {
                return parser;
            }
        }
        // REVISIT:  when schema handles XML 1.1, will need to
        // revisit this (and the practice of not prepending an XML decl to the annotation string
        XML11Configuration config = new XML11Configuration(fSymbolTable);
        // note that this should never produce errors or require
        // entity resolution, so just a barebones configuration with
        // a couple of feature  set will do fine
        config.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.NAMESPACES_FEATURE, true);
        config.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.VALIDATION_FEATURE, false);

        DOMParser parser = new DOMParser(config);
        try {
            parser.setFeature(Constants.XERCES_FEATURE_PREFIX + Constants.DEFER_NODE_EXPANSION_FEATURE, false);
        }
        catch (SAXException exc) {}
        fDOMParser = new SoftReference(parser);
        return parser;
!!!4653698.java!!!	getSAXParser() : SAXParser
        if (fSAXParser != null) {
            SAXParser parser = (SAXParser) fSAXParser.get();
            if (parser != null) {
                return parser;
            }
        }
        // REVISIT:  when schema handles XML 1.1, will need to
        // revisit this (and the practice of not prepending an XML decl to the annotation string
        XML11Configuration config = new XML11Configuration(fSymbolTable);
        // note that this should never produce errors or require
        // entity resolution, so just a barebones configuration with
        // a couple of feature  set will do fine
        config.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.NAMESPACES_FEATURE, true);
        config.setFeature(Constants.SAX_FEATURE_PREFIX + Constants.VALIDATION_FEATURE, false);
        SAXParser parser = new SAXParser(config);
        fSAXParser = new SoftReference(parser);
        return parser;
!!!4653826.java!!!	getComponents(in objectType : short) : XSNamedMap
        if (objectType <= 0 || objectType > MAX_COMP_IDX ||
            !GLOBAL_COMP[objectType]) {
            return XSNamedMapImpl.EMPTY_MAP;
        }

        if (fComponents == null)
            fComponents = new XSNamedMap[MAX_COMP_IDX+1];

        // get the hashtable for this type of components
        if (fComponents[objectType] == null) {
            SymbolHash table = null;
            switch (objectType) {
            case XSConstants.TYPE_DEFINITION:
            case XSTypeDefinition.COMPLEX_TYPE:
            case XSTypeDefinition.SIMPLE_TYPE:
                table = fGlobalTypeDecls;
                break;
            case XSConstants.ATTRIBUTE_DECLARATION:
                table = fGlobalAttrDecls;
                break;
            case XSConstants.ELEMENT_DECLARATION:
                table = fGlobalElemDecls;
                break;
            case XSConstants.ATTRIBUTE_GROUP:
                table = fGlobalAttrGrpDecls;
                break;
            case XSConstants.MODEL_GROUP_DEFINITION:
                table = fGlobalGroupDecls;
                break;
            case XSConstants.NOTATION_DECLARATION:
                table = fGlobalNotationDecls;
                break;
            }

            // for complex/simple types, create a special implementation,
            // which take specific types out of the hash table
            if (objectType == XSTypeDefinition.COMPLEX_TYPE ||
                objectType == XSTypeDefinition.SIMPLE_TYPE) {
                fComponents[objectType] = new XSNamedMap4Types(fTargetNamespace, table, objectType);
            }
            else {
                fComponents[objectType] = new XSNamedMapImpl(fTargetNamespace, table);
            }
        }

        return fComponents[objectType];
!!!4653954.java!!!	getComponentsExt(in objectType : short) : ObjectList
        if (objectType <= 0 || objectType > MAX_COMP_IDX ||
            !GLOBAL_COMP[objectType]) {
            return ObjectListImpl.EMPTY_LIST;
        }

        if (fComponentsExt == null)
            fComponentsExt = new ObjectList[MAX_COMP_IDX+1];

        // get the hashtable for this type of components
        if (fComponentsExt[objectType] == null) {
            SymbolHash table = null;
            switch (objectType) {
            case XSConstants.TYPE_DEFINITION:
            case XSTypeDefinition.COMPLEX_TYPE:
            case XSTypeDefinition.SIMPLE_TYPE:
                table = fGlobalTypeDeclsExt;
                break;
            case XSConstants.ATTRIBUTE_DECLARATION:
                table = fGlobalAttrDeclsExt;
                break;
            case XSConstants.ELEMENT_DECLARATION:
                table = fGlobalElemDeclsExt;
                break;
            case XSConstants.ATTRIBUTE_GROUP:
                table = fGlobalAttrGrpDeclsExt;
                break;
            case XSConstants.MODEL_GROUP_DEFINITION:
                table = fGlobalGroupDeclsExt;
                break;
            case XSConstants.NOTATION_DECLARATION:
                table = fGlobalNotationDeclsExt;
                break;
            }

            Object[] entries = table.getEntries();
            fComponentsExt[objectType] = new ObjectListImpl(entries, entries.length);
        }

        return fComponentsExt[objectType];
!!!4654082.java!!!	resetComponents() : void
        fComponents = null;
        fComponentsExt = null;
!!!4654210.java!!!	getTypeDefinition(inout name : String) : XSTypeDefinition
        return getGlobalTypeDecl(name);
!!!4654338.java!!!	getAttributeDeclaration(inout name : String) : XSAttributeDeclaration
        return getGlobalAttributeDecl(name);
!!!4654466.java!!!	getElementDeclaration(inout name : String) : XSElementDeclaration
        return getGlobalElementDecl(name);
!!!4654594.java!!!	getAttributeGroup(inout name : String) : XSAttributeGroupDefinition
        return getGlobalAttributeGroupDecl(name);
!!!4654722.java!!!	getModelGroupDefinition(inout name : String) : XSModelGroupDefinition
        return getGlobalGroupDecl(name);
!!!4654850.java!!!	getNotationDeclaration(inout name : String) : XSNotationDeclaration
        return getGlobalNotationDecl(name);
!!!4654978.java!!!	getDocumentLocations() : StringList
        return new StringListImpl(fLocations);
!!!4655106.java!!!	toXSModel() : XSModel
        return new XSModelImpl(new SchemaGrammar[]{this});
!!!4655234.java!!!	toXSModel(inout grammars : XSGrammar [[]]) : XSModel
        if (grammars == null || grammars.length == 0)
            return toXSModel();

        int len = grammars.length;
        boolean hasSelf = false;
        for (int i = 0; i < len; i++) {
            if (grammars[i] == this) {
                hasSelf = true;
                break;
            }
        }

        SchemaGrammar[] gs = new SchemaGrammar[hasSelf ? len : len+1];
        for (int i = 0; i < len; i++)
            gs[i] = (SchemaGrammar)grammars[i];
        if (!hasSelf)
            gs[len] = this;
        return new XSModelImpl(gs);
!!!4655362.java!!!	getAnnotations() : XSObjectList
        if (fNumAnnotations == 0) {
            return XSObjectListImpl.EMPTY_LIST;
        }
        return new XSObjectListImpl(fAnnotations, fNumAnnotations);
!!!4655490.java!!!	addAnnotation(inout annotation : XSAnnotationImpl) : void
        if (annotation == null) {
            return;
        }
        if (fAnnotations == null) {
            fAnnotations = new XSAnnotationImpl[2];
        }
        else if (fNumAnnotations == fAnnotations.length) {
            XSAnnotationImpl[] newArray = new XSAnnotationImpl[fNumAnnotations << 1];
            System.arraycopy(fAnnotations, 0, newArray, 0, fNumAnnotations);
            fAnnotations = newArray;
        }
        fAnnotations[fNumAnnotations++] = annotation;
!!!4655618.java!!!	setImmutable(inout isImmutable : boolean) : void
        fIsImmutable = isImmutable;
!!!4655746.java!!!	isImmutable() : boolean
        return fIsImmutable;
