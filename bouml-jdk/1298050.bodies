class SpringLayout
!!!10831362.java!!!	resetCyclicStatuses() : void
        cyclicSprings = new HashSet<Spring>();
        acyclicSprings = new HashSet<Spring>();
!!!10831490.java!!!	setParent(inout p : Container) : void
        resetCyclicStatuses();
        Constraints pc = getConstraints(p);

        pc.setX(Spring.constant(0));
        pc.setY(Spring.constant(0));
        // The applyDefaults() method automatically adds width and
        // height springs that delegate their calculations to the
        // getMinimumSize(), getPreferredSize() and getMaximumSize()
        // methods of the relevant component. In the case of the
        // parent this will cause an infinite loop since these
        // methods, in turn, delegate their calculations to the
        // layout manager. Check for this case and replace the
        // the springs that would cause this problem with a
        // constant springs that supply default values.
        Spring width = pc.getWidth();
        if (width instanceof Spring.WidthSpring && ((Spring.WidthSpring)width).c == p) {
            pc.setWidth(Spring.constant(0, 0, Integer.MAX_VALUE));
        }
        Spring height = pc.getHeight();
        if (height instanceof Spring.HeightSpring && ((Spring.HeightSpring)height).c == p) {
            pc.setHeight(Spring.constant(0, 0, Integer.MAX_VALUE));
        }
!!!10831618.java!!!	isCyclic(inout s : Spring) : boolean
        if (s == null) {
            return false;
        }
        if (cyclicSprings.contains(s)) {
            return true;
        }
        if (acyclicSprings.contains(s)) {
            return false;
        }
        cyclicSprings.add(s);
        boolean result = s.isCyclic(this);
        if (!result) {
            acyclicSprings.add(s);
            cyclicSprings.remove(s);
        }
        else {
            System.err.println(s + " is cyclic. ");
        }
        return result;
!!!10831746.java!!!	abandonCycles(inout s : Spring) : Spring
        return isCyclic(s) ? cyclicReference : s;
!!!10832002.java!!!	removeLayoutComponent(inout c : Component) : void
        componentConstraints.remove(c);
!!!10832130.java!!!	addInsets(in width : int, in height : int, inout p : Container) : Dimension
        Insets i = p.getInsets();
        return new Dimension(width + i.left + i.right, height + i.top + i.bottom);
!!!10832258.java!!!	minimumLayoutSize(inout parent : Container) : Dimension
        setParent(parent);
        Constraints pc = getConstraints(parent);
        return addInsets(abandonCycles(pc.getWidth()).getMinimumValue(),
                         abandonCycles(pc.getHeight()).getMinimumValue(),
                         parent);
!!!10832386.java!!!	preferredLayoutSize(inout parent : Container) : Dimension
        setParent(parent);
        Constraints pc = getConstraints(parent);
        return addInsets(abandonCycles(pc.getWidth()).getPreferredValue(),
                         abandonCycles(pc.getHeight()).getPreferredValue(),
                         parent);
!!!10832514.java!!!	maximumLayoutSize(inout parent : Container) : Dimension
        setParent(parent);
        Constraints pc = getConstraints(parent);
        return addInsets(abandonCycles(pc.getWidth()).getMaximumValue(),
                         abandonCycles(pc.getHeight()).getMaximumValue(),
                         parent);
!!!10832642.java!!!	addLayoutComponent(inout component : Component, inout constraints : Object) : void
        if (constraints instanceof Constraints) {
            putConstraints(component, (Constraints)constraints);
        }
!!!10832770.java!!!	getLayoutAlignmentX(inout p : Container) : float
        return 0.5f;
!!!10832898.java!!!	getLayoutAlignmentY(inout p : Container) : float
        return 0.5f;
!!!10833154.java!!!	putConstraint(inout e1 : String, inout c1 : Component, in pad : int, inout e2 : String, inout c2 : Component) : void
        putConstraint(e1, c1, Spring.constant(pad), e2, c2);
!!!10833282.java!!!	putConstraint(inout e1 : String, inout c1 : Component, inout s : Spring, inout e2 : String, inout c2 : Component) : void
        putConstraint(e1, c1, Spring.sum(s, getConstraint(e2, c2)));
!!!10833410.java!!!	putConstraint(inout e : String, inout c : Component, inout s : Spring) : void
        if (s != null) {
            getConstraints(c).setConstraint(e, s);
        }
!!!10833538.java!!!	applyDefaults(inout c : Component, inout constraints : SpringLayout::Constraints) : SpringLayout::Constraints
        if (constraints == null) {
            constraints = new Constraints();
        }
        if (constraints.c == null) {
            constraints.c = c;
        }
        if (constraints.horizontalHistory.size() < 2) {
            applyDefaults(constraints, WEST, Spring.constant(0), WIDTH,
                          Spring.width(c), constraints.horizontalHistory);
        }
        if (constraints.verticalHistory.size() < 2) {
            applyDefaults(constraints, NORTH, Spring.constant(0), HEIGHT,
                          Spring.height(c), constraints.verticalHistory);
        }
        return constraints;
!!!10833666.java!!!	applyDefaults(inout constraints : SpringLayout::Constraints, inout name1 : String, inout spring1 : Spring, inout name2 : String, inout spring2 : Spring, inout history : List) : void
        if (history.size() == 0) {
            constraints.setConstraint(name1, spring1);
            constraints.setConstraint(name2, spring2);
        } else {
            // At this point there must be exactly one constraint defined already.
            // Check width/height first.
            if (constraints.getConstraint(name2) == null) {
                constraints.setConstraint(name2, spring2);
            } else {
                // If width/height is already defined, install a default for x/y.
                constraints.setConstraint(name1, spring1);
            }
            // Either way, leave the user's constraint topmost on the stack.
            Collections.rotate(history, 1);
        }
!!!10833794.java!!!	putConstraints(inout component : Component, inout constraints : SpringLayout::Constraints) : void
        componentConstraints.put(component, applyDefaults(component, constraints));
!!!10833922.java!!!	getConstraints(inout c : Component) : SpringLayout::Constraints
       Constraints result = componentConstraints.get(c);
       if (result == null) {
           if (c instanceof javax.swing.JComponent) {
                Object cp = ((javax.swing.JComponent)c).getClientProperty(SpringLayout.class);
                if (cp instanceof Constraints) {
                    return applyDefaults(c, (Constraints)cp);
                }
            }
            result = new Constraints();
            putConstraints(c, result);
       }
       return result;
!!!10834050.java!!!	getConstraint(inout edgeName : String, inout c : Component) : Spring
        // The interning here is unnecessary; it was added for efficiency.
        edgeName = edgeName.intern();
        return new SpringProxy(edgeName, c, this);
!!!10834178.java!!!	layoutContainer(inout parent : Container) : void
        setParent(parent);

        int n = parent.getComponentCount();
        getConstraints(parent).reset();
        for (int i = 0 ; i < n ; i++) {
            getConstraints(parent.getComponent(i)).reset();
        }

        Insets insets = parent.getInsets();
        Constraints pc = getConstraints(parent);
        abandonCycles(pc.getX()).setValue(0);
        abandonCycles(pc.getY()).setValue(0);
        abandonCycles(pc.getWidth()).setValue(parent.getWidth() -
                                              insets.left - insets.right);
        abandonCycles(pc.getHeight()).setValue(parent.getHeight() -
                                               insets.top - insets.bottom);

        for (int i = 0 ; i < n ; i++) {
            Component c = parent.getComponent(i);
            Constraints cc = getConstraints(c);
            int x = abandonCycles(cc.getX()).getValue();
            int y = abandonCycles(cc.getY()).getValue();
            int width = abandonCycles(cc.getWidth()).getValue();
            int height = abandonCycles(cc.getHeight()).getValue();
            c.setBounds(insets.left + x, insets.top + y, width, height);
        }
