class RFC2253Parser
!!!5493890.java!!!	rfc2253toXMLdsig(inout dn : String) : String
        // Transform from RFC1779 to RFC2253
        String normalized = normalize(dn, true);

        return rfctoXML(normalized);
!!!5494018.java!!!	xmldsigtoRFC2253(inout dn : String) : String
        // Transform from RFC1779 to RFC2253
        String normalized = normalize(dn, false);

        return xmltoRFC(normalized);
!!!5494146.java!!!	normalize(inout dn : String) : String
        return normalize(dn, true);
!!!5494274.java!!!	normalize(inout dn : String, inout toXml : boolean) : String
        //if empty string
        if ((dn == null) || dn.equals("")) {
            return "";
        }

        try {
            String DN = semicolonToComma(dn);
            StringBuilder sb = new StringBuilder();
            int i = 0;
            int l = 0;
            int k;

            //for name component
            for (int j = 0; (k = DN.indexOf(',', j)) >= 0; j = k + 1) {
                l += countQuotes(DN, j, k);

                if ((k > 0) && (DN.charAt(k - 1) != '\\') && (l % 2) == 0) {
                    sb.append(parseRDN(DN.substring(i, k).trim(), toXml) + ",");

                    i = k + 1;
                    l = 0;
                }
            }

            sb.append(parseRDN(trim(DN.substring(i)), toXml));

            return sb.toString();
        } catch (IOException ex) {
            return dn;
        }
!!!5494402.java!!!	parseRDN(inout str : String, inout toXml : boolean) : String
        StringBuilder sb = new StringBuilder();
        int i = 0;
        int l = 0;
        int k;

        for (int j = 0; (k = str.indexOf('+', j)) >= 0; j = k + 1) {
            l += countQuotes(str, j, k);

            if ((k > 0) && (str.charAt(k - 1) != '\\') && (l % 2) == 0) {
                sb.append(parseATAV(trim(str.substring(i, k)), toXml) + "+");

                i = k + 1;
                l = 0;
            }
        }

        sb.append(parseATAV(trim(str.substring(i)), toXml));

        return sb.toString();
!!!5494530.java!!!	parseATAV(inout str : String, inout toXml : boolean) : String
        int i = str.indexOf('=');

        if ((i == -1) || ((i > 0) && (str.charAt(i - 1) == '\\'))) {
            return str;
        }
        String attrType = normalizeAT(str.substring(0, i));
        // only normalize if value is a String
        String attrValue = null;
        if (attrType.charAt(0) >= '0' && attrType.charAt(0) <= '9') {
            attrValue = str.substring(i + 1);
        } else {
            attrValue = normalizeV(str.substring(i + 1), toXml);
        }

        return attrType + "=" + attrValue;

!!!5494658.java!!!	normalizeAT(inout str : String) : String

        String at = str.toUpperCase().trim();

        if (at.startsWith("OID")) {
            at = at.substring(3);
        }

        return at;
!!!5494786.java!!!	normalizeV(inout str : String, inout toXml : boolean) : String
        String value = trim(str);

        if (value.startsWith("\"")) {
            StringBuilder sb = new StringBuilder();
            StringReader sr = new StringReader(value.substring(1, value.length() - 1));
            int i = 0;
            char c;

            while ((i = sr.read()) > -1) {
                c = (char) i;

                //the following char is defined at 4.Relationship with RFC1779 and LDAPv2 inrfc2253
                if ((c == ',') || (c == '=') || (c == '+') || (c == '<')
                    || (c == '>') || (c == '#') || (c == ';')) {
                    sb.append('\\');
                }

                sb.append(c);
            }

            value = trim(sb.toString());
        }

        if (toXml) {
            if (value.startsWith("#")) {
                value = '\\' + value;
            }
        } else {
            if (value.startsWith("\\#")) {
                value = value.substring(1);
            }
        }

        return value;
!!!5494914.java!!!	rfctoXML(inout string : String) : String
        try {
            String s = changeLess32toXML(string);

            return changeWStoXML(s);
        } catch (Exception e) {
            return string;
        }
!!!5495042.java!!!	xmltoRFC(inout string : String) : String
        try {
            String s = changeLess32toRFC(string);

            return changeWStoRFC(s);
        } catch (Exception e) {
            return string;
        }
!!!5495170.java!!!	changeLess32toRFC(inout string : String) : String
        StringBuilder sb = new StringBuilder();
        StringReader sr = new StringReader(string);
        int i = 0;
        char c;

        while ((i = sr.read()) > -1) {
            c = (char) i;

            if (c == '\\') {
                sb.append(c);

                char c1 = (char) sr.read();
                char c2 = (char) sr.read();

                //65 (A) 97 (a)
                if ((((c1 >= 48) && (c1 <= 57)) || ((c1 >= 65) && (c1 <= 70)) || ((c1 >= 97) && (c1 <= 102)))
                    && (((c2 >= 48) && (c2 <= 57))
                        || ((c2 >= 65) && (c2 <= 70))
                        || ((c2 >= 97) && (c2 <= 102)))) {
                    char ch = (char) Byte.parseByte("" + c1 + c2, 16);

                    sb.append(ch);
                } else {
                    sb.append(c1);
                    sb.append(c2);
                }
            } else {
                sb.append(c);
            }
        }

        return sb.toString();
!!!5495298.java!!!	changeLess32toXML(inout string : String) : String
        StringBuilder sb = new StringBuilder();
        StringReader sr = new StringReader(string);
        int i = 0;

        while ((i = sr.read()) > -1) {
            if (i < 32) {
                sb.append('\\');
                sb.append(Integer.toHexString(i));
            } else {
                sb.append((char) i);
            }
        }

        return sb.toString();
!!!5495426.java!!!	changeWStoXML(inout string : String) : String
        StringBuilder sb = new StringBuilder();
        StringReader sr = new StringReader(string);
        int i = 0;
        char c;

        while ((i = sr.read()) > -1) {
            c = (char) i;

            if (c == '\\') {
                char c1 = (char) sr.read();

                if (c1 == ' ') {
                    sb.append('\\');

                    String s = "20";

                    sb.append(s);
                } else {
                    sb.append('\\');
                    sb.append(c1);
                }
            } else {
                sb.append(c);
            }
        }

        return sb.toString();
!!!5495554.java!!!	changeWStoRFC(inout string : String) : String
        StringBuilder sb = new StringBuilder();
        int i = 0;
        int k;

        for (int j = 0; (k = string.indexOf("\\20", j)) >= 0; j = k + 3) {
            sb.append(trim(string.substring(i, k)) + "\\ ");

            i = k + 3;
        }

        sb.append(string.substring(i));

        return sb.toString();
!!!5495682.java!!!	semicolonToComma(inout str : String) : String
        return removeWSandReplace(str, ";", ",");
!!!5495810.java!!!	removeWhiteSpace(inout str : String, inout symbol : String) : String
        return removeWSandReplace(str, symbol, symbol);
!!!5495938.java!!!	removeWSandReplace(inout str : String, inout symbol : String, inout replace : String) : String
        StringBuilder sb = new StringBuilder();
        int i = 0;
        int l = 0;
        int k;

        for (int j = 0; (k = str.indexOf(symbol, j)) >= 0; j = k + 1) {
            l += countQuotes(str, j, k);

            if ((k > 0) && (str.charAt(k - 1) != '\\') && (l % 2) == 0) {
                sb.append(trim(str.substring(i, k)) + replace);

                i = k + 1;
                l = 0;
            }
        }

        sb.append(trim(str.substring(i)));

        return sb.toString();
!!!5496066.java!!!	countQuotes(inout s : String, in i : int, in j : int) : int
        int k = 0;

        for (int l = i; l < j; l++) {
            if (s.charAt(l) == '"') {
                k++;
            }
        }

        return k;
!!!5496194.java!!!	trim(inout str : String) : String

        String trimed = str.trim();
        int i = str.indexOf(trimed) + trimed.length();

        if ((str.length() > i) && trimed.endsWith("\\")
            && !trimed.endsWith("\\\\") && (str.charAt(i) == ' ')) {
            trimed = trimed + " ";
        }

        return trimed;
