format 222
"stream" // jdk1.8::java::util::stream
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/util/stream/"
  java_package "java.util.stream"
  classview 135042 "stream"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 184706 "Stream"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1154434 // BaseStream
        rank 0 explicit_value ""
      actual class class_ref 1154434 // BaseStream
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A sequence of elements supporting sequential and parallel aggregate
operations.  The following example illustrates an aggregate operation using
{@link Stream} and {@link IntStream}:

<pre>{@code
    int sum = widgets.stream()
                     .filter(w -> w.getColor() == RED)
                     .mapToInt(w -> w.getWeight())
                     .sum();
}</pre>

In this example, {@code widgets} is a {@code Collection<Widget>}.  We create
a stream of {@code Widget} objects via {@link Collection#stream Collection.stream()},
filter it to produce a stream containing only the red widgets, and then
transform it into a stream of {@code int} values representing the weight of
each red widget. Then this stream is summed to produce a total weight.

<p>In addition to {@code Stream}, which is a stream of object references,
there are primitive specializations for {@link IntStream}, {@link LongStream},
and {@link DoubleStream}, all of which are referred to as \"streams\" and
conform to the characteristics and restrictions described here.

<p>To perform a computation, stream
<a href=\"package-summary.html#StreamOps\">operations</a> are composed into a
<em>stream pipeline</em>.  A stream pipeline consists of a source (which
might be an array, a collection, a generator function, an I/O channel,
etc), zero or more <em>intermediate operations</em> (which transform a
stream into another stream, such as {@link Stream#filter(Predicate)}), and a
<em>terminal operation</em> (which produces a result or side-effect, such
as {@link Stream#count()} or {@link Stream#forEach(Consumer)}).
Streams are lazy; computation on the source data is only performed when the
terminal operation is initiated, and source elements are consumed only
as needed.

<p>Collections and streams, while bearing some superficial similarities,
have different goals.  Collections are primarily concerned with the efficient
management of, and access to, their elements.  By contrast, streams do not
provide a means to directly access or manipulate their elements, and are
instead concerned with declaratively describing their source and the
computational operations which will be performed in aggregate on that source.
However, if the provided stream operations do not offer the desired
functionality, the {@link #iterator()} and {@link #spliterator()} operations
can be used to perform a controlled traversal.

<p>A stream pipeline, like the \"widgets\" example above, can be viewed as
a <em>query</em> on the stream source.  Unless the source was explicitly
designed for concurrent modification (such as a {@link ConcurrentHashMap}),
unpredictable or erroneous behavior may result from modifying the stream
source while it is being queried.

<p>Most stream operations accept parameters that describe user-specified
behavior, such as the lambda expression {@code w -> w.getWeight()} passed to
{@code mapToInt} in the example above.  To preserve correct behavior,
these <em>behavioral parameters</em>:
<ul>
<li>must be <a href=\"package-summary.html#NonInterference\">non-interfering</a>
(they do not modify the stream source); and</li>
<li>in most cases must be <a href=\"package-summary.html#Statelessness\">stateless</a>
(their result should not depend on any state that might change during execution
of the stream pipeline).</li>
</ul>

<p>Such parameters are always instances of a
<a href=\"../function/package-summary.html\">functional interface</a> such
as {@link java.util.function.Function}, and are often lambda expressions or
method references.  Unless otherwise specified these parameters must be
<em>non-null</em>.

<p>A stream should be operated on (invoking an intermediate or terminal stream
operation) only once.  This rules out, for example, \"forked\" streams, where
the same source feeds two or more pipelines, or multiple traversals of the
same stream.  A stream implementation may throw {@link IllegalStateException}
if it detects that the stream is being reused. However, since some stream
operations may return their receiver rather than a new stream object, it may
not be possible to detect reuse in all cases.

<p>Streams have a {@link #close()} method and implement {@link AutoCloseable},
but nearly all stream instances do not actually need to be closed after use.
Generally, only streams whose source is an IO channel (such as those returned
by {@link Files#lines(Path, Charset)}) will require closing.  Most streams
are backed by collections, arrays, or generating functions, which require no
special resource management.  (If a stream does require closing, it can be
declared as a resource in a {@code try}-with-resources statement.)

<p>Stream pipelines may execute either sequentially or in
<a href=\"package-summary.html#Parallelism\">parallel</a>.  This
execution mode is a property of the stream.  Streams are created
with an initial choice of sequential or parallel execution.  (For example,
{@link Collection#stream() Collection.stream()} creates a sequential stream,
and {@link Collection#parallelStream() Collection.parallelStream()} creates
a parallel one.)  This choice of execution mode may be modified by the
{@link #sequential()} or {@link #parallel()} methods, and may be queried with
the {@link #isParallel()} method.

@param <T> the type of the stream elements
@since 1.8
@see IntStream
@see LongStream
@see DoubleStream
@see <a href=\"package-summary.html\">java.util.stream</a>
"
      classrelation 3720450 // <realization>
	relation 3720450 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3720450 // <realization>
	  b parent class_ref 1154434 // BaseStream
      end

      operation 9552642 "filter"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream that match
the given predicate.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to each element to determine if it
                 should be included
@return the new stream
"
      end

      operation 9552770 "map"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type}<R> ${name}${(}${t0}<? super T, ? extends R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the results of applying the given
function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param <R> The element type of the new stream
@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9552898 "mapToInt"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 193922 // ToIntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code IntStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">
    intermediate operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9553026 "mapToLong"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 194050 // ToLongFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code LongStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9553154 "mapToDouble"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 194178 // ToDoubleFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DoubleStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9553282 "flatMap"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type}<R> ${name}${(}${t0}<? super T, ? extends Stream<? extends R>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the results of replacing each element of
this stream with the contents of a mapped stream produced by applying
the provided mapping function to each element.  Each mapped stream is
{@link java.util.stream.BaseStream#close() closed} after its contents
have been placed into this stream.  (If a mapped stream is {@code null}
an empty stream is used, instead.)

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@apiNote
The {@code flatMap()} operation has the effect of applying a one-to-many
transformation to the elements of the stream, and then flattening the
resulting elements into a new stream.

<p><b>Examples.</b>

<p>If {@code orders} is a stream of purchase orders, and each purchase
order contains a collection of line items, then the following produces a
stream containing all the line items in all the orders:
<pre>{@code
    orders.flatMap(order -> order.getLineItems().stream())...
}</pre>

<p>If {@code path} is the path to a file, then the following produces a
stream of the {@code words} contained in that file:
<pre>{@code
    Stream<String> lines = Files.lines(path, StandardCharsets.UTF_8);
    Stream<String> words = lines.flatMap(line -> Stream.of(line.split(\" +\")));
}</pre>
The {@code mapper} function passed to {@code flatMap} splits a line,
using a simple regular expression, into an array of words, and then
creates a stream of words from that array.

@param <R> The element type of the new stream
@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element which produces a stream
              of new values
@return the new stream
"
      end

      operation 9553410 "flatMapToInt"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T, ? extends IntStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code IntStream} consisting of the results of replacing each
element of this stream with the contents of a mapped stream produced by
applying the provided mapping function to each element.  Each mapped
stream is {@link java.util.stream.BaseStream#close() closed} after its
contents have been placed into this stream.  (If a mapped stream is
{@code null} an empty stream is used, instead.)

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element which produces a stream
              of new values
@return the new stream
@see #flatMap(Function)
"
      end

      operation 9553538 "flatMapToLong"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T, ? extends LongStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code LongStream} consisting of the results of replacing each
element of this stream with the contents of a mapped stream produced by
applying the provided mapping function to each element.  Each mapped
stream is {@link java.util.stream.BaseStream#close() closed} after its
contents have been placed into this stream.  (If a mapped stream is
{@code null} an empty stream is used, instead.)

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element which produces a stream
              of new values
@return the new stream
@see #flatMap(Function)
"
      end

      operation 9553666 "flatMapToDouble"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T, ? extends DoubleStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code DoubleStream} consisting of the results of replacing
each element of this stream with the contents of a mapped stream produced
by applying the provided mapping function to each element.  Each mapped
stream is {@link java.util.stream.BaseStream#close() closed} after its
contents have placed been into this stream.  (If a mapped stream is
{@code null} an empty stream is used, instead.)

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element which produces a stream
              of new values
@return the new stream
@see #flatMap(Function)
"
      end

      operation 9553794 "distinct"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the distinct elements (according to
{@link Object#equals(Object)}) of this stream.

<p>For ordered streams, the selection of distinct elements is stable
(for duplicated elements, the element appearing first in the encounter
order is preserved.)  For unordered streams, no stability guarantees
are made.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@apiNote
Preserving stability for {@code distinct()} in parallel pipelines is
relatively expensive (requires that the operation act as a full barrier,
with substantial buffering overhead), and stability is often not needed.
Using an unordered stream source (such as {@link #generate(Supplier)})
or removing the ordering constraint with {@link #unordered()} may result
in significantly more efficient execution for {@code distinct()} in parallel
pipelines, if the semantics of your situation permit.  If consistency
with encounter order is required, and you are experiencing poor performance
or memory utilization with {@code distinct()} in parallel pipelines,
switching to sequential execution with {@link #sequential()} may improve
performance.

@return the new stream
"
      end

      operation 9553922 "sorted"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, sorted
according to natural order.  If the elements of this stream are not
{@code Comparable}, a {@code java.lang.ClassCastException} may be thrown
when the terminal operation is executed.

<p>For ordered streams, the sort is stable.  For unordered streams, no
stability guarantees are made.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@return the new stream
"
      end

      operation 9554050 "sorted"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, sorted
according to the provided {@code Comparator}.

<p>For ordered streams, the sort is stable.  For unordered streams, no
stability guarantees are made.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                  <a href=\"package-summary.html#Statelessness\">stateless</a>
                  {@code Comparator} to be used to compare stream elements
@return the new stream
"
      end

      operation 9554178 "peek"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, additionally
performing the provided action on each element as elements are consumed
from the resulting stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

<p>For parallel stream pipelines, the action may be called at
whatever time and in whatever thread the element is made available by the
upstream operation.  If the action modifies shared state,
it is responsible for providing the required synchronization.

@apiNote This method exists mainly to support debugging, where you want
to see the elements as they flow past a certain point in a pipeline:
<pre>{@code
    Stream.of(\"one\", \"two\", \"three\", \"four\")
        .filter(e -> e.length() > 3)
        .peek(e -> System.out.println(\"Filtered value: \" + e))
        .map(String::toUpperCase)
        .peek(e -> System.out.println(\"Mapped value: \" + e))
        .collect(Collectors.toList());
}</pre>

@param action a <a href=\"package-summary.html#NonInterference\">
                non-interfering</a> action to perform on the elements as
                they are consumed from the stream
@return the new stream
"
      end

      operation 9554306 "limit"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param in name "maxSize" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, truncated
to be no longer than {@code maxSize} in length.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
stateful intermediate operation</a>.

@apiNote
While {@code limit()} is generally a cheap operation on sequential
stream pipelines, it can be quite expensive on ordered parallel pipelines,
especially for large values of {@code maxSize}, since {@code limit(n)}
is constrained to return not just any <em>n</em> elements, but the
<em>first n</em> elements in the encounter order.  Using an unordered
stream source (such as {@link #generate(Supplier)}) or removing the
ordering constraint with {@link #unordered()} may result in significant
speedups of {@code limit()} in parallel pipelines, if the semantics of
your situation permit.  If consistency with encounter order is required,
and you are experiencing poor performance or memory utilization with
{@code limit()} in parallel pipelines, switching to sequential execution
with {@link #sequential()} may improve performance.

@param maxSize the number of elements the stream should be limited to
@return the new stream
@throws IllegalArgumentException if {@code maxSize} is negative
"
      end

      operation 9554434 "skip"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param in name "n" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the remaining elements of this stream
after discarding the first {@code n} elements of the stream.
If this stream contains fewer than {@code n} elements then an
empty stream will be returned.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@apiNote
While {@code skip()} is generally a cheap operation on sequential
stream pipelines, it can be quite expensive on ordered parallel pipelines,
especially for large values of {@code n}, since {@code skip(n)}
is constrained to skip not just any <em>n</em> elements, but the
<em>first n</em> elements in the encounter order.  Using an unordered
stream source (such as {@link #generate(Supplier)}) or removing the
ordering constraint with {@link #unordered()} may result in significant
speedups of {@code skip()} in parallel pipelines, if the semantics of
your situation permit.  If consistency with encounter order is required,
and you are experiencing poor performance or memory utilization with
{@code skip()} in parallel pipelines, switching to sequential execution
with {@link #sequential()} may improve performance.

@param n the number of leading elements to skip
@return the new stream
@throws IllegalArgumentException if {@code n} is negative
"
      end

      operation 9554562 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action for each element of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

<p>The behavior of this operation is explicitly nondeterministic.
For parallel stream pipelines, this operation does <em>not</em>
guarantee to respect the encounter order of the stream, as doing so
would sacrifice the benefit of parallelism.  For any given element, the
action may be performed at whatever time and in whatever thread the
library chooses.  If the action accesses shared state, it is
responsible for providing the required synchronization.

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements
"
      end

      operation 9554690 "forEachOrdered"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action for each element of this stream, in the encounter
order of the stream if the stream has a defined encounter order.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

<p>This operation processes the elements one at a time, in encounter
order if one exists.  Performing the action for one element
<a href=\"../concurrent/package-summary.html#MemoryVisibility\"><i>happens-before</i></a>
performing the action for subsequent elements, but for any given element,
the action may be performed in whatever thread the library chooses.

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements
@see #forEach(Consumer)
"
      end

      operation 9554818 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing the elements of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an array containing the elements of this stream
"
      end

      operation 9554946 "toArray"
	cpp_inline public explicit_return_type "A"
	nparams 1
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A> ${type}[] ${name}${(}${t0}<A[]> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing the elements of this stream, using the
provided {@code generator} function to allocate the returned array, as
well as any additional arrays that might be required for a partitioned
execution or for resizing.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote
The generator function takes an integer, which is the size of the
desired array, and produces an array of the desired size.  This can be
concisely expressed with an array constructor reference:
<pre>{@code
    Person[] men = people.stream()
                         .filter(p -> p.getGender() == MALE)
                         .toArray(Person[]::new);
}</pre>

@param <A> the element type of the resulting array
@param generator a function which produces a new array of the desired
                 type and the provided length
@return an array containing the elements in this stream
@throws ArrayStoreException if the runtime type of the array returned
from the array generator is not a supertype of the runtime type of every
element in this stream
"
      end

      operation 9555074 "reduce"
	cpp_inline public explicit_return_type "T"
	nparams 2
	  param inout name "identity" explicit_type "T"
	  param inout name "accumulator" type class_ref 1066626 // BinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using the provided identity value and an
<a href=\"package-summary.html#Associativity\">associative</a>
accumulation function, and returns the reduced value.  This is equivalent
to:
<pre>{@code
    T result = identity;
    for (T element : this stream)
        result = accumulator.apply(result, element)
    return result;
}</pre>

but is not constrained to execute sequentially.

<p>The {@code identity} value must be an identity for the accumulator
function. This means that for all {@code t},
{@code accumulator.apply(identity, t)} is equal to {@code t}.
The {@code accumulator} function must be an
<a href=\"package-summary.html#Associativity\">associative</a> function.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote Sum, min, max, average, and string concatenation are all special
cases of reduction. Summing a stream of numbers can be expressed as:

<pre>{@code
    Integer sum = integers.reduce(0, (a, b) -> a+b);
}</pre>

or:

<pre>{@code
    Integer sum = integers.reduce(0, Integer::sum);
}</pre>

<p>While this may seem a more roundabout way to perform an aggregation
compared to simply mutating a running total in a loop, reduction
operations parallelize more gracefully, without needing additional
synchronization and with greatly reduced risk of data races.

@param identity the identity value for the accumulating function
@param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for combining two values
@return the result of the reduction
"
      end

      operation 9555202 "reduce"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 1
	  param inout name "accumulator" type class_ref 1066626 // BinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using an
<a href=\"package-summary.html#Associativity\">associative</a> accumulation
function, and returns an {@code Optional} describing the reduced value,
if any. This is equivalent to:
<pre>{@code
    boolean foundAny = false;
    T result = null;
    for (T element : this stream) {
        if (!foundAny) {
            foundAny = true;
            result = element;
        }
        else
            result = accumulator.apply(result, element);
    }
    return foundAny ? Optional.of(result) : Optional.empty();
}</pre>

but is not constrained to execute sequentially.

<p>The {@code accumulator} function must be an
<a href=\"package-summary.html#Associativity\">associative</a> function.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for combining two values
@return an {@link Optional} describing the result of the reduction
@throws NullPointerException if the result of the reduction is null
@see #reduce(Object, BinaryOperator)
@see #min(Comparator)
@see #max(Comparator)
"
      end

      operation 9555330 "reduce"
	cpp_inline public explicit_return_type "U"
	nparams 3
	  param inout name "identity" explicit_type "U"
	  param inout name "accumulator" type class_ref 192642 // BiFunction
	  param inout name "combiner" type class_ref 1066626 // BinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type} ${name}${(}${t0} ${p0}, ${t1}<U, ? super T, U> ${p1}, ${t2}<U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using the provided identity, accumulation and
combining functions.  This is equivalent to:
<pre>{@code
    U result = identity;
    for (T element : this stream)
        result = accumulator.apply(result, element)
    return result;
}</pre>

but is not constrained to execute sequentially.

<p>The {@code identity} value must be an identity for the combiner
function.  This means that for all {@code u}, {@code combiner(identity, u)}
is equal to {@code u}.  Additionally, the {@code combiner} function
must be compatible with the {@code accumulator} function; for all
{@code u} and {@code t}, the following must hold:
<pre>{@code
    combiner.apply(u, accumulator.apply(identity, t)) == accumulator.apply(u, t)
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote Many reductions using this form can be represented more simply
by an explicit combination of {@code map} and {@code reduce} operations.
The {@code accumulator} function acts as a fused mapper and accumulator,
which can sometimes be more efficient than separate mapping and reduction,
such as when knowing the previously reduced value allows you to avoid
some computation.

@param <U> The type of the result
@param identity the identity value for the combiner function
@param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for incorporating an additional element into a result
@param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for combining two values, which must be
                   compatible with the accumulator function
@return the result of the reduction
@see #reduce(BinaryOperator)
@see #reduce(Object, BinaryOperator)
"
      end

      operation 9555458 "collect"
	cpp_inline public explicit_return_type "R"
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 192514 // BiConsumer
	  param inout name "combiner" type class_ref 192514 // BiConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<R, ? super T> ${p1}, ${t2}<R, R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#MutableReduction\">mutable
reduction</a> operation on the elements of this stream.  A mutable
reduction is one in which the reduced value is a mutable result container,
such as an {@code ArrayList}, and elements are incorporated by updating
the state of the result rather than by replacing the result.  This
produces a result equivalent to:
<pre>{@code
    R result = supplier.get();
    for (T element : this stream)
        accumulator.accept(result, element);
    return result;
}</pre>

<p>Like {@link #reduce(Object, BinaryOperator)}, {@code collect} operations
can be parallelized without requiring additional synchronization.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote There are many existing classes in the JDK whose signatures are
well-suited for use with method references as arguments to {@code collect()}.
For example, the following will accumulate strings into an {@code ArrayList}:
<pre>{@code
    List<String> asList = stringStream.collect(ArrayList::new, ArrayList::add,
                                               ArrayList::addAll);
}</pre>

<p>The following will take a stream of strings and concatenates them into a
single string:
<pre>{@code
    String concat = stringStream.collect(StringBuilder::new, StringBuilder::append,
                                         StringBuilder::append)
                                .toString();
}</pre>

@param <R> type of the result
@param supplier a function that creates a new result container. For a
                parallel execution, this function may be called
                multiple times and must return a fresh value each time.
@param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for incorporating an additional element into a result
@param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for combining two values, which must be
                   compatible with the accumulator function
@return the result of the reduction
"
      end

      operation 9555586 "collect"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "collector" type class_ref 1155074 // Collector
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R, A> ${type} ${name}${(}${t0}<? super T, A, R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#MutableReduction\">mutable
reduction</a> operation on the elements of this stream using a
{@code Collector}.  A {@code Collector}
encapsulates the functions used as arguments to
{@link #collect(Supplier, BiConsumer, BiConsumer)}, allowing for reuse of
collection strategies and composition of collect operations such as
multiple-level grouping or partitioning.

<p>If the stream is parallel, and the {@code Collector}
is {@link Collector.Characteristics#CONCURRENT concurrent}, and
either the stream is unordered or the collector is
{@link Collector.Characteristics#UNORDERED unordered},
then a concurrent reduction will be performed (see {@link Collector} for
details on concurrent reduction.)

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

<p>When executed in parallel, multiple intermediate results may be
instantiated, populated, and merged so as to maintain isolation of
mutable data structures.  Therefore, even when executed in parallel
with non-thread-safe data structures (such as {@code ArrayList}), no
additional synchronization is needed for a parallel reduction.

@apiNote
The following will accumulate strings into an ArrayList:
<pre>{@code
    List<String> asList = stringStream.collect(Collectors.toList());
}</pre>

<p>The following will classify {@code Person} objects by city:
<pre>{@code
    Map<String, List<Person>> peopleByCity
        = personStream.collect(Collectors.groupingBy(Person::getCity));
}</pre>

<p>The following will classify {@code Person} objects by state and city,
cascading two {@code Collector}s together:
<pre>{@code
    Map<String, Map<String, List<Person>>> peopleByStateAndCity
        = personStream.collect(Collectors.groupingBy(Person::getState,
                                                     Collectors.groupingBy(Person::getCity)));
}</pre>

@param <R> the type of the result
@param <A> the intermediate accumulation type of the {@code Collector}
@param collector the {@code Collector} describing the reduction
@return the result of the reduction
@see #collect(Supplier, BiConsumer, BiConsumer)
@see Collectors
"
      end

      operation 9555714 "min"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minimum element of this stream according to the provided
{@code Comparator}.  This is a special case of a
<a href=\"package-summary.html#Reduction\">reduction</a>.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.

@param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                  <a href=\"package-summary.html#Statelessness\">stateless</a>
                  {@code Comparator} to compare elements of this stream
@return an {@code Optional} describing the minimum element of this stream,
or an empty {@code Optional} if the stream is empty
@throws NullPointerException if the minimum element is null
"
      end

      operation 9555842 "max"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum element of this stream according to the provided
{@code Comparator}.  This is a special case of a
<a href=\"package-summary.html#Reduction\">reduction</a>.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param comparator a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                  <a href=\"package-summary.html#Statelessness\">stateless</a>
                  {@code Comparator} to compare elements of this stream
@return an {@code Optional} describing the maximum element of this stream,
or an empty {@code Optional} if the stream is empty
@throws NullPointerException if the maximum element is null
"
      end

      operation 9555970 "count"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count of elements in this stream.  This is a special case of
a <a href=\"package-summary.html#Reduction\">reduction</a> and is
equivalent to:
<pre>{@code
    return mapToLong(e -> 1L).sum();
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.

@return the count of elements in this stream
"
      end

      operation 9556098 "anyMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether any elements of this stream match the provided
predicate.  May not evaluate the predicate on all elements if not
necessary for determining the result.  If the stream is empty then
{@code false} is returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>existential quantification</em> of the
predicate over the elements of the stream (for some x P(x)).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if any elements of the stream match the provided
predicate, otherwise {@code false}
"
      end

      operation 9556226 "allMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether all elements of this stream match the provided predicate.
May not evaluate the predicate on all elements if not necessary for
determining the result.  If the stream is empty then {@code true} is
returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>universal quantification</em> of the
predicate over the elements of the stream (for all x P(x)).  If the
stream is empty, the quantification is said to be <em>vacuously
satisfied</em> and is always {@code true} (regardless of P(x)).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if either all elements of the stream match the
provided predicate or the stream is empty, otherwise {@code false}
"
      end

      operation 9556354 "noneMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether no elements of this stream match the provided predicate.
May not evaluate the predicate on all elements if not necessary for
determining the result.  If the stream is empty then {@code true} is
returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>universal quantification</em> of the
negated predicate over the elements of the stream (for all x ~P(x)).  If
the stream is empty, the quantification is said to be vacuously satisfied
and is always {@code true}, regardless of P(x).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if either no elements of the stream match the
provided predicate or the stream is empty, otherwise {@code false}
"
      end

      operation 9556482 "findFirst"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link Optional} describing the first element of this stream,
or an empty {@code Optional} if the stream is empty.  If the stream has
no encounter order, then any element may be returned.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@return an {@code Optional} describing the first element of this stream,
or an empty {@code Optional} if the stream is empty
@throws NullPointerException if the element selected is null
"
      end

      operation 9556610 "findAny"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link Optional} describing some element of the stream, or an
empty {@code Optional} if the stream is empty.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

<p>The behavior of this operation is explicitly nondeterministic; it is
free to select any element in the stream.  This is to allow for maximal
performance in parallel operations; the cost is that multiple invocations
on the same source may not return the same result.  (If a stable result
is desired, use {@link #findFirst()} instead.)

@return an {@code Optional} describing some element of this stream, or an
empty {@code Optional} if the stream is empty
@throws NullPointerException if the element selected is null
@see #findFirst()
"
      end

      class 1162242 "Builder"
	visibility public stereotype "interface"
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 163458 // Consumer
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3720578 // <realization>
	  relation 3720578 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3720578 // <realization>
	    b parent class_ref 163458 // Consumer
	end

	operation 9556738 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "t" explicit_type "T"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Adds an element to the stream being built.

@throws IllegalStateException if the builder has already transitioned to
the built state
"
	end

	operation 9556866 "add"
	  cpp_inline public return_type class_ref 1162242 // Builder
	  nparams 1
	    param inout name "t" explicit_type "T"
	  
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds an element to the stream being built.

@implSpec
The default implementation behaves as if:
<pre>{@code
    accept(t)
    return this;
}</pre>

@param t the element to add
@return {@code this} builder
@throws IllegalStateException if the builder has already transitioned to
the built state
"
	end

	operation 9556994 "build"
	  cpp_inline public return_type class_ref 184706 // Stream
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Builds the stream, transitioning this builder to the built state.
An {@code IllegalStateException} is thrown if there are further attempts
to operate on the builder after it has entered the built state.

@return the built stream
@throws IllegalStateException if the builder has already transitioned to
the built state
"
	end
      end

      operation 9557122 "builder"
	class_operation cpp_inline public return_type class_ref 1162242 // Builder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static factories

Returns a builder for a {@code Stream}.

@param <T> type of elements
@return a stream builder
"
      end

      operation 9557250 "empty"
	class_operation cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an empty sequential {@code Stream}.

@param <T> the type of stream elements
@return an empty sequential stream
"
      end

      operation 9557378 "of"
	class_operation cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "t" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential {@code Stream} containing a single element.

@param t the single element
@param <T> the type of stream elements
@return a singleton sequential stream
"
      end

      operation 9557506 "of"
	class_operation cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "" explicit_type "T...values"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SafeVarargs
@SuppressWarnings(\"varargs\")
"
	
	
	
	comment "Returns a sequential ordered stream whose elements are the specified values.

@param <T> the type of stream elements
@param values the elements of the new stream
@return the new stream
"
      end

      operation 9557634 "iterate"
	class_operation cpp_inline public return_type class_ref 184706 // Stream
	nparams 2
	  param in name "seed" explicit_type "T"
	  param in name "f" type class_ref 184834 // UnaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}final ${t0} ${p0}, final ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an infinite sequential ordered {@code Stream} produced by iterative
application of a function {@code f} to an initial element {@code seed},
producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},
{@code f(f(seed))}, etc.

<p>The first element (position {@code 0}) in the {@code Stream} will be
the provided {@code seed}.  For {@code n > 0}, the element at position
{@code n}, will be the result of applying the function {@code f} to the
element at position {@code n - 1}.

@param <T> the type of stream elements
@param seed the initial element
@param f a function to be applied to to the previous element to produce
         a new element
@return a new sequential {@code Stream}
"
      end

      operation 9557762 "generate"
	class_operation cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "s" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an infinite sequential unordered stream where each element is
generated by the provided {@code Supplier}.  This is suitable for
generating constant streams, streams of random elements, etc.

@param <T> the type of stream elements
@param s the {@code Supplier} of generated elements
@return a new infinite sequential unordered {@code Stream}
"
      end

      operation 9557890 "concat"
	class_operation cpp_inline public return_type class_ref 184706 // Stream
	nparams 2
	  param inout name "a" type class_ref 184706 // Stream
	  param inout name "b" type class_ref 184706 // Stream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? extends T> ${p0}, ${t1}<? extends T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a lazily concatenated stream whose elements are all the
elements of the first stream followed by all the elements of the
second stream.  The resulting stream is ordered if both
of the input streams are ordered, and parallel if either of the input
streams is parallel.  When the resulting stream is closed, the close
handlers for both input streams are invoked.

@implNote
Use caution when constructing streams from repeated concatenation.
Accessing an element of a deeply concatenated stream can result in deep
call chains, or even {@code StackOverflowException}.

@param <T> The type of stream elements
@param a the first stream
@param b the second stream
@return the concatenation of the two input streams
"
      end
    end

    class 429570 "IntStream"
      visibility public stereotype "interface"
      nactuals 2
      actual class class_ref 1154434 // BaseStream
        rank 0 explicit_value ""
      actual class class_ref 1154434 // BaseStream
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A sequence of primitive int-valued elements supporting sequential and parallel
aggregate operations.  This is the {@code int} primitive specialization of
{@link Stream}.

<p>The following example illustrates an aggregate operation using
{@link Stream} and {@link IntStream}, computing the sum of the weights of the
red widgets:

<pre>{@code
    int sum = widgets.stream()
                     .filter(w -> w.getColor() == RED)
                     .mapToInt(w -> w.getWeight())
                     .sum();
}</pre>

See the class documentation for {@link Stream} and the package documentation
for <a href=\"package-summary.html\">java.util.stream</a> for additional
specification of streams, stream operations, stream pipelines, and
parallelism.

@since 1.8
@see Stream
@see <a href=\"package-summary.html\">java.util.stream</a>
"
      classrelation 3715970 // <realization>
	relation 3715970 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3715970 // <realization>
	  b parent class_ref 1154434 // BaseStream
      end

      operation 9515394 "filter"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream that match
the given predicate.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to each element to determine if it
                 should be included
@return the new stream
"
      end

      operation 9515522 "map"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 1068162 // IntUnaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the results of applying the given
function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9515650 "mapToObj"
	public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 1068034 // IntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object-valued {@code Stream} consisting of the results of
applying the given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">
    intermediate operation</a>.

@param <U> the element type of the new stream
@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9515778 "mapToLong"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 1068290 // IntToLongFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code LongStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9515906 "mapToDouble"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 1068418 // IntToDoubleFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DoubleStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9516034 "flatMap"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 1068034 // IntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends IntStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the results of replacing each element of
this stream with the contents of a mapped stream produced by applying
the provided mapping function to each element.  Each mapped stream is
{@link java.util.stream.BaseStream#close() closed} after its contents
have been placed into this stream.  (If a mapped stream is {@code null}
an empty stream is used, instead.)

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element which produces an
              {@code IntStream} of new values
@return the new stream
@see Stream#flatMap(Function)
"
      end

      operation 9516162 "distinct"
	public return_type class_ref 429570 // IntStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the distinct elements of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@return the new stream
"
      end

      operation 9516290 "sorted"
	public return_type class_ref 429570 // IntStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream in sorted
order.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@return the new stream
"
      end

      operation 9516418 "peek"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "action" type class_ref 376706 // IntConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, additionally
performing the provided action on each element as elements are consumed
from the resulting stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

<p>For parallel stream pipelines, the action may be called at
whatever time and in whatever thread the element is made available by the
upstream operation.  If the action modifies shared state,
it is responsible for providing the required synchronization.

@apiNote This method exists mainly to support debugging, where you want
to see the elements as they flow past a certain point in a pipeline:
<pre>{@code
    IntStream.of(1, 2, 3, 4)
        .filter(e -> e > 2)
        .peek(e -> System.out.println(\"Filtered value: \" + e))
        .map(e -> e * e)
        .peek(e -> System.out.println(\"Mapped value: \" + e))
        .sum();
}</pre>

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements as
              they are consumed from the stream
@return the new stream
"
      end

      operation 9516546 "limit"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param in name "maxSize" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, truncated
to be no longer than {@code maxSize} in length.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
stateful intermediate operation</a>.

@apiNote
While {@code limit()} is generally a cheap operation on sequential
stream pipelines, it can be quite expensive on ordered parallel pipelines,
especially for large values of {@code maxSize}, since {@code limit(n)}
is constrained to return not just any <em>n</em> elements, but the
<em>first n</em> elements in the encounter order.  Using an unordered
stream source (such as {@link #generate(IntSupplier)}) or removing the
ordering constraint with {@link #unordered()} may result in significant
speedups of {@code limit()} in parallel pipelines, if the semantics of
your situation permit.  If consistency with encounter order is required,
and you are experiencing poor performance or memory utilization with
{@code limit()} in parallel pipelines, switching to sequential execution
with {@link #sequential()} may improve performance.

@param maxSize the number of elements the stream should be limited to
@return the new stream
@throws IllegalArgumentException if {@code maxSize} is negative
"
      end

      operation 9516674 "skip"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param in name "n" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the remaining elements of this stream
after discarding the first {@code n} elements of the stream.
If this stream contains fewer than {@code n} elements then an
empty stream will be returned.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@apiNote
While {@code skip()} is generally a cheap operation on sequential
stream pipelines, it can be quite expensive on ordered parallel pipelines,
especially for large values of {@code n}, since {@code skip(n)}
is constrained to skip not just any <em>n</em> elements, but the
<em>first n</em> elements in the encounter order.  Using an unordered
stream source (such as {@link #generate(IntSupplier)}) or removing the
ordering constraint with {@link #unordered()} may result in significant
speedups of {@code skip()} in parallel pipelines, if the semantics of
your situation permit.  If consistency with encounter order is required,
and you are experiencing poor performance or memory utilization with
{@code skip()} in parallel pipelines, switching to sequential execution
with {@link #sequential()} may improve performance.

@param n the number of leading elements to skip
@return the new stream
@throws IllegalArgumentException if {@code n} is negative
"
      end

      operation 9516802 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 376706 // IntConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action for each element of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

<p>For parallel stream pipelines, this operation does <em>not</em>
guarantee to respect the encounter order of the stream, as doing so
would sacrifice the benefit of parallelism.  For any given element, the
action may be performed at whatever time and in whatever thread the
library chooses.  If the action accesses shared state, it is
responsible for providing the required synchronization.

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements
"
      end

      operation 9516930 "forEachOrdered"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 376706 // IntConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action for each element of this stream, guaranteeing that
each element is processed in encounter order for streams that have a
defined encounter order.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements
@see #forEach(IntConsumer)
"
      end

      operation 9517058 "toArray"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing the elements of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an array containing the elements of this stream
"
      end

      operation 9517186 "reduce"
	public explicit_return_type "int"
	nparams 2
	  param in name "identity" explicit_type "int"
	  param inout name "op" type class_ref 1067394 // IntBinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using the provided identity value and an
<a href=\"package-summary.html#Associativity\">associative</a>
accumulation function, and returns the reduced value.  This is equivalent
to:
<pre>{@code
    int result = identity;
    for (int element : this stream)
        result = accumulator.applyAsInt(result, element)
    return result;
}</pre>

but is not constrained to execute sequentially.

<p>The {@code identity} value must be an identity for the accumulator
function. This means that for all {@code x},
{@code accumulator.apply(identity, x)} is equal to {@code x}.
The {@code accumulator} function must be an
<a href=\"package-summary.html#Associativity\">associative</a> function.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote Sum, min, max, and average are all special cases of reduction.
Summing a stream of numbers can be expressed as:

<pre>{@code
    int sum = integers.reduce(0, (a, b) -> a+b);
}</pre>

or more compactly:

<pre>{@code
    int sum = integers.reduce(0, Integer::sum);
}</pre>

<p>While this may seem a more roundabout way to perform an aggregation
compared to simply mutating a running total in a loop, reduction
operations parallelize more gracefully, without needing additional
synchronization and with greatly reduced risk of data races.

@param identity the identity value for the accumulating function
@param op an <a href=\"package-summary.html#Associativity\">associative</a>,
          <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
          <a href=\"package-summary.html#Statelessness\">stateless</a>
          function for combining two values
@return the result of the reduction
@see #sum()
@see #min()
@see #max()
@see #average()
"
      end

      operation 9517314 "reduce"
	public return_type class_ref 1089154 // OptionalInt
	nparams 1
	  param inout name "op" type class_ref 1067394 // IntBinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using an
<a href=\"package-summary.html#Associativity\">associative</a> accumulation
function, and returns an {@code OptionalInt} describing the reduced value,
if any. This is equivalent to:
<pre>{@code
    boolean foundAny = false;
    int result = null;
    for (int element : this stream) {
        if (!foundAny) {
            foundAny = true;
            result = element;
        }
        else
            result = accumulator.applyAsInt(result, element);
    }
    return foundAny ? OptionalInt.of(result) : OptionalInt.empty();
}</pre>

but is not constrained to execute sequentially.

<p>The {@code accumulator} function must be an
<a href=\"package-summary.html#Associativity\">associative</a> function.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param op an <a href=\"package-summary.html#Associativity\">associative</a>,
          <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
          <a href=\"package-summary.html#Statelessness\">stateless</a>
          function for combining two values
@return the result of the reduction
@see #reduce(int, IntBinaryOperator)
"
      end

      operation 9517442 "collect"
	public explicit_return_type "R"
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134210 // ObjIntConsumer
	  param inout name "combiner" type class_ref 192514 // BiConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R, R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#MutableReduction\">mutable
reduction</a> operation on the elements of this stream.  A mutable
reduction is one in which the reduced value is a mutable result container,
such as an {@code ArrayList}, and elements are incorporated by updating
the state of the result rather than by replacing the result.  This
produces a result equivalent to:
<pre>{@code
    R result = supplier.get();
    for (int element : this stream)
        accumulator.accept(result, element);
    return result;
}</pre>

<p>Like {@link #reduce(int, IntBinaryOperator)}, {@code collect} operations
can be parallelized without requiring additional synchronization.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param <R> type of the result
@param supplier a function that creates a new result container. For a
                parallel execution, this function may be called
                multiple times and must return a fresh value each time.
@param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for incorporating an additional element into a result
@param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for combining two values, which must be
                   compatible with the accumulator function
@return the result of the reduction
@see Stream#collect(Supplier, BiConsumer, BiConsumer)
"
      end

      operation 9517570 "sum"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sum of elements in this stream.  This is a special case
of a <a href=\"package-summary.html#Reduction\">reduction</a>
and is equivalent to:
<pre>{@code
    return reduce(0, Integer::sum);
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return the sum of elements in this stream
"
      end

      operation 9517698 "min"
	public return_type class_ref 1089154 // OptionalInt
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalInt} describing the minimum element of this
stream, or an empty optional if this stream is empty.  This is a special
case of a <a href=\"package-summary.html#Reduction\">reduction</a>
and is equivalent to:
<pre>{@code
    return reduce(Integer::min);
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.

@return an {@code OptionalInt} containing the minimum element of this
stream, or an empty {@code OptionalInt} if the stream is empty
"
      end

      operation 9517826 "max"
	public return_type class_ref 1089154 // OptionalInt
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalInt} describing the maximum element of this
stream, or an empty optional if this stream is empty.  This is a special
case of a <a href=\"package-summary.html#Reduction\">reduction</a>
and is equivalent to:
<pre>{@code
    return reduce(Integer::max);
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an {@code OptionalInt} containing the maximum element of this
stream, or an empty {@code OptionalInt} if the stream is empty
"
      end

      operation 9517954 "count"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count of elements in this stream.  This is a special case of
a <a href=\"package-summary.html#Reduction\">reduction</a> and is
equivalent to:
<pre>{@code
    return mapToLong(e -> 1L).sum();
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.

@return the count of elements in this stream
"
      end

      operation 9518082 "average"
	public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalDouble} describing the arithmetic mean of elements of
this stream, or an empty optional if this stream is empty.  This is a
special case of a
<a href=\"package-summary.html#Reduction\">reduction</a>.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an {@code OptionalDouble} containing the average element of this
stream, or an empty optional if the stream is empty
"
      end

      operation 9518210 "summaryStatistics"
	public return_type class_ref 1086210 // IntSummaryStatistics
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code IntSummaryStatistics} describing various
summary data about the elements of this stream.  This is a special
case of a <a href=\"package-summary.html#Reduction\">reduction</a>.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an {@code IntSummaryStatistics} describing various summary data
about the elements of this stream
"
      end

      operation 9518338 "anyMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether any elements of this stream match the provided
predicate.  May not evaluate the predicate on all elements if not
necessary for determining the result.  If the stream is empty then
{@code false} is returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>existential quantification</em> of the
predicate over the elements of the stream (for some x P(x)).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if any elements of the stream match the provided
predicate, otherwise {@code false}
"
      end

      operation 9518466 "allMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether all elements of this stream match the provided predicate.
May not evaluate the predicate on all elements if not necessary for
determining the result.  If the stream is empty then {@code true} is
returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>universal quantification</em> of the
predicate over the elements of the stream (for all x P(x)).  If the
stream is empty, the quantification is said to be <em>vacuously
satisfied</em> and is always {@code true} (regardless of P(x)).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if either all elements of the stream match the
provided predicate or the stream is empty, otherwise {@code false}
"
      end

      operation 9518594 "noneMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether no elements of this stream match the provided predicate.
May not evaluate the predicate on all elements if not necessary for
determining the result.  If the stream is empty then {@code true} is
returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>universal quantification</em> of the
negated predicate over the elements of the stream (for all x ~P(x)).  If
the stream is empty, the quantification is said to be vacuously satisfied
and is always {@code true}, regardless of P(x).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if either no elements of the stream match the
provided predicate or the stream is empty, otherwise {@code false}
"
      end

      operation 9518722 "findFirst"
	public return_type class_ref 1089154 // OptionalInt
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link OptionalInt} describing the first element of this
stream, or an empty {@code OptionalInt} if the stream is empty.  If the
stream has no encounter order, then any element may be returned.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@return an {@code OptionalInt} describing the first element of this stream,
or an empty {@code OptionalInt} if the stream is empty
"
      end

      operation 9518850 "findAny"
	public return_type class_ref 1089154 // OptionalInt
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link OptionalInt} describing some element of the stream, or
an empty {@code OptionalInt} if the stream is empty.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

<p>The behavior of this operation is explicitly nondeterministic; it is
free to select any element in the stream.  This is to allow for maximal
performance in parallel operations; the cost is that multiple invocations
on the same source may not return the same result.  (If a stable result
is desired, use {@link #findFirst()} instead.)

@return an {@code OptionalInt} describing some element of this stream, or
an empty {@code OptionalInt} if the stream is empty
@see #findFirst()
"
      end

      operation 9518978 "asLongStream"
	public return_type class_ref 1023490 // LongStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code LongStream} consisting of the elements of this stream,
converted to {@code long}.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return a {@code LongStream} consisting of the elements of this stream,
converted to {@code long}
"
      end

      operation 9519106 "asDoubleStream"
	public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DoubleStream} consisting of the elements of this stream,
converted to {@code double}.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return a {@code DoubleStream} consisting of the elements of this stream,
converted to {@code double}
"
      end

      operation 9519234 "boxed"
	public return_type class_ref 184706 // Stream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Stream} consisting of the elements of this stream,
each boxed to an {@code Integer}.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return a {@code Stream} consistent of the elements of this stream,
each boxed to an {@code Integer}
"
      end

      operation 9519362 "sequential"
	public return_type class_ref 429570 // IntStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9519490 "parallel"
	public return_type class_ref 429570 // IntStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9519618 "iterator"
	public return_type class_ref 1089794 // OfInt
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9519746 "spliterator"
	public return_type class_ref 376578 // OfInt
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 1158658 "Builder"
	visibility public stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3716098 // <generalisation>
	  relation 3716098 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3716098 // <generalisation>
	    b parent class_ref 376706 // IntConsumer
	end

	operation 9519874 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Adds an element to the stream being built.

@throws IllegalStateException if the builder has already transitioned
to the built state
"
	end

	operation 9520002 "add"
	  public return_type class_ref 1158658 // Builder
	  nparams 1
	    param in name "t" explicit_type "int"
	  
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds an element to the stream being built.

@implSpec
The default implementation behaves as if:
<pre>{@code
    accept(t)
    return this;
}</pre>

@param t the element to add
@return {@code this} builder
@throws IllegalStateException if the builder has already transitioned
to the built state
"
	end

	operation 9520130 "build"
	  public return_type class_ref 429570 // IntStream
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Builds the stream, transitioning this builder to the built state.
An {@code IllegalStateException} is thrown if there are further
attempts to operate on the builder after it has entered the built
state.

@return the built stream
@throws IllegalStateException if the builder has already transitioned to
the built state
"
	end
      end

      operation 9520258 "builder"
	class_operation public return_type class_ref 1158658 // Builder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static factories

Returns a builder for an {@code IntStream}.

@return a stream builder
"
      end

      operation 9520386 "empty"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an empty sequential {@code IntStream}.

@return an empty sequential stream
"
      end

      operation 9520514 "of"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 1
	  param in name "t" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential {@code IntStream} containing a single element.

@param t the single element
@return a singleton sequential stream
"
      end

      operation 9520642 "of"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "" explicit_type "int...values"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential ordered stream whose elements are the specified values.

@param values the elements of the new stream
@return the new stream
"
      end

      operation 9520770 "iterate"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 2
	  param in name "seed" explicit_type "int"
	  param in name "f" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an infinite sequential ordered {@code IntStream} produced by iterative
application of a function {@code f} to an initial element {@code seed},
producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},
{@code f(f(seed))}, etc.

<p>The first element (position {@code 0}) in the {@code IntStream} will be
the provided {@code seed}.  For {@code n > 0}, the element at position
{@code n}, will be the result of applying the function {@code f} to the
element at position {@code n - 1}.

@param seed the initial element
@param f a function to be applied to to the previous element to produce
         a new element
@return A new sequential {@code IntStream}
"
      end

      operation 9520898 "generate"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "s" type class_ref 1089282 // IntSupplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an infinite sequential unordered stream where each element is
generated by the provided {@code IntSupplier}.  This is suitable for
generating constant streams, streams of random elements, etc.

@param s the {@code IntSupplier} for generated elements
@return a new infinite sequential unordered {@code IntStream}
"
      end

      operation 9521026 "range"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 2
	  param in name "startInclusive" explicit_type "int"
	  param in name "endExclusive" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential ordered {@code IntStream} from {@code startInclusive}
(inclusive) to {@code endExclusive} (exclusive) by an incremental step of
{@code 1}.

@apiNote
<p>An equivalent sequence of increasing values can be produced
sequentially using a {@code for} loop as follows:
<pre>{@code
    for (int i = startInclusive; i < endExclusive ; i++) { ... }
}</pre>

@param startInclusive the (inclusive) initial value
@param endExclusive the exclusive upper bound
@return a sequential {@code IntStream} for the range of {@code int}
        elements
"
      end

      operation 9521154 "rangeClosed"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 2
	  param in name "startInclusive" explicit_type "int"
	  param in name "endInclusive" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential ordered {@code IntStream} from {@code startInclusive}
(inclusive) to {@code endInclusive} (inclusive) by an incremental step of
{@code 1}.

@apiNote
<p>An equivalent sequence of increasing values can be produced
sequentially using a {@code for} loop as follows:
<pre>{@code
    for (int i = startInclusive; i <= endInclusive ; i++) { ... }
}</pre>

@param startInclusive the (inclusive) initial value
@param endInclusive the inclusive upper bound
@return a sequential {@code IntStream} for the range of {@code int}
        elements
"
      end

      operation 9521282 "concat"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 2
	  param inout name "a" type class_ref 429570 // IntStream
	  param inout name "b" type class_ref 429570 // IntStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a lazily concatenated stream whose elements are all the
elements of the first stream followed by all the elements of the
second stream.  The resulting stream is ordered if both
of the input streams are ordered, and parallel if either of the input
streams is parallel.  When the resulting stream is closed, the close
handlers for both input streams are invoked.

@implNote
Use caution when constructing streams from repeated concatenation.
Accessing an element of a deeply concatenated stream can result in deep
call chains, or even {@code StackOverflowException}.

@param a the first stream
@param b the second stream
@return the concatenation of the two input streams
"
      end
    end

    class 1023490 "LongStream"
      visibility public stereotype "interface"
      nactuals 2
      actual class class_ref 1154434 // BaseStream
        rank 0 explicit_value ""
      actual class class_ref 1154434 // BaseStream
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A sequence of primitive long-valued elements supporting sequential and parallel
aggregate operations.  This is the {@code long} primitive specialization of
{@link Stream}.

<p>The following example illustrates an aggregate operation using
{@link Stream} and {@link LongStream}, computing the sum of the weights of the
red widgets:

<pre>{@code
    long sum = widgets.stream()
                      .filter(w -> w.getColor() == RED)
                      .mapToLong(w -> w.getWeight())
                      .sum();
}</pre>

See the class documentation for {@link Stream} and the package documentation
for <a href=\"package-summary.html\">java.util.stream</a> for additional
specification of streams, stream operations, stream pipelines, and
parallelism.

@since 1.8
@see Stream
@see <a href=\"package-summary.html\">java.util.stream</a>
"
      classrelation 3716866 // <realization>
	relation 3716866 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3716866 // <realization>
	  b parent class_ref 1154434 // BaseStream
      end

      operation 9528578 "filter"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream that match
the given predicate.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to each element to determine if it
                 should be included
@return the new stream
"
      end

      operation 9528706 "map"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 1127810 // LongUnaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the results of applying the given
function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9528834 "mapToObj"
	public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 1133570 // LongFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object-valued {@code Stream} consisting of the results of
applying the given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">
    intermediate operation</a>.

@param <U> the element type of the new stream
@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9528962 "mapToInt"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 1133954 // LongToIntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code IntStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9529090 "mapToDouble"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 1133826 // LongToDoubleFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DoubleStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9529218 "flatMap"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 1133570 // LongFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends LongStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the results of replacing each element of
this stream with the contents of a mapped stream produced by applying
the provided mapping function to each element.  Each mapped stream is
{@link java.util.stream.BaseStream#close() closed} after its contents
have been placed into this stream.  (If a mapped stream is {@code null}
an empty stream is used, instead.)

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element which produces a
              {@code LongStream} of new values
@return the new stream
@see Stream#flatMap(Function)
"
      end

      operation 9529346 "distinct"
	public return_type class_ref 1023490 // LongStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the distinct elements of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@return the new stream
"
      end

      operation 9529474 "sorted"
	public return_type class_ref 1023490 // LongStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream in sorted
order.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@return the new stream
"
      end

      operation 9529602 "peek"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "action" type class_ref 376962 // LongConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, additionally
performing the provided action on each element as elements are consumed
from the resulting stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

<p>For parallel stream pipelines, the action may be called at
whatever time and in whatever thread the element is made available by the
upstream operation.  If the action modifies shared state,
it is responsible for providing the required synchronization.

@apiNote This method exists mainly to support debugging, where you want
to see the elements as they flow past a certain point in a pipeline:
<pre>{@code
    LongStream.of(1, 2, 3, 4)
        .filter(e -> e > 2)
        .peek(e -> System.out.println(\"Filtered value: \" + e))
        .map(e -> e * e)
        .peek(e -> System.out.println(\"Mapped value: \" + e))
        .sum();
}</pre>

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements as
              they are consumed from the stream
@return the new stream
"
      end

      operation 9529730 "limit"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param in name "maxSize" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, truncated
to be no longer than {@code maxSize} in length.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
stateful intermediate operation</a>.

@apiNote
While {@code limit()} is generally a cheap operation on sequential
stream pipelines, it can be quite expensive on ordered parallel pipelines,
especially for large values of {@code maxSize}, since {@code limit(n)}
is constrained to return not just any <em>n</em> elements, but the
<em>first n</em> elements in the encounter order.  Using an unordered
stream source (such as {@link #generate(LongSupplier)}) or removing the
ordering constraint with {@link #unordered()} may result in significant
speedups of {@code limit()} in parallel pipelines, if the semantics of
your situation permit.  If consistency with encounter order is required,
and you are experiencing poor performance or memory utilization with
{@code limit()} in parallel pipelines, switching to sequential execution
with {@link #sequential()} may improve performance.

@param maxSize the number of elements the stream should be limited to
@return the new stream
@throws IllegalArgumentException if {@code maxSize} is negative
"
      end

      operation 9529858 "skip"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param in name "n" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the remaining elements of this stream
after discarding the first {@code n} elements of the stream.
If this stream contains fewer than {@code n} elements then an
empty stream will be returned.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@apiNote
While {@code skip()} is generally a cheap operation on sequential
stream pipelines, it can be quite expensive on ordered parallel pipelines,
especially for large values of {@code n}, since {@code skip(n)}
is constrained to skip not just any <em>n</em> elements, but the
<em>first n</em> elements in the encounter order.  Using an unordered
stream source (such as {@link #generate(LongSupplier)}) or removing the
ordering constraint with {@link #unordered()} may result in significant
speedups of {@code skip()} in parallel pipelines, if the semantics of
your situation permit.  If consistency with encounter order is required,
and you are experiencing poor performance or memory utilization with
{@code skip()} in parallel pipelines, switching to sequential execution
with {@link #sequential()} may improve performance.

@param n the number of leading elements to skip
@return the new stream
@throws IllegalArgumentException if {@code n} is negative
"
      end

      operation 9529986 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 376962 // LongConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action for each element of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

<p>For parallel stream pipelines, this operation does <em>not</em>
guarantee to respect the encounter order of the stream, as doing so
would sacrifice the benefit of parallelism.  For any given element, the
action may be performed at whatever time and in whatever thread the
library chooses.  If the action accesses shared state, it is
responsible for providing the required synchronization.

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements
"
      end

      operation 9530114 "forEachOrdered"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 376962 // LongConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action for each element of this stream, guaranteeing that
each element is processed in encounter order for streams that have a
defined encounter order.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements
@see #forEach(LongConsumer)
"
      end

      operation 9530242 "toArray"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing the elements of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an array containing the elements of this stream
"
      end

      operation 9530370 "reduce"
	public explicit_return_type "long"
	nparams 2
	  param in name "identity" explicit_type "long"
	  param inout name "op" type class_ref 1066882 // LongBinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using the provided identity value and an
<a href=\"package-summary.html#Associativity\">associative</a>
accumulation function, and returns the reduced value.  This is equivalent
to:
<pre>{@code
    long result = identity;
    for (long element : this stream)
        result = accumulator.applyAsLong(result, element)
    return result;
}</pre>

but is not constrained to execute sequentially.

<p>The {@code identity} value must be an identity for the accumulator
function. This means that for all {@code x},
{@code accumulator.apply(identity, x)} is equal to {@code x}.
The {@code accumulator} function must be an
<a href=\"package-summary.html#Associativity\">associative</a> function.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote Sum, min, max, and average are all special cases of reduction.
Summing a stream of numbers can be expressed as:

<pre>{@code
    long sum = integers.reduce(0, (a, b) -> a+b);
}</pre>

or more compactly:

<pre>{@code
    long sum = integers.reduce(0, Long::sum);
}</pre>

<p>While this may seem a more roundabout way to perform an aggregation
compared to simply mutating a running total in a loop, reduction
operations parallelize more gracefully, without needing additional
synchronization and with greatly reduced risk of data races.

@param identity the identity value for the accumulating function
@param op an <a href=\"package-summary.html#Associativity\">associative</a>,
          <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
          <a href=\"package-summary.html#Statelessness\">stateless</a>
          function for combining two values
@return the result of the reduction
@see #sum()
@see #min()
@see #max()
@see #average()
"
      end

      operation 9530498 "reduce"
	public return_type class_ref 1089410 // OptionalLong
	nparams 1
	  param inout name "op" type class_ref 1066882 // LongBinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using an
<a href=\"package-summary.html#Associativity\">associative</a> accumulation
function, and returns an {@code OptionalLong} describing the reduced value,
if any. This is equivalent to:
<pre>{@code
    boolean foundAny = false;
    long result = null;
    for (long element : this stream) {
        if (!foundAny) {
            foundAny = true;
            result = element;
        }
        else
            result = accumulator.applyAsLong(result, element);
    }
    return foundAny ? OptionalLong.of(result) : OptionalLong.empty();
}</pre>

but is not constrained to execute sequentially.

<p>The {@code accumulator} function must be an
<a href=\"package-summary.html#Associativity\">associative</a> function.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param op an <a href=\"package-summary.html#Associativity\">associative</a>,
          <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
          <a href=\"package-summary.html#Statelessness\">stateless</a>
          function for combining two values
@return the result of the reduction
@see #reduce(long, LongBinaryOperator)
"
      end

      operation 9530626 "collect"
	public explicit_return_type "R"
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134338 // ObjLongConsumer
	  param inout name "combiner" type class_ref 192514 // BiConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R, R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#MutableReduction\">mutable
reduction</a> operation on the elements of this stream.  A mutable
reduction is one in which the reduced value is a mutable result container,
such as an {@code ArrayList}, and elements are incorporated by updating
the state of the result rather than by replacing the result.  This
produces a result equivalent to:
<pre>{@code
    R result = supplier.get();
    for (long element : this stream)
        accumulator.accept(result, element);
    return result;
}</pre>

<p>Like {@link #reduce(long, LongBinaryOperator)}, {@code collect} operations
can be parallelized without requiring additional synchronization.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param <R> type of the result
@param supplier a function that creates a new result container. For a
                parallel execution, this function may be called
                multiple times and must return a fresh value each time.
@param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for incorporating an additional element into a result
@param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for combining two values, which must be
                   compatible with the accumulator function
@return the result of the reduction
@see Stream#collect(Supplier, BiConsumer, BiConsumer)
"
      end

      operation 9530754 "sum"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sum of elements in this stream.  This is a special case
of a <a href=\"package-summary.html#Reduction\">reduction</a>
and is equivalent to:
<pre>{@code
    return reduce(0, Long::sum);
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return the sum of elements in this stream
"
      end

      operation 9530882 "min"
	public return_type class_ref 1089410 // OptionalLong
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalLong} describing the minimum element of this
stream, or an empty optional if this stream is empty.  This is a special
case of a <a href=\"package-summary.html#Reduction\">reduction</a>
and is equivalent to:
<pre>{@code
    return reduce(Long::min);
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.

@return an {@code OptionalLong} containing the minimum element of this
stream, or an empty {@code OptionalLong} if the stream is empty
"
      end

      operation 9531010 "max"
	public return_type class_ref 1089410 // OptionalLong
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalLong} describing the maximum element of this
stream, or an empty optional if this stream is empty.  This is a special
case of a <a href=\"package-summary.html#Reduction\">reduction</a>
and is equivalent to:
<pre>{@code
    return reduce(Long::max);
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an {@code OptionalLong} containing the maximum element of this
stream, or an empty {@code OptionalLong} if the stream is empty
"
      end

      operation 9531138 "count"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count of elements in this stream.  This is a special case of
a <a href=\"package-summary.html#Reduction\">reduction</a> and is
equivalent to:
<pre>{@code
    return map(e -> 1L).sum();
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.

@return the count of elements in this stream
"
      end

      operation 9531266 "average"
	public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalDouble} describing the arithmetic mean of elements of
this stream, or an empty optional if this stream is empty.  This is a
special case of a
<a href=\"package-summary.html#Reduction\">reduction</a>.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an {@code OptionalDouble} containing the average element of this
stream, or an empty optional if the stream is empty
"
      end

      operation 9531394 "summaryStatistics"
	public return_type class_ref 1088002 // LongSummaryStatistics
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code LongSummaryStatistics} describing various summary data
about the elements of this stream.  This is a special case of a
<a href=\"package-summary.html#Reduction\">reduction</a>.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return a {@code LongSummaryStatistics} describing various summary data
about the elements of this stream
"
      end

      operation 9531522 "anyMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether any elements of this stream match the provided
predicate.  May not evaluate the predicate on all elements if not
necessary for determining the result.  If the stream is empty then
{@code false} is returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>existential quantification</em> of the
predicate over the elements of the stream (for some x P(x)).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if any elements of the stream match the provided
predicate, otherwise {@code false}
"
      end

      operation 9531650 "allMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether all elements of this stream match the provided predicate.
May not evaluate the predicate on all elements if not necessary for
determining the result.  If the stream is empty then {@code true} is
returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>universal quantification</em> of the
predicate over the elements of the stream (for all x P(x)).  If the
stream is empty, the quantification is said to be <em>vacuously
satisfied</em> and is always {@code true} (regardless of P(x)).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if either all elements of the stream match the
provided predicate or the stream is empty, otherwise {@code false}
"
      end

      operation 9531778 "noneMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether no elements of this stream match the provided predicate.
May not evaluate the predicate on all elements if not necessary for
determining the result.  If the stream is empty then {@code true} is
returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>universal quantification</em> of the
negated predicate over the elements of the stream (for all x ~P(x)).  If
the stream is empty, the quantification is said to be vacuously satisfied
and is always {@code true}, regardless of P(x).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if either no elements of the stream match the
provided predicate or the stream is empty, otherwise {@code false}
"
      end

      operation 9531906 "findFirst"
	public return_type class_ref 1089410 // OptionalLong
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link OptionalLong} describing the first element of this
stream, or an empty {@code OptionalLong} if the stream is empty.  If the
stream has no encounter order, then any element may be returned.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@return an {@code OptionalLong} describing the first element of this
stream, or an empty {@code OptionalLong} if the stream is empty
"
      end

      operation 9532034 "findAny"
	public return_type class_ref 1089410 // OptionalLong
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link OptionalLong} describing some element of the stream, or
an empty {@code OptionalLong} if the stream is empty.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

<p>The behavior of this operation is explicitly nondeterministic; it is
free to select any element in the stream.  This is to allow for maximal
performance in parallel operations; the cost is that multiple invocations
on the same source may not return the same result.  (If a stable result
is desired, use {@link #findFirst()} instead.)

@return an {@code OptionalLong} describing some element of this stream,
or an empty {@code OptionalLong} if the stream is empty
@see #findFirst()
"
      end

      operation 9532162 "asDoubleStream"
	public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DoubleStream} consisting of the elements of this stream,
converted to {@code double}.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return a {@code DoubleStream} consisting of the elements of this stream,
converted to {@code double}
"
      end

      operation 9532290 "boxed"
	public return_type class_ref 184706 // Stream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Stream} consisting of the elements of this stream,
each boxed to a {@code Long}.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return a {@code Stream} consistent of the elements of this stream,
each boxed to {@code Long}
"
      end

      operation 9532418 "sequential"
	public return_type class_ref 1023490 // LongStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9532546 "parallel"
	public return_type class_ref 1023490 // LongStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9532674 "iterator"
	public return_type class_ref 1089922 // OfLong
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9532802 "spliterator"
	public return_type class_ref 376834 // OfLong
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 1159298 "Builder"
	visibility public stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3716994 // <generalisation>
	  relation 3716994 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3716994 // <generalisation>
	    b parent class_ref 376962 // LongConsumer
	end

	operation 9532930 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "long"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Adds an element to the stream being built.

@throws IllegalStateException if the builder has already transitioned
to the built state
"
	end

	operation 9533058 "add"
	  public return_type class_ref 1159298 // Builder
	  nparams 1
	    param in name "t" explicit_type "long"
	  
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds an element to the stream being built.

@implSpec
The default implementation behaves as if:
<pre>{@code
    accept(t)
    return this;
}</pre>

@param t the element to add
@return {@code this} builder
@throws IllegalStateException if the builder has already transitioned
to the built state
"
	end

	operation 9533186 "build"
	  public return_type class_ref 1023490 // LongStream
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Builds the stream, transitioning this builder to the built state.
An {@code IllegalStateException} is thrown if there are further
attempts to operate on the builder after it has entered the built
state.

@return the built stream
@throws IllegalStateException if the builder has already transitioned
to the built state
"
	end
      end

      operation 9533314 "builder"
	class_operation public return_type class_ref 1159298 // Builder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static factories

Returns a builder for a {@code LongStream}.

@return a stream builder
"
      end

      operation 9533442 "empty"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an empty sequential {@code LongStream}.

@return an empty sequential stream
"
      end

      operation 9533570 "of"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 1
	  param in name "t" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential {@code LongStream} containing a single element.

@param t the single element
@return a singleton sequential stream
"
      end

      operation 9533698 "of"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "" explicit_type "long...values"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential ordered stream whose elements are the specified values.

@param values the elements of the new stream
@return the new stream
"
      end

      operation 9533826 "iterate"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 2
	  param in name "seed" explicit_type "long"
	  param in name "f" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an infinite sequential ordered {@code LongStream} produced by iterative
application of a function {@code f} to an initial element {@code seed},
producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},
{@code f(f(seed))}, etc.

<p>The first element (position {@code 0}) in the {@code LongStream} will
be the provided {@code seed}.  For {@code n > 0}, the element at position
{@code n}, will be the result of applying the function {@code f} to the
element at position {@code n - 1}.

@param seed the initial element
@param f a function to be applied to to the previous element to produce
         a new element
@return a new sequential {@code LongStream}
"
      end

      operation 9533954 "generate"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "s" type class_ref 1089538 // LongSupplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an infinite sequential unordered stream where each element is
generated by the provided {@code LongSupplier}.  This is suitable for
generating constant streams, streams of random elements, etc.

@param s the {@code LongSupplier} for generated elements
@return a new infinite sequential unordered {@code LongStream}
"
      end

      operation 9534082 "range"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 2
	  param in name "startInclusive" explicit_type "long"
	  param in name "endExclusive" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential ordered {@code LongStream} from {@code startInclusive}
(inclusive) to {@code endExclusive} (exclusive) by an incremental step of
{@code 1}.

@apiNote
<p>An equivalent sequence of increasing values can be produced
sequentially using a {@code for} loop as follows:
<pre>{@code
    for (long i = startInclusive; i < endExclusive ; i++) { ... }
}</pre>

@param startInclusive the (inclusive) initial value
@param endExclusive the exclusive upper bound
@return a sequential {@code LongStream} for the range of {@code long}
        elements
"
      end

      operation 9534210 "rangeClosed"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 2
	  param in name "startInclusive" explicit_type "long"
	  param in name "endInclusive" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential ordered {@code LongStream} from {@code startInclusive}
(inclusive) to {@code endInclusive} (inclusive) by an incremental step of
{@code 1}.

@apiNote
<p>An equivalent sequence of increasing values can be produced
sequentially using a {@code for} loop as follows:
<pre>{@code
    for (long i = startInclusive; i <= endInclusive ; i++) { ... }
}</pre>

@param startInclusive the (inclusive) initial value
@param endInclusive the inclusive upper bound
@return a sequential {@code LongStream} for the range of {@code long}
        elements
"
      end

      operation 9534338 "concat"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 2
	  param inout name "a" type class_ref 1023490 // LongStream
	  param inout name "b" type class_ref 1023490 // LongStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a lazily concatenated stream whose elements are all the
elements of the first stream followed by all the elements of the
second stream.  The resulting stream is ordered if both
of the input streams are ordered, and parallel if either of the input
streams is parallel.  When the resulting stream is closed, the close
handlers for both input streams are invoked.

@implNote
Use caution when constructing streams from repeated concatenation.
Accessing an element of a deeply concatenated stream can result in deep
call chains, or even {@code StackOverflowException}.

@param a the first stream
@param b the second stream
@return the concatenation of the two input streams
"
      end
    end

    class 1023618 "DoubleStream"
      visibility public stereotype "interface"
      nactuals 2
      actual class class_ref 1154434 // BaseStream
        rank 0 explicit_value ""
      actual class class_ref 1154434 // BaseStream
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A sequence of primitive double-valued elements supporting sequential and parallel
aggregate operations.  This is the {@code double} primitive specialization of
{@link Stream}.

<p>The following example illustrates an aggregate operation using
{@link Stream} and {@link DoubleStream}, computing the sum of the weights of the
red widgets:

<pre>{@code
    double sum = widgets.stream()
                        .filter(w -> w.getColor() == RED)
                        .mapToDouble(w -> w.getWeight())
                        .sum();
}</pre>

See the class documentation for {@link Stream} and the package documentation
for <a href=\"package-summary.html\">java.util.stream</a> for additional
specification of streams, stream operations, stream pipelines, and
parallelism.

@since 1.8
@see Stream
@see <a href=\"package-summary.html\">java.util.stream</a>
"
      classrelation 3711618 // <realization>
	relation 3711618 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3711618 // <realization>
	  b parent class_ref 1154434 // BaseStream
      end

      operation 9495554 "filter"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream that match
the given predicate.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to each element to determine if it
                 should be included
@return the new stream
"
      end

      operation 9495682 "map"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 1133314 // DoubleUnaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the results of applying the given
function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9495810 "mapToObj"
	public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 1132802 // DoubleFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object-valued {@code Stream} consisting of the results of
applying the given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">
    intermediate operation</a>.

@param <U> the element type of the new stream
@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9495938 "mapToInt"
	public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 1133058 // DoubleToIntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code IntStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9496066 "mapToLong"
	public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 1133186 // DoubleToLongFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code LongStream} consisting of the results of applying the
given function to the elements of this stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element
@return the new stream
"
      end

      operation 9496194 "flatMap"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 1132802 // DoubleFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends DoubleStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the results of replacing each element of
this stream with the contents of a mapped stream produced by applying
the provided mapping function to each element.  Each mapped stream is
{@link java.util.stream.BaseStream#close() closed} after its contents
have been placed into this stream.  (If a mapped stream is {@code null}
an empty stream is used, instead.)

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param mapper a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
              <a href=\"package-summary.html#Statelessness\">stateless</a>
              function to apply to each element which produces a
              {@code DoubleStream} of new values
@return the new stream
@see Stream#flatMap(Function)
"
      end

      operation 9496322 "distinct"
	public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the distinct elements of this stream. The
elements are compared for equality according to
{@link java.lang.Double#compare(double, double)}.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@return the result stream
"
      end

      operation 9496450 "sorted"
	public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream in sorted
order. The elements are compared for equality according to
{@link java.lang.Double#compare(double, double)}.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@return the result stream
"
      end

      operation 9496578 "peek"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "action" type class_ref 377346 // DoubleConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, additionally
performing the provided action on each element as elements are consumed
from the resulting stream.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

<p>For parallel stream pipelines, the action may be called at
whatever time and in whatever thread the element is made available by the
upstream operation.  If the action modifies shared state,
it is responsible for providing the required synchronization.

@apiNote This method exists mainly to support debugging, where you want
to see the elements as they flow past a certain point in a pipeline:
<pre>{@code
    DoubleStream.of(1, 2, 3, 4)
        .filter(e -> e > 2)
        .peek(e -> System.out.println(\"Filtered value: \" + e))
        .map(e -> e * e)
        .peek(e -> System.out.println(\"Mapped value: \" + e))
        .sum();
}</pre>

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements as
              they are consumed from the stream
@return the new stream
"
      end

      operation 9496706 "limit"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param in name "maxSize" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the elements of this stream, truncated
to be no longer than {@code maxSize} in length.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
stateful intermediate operation</a>.

@apiNote
While {@code limit()} is generally a cheap operation on sequential
stream pipelines, it can be quite expensive on ordered parallel pipelines,
especially for large values of {@code maxSize}, since {@code limit(n)}
is constrained to return not just any <em>n</em> elements, but the
<em>first n</em> elements in the encounter order.  Using an unordered
stream source (such as {@link #generate(DoubleSupplier)}) or removing the
ordering constraint with {@link #unordered()} may result in significant
speedups of {@code limit()} in parallel pipelines, if the semantics of
your situation permit.  If consistency with encounter order is required,
and you are experiencing poor performance or memory utilization with
{@code limit()} in parallel pipelines, switching to sequential execution
with {@link #sequential()} may improve performance.

@param maxSize the number of elements the stream should be limited to
@return the new stream
@throws IllegalArgumentException if {@code maxSize} is negative
"
      end

      operation 9496834 "skip"
	public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param in name "n" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stream consisting of the remaining elements of this stream
after discarding the first {@code n} elements of the stream.
If this stream contains fewer than {@code n} elements then an
empty stream will be returned.

<p>This is a <a href=\"package-summary.html#StreamOps\">stateful
intermediate operation</a>.

@apiNote
While {@code skip()} is generally a cheap operation on sequential
stream pipelines, it can be quite expensive on ordered parallel pipelines,
especially for large values of {@code n}, since {@code skip(n)}
is constrained to skip not just any <em>n</em> elements, but the
<em>first n</em> elements in the encounter order.  Using an unordered
stream source (such as {@link #generate(DoubleSupplier)}) or removing the
ordering constraint with {@link #unordered()} may result in significant
speedups of {@code skip()} in parallel pipelines, if the semantics of
your situation permit.  If consistency with encounter order is required,
and you are experiencing poor performance or memory utilization with
{@code skip()} in parallel pipelines, switching to sequential execution
with {@link #sequential()} may improve performance.

@param n the number of leading elements to skip
@return the new stream
@throws IllegalArgumentException if {@code n} is negative
"
      end

      operation 9496962 "forEach"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 377346 // DoubleConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action for each element of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

<p>For parallel stream pipelines, this operation does <em>not</em>
guarantee to respect the encounter order of the stream, as doing so
would sacrifice the benefit of parallelism.  For any given element, the
action may be performed at whatever time and in whatever thread the
library chooses.  If the action accesses shared state, it is
responsible for providing the required synchronization.

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements
"
      end

      operation 9497090 "forEachOrdered"
	public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 377346 // DoubleConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an action for each element of this stream, guaranteeing that
each element is processed in encounter order for streams that have a
defined encounter order.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param action a <a href=\"package-summary.html#NonInterference\">
              non-interfering</a> action to perform on the elements
@see #forEach(DoubleConsumer)
"
      end

      operation 9497218 "toArray"
	public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing the elements of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an array containing the elements of this stream
"
      end

      operation 9497346 "reduce"
	public explicit_return_type "double"
	nparams 2
	  param in name "identity" explicit_type "double"
	  param inout name "op" type class_ref 1067138 // DoubleBinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using the provided identity value and an
<a href=\"package-summary.html#Associativity\">associative</a>
accumulation function, and returns the reduced value.  This is equivalent
to:
<pre>{@code
    double result = identity;
    for (double element : this stream)
        result = accumulator.applyAsDouble(result, element)
    return result;
}</pre>

but is not constrained to execute sequentially.

<p>The {@code identity} value must be an identity for the accumulator
function. This means that for all {@code x},
{@code accumulator.apply(identity, x)} is equal to {@code x}.
The {@code accumulator} function must be an
<a href=\"package-summary.html#Associativity\">associative</a> function.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote Sum, min, max, and average are all special cases of reduction.
Summing a stream of numbers can be expressed as:

<pre>{@code
    double sum = numbers.reduce(0, (a, b) -> a+b);
}</pre>

or more compactly:

<pre>{@code
    double sum = numbers.reduce(0, Double::sum);
}</pre>

<p>While this may seem a more roundabout way to perform an aggregation
compared to simply mutating a running total in a loop, reduction
operations parallelize more gracefully, without needing additional
synchronization and with greatly reduced risk of data races.

@param identity the identity value for the accumulating function
@param op an <a href=\"package-summary.html#Associativity\">associative</a>,
          <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
          <a href=\"package-summary.html#Statelessness\">stateless</a>
          function for combining two values
@return the result of the reduction
@see #sum()
@see #min()
@see #max()
@see #average()
"
      end

      operation 9497474 "reduce"
	public return_type class_ref 1088898 // OptionalDouble
	nparams 1
	  param inout name "op" type class_ref 1067138 // DoubleBinaryOperator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#Reduction\">reduction</a> on the
elements of this stream, using an
<a href=\"package-summary.html#Associativity\">associative</a> accumulation
function, and returns an {@code OptionalDouble} describing the reduced
value, if any. This is equivalent to:
<pre>{@code
    boolean foundAny = false;
    double result = null;
    for (double element : this stream) {
        if (!foundAny) {
            foundAny = true;
            result = element;
        }
        else
            result = accumulator.applyAsDouble(result, element);
    }
    return foundAny ? OptionalDouble.of(result) : OptionalDouble.empty();
}</pre>

but is not constrained to execute sequentially.

<p>The {@code accumulator} function must be an
<a href=\"package-summary.html#Associativity\">associative</a> function.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param op an <a href=\"package-summary.html#Associativity\">associative</a>,
          <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
          <a href=\"package-summary.html#Statelessness\">stateless</a>
          function for combining two values
@return the result of the reduction
@see #reduce(double, DoubleBinaryOperator)
"
      end

      operation 9497602 "collect"
	public explicit_return_type "R"
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134082 // ObjDoubleConsumer
	  param inout name "combiner" type class_ref 192514 // BiConsumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R, R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a <a href=\"package-summary.html#MutableReduction\">mutable
reduction</a> operation on the elements of this stream.  A mutable
reduction is one in which the reduced value is a mutable result container,
such as an {@code ArrayList}, and elements are incorporated by updating
the state of the result rather than by replacing the result.  This
produces a result equivalent to:
<pre>{@code
    R result = supplier.get();
    for (double element : this stream)
        accumulator.accept(result, element);
    return result;
}</pre>

<p>Like {@link #reduce(double, DoubleBinaryOperator)}, {@code collect}
operations can be parallelized without requiring additional
synchronization.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@param <R> type of the result
@param supplier a function that creates a new result container. For a
                parallel execution, this function may be called
                multiple times and must return a fresh value each time.
@param accumulator an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for incorporating an additional element into a result
@param combiner an <a href=\"package-summary.html#Associativity\">associative</a>,
                   <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                   <a href=\"package-summary.html#Statelessness\">stateless</a>
                   function for combining two values, which must be
                   compatible with the accumulator function
@return the result of the reduction
@see Stream#collect(Supplier, BiConsumer, BiConsumer)
"
      end

      operation 9497730 "sum"
	public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sum of elements in this stream.

Summation is a special case of a <a
href=\"package-summary.html#Reduction\">reduction</a>. If
floating-point summation were exact, this method would be
equivalent to:

<pre>{@code
    return reduce(0, Double::sum);
}</pre>

However, since floating-point summation is not exact, the above
code is not necessarily equivalent to the summation computation
done by this method.

<p>If any stream element is a NaN or the sum is at any point a NaN
then the sum will be NaN.

The value of a floating-point sum is a function both
of the input values as well as the order of addition
operations. The order of addition operations of this method is
intentionally not defined to allow for implementation
flexibility to improve the speed and accuracy of the computed
result.

In particular, this method may be implemented using compensated
summation or other technique to reduce the error bound in the
numerical sum compared to a simple summation of {@code double}
values.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote Elements sorted by increasing absolute magnitude tend
to yield more accurate results.

@return the sum of elements in this stream
"
      end

      operation 9497858 "min"
	public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalDouble} describing the minimum element of this
stream, or an empty OptionalDouble if this stream is empty.  The minimum
element will be {@code Double.NaN} if any stream element was NaN. Unlike
the numerical comparison operators, this method considers negative zero
to be strictly smaller than positive zero. This is a special case of a
<a href=\"package-summary.html#Reduction\">reduction</a> and is
equivalent to:
<pre>{@code
    return reduce(Double::min);
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an {@code OptionalDouble} containing the minimum element of this
stream, or an empty optional if the stream is empty
"
      end

      operation 9497986 "max"
	public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalDouble} describing the maximum element of this
stream, or an empty OptionalDouble if this stream is empty.  The maximum
element will be {@code Double.NaN} if any stream element was NaN. Unlike
the numerical comparison operators, this method considers negative zero
to be strictly smaller than positive zero. This is a
special case of a
<a href=\"package-summary.html#Reduction\">reduction</a> and is
equivalent to:
<pre>{@code
    return reduce(Double::max);
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return an {@code OptionalDouble} containing the maximum element of this
stream, or an empty optional if the stream is empty
"
      end

      operation 9498114 "count"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the count of elements in this stream.  This is a special case of
a <a href=\"package-summary.html#Reduction\">reduction</a> and is
equivalent to:
<pre>{@code
    return mapToLong(e -> 1L).sum();
}</pre>

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal operation</a>.

@return the count of elements in this stream
"
      end

      operation 9498242 "average"
	public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code OptionalDouble} describing the arithmetic
mean of elements of this stream, or an empty optional if this
stream is empty.

If any recorded value is a NaN or the sum is at any point a NaN
then the average will be NaN.

<p>The average returned can vary depending upon the order in
which values are recorded.

This method may be implemented using compensated summation or
other technique to reduce the error bound in the {@link #sum
numerical sum} used to compute the average.

 <p>The average is a special case of a <a
 href=\"package-summary.html#Reduction\">reduction</a>.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@apiNote Elements sorted by increasing absolute magnitude tend
to yield more accurate results.

@return an {@code OptionalDouble} containing the average element of this
stream, or an empty optional if the stream is empty
"
      end

      operation 9498370 "summaryStatistics"
	public return_type class_ref 1080450 // DoubleSummaryStatistics
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code DoubleSummaryStatistics} describing various summary data
about the elements of this stream.  This is a special
case of a <a href=\"package-summary.html#Reduction\">reduction</a>.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return a {@code DoubleSummaryStatistics} describing various summary data
about the elements of this stream
"
      end

      operation 9498498 "anyMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether any elements of this stream match the provided
predicate.  May not evaluate the predicate on all elements if not
necessary for determining the result.  If the stream is empty then
{@code false} is returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>existential quantification</em> of the
predicate over the elements of the stream (for some x P(x)).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if any elements of the stream match the provided
predicate, otherwise {@code false}
"
      end

      operation 9498626 "allMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether all elements of this stream match the provided predicate.
May not evaluate the predicate on all elements if not necessary for
determining the result.  If the stream is empty then {@code true} is
returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>universal quantification</em> of the
predicate over the elements of the stream (for all x P(x)).  If the
stream is empty, the quantification is said to be <em>vacuously
satisfied</em> and is always {@code true} (regardless of P(x)).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if either all elements of the stream match the
provided predicate or the stream is empty, otherwise {@code false}
"
      end

      operation 9498754 "noneMatch"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether no elements of this stream match the provided predicate.
May not evaluate the predicate on all elements if not necessary for
determining the result.  If the stream is empty then {@code true} is
returned and the predicate is not evaluated.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@apiNote
This method evaluates the <em>universal quantification</em> of the
negated predicate over the elements of the stream (for all x ~P(x)).  If
the stream is empty, the quantification is said to be vacuously satisfied
and is always {@code true}, regardless of P(x).

@param predicate a <a href=\"package-summary.html#NonInterference\">non-interfering</a>,
                 <a href=\"package-summary.html#Statelessness\">stateless</a>
                 predicate to apply to elements of this stream
@return {@code true} if either no elements of the stream match the
provided predicate or the stream is empty, otherwise {@code false}
"
      end

      operation 9498882 "findFirst"
	public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link OptionalDouble} describing the first element of this
stream, or an empty {@code OptionalDouble} if the stream is empty.  If
the stream has no encounter order, then any element may be returned.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

@return an {@code OptionalDouble} describing the first element of this
stream, or an empty {@code OptionalDouble} if the stream is empty
"
      end

      operation 9499010 "findAny"
	public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link OptionalDouble} describing some element of the stream,
or an empty {@code OptionalDouble} if the stream is empty.

<p>This is a <a href=\"package-summary.html#StreamOps\">short-circuiting
terminal operation</a>.

<p>The behavior of this operation is explicitly nondeterministic; it is
free to select any element in the stream.  This is to allow for maximal
performance in parallel operations; the cost is that multiple invocations
on the same source may not return the same result.  (If a stable result
is desired, use {@link #findFirst()} instead.)

@return an {@code OptionalDouble} describing some element of this stream,
or an empty {@code OptionalDouble} if the stream is empty
@see #findFirst()
"
      end

      operation 9499138 "boxed"
	public return_type class_ref 184706 // Stream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Stream} consisting of the elements of this stream,
boxed to {@code Double}.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return a {@code Stream} consistent of the elements of this stream,
each boxed to a {@code Double}
"
      end

      operation 9499266 "sequential"
	public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9499394 "parallel"
	public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9499522 "iterator"
	public return_type class_ref 1090050 // OfDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9499650 "spliterator"
	public return_type class_ref 377090 // OfDouble
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 1156098 "Builder"
	visibility public stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3711746 // <generalisation>
	  relation 3711746 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3711746 // <generalisation>
	    b parent class_ref 377346 // DoubleConsumer
	end

	operation 9499778 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "double"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Adds an element to the stream being built.

@throws IllegalStateException if the builder has already transitioned
to the built state
"
	end

	operation 9499906 "add"
	  public return_type class_ref 1156098 // Builder
	  nparams 1
	    param in name "t" explicit_type "double"
	  
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds an element to the stream being built.

@implSpec
The default implementation behaves as if:
<pre>{@code
    accept(t)
    return this;
}</pre>

@param t the element to add
@return {@code this} builder
@throws IllegalStateException if the builder has already transitioned
to the built state
"
	end

	operation 9500034 "build"
	  public return_type class_ref 1023618 // DoubleStream
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Builds the stream, transitioning this builder to the built state.
An {@code IllegalStateException} is thrown if there are further
attempts to operate on the builder after it has entered the built
state.

@return the built stream
@throws IllegalStateException if the builder has already transitioned
to the built state
"
	end
      end

      operation 9500162 "builder"
	class_operation public return_type class_ref 1156098 // Builder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Static factories

Returns a builder for a {@code DoubleStream}.

@return a stream builder
"
      end

      operation 9500290 "empty"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an empty sequential {@code DoubleStream}.

@return an empty sequential stream
"
      end

      operation 9500418 "of"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param in name "t" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential {@code DoubleStream} containing a single element.

@param t the single element
@return a singleton sequential stream
"
      end

      operation 9500546 "of"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "" explicit_type "double...values"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a sequential ordered stream whose elements are the specified values.

@param values the elements of the new stream
@return the new stream
"
      end

      operation 9500674 "iterate"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 2
	  param in name "seed" explicit_type "double"
	  param in name "f" type class_ref 1133314 // DoubleUnaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an infinite sequential ordered {@code DoubleStream} produced by iterative
application of a function {@code f} to an initial element {@code seed},
producing a {@code Stream} consisting of {@code seed}, {@code f(seed)},
{@code f(f(seed))}, etc.

<p>The first element (position {@code 0}) in the {@code DoubleStream}
will be the provided {@code seed}.  For {@code n > 0}, the element at
position {@code n}, will be the result of applying the function {@code f}
 to the element at position {@code n - 1}.

@param seed the initial element
@param f a function to be applied to to the previous element to produce
         a new element
@return a new sequential {@code DoubleStream}
"
      end

      operation 9500802 "generate"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "s" type class_ref 1089026 // DoubleSupplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an infinite sequential unordered stream where each element is
generated by the provided {@code DoubleSupplier}.  This is suitable for
generating constant streams, streams of random elements, etc.

@param s the {@code DoubleSupplier} for generated elements
@return a new infinite sequential unordered {@code DoubleStream}
"
      end

      operation 9500930 "concat"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 2
	  param inout name "a" type class_ref 1023618 // DoubleStream
	  param inout name "b" type class_ref 1023618 // DoubleStream
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a lazily concatenated stream whose elements are all the
elements of the first stream followed by all the elements of the
second stream.  The resulting stream is ordered if both
of the input streams are ordered, and parallel if either of the input
streams is parallel.  When the resulting stream is closed, the close
handlers for both input streams are invoked.

@implNote
Use caution when constructing streams from repeated concatenation.
Accessing an element of a deeply concatenated stream can result in deep
call chains, or even {@code StackOverflowException}.

@param a the first stream
@param b the second stream
@return the concatenation of the two input streams
"
      end
    end

    class 1153666 "AbstractPipeline"
      abstract visibility package 
      nformals 3
      formal name "E_IN" type "" explicit_default_value ""
        explicit_extends ""
      formal name "E_OUT" type "" explicit_default_value ""
        explicit_extends ""
      formal name "S" type "" explicit_default_value ""
        explicit_extends "BaseStream<E_OUT, S>"
      nactuals 3
      actual class class_ref 1153794 // PipelineHelper
        rank 0 explicit_value ""
      actual class class_ref 1154434 // BaseStream
        rank 0 explicit_value ""
      actual class class_ref 1154434 // BaseStream
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class for \"pipeline\" classes, which are the core
implementations of the Stream interface and its primitive specializations.
Manages construction and evaluation of stream pipelines.

<p>An {@code AbstractPipeline} represents an initial portion of a stream
pipeline, encapsulating a stream source and zero or more intermediate
operations.  The individual {@code AbstractPipeline} objects are often
referred to as <em>stages</em>, where each stage describes either the stream
source or an intermediate operation.

<p>A concrete intermediate stage is generally built from an
{@code AbstractPipeline}, a shape-specific pipeline class which extends it
(e.g., {@code IntPipeline}) which is also abstract, and an operation-specific
concrete class which extends that.  {@code AbstractPipeline} contains most of
the mechanics of evaluating the pipeline, and implements methods that will be
used by the operation; the shape-specific classes add helper methods for
dealing with collection of results into the appropriate shape-specific
containers.

<p>After chaining a new intermediate operation, or executing a terminal
operation, the stream is considered to be consumed, and no more intermediate
or terminal operations are permitted on this stream instance.

@implNote
<p>For sequential streams, and parallel streams without
<a href=\"package-summary.html#StreamOps\">stateful intermediate
operations</a>, parallel streams, pipeline evaluation is done in a single
pass that \"jams\" all the operations together.  For parallel streams with
stateful operations, execution is divided into segments, where each
stateful operations marks the end of a segment, and each segment is
evaluated separately and the result used as the input to the next
segment.  In all cases, the source data is not consumed until a terminal
operation begins.

@param <E_IN>  type of input elements
@param <E_OUT> type of output elements
@param <S> type of the subclass implementing {@code BaseStream}
@since 1.8
"
      classrelation 3707778 // <realization>
	relation 3707778 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3707778 // <realization>
	  b parent class_ref 1153794 // PipelineHelper
      end

      classrelation 3708034 // <realization>
	relation 3708034 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3708034 // <realization>
	  b parent class_ref 1154434 // BaseStream
      end

      classrelation 3708162 // MSG_STREAM_LINKED (<unidirectional association>)
	relation 3708162 --->
	  a role_name "MSG_STREAM_LINKED" init_value "  \"stream has already been operated upon or closed\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3708162 // MSG_STREAM_LINKED (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3708290 // MSG_CONSUMED (<unidirectional association>)
	relation 3708290 --->
	  a role_name "MSG_CONSUMED" init_value "  \"source already consumed or closed\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3708290 // MSG_CONSUMED (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3708418 // sourceStage (<unidirectional association>)
	relation 3708418 --->
	  a role_name "sourceStage" const_relation private
	    comment "

Backlink to the head of the pipeline chain (self if this is the source
stage).


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SuppressWarnings(\"rawtypes\")
"
	    classrelation_ref 3708418 // sourceStage (<unidirectional association>)
	  b parent class_ref 1153666 // AbstractPipeline
      end

      classrelation 3708546 // previousStage (<unidirectional association>)
	relation 3708546 --->
	  a role_name "previousStage" const_relation private
	    comment "

The \"upstream\" pipeline, or null if this is the source stage.


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SuppressWarnings(\"rawtypes\")
"
	    classrelation_ref 3708546 // previousStage (<unidirectional association>)
	  b parent class_ref 1153666 // AbstractPipeline
      end

      attribute 2214274 "sourceOrOpFlags"
	const_attribute protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The operation flags for the intermediate operation represented by this
pipeline object.


"
      end

      classrelation 3708674 // nextStage (<unidirectional association>)
	relation 3708674 --->
	  a role_name "nextStage" private
	    comment "

The next stage in the pipeline, or null if this is the last stage.
Effectively final at the point of linking to the next pipeline.


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SuppressWarnings(\"rawtypes\")
"
	    classrelation_ref 3708674 // nextStage (<unidirectional association>)
	  b parent class_ref 1153666 // AbstractPipeline
      end

      attribute 2214402 "depth"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of intermediate operations between this pipeline object
and the stream source if sequential, or the previous stateful if parallel.
Valid at the point of pipeline preparation for evaluation.


"
      end

      attribute 2214530 "combinedFlags"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The combined source and operation flags for the source and all operations
up to and including the operation represented by this pipeline object.
Valid at the point of pipeline preparation for evaluation.


"
      end

      classrelation 3708802 // sourceSpliterator (<unidirectional association>)
	relation 3708802 --->
	  a role_name "sourceSpliterator" private
	    comment "

The source spliterator. Only valid for the head pipeline.
Before the pipeline is consumed if non-null then {@code sourceSupplier}
must be null. After the pipeline is consumed if non-null then is set to
null.


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3708802 // sourceSpliterator (<unidirectional association>)
	  b parent class_ref 184450 // Spliterator
      end

      classrelation 3708930 // sourceSupplier (<unidirectional association>)
	relation 3708930 --->
	  a role_name "sourceSupplier" private
	    comment "

The source supplier. Only valid for the head pipeline. Before the
pipeline is consumed if non-null then {@code sourceSpliterator} must be
null. After the pipeline is consumed if non-null then is set to null.


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends Spliterator<?>> ${name}${value};
"
	    classrelation_ref 3708930 // sourceSupplier (<unidirectional association>)
	  b parent class_ref 933634 // Supplier
      end

      attribute 2214658 "linkedOrConsumed"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if this pipeline has been linked or consumed


"
      end

      attribute 2214786 "sourceAnyStateful"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if there are any stateful ops in the pipeline; only valid for the
source stage.


"
      end

      classrelation 3709058 // sourceCloseAction (<unidirectional association>)
	relation 3709058 --->
	  a role_name "sourceCloseAction" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3709058 // sourceCloseAction (<unidirectional association>)
	  b parent class_ref 128770 // Runnable
      end

      attribute 2214914 "parallel"
	private explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "True if pipeline is parallel, otherwise the pipeline is sequential; only
valid for the source stage.


"
      end

      operation 9479042 "AbstractPipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 933634 // Supplier
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<?>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Supplier<Spliterator>} describing the stream source
@param sourceFlags The source flags for the stream source, described in
{@link StreamOpFlag}
@param parallel True if the pipeline is parallel
"
      end

      operation 9479170 "AbstractPipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 184450 // Spliterator
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Spliterator} describing the stream source
@param sourceFlags the source flags for the stream source, described in
{@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
      end

      operation 9479298 "AbstractPipeline"
	cpp_inline package explicit_return_type ""
	nparams 2
	  param inout name "previousStage" type class_ref 1153666 // AbstractPipeline
	  param in name "opFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for appending an intermediate operation stage onto an
existing pipeline.

@param previousStage the upstream pipeline stage
@param opFlags the operation flags for the new stage, described in
{@link StreamOpFlag}
"
      end

      operation 9479426 "evaluate"
	cpp_inline package explicit_return_type "R"
	nparams 1
	  param inout name "terminalOp" type class_ref 1154562 // TerminalOp
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<E_OUT, R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Terminal evaluation methods

Evaluate the pipeline with a terminal operation to produce a result.

@param <R> the type of result
@param terminalOp the terminal operation to be applied to the pipeline.
@return the result
"
      end

      operation 9479554 "evaluateToArrayNode"
	cpp_inline package return_type class_ref 1154178 // Node
	nparams 1
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_OUT> ${name}${(}${t0}<E_OUT[]> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Collect the elements output from the pipeline stage.

@param generator the array generator to be used to create array instances
@return a flat array-backed Node that holds the collected output elements
"
      end

      operation 9479682 "sourceStageSpliterator"
	cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Gets the source stage spliterator if this pipeline stage is the source
stage.  The pipeline is consumed after this method is called and
returns successfully.

@return the source stage spliterator
@throws IllegalStateException if this pipeline stage is not the source
        stage.
"
      end

      operation 9479810 "sequential"
	cpp_inline public explicit_return_type "S"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " BaseStream
"
      end

      operation 9479938 "parallel"
	cpp_inline public explicit_return_type "S"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9480066 "close"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9480194 "onClose"
	cpp_inline public explicit_return_type "S"
	nparams 1
	  param inout name "closeHandler" type class_ref 128770 // Runnable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9480322 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " Primitive specialization use co-variant overrides, hence is not final
"
      end

      operation 9480450 "isParallel"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9480578 "getStreamFlags"
	cpp_inline package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the composition of stream flags of the stream source and all
intermediate operations.

@return the composition of stream flags of the stream source and all
        intermediate operations
@see StreamOpFlag
"
      end

      operation 9480706 "sourceSpliterator"
	cpp_inline private return_type class_ref 184450 // Spliterator
	nparams 1
	  param in name "terminalFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Get the source spliterator for this pipeline stage.  For a sequential or
stateless parallel pipeline, this is the source spliterator.  For a
stateful parallel pipeline, this is a spliterator describing the results
of all computations up to and including the most recent stateful
operation.
"
      end

      operation 9480834 "getSourceShape"
	cpp_inline package return_type class_ref 1153922 // StreamShape
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " PipelineHelper
"
      end

      operation 9480962 "exactOutputSizeIfKnown"
	cpp_inline package explicit_return_type "long"
	nparams 1
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9481090 "wrapAndCopyInto"
	cpp_inline package explicit_return_type "S"
	nparams 2
	  param inout name "sink" explicit_type "S"
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN, S extends Sink<E_OUT>> ${type} ${name}${(}${t0} ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9481218 "copyInto"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "wrappedSink" type class_ref 1154050 // Sink
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<P_IN> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9481346 "copyIntoWithCancel"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "wrappedSink" type class_ref 1154050 // Sink
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<P_IN> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9481474 "getStreamAndOpFlags"
	cpp_inline package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9481602 "isOrdered"
	cpp_inline package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9481730 "wrapSink"
	cpp_inline package return_type class_ref 1154050 // Sink
	nparams 1
	  param inout name "sink" type class_ref 1154050 // Sink
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<P_IN> ${name}${(}${t0}<E_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9481858 "wrapSpliterator"
	cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 1
	  param inout name "sourceSpliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<E_OUT> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9481986 "evaluate"
	cpp_inline package return_type class_ref 1154178 // Node
	nparams 3
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flatten" explicit_type "boolean"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<E_OUT> ${name}${(}${t0}<P_IN> ${p0}, ${t1} ${p1}, ${t2}<E_OUT[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9482114 "getOutputShape"
	abstract cpp_inline package return_type class_ref 1153922 // StreamShape
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Shape-specific abstract methods, implemented by XxxPipeline classes

Get the output shape of the pipeline.  If the pipeline is the head,
then it's output shape corresponds to the shape of the source.
Otherwise, it's output shape corresponds to the output shape of the
associated operation.

@return the output shape
"
      end

      operation 9482242 "evaluateToNode"
	abstract cpp_inline package return_type class_ref 1154178 // Node
	nparams 4
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<E_OUT> ${name}${(}${t0}<E_OUT> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}, ${t3}<E_OUT[]> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collect elements output from a pipeline into a Node that holds elements
of this shape.

@param helper the pipeline helper describing the pipeline stages
@param spliterator the source spliterator
@param flattenTree true if the returned node should be flattened
@param generator the array generator
@return a Node holding the output of the pipeline
"
      end

      operation 9482370 "wrap"
	abstract cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 3
	  param inout name "ph" type class_ref 1153794 // PipelineHelper
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "isParallel" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<E_OUT> ${name}${(}${t0}<E_OUT> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a spliterator that wraps a source spliterator, compatible with
this stream shape, and operations associated with a {@link
PipelineHelper}.

@param ph the pipeline helper describing the pipeline stages
@param supplier the supplier of a spliterator
@return a wrapping spliterator compatible with this shape
"
      end

      operation 9482498 "lazySpliterator"
	abstract cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 1
	  param inout name "supplier" type class_ref 933634 // Supplier
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_OUT> ${name}${(}${t0}<? extends Spliterator<E_OUT>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a lazy spliterator that wraps and obtains the supplied the
spliterator when a method is invoked on the lazy spliterator.
@param supplier the supplier of a spliterator
"
      end

      operation 9482626 "forEachWithCancel"
	abstract cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "sink" type class_ref 1154050 // Sink
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E_OUT> ${p0}, ${t1}<E_OUT> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Traverse the elements of a spliterator compatible with this stream shape,
pushing those elements into a sink.   If the sink requests cancellation,
no further elements will be pulled or pushed.

@param spliterator the spliterator to pull elements from
@param sink the sink to push elements to
"
      end

      operation 9482754 "makeNodeBuilder"
	abstract cpp_inline package return_type class_ref 1154306 // Builder
	nparams 2
	  param in name "exactSizeIfKnown" explicit_type "long"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_OUT> ${name}${(}${t0} ${p0}, ${t1}<E_OUT[]> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Make a node builder compatible with this stream shape.

@param exactSizeIfKnown if {@literal >=0}, then a node builder will be
created that has a fixed capacity of at most sizeIfKnown elements. If
{@literal < 0}, then the node builder has an unfixed capacity. A fixed
capacity node builder will throw exceptions if an element is added after
builder has reached capacity, or is built before the builder has reached
capacity.

@param generator the array generator to be used to create instances of a
T[] array. For implementations supporting primitive nodes, this parameter
may be ignored.
@return a node builder
"
      end

      operation 9482882 "opIsStateful"
	abstract cpp_inline package explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Op-specific abstract methods, implemented by the operation class

Returns whether this operation is stateful or not.  If it is stateful,
then the method
{@link #opEvaluateParallel(PipelineHelper, java.util.Spliterator, java.util.function.IntFunction)}
must be overridden.

@return {@code true} if this operation is stateful
"
      end

      operation 9483010 "opWrapSink"
	abstract cpp_inline package return_type class_ref 1154050 // Sink
	nparams 2
	  param in name "flags" explicit_type "int"
	  param inout name "sink" type class_ref 1154050 // Sink
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_IN> ${name}${(}${t0} ${p0}, ${t1}<E_OUT> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts a {@code Sink} which will receive the results of this operation,
and return a {@code Sink} which accepts elements of the input type of
this operation and which performs the operation, passing the results to
the provided {@code Sink}.

@apiNote
The implementation may use the {@code flags} parameter to optimize the
sink wrapping.  For example, if the input is already {@code DISTINCT},
the implementation for the {@code Stream#distinct()} method could just
return the sink it was passed.

@param flags The combined stream and operation flags up to, but not
       including, this operation
@param sink sink to which elements should be sent after processing
@return a sink which accepts elements, perform the operation upon
        each element, and passes the results (if any) to the provided
        {@code Sink}.
"
      end

      operation 9483138 "opEvaluateParallel"
	cpp_inline package return_type class_ref 1154178 // Node
	nparams 3
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<E_OUT> ${name}${(}${t0}<E_OUT> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<E_OUT[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a parallel evaluation of the operation using the specified
{@code PipelineHelper} which describes the upstream intermediate
operations.  Only called on stateful operations.  If {@link
#opIsStateful()} returns true then implementations must override the
default implementation.

@implSpec The default implementation always throw
{@code UnsupportedOperationException}.

@param helper the pipeline helper describing the pipeline stages
@param spliterator the source {@code Spliterator}
@param generator the array generator
@return a {@code Node} describing the result of the evaluation
"
      end

      operation 9483266 "opEvaluateParallelLazy"
	cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 2
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<E_OUT> ${name}${(}${t0}<E_OUT> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns a {@code Spliterator} describing a parallel evaluation of the
operation, using the specified {@code PipelineHelper} which describes the
upstream intermediate operations.  Only called on stateful operations.
It is not necessary (though acceptable) to do a full computation of the
result here; it is preferable, if possible, to describe the result via a
lazily evaluated spliterator.

@implSpec The default implementation behaves as if:
<pre>{@code
    return evaluateParallel(helper, i -> (E_OUT[]) new
Object[i]).spliterator();
}</pre>
and is suitable for implementations that cannot do better than a full
synchronous evaluation.

@param helper the pipeline helper
@param spliterator the source {@code Spliterator}
@return a {@code Spliterator} describing the result of the evaluation
"
      end
    end

    class 1153794 "PipelineHelper"
      abstract visibility package 
      nformals 1
      formal name "P_OUT" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Helper class for executing <a href=\"package-summary.html#StreamOps\">
stream pipelines</a>, capturing all of the information about a stream
pipeline (output shape, intermediate operations, stream flags, parallelism,
etc) in one place.

<p>
A {@code PipelineHelper} describes the initial segment of a stream pipeline,
including its source, intermediate operations, and may additionally
incorporate information about the terminal (or stateful) operation which
follows the last intermediate operation described by this
{@code PipelineHelper}. The {@code PipelineHelper} is passed to the
{@link TerminalOp#evaluateParallel(PipelineHelper, java.util.Spliterator)},
{@link TerminalOp#evaluateSequential(PipelineHelper, java.util.Spliterator)},
and {@link AbstractPipeline#opEvaluateParallel(PipelineHelper, java.util.Spliterator,
java.util.function.IntFunction)}, methods, which can use the
{@code PipelineHelper} to access information about the pipeline such as
head shape, stream flags, and size, and use the helper methods
such as {@link #wrapAndCopyInto(Sink, Spliterator)},
{@link #copyInto(Sink, Spliterator)}, and {@link #wrapSink(Sink)} to execute
pipeline operations.

@param <P_OUT> type of output elements from the pipeline
@since 1.8
"
      operation 9476738 "getSourceShape"
	abstract cpp_inline package return_type class_ref 1153922 // StreamShape
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the stream shape for the source of the pipeline segment.

@return the stream shape for the source of the pipeline segment.
"
      end

      operation 9476866 "getStreamAndOpFlags"
	abstract cpp_inline package explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the combined stream and operation flags for the output of the described
pipeline.  This will incorporate stream flags from the stream source, all
the intermediate operations and the terminal operation.

@return the combined stream and operation flags
@see StreamOpFlag
"
      end

      operation 9476994 "exactOutputSizeIfKnown"
	abstract cpp_inline package explicit_return_type "long"
	nparams 1
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exact output size of the portion of the output resulting from
applying the pipeline stages described by this {@code PipelineHelper} to
the the portion of the input described by the provided
{@code Spliterator}, if known.  If not known or known infinite, will
return {@code -1}.

@apiNote
The exact output size is known if the {@code Spliterator} has the
{@code SIZED} characteristic, and the operation flags
{@link StreamOpFlag#SIZED} is known on the combined stream and operation
flags.

@param spliterator the spliterator describing the relevant portion of the
       source data
@return the exact size if known, or -1 if infinite or unknown
"
      end

      operation 9477122 "wrapAndCopyInto"
	abstract cpp_inline package explicit_return_type "S"
	nparams 2
	  param inout name "sink" explicit_type "S"
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN, S extends Sink<P_OUT>> ${type} ${name}${(}${t0} ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies the pipeline stages described by this {@code PipelineHelper} to
the provided {@code Spliterator} and send the results to the provided
{@code Sink}.

@implSpec
The implementation behaves as if:
<pre>{@code
    intoWrapped(wrapSink(sink), spliterator);
}</pre>

@param sink the {@code Sink} to receive the results
@param spliterator the spliterator describing the source input to process
"
      end

      operation 9477250 "copyInto"
	abstract cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "wrappedSink" type class_ref 1154050 // Sink
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<P_IN> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes elements obtained from the {@code Spliterator} into the provided
{@code Sink}.  If the stream pipeline is known to have short-circuiting
stages in it (see {@link StreamOpFlag#SHORT_CIRCUIT}), the
{@link Sink#cancellationRequested()} is checked after each
element, stopping if cancellation is requested.

@implSpec
This method conforms to the {@code Sink} protocol of calling
{@code Sink.begin} before pushing elements, via {@code Sink.accept}, and
calling {@code Sink.end} after all elements have been pushed.

@param wrappedSink the destination {@code Sink}
@param spliterator the source {@code Spliterator}
"
      end

      operation 9477378 "copyIntoWithCancel"
	abstract cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "wrappedSink" type class_ref 1154050 // Sink
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<P_IN> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pushes elements obtained from the {@code Spliterator} into the provided
{@code Sink}, checking {@link Sink#cancellationRequested()} after each
element, and stopping if cancellation is requested.

@implSpec
This method conforms to the {@code Sink} protocol of calling
{@code Sink.begin} before pushing elements, via {@code Sink.accept}, and
calling {@code Sink.end} after all elements have been pushed or if
cancellation is requested.

@param wrappedSink the destination {@code Sink}
@param spliterator the source {@code Spliterator}
"
      end

      operation 9477506 "wrapSink"
	abstract cpp_inline package return_type class_ref 1154050 // Sink
	nparams 1
	  param inout name "sink" type class_ref 1154050 // Sink
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<P_IN> ${name}${(}${t0}<P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Takes a {@code Sink} that accepts elements of the output type of the
{@code PipelineHelper}, and wrap it with a {@code Sink} that accepts
elements of the input type and implements all the intermediate operations
described by this {@code PipelineHelper}, delivering the result into the
provided {@code Sink}.

@param sink the {@code Sink} to receive the results
@return a {@code Sink} that implements the pipeline stages and sends
        results to the provided {@code Sink}
"
      end

      operation 9477634 "wrapSpliterator"
	abstract cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 1
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<P_OUT> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "
@param spliterator
@param <P_IN>
@return
"
      end

      operation 9477762 "makeNodeBuilder"
	abstract cpp_inline package return_type class_ref 1154306 // Builder
	nparams 2
	  param in name "exactSizeIfKnown" explicit_type "long"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0} ${p0}, ${t1}<P_OUT[]> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a @{link Node.Builder} compatible with the output shape of
this {@code PipelineHelper}.

@param exactSizeIfKnown if >=0 then a builder will be created that has a
       fixed capacity of exactly sizeIfKnown elements; if < 0 then the
       builder has variable capacity.  A fixed capacity builder will fail
       if an element is added after the builder has reached capacity.
@param generator a factory function for array instances
@return a {@code Node.Builder} compatible with the output shape of this
        {@code PipelineHelper}
"
      end

      operation 9477890 "evaluate"
	abstract cpp_inline package return_type class_ref 1154178 // Node
	nparams 3
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flatten" explicit_type "boolean"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<P_OUT> ${name}${(}${t0}<P_IN> ${p0}, ${t1} ${p1}, ${t2}<P_OUT[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collects all output elements resulting from applying the pipeline stages
to the source {@code Spliterator} into a {@code Node}.

@implNote
If the pipeline has no intermediate operations and the source is backed
by a {@code Node} then that {@code Node} will be returned (or flattened
and then returned). This reduces copying for a pipeline consisting of a
stateful operation followed by a terminal operation that returns an
array, such as:
<pre>{@code
    stream.sorted().toArray();
}</pre>

@param spliterator the source {@code Spliterator}
@param flatten if true and the pipeline is a parallel pipeline then the
       {@code Node} returned will contain no children, otherwise the
       {@code Node} may represent the root in a tree that reflects the
       shape of the computation tree.
@param generator a factory function for array instances
@return the {@code Node} containing all output elements
"
      end
    end

    class 1153922 "StreamShape"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An enum describing the known shape specializations for stream abstractions.
Each will correspond to a specific subinterface of {@link BaseStream}
(e.g., {@code REFERENCE} corresponds to {@code Stream}, {@code INT_VALUE}
corresponds to {@code IntStream}).  Each may also correspond to
specializations of value-handling abstractions such as {@code Spliterator},
{@code Consumer}, etc.

@apiNote
This enum is used by implementations to determine compatibility between
streams and operations (i.e., if the output shape of a stream is compatible
with the input shape of the next operation).

<p>Some APIs require you to specify both a generic type and a stream shape
for input or output elements, such as {@link TerminalOp} which has both
generic type parameters for its input types, and a getter for the
input shape.  When representing primitive streams in this way, the
generic type parameter should correspond to the wrapper type for that
primitive type.

@since 1.8
"
      attribute 2229634 "REFERENCE"
	public type class_ref 1153922 // StreamShape
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The shape specialization corresponding to {@code Stream} and elements
that are object references.

"
      end

      attribute 2229762 "INT_VALUE"
	public type class_ref 1153922 // StreamShape
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The shape specialization corresponding to {@code IntStream} and elements
that are {@code int} values.

"
      end

      attribute 2229890 "LONG_VALUE"
	public type class_ref 1153922 // StreamShape
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The shape specialization corresponding to {@code LongStream} and elements
that are {@code long} values.

"
      end

      attribute 2230018 "DOUBLE_VALUE"
	public type class_ref 1153922 // StreamShape
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The shape specialization corresponding to {@code DoubleStream} and
elements that are {@code double} values.
"
      end
    end

    class 1154050 "Sink"
      visibility package stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 163458 // Consumer
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An extension of {@link Consumer} used to conduct values through the stages of
a stream pipeline, with additional methods to manage size information,
control flow, etc.  Before calling the {@code accept()} method on a
{@code Sink} for the first time, you must first call the {@code begin()}
method to inform it that data is coming (optionally informing the sink how
much data is coming), and after all data has been sent, you must call the
{@code end()} method.  After calling {@code end()}, you should not call
{@code accept()} without again calling {@code begin()}.  {@code Sink} also
offers a mechanism by which the sink can cooperatively signal that it does
not wish to receive any more data (the {@code cancellationRequested()}
method), which a source can poll before sending more data to the
{@code Sink}.

<p>A sink may be in one of two states: an initial state and an active state.
It starts out in the initial state; the {@code begin()} method transitions
it to the active state, and the {@code end()} method transitions it back into
the initial state, where it can be re-used.  Data-accepting methods (such as
{@code accept()} are only valid in the active state.

@apiNote
A stream pipeline consists of a source, zero or more intermediate stages
(such as filtering or mapping), and a terminal stage, such as reduction or
for-each.  For concreteness, consider the pipeline:

<pre>{@code
    int longestStringLengthStartingWithA
        = strings.stream()
                 .filter(s -> s.startsWith(\"A\"))
                 .mapToInt(String::length)
                 .max();
}</pre>

<p>Here, we have three stages, filtering, mapping, and reducing.  The
filtering stage consumes strings and emits a subset of those strings; the
mapping stage consumes strings and emits ints; the reduction stage consumes
those ints and computes the maximal value.

<p>A {@code Sink} instance is used to represent each stage of this pipeline,
whether the stage accepts objects, ints, longs, or doubles.  Sink has entry
points for {@code accept(Object)}, {@code accept(int)}, etc, so that we do
not need a specialized interface for each primitive specialization.  (It
might be called a \"kitchen sink\" for this omnivorous tendency.)  The entry
point to the pipeline is the {@code Sink} for the filtering stage, which
sends some elements \"downstream\" -- into the {@code Sink} for the mapping
stage, which in turn sends integral values downstream into the {@code Sink}
for the reduction stage. The {@code Sink} implementations associated with a
given stage is expected to know the data type for the next stage, and call
the correct {@code accept} method on its downstream {@code Sink}.  Similarly,
each stage must implement the correct {@code accept} method corresponding to
the data type it accepts.

<p>The specialized subtypes such as {@link Sink.OfInt} override
{@code accept(Object)} to call the appropriate primitive specialization of
{@code accept}, implement the appropriate primitive specialization of
{@code Consumer}, and re-abstract the appropriate primitive specialization of
{@code accept}.

<p>The chaining subtypes such as {@link ChainedInt} not only implement
{@code Sink.OfInt}, but also maintain a {@code downstream} field which
represents the downstream {@code Sink}, and implement the methods
{@code begin()}, {@code end()}, and {@code cancellationRequested()} to
delegate to the downstream {@code Sink}.  Most implementations of
intermediate operations will use these chaining wrappers.  For example, the
mapping stage in the above example would look like:

<pre>{@code
    IntSink is = new Sink.ChainedReference<U>(sink) {
        public void accept(U u) {
            downstream.accept(mapper.applyAsInt(u));
        }
    };
}</pre>

<p>Here, we implement {@code Sink.ChainedReference<U>}, meaning that we expect
to receive elements of type {@code U} as input, and pass the downstream sink
to the constructor.  Because the next stage expects to receive integers, we
must call the {@code accept(int)} method when emitting values to the downstream.
The {@code accept()} method applies the mapping function from {@code U} to
{@code int} and passes the resulting value to the downstream {@code Sink}.

@param <T> type of elements for value streams
@since 1.8
"
      classrelation 3712898 // <realization>
	relation 3712898 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3712898 // <realization>
	  b parent class_ref 163458 // Consumer
      end

      operation 9509762 "begin"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "long"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the sink state to receive a fresh data set.  This must be called
before sending any data to the sink.  After calling {@link #end()},
you may call this method to reset the sink for another calculation.
@param size The exact size of the data to be pushed downstream, if
known or {@code -1} if unknown or infinite.

<p>Prior to this call, the sink must be in the initial state, and after
this call it is in the active state.
"
      end

      operation 9509890 "end"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that all elements have been pushed.  If the {@code Sink} is
stateful, it should send any stored state downstream at this time, and
should clear any accumulated state (and associated resources).

<p>Prior to this call, the sink must be in the active state, and after
this call it is returned to the initial state.
"
      end

      operation 9510018 "cancellationRequested"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates that this {@code Sink} does not wish to receive any more data.

@implSpec The default implementation always returns false.

@return true if cancellation is requested
"
      end

      operation 9510146 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts an int value.

@implSpec The default implementation throws IllegalStateException.

@throws IllegalStateException if this sink does not accept int values
"
      end

      operation 9510274 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "long"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts a long value.

@implSpec The default implementation throws IllegalStateException.

@throws IllegalStateException if this sink does not accept long values
"
      end

      operation 9510402 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts a double value.

@implSpec The default implementation throws IllegalStateException.

@throws IllegalStateException if this sink does not accept double values
"
      end

      class 1157122 "OfInt"
	visibility public stereotype "interface"
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3713026 // <realization>
	  relation 3713026 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3713026 // <realization>
	    b parent class_ref 1154050 // Sink
	end

	classrelation 3713154 // <generalisation>
	  relation 3713154 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3713154 // <generalisation>
	    b parent class_ref 376706 // IntConsumer
	end

	operation 9510530 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9510658 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "i" type class_ref 137602 // Integer
	  
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1157250 "OfLong"
	visibility public stereotype "interface"
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3713282 // <realization>
	  relation 3713282 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3713282 // <realization>
	    b parent class_ref 1154050 // Sink
	end

	classrelation 3713410 // <generalisation>
	  relation 3713410 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3713410 // <generalisation>
	    b parent class_ref 376962 // LongConsumer
	end

	operation 9510786 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "long"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9510914 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "i" type class_ref 251778 // Long
	  
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1157378 "OfDouble"
	visibility public stereotype "interface"
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3713538 // <realization>
	  relation 3713538 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3713538 // <realization>
	    b parent class_ref 1154050 // Sink
	end

	classrelation 3713666 // <generalisation>
	  relation 3713666 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3713666 // <generalisation>
	    b parent class_ref 377346 // DoubleConsumer
	end

	operation 9511042 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "value" explicit_type "double"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9511170 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "i" type class_ref 377218 // Double
	  
	  preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1157506 "ChainedReference"
	abstract visibility public 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "E_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3713794 // <realization>
	  relation 3713794 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3713794 // <realization>
	    b parent class_ref 1154050 // Sink
	end

	classrelation 3713922 // downstream (<unidirectional association>)
	  relation 3713922 --->
	    a role_name "downstream" const_relation protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super E_OUT> ${name}${value};
"
	      classrelation_ref 3713922 // downstream (<unidirectional association>)
	    b parent class_ref 1154050 // Sink
	end

	operation 9511298 "ChainedReference"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super E_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9511426 "begin"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9511554 "end"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9511682 "cancellationRequested"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1157634 "ChainedInt"
	abstract visibility public 
	nformals 1
	formal name "E_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3714050 // <realization>
	  relation 3714050 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3714050 // <realization>
	    b parent class_ref 1157122 // OfInt
	end

	classrelation 3714178 // downstream (<unidirectional association>)
	  relation 3714178 --->
	    a role_name "downstream" const_relation protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super E_OUT> ${name}${value};
"
	      classrelation_ref 3714178 // downstream (<unidirectional association>)
	    b parent class_ref 1154050 // Sink
	end

	operation 9511810 "ChainedInt"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super E_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9511938 "begin"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9512066 "end"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9512194 "cancellationRequested"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1157762 "ChainedLong"
	abstract visibility public 
	nformals 1
	formal name "E_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3714306 // <realization>
	  relation 3714306 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3714306 // <realization>
	    b parent class_ref 1157250 // OfLong
	end

	classrelation 3714434 // downstream (<unidirectional association>)
	  relation 3714434 --->
	    a role_name "downstream" const_relation protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super E_OUT> ${name}${value};
"
	      classrelation_ref 3714434 // downstream (<unidirectional association>)
	    b parent class_ref 1154050 // Sink
	end

	operation 9512322 "ChainedLong"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super E_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9512450 "begin"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9512578 "end"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9512706 "cancellationRequested"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1157890 "ChainedDouble"
	abstract visibility public 
	nformals 1
	formal name "E_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3714562 // <realization>
	  relation 3714562 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3714562 // <realization>
	    b parent class_ref 1157378 // OfDouble
	end

	classrelation 3714690 // downstream (<unidirectional association>)
	  relation 3714690 --->
	    a role_name "downstream" const_relation protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super E_OUT> ${name}${value};
"
	      classrelation_ref 3714690 // downstream (<unidirectional association>)
	    b parent class_ref 1154050 // Sink
	end

	operation 9512834 "ChainedDouble"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super E_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9512962 "begin"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9513090 "end"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9513218 "cancellationRequested"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1154178 "Node"
      visibility package stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An immutable container for describing an ordered sequence of elements of some
type {@code T}.

<p>A {@code Node} contains a fixed number of elements, which can be accessed
via the {@link #count}, {@link #spliterator}, {@link #forEach},
{@link #asArray}, or {@link #copyInto} methods.  A {@code Node} may have zero
or more child {@code Node}s; if it has no children (accessed via
{@link #getChildCount} and {@link #getChild(int)}, it is considered <em>flat
</em> or a <em>leaf</em>; if it has children, it is considered an
<em>internal</em> node.  The size of an internal node is the sum of sizes of
its children.

@apiNote
<p>A {@code Node} typically does not store the elements directly, but instead
mediates access to one or more existing (effectively immutable) data
structures such as a {@code Collection}, array, or a set of other
{@code Node}s.  Commonly {@code Node}s are formed into a tree whose shape
corresponds to the computation tree that produced the elements that are
contained in the leaf nodes.  The use of {@code Node} within the stream
framework is largely to avoid copying data unnecessarily during parallel
operations.

@param <T> the type of elements.
@since 1.8
"
      class 1154306 "Builder"
	visibility public stereotype "interface"
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3718530 // <realization>
	  relation 3718530 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3718530 // <realization>
	    b parent class_ref 1154050 // Sink
	end

	operation 9545090 "build"
	  cpp_inline public return_type class_ref 1154178 // Node
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Builds the node.  Should be called after all elements have been
pushed and signalled with an invocation of {@link Sink#end()}.

@return the resulting {@code Node}
"
	end

	class 1160962 "OfInt"
	  visibility package stereotype "interface"
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	end

	class 1161090 "OfLong"
	  visibility package stereotype "interface"
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	end

	class 1161218 "OfDouble"
	  visibility package stereotype "interface"
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	end
      end

      operation 9543938 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Spliterator} describing the elements contained in this
{@code Node}.

@return a {@code Spliterator} describing the elements contained in this
        {@code Node}
"
      end

      operation 9544066 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "consumer" type class_ref 163458 // Consumer
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Traverses the elements of this node, and invoke the provided
{@code Consumer} with each element.  Elements are provided in encounter
order if the source for the {@code Node} has a defined encounter order.

@param consumer a {@code Consumer} that is to be invoked with each
       element in this {@code Node}
"
      end

      operation 9544194 "getChildCount"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of child nodes of this node.

@implSpec The default implementation returns zero.

@return the number of child nodes
"
      end

      operation 9544322 "getChild"
	cpp_inline public return_type class_ref 1154178 // Node
	nparams 1
	  param in name "i" explicit_type "int"
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the child {@code Node} at a given index.

@implSpec The default implementation always throws
{@code IndexOutOfBoundsException}.

@param i the index to the child node
@return the child node
@throws IndexOutOfBoundsException if the index is less than 0 or greater
        than or equal to the number of child nodes
"
      end

      operation 9544450 "truncate"
	cpp_inline public return_type class_ref 1154178 // Node
	nparams 3
	  param in name "from" explicit_type "long"
	  param in name "to" explicit_type "long"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<T[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a node describing a subsequence of the elements of this node,
starting at the given inclusive start offset and ending at the given
exclusive end offset.

@param from The (inclusive) starting offset of elements to include, must
            be in range 0..count().
@param to The (exclusive) end offset of elements to include, must be
          in range 0..count().
@param generator A function to be used to create a new array, if needed,
                 for reference nodes.
@return the truncated node
"
      end

      operation 9544578 "asArray"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<T[]> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides an array view of the contents of this node.

<p>Depending on the underlying implementation, this may return a
reference to an internal array rather than a copy.  Since the returned
array may be shared, the returned array should not be modified.  The
{@code generator} function may be consulted to create the array if a new
array needs to be created.

@param generator a factory function which takes an integer parameter and
       returns a new, empty array of that size and of the appropriate
       array type
@return an array containing the contents of this {@code Node}
"
      end

      operation 9544706 "copyInto"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "array" explicit_type "T"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies the content of this {@code Node} into an array, starting at a
given offset into the array.  It is the caller's responsibility to ensure
there is sufficient room in the array, otherwise unspecified behaviour
will occur if the array length is less than the number of elements
contained in this node.

@param array the array into which to copy the contents of this
      {@code Node}
@param offset the starting offset within the array
@throws IndexOutOfBoundsException if copying would cause access of data
        outside array bounds
@throws NullPointerException if {@code array} is {@code null}
"
      end

      operation 9544834 "getShape"
	cpp_inline public return_type class_ref 1153922 // StreamShape
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code StreamShape} associated with this {@code Node}.

@implSpec The default in {@code Node} returns
{@code StreamShape.REFERENCE}

@return the stream shape associated with this node
"
      end

      operation 9544962 "count"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements contained in this node.

@return the number of elements contained in this node
"
      end

      class 1160578 "OfInt"
	visibility private stereotype "interface"
	nactuals 3
	actual class class_ref 1161346 // EmptyNode
	  rank 0 explicit_value ""
	actual class class_ref 1161346 // EmptyNode
	  rank 1 explicit_value ""
	actual class class_ref 1161346 // EmptyNode
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3719554 // <realization>
	  relation 3719554 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3719554 // <realization>
	    b parent class_ref 1161346 // EmptyNode
	end
      end

      class 1160706 "OfLong"
	visibility package stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end

      class 1160834 "OfDouble"
	visibility package stereotype "interface"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
      end
    end

    class 1154434 "BaseStream"
      visibility public stereotype "interface"
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "S" type "" explicit_default_value ""
        explicit_extends "BaseStream<T, S>"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base interface for streams, which are sequences of elements supporting
sequential and parallel aggregate operations.  The following example
illustrates an aggregate operation using the stream types {@link Stream}
and {@link IntStream}, computing the sum of the weights of the red widgets:

<pre>{@code
    int sum = widgets.stream()
                     .filter(w -> w.getColor() == RED)
                     .mapToInt(w -> w.getWeight())
                     .sum();
}</pre>

See the class documentation for {@link Stream} and the package documentation
for <a href=\"package-summary.html\">java.util.stream</a> for additional
specification of streams, stream operations, stream pipelines, and
parallelism, which governs the behavior of all stream types.

@param <T> the type of the stream elements
@param <S> the type of of the stream implementing {@code BaseStream}
@since 1.8
@see Stream
@see IntStream
@see LongStream
@see DoubleStream
@see <a href=\"package-summary.html\">java.util.stream</a>
"
      classrelation 3707906 // <generalisation>
	relation 3707906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3707906 // <generalisation>
	  b parent class_ref 146690 // AutoCloseable
      end

      operation 9478018 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator for the elements of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return the element iterator for this stream
"
      end

      operation 9478146 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a spliterator for the elements of this stream.

<p>This is a <a href=\"package-summary.html#StreamOps\">terminal
operation</a>.

@return the element spliterator for this stream
"
      end

      operation 9478274 "isParallel"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this stream, if a terminal operation were to be executed,
would execute in parallel.  Calling this method after invoking an
terminal stream operation method may yield unpredictable results.

@return {@code true} if this stream would execute in parallel if executed
"
      end

      operation 9478402 "sequential"
	cpp_inline public explicit_return_type "S"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an equivalent stream that is sequential.  May return
itself, either because the stream was already sequential, or because
the underlying stream state was modified to be sequential.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return a sequential stream
"
      end

      operation 9478530 "parallel"
	cpp_inline public explicit_return_type "S"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an equivalent stream that is parallel.  May return
itself, either because the stream was already parallel, or because
the underlying stream state was modified to be parallel.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return a parallel stream
"
      end

      operation 9478658 "unordered"
	cpp_inline public explicit_return_type "S"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an equivalent stream that is
<a href=\"package-summary.html#Ordering\">unordered</a>.  May return
itself, either because the stream was already unordered, or because
the underlying stream state was modified to be unordered.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@return an unordered stream
"
      end

      operation 9478786 "onClose"
	cpp_inline public explicit_return_type "S"
	nparams 1
	  param inout name "closeHandler" type class_ref 128770 // Runnable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an equivalent stream with an additional close handler.  Close
handlers are run when the {@link #close()} method
is called on the stream, and are executed in the order they were
added.  All close handlers are run, even if earlier close handlers throw
exceptions.  If any close handler throws an exception, the first
exception thrown will be relayed to the caller of {@code close()}, with
any remaining exceptions added to that exception as suppressed exceptions
(unless one of the remaining exceptions is the same exception as the
first exception, since an exception cannot suppress itself.)  May
return itself.

<p>This is an <a href=\"package-summary.html#StreamOps\">intermediate
operation</a>.

@param closeHandler A task to execute when the stream is closed
@return a stream with a handler that is run if the stream is closed
"
      end

      operation 9478914 "close"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this stream, causing all close handlers for this stream pipeline
to be called.

@see AutoCloseable#close()
"
      end
    end

    class 1154562 "TerminalOp"
      visibility package stereotype "interface"
      nformals 2
      formal name "E_IN" type "" explicit_default_value ""
        explicit_extends ""
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An operation in a stream pipeline that takes a stream as input and produces
a result or side-effect.  A {@code TerminalOp} has an input type and stream
shape, and a result type.  A {@code TerminalOp} also has a set of
<em>operation flags</em> that describes how the operation processes elements
of the stream (such as short-circuiting or respecting encounter order; see
{@link StreamOpFlag}).

<p>A {@code TerminalOp} must provide a sequential and parallel implementation
of the operation relative to a given stream source and set of intermediate
operations.

@param <E_IN> the type of input elements
@param <R>    the type of the result
@since 1.8
"
      operation 9508610 "inputShape"
	cpp_inline public return_type class_ref 1153922 // StreamShape
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the shape of the input type of this operation.

@implSpec The default returns {@code StreamShape.REFERENCE}.

@return StreamShape of the input type of this operation
"
      end

      operation 9508738 "getOpFlags"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the stream flags of the operation.  Terminal operations may set a
limited subset of the stream flags defined in {@link StreamOpFlag}, and
these flags are combined with the previously combined stream and
intermediate operation flags for the pipeline.

@implSpec The default implementation returns zero.

@return the stream flags for this operation
@see StreamOpFlag
"
      end

      operation 9508866 "evaluateParallel"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<E_IN> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a parallel evaluation of the operation using the specified
{@code PipelineHelper}, which describes the upstream intermediate
operations.

@implSpec The default performs a sequential evaluation of the operation
using the specified {@code PipelineHelper}.

@param helper the pipeline helper
@param spliterator the source spliterator
@return the result of the evaluation
"
      end

      operation 9508994 "evaluateSequential"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<E_IN> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a sequential evaluation of the operation using the specified
{@code PipelineHelper}, which describes the upstream intermediate
operations.

@param helper the pipeline helper
@param spliterator the source spliterator
@return the result of the evaluation
"
      end
    end

    class 1154690 "AbstractShortCircuitTask"
      abstract visibility package 
      nformals 4
      formal name "P_IN" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P_OUT" type "" explicit_default_value ""
        explicit_extends ""
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends "AbstractShortCircuitTask<P_IN, P_OUT, R, K>"
      nactuals 4
      actual class class_ref 1154818 // AbstractTask
        rank 0 explicit_value ""
      actual class class_ref 1154818 // AbstractTask
        rank 1 explicit_value ""
      actual class class_ref 1154818 // AbstractTask
        rank 2 explicit_value ""
      actual class class_ref 1154818 // AbstractTask
        rank 3 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract class for fork-join tasks used to implement short-circuiting
stream ops, which can produce a result without processing all elements of the
stream.

@param <P_IN> type of input elements to the pipeline
@param <P_OUT> type of output elements from the pipeline
@param <R> type of intermediate result, may be different from operation
       result type
@param <K> type of child and sibling tasks
@since 1.8
"
      classrelation 3709570 // <realization>
	relation 3709570 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3709570 // <realization>
	  b parent class_ref 1154818 // AbstractTask
      end

      classrelation 3709698 // sharedResult (<unidirectional association>)
	relation 3709698 --->
	  a role_name "sharedResult" const_relation protected
	    comment "

The result for this computation; this is shared among all tasks and set
exactly once


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<R> ${name}${value};
"
	    classrelation_ref 3709698 // sharedResult (<unidirectional association>)
	  b parent class_ref 1021954 // AtomicReference
      end

      attribute 2215682 "canceled"
	volatile protected explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Indicates whether this task has been canceled.  Tasks may cancel other
tasks in the computation under various conditions, such as in a
find-first operation, a task that finds a value will cancel all tasks
that are later in the encounter order.


"
      end

      operation 9485442 "AbstractShortCircuitTask"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for root tasks.

@param helper the {@code PipelineHelper} describing the stream pipeline
              up to this operation
@param spliterator the {@code Spliterator} describing the source for this
                   pipeline
"
      end

      operation 9485570 "AbstractShortCircuitTask"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param inout name "parent" explicit_type "K"
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for non-root nodes.

@param parent parent task in the computation tree
@param spliterator the {@code Spliterator} for the portion of the
                   computation tree described by this task
"
      end

      operation 9485698 "getEmptyResult"
	abstract cpp_inline protected explicit_return_type "R"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value indicating the computation completed with no task
finding a short-circuitable result.  For example, for a \"find\" operation,
this might be null or an empty {@code Optional}.

@return the result to return when no task finds a result
"
      end

      operation 9485826 "compute"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Overrides AbstractTask version to include checks for early
exits while splitting or computing.
"
      end

      operation 9485954 "shortCircuit"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "result" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Declares that a globally valid result has been found.  If another task has
not already found the answer, the result is installed in
{@code sharedResult}.  The {@code compute()} method will check
{@code sharedResult} before proceeding with computation, so this causes
the computation to terminate early.

@param result the result found
"
      end

      operation 9486082 "setLocalResult"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "localResult" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Sets a local result for this task.  If this task is the root, set the
shared result instead (if not already set).

@param localResult The result to set for this task
"
      end

      operation 9486210 "getRawResult"
	cpp_inline public explicit_return_type "R"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Retrieves the local result for this task
"
      end

      operation 9486338 "getLocalResult"
	cpp_inline public explicit_return_type "R"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Retrieves the local result for this task.  If this task is the root,
retrieves the shared result instead.
"
      end

      operation 9486466 "cancel"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark this task as canceled
"
      end

      operation 9486594 "taskCanceled"
	cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries whether this task is canceled.  A task is considered canceled if
it or any of its parents have been canceled.

@return {@code true} if this task or any parent is canceled.
"
      end

      operation 9486722 "cancelLaterNodes"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels all tasks which succeed this one in the encounter order.  This
includes canceling all the current task's right sibling, as well as the
later right siblings of all its parents.
"
      end
    end

    class 1154818 "AbstractTask"
      abstract visibility package 
      nformals 4
      formal name "P_IN" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P_OUT" type "" explicit_default_value ""
        explicit_extends ""
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      formal name "K" type "" explicit_default_value ""
        explicit_extends "AbstractTask<P_IN, P_OUT, R, K>"
      nactuals 1
      actual class class_ref 1065218 // CountedCompleter
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      java_annotation "@SuppressWarnings(\"serial\")
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class for most fork-join tasks used to implement stream ops.
Manages splitting logic, tracking of child tasks, and intermediate results.
Each task is associated with a {@link Spliterator} that describes the portion
of the input associated with the subtree rooted at this task.
Tasks may be leaf nodes (which will traverse the elements of
the {@code Spliterator}) or internal nodes (which split the
{@code Spliterator} into multiple child tasks).

@implNote
<p>This class is based on {@link CountedCompleter}, a form of fork-join task
where each task has a semaphore-like count of uncompleted children, and the
task is implicitly completed and notified when its last child completes.
Internal node tasks will likely override the {@code onCompletion} method from
{@code CountedCompleter} to merge the results from child tasks into the
current task's result.

<p>Splitting and setting up the child task links is done by {@code compute()}
for internal nodes.  At {@code compute()} time for leaf nodes, it is
guaranteed that the parent's child-related fields (including sibling links
for the parent's children) will be set up for all children.

<p>For example, a task that performs a reduce would override {@code doLeaf()}
to perform a reduction on that leaf node's chunk using the
{@code Spliterator}, and override {@code onCompletion()} to merge the results
of the child tasks for internal nodes:

<pre>{@code
    protected S doLeaf() {
        spliterator.forEach(...);
        return localReductionResult;
    }

    public void onCompletion(CountedCompleter caller) {
        if (!isLeaf()) {
            ReduceTask<P_IN, P_OUT, T, R> child = children;
            R result = child.getLocalResult();
            child = child.nextSibling;
            for (; child != null; child = child.nextSibling)
                result = combine(result, child.getLocalResult());
            setLocalResult(result);
        }
    }
}</pre>

<p>Serialization is not supported as there is no intention to serialize
tasks managed by stream ops.

@param <P_IN> Type of elements input to the pipeline
@param <P_OUT> Type of elements output from the pipeline
@param <R> Type of intermediate result, which may be different from operation
       result type
@param <K> Type of parent, child and sibling tasks
@since 1.8
"
      classrelation 3709186 // <realization>
	relation 3709186 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3709186 // <realization>
	  b parent class_ref 1065218 // CountedCompleter
      end

      attribute 2215042 "LEAF_TARGET"
	class_attribute const_attribute package explicit_type "int"
	init_value "  ForkJoinPool.getCommonPoolParallelism() << 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Default target factor of leaf tasks for parallel decomposition.
To allow load balancing, we over-partition, currently to approximately
four tasks per processor, which enables others to help out
if leaf tasks are uneven or some processors are otherwise busy.


"
      end

      classrelation 3709314 // helper (<unidirectional association>)
	relation 3709314 --->
	  a role_name "helper" const_relation protected
	    comment "
 The pipeline helper, common to all tasks in a computation 

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_OUT> ${name}${value};
"
	    classrelation_ref 3709314 // helper (<unidirectional association>)
	  b parent class_ref 1153794 // PipelineHelper
      end

      classrelation 3709442 // spliterator (<unidirectional association>)
	relation 3709442 --->
	  a role_name "spliterator" protected
	    comment "

The spliterator for the portion of the input associated with the subtree
rooted at this task


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_IN> ${name}${value};
"
	    classrelation_ref 3709442 // spliterator (<unidirectional association>)
	  b parent class_ref 184450 // Spliterator
      end

      attribute 2215170 "targetSize"
	protected explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Target leaf size, common to all tasks in a computation 
 may be laziliy initialized

"
      end

      attribute 2215298 "leftChild"
	protected explicit_type "K"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The left child.
null if no children
if non-null rightChild is non-null


"
      end

      attribute 2215426 "rightChild"
	protected explicit_type "K"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The right child.
null if no children
if non-null leftChild is non-null


"
      end

      attribute 2215554 "localResult"
	private explicit_type "R"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The result of this node, if completed 

"
      end

      operation 9483394 "AbstractTask"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for root nodes.

@param helper The {@code PipelineHelper} describing the stream pipeline
              up to this operation
@param spliterator The {@code Spliterator} describing the source for this
                   pipeline
"
      end

      operation 9483522 "AbstractTask"
	cpp_inline protected explicit_return_type ""
	nparams 2
	  param inout name "parent" explicit_type "K"
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for non-root nodes.

@param parent this node's parent task
@param spliterator {@code Spliterator} describing the subtree rooted at
       this node, obtained by splitting the parent {@code Spliterator}
"
      end

      operation 9483650 "makeChild"
	abstract cpp_inline protected explicit_return_type "K"
	nparams 1
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new node of type T whose parent is the receiver; must call
the AbstractTask(T, Spliterator) constructor with the receiver and the
provided Spliterator.

@param spliterator {@code Spliterator} describing the subtree rooted at
       this node, obtained by splitting the parent {@code Spliterator}
@return newly constructed child node
"
      end

      operation 9483778 "doLeaf"
	abstract cpp_inline protected explicit_return_type "R"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the result associated with a leaf node.  Will be called by
{@code compute()} and the result passed to @{code setLocalResult()}

@return the computed result of a leaf node
"
      end

      operation 9483906 "suggestTargetSize"
	class_operation cpp_inline public explicit_return_type "long"
	nparams 1
	  param in name "sizeEstimate" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a suggested target leaf size based on the initial size estimate.

@return suggested target leaf size
"
      end

      operation 9484034 "getTargetSize"
	cpp_inline protected explicit_return_type "long"
	nparams 1
	  param in name "sizeEstimate" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the targetSize, initializing it via the supplied
size estimate if not already initialized.
"
      end

      operation 9484162 "getRawResult"
	cpp_inline public explicit_return_type "R"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the local result, if any. Subclasses should use
{@link #setLocalResult(Object)} and {@link #getLocalResult()} to manage
results.  This returns the local result so that calls from within the
fork-join framework will return the correct result.

@return local result for this node previously stored with
{@link #setLocalResult}
"
      end

      operation 9484290 "setRawResult"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "result" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Does nothing; instead, subclasses should use
{@link #setLocalResult(Object)}} to manage results.

@param result must be null, or an exception is thrown (this is a safety
       tripwire to detect when {@code setRawResult()} is being used
       instead of {@code setLocalResult()}
"
      end

      operation 9484418 "getLocalResult"
	cpp_inline protected explicit_return_type "R"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a result previously stored with {@link #setLocalResult}

@return local result for this node previously stored with
{@link #setLocalResult}
"
      end

      operation 9484546 "setLocalResult"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "localResult" explicit_type "R"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the result with the task, can be retrieved with
{@link #getLocalResult}

@param localResult local result for this node
"
      end

      operation 9484674 "isLeaf"
	cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this task is a leaf node.  (Only valid after
{@link #compute} has been called on this node).  If the node is not a
leaf node, then children will be non-null and numChildren will be
positive.

@return {@code true} if this task is a leaf node
"
      end

      operation 9484802 "isRoot"
	cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this task is the root node

@return {@code true} if this task is the root node.
"
      end

      operation 9484930 "getParent"
	cpp_inline protected explicit_return_type "K"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns the parent of this task, or null if this task is the root

@return the parent of this task, or null if this task is the root
"
      end

      operation 9485058 "compute"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Decides whether or not to split a task further or compute it
directly. If computing directly, calls {@code doLeaf} and pass
the result to {@code setRawResult}. Otherwise splits off
subtasks, forking one and continuing as the other.

<p> The method is structured to conserve resources across a
range of uses.  The loop continues with one of the child tasks
when split, to avoid deep recursion. To cope with spliterators
that may be systematically biased toward left-heavy or
right-heavy splits, we alternate which child is forked versus
continued in the loop.
"
      end

      operation 9485186 "onCompletion"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "caller" type class_ref 1065218 // CountedCompleter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implNote
Clears spliterator and children fields.  Overriders MUST call
{@code super.onCompletion} as the last thing they do if they want these
cleared.
"
      end

      operation 9485314 "isLeftmostNode"
	cpp_inline protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this node is a \"leftmost\" node -- whether the path from
the root to this node involves only traversing leftmost child links.  For
a leaf node, this means it is the first leaf node in the encounter order.

@return {@code true} if this node is a \"leftmost\" node
"
      end
    end

    class 1154946 "AbstractSpinedBuffer"
      abstract visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Base class for a data structure for gathering elements into a buffer and then
iterating them. Maintains an array of increasingly sized arrays, so there is
no copying cost associated with growing the data structure.
@since 1.8
"
      attribute 2215810 "MIN_CHUNK_POWER"
	class_attribute const_attribute public explicit_type "int"
	init_value "  4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Minimum power-of-two for the first chunk.


"
      end

      attribute 2215938 "MIN_CHUNK_SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "  1 << MIN_CHUNK_POWER"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Minimum size for the first chunk.


"
      end

      attribute 2216066 "MAX_CHUNK_POWER"
	class_attribute const_attribute public explicit_type "int"
	init_value "  30"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Max power-of-two for chunks.


"
      end

      attribute 2216194 "MIN_SPINE_SIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value "  8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Minimum array size for array-of-chunks.


"
      end

      attribute 2216322 "initialChunkPower"
	const_attribute protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "log2 of the size of the first chunk.


"
      end

      attribute 2216450 "elementIndex"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Index of the *next* element to write; may point into, or just outside of,
the current chunk.


"
      end

      attribute 2216578 "spineIndex"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Index of the *current* chunk in the spine array, if the spine array is
non-null.


"
      end

      attribute 2216706 "priorElementCount"
	protected explicit_type "long"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Count of elements in all prior chunks.


"
      end

      operation 9486850 "AbstractSpinedBuffer"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct with an initial capacity of 16.
"
      end

      operation 9486978 "AbstractSpinedBuffer"
	protected explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct with a specified initial capacity.

@param initialCapacity The minimum expected number of elements
"
      end

      operation 9487106 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Is the buffer currently empty?
"
      end

      operation 9487234 "count"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "How many elements are currently in the buffer?
"
      end

      operation 9487362 "chunkSize"
	protected explicit_return_type "int"
	nparams 1
	  param in name "n" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "How big should the nth chunk be?
"
      end

      operation 9487490 "clear"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all data from the buffer
"
      end
    end

    class 1155074 "Collector"
      visibility public stereotype "interface"
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "A" type "" explicit_default_value ""
        explicit_extends ""
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <a href=\"package-summary.html#Reduction\">mutable reduction operation</a> that
accumulates input elements into a mutable result container, optionally transforming
the accumulated result into a final representation after all input elements
have been processed.  Reduction operations can be performed either sequentially
or in parallel.

<p>Examples of mutable reduction operations include:
accumulating elements into a {@code Collection}; concatenating
strings using a {@code StringBuilder}; computing summary information about
elements such as sum, min, max, or average; computing \"pivot table\" summaries
such as \"maximum valued transaction by seller\", etc.  The class {@link Collectors}
provides implementations of many common mutable reductions.

<p>A {@code Collector} is specified by four functions that work together to
accumulate entries into a mutable result container, and optionally perform
a final transform on the result.  They are: <ul>
    <li>creation of a new result container ({@link #supplier()})</li>
    <li>incorporating a new data element into a result container ({@link #accumulator()})</li>
    <li>combining two result containers into one ({@link #combiner()})</li>
    <li>performing an optional final transform on the container ({@link #finisher()})</li>
</ul>

<p>Collectors also have a set of characteristics, such as
{@link Characteristics#CONCURRENT}, that provide hints that can be used by a
reduction implementation to provide better performance.

<p>A sequential implementation of a reduction using a collector would
create a single result container using the supplier function, and invoke the
accumulator function once for each input element.  A parallel implementation
would partition the input, create a result container for each partition,
accumulate the contents of each partition into a subresult for that partition,
and then use the combiner function to merge the subresults into a combined
result.

<p>To ensure that sequential and parallel executions produce equivalent
results, the collector functions must satisfy an <em>identity</em> and an
<a href=\"package-summary.html#Associativity\">associativity</a> constraints.

<p>The identity constraint says that for any partially accumulated result,
combining it with an empty result container must produce an equivalent
result.  That is, for a partially accumulated result {@code a} that is the
result of any series of accumulator and combiner invocations, {@code a} must
be equivalent to {@code combiner.apply(a, supplier.get())}.

<p>The associativity constraint says that splitting the computation must
produce an equivalent result.  That is, for any input elements {@code t1}
and {@code t2}, the results {@code r1} and {@code r2} in the computation
below must be equivalent:
<pre>{@code
    A a1 = supplier.get();
    accumulator.accept(a1, t1);
    accumulator.accept(a1, t2);
    R r1 = finisher.apply(a1);  // result without splitting

    A a2 = supplier.get();
    accumulator.accept(a2, t1);
    A a3 = supplier.get();
    accumulator.accept(a3, t2);
    R r2 = finisher.apply(combiner.apply(a2, a3));  // result with splitting
} </pre>

<p>For collectors that do not have the {@code UNORDERED} characteristic,
two accumulated results {@code a1} and {@code a2} are equivalent if
{@code finisher.apply(a1).equals(finisher.apply(a2))}.  For unordered
collectors, equivalence is relaxed to allow for non-equality related to
differences in order.  (For example, an unordered collector that accumulated
elements to a {@code List} would consider two lists equivalent if they
contained the same elements, ignoring order.)

<p>Libraries that implement reduction based on {@code Collector}, such as
{@link Stream#collect(Collector)}, must adhere to the following constraints:
<ul>
    <li>The first argument passed to the accumulator function, both
    arguments passed to the combiner function, and the argument passed to the
    finisher function must be the result of a previous invocation of the
    result supplier, accumulator, or combiner functions.</li>
    <li>The implementation should not do anything with the result of any of
    the result supplier, accumulator, or combiner functions other than to
    pass them again to the accumulator, combiner, or finisher functions,
    or return them to the caller of the reduction operation.</li>
    <li>If a result is passed to the combiner or finisher
    function, and the same object is not returned from that function, it is
    never used again.</li>
    <li>Once a result is passed to the combiner or finisher function, it
    is never passed to the accumulator function again.</li>
    <li>For non-concurrent collectors, any result returned from the result
    supplier, accumulator, or combiner functions must be serially
    thread-confined.  This enables collection to occur in parallel without
    the {@code Collector} needing to implement any additional synchronization.
    The reduction implementation must manage that the input is properly
    partitioned, that partitions are processed in isolation, and combining
    happens only after accumulation is complete.</li>
    <li>For concurrent collectors, an implementation is free to (but not
    required to) implement reduction concurrently.  A concurrent reduction
    is one where the accumulator function is called concurrently from
    multiple threads, using the same concurrently-modifiable result container,
    rather than keeping the result isolated during accumulation.
    A concurrent reduction should only be applied if the collector has the
    {@link Characteristics#UNORDERED} characteristics or if the
    originating data is unordered.</li>
</ul>

<p>In addition to the predefined implementations in {@link Collectors}, the
static factory methods {@link #of(Supplier, BiConsumer, BinaryOperator, Characteristics...)}
can be used to construct collectors.  For example, you could create a collector
that accumulates widgets into a {@code TreeSet} with:

<pre>{@code
    Collector<Widget, ?, TreeSet<Widget>> intoSet =
        Collector.of(TreeSet::new, TreeSet::add,
                     (left, right) -> { left.addAll(right); return left; });
}</pre>

(This behavior is also implemented by the predefined collector
{@link Collectors#toCollection(Supplier)}).

@apiNote
Performing a reduction operation with a {@code Collector} should produce a
result equivalent to:
<pre>{@code
    R container = collector.supplier().get();
    for (T t : data)
        collector.accumulator().accept(container, t);
    return collector.finisher().apply(container);
}</pre>

<p>However, the library is free to partition the input, perform the reduction
on the partitions, and then use the combiner function to combine the partial
results to achieve a parallel reduction.  (Depending on the specific reduction
operation, this may perform better or worse, depending on the relative cost
of the accumulator and combiner functions.)

<p>Collectors are designed to be <em>composed</em>; many of the methods
in {@link Collectors} are functions that take a collector and produce
a new collector.  For example, given the following collector that computes
the sum of the salaries of a stream of employees:

<pre>{@code
    Collector<Employee, ?, Integer> summingSalaries
        = Collectors.summingInt(Employee::getSalary))
}</pre>

If we wanted to create a collector to tabulate the sum of salaries by
department, we could reuse the \"sum of salaries\" logic using
{@link Collectors#groupingBy(Function, Collector)}:

<pre>{@code
    Collector<Employee, ?, Map<Department, Integer>> summingSalariesByDept
        = Collectors.groupingBy(Employee::getDepartment, summingSalaries);
}</pre>

@see Stream#collect(Collector)
@see Collectors

@param <T> the type of input elements to the reduction operation
@param <A> the mutable accumulation type of the reduction operation (often
           hidden as an implementation detail)
@param <R> the result type of the reduction operation
@since 1.8
"
      operation 9487618 "supplier"
	cpp_inline public return_type class_ref 933634 // Supplier
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<A> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A function that creates and returns a new mutable result container.

@return a function which returns a new, mutable result container
"
      end

      operation 9487746 "accumulator"
	cpp_inline public return_type class_ref 192514 // BiConsumer
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<A, T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A function that folds a value into a mutable result container.

@return a function which folds a value into a mutable result container
"
      end

      operation 9487874 "combiner"
	cpp_inline public return_type class_ref 1066626 // BinaryOperator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<A> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A function that accepts two partial results and merges them.  The
combiner function may fold state from one argument into the other and
return that, or may return a new result container.

@return a function which combines two partial results into a combined
result
"
      end

      operation 9488002 "finisher"
	cpp_inline public return_type class_ref 192770 // Function
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<A, R> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform the final transformation from the intermediate accumulation type
{@code A} to the final result type {@code R}.

<p>If the characteristic {@code IDENTITY_TRANSFORM} is
set, this function may be presumed to be an identity transform with an
unchecked cast from {@code A} to {@code R}.

@return a function which transforms the intermediate result to the final
result
"
      end

      class 1155202 "Characteristics"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2216834 "CONCURRENT"
	  public type class_ref 1155202 // Characteristics
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Indicates that this collector is <em>concurrent</em>, meaning that
the result container can support the accumulator function being
called concurrently with the same result container from multiple
threads.

<p>If a {@code CONCURRENT} collector is not also {@code UNORDERED},
then it should only be evaluated concurrently if applied to an
unordered data source.

"
	end

	attribute 2216962 "UNORDERED"
	  public type class_ref 1155202 // Characteristics
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Indicates that the collection operation does not commit to preserving
the encounter order of input elements.  (This might be true if the
result container has no intrinsic order, such as a {@link Set}.)

"
	end

	attribute 2217090 "IDENTITY_FINISH"
	  public type class_ref 1155202 // Characteristics
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Indicates that the finisher function is the identity function and
can be elided.  If set, it must be the case that an unchecked cast
from A to R will succeed.
"
	end
      end

      operation 9488130 "characteristics"
	cpp_inline public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Characteristics> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Set} of {@code Collector.Characteristics} indicating
the characteristics of this Collector.  This set should be immutable.

@return an immutable set of collector characteristics
"
      end

      operation 9488258 "of"
	class_operation cpp_inline public return_type class_ref 1155074 // Collector
	nparams 4
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 192514 // BiConsumer
	  param inout name "combiner" type class_ref 1066626 // BinaryOperator
	  param inout name "" explicit_type "Characteristics...characteristics"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, R> ${type}<T, R, R> ${name}${(}${t0}<R> ${p0}, ${t1}<R, T> ${p1}, ${t2}<R> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code Collector} described by the given {@code supplier},
{@code accumulator}, and {@code combiner} functions.  The resulting
{@code Collector} has the {@code Collector.Characteristics.IDENTITY_FINISH}
characteristic.

@param supplier The supplier function for the new collector
@param accumulator The accumulator function for the new collector
@param combiner The combiner function for the new collector
@param characteristics The collector characteristics for the new
                       collector
@param <T> The type of input elements for the new collector
@param <R> The type of intermediate accumulation result, and final result,
          for the new collector
@throws NullPointerException if any argument is null
@return the new {@code Collector}
"
      end

      operation 9488386 "of"
	class_operation cpp_inline public return_type class_ref 1155074 // Collector
	nparams 5
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 192514 // BiConsumer
	  param inout name "combiner" type class_ref 1066626 // BinaryOperator
	  param inout name "finisher" type class_ref 192770 // Function
	  param inout name "" explicit_type "Characteristics...characteristics"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, A, R> ${type}<T, A, R> ${name}${(}${t0}<A> ${p0}, ${t1}<A, T> ${p1}, ${t2}<A> ${p2}, ${t3}<A, R> ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code Collector} described by the given {@code supplier},
{@code accumulator}, {@code combiner}, and {@code finisher} functions.

@param supplier The supplier function for the new collector
@param accumulator The accumulator function for the new collector
@param combiner The combiner function for the new collector
@param finisher The finisher function for the new collector
@param characteristics The collector characteristics for the new
                       collector
@param <T> The type of input elements for the new collector
@param <A> The intermediate accumulation type of the new collector
@param <R> The final result type of the new collector
@throws NullPointerException if any argument is null
@return the new {@code Collector}
"
      end
    end

    class 1155330 "Collectors"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Implementations of {@link Collector} that implement various useful reduction
operations, such as accumulating elements into collections, summarizing
elements according to various criteria, etc.

<p>The following are examples of using the predefined collectors to perform
common mutable reduction tasks:

<pre>{@code
    // Accumulate names into a List
    List<String> list = people.stream().map(Person::getName).collect(Collectors.toList());

    // Accumulate names into a TreeSet
    Set<String> set = people.stream().map(Person::getName).collect(Collectors.toCollection(TreeSet::new));

    // Convert elements to strings and concatenate them, separated by commas
    String joined = things.stream()
                          .map(Object::toString)
                          .collect(Collectors.joining(\", \"));

    // Compute sum of salaries of employee
    int total = employees.stream()
                         .collect(Collectors.summingInt(Employee::getSalary)));

    // Group employees by department
    Map<Department, List<Employee>> byDept
        = employees.stream()
                   .collect(Collectors.groupingBy(Employee::getDepartment));

    // Compute sum of salaries by department
    Map<Department, Integer> totalByDept
        = employees.stream()
                   .collect(Collectors.groupingBy(Employee::getDepartment,
                                                  Collectors.summingInt(Employee::getSalary)));

    // Partition students into passing and failing
    Map<Boolean, List<Student>> passingFailing =
        students.stream()
                .collect(Collectors.partitioningBy(s -> s.getGrade() >= PASS_THRESHOLD));

}</pre>

@since 1.8
"
      classrelation 3709826 // CH_CONCURRENT_ID (<unidirectional association>)
	relation 3709826 --->
	  a role_name "CH_CONCURRENT_ID" init_value "  Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.CONCURRENT,
                                                     Collector.Characteristics.UNORDERED,
                                                     Collector.Characteristics.IDENTITY_FINISH))" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Collector.Characteristics> ${name}${value};
"
	    classrelation_ref 3709826 // CH_CONCURRENT_ID (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3709954 // CH_CONCURRENT_NOID (<unidirectional association>)
	relation 3709954 --->
	  a role_name "CH_CONCURRENT_NOID" init_value "  Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.CONCURRENT,
                                                     Collector.Characteristics.UNORDERED))" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Collector.Characteristics> ${name}${value};
"
	    classrelation_ref 3709954 // CH_CONCURRENT_NOID (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3710082 // CH_ID (<unidirectional association>)
	relation 3710082 --->
	  a role_name "CH_ID" init_value "  Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.IDENTITY_FINISH))" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Collector.Characteristics> ${name}${value};
"
	    classrelation_ref 3710082 // CH_ID (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3710210 // CH_UNORDERED_ID (<unidirectional association>)
	relation 3710210 --->
	  a role_name "CH_UNORDERED_ID" init_value "  Collections.unmodifiableSet(EnumSet.of(Collector.Characteristics.UNORDERED,
                                                     Collector.Characteristics.IDENTITY_FINISH))" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Collector.Characteristics> ${name}${value};
"
	    classrelation_ref 3710210 // CH_UNORDERED_ID (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3710338 // CH_NOID (<unidirectional association>)
	relation 3710338 --->
	  a role_name "CH_NOID" init_value "  Collections.emptySet()" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Collector.Characteristics> ${name}${value};
"
	    classrelation_ref 3710338 // CH_NOID (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 9488514 "Collectors"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9488642 "throwingMerger"
	class_operation private return_type class_ref 1066626 // BinaryOperator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a merge function, suitable for use in
{@link Map#merge(Object, Object, BiFunction) Map.merge()} or
{@link #toMap(Function, Function, BinaryOperator) toMap()}, which always
throws {@code IllegalStateException}.  This can be used to enforce the
assumption that the elements being collected are distinct.

@param <T> the type of input arguments to the merge function
@return a merge function which always throw {@code IllegalStateException}
"
      end

      operation 9488770 "castingIdentity"
	class_operation private return_type class_ref 192770 // Function
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<I, R> ${type}<I, R> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      class 1155458 "CollectorImpl"
	visibility package 
	nformals 3
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "A" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "R" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1155074 // Collector
	  rank 0 explicit_value ""
	actual class class_ref 1155074 // Collector
	  rank 1 explicit_value ""
	actual class class_ref 1155074 // Collector
	  rank 2 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3710466 // <realization>
	  relation 3710466 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3710466 // <realization>
	    b parent class_ref 1155074 // Collector
	end

	classrelation 3710594 // supplier (<unidirectional association>)
	  relation 3710594 --->
	    a role_name "supplier" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<A> ${name}${value};
"
	      classrelation_ref 3710594 // supplier (<unidirectional association>)
	    b parent class_ref 933634 // Supplier
	end

	classrelation 3710722 // accumulator (<unidirectional association>)
	  relation 3710722 --->
	    a role_name "accumulator" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<A, T> ${name}${value};
"
	      classrelation_ref 3710722 // accumulator (<unidirectional association>)
	    b parent class_ref 192514 // BiConsumer
	end

	classrelation 3710850 // combiner (<unidirectional association>)
	  relation 3710850 --->
	    a role_name "combiner" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<A> ${name}${value};
"
	      classrelation_ref 3710850 // combiner (<unidirectional association>)
	    b parent class_ref 1066626 // BinaryOperator
	end

	classrelation 3710978 // finisher (<unidirectional association>)
	  relation 3710978 --->
	    a role_name "finisher" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<A, R> ${name}${value};
"
	      classrelation_ref 3710978 // finisher (<unidirectional association>)
	    b parent class_ref 192770 // Function
	end

	classrelation 3711106 // characteristics (<unidirectional association>)
	  relation 3711106 --->
	    a role_name "characteristics" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Characteristics> ${name}${value};
"
	      classrelation_ref 3711106 // characteristics (<unidirectional association>)
	    b parent class_ref 192258 // Set
	end

	operation 9488898 "CollectorImpl"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "supplier" type class_ref 933634 // Supplier
	    param inout name "accumulator" type class_ref 192514 // BiConsumer
	    param inout name "combiner" type class_ref 1066626 // BinaryOperator
	    param inout name "finisher" type class_ref 192770 // Function
	    param inout name "characteristics" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<A> ${p0}, ${t1}<A, T> ${p1}, ${t2}<A> ${p2}, ${t3}<A,R> ${p3}, ${t4}<Characteristics> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9489026 "CollectorImpl"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "supplier" type class_ref 933634 // Supplier
	    param inout name "accumulator" type class_ref 192514 // BiConsumer
	    param inout name "combiner" type class_ref 1066626 // BinaryOperator
	    param inout name "characteristics" type class_ref 192258 // Set
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<A> ${p0}, ${t1}<A, T> ${p1}, ${t2}<A> ${p2}, ${t3}<Characteristics> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9489154 "accumulator"
	  cpp_inline public return_type class_ref 192514 // BiConsumer
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<A, T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9489282 "supplier"
	  cpp_inline public return_type class_ref 933634 // Supplier
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<A> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9489410 "combiner"
	  cpp_inline public return_type class_ref 1066626 // BinaryOperator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<A> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9489538 "finisher"
	  cpp_inline public return_type class_ref 192770 // Function
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<A, R> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9489666 "characteristics"
	  cpp_inline public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Characteristics> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 9489794 "toCollection"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "collectionFactory" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, C extends Collection<T>> ${type}<T, ?, C> ${name}${(}${t0}<C> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that accumulates the input elements into a
new {@code Collection}, in encounter order.  The {@code Collection} is
created by the provided factory.

@param <T> the type of the input elements
@param <C> the type of the resulting {@code Collection}
@param collectionFactory a {@code Supplier} which returns a new, empty
{@code Collection} of the appropriate type
@return a {@code Collector} which collects all the input elements into a
{@code Collection}, in encounter order
"
      end

      operation 9489922 "toList"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, List<T>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that accumulates the input elements into a
new {@code List}. There are no guarantees on the type, mutability,
serializability, or thread-safety of the {@code List} returned; if more
control over the returned {@code List} is required, use {@link #toCollection(Supplier)}.

@param <T> the type of the input elements
@return a {@code Collector} which collects all the input elements into a
{@code List}, in encounter order
"
      end

      operation 9490050 "toSet"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Set<T>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that accumulates the input elements into a
new {@code Set}. There are no guarantees on the type, mutability,
serializability, or thread-safety of the {@code Set} returned; if more
control over the returned {@code Set} is required, use
{@link #toCollection(Supplier)}.

<p>This is an {@link Collector.Characteristics#UNORDERED unordered}
Collector.

@param <T> the type of the input elements
@return a {@code Collector} which collects all the input elements into a
{@code Set}
"
      end

      operation 9490178 "joining"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<CharSequence, ?, String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that concatenates the input elements into a
{@code String}, in encounter order.

@return a {@code Collector} that concatenates the input elements into a
{@code String}, in encounter order
"
      end

      operation 9490306 "joining"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "delimiter" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<CharSequence, ?, String> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that concatenates the input elements,
separated by the specified delimiter, in encounter order.

@param delimiter the delimiter to be used between each element
@return A {@code Collector} which concatenates CharSequence elements,
separated by the specified delimiter, in encounter order
"
      end

      operation 9490434 "joining"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 3
	  param inout name "delimiter" type class_ref 429442 // CharSequence
	  param inout name "prefix" type class_ref 429442 // CharSequence
	  param inout name "suffix" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<CharSequence, ?, String> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that concatenates the input elements,
separated by the specified delimiter, with the specified prefix and
suffix, in encounter order.

@param delimiter the delimiter to be used between each element
@param  prefix the sequence of characters to be used at the beginning
               of the joined result
@param  suffix the sequence of characters to be used at the end
               of the joined result
@return A {@code Collector} which concatenates CharSequence elements,
separated by the specified delimiter, in encounter order
"
      end

      operation 9490562 "mapMerger"
	class_operation private return_type class_ref 1066626 // BinaryOperator
	nparams 1
	  param inout name "mergeFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K, V, M extends Map<K,V>> ${type}<M> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@code BinaryOperator<Map>} that merges the contents of its right
argument into its left argument, using the provided merge function to
handle duplicate keys.

@param <K> type of the map keys
@param <V> type of the map values
@param <M> type of the map
@param mergeFunction A merge function suitable for
{@link Map#merge(Object, Object, BiFunction) Map.merge()}
@return a merge function for two maps
"
      end

      operation 9490690 "mapping"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 2
	  param inout name "mapper" type class_ref 192770 // Function
	  param inout name "downstream" type class_ref 1155074 // Collector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, U, A, R> ${type}<T, ?, R> ${name}${(}${t0}<? super T, ? extends U> ${p0}, ${t1}<? super U, A, R> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapts a {@code Collector} accepting elements of type {@code U} to one
accepting elements of type {@code T} by applying a mapping function to
each input element before accumulation.

@apiNote
The {@code mapping()} collectors are most useful when used in a
multi-level reduction, such as downstream of a {@code groupingBy} or
{@code partitioningBy}.  For example, given a stream of
{@code Person}, to accumulate the set of last names in each city:
<pre>{@code
    Map<City, Set<String>> lastNamesByCity
        = people.stream().collect(groupingBy(Person::getCity,
                                             mapping(Person::getLastName, toSet())));
}</pre>

@param <T> the type of the input elements
@param <U> type of elements accepted by downstream collector
@param <A> intermediate accumulation type of the downstream collector
@param <R> result type of collector
@param mapper a function to be applied to the input elements
@param downstream a collector which will accept mapped values
@return a collector which applies the mapping function to the input
elements and provides the mapped results to the downstream collector
"
      end

      operation 9490818 "collectingAndThen"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 2
	  param inout name "downstream" type class_ref 1155074 // Collector
	  param inout name "finisher" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T,A,R,RR> ${type}<T,A,RR> ${name}${(}${t0}<T,A,R> ${p0}, ${t1}<R,RR> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapts a {@code Collector} to perform an additional finishing
transformation.  For example, one could adapt the {@link #toList()}
collector to always produce an immutable list with:
<pre>{@code
    List<String> people
        = people.stream().collect(collectingAndThen(toList(), Collections::unmodifiableList));
}</pre>

@param <T> the type of the input elements
@param <A> intermediate accumulation type of the downstream collector
@param <R> result type of the downstream collector
@param <RR> result type of the resulting collector
@param downstream a collector
@param finisher a function to be applied to the final result of the downstream collector
@return a collector which performs the action of the downstream collector,
followed by an additional finishing step
"
      end

      operation 9490946 "counting"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Long> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} accepting elements of type {@code T} that
counts the number of input elements.  If no elements are present, the
result is 0.

@implSpec
This produces a result equivalent to:
<pre>{@code
    reducing(0L, e -> 1L, Long::sum)
}</pre>

@param <T> the type of the input elements
@return a {@code Collector} that counts the input elements
"
      end

      operation 9491074 "minBy"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Optional<T>> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that produces the minimal element according
to a given {@code Comparator}, described as an {@code Optional<T>}.

@implSpec
This produces a result equivalent to:
<pre>{@code
    reducing(BinaryOperator.minBy(comparator))
}</pre>

@param <T> the type of the input elements
@param comparator a {@code Comparator} for comparing elements
@return a {@code Collector} that produces the minimal value
"
      end

      operation 9491202 "maxBy"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Optional<T>> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that produces the maximal element according
to a given {@code Comparator}, described as an {@code Optional<T>}.

@implSpec
This produces a result equivalent to:
<pre>{@code
    reducing(BinaryOperator.maxBy(comparator))
}</pre>

@param <T> the type of the input elements
@param comparator a {@code Comparator} for comparing elements
@return a {@code Collector} that produces the maximal value
"
      end

      operation 9491330 "summingInt"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 193922 // ToIntFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Integer> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that produces the sum of a integer-valued
function applied to the input elements.  If no elements are present,
the result is 0.

@param <T> the type of the input elements
@param mapper a function extracting the property to be summed
@return a {@code Collector} that produces the sum of a derived property
"
      end

      operation 9491458 "summingLong"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 194050 // ToLongFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Long> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that produces the sum of a long-valued
function applied to the input elements.  If no elements are present,
the result is 0.

@param <T> the type of the input elements
@param mapper a function extracting the property to be summed
@return a {@code Collector} that produces the sum of a derived property
"
      end

      operation 9491586 "summingDouble"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 194178 // ToDoubleFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Double> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that produces the sum of a double-valued
function applied to the input elements.  If no elements are present,
the result is 0.

<p>The sum returned can vary depending upon the order in which
values are recorded, due to accumulated rounding error in
addition of values of differing magnitudes. Values sorted by increasing
absolute magnitude tend to yield more accurate results.  If any recorded
value is a {@code NaN} or the sum is at any point a {@code NaN} then the
sum will be {@code NaN}.

@param <T> the type of the input elements
@param mapper a function extracting the property to be summed
@return a {@code Collector} that produces the sum of a derived property
"
      end

      operation 9491714 "sumWithCompensation"
	class_operation package explicit_return_type "double"
	nparams 2
	  param inout name "intermediateSum" explicit_type "double"
	multiplicity "[]"
	  param in name "value" explicit_type "double"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Incorporate a new double value using Kahan summation /
compensation summation.

High-order bits of the sum are in intermediateSum[0], low-order
bits of the sum are in intermediateSum[1], any additional
elements are application-specific.

@param intermediateSum the high-order and low-order words of the intermediate sum
@param value the name value to be included in the running sum
"
      end

      operation 9491842 "computeFinalSum"
	class_operation package explicit_return_type "double"
	nparams 1
	  param inout name "summands" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the compensated sum is spuriously NaN from accumulating one
or more same-signed infinite values, return the
correctly-signed infinity stored in the simple sum.
"
      end

      operation 9491970 "averagingInt"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 193922 // ToIntFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Double> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that produces the arithmetic mean of an integer-valued
function applied to the input elements.  If no elements are present,
the result is 0.

@param <T> the type of the input elements
@param mapper a function extracting the property to be summed
@return a {@code Collector} that produces the sum of a derived property
"
      end

      operation 9492098 "averagingLong"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 194050 // ToLongFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Double> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that produces the arithmetic mean of a long-valued
function applied to the input elements.  If no elements are present,
the result is 0.

@param <T> the type of the input elements
@param mapper a function extracting the property to be summed
@return a {@code Collector} that produces the sum of a derived property
"
      end

      operation 9492226 "averagingDouble"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 194178 // ToDoubleFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Double> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that produces the arithmetic mean of a double-valued
function applied to the input elements.  If no elements are present,
the result is 0.

<p>The average returned can vary depending upon the order in which
values are recorded, due to accumulated rounding error in
addition of values of differing magnitudes. Values sorted by increasing
absolute magnitude tend to yield more accurate results.  If any recorded
value is a {@code NaN} or the sum is at any point a {@code NaN} then the
average will be {@code NaN}.

@implNote The {@code double} format can represent all
consecutive integers in the range -2<sup>53</sup> to
2<sup>53</sup>. If the pipeline has more than 2<sup>53</sup>
values, the divisor in the average computation will saturate at
2<sup>53</sup>, leading to additional numerical errors.

@param <T> the type of the input elements
@param mapper a function extracting the property to be summed
@return a {@code Collector} that produces the sum of a derived property
"
      end

      operation 9492354 "reducing"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 2
	  param inout name "identity" explicit_type "T"
	  param inout name "op" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} which performs a reduction of its
input elements under a specified {@code BinaryOperator} using the
provided identity.

@apiNote
The {@code reducing()} collectors are most useful when used in a
multi-level reduction, downstream of {@code groupingBy} or
{@code partitioningBy}.  To perform a simple reduction on a stream,
use {@link Stream#reduce(Object, BinaryOperator)}} instead.

@param <T> element type for the input and output of the reduction
@param identity the identity value for the reduction (also, the value
                that is returned when there are no input elements)
@param op a {@code BinaryOperator<T>} used to reduce the input elements
@return a {@code Collector} which implements the reduction operation

@see #reducing(BinaryOperator)
@see #reducing(Object, Function, BinaryOperator)
"
      end

      operation 9492482 "boxSupplier"
	class_operation private return_type class_ref 933634 // Supplier
	nparams 1
	  param inout name "identity" explicit_type "T"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T[]> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9492610 "reducing"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "op" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Optional<T>> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} which performs a reduction of its
input elements under a specified {@code BinaryOperator}.  The result
is described as an {@code Optional<T>}.

@apiNote
The {@code reducing()} collectors are most useful when used in a
multi-level reduction, downstream of {@code groupingBy} or
{@code partitioningBy}.  To perform a simple reduction on a stream,
use {@link Stream#reduce(BinaryOperator)} instead.

<p>For example, given a stream of {@code Person}, to calculate tallest
person in each city:
<pre>{@code
    Comparator<Person> byHeight = Comparator.comparing(Person::getHeight);
    Map<City, Person> tallestByCity
        = people.stream().collect(groupingBy(Person::getCity, reducing(BinaryOperator.maxBy(byHeight))));
}</pre>

@param <T> element type for the input and output of the reduction
@param op a {@code BinaryOperator<T>} used to reduce the input elements
@return a {@code Collector} which implements the reduction operation

@see #reducing(Object, BinaryOperator)
@see #reducing(Object, Function, BinaryOperator)
"
      end

      operation 9492738 "reducing"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 3
	  param inout name "identity" explicit_type "U"
	  param inout name "mapper" type class_ref 192770 // Function
	  param inout name "op" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, U> ${type}<T, ?, U> ${name}${(}${t0} ${p0}, ${t1}<? super T, ? extends U> ${p1}, ${t2}<U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} which performs a reduction of its
input elements under a specified mapping function and
{@code BinaryOperator}. This is a generalization of
{@link #reducing(Object, BinaryOperator)} which allows a transformation
of the elements before reduction.

@apiNote
The {@code reducing()} collectors are most useful when used in a
multi-level reduction, downstream of {@code groupingBy} or
{@code partitioningBy}.  To perform a simple map-reduce on a stream,
use {@link Stream#map(Function)} and {@link Stream#reduce(Object, BinaryOperator)}
instead.

<p>For example, given a stream of {@code Person}, to calculate the longest
last name of residents in each city:
<pre>{@code
    Comparator<String> byLength = Comparator.comparing(String::length);
    Map<City, String> longestLastNameByCity
        = people.stream().collect(groupingBy(Person::getCity,
                                             reducing(Person::getLastName, BinaryOperator.maxBy(byLength))));
}</pre>

@param <T> the type of the input elements
@param <U> the type of the mapped values
@param identity the identity value for the reduction (also, the value
                that is returned when there are no input elements)
@param mapper a mapping function to apply to each input value
@param op a {@code BinaryOperator<U>} used to reduce the mapped values
@return a {@code Collector} implementing the map-reduce operation

@see #reducing(Object, BinaryOperator)
@see #reducing(BinaryOperator)
"
      end

      operation 9492866 "groupingBy"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "classifier" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K> ${type}<T, ?, Map<K, List<T>>> ${name}${(}${t0}<? super T, ? extends K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} implementing a \"group by\" operation on
input elements of type {@code T}, grouping elements according to a
classification function, and returning the results in a {@code Map}.

<p>The classification function maps elements to some key type {@code K}.
The collector produces a {@code Map<K, List<T>>} whose keys are the
values resulting from applying the classification function to the input
elements, and whose corresponding values are {@code List}s containing the
input elements which map to the associated key under the classification
function.

<p>There are no guarantees on the type, mutability, serializability, or
thread-safety of the {@code Map} or {@code List} objects returned.
@implSpec
This produces a result similar to:
<pre>{@code
    groupingBy(classifier, toList());
}</pre>

@implNote
The returned {@code Collector} is not concurrent.  For parallel stream
pipelines, the {@code combiner} function operates by merging the keys
from one map into another, which can be an expensive operation.  If
preservation of the order in which elements appear in the resulting {@code Map}
collector is not required, using {@link #groupingByConcurrent(Function)}
may offer better parallel performance.

@param <T> the type of the input elements
@param <K> the type of the keys
@param classifier the classifier function mapping input elements to keys
@return a {@code Collector} implementing the group-by operation

@see #groupingBy(Function, Collector)
@see #groupingBy(Function, Supplier, Collector)
@see #groupingByConcurrent(Function)
"
      end

      operation 9492994 "groupingBy"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 2
	  param inout name "classifier" type class_ref 192770 // Function
	  param inout name "downstream" type class_ref 1155074 // Collector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, A, D> ${type}<T, ?, Map<K, D>> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<? super T, A, D> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} implementing a cascaded \"group by\" operation
on input elements of type {@code T}, grouping elements according to a
classification function, and then performing a reduction operation on
the values associated with a given key using the specified downstream
{@code Collector}.

<p>The classification function maps elements to some key type {@code K}.
The downstream collector operates on elements of type {@code T} and
produces a result of type {@code D}. The resulting collector produces a
{@code Map<K, D>}.

<p>There are no guarantees on the type, mutability,
serializability, or thread-safety of the {@code Map} returned.

<p>For example, to compute the set of last names of people in each city:
<pre>{@code
    Map<City, Set<String>> namesByCity
        = people.stream().collect(groupingBy(Person::getCity,
                                             mapping(Person::getLastName, toSet())));
}</pre>

@implNote
The returned {@code Collector} is not concurrent.  For parallel stream
pipelines, the {@code combiner} function operates by merging the keys
from one map into another, which can be an expensive operation.  If
preservation of the order in which elements are presented to the downstream
collector is not required, using {@link #groupingByConcurrent(Function, Collector)}
may offer better parallel performance.

@param <T> the type of the input elements
@param <K> the type of the keys
@param <A> the intermediate accumulation type of the downstream collector
@param <D> the result type of the downstream reduction
@param classifier a classifier function mapping input elements to keys
@param downstream a {@code Collector} implementing the downstream reduction
@return a {@code Collector} implementing the cascaded group-by operation
@see #groupingBy(Function)

@see #groupingBy(Function, Supplier, Collector)
@see #groupingByConcurrent(Function, Collector)
"
      end

      operation 9493122 "groupingBy"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 3
	  param inout name "classifier" type class_ref 192770 // Function
	  param inout name "mapFactory" type class_ref 933634 // Supplier
	  param inout name "downstream" type class_ref 1155074 // Collector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, D, A, M extends Map<K, D>> ${type}<T, ?, M> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<M> ${p1}, ${t2}<? super T, A, D> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} implementing a cascaded \"group by\" operation
on input elements of type {@code T}, grouping elements according to a
classification function, and then performing a reduction operation on
the values associated with a given key using the specified downstream
{@code Collector}.  The {@code Map} produced by the Collector is created
with the supplied factory function.

<p>The classification function maps elements to some key type {@code K}.
The downstream collector operates on elements of type {@code T} and
produces a result of type {@code D}. The resulting collector produces a
{@code Map<K, D>}.

<p>For example, to compute the set of last names of people in each city,
where the city names are sorted:
<pre>{@code
    Map<City, Set<String>> namesByCity
        = people.stream().collect(groupingBy(Person::getCity, TreeMap::new,
                                             mapping(Person::getLastName, toSet())));
}</pre>

@implNote
The returned {@code Collector} is not concurrent.  For parallel stream
pipelines, the {@code combiner} function operates by merging the keys
from one map into another, which can be an expensive operation.  If
preservation of the order in which elements are presented to the downstream
collector is not required, using {@link #groupingByConcurrent(Function, Supplier, Collector)}
may offer better parallel performance.

@param <T> the type of the input elements
@param <K> the type of the keys
@param <A> the intermediate accumulation type of the downstream collector
@param <D> the result type of the downstream reduction
@param <M> the type of the resulting {@code Map}
@param classifier a classifier function mapping input elements to keys
@param downstream a {@code Collector} implementing the downstream reduction
@param mapFactory a function which, when called, produces a new empty
                  {@code Map} of the desired type
@return a {@code Collector} implementing the cascaded group-by operation

@see #groupingBy(Function, Collector)
@see #groupingBy(Function)
@see #groupingByConcurrent(Function, Supplier, Collector)
"
      end

      operation 9493250 "groupingByConcurrent"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "classifier" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K> ${type}<T, ?, ConcurrentMap<K, List<T>>> ${name}${(}${t0}<? super T, ? extends K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a concurrent {@code Collector} implementing a \"group by\"
operation on input elements of type {@code T}, grouping elements
according to a classification function.

<p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and
{@link Collector.Characteristics#UNORDERED unordered} Collector.

<p>The classification function maps elements to some key type {@code K}.
The collector produces a {@code ConcurrentMap<K, List<T>>} whose keys are the
values resulting from applying the classification function to the input
elements, and whose corresponding values are {@code List}s containing the
input elements which map to the associated key under the classification
function.

<p>There are no guarantees on the type, mutability, or serializability
of the {@code Map} or {@code List} objects returned, or of the
thread-safety of the {@code List} objects returned.
@implSpec
This produces a result similar to:
<pre>{@code
    groupingByConcurrent(classifier, toList());
}</pre>

@param <T> the type of the input elements
@param <K> the type of the keys
@param classifier a classifier function mapping input elements to keys
@return a concurrent, unordered {@code Collector} implementing the group-by operation

@see #groupingBy(Function)
@see #groupingByConcurrent(Function, Collector)
@see #groupingByConcurrent(Function, Supplier, Collector)
"
      end

      operation 9493378 "groupingByConcurrent"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 2
	  param inout name "classifier" type class_ref 192770 // Function
	  param inout name "downstream" type class_ref 1155074 // Collector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, A, D> ${type}<T, ?, ConcurrentMap<K, D>> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<? super T, A, D> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a concurrent {@code Collector} implementing a cascaded \"group by\"
operation on input elements of type {@code T}, grouping elements
according to a classification function, and then performing a reduction
operation on the values associated with a given key using the specified
downstream {@code Collector}.

<p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and
{@link Collector.Characteristics#UNORDERED unordered} Collector.

<p>The classification function maps elements to some key type {@code K}.
The downstream collector operates on elements of type {@code T} and
produces a result of type {@code D}. The resulting collector produces a
{@code Map<K, D>}.

<p>For example, to compute the set of last names of people in each city,
where the city names are sorted:
<pre>{@code
    ConcurrentMap<City, Set<String>> namesByCity
        = people.stream().collect(groupingByConcurrent(Person::getCity,
                                                       mapping(Person::getLastName, toSet())));
}</pre>

@param <T> the type of the input elements
@param <K> the type of the keys
@param <A> the intermediate accumulation type of the downstream collector
@param <D> the result type of the downstream reduction
@param classifier a classifier function mapping input elements to keys
@param downstream a {@code Collector} implementing the downstream reduction
@return a concurrent, unordered {@code Collector} implementing the cascaded group-by operation

@see #groupingBy(Function, Collector)
@see #groupingByConcurrent(Function)
@see #groupingByConcurrent(Function, Supplier, Collector)
"
      end

      operation 9493506 "groupingByConcurrent"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 3
	  param inout name "classifier" type class_ref 192770 // Function
	  param inout name "mapFactory" type class_ref 933634 // Supplier
	  param inout name "downstream" type class_ref 1155074 // Collector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, A, D, M extends ConcurrentMap<K, D>> ${type}<T, ?, M> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<M> ${p1}, ${t2}<? super T, A, D> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a concurrent {@code Collector} implementing a cascaded \"group by\"
operation on input elements of type {@code T}, grouping elements
according to a classification function, and then performing a reduction
operation on the values associated with a given key using the specified
downstream {@code Collector}.  The {@code ConcurrentMap} produced by the
Collector is created with the supplied factory function.

<p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and
{@link Collector.Characteristics#UNORDERED unordered} Collector.

<p>The classification function maps elements to some key type {@code K}.
The downstream collector operates on elements of type {@code T} and
produces a result of type {@code D}. The resulting collector produces a
{@code Map<K, D>}.

<p>For example, to compute the set of last names of people in each city,
where the city names are sorted:
<pre>{@code
    ConcurrentMap<City, Set<String>> namesByCity
        = people.stream().collect(groupingBy(Person::getCity, ConcurrentSkipListMap::new,
                                             mapping(Person::getLastName, toSet())));
}</pre>


@param <T> the type of the input elements
@param <K> the type of the keys
@param <A> the intermediate accumulation type of the downstream collector
@param <D> the result type of the downstream reduction
@param <M> the type of the resulting {@code ConcurrentMap}
@param classifier a classifier function mapping input elements to keys
@param downstream a {@code Collector} implementing the downstream reduction
@param mapFactory a function which, when called, produces a new empty
                  {@code ConcurrentMap} of the desired type
@return a concurrent, unordered {@code Collector} implementing the cascaded group-by operation

@see #groupingByConcurrent(Function)
@see #groupingByConcurrent(Function, Collector)
@see #groupingBy(Function, Supplier, Collector)
"
      end

      operation 9493634 "partitioningBy"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, Map<Boolean, List<T>>> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} which partitions the input elements according
to a {@code Predicate}, and organizes them into a
{@code Map<Boolean, List<T>>}.

There are no guarantees on the type, mutability,
serializability, or thread-safety of the {@code Map} returned.

@param <T> the type of the input elements
@param predicate a predicate used for classifying input elements
@return a {@code Collector} implementing the partitioning operation

@see #partitioningBy(Predicate, Collector)
"
      end

      operation 9493762 "partitioningBy"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 2
	  param inout name "predicate" type class_ref 184578 // Predicate
	  param inout name "downstream" type class_ref 1155074 // Collector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, D, A> ${type}<T, ?, Map<Boolean, D>> ${name}${(}${t0}<? super T> ${p0}, ${t1}<? super T, A, D> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} which partitions the input elements according
to a {@code Predicate}, reduces the values in each partition according to
another {@code Collector}, and organizes them into a
{@code Map<Boolean, D>} whose values are the result of the downstream
reduction.

<p>There are no guarantees on the type, mutability,
serializability, or thread-safety of the {@code Map} returned.

@param <T> the type of the input elements
@param <A> the intermediate accumulation type of the downstream collector
@param <D> the result type of the downstream reduction
@param predicate a predicate used for classifying input elements
@param downstream a {@code Collector} implementing the downstream
                  reduction
@return a {@code Collector} implementing the cascaded partitioning
        operation

@see #partitioningBy(Predicate)
"
      end

      operation 9493890 "toMap"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 2
	  param inout name "keyMapper" type class_ref 192770 // Function
	  param inout name "valueMapper" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, U> ${type}<T, ?, Map<K,U>> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<? super T, ? extends U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that accumulates elements into a
{@code Map} whose keys and values are the result of applying the provided
mapping functions to the input elements.

<p>If the mapped keys contains duplicates (according to
{@link Object#equals(Object)}), an {@code IllegalStateException} is
thrown when the collection operation is performed.  If the mapped keys
may have duplicates, use {@link #toMap(Function, Function, BinaryOperator)}
instead.

@apiNote
It is common for either the key or the value to be the input elements.
In this case, the utility method
{@link java.util.function.Function#identity()} may be helpful.
For example, the following produces a {@code Map} mapping
students to their grade point average:
<pre>{@code
    Map<Student, Double> studentToGPA
        students.stream().collect(toMap(Functions.identity(),
                                        student -> computeGPA(student)));
}</pre>
And the following produces a {@code Map} mapping a unique identifier to
students:
<pre>{@code
    Map<String, Student> studentIdToStudent
        students.stream().collect(toMap(Student::getId,
                                        Functions.identity());
}</pre>

@implNote
The returned {@code Collector} is not concurrent.  For parallel stream
pipelines, the {@code combiner} function operates by merging the keys
from one map into another, which can be an expensive operation.  If it is
not required that results are inserted into the {@code Map} in encounter
order, using {@link #toConcurrentMap(Function, Function)}
may offer better parallel performance.

@param <T> the type of the input elements
@param <K> the output type of the key mapping function
@param <U> the output type of the value mapping function
@param keyMapper a mapping function to produce keys
@param valueMapper a mapping function to produce values
@return a {@code Collector} which collects elements into a {@code Map}
whose keys and values are the result of applying mapping functions to
the input elements

@see #toMap(Function, Function, BinaryOperator)
@see #toMap(Function, Function, BinaryOperator, Supplier)
@see #toConcurrentMap(Function, Function)
"
      end

      operation 9494018 "toMap"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 3
	  param inout name "keyMapper" type class_ref 192770 // Function
	  param inout name "valueMapper" type class_ref 192770 // Function
	  param inout name "mergeFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, U> ${type}<T, ?, Map<K,U>> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<? super T, ? extends U> ${p1}, ${t2}<U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that accumulates elements into a
{@code Map} whose keys and values are the result of applying the provided
mapping functions to the input elements.

<p>If the mapped
keys contains duplicates (according to {@link Object#equals(Object)}),
the value mapping function is applied to each equal element, and the
results are merged using the provided merging function.

@apiNote
There are multiple ways to deal with collisions between multiple elements
mapping to the same key.  The other forms of {@code toMap} simply use
a merge function that throws unconditionally, but you can easily write
more flexible merge policies.  For example, if you have a stream
of {@code Person}, and you want to produce a \"phone book\" mapping name to
address, but it is possible that two persons have the same name, you can
do as follows to gracefully deals with these collisions, and produce a
{@code Map} mapping names to a concatenated list of addresses:
<pre>{@code
    Map<String, String> phoneBook
        people.stream().collect(toMap(Person::getName,
                                      Person::getAddress,
                                      (s, a) -> s + \", \" + a));
}</pre>

@implNote
The returned {@code Collector} is not concurrent.  For parallel stream
pipelines, the {@code combiner} function operates by merging the keys
from one map into another, which can be an expensive operation.  If it is
not required that results are merged into the {@code Map} in encounter
order, using {@link #toConcurrentMap(Function, Function, BinaryOperator)}
may offer better parallel performance.

@param <T> the type of the input elements
@param <K> the output type of the key mapping function
@param <U> the output type of the value mapping function
@param keyMapper a mapping function to produce keys
@param valueMapper a mapping function to produce values
@param mergeFunction a merge function, used to resolve collisions between
                     values associated with the same key, as supplied
                     to {@link Map#merge(Object, Object, BiFunction)}
@return a {@code Collector} which collects elements into a {@code Map}
whose keys are the result of applying a key mapping function to the input
elements, and whose values are the result of applying a value mapping
function to all input elements equal to the key and combining them
using the merge function

@see #toMap(Function, Function)
@see #toMap(Function, Function, BinaryOperator, Supplier)
@see #toConcurrentMap(Function, Function, BinaryOperator)
"
      end

      operation 9494146 "toMap"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 4
	  param inout name "keyMapper" type class_ref 192770 // Function
	  param inout name "valueMapper" type class_ref 192770 // Function
	  param inout name "mergeFunction" type class_ref 1066626 // BinaryOperator
	  param inout name "mapSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, U, M extends Map<K, U>> ${type}<T, ?, M> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<? super T, ? extends U> ${p1}, ${t2}<U> ${p2}, ${t3}<M> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} that accumulates elements into a
{@code Map} whose keys and values are the result of applying the provided
mapping functions to the input elements.

<p>If the mapped
keys contains duplicates (according to {@link Object#equals(Object)}),
the value mapping function is applied to each equal element, and the
results are merged using the provided merging function.  The {@code Map}
is created by a provided supplier function.

@implNote
The returned {@code Collector} is not concurrent.  For parallel stream
pipelines, the {@code combiner} function operates by merging the keys
from one map into another, which can be an expensive operation.  If it is
not required that results are merged into the {@code Map} in encounter
order, using {@link #toConcurrentMap(Function, Function, BinaryOperator, Supplier)}
may offer better parallel performance.

@param <T> the type of the input elements
@param <K> the output type of the key mapping function
@param <U> the output type of the value mapping function
@param <M> the type of the resulting {@code Map}
@param keyMapper a mapping function to produce keys
@param valueMapper a mapping function to produce values
@param mergeFunction a merge function, used to resolve collisions between
                     values associated with the same key, as supplied
                     to {@link Map#merge(Object, Object, BiFunction)}
@param mapSupplier a function which returns a new, empty {@code Map} into
                   which the results will be inserted
@return a {@code Collector} which collects elements into a {@code Map}
whose keys are the result of applying a key mapping function to the input
elements, and whose values are the result of applying a value mapping
function to all input elements equal to the key and combining them
using the merge function

@see #toMap(Function, Function)
@see #toMap(Function, Function, BinaryOperator)
@see #toConcurrentMap(Function, Function, BinaryOperator, Supplier)
"
      end

      operation 9494274 "toConcurrentMap"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 2
	  param inout name "keyMapper" type class_ref 192770 // Function
	  param inout name "valueMapper" type class_ref 192770 // Function
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, U> ${type}<T, ?, ConcurrentMap<K,U>> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<? super T, ? extends U> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a concurrent {@code Collector} that accumulates elements into a
{@code ConcurrentMap} whose keys and values are the result of applying
the provided mapping functions to the input elements.

<p>If the mapped keys contains duplicates (according to
{@link Object#equals(Object)}), an {@code IllegalStateException} is
thrown when the collection operation is performed.  If the mapped keys
may have duplicates, use
{@link #toConcurrentMap(Function, Function, BinaryOperator)} instead.

@apiNote
It is common for either the key or the value to be the input elements.
In this case, the utility method
{@link java.util.function.Function#identity()} may be helpful.
For example, the following produces a {@code Map} mapping
students to their grade point average:
<pre>{@code
    Map<Student, Double> studentToGPA
        students.stream().collect(toMap(Functions.identity(),
                                        student -> computeGPA(student)));
}</pre>
And the following produces a {@code Map} mapping a unique identifier to
students:
<pre>{@code
    Map<String, Student> studentIdToStudent
        students.stream().collect(toConcurrentMap(Student::getId,
                                                  Functions.identity());
}</pre>

<p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and
{@link Collector.Characteristics#UNORDERED unordered} Collector.

@param <T> the type of the input elements
@param <K> the output type of the key mapping function
@param <U> the output type of the value mapping function
@param keyMapper the mapping function to produce keys
@param valueMapper the mapping function to produce values
@return a concurrent, unordered {@code Collector} which collects elements into a
{@code ConcurrentMap} whose keys are the result of applying a key mapping
function to the input elements, and whose values are the result of
applying a value mapping function to the input elements

@see #toMap(Function, Function)
@see #toConcurrentMap(Function, Function, BinaryOperator)
@see #toConcurrentMap(Function, Function, BinaryOperator, Supplier)
"
      end

      operation 9494402 "toConcurrentMap"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 3
	  param inout name "keyMapper" type class_ref 192770 // Function
	  param inout name "valueMapper" type class_ref 192770 // Function
	  param inout name "mergeFunction" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, U> ${type}<T, ?, ConcurrentMap<K,U>> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<? super T, ? extends U> ${p1}, ${t2}<U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a concurrent {@code Collector} that accumulates elements into a
{@code ConcurrentMap} whose keys and values are the result of applying
the provided mapping functions to the input elements.

<p>If the mapped keys contains duplicates (according to {@link Object#equals(Object)}),
the value mapping function is applied to each equal element, and the
results are merged using the provided merging function.

@apiNote
There are multiple ways to deal with collisions between multiple elements
mapping to the same key.  The other forms of {@code toConcurrentMap} simply use
a merge function that throws unconditionally, but you can easily write
more flexible merge policies.  For example, if you have a stream
of {@code Person}, and you want to produce a \"phone book\" mapping name to
address, but it is possible that two persons have the same name, you can
do as follows to gracefully deals with these collisions, and produce a
{@code Map} mapping names to a concatenated list of addresses:
<pre>{@code
    Map<String, String> phoneBook
        people.stream().collect(toConcurrentMap(Person::getName,
                                                Person::getAddress,
                                                (s, a) -> s + \", \" + a));
}</pre>

<p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and
{@link Collector.Characteristics#UNORDERED unordered} Collector.

@param <T> the type of the input elements
@param <K> the output type of the key mapping function
@param <U> the output type of the value mapping function
@param keyMapper a mapping function to produce keys
@param valueMapper a mapping function to produce values
@param mergeFunction a merge function, used to resolve collisions between
                     values associated with the same key, as supplied
                     to {@link Map#merge(Object, Object, BiFunction)}
@return a concurrent, unordered {@code Collector} which collects elements into a
{@code ConcurrentMap} whose keys are the result of applying a key mapping
function to the input elements, and whose values are the result of
applying a value mapping function to all input elements equal to the key
and combining them using the merge function

@see #toConcurrentMap(Function, Function)
@see #toConcurrentMap(Function, Function, BinaryOperator, Supplier)
@see #toMap(Function, Function, BinaryOperator)
"
      end

      operation 9494530 "toConcurrentMap"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 4
	  param inout name "keyMapper" type class_ref 192770 // Function
	  param inout name "valueMapper" type class_ref 192770 // Function
	  param inout name "mergeFunction" type class_ref 1066626 // BinaryOperator
	  param inout name "mapSupplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, K, U, M extends ConcurrentMap<K, U>> ${type}<T, ?, M> ${name}${(}${t0}<? super T, ? extends K> ${p0}, ${t1}<? super T, ? extends U> ${p1}, ${t2}<U> ${p2}, ${t3}<M> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a concurrent {@code Collector} that accumulates elements into a
{@code ConcurrentMap} whose keys and values are the result of applying
the provided mapping functions to the input elements.

<p>If the mapped keys contains duplicates (according to {@link Object#equals(Object)}),
the value mapping function is applied to each equal element, and the
results are merged using the provided merging function.  The
{@code ConcurrentMap} is created by a provided supplier function.

<p>This is a {@link Collector.Characteristics#CONCURRENT concurrent} and
{@link Collector.Characteristics#UNORDERED unordered} Collector.

@param <T> the type of the input elements
@param <K> the output type of the key mapping function
@param <U> the output type of the value mapping function
@param <M> the type of the resulting {@code ConcurrentMap}
@param keyMapper a mapping function to produce keys
@param valueMapper a mapping function to produce values
@param mergeFunction a merge function, used to resolve collisions between
                     values associated with the same key, as supplied
                     to {@link Map#merge(Object, Object, BiFunction)}
@param mapSupplier a function which returns a new, empty {@code Map} into
                   which the results will be inserted
@return a concurrent, unordered {@code Collector} which collects elements into a
{@code ConcurrentMap} whose keys are the result of applying a key mapping
function to the input elements, and whose values are the result of
applying a value mapping function to all input elements equal to the key
and combining them using the merge function

@see #toConcurrentMap(Function, Function)
@see #toConcurrentMap(Function, Function, BinaryOperator)
@see #toMap(Function, Function, BinaryOperator, Supplier)
"
      end

      operation 9494658 "summarizingInt"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 193922 // ToIntFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, IntSummaryStatistics> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} which applies an {@code int}-producing
mapping function to each input element, and returns summary statistics
for the resulting values.

@param <T> the type of the input elements
@param mapper a mapping function to apply to each element
@return a {@code Collector} implementing the summary-statistics reduction

@see #summarizingDouble(ToDoubleFunction)
@see #summarizingLong(ToLongFunction)
"
      end

      operation 9494786 "summarizingLong"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 194050 // ToLongFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, LongSummaryStatistics> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} which applies an {@code long}-producing
mapping function to each input element, and returns summary statistics
for the resulting values.

@param <T> the type of the input elements
@param mapper the mapping function to apply to each element
@return a {@code Collector} implementing the summary-statistics reduction

@see #summarizingDouble(ToDoubleFunction)
@see #summarizingInt(ToIntFunction)
"
      end

      operation 9494914 "summarizingDouble"
	class_operation public return_type class_ref 1155074 // Collector
	nparams 1
	  param inout name "mapper" type class_ref 194178 // ToDoubleFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, ?, DoubleSummaryStatistics> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collector} which applies an {@code double}-producing
mapping function to each input element, and returns summary statistics
for the resulting values.

@param <T> the type of the input elements
@param mapper a mapping function to apply to each element
@return a {@code Collector} implementing the summary-statistics reduction

@see #summarizingLong(ToLongFunction)
@see #summarizingInt(ToIntFunction)
"
      end

      class 1155586 "Partition"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 192130 // AbstractMap
	  rank 0 explicit_value ""
	actual class class_ref 192130 // AbstractMap
	  rank 1 explicit_value ""
	actual class class_ref 130178 // Map
	  rank 0 explicit_value ""
	actual class class_ref 130178 // Map
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3711234 // <realization>
	  relation 3711234 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3711234 // <realization>
	    b parent class_ref 192130 // AbstractMap
	end

	classrelation 3711362 // <realization>
	  relation 3711362 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3711362 // <realization>
	    b parent class_ref 130178 // Map
	end

	attribute 2217218 "forTrue"
	  const_attribute package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2217346 "forFalse"
	  const_attribute package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9495042 "Partition"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "forTrue" explicit_type "T"
	    param inout name "forFalse" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9495170 "entrySet"
	  cpp_inline public return_type class_ref 192258 // Set
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<Boolean, T>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1155714 "DistinctOps"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory methods for transforming streams into duplicate-free streams, using
{@link Object#equals(Object)} to determine equality.

@since 1.8
"
      operation 9495298 "DistinctOps"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9495426 "makeRef"
	class_operation package return_type class_ref 1155842 // ReferencePipeline
	nparams 1
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, T> ${name}${(}${t0}<?, T, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"distinct\" operation to the provided stream, and returns the
new stream.

@param <T> the type of both input and output elements
@param upstream a reference stream with element type T
@return the new stream
"
      end
    end

    class 1155842 "ReferencePipeline"
      abstract visibility package 
      nformals 2
      formal name "P_IN" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P_OUT" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 1153666 // AbstractPipeline
        rank 0 explicit_value ""
      actual class class_ref 1153666 // AbstractPipeline
        rank 1 explicit_value ""
      actual class class_ref 1153666 // AbstractPipeline
        rank 2 explicit_value ""
      actual class class_ref 184706 // Stream
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class for an intermediate pipeline stage or pipeline source
stage implementing whose elements are of type {@code U}.

@param <P_IN> type of elements in the upstream source
@param <P_OUT> type of elements in produced by this stage

@since 1.8
"
      classrelation 3720322 // <realization>
	relation 3720322 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3720322 // <realization>
	  b parent class_ref 1153666 // AbstractPipeline
      end

      classrelation 3720706 // <realization>
	relation 3720706 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3720706 // <realization>
	  b parent class_ref 184706 // Stream
      end

      operation 9558018 "ReferencePipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 933634 // Supplier
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<?>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Supplier<Spliterator>} describing the stream source
@param sourceFlags the source flags for the stream source, described in
       {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
      end

      operation 9558146 "ReferencePipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 184450 // Spliterator
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Spliterator} describing the stream source
@param sourceFlags The source flags for the stream source, described in
       {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
      end

      operation 9558274 "ReferencePipeline"
	cpp_inline package explicit_return_type ""
	nparams 2
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param in name "opFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, P_IN, ?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for appending an intermediate operation onto an existing
pipeline.

@param upstream the upstream element source.
"
      end

      operation 9558402 "getOutputShape"
	cpp_inline package return_type class_ref 1153922 // StreamShape
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Shape-specific methods
"
      end

      operation 9558530 "evaluateToNode"
	cpp_inline package return_type class_ref 1154178 // Node
	nparams 4
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<P_OUT> ${name}${(}${t0}<P_OUT> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}, ${t3}<P_OUT[]> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9558658 "wrap"
	cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 3
	  param inout name "ph" type class_ref 1153794 // PipelineHelper
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "isParallel" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<P_OUT> ${name}${(}${t0}<P_OUT> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9558786 "lazySpliterator"
	cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 1
	  param inout name "supplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0}<? extends Spliterator<P_OUT>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9558914 "forEachWithCancel"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "sink" type class_ref 1154050 // Sink
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<P_OUT> ${p0}, ${t1}<P_OUT> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9559042 "makeNodeBuilder"
	cpp_inline package return_type class_ref 1154306 // Builder
	nparams 2
	  param in name "exactSizeIfKnown" explicit_type "long"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0} ${p0}, ${t1}<P_OUT[]> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9559170 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " BaseStream
"
      end

      operation 9559298 "unordered"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Stream
 Stateless intermediate operations from Stream
"
      end

      operation 9559426 "filter"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9559554 "map"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type}<R> ${name}${(}${t0}<? super P_OUT, ? extends R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9559682 "mapToInt"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 193922 // ToIntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9559810 "mapToLong"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 194050 // ToLongFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9559938 "mapToDouble"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 194178 // ToDoubleFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9560066 "flatMap"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type}<R> ${name}${(}${t0}<? super P_OUT, ? extends Stream<? extends R>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9560194 "flatMapToInt"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT, ? extends IntStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9560322 "flatMapToDouble"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT, ? extends DoubleStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9560450 "flatMapToLong"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 192770 // Function
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT, ? extends LongStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9560578 "peek"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9560706 "distinct"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Stateful intermediate operations from Stream
"
      end

      operation 9560834 "sorted"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9560962 "sorted"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9561090 "limit"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param in name "maxSize" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9561218 "skip"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9561346 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Terminal operations from Stream
"
      end

      operation 9561474 "forEachOrdered"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9561602 "toArray"
	cpp_inline public explicit_return_type "A"
	nparams 1
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<A> ${type}[] ${name}${(}${t0}<A[]> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9561730 "toArray"
	cpp_inline public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9561858 "anyMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9561986 "allMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9562114 "noneMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 184578 // Predicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9562242 "findFirst"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9562370 "findAny"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9562498 "reduce"
	cpp_inline public explicit_return_type "P_OUT"
	nparams 2
	  param in name "identity" explicit_type "P_OUT"
	  param in name "accumulator" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}, final ${t1}<P_OUT> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9562626 "reduce"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 1
	  param inout name "accumulator" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0}<P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9562754 "reduce"
	cpp_inline public explicit_return_type "R"
	nparams 3
	  param inout name "identity" explicit_type "R"
	  param inout name "accumulator" type class_ref 192642 // BiFunction
	  param inout name "combiner" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0} ${p0}, ${t1}<R, ? super P_OUT, R> ${p1}, ${t2}<R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9562882 "collect"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "collector" type class_ref 1155074 // Collector
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R, A> ${type} ${name}${(}${t0}<? super P_OUT, A, R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9563010 "collect"
	cpp_inline public explicit_return_type "R"
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 192514 // BiConsumer
	  param inout name "combiner" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<R, ? super P_OUT> ${p1}, ${t2}<R, R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9563138 "max"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9563266 "min"
	cpp_inline public return_type class_ref 1088770 // Optional
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9563394 "count"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 1162370 "Head"
	visibility package 
	nformals 2
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "E_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1155842 // ReferencePipeline
	  rank 0 explicit_value ""
	actual class class_ref 1155842 // ReferencePipeline
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3720834 // <realization>
	  relation 3720834 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3720834 // <realization>
	    b parent class_ref 1155842 // ReferencePipeline
	end

	operation 9563522 "Head"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "source" type class_ref 933634 // Supplier
	    param in name "sourceFlags" explicit_type "int"
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<?>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for the source stage of a Stream.

@param source {@code Supplier<Spliterator>} describing the stream
              source
@param sourceFlags the source flags for the stream source, described
                   in {@link StreamOpFlag}
"
	end

	operation 9563650 "Head"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "source" type class_ref 184450 // Spliterator
	    param in name "sourceFlags" explicit_type "int"
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for the source stage of a Stream.

@param source {@code Spliterator} describing the stream source
@param sourceFlags the source flags for the stream source, described
                   in {@link StreamOpFlag}
"
	end

	operation 9563778 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9563906 "opWrapSink"
	  cpp_inline package return_type class_ref 1154050 // Sink
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_IN> ${name}${(}${t0} ${p0}, ${t1}<E_OUT> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9564034 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Optimized sequential terminal operations for the head of the pipeline
"
	end

	operation 9564162 "forEachOrdered"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1162498 "StatelessOp"
	abstract visibility package 
	nformals 2
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "E_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1155842 // ReferencePipeline
	  rank 0 explicit_value ""
	actual class class_ref 1155842 // ReferencePipeline
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3720962 // <realization>
	  relation 3720962 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3720962 // <realization>
	    b parent class_ref 1155842 // ReferencePipeline
	end

	operation 9564290 "StatelessOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "inputShape" type class_ref 1153922 // StreamShape
	    param in name "opFlags" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new Stream by appending a stateless intermediate
operation to an existing stream.

@param upstream The upstream pipeline stage
@param inputShape The stream shape for the upstream pipeline stage
@param opFlags Operation flags for the new stage
"
	end

	operation 9564418 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1162626 "StatefulOp"
	abstract visibility package 
	nformals 2
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "E_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1155842 // ReferencePipeline
	  rank 0 explicit_value ""
	actual class class_ref 1155842 // ReferencePipeline
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3721090 // <realization>
	  relation 3721090 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3721090 // <realization>
	    b parent class_ref 1155842 // ReferencePipeline
	end

	operation 9564546 "StatefulOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "inputShape" type class_ref 1153922 // StreamShape
	    param in name "opFlags" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new Stream by appending a stateful intermediate operation
to an existing stream.
@param upstream The upstream pipeline stage
@param inputShape The stream shape for the upstream pipeline stage
@param opFlags Operation flags for the new stage
"
	end

	operation 9564674 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9564802 "opEvaluateParallel"
	  abstract cpp_inline package return_type class_ref 1154178 // Node
	  nparams 3
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<E_OUT> ${name}${(}${t0}<E_OUT> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<E_OUT[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1155970 "DoublePipeline"
      abstract visibility package 
      nformals 1
      formal name "E_IN" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 1153666 // AbstractPipeline
        rank 0 explicit_value ""
      actual class class_ref 1153666 // AbstractPipeline
        rank 1 explicit_value ""
      actual class class_ref 1153666 // AbstractPipeline
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class for an intermediate pipeline stage or pipeline source
stage implementing whose elements are of type {@code double}.

@param <E_IN> type of elements in the upstream source

@since 1.8
"
      classrelation 3711490 // <realization>
	relation 3711490 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3711490 // <realization>
	  b parent class_ref 1153666 // AbstractPipeline
      end

      classrelation 3711874 // <realization>
	relation 3711874 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3711874 // <realization>
	  b parent class_ref 1023618 // DoubleStream
      end

      operation 9501058 "DoublePipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 933634 // Supplier
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<Double>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Supplier<Spliterator>} describing the stream source
@param sourceFlags the source flags for the stream source, described in
{@link StreamOpFlag}
"
      end

      operation 9501186 "DoublePipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 184450 // Spliterator
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Double> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Spliterator} describing the stream source
@param sourceFlags the source flags for the stream source, described in
{@link StreamOpFlag}
"
      end

      operation 9501314 "DoublePipeline"
	cpp_inline package explicit_return_type ""
	nparams 2
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param in name "opFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for appending an intermediate operation onto an existing
pipeline.

@param upstream the upstream element source.
@param opFlags the operation flags
"
      end

      operation 9501442 "adapt"
	class_operation cpp_inline private return_type class_ref 377346 // DoubleConsumer
	nparams 1
	  param inout name "sink" type class_ref 1154050 // Sink
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Double> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapt a {@code Sink<Double> to a {@code DoubleConsumer}, ideally simply
by casting.
"
      end

      operation 9501570 "adapt"
	class_operation cpp_inline private return_type class_ref 377090 // OfDouble
	nparams 1
	  param inout name "s" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Double> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapt a {@code Spliterator<Double>} to a {@code Spliterator.OfDouble}.

@implNote
The implementation attempts to cast to a Spliterator.OfDouble, and throws
an exception if this cast is not possible.
"
      end

      operation 9501698 "getOutputShape"
	cpp_inline package return_type class_ref 1153922 // StreamShape
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Shape-specific methods
"
      end

      operation 9501826 "evaluateToNode"
	cpp_inline package return_type class_ref 1154178 // Node
	nparams 4
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Double> ${name}${(}${t0}<Double> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}, ${t3}<Double[]> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9501954 "wrap"
	cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 3
	  param inout name "ph" type class_ref 1153794 // PipelineHelper
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "isParallel" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Double> ${name}${(}${t0}<Double> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9502082 "lazySpliterator"
	cpp_inline package return_type class_ref 377090 // OfDouble
	nparams 1
	  param inout name "supplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Spliterator<Double>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9502210 "forEachWithCancel"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "sink" type class_ref 1154050 // Sink
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Double> ${p0}, ${t1}<Double> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9502338 "makeNodeBuilder"
	cpp_inline package return_type class_ref 1154306 // Builder
	nparams 2
	  param in name "exactSizeIfKnown" explicit_type "long"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double> ${name}${(}${t0} ${p0}, ${t1}<Double[]> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9502466 "iterator"
	cpp_inline public return_type class_ref 1090050 // OfDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " DoubleStream
"
      end

      operation 9502594 "spliterator"
	cpp_inline public return_type class_ref 377090 // OfDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9502722 "boxed"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Stateless intermediate ops from DoubleStream
"
      end

      operation 9502850 "map"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 1133314 // DoubleUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9502978 "mapToObj"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 1132802 // DoubleFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9503106 "mapToInt"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 1133058 // DoubleToIntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9503234 "mapToLong"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 1133186 // DoubleToLongFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9503362 "flatMap"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 1132802 // DoubleFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends DoubleStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9503490 "unordered"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9503618 "filter"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9503746 "peek"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "action" type class_ref 377346 // DoubleConsumer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9503874 "limit"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param in name "maxSize" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Stateful intermediate ops from DoubleStream
"
      end

      operation 9504002 "skip"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9504130 "sorted"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9504258 "distinct"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9504386 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "consumer" type class_ref 377346 // DoubleConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Terminal ops from DoubleStream
"
      end

      operation 9504514 "forEachOrdered"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "consumer" type class_ref 377346 // DoubleConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9504642 "sum"
	cpp_inline public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9504770 "min"
	cpp_inline public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9504898 "max"
	cpp_inline public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9505026 "average"
	cpp_inline public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

@implNote The {@code double} format can represent all
consecutive integers in the range -2<sup>53</sup> to
2<sup>53</sup>. If the pipeline has more than 2<sup>53</sup>
values, the divisor in the average computation will saturate at
2<sup>53</sup>, leading to additional numerical errors.
"
      end

      operation 9505154 "count"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9505282 "summaryStatistics"
	cpp_inline public return_type class_ref 1080450 // DoubleSummaryStatistics
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9505410 "reduce"
	cpp_inline public explicit_return_type "double"
	nparams 2
	  param in name "identity" explicit_type "double"
	  param inout name "op" type class_ref 1067138 // DoubleBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9505538 "reduce"
	cpp_inline public return_type class_ref 1088898 // OptionalDouble
	nparams 1
	  param inout name "op" type class_ref 1067138 // DoubleBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9505666 "collect"
	cpp_inline public explicit_return_type "R"
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134082 // ObjDoubleConsumer
	  param inout name "combiner" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R, R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9505794 "anyMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9505922 "allMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9506050 "noneMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9506178 "findFirst"
	cpp_inline public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9506306 "findAny"
	cpp_inline public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9506434 "toArray"
	cpp_inline public explicit_return_type "double"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 1156226 "Head"
	visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1155970 // DoublePipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3712002 // <realization>
	  relation 3712002 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3712002 // <realization>
	    b parent class_ref 1155970 // DoublePipeline
	end

	operation 9506562 "Head"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "source" type class_ref 933634 // Supplier
	    param in name "sourceFlags" explicit_type "int"
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<Double>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for the source stage of a DoubleStream.

@param source {@code Supplier<Spliterator>} describing the stream
              source
@param sourceFlags the source flags for the stream source, described
                   in {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
	end

	operation 9506690 "Head"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "source" type class_ref 184450 // Spliterator
	    param in name "sourceFlags" explicit_type "int"
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Double> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for the source stage of a DoubleStream.

@param source {@code Spliterator} describing the stream source
@param sourceFlags the source flags for the stream source, described
                   in {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
	end

	operation 9506818 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9506946 "opWrapSink"
	  cpp_inline package return_type class_ref 1154050 // Sink
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_IN> ${name}${(}${t0} ${p0}, ${t1}<Double> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9507074 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 377346 // DoubleConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Optimized sequential terminal operations for the head of the pipeline
"
	end

	operation 9507202 "forEachOrdered"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 377346 // DoubleConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1156354 "StatelessOp"
	abstract visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1155970 // DoublePipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3712130 // <realization>
	  relation 3712130 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3712130 // <realization>
	    b parent class_ref 1155970 // DoublePipeline
	end

	operation 9507330 "StatelessOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "inputShape" type class_ref 1153922 // StreamShape
	    param in name "opFlags" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new DoubleStream by appending a stateless intermediate
operation to an existing stream.

@param upstream the upstream pipeline stage
@param inputShape the stream shape for the upstream pipeline stage
@param opFlags operation flags for the new stage
"
	end

	operation 9507458 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1156482 "StatefulOp"
	abstract visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1155970 // DoublePipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3712258 // <realization>
	  relation 3712258 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3712258 // <realization>
	    b parent class_ref 1155970 // DoublePipeline
	end

	operation 9507586 "StatefulOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "inputShape" type class_ref 1153922 // StreamShape
	    param in name "opFlags" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new DoubleStream by appending a stateful intermediate
operation to an existing stream.

@param upstream the upstream pipeline stage
@param inputShape the stream shape for the upstream pipeline stage
@param opFlags operation flags for the new stage
"
	end

	operation 9507714 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9507842 "opEvaluateParallel"
	  abstract cpp_inline package return_type class_ref 1154178 // Node
	  nparams 3
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Double> ${name}${(}${t0}<Double> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<Double[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1156610 "FindOps"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory for instances of a short-circuiting {@code TerminalOp} that searches
for an element in a stream pipeline, and terminates when it finds one.
Supported variants include find-first (find the first element in the
encounter order) and find-any (find any element, may not be the first in
encounter order.)

@since 1.8
"
      operation 9507970 "FindOps"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9508098 "makeRef"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "mustFindFirst" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, Optional<T>> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} for streams of objects.

@param <T> the type of elements of the stream
@param mustFindFirst whether the {@code TerminalOp} must produce the
       first element in the encounter order
@return a {@code TerminalOp} implementing the find operation
"
      end

      operation 9508226 "makeInt"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "mustFindFirst" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer, OptionalInt> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} for streams of ints.

@param mustFindFirst whether the {@code TerminalOp} must produce the
       first element in the encounter order
@return a {@code TerminalOp} implementing the find operation
"
      end

      operation 9508354 "makeLong"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "mustFindFirst" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long, OptionalLong> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} for streams of longs.

@param mustFindFirst whether the {@code TerminalOp} must produce the
       first element in the encounter order
@return a {@code TerminalOp} implementing the find operation
"
      end

      operation 9508482 "makeDouble"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "mustFindFirst" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double, OptionalDouble> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code FindOp} for streams of doubles.

@param mustFindFirst whether the {@code TerminalOp} must produce the
       first element in the encounter order
@return a {@code TerminalOp} implementing the find operation
"
      end

      class 1156738 "FindOp"
	visibility private 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "O" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1154562 // TerminalOp
	  rank 0 explicit_value ""
	actual class class_ref 1154562 // TerminalOp
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3712386 // <realization>
	  relation 3712386 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3712386 // <realization>
	    b parent class_ref 1154562 // TerminalOp
	end

	classrelation 3712514 // shape (<unidirectional association>)
	  relation 3712514 --->
	    a role_name "shape" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3712514 // shape (<unidirectional association>)
	    b parent class_ref 1153922 // StreamShape
	end

	attribute 2217474 "mustFindFirst"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2217602 "emptyValue"
	  const_attribute package explicit_type "O"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3712642 // presentPredicate (<unidirectional association>)
	  relation 3712642 --->
	    a role_name "presentPredicate" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<O> ${name}${value};
"
	      classrelation_ref 3712642 // presentPredicate (<unidirectional association>)
	    b parent class_ref 184578 // Predicate
	end

	classrelation 3712770 // sinkSupplier (<unidirectional association>)
	  relation 3712770 --->
	    a role_name "sinkSupplier" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TerminalSink<T, O>> ${name}${value};
"
	      classrelation_ref 3712770 // sinkSupplier (<unidirectional association>)
	    b parent class_ref 933634 // Supplier
	end

	operation 9509122 "FindOp"
	  cpp_inline package explicit_return_type ""
	  nparams 5
	    param inout name "mustFindFirst" explicit_type "boolean"
	    param inout name "shape" type class_ref 1153922 // StreamShape
	    param inout name "emptyValue" explicit_type "O"
	    param inout name "presentPredicate" type class_ref 184578 // Predicate
	    param inout name "sinkSupplier" type class_ref 933634 // Supplier
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<O> ${p3}, ${t4}<TerminalSink<T, O>> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a {@code FindOp}.

@param mustFindFirst if true, must find the first element in
       encounter order, otherwise can find any element
@param shape stream shape of elements to search
@param emptyValue result value corresponding to \"found nothing\"
@param presentPredicate {@code Predicate} on result value
       corresponding to \"found something\"
@param sinkSupplier supplier for a {@code TerminalSink} implementing
       the matching functionality
"
	end

	operation 9509250 "getOpFlags"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9509378 "inputShape"
	  cpp_inline public return_type class_ref 1153922 // StreamShape
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9509506 "evaluateSequential"
	  cpp_inline public explicit_return_type "O"
	  nparams 2
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<S> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9509634 "evaluateParallel"
	  cpp_inline public explicit_return_type "O"
	  nparams 2
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1156994 "FindSink"
	abstract visibility private 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "O" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1156866 // TerminalSink
	  rank 0 explicit_value ""
	actual class class_ref 1156866 // TerminalSink
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3715074 // <realization>
	  relation 3715074 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3715074 // <realization>
	    b parent class_ref 1156866 // TerminalSink
	end

	attribute 2217730 "hasValue"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2217858 "value"
	  package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9513346 "FindSink"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9513474 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "value" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Avoid creation of special accessor"
	end

	operation 9513602 "cancellationRequested"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	class 1158018 "OfRef"
	  visibility package 
	  nformals 1
	  formal name "T" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 2
	  actual class class_ref 1156994 // FindSink
	    rank 0 explicit_value ""
	  actual class class_ref 1156994 // FindSink
	    rank 1 explicit_value ""
	  cpp_decl ""
	  final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3715202 // <realization>
	    relation 3715202 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3715202 // <realization>
	      b parent class_ref 1156994 // FindSink
	  end

	  operation 9513730 "get"
	    cpp_inline public return_type class_ref 1088770 // Optional
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end
	end
      end
    end

    class 1156866 "TerminalSink"
      visibility package stereotype "interface"
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 1154050 // Sink
        rank 0 explicit_value ""
      actual class class_ref 933634 // Supplier
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@link Sink} which accumulates state as elements are accepted, and allows
a result to be retrieved after the computation is finished.

@param <T> the type of elements to be accepted
@param <R> the type of the result

@since 1.8
"
      classrelation 3714818 // <realization>
	relation 3714818 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3714818 // <realization>
	  b parent class_ref 1154050 // Sink
      end

      classrelation 3714946 // <realization>
	relation 3714946 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3714946 // <realization>
	  b parent class_ref 933634 // Supplier
      end
    end

    class 1158146 "ForEachOps"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory for creating instances of {@code TerminalOp} that perform an
action for every element of a stream.  Supported variants include unordered
traversal (elements are provided to the {@code Consumer} as soon as they are
available), and ordered traversal (elements are provided to the
{@code Consumer} in encounter order.)

<p>Elements are provided to the {@code Consumer} on whatever thread and
whatever order they become available.  For ordered traversals, it is
guaranteed that processing an element <em>happens-before</em> processing
subsequent elements in the encounter order.

<p>Exceptions occurring as a result of sending an element to the
{@code Consumer} will be relayed to the caller and traversal will be
prematurely terminated.

@since 1.8
"
      operation 9513858 "ForEachOps"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9513986 "makeRef"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param inout name "action" type class_ref 163458 // Consumer
	  param inout name "ordered" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, Void> ${name}${(}${t0}<? super T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that perform an action for every element
of a stream.

@param action the {@code Consumer} that receives all elements of a
       stream
@param ordered whether an ordered traversal is requested
@param <T> the type of the stream elements
@return the {@code TerminalOp} instance
"
      end

      operation 9514114 "makeInt"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param inout name "action" type class_ref 376706 // IntConsumer
	  param inout name "ordered" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer, Void> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that perform an action for every element
of an {@code IntStream}.

@param action the {@code IntConsumer} that receives all elements of a
       stream
@param ordered whether an ordered traversal is requested
@return the {@code TerminalOp} instance
"
      end

      operation 9514242 "makeLong"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param inout name "action" type class_ref 376962 // LongConsumer
	  param inout name "ordered" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long, Void> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that perform an action for every element
of a {@code LongStream}.

@param action the {@code LongConsumer} that receives all elements of a
       stream
@param ordered whether an ordered traversal is requested
@return the {@code TerminalOp} instance
"
      end

      operation 9514370 "makeDouble"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param inout name "action" type class_ref 377346 // DoubleConsumer
	  param inout name "ordered" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double, Void> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that perform an action for every element
of a {@code DoubleStream}.

@param action the {@code DoubleConsumer} that receives all elements of
       a stream
@param ordered whether an ordered traversal is requested
@return the {@code TerminalOp} instance
"
      end

      class 1158274 "ForEachOp"
	abstract visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1154562 // TerminalOp
	  rank 0 explicit_value ""
	actual class class_ref 1154562 // TerminalOp
	  rank 1 explicit_value ""
	actual class class_ref 1156866 // TerminalSink
	  rank 0 explicit_value ""
	actual class class_ref 1156866 // TerminalSink
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3715330 // <realization>
	  relation 3715330 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3715330 // <realization>
	    b parent class_ref 1154562 // TerminalOp
	end

	classrelation 3715458 // <realization>
	  relation 3715458 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3715458 // <realization>
	    b parent class_ref 1156866 // TerminalSink
	end

	attribute 2217986 "ordered"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9514498 "ForEachOp"
	  cpp_inline protected explicit_return_type ""
	  nparams 1
	    param inout name "ordered" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9514626 "getOpFlags"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " TerminalOp"
	end

	operation 9514754 "evaluateSequential"
	  cpp_inline public return_type class_ref 146946 // Void
	  nparams 2
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<S> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9514882 "evaluateParallel"
	  cpp_inline public return_type class_ref 146946 // Void
	  nparams 2
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<S> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9515010 "get"
	  cpp_inline public return_type class_ref 146946 // Void
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " TerminalSink"
	end

	class 1158402 "OfRef"
	  visibility package 
	  nformals 1
	  formal name "T" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 1
	  actual class class_ref 1158274 // ForEachOp
	    rank 0 explicit_value ""
	  cpp_decl ""
	  final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3715586 // <realization>
	    relation 3715586 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3715586 // <realization>
	      b parent class_ref 1158274 // ForEachOp
	  end

	  classrelation 3715714 // consumer (<unidirectional association>)
	    relation 3715714 --->
	      a role_name "consumer" const_relation package
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T> ${name}${value};
"
		classrelation_ref 3715714 // consumer (<unidirectional association>)
	      b parent class_ref 163458 // Consumer
	  end

	  operation 9515138 "OfRef"
	    cpp_inline package explicit_return_type ""
	    nparams 2
	      param inout name "consumer" type class_ref 163458 // Consumer
	      param inout name "ordered" explicit_type "boolean"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9515266 "accept"
	    cpp_inline public explicit_return_type "void"
	    nparams 1
	      param inout name "t" explicit_type "T"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end
	end
      end
    end

    class 1158530 "IntPipeline"
      abstract visibility package 
      nformals 1
      formal name "E_IN" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 1153666 // AbstractPipeline
        rank 0 explicit_value ""
      actual class class_ref 1153666 // AbstractPipeline
        rank 1 explicit_value ""
      actual class class_ref 1153666 // AbstractPipeline
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class for an intermediate pipeline stage or pipeline source
stage implementing whose elements are of type {@code int}.

@param <E_IN> type of elements in the upstream source
@since 1.8
"
      classrelation 3715842 // <realization>
	relation 3715842 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3715842 // <realization>
	  b parent class_ref 1153666 // AbstractPipeline
      end

      classrelation 3716226 // <realization>
	relation 3716226 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3716226 // <realization>
	  b parent class_ref 429570 // IntStream
      end

      operation 9521410 "IntPipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 933634 // Supplier
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<Integer>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Supplier<Spliterator>} describing the stream source
@param sourceFlags The source flags for the stream source, described in
       {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
      end

      operation 9521538 "IntPipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 184450 // Spliterator
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Integer> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Spliterator} describing the stream source
@param sourceFlags The source flags for the stream source, described in
       {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
      end

      operation 9521666 "IntPipeline"
	cpp_inline package explicit_return_type ""
	nparams 2
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param in name "opFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for appending an intermediate operation onto an existing
pipeline.

@param upstream the upstream element source
@param opFlags the operation flags for the new operation
"
      end

      operation 9521794 "adapt"
	class_operation cpp_inline private return_type class_ref 376706 // IntConsumer
	nparams 1
	  param inout name "sink" type class_ref 1154050 // Sink
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Integer> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapt a {@code Sink<Integer> to an {@code IntConsumer}, ideally simply
by casting.
"
      end

      operation 9521922 "adapt"
	class_operation cpp_inline private return_type class_ref 376578 // OfInt
	nparams 1
	  param inout name "s" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Integer> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapt a {@code Spliterator<Integer>} to a {@code Spliterator.OfInt}.

@implNote
The implementation attempts to cast to a Spliterator.OfInt, and throws an
exception if this cast is not possible.
"
      end

      operation 9522050 "getOutputShape"
	cpp_inline package return_type class_ref 1153922 // StreamShape
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Shape-specific methods
"
      end

      operation 9522178 "evaluateToNode"
	cpp_inline package return_type class_ref 1154178 // Node
	nparams 4
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Integer> ${name}${(}${t0}<Integer> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}, ${t3}<Integer[]> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9522306 "wrap"
	cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 3
	  param inout name "ph" type class_ref 1153794 // PipelineHelper
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "isParallel" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Integer> ${name}${(}${t0}<Integer> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9522434 "lazySpliterator"
	cpp_inline package return_type class_ref 376578 // OfInt
	nparams 1
	  param inout name "supplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Spliterator<Integer>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9522562 "forEachWithCancel"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "sink" type class_ref 1154050 // Sink
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Integer> ${p0}, ${t1}<Integer> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9522690 "makeNodeBuilder"
	cpp_inline package return_type class_ref 1154306 // Builder
	nparams 2
	  param in name "exactSizeIfKnown" explicit_type "long"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer> ${name}${(}${t0} ${p0}, ${t1}<Integer[]> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9522818 "iterator"
	cpp_inline public return_type class_ref 1089794 // OfInt
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " IntStream
"
      end

      operation 9522946 "spliterator"
	cpp_inline public return_type class_ref 376578 // OfInt
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9523074 "asLongStream"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Stateless intermediate ops from IntStream
"
      end

      operation 9523202 "asDoubleStream"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9523330 "boxed"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9523458 "map"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9523586 "mapToObj"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9523714 "mapToLong"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 1068290 // IntToLongFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9523842 "mapToDouble"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 1068418 // IntToDoubleFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9523970 "flatMap"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends IntStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9524098 "unordered"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9524226 "filter"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9524354 "peek"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "action" type class_ref 376706 // IntConsumer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9524482 "limit"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param in name "maxSize" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Stateful intermediate ops from IntStream
"
      end

      operation 9524610 "skip"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9524738 "sorted"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9524866 "distinct"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9524994 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 376706 // IntConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Terminal ops from IntStream
"
      end

      operation 9525122 "forEachOrdered"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 376706 // IntConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9525250 "sum"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9525378 "min"
	cpp_inline public return_type class_ref 1089154 // OptionalInt
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9525506 "max"
	cpp_inline public return_type class_ref 1089154 // OptionalInt
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9525634 "count"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9525762 "average"
	cpp_inline public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9525890 "summaryStatistics"
	cpp_inline public return_type class_ref 1086210 // IntSummaryStatistics
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9526018 "reduce"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param in name "identity" explicit_type "int"
	  param inout name "op" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9526146 "reduce"
	cpp_inline public return_type class_ref 1089154 // OptionalInt
	nparams 1
	  param inout name "op" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9526274 "collect"
	cpp_inline public explicit_return_type "R"
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134210 // ObjIntConsumer
	  param inout name "combiner" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R, R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9526402 "anyMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9526530 "allMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9526658 "noneMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9526786 "findFirst"
	cpp_inline public return_type class_ref 1089154 // OptionalInt
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9526914 "findAny"
	cpp_inline public return_type class_ref 1089154 // OptionalInt
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9527042 "toArray"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 1158786 "Head"
	visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1158530 // IntPipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3716354 // <realization>
	  relation 3716354 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3716354 // <realization>
	    b parent class_ref 1158530 // IntPipeline
	end

	operation 9527170 "Head"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "source" type class_ref 933634 // Supplier
	    param in name "sourceFlags" explicit_type "int"
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<Integer>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for the source stage of an IntStream.

@param source {@code Supplier<Spliterator>} describing the stream
              source
@param sourceFlags the source flags for the stream source, described
                   in {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
	end

	operation 9527298 "Head"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "source" type class_ref 184450 // Spliterator
	    param in name "sourceFlags" explicit_type "int"
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Integer> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for the source stage of an IntStream.

@param source {@code Spliterator} describing the stream source
@param sourceFlags the source flags for the stream source, described
                   in {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
	end

	operation 9527426 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9527554 "opWrapSink"
	  cpp_inline package return_type class_ref 1154050 // Sink
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_IN> ${name}${(}${t0} ${p0}, ${t1}<Integer> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9527682 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Optimized sequential terminal operations for the head of the pipeline
"
	end

	operation 9527810 "forEachOrdered"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1158914 "StatelessOp"
	abstract visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1158530 // IntPipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3716482 // <realization>
	  relation 3716482 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3716482 // <realization>
	    b parent class_ref 1158530 // IntPipeline
	end

	operation 9527938 "StatelessOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "inputShape" type class_ref 1153922 // StreamShape
	    param in name "opFlags" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new IntStream by appending a stateless intermediate
operation to an existing stream.
@param upstream The upstream pipeline stage
@param inputShape The stream shape for the upstream pipeline stage
@param opFlags Operation flags for the new stage
"
	end

	operation 9528066 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1159042 "StatefulOp"
	abstract visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1158530 // IntPipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3716610 // <realization>
	  relation 3716610 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3716610 // <realization>
	    b parent class_ref 1158530 // IntPipeline
	end

	operation 9528194 "StatefulOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "inputShape" type class_ref 1153922 // StreamShape
	    param in name "opFlags" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new IntStream by appending a stateful intermediate
operation to an existing stream.
@param upstream The upstream pipeline stage
@param inputShape The stream shape for the upstream pipeline stage
@param opFlags Operation flags for the new stage
"
	end

	operation 9528322 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9528450 "opEvaluateParallel"
	  abstract cpp_inline package return_type class_ref 1154178 // Node
	  nparams 3
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Integer> ${name}${(}${t0}<Integer> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<Integer[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1159170 "LongPipeline"
      abstract visibility package 
      nformals 1
      formal name "E_IN" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 1153666 // AbstractPipeline
        rank 0 explicit_value ""
      actual class class_ref 1153666 // AbstractPipeline
        rank 1 explicit_value ""
      actual class class_ref 1153666 // AbstractPipeline
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Abstract base class for an intermediate pipeline stage or pipeline source
stage implementing whose elements are of type {@code long}.

@param <E_IN> type of elements in the upstream source
@since 1.8
"
      classrelation 3716738 // <realization>
	relation 3716738 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3716738 // <realization>
	  b parent class_ref 1153666 // AbstractPipeline
      end

      classrelation 3717122 // <realization>
	relation 3717122 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3717122 // <realization>
	  b parent class_ref 1023490 // LongStream
      end

      operation 9534466 "LongPipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 933634 // Supplier
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<Long>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Supplier<Spliterator>} describing the stream source
@param sourceFlags the source flags for the stream source, described in
       {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
      end

      operation 9534594 "LongPipeline"
	cpp_inline package explicit_return_type ""
	nparams 3
	  param inout name "source" type class_ref 184450 // Spliterator
	  param in name "sourceFlags" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for the head of a stream pipeline.

@param source {@code Spliterator} describing the stream source
@param sourceFlags the source flags for the stream source, described in
       {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
      end

      operation 9534722 "LongPipeline"
	cpp_inline package explicit_return_type ""
	nparams 2
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param in name "opFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for appending an intermediate operation onto an existing pipeline.

@param upstream the upstream element source.
@param opFlags the operation flags
"
      end

      operation 9534850 "adapt"
	class_operation cpp_inline private return_type class_ref 376962 // LongConsumer
	nparams 1
	  param inout name "sink" type class_ref 1154050 // Sink
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Long> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapt a {@code Sink<Long> to an {@code LongConsumer}, ideally simply
by casting.
"
      end

      operation 9534978 "adapt"
	class_operation cpp_inline private return_type class_ref 376834 // OfLong
	nparams 1
	  param inout name "s" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Long> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adapt a {@code Spliterator<Long>} to a {@code Spliterator.OfLong}.

@implNote
The implementation attempts to cast to a Spliterator.OfLong, and throws
an exception if this cast is not possible.
"
      end

      operation 9535106 "getOutputShape"
	cpp_inline package return_type class_ref 1153922 // StreamShape
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Shape-specific methods
"
      end

      operation 9535234 "evaluateToNode"
	cpp_inline package return_type class_ref 1154178 // Node
	nparams 4
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Long> ${name}${(}${t0}<Long> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}, ${t3}<Long[]> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9535362 "wrap"
	cpp_inline package return_type class_ref 184450 // Spliterator
	nparams 3
	  param inout name "ph" type class_ref 1153794 // PipelineHelper
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "isParallel" explicit_type "boolean"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Long> ${name}${(}${t0}<Long> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9535490 "lazySpliterator"
	cpp_inline package return_type class_ref 376834 // OfLong
	nparams 1
	  param inout name "supplier" type class_ref 933634 // Supplier
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Spliterator<Long>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9535618 "forEachWithCancel"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "sink" type class_ref 1154050 // Sink
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Long> ${p0}, ${t1}<Long> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9535746 "makeNodeBuilder"
	cpp_inline package return_type class_ref 1154306 // Builder
	nparams 2
	  param in name "exactSizeIfKnown" explicit_type "long"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long> ${name}${(}${t0} ${p0}, ${t1}<Long[]> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9535874 "iterator"
	cpp_inline public return_type class_ref 1089922 // OfLong
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " LongStream
"
      end

      operation 9536002 "spliterator"
	cpp_inline public return_type class_ref 376834 // OfLong
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9536130 "asDoubleStream"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Stateless intermediate ops from LongStream
"
      end

      operation 9536258 "boxed"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9536386 "map"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9536514 "mapToObj"
	cpp_inline public return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "mapper" type class_ref 1133570 // LongFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<? extends U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9536642 "mapToInt"
	cpp_inline public return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "mapper" type class_ref 1133954 // LongToIntFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9536770 "mapToDouble"
	cpp_inline public return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "mapper" type class_ref 1133826 // LongToDoubleFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9536898 "flatMap"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "mapper" type class_ref 1133570 // LongFunction
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends LongStream> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9537026 "unordered"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9537154 "filter"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9537282 "peek"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "action" type class_ref 376962 // LongConsumer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9537410 "limit"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param in name "maxSize" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Stateful intermediate ops from LongStream
"
      end

      operation 9537538 "skip"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 1
	  param in name "n" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9537666 "sorted"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9537794 "distinct"
	cpp_inline public return_type class_ref 1023490 // LongStream
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9537922 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 376962 // LongConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Terminal ops from LongStream
"
      end

      operation 9538050 "forEachOrdered"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "action" type class_ref 376962 // LongConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9538178 "sum"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9538306 "min"
	cpp_inline public return_type class_ref 1089410 // OptionalLong
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9538434 "max"
	cpp_inline public return_type class_ref 1089410 // OptionalLong
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9538562 "average"
	cpp_inline public return_type class_ref 1088898 // OptionalDouble
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9538690 "count"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9538818 "summaryStatistics"
	cpp_inline public return_type class_ref 1088002 // LongSummaryStatistics
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9538946 "reduce"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param in name "identity" explicit_type "long"
	  param inout name "op" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9539074 "reduce"
	cpp_inline public return_type class_ref 1089410 // OptionalLong
	nparams 1
	  param inout name "op" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9539202 "collect"
	cpp_inline public explicit_return_type "R"
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134338 // ObjLongConsumer
	  param inout name "combiner" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R, R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9539330 "anyMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9539458 "allMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9539586 "noneMatch"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9539714 "findFirst"
	cpp_inline public return_type class_ref 1089410 // OptionalLong
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9539842 "findAny"
	cpp_inline public return_type class_ref 1089410 // OptionalLong
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9539970 "toArray"
	cpp_inline public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      class 1159426 "Head"
	visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1159170 // LongPipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3717250 // <realization>
	  relation 3717250 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3717250 // <realization>
	    b parent class_ref 1159170 // LongPipeline
	end

	operation 9540098 "Head"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "source" type class_ref 933634 // Supplier
	    param in name "sourceFlags" explicit_type "int"
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends Spliterator<Long>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for the source stage of a LongStream.

@param source {@code Supplier<Spliterator>} describing the stream
              source
@param sourceFlags the source flags for the stream source, described
                   in {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
	end

	operation 9540226 "Head"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "source" type class_ref 184450 // Spliterator
	    param in name "sourceFlags" explicit_type "int"
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Long> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for the source stage of a LongStream.

@param source {@code Spliterator} describing the stream source
@param sourceFlags the source flags for the stream source, described
                   in {@link StreamOpFlag}
@param parallel {@code true} if the pipeline is parallel
"
	end

	operation 9540354 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9540482 "opWrapSink"
	  cpp_inline package return_type class_ref 1154050 // Sink
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E_IN> ${name}${(}${t0} ${p0}, ${t1}<Long> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9540610 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Optimized sequential terminal operations for the head of the pipeline
"
	end

	operation 9540738 "forEachOrdered"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1159554 "StatelessOp"
	abstract visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1159170 // LongPipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3717378 // <realization>
	  relation 3717378 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3717378 // <realization>
	    b parent class_ref 1159170 // LongPipeline
	end

	operation 9540866 "StatelessOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "inputShape" type class_ref 1153922 // StreamShape
	    param in name "opFlags" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new LongStream by appending a stateless intermediate
operation to an existing stream.
@param upstream The upstream pipeline stage
@param inputShape The stream shape for the upstream pipeline stage
@param opFlags Operation flags for the new stage
"
	end

	operation 9540994 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1159682 "StatefulOp"
	abstract visibility package 
	nformals 1
	formal name "E_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1159170 // LongPipeline
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3717506 // <realization>
	  relation 3717506 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3717506 // <realization>
	    b parent class_ref 1159170 // LongPipeline
	end

	operation 9541122 "StatefulOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "inputShape" type class_ref 1153922 // StreamShape
	    param in name "opFlags" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E_IN, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct a new LongStream by appending a stateful intermediate
operation to an existing stream.
@param upstream The upstream pipeline stage
@param inputShape The stream shape for the upstream pipeline stage
@param opFlags Operation flags for the new stage
"
	end

	operation 9541250 "opIsStateful"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9541378 "opEvaluateParallel"
	  abstract cpp_inline package return_type class_ref 1154178 // Node
	  nparams 3
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Long> ${name}${(}${t0}<Long> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<Long[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1159810 "MatchOps"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory for instances of a short-circuiting {@code TerminalOp} that implement
quantified predicate matching on the elements of a stream. Supported variants
include match-all, match-any, and match-none.

@since 1.8
"
      operation 9541506 "MatchOps"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1159938 "MatchKind"
	visibility package stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2218114 "ANY"
	  public type class_ref 1159938 // MatchKind
	  cpp_decl ""
	  java_decl "  ${@}${name}(true, true),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2218242 "ALL"
	  public type class_ref 1159938 // MatchKind
	  cpp_decl ""
	  java_decl "  ${@}${name}(false, false),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Do all elements match the predicate? 
"
	end

	attribute 2218370 "NONE"
	  public type class_ref 1159938 // MatchKind
	  cpp_decl ""
	  java_decl "  ${@}${name}(true, false),${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Do any elements match the predicate? 
"
	end

	attribute 2218498 "stopOnPredicateMatches"
	  const_attribute private explicit_type "boolean"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Do no elements match the predicate? 

"
	end

	attribute 2218626 "shortCircuitResult"
	  const_attribute private explicit_type "boolean"
	  stereotype "attribute"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9541634 "MatchKind"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "stopOnPredicateMatches" explicit_type "boolean"
	    param inout name "shortCircuitResult" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9541762 "makeRef"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param inout name "predicate" type class_ref 184578 // Predicate
	  param inout name "matchKind" type class_ref 1159938 // MatchKind
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, Boolean> ${name}${(}${t0}<? super T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a quantified predicate matcher for a Stream.

@param <T> the type of stream elements
@param predicate the {@code Predicate} to apply to stream elements
@param matchKind the kind of quantified match (all, any, none)
@return a {@code TerminalOp} implementing the desired quantified match
        criteria
"
      end

      operation 9541890 "makeInt"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param inout name "predicate" type class_ref 1133442 // IntPredicate
	  param inout name "matchKind" type class_ref 1159938 // MatchKind
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer, Boolean> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a quantified predicate matcher for an {@code IntStream}.

@param predicate the {@code Predicate} to apply to stream elements
@param matchKind the kind of quantified match (all, any, none)
@return a {@code TerminalOp} implementing the desired quantified match
        criteria
"
      end

      operation 9542018 "makeLong"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param inout name "predicate" type class_ref 1133698 // LongPredicate
	  param inout name "matchKind" type class_ref 1159938 // MatchKind
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long, Boolean> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a quantified predicate matcher for a {@code LongStream}.

@param predicate the {@code Predicate} to apply to stream elements
@param matchKind the kind of quantified match (all, any, none)
@return a {@code TerminalOp} implementing the desired quantified match
        criteria
"
      end

      operation 9542146 "makeDouble"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param inout name "predicate" type class_ref 1132930 // DoublePredicate
	  param inout name "matchKind" type class_ref 1159938 // MatchKind
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double, Boolean> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a quantified predicate matcher for a {@code DoubleStream}.

@param predicate the {@code Predicate} to apply to stream elements
@param matchKind the kind of quantified match (all, any, none)
@return a {@code TerminalOp} implementing the desired quantified match
        criteria
"
      end

      class 1160066 "MatchOp"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 1154562 // TerminalOp
	  rank 0 explicit_value ""
	actual class class_ref 1154562 // TerminalOp
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3717634 // <realization>
	  relation 3717634 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3717634 // <realization>
	    b parent class_ref 1154562 // TerminalOp
	end

	classrelation 3717762 // inputShape (<unidirectional association>)
	  relation 3717762 --->
	    a role_name "inputShape" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3717762 // inputShape (<unidirectional association>)
	    b parent class_ref 1153922 // StreamShape
	end

	classrelation 3717890 // matchKind (<unidirectional association>)
	  relation 3717890 --->
	    a role_name "matchKind" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3717890 // matchKind (<unidirectional association>)
	    b parent class_ref 1159938 // MatchKind
	end

	classrelation 3718018 // sinkSupplier (<unidirectional association>)
	  relation 3718018 --->
	    a role_name "sinkSupplier" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<BooleanTerminalSink<T>> ${name}${value};
"
	      classrelation_ref 3718018 // sinkSupplier (<unidirectional association>)
	    b parent class_ref 933634 // Supplier
	end

	operation 9542274 "MatchOp"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "shape" type class_ref 1153922 // StreamShape
	    param inout name "matchKind" type class_ref 1159938 // MatchKind
	    param inout name "sinkSupplier" type class_ref 933634 // Supplier
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<BooleanTerminalSink<T>> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a {@code MatchOp}.

@param shape the output shape of the stream pipeline
@param matchKind the kind of quantified match (all, any, none)
@param sinkSupplier {@code Supplier} for a {@code Sink} of the
       appropriate shape which implements the matching operation
"
	end

	operation 9542402 "getOpFlags"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9542530 "inputShape"
	  cpp_inline public return_type class_ref 1153922 // StreamShape
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9542658 "evaluateSequential"
	  cpp_inline public return_type class_ref 315010 // Boolean
	  nparams 2
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<S> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9542786 "evaluateParallel"
	  cpp_inline public return_type class_ref 315010 // Boolean
	  nparams 2
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<S> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<S> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1160194 "BooleanTerminalSink"
	abstract visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3718146 // <realization>
	  relation 3718146 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3718146 // <realization>
	    b parent class_ref 1154050 // Sink
	end

	attribute 2218754 "stop"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2218882 "value"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9542914 "BooleanTerminalSink"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "matchKind" type class_ref 1159938 // MatchKind
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9543042 "getAndClearState"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9543170 "cancellationRequested"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1160322 "MatchTask"
	visibility private 
	nformals 2
	formal name "P_IN" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "P_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1154690 // AbstractShortCircuitTask
	  rank 0 explicit_value ""
	actual class class_ref 1154690 // AbstractShortCircuitTask
	  rank 1 explicit_value ""
	actual class class_ref 1154690 // AbstractShortCircuitTask
	  rank 2 explicit_value ""
	actual class class_ref 1154690 // AbstractShortCircuitTask
	  rank 3 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3718274 // <realization>
	  relation 3718274 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3718274 // <realization>
	    b parent class_ref 1154690 // AbstractShortCircuitTask
	end

	classrelation 3718402 // op (<unidirectional association>)
	  relation 3718402 --->
	    a role_name "op" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_OUT> ${name}${value};
"
	      classrelation_ref 3718402 // op (<unidirectional association>)
	    b parent class_ref 1160066 // MatchOp
	end

	operation 9543298 "MatchTask"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "op" type class_ref 1160066 // MatchOp
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT> ${p0}, ${t1}<P_OUT> ${p1}, ${t2}<P_IN> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for root node
"
	end

	operation 9543426 "MatchTask"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "parent" type class_ref 1160322 // MatchTask
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_IN, P_OUT> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for non-root node
"
	end

	operation 9543554 "makeChild"
	  cpp_inline protected return_type class_ref 1160322 // MatchTask
	  nparams 1
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_IN, P_OUT> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9543682 "doLeaf"
	  cpp_inline protected return_type class_ref 315010 // Boolean
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9543810 "getEmptyResult"
	  cpp_inline protected return_type class_ref 315010 // Boolean
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1160450 "Nodes"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory methods for constructing implementations of {@link Node} and
{@link Node.Builder} and their primitive specializations.  Fork/Join tasks
for collecting output from a {@link PipelineHelper} to a {@link Node} and
flattening {@link Node}s.

@since 1.8
"
      operation 9545218 "Nodes"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2219010 "MAX_ARRAY_SIZE"
	class_attribute const_attribute package explicit_type "long"
	init_value " Integer.MAX_VALUE - 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum size of an array that can be allocated.

"
      end

      classrelation 3718658 // BAD_SIZE (<unidirectional association>)
	relation 3718658 --->
	  a role_name "BAD_SIZE" init_value " \"Stream size exceeds max array size\"" class_relation const_relation package
	    comment " IllegalArgumentException messages
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3718658 // BAD_SIZE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3718786 // EMPTY_NODE (<unidirectional association>)
	relation 3718786 --->
	  a role_name "EMPTY_NODE" init_value " new EmptyNode.OfRef()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SuppressWarnings(\"rawtypes\")
"
	    classrelation_ref 3718786 // EMPTY_NODE (<unidirectional association>)
	  b parent class_ref 1154178 // Node
      end

      classrelation 3718914 // EMPTY_INT_NODE (<unidirectional association>)
	relation 3718914 --->
	  a role_name "EMPTY_INT_NODE" init_value " new EmptyNode.OfInt()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3718914 // EMPTY_INT_NODE (<unidirectional association>)
	  b parent class_ref 1160578 // OfInt
      end

      classrelation 3719042 // EMPTY_LONG_NODE (<unidirectional association>)
	relation 3719042 --->
	  a role_name "EMPTY_LONG_NODE" init_value " new EmptyNode.OfLong()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3719042 // EMPTY_LONG_NODE (<unidirectional association>)
	  b parent class_ref 1160706 // OfLong
      end

      classrelation 3719170 // EMPTY_DOUBLE_NODE (<unidirectional association>)
	relation 3719170 --->
	  a role_name "EMPTY_DOUBLE_NODE" init_value " new EmptyNode.OfDouble()" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3719170 // EMPTY_DOUBLE_NODE (<unidirectional association>)
	  b parent class_ref 1160834 // OfDouble
      end

      operation 9545346 "emptyNode"
	class_operation package return_type class_ref 1154178 // Node
	nparams 1
	  param inout name "shape" type class_ref 1153922 // StreamShape
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " General shape-based node creation methods

Produces an empty node whose count is zero, has no children and no content.

@param <T> the type of elements of the created node
@param shape the shape of the node to be created
@return an empty node.
"
      end

      operation 9545474 "conc"
	class_operation package return_type class_ref 1154178 // Node
	nparams 3
	  param inout name "shape" type class_ref 1153922 // StreamShape
	  param inout name "left" type class_ref 1154178 // Node
	  param inout name "right" type class_ref 1154178 // Node
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}, ${t2}<T> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Produces a concatenated {@link Node} that has two or more children.
<p>The count of the concatenated node is equal to the sum of the count
of each child. Traversal of the concatenated node traverses the content
of each child in encounter order of the list of children. Splitting a
spliterator obtained from the concatenated node preserves the encounter
order of the list of children.

<p>The result may be a concatenated node, the input sole node if the size
of the list is 1, or an empty node.

@param <T> the type of elements of the concatenated node
@param shape the shape of the concatenated node to be created
@param left the left input node
@param right the right input node
@return a {@code Node} covering the elements of the input nodes
@throws IllegalStateException if all {@link Node} elements of the list
are an not instance of type supported by this factory.
"
      end

      operation 9545602 "node"
	class_operation package return_type class_ref 1154178 // Node
	nparams 1
	  param inout name "array" explicit_type "T"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Reference-based node methods

Produces a {@link Node} describing an array.

<p>The node will hold a reference to the array and will not make a copy.

@param <T> the type of elements held by the node
@param array the array
@return a node holding an array
"
      end

      operation 9545730 "node"
	class_operation package return_type class_ref 1154178 // Node
	nparams 1
	  param inout name "c" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a {@link Node} describing a {@link Collection}.
<p>
The node will hold a reference to the collection and will not make a copy.

@param <T> the type of elements held by the node
@param c the collection
@return a node holding a collection
"
      end

      operation 9545858 "builder"
	class_operation package return_type class_ref 1154306 // Builder
	nparams 2
	  param in name "exactSizeIfKnown" explicit_type "long"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T[]> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a {@link Node.Builder}.

@param exactSizeIfKnown -1 if a variable size builder is requested,
otherwise the exact capacity desired.  A fixed capacity builder will
fail if the wrong number of elements are added to the builder.
@param generator the array factory
@param <T> the type of elements of the node builder
@return a {@code Node.Builder}
"
      end

      operation 9545986 "builder"
	class_operation package return_type class_ref 1154306 // Builder
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a variable size @{link Node.Builder}.

@param <T> the type of elements of the node builder
@return a {@code Node.Builder}
"
      end

      operation 9546114 "node"
	class_operation package return_type class_ref 1160578 // OfInt
	nparams 1
	  param inout name "array" explicit_type "int"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Int nodes

Produces a {@link Node.OfInt} describing an int[] array.

<p>The node will hold a reference to the array and will not make a copy.

@param array the array
@return a node holding an array
"
      end

      operation 9546242 "intBuilder"
	class_operation package return_type class_ref 1160962 // OfInt
	nparams 1
	  param in name "exactSizeIfKnown" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a {@link Node.Builder.OfInt}.

@param exactSizeIfKnown -1 if a variable size builder is requested,
otherwise the exact capacity desired.  A fixed capacity builder will
fail if the wrong number of elements are added to the builder.
@return a {@code Node.Builder.OfInt}
"
      end

      operation 9546370 "intBuilder"
	class_operation package return_type class_ref 1160962 // OfInt
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a variable size @{link Node.Builder.OfInt}.

@return a {@code Node.Builder.OfInt}
"
      end

      operation 9546498 "node"
	class_operation package return_type class_ref 1160706 // OfLong
	nparams 1
	  param in name "array" explicit_type "long"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Long nodes

Produces a {@link Node.OfLong} describing a long[] array.
<p>
The node will hold a reference to the array and will not make a copy.

@param array the array
@return a node holding an array
"
      end

      operation 9546626 "longBuilder"
	class_operation package return_type class_ref 1161090 // OfLong
	nparams 1
	  param in name "exactSizeIfKnown" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a {@link Node.Builder.OfLong}.

@param exactSizeIfKnown -1 if a variable size builder is requested,
otherwise the exact capacity desired.  A fixed capacity builder will
fail if the wrong number of elements are added to the builder.
@return a {@code Node.Builder.OfLong}
"
      end

      operation 9546754 "longBuilder"
	class_operation package return_type class_ref 1161090 // OfLong
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a variable size @{link Node.Builder.OfLong}.

@return a {@code Node.Builder.OfLong}
"
      end

      operation 9546882 "node"
	class_operation package return_type class_ref 1160834 // OfDouble
	nparams 1
	  param in name "array" explicit_type "double"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Double nodes

Produces a {@link Node.OfDouble} describing a double[] array.

<p>The node will hold a reference to the array and will not make a copy.

@param array the array
@return a node holding an array
"
      end

      operation 9547010 "doubleBuilder"
	class_operation package return_type class_ref 1161218 // OfDouble
	nparams 1
	  param in name "exactSizeIfKnown" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a {@link Node.Builder.OfDouble}.

@param exactSizeIfKnown -1 if a variable size builder is requested,
otherwise the exact capacity desired.  A fixed capacity builder will
fail if the wrong number of elements are added to the builder.
@return a {@code Node.Builder.OfDouble}
"
      end

      operation 9547138 "doubleBuilder"
	class_operation package return_type class_ref 1161218 // OfDouble
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a variable size @{link Node.Builder.OfDouble}.

@return a {@code Node.Builder.OfDouble}
"
      end

      operation 9547266 "collect"
	class_operation public return_type class_ref 1154178 // Node
	nparams 4
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN, P_OUT> ${type}<P_OUT> ${name}${(}${t0}<P_OUT> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}, ${t3}<P_OUT[]> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Parallel evaluation of pipelines to nodes

Collect, in parallel, elements output from a pipeline and describe those
elements with a {@link Node}.

@implSpec
If the exact size of the output from the pipeline is known and the source
{@link Spliterator} has the {@link Spliterator#SUBSIZED} characteristic,
then a flat {@link Node} will be returned whose content is an array,
since the size is known the array can be constructed in advance and
output elements can be placed into the array concurrently by leaf
tasks at the correct offsets.  If the exact size is not known, output
elements are collected into a conc-node whose shape mirrors that
of the computation. This conc-node can then be flattened in
parallel to produce a flat {@code Node} if desired.

@param helper the pipeline helper describing the pipeline
@param flattenTree whether a conc node should be flattened into a node
                   describing an array before returning
@param generator the array generator
@return a {@link Node} describing the output elements
"
      end

      operation 9547394 "collectInt"
	class_operation public return_type class_ref 1160578 // OfInt
	nparams 3
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<Integer> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collect, in parallel, elements output from an int-valued pipeline and
describe those elements with a {@link Node.OfInt}.

@implSpec
If the exact size of the output from the pipeline is known and the source
{@link Spliterator} has the {@link Spliterator#SUBSIZED} characteristic,
then a flat {@link Node} will be returned whose content is an array,
since the size is known the array can be constructed in advance and
output elements can be placed into the array concurrently by leaf
tasks at the correct offsets.  If the exact size is not known, output
elements are collected into a conc-node whose shape mirrors that
of the computation. This conc-node can then be flattened in
parallel to produce a flat {@code Node.OfInt} if desired.

@param <P_IN> the type of elements from the source Spliterator
@param helper the pipeline helper describing the pipeline
@param flattenTree whether a conc node should be flattened into a node
                   describing an array before returning
@return a {@link Node.OfInt} describing the output elements
"
      end

      operation 9547522 "collectLong"
	class_operation public return_type class_ref 1160706 // OfLong
	nparams 3
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<Long> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collect, in parallel, elements output from a long-valued pipeline and
describe those elements with a {@link Node.OfLong}.

@implSpec
If the exact size of the output from the pipeline is known and the source
{@link Spliterator} has the {@link Spliterator#SUBSIZED} characteristic,
then a flat {@link Node} will be returned whose content is an array,
since the size is known the array can be constructed in advance and
output elements can be placed into the array concurrently by leaf
tasks at the correct offsets.  If the exact size is not known, output
elements are collected into a conc-node whose shape mirrors that
of the computation. This conc-node can then be flattened in
parallel to produce a flat {@code Node.OfLong} if desired.

@param <P_IN> the type of elements from the source Spliterator
@param helper the pipeline helper describing the pipeline
@param flattenTree whether a conc node should be flattened into a node
                   describing an array before returning
@return a {@link Node.OfLong} describing the output elements
"
      end

      operation 9547650 "collectDouble"
	class_operation public return_type class_ref 1160834 // OfDouble
	nparams 3
	  param inout name "helper" type class_ref 1153794 // PipelineHelper
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "flattenTree" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<Double> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Collect, in parallel, elements output from n double-valued pipeline and
describe those elements with a {@link Node.OfDouble}.

@implSpec
If the exact size of the output from the pipeline is known and the source
{@link Spliterator} has the {@link Spliterator#SUBSIZED} characteristic,
then a flat {@link Node} will be returned whose content is an array,
since the size is known the array can be constructed in advance and
output elements can be placed into the array concurrently by leaf
tasks at the correct offsets.  If the exact size is not known, output
elements are collected into a conc-node whose shape mirrors that
of the computation. This conc-node can then be flattened in
parallel to produce a flat {@code Node.OfDouble} if desired.

@param <P_IN> the type of elements from the source Spliterator
@param helper the pipeline helper describing the pipeline
@param flattenTree whether a conc node should be flattened into a node
                   describing an array before returning
@return a {@link Node.OfDouble} describing the output elements
"
      end

      operation 9547778 "flatten"
	class_operation public return_type class_ref 1154178 // Node
	nparams 2
	  param inout name "node" type class_ref 1154178 // Node
	  param inout name "generator" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1}<T[]> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Parallel flattening of nodes

Flatten, in parallel, a {@link Node}.  A flattened node is one that has
no children.  If the node is already flat, it is simply returned.

@implSpec
If a new node is to be created, the generator is used to create an array
whose length is {@link Node#count()}.  Then the node tree is traversed
and leaf node elements are placed in the array concurrently by leaf tasks
at the correct offsets.

@param <T> type of elements contained by the node
@param node the node to flatten
@param generator the array factory used to create array instances
@return a flat {@code Node}
"
      end

      operation 9547906 "flattenInt"
	class_operation public return_type class_ref 1160578 // OfInt
	nparams 1
	  param inout name "node" type class_ref 1160578 // OfInt
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flatten, in parallel, a {@link Node.OfInt}.  A flattened node is one that
has no children.  If the node is already flat, it is simply returned.

@implSpec
If a new node is to be created, a new int[] array is created whose length
is {@link Node#count()}.  Then the node tree is traversed and leaf node
elements are placed in the array concurrently by leaf tasks at the
correct offsets.

@param node the node to flatten
@return a flat {@code Node.OfInt}
"
      end

      operation 9548034 "flattenLong"
	class_operation public return_type class_ref 1160706 // OfLong
	nparams 1
	  param inout name "node" type class_ref 1160706 // OfLong
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flatten, in parallel, a {@link Node.OfLong}.  A flattened node is one that
has no children.  If the node is already flat, it is simply returned.

@implSpec
If a new node is to be created, a new long[] array is created whose length
is {@link Node#count()}.  Then the node tree is traversed and leaf node
elements are placed in the array concurrently by leaf tasks at the
correct offsets.

@param node the node to flatten
@return a flat {@code Node.OfLong}
"
      end

      operation 9548162 "flattenDouble"
	class_operation public return_type class_ref 1160834 // OfDouble
	nparams 1
	  param inout name "node" type class_ref 1160834 // OfDouble
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flatten, in parallel, a {@link Node.OfDouble}.  A flattened node is one that
has no children.  If the node is already flat, it is simply returned.

@implSpec
If a new node is to be created, a new double[] array is created whose length
is {@link Node#count()}.  Then the node tree is traversed and leaf node
elements are placed in the array concurrently by leaf tasks at the
correct offsets.

@param node the node to flatten
@return a flat {@code Node.OfDouble}
"
      end

      class 1161346 "EmptyNode"
	abstract visibility private 
	nformals 3
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "T_ARR" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "T_CONS" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1154178 // Node
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3719298 // <realization>
	  relation 3719298 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3719298 // <realization>
	    b parent class_ref 1154178 // Node
	end

	operation 9548290 "EmptyNode"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9548418 "asArray"
	  cpp_inline public explicit_return_type "T"
	  nparams 1
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<T[]> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9548546 "copyInto"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "array" explicit_type "T_ARR"
	    param in name "offset" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9548674 "count"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9548802 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" explicit_type "T_CONS"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 1161474 "OfRef"
	  visibility private 
	  nformals 1
	  formal name "T" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 3
	  actual class class_ref 1161346 // EmptyNode
	    rank 0 explicit_value ""
	  actual class class_ref 1161346 // EmptyNode
	    rank 1 explicit_value ""
	  actual class class_ref 1161346 // EmptyNode
	    rank 2 explicit_value ""
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3719426 // <realization>
	    relation 3719426 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3719426 // <realization>
	      b parent class_ref 1161346 // EmptyNode
	  end

	  operation 9548930 "OfRef"
	    cpp_inline private explicit_return_type ""
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9549058 "spliterator"
	    cpp_inline public return_type class_ref 184450 // Spliterator
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end
	end
      end
    end

    class 1161602 "ReduceOps"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory for creating instances of {@code TerminalOp} that implement
reductions.

@since 1.8
"
      operation 9549186 "ReduceOps"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9549314 "makeRef"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 3
	  param inout name "seed" explicit_type "U"
	  param inout name "reducer" type class_ref 192642 // BiFunction
	  param inout name "combiner" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, U> ${type}<T, U> ${name}${(}${t0} ${p0}, ${t1}<U, ? super T, U> ${p1}, ${t2}<U> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a functional reduce on
reference values.

@param <T> the type of the input elements
@param <U> the type of the result
@param seed the identity element for the reduction
@param reducer the accumulating function that incorporates an additional
       input element into the result
@param combiner the combining function that combines two intermediate
       results
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9549442 "makeRef"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "operator" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, Optional<T>> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a functional reduce on
reference values producing an optional reference result.

@param <T> The type of the input elements, and the type of the result
@param operator The reducing function
@return A {@code TerminalOp} implementing the reduction
"
      end

      operation 9549570 "makeRef"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "collector" type class_ref 1155074 // Collector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, I> ${type}<T, I> ${name}${(}${t0}<? super T, I, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a mutable reduce on
reference values.

@param <T> the type of the input elements
@param <I> the type of the intermediate reduction result
@param collector a {@code Collector} defining the reduction
@return a {@code ReduceOp} implementing the reduction
"
      end

      operation 9549698 "makeRef"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 3
	  param inout name "seedFactory" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 192514 // BiConsumer
	  param inout name "reducer" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T, R> ${type}<T, R> ${name}${(}${t0}<R> ${p0}, ${t1}<R, ? super T> ${p1}, ${t2}<R,R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a mutable reduce on
reference values.

@param <T> the type of the input elements
@param <R> the type of the result
@param seedFactory a factory to produce a new base accumulator
@param accumulator a function to incorporate an element into an
       accumulator
@param reducer a function to combine an accumulator into another
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9549826 "makeInt"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param in name "identity" explicit_type "int"
	  param inout name "operator" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer, Integer> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a functional reduce on
{@code int} values.

@param identity the identity for the combining function
@param operator the combining function
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9549954 "makeInt"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "operator" type class_ref 1067394 // IntBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer, OptionalInt> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a functional reduce on
{@code int} values, producing an optional integer result.

@param operator the combining function
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9550082 "makeInt"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134210 // ObjIntConsumer
	  param inout name "combiner" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type}<Integer, R> ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a mutable reduce on
{@code int} values.

@param <R> The type of the result
@param supplier a factory to produce a new accumulator of the result type
@param accumulator a function to incorporate an int into an
       accumulator
@param combiner a function to combine an accumulator into another
@return A {@code ReduceOp} implementing the reduction
"
      end

      operation 9550210 "makeLong"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param in name "identity" explicit_type "long"
	  param inout name "operator" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long, Long> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a functional reduce on
{@code long} values.

@param identity the identity for the combining function
@param operator the combining function
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9550338 "makeLong"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "operator" type class_ref 1066882 // LongBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long, OptionalLong> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a functional reduce on
{@code long} values, producing an optional long result.

@param operator the combining function
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9550466 "makeLong"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134338 // ObjLongConsumer
	  param inout name "combiner" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type}<Long, R> ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a mutable reduce on
{@code long} values.

@param <R> the type of the result
@param supplier a factory to produce a new accumulator of the result type
@param accumulator a function to incorporate an int into an
       accumulator
@param combiner a function to combine an accumulator into another
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9550594 "makeDouble"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 2
	  param in name "identity" explicit_type "double"
	  param inout name "operator" type class_ref 1067138 // DoubleBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double, Double> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a functional reduce on
{@code double} values.

@param identity the identity for the combining function
@param operator the combining function
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9550722 "makeDouble"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 1
	  param inout name "operator" type class_ref 1067138 // DoubleBinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double, OptionalDouble> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a functional reduce on
{@code double} values, producing an optional double result.

@param operator the combining function
@return a {@code TerminalOp} implementing the reduction
"
      end

      operation 9550850 "makeDouble"
	class_operation public return_type class_ref 1154562 // TerminalOp
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param inout name "accumulator" type class_ref 1134082 // ObjDoubleConsumer
	  param inout name "combiner" type class_ref 1066626 // BinaryOperator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type}<Double, R> ${name}${(}${t0}<R> ${p0}, ${t1}<R> ${p1}, ${t2}<R> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code TerminalOp} that implements a mutable reduce on
{@code double} values.

@param <R> the type of the result
@param supplier a factory to produce a new accumulator of the result type
@param accumulator a function to incorporate an int into an
       accumulator
@param combiner a function to combine an accumulator into another
@return a {@code TerminalOp} implementing the reduction
"
      end

      class 1161730 "AccumulatingSink"
	visibility private stereotype "interface"
	nformals 3
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "R" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "K" type "" explicit_default_value ""
	  explicit_extends "AccumulatingSink<T, R, K>"
	nactuals 2
	actual class class_ref 1156866 // TerminalSink
	  rank 0 explicit_value ""
	actual class class_ref 1156866 // TerminalSink
	  rank 1 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3719682 // <realization>
	  relation 3719682 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3719682 // <realization>
	    b parent class_ref 1156866 // TerminalSink
	end

	operation 9550978 "combine"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "other" explicit_type "K"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1161858 "Box"
	abstract visibility private 
	nformals 1
	formal name "U" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2219138 "state"
	  package explicit_type "U"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9551106 "Box"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9551234 "get"
	  cpp_inline public explicit_return_type "U"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Avoid creation of special accessor
"
	end
      end

      class 1161986 "ReduceOp"
	abstract visibility private 
	nformals 3
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "R" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "S" type "" explicit_default_value ""
	  explicit_extends "AccumulatingSink<T, R, S>"
	nactuals 2
	actual class class_ref 1154562 // TerminalOp
	  rank 0 explicit_value ""
	actual class class_ref 1154562 // TerminalOp
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3719810 // <realization>
	  relation 3719810 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3719810 // <realization>
	    b parent class_ref 1154562 // TerminalOp
	end

	classrelation 3719938 // inputShape (<unidirectional association>)
	  relation 3719938 --->
	    a role_name "inputShape" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3719938 // inputShape (<unidirectional association>)
	    b parent class_ref 1153922 // StreamShape
	end

	operation 9551362 "ReduceOp"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "shape" type class_ref 1153922 // StreamShape
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Create a {@code ReduceOp} of the specified stream shape which uses
the specified {@code Supplier} to create accumulating sinks.

@param shape The shape of the stream pipeline
"
	end

	operation 9551490 "makeSink"
	  abstract cpp_inline public explicit_return_type "S"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9551618 "inputShape"
	  cpp_inline public return_type class_ref 1153922 // StreamShape
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9551746 "evaluateSequential"
	  cpp_inline public explicit_return_type "R"
	  nparams 2
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9551874 "evaluateParallel"
	  cpp_inline public explicit_return_type "R"
	  nparams 2
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type} ${name}${(}${t0}<T> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1162114 "ReduceTask"
	visibility private 
	nformals 4
	formal name "P_IN" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "P_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "R" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "S" type "" explicit_default_value ""
	  explicit_extends "AccumulatingSink<P_OUT, R, S>"
	nactuals 4
	actual class class_ref 1154818 // AbstractTask
	  rank 0 explicit_value ""
	actual class class_ref 1154818 // AbstractTask
	  rank 1 explicit_value ""
	actual class class_ref 1154818 // AbstractTask
	  rank 2 explicit_value ""
	actual class class_ref 1154818 // AbstractTask
	  rank 3 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3720066 // <realization>
	  relation 3720066 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3720066 // <realization>
	    b parent class_ref 1154818 // AbstractTask
	end

	classrelation 3720194 // op (<unidirectional association>)
	  relation 3720194 --->
	    a role_name "op" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_OUT, R, S> ${name}${value};
"
	      classrelation_ref 3720194 // op (<unidirectional association>)
	    b parent class_ref 1161986 // ReduceOp
	end

	operation 9552002 "ReduceTask"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "op" type class_ref 1161986 // ReduceOp
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT, R, S> ${p0}, ${t1}<P_OUT> ${p1}, ${t2}<P_IN> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9552130 "ReduceTask"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "parent" type class_ref 1162114 // ReduceTask
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_IN, P_OUT, R, S> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9552258 "makeChild"
	  cpp_inline protected return_type class_ref 1162114 // ReduceTask
	  nparams 1
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_IN, P_OUT, R, S> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9552386 "doLeaf"
	  cpp_inline protected explicit_return_type "S"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9552514 "onCompletion"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "caller" type class_ref 1065218 // CountedCompleter
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1162754 "SliceOps"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory for instances of a short-circuiting stateful intermediate operations
that produce subsequences of their input stream.

@since 1.8
"
      operation 9564930 "SliceOps"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " No instances
"
      end

      operation 9565058 "calcSize"
	class_operation private explicit_return_type "long"
	nparams 3
	  param in name "size" explicit_type "long"
	  param in name "skip" explicit_type "long"
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the sliced size given the current size, number of elements
skip, and the number of elements to limit.

@param size the current size
@param skip the number of elements to skip, assumed to be >= 0
@param limit the number of elements to limit, assumed to be >= 0, with
       a value of {@code Long.MAX_VALUE} if there is no limit
@return the sliced size
"
      end

      operation 9565186 "calcSliceFence"
	class_operation private explicit_return_type "long"
	nparams 2
	  param in name "skip" explicit_type "long"
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the slice fence, which is one past the index of the slice
range
@param skip the number of elements to skip, assumed to be >= 0
@param limit the number of elements to limit, assumed to be >= 0, with
       a value of {@code Long.MAX_VALUE} if there is no limit
@return the slice fence.
"
      end

      operation 9565314 "sliceSpliterator"
	class_operation private return_type class_ref 184450 // Spliterator
	nparams 4
	  param inout name "shape" type class_ref 1153922 // StreamShape
	  param inout name "s" type class_ref 184450 // Spliterator
	  param in name "skip" explicit_type "long"
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<P_IN> ${name}${(}${t0} ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Creates a slice spliterator given a stream shape governing the
spliterator type.  Requires that the underlying Spliterator
be SUBSIZED.
"
      end

      operation 9565442 "castingArray"
	class_operation private return_type class_ref 1068034 // IntFunction
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T[]> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9565570 "makeRef"
	class_operation public return_type class_ref 184706 // Stream
	nparams 3
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param in name "skip" explicit_type "long"
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<?, T, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"slice\" operation to the provided stream.  The slice operation
may be may be skip-only, limit-only, or skip-and-limit.

@param <T> the type of both input and output elements
@param upstream a reference stream with element type T
@param skip the number of elements to skip.  Must be >= 0.
@param limit the maximum size of the resulting stream, or -1 if no limit
       is to be imposed
"
      end

      operation 9565698 "makeInt"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 3
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param in name "skip" explicit_type "long"
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Integer, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"slice\" operation to the provided IntStream.  The slice
operation may be may be skip-only, limit-only, or skip-and-limit.

@param upstream An IntStream
@param skip The number of elements to skip.  Must be >= 0.
@param limit The maximum size of the resulting stream, or -1 if no limit
       is to be imposed
"
      end

      operation 9565826 "makeLong"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 3
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param in name "skip" explicit_type "long"
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Long, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"slice\" operation to the provided LongStream.  The slice
operation may be may be skip-only, limit-only, or skip-and-limit.

@param upstream A LongStream
@param skip The number of elements to skip.  Must be >= 0.
@param limit The maximum size of the resulting stream, or -1 if no limit
       is to be imposed
"
      end

      operation 9565954 "makeDouble"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 3
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param in name "skip" explicit_type "long"
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, Double, ?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"slice\" operation to the provided DoubleStream.  The slice
operation may be may be skip-only, limit-only, or skip-and-limit.

@param upstream A DoubleStream
@param skip The number of elements to skip.  Must be >= 0.
@param limit The maximum size of the resulting stream, or -1 if no limit
       is to be imposed
"
      end

      operation 9566082 "flags"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "limit" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1162882 "SliceTask"
	visibility private 
	nformals 2
	formal name "P_IN" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "P_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1154690 // AbstractShortCircuitTask
	  rank 0 explicit_value ""
	actual class class_ref 1154690 // AbstractShortCircuitTask
	  rank 1 explicit_value ""
	actual class class_ref 1154690 // AbstractShortCircuitTask
	  rank 2 explicit_value ""
	actual class class_ref 1154690 // AbstractShortCircuitTask
	  rank 3 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	java_annotation "@SuppressWarnings(\"serial\")
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3721218 // <realization>
	  relation 3721218 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3721218 // <realization>
	    b parent class_ref 1154690 // AbstractShortCircuitTask
	end

	classrelation 3721346 // op (<unidirectional association>)
	  relation 3721346 --->
	    a role_name "op" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_OUT, P_OUT, ?> ${name}${value};
"
	      classrelation_ref 3721346 // op (<unidirectional association>)
	    b parent class_ref 1153666 // AbstractPipeline
	end

	classrelation 3721474 // generator (<unidirectional association>)
	  relation 3721474 --->
	    a role_name "generator" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_OUT[]> ${name}${value};
"
	      classrelation_ref 3721474 // generator (<unidirectional association>)
	    b parent class_ref 1068034 // IntFunction
	end

	attribute 2219266 "targetOffset"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2219394 "targetSize"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2219522 "thisNodeSize"
	  private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2219650 "completed"
	  volatile private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9566210 "SliceTask"
	  cpp_inline package explicit_return_type ""
	  nparams 6
	    param inout name "op" type class_ref 1153666 // AbstractPipeline
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	    param in name "offset" explicit_type "long"
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT, P_OUT, ?> ${p0}, ${t1}<P_OUT> ${p1}, ${t2}<P_IN> ${p2}, ${t3}<P_OUT[]> ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9566338 "SliceTask"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "parent" type class_ref 1162882 // SliceTask
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_IN, P_OUT> ${p0}, ${t1}<P_IN> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9566466 "makeChild"
	  cpp_inline protected return_type class_ref 1162882 // SliceTask
	  nparams 1
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_IN, P_OUT> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9566594 "getEmptyResult"
	  cpp_inline protected return_type class_ref 1154178 // Node
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9566722 "doLeaf"
	  cpp_inline protected return_type class_ref 1154178 // Node
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9566850 "onCompletion"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "caller" type class_ref 1065218 // CountedCompleter
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9566978 "cancel"
	  cpp_inline protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9567106 "doTruncate"
	  cpp_inline private return_type class_ref 1154178 // Node
	  nparams 1
	    param inout name "input" type class_ref 1154178 // Node
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${t0}<P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9567234 "isLeftCompleted"
	  cpp_inline private explicit_return_type "boolean"
	  nparams 1
	    param in name "target" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Determine if the number of completed elements in this node and nodes
to the left of this node is greater than or equal to the target size.

@param target the target size
@return true if the number of elements is greater than or equal to
        the target size, otherwise false.
"
	end

	operation 9567362 "completedSize"
	  cpp_inline private explicit_return_type "long"
	  nparams 1
	    param in name "target" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Compute the number of completed elements in this node.
<p>
Computation terminates if all nodes have been processed or the
number of completed elements is greater than or equal to the target
size.

@param target the target size
@return return the number of completed elements
"
	end
      end
    end

    class 1163010 "SortedOps"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Factory methods for transforming streams into sorted streams.

@since 1.8
"
      operation 9567490 "SortedOps"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9567618 "makeRef"
	class_operation package return_type class_ref 184706 // Stream
	nparams 1
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<?, T, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"sorted\" operation to the provided stream.

@param <T> the type of both input and output elements
@param upstream a reference stream with element type T
"
      end

      operation 9567746 "makeRef"
	class_operation package return_type class_ref 184706 // Stream
	nparams 2
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<?, T, ?> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"sorted\" operation to the provided stream.

@param <T> the type of both input and output elements
@param upstream a reference stream with element type T
@param comparator the comparator to order elements by
"
      end

      operation 9567874 "makeInt"
	class_operation package return_type class_ref 429570 // IntStream
	nparams 1
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<?, Integer, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"sorted\" operation to the provided stream.

@param <T> the type of both input and output elements
@param upstream a reference stream with element type T
"
      end

      operation 9568002 "makeLong"
	class_operation package return_type class_ref 1023490 // LongStream
	nparams 1
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<?, Long, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"sorted\" operation to the provided stream.

@param <T> the type of both input and output elements
@param upstream a reference stream with element type T
"
      end

      operation 9568130 "makeDouble"
	class_operation package return_type class_ref 1023618 // DoubleStream
	nparams 1
	  param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<?, Double, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a \"sorted\" operation to the provided stream.

@param <T> the type of both input and output elements
@param upstream a reference stream with element type T
"
      end

      class 1163138 "OfRef"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1155842 // ReferencePipeline
	  rank 0 explicit_value ""
	actual class class_ref 1155842 // ReferencePipeline
	  rank 1 explicit_value ""
	actual class class_ref 1162626 // StatefulOp
	  rank 0 explicit_value ""
	actual class class_ref 1162626 // StatefulOp
	  rank 1 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3721602 // <realization>
	  relation 3721602 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3721602 // <realization>
	    b parent class_ref 1162626 // StatefulOp
	end

	attribute 2219778 "isNaturalSort"
	  const_attribute private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Comparator used for sorting


"
	end

	classrelation 3721730 // comparator (<unidirectional association>)
	  relation 3721730 --->
	    a role_name "comparator" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T> ${name}${value};
"
	      classrelation_ref 3721730 // comparator (<unidirectional association>)
	    b parent class_ref 184962 // Comparator
	end

	operation 9568258 "OfRef"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, T, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sort using natural order of {@literal <T>} which must be
{@code Comparable}.
"
	end

	operation 9568386 "OfRef"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	    param inout name "comparator" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, T, ?> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sort using the provided comparator.

@param comparator The comparator to be used to evaluate ordering.
"
	end

	operation 9568514 "opWrapSink"
	  cpp_inline public return_type class_ref 1154050 // Sink
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9568642 "opEvaluateParallel"
	  cpp_inline public return_type class_ref 1154178 // Node
	  nparams 3
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<T[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1163266 "OfInt"
	visibility private 
	nactuals 2
	actual class class_ref 1158530 // IntPipeline
	  rank 0 explicit_value ""
	actual class class_ref 1159042 // StatefulOp
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3721858 // <realization>
	  relation 3721858 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3721858 // <realization>
	    b parent class_ref 1159042 // StatefulOp
	end

	operation 9568770 "OfInt"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, Integer, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9568898 "opWrapSink"
	  public return_type class_ref 1154050 // Sink
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Integer> ${name}${(}${t0} ${p0}, ${t1}<Integer> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9569026 "opEvaluateParallel"
	  public return_type class_ref 1154178 // Node
	  nparams 3
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Integer> ${name}${(}${t0}<Integer> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<Integer[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1163394 "OfLong"
	visibility private 
	nactuals 2
	actual class class_ref 1159170 // LongPipeline
	  rank 0 explicit_value ""
	actual class class_ref 1159682 // StatefulOp
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3721986 // <realization>
	  relation 3721986 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3721986 // <realization>
	    b parent class_ref 1159682 // StatefulOp
	end

	operation 9569154 "OfLong"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, Long, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9569282 "opWrapSink"
	  public return_type class_ref 1154050 // Sink
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Long> ${name}${(}${t0} ${p0}, ${t1}<Long> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9569410 "opEvaluateParallel"
	  public return_type class_ref 1154178 // Node
	  nparams 3
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Long> ${name}${(}${t0}<Long> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<Long[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1163522 "OfDouble"
	visibility private 
	nactuals 2
	actual class class_ref 1155970 // DoublePipeline
	  rank 0 explicit_value ""
	actual class class_ref 1156482 // StatefulOp
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3722114 // <realization>
	  relation 3722114 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3722114 // <realization>
	    b parent class_ref 1156482 // StatefulOp
	end

	operation 9569538 "OfDouble"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "upstream" type class_ref 1153666 // AbstractPipeline
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, Double, ?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9569666 "opWrapSink"
	  public return_type class_ref 1154050 // Sink
	  nparams 2
	    param in name "flags" explicit_type "int"
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Double> ${name}${(}${t0} ${p0}, ${t1}<Double> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9569794 "opEvaluateParallel"
	  public return_type class_ref 1154178 // Node
	  nparams 3
	    param inout name "helper" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "generator" type class_ref 1068034 // IntFunction
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<P_IN> ${type}<Double> ${name}${(}${t0}<Double> ${p0}, ${t1}<P_IN> ${p1}, ${t2}<Double[]> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1163650 "AbstractRefSortingSink"
	abstract visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	actual class class_ref 1157506 // ChainedReference
	  rank 0 explicit_value ""
	actual class class_ref 1157506 // ChainedReference
	  rank 1 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3722242 // <realization>
	  relation 3722242 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3722242 // <realization>
	    b parent class_ref 1157506 // ChainedReference
	end

	classrelation 3722370 // comparator (<unidirectional association>)
	  relation 3722370 --->
	    a role_name "comparator" const_relation protected
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T> ${name}${value};
"
	      classrelation_ref 3722370 // comparator (<unidirectional association>)
	    b parent class_ref 184962 // Comparator
	end

	attribute 2219906 "cancellationWasRequested"
	  protected explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " @@@ could be a lazy final value, if/when support is added

"
	end

	operation 9569922 "AbstractRefSortingSink"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "downstream" type class_ref 1154050 // Sink
	    param inout name "comparator" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9570050 "cancellationRequested"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Records is cancellation is requested so short-circuiting behaviour
can be preserved when the sorted elements are pushed downstream.

@return false, as this sink never short-circuits.
"
	end
      end

      class 1163778 "SizedRefSortingSink"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1163650 // AbstractRefSortingSink
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3722498 // <realization>
	  relation 3722498 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3722498 // <realization>
	    b parent class_ref 1163650 // AbstractRefSortingSink
	end

	attribute 2220034 "array"
	  private explicit_type "T"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2220162 "offset"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9570178 "SizedRefSortingSink"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "sink" type class_ref 1154050 // Sink
	    param inout name "comparator" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9570306 "begin"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9570434 "end"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9570562 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "t" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1163906 "RefSortingSink"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 1163650 // AbstractRefSortingSink
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3722626 // <realization>
	  relation 3722626 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3722626 // <realization>
	    b parent class_ref 1163650 // AbstractRefSortingSink
	end

	classrelation 3722754 // list (<unidirectional association>)
	  relation 3722754 --->
	    a role_name "list" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3722754 // list (<unidirectional association>)
	    b parent class_ref 186498 // ArrayList
	end

	operation 9570690 "RefSortingSink"
	  cpp_inline package explicit_return_type ""
	  nparams 2
	    param inout name "sink" type class_ref 1154050 // Sink
	    param inout name "comparator" type class_ref 184962 // Comparator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super T> ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9570818 "begin"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9570946 "end"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9571074 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "t" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1164034 "AbstractIntSortingSink"
	abstract visibility private 
	nactuals 2
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	actual class class_ref 1157634 // ChainedInt
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3722882 // <realization>
	  relation 3722882 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3722882 // <realization>
	    b parent class_ref 1157634 // ChainedInt
	end

	attribute 2220290 "cancellationWasRequested"
	  protected explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9571202 "AbstractIntSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Integer> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9571330 "cancellationRequested"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1164162 "SizedIntSortingSink"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3723010 // <generalisation>
	  relation 3723010 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3723010 // <generalisation>
	    b parent class_ref 1164034 // AbstractIntSortingSink
	end

	attribute 2220418 "array"
	  private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2220546 "offset"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9571458 "SizedIntSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Integer> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9571586 "begin"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9571714 "end"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9571842 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1164290 "IntSortingSink"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3723138 // <generalisation>
	  relation 3723138 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3723138 // <generalisation>
	    b parent class_ref 1164034 // AbstractIntSortingSink
	end

	classrelation 3723266 // b (<unidirectional association>)
	  relation 3723266 --->
	    a role_name "b" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3723266 // b (<unidirectional association>)
	    b parent class_ref 1164546 // OfInt
	end

	operation 9571970 "IntSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Integer> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9572098 "begin"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9572226 "end"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9572354 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1164674 "AbstractLongSortingSink"
	abstract visibility private 
	nactuals 2
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	actual class class_ref 1157762 // ChainedLong
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3723394 // <realization>
	  relation 3723394 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3723394 // <realization>
	    b parent class_ref 1157762 // ChainedLong
	end

	attribute 2220674 "cancellationWasRequested"
	  protected explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9572482 "AbstractLongSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Long> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9572610 "cancellationRequested"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1164802 "SizedLongSortingSink"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3723522 // <generalisation>
	  relation 3723522 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3723522 // <generalisation>
	    b parent class_ref 1164674 // AbstractLongSortingSink
	end

	attribute 2220802 "array"
	  private explicit_type "long"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2220930 "offset"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9572738 "SizedLongSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Long> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9572866 "begin"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9572994 "end"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9573122 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1164930 "LongSortingSink"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3723650 // <generalisation>
	  relation 3723650 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3723650 // <generalisation>
	    b parent class_ref 1164674 // AbstractLongSortingSink
	end

	classrelation 3723778 // b (<unidirectional association>)
	  relation 3723778 --->
	    a role_name "b" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3723778 // b (<unidirectional association>)
	    b parent class_ref 1165058 // OfLong
	end

	operation 9573250 "LongSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Long> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9573378 "begin"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9573506 "end"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9573634 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1165186 "AbstractDoubleSortingSink"
	abstract visibility private 
	nactuals 2
	actual class class_ref 1154050 // Sink
	  rank 0 explicit_value ""
	actual class class_ref 1157890 // ChainedDouble
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3723906 // <realization>
	  relation 3723906 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3723906 // <realization>
	    b parent class_ref 1157890 // ChainedDouble
	end

	attribute 2221058 "cancellationWasRequested"
	  protected explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9573762 "AbstractDoubleSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Double> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9573890 "cancellationRequested"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1165314 "SizedDoubleSortingSink"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3724034 // <generalisation>
	  relation 3724034 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3724034 // <generalisation>
	    b parent class_ref 1165186 // AbstractDoubleSortingSink
	end

	attribute 2221186 "array"
	  private explicit_type "double"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2221314 "offset"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9574018 "SizedDoubleSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "downstream" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Double> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9574146 "begin"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9574274 "end"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9574402 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1165442 "DoubleSortingSink"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3724162 // <generalisation>
	  relation 3724162 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3724162 // <generalisation>
	    b parent class_ref 1165186 // AbstractDoubleSortingSink
	end

	classrelation 3724290 // b (<unidirectional association>)
	  relation 3724290 --->
	    a role_name "b" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3724290 // b (<unidirectional association>)
	    b parent class_ref 1165570 // OfDouble
	end

	operation 9574530 "DoubleSortingSink"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "sink" type class_ref 1154050 // Sink
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super Double> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9574658 "begin"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9574786 "end"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9574914 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1164418 "SpinedBuffer"
      visibility package 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 163458 // Consumer
        rank 0 explicit_value ""
      actual class class_ref 184322 // Iterable
        rank 0 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An ordered collection of elements.  Elements can be added, but not removed.
Goes through a building phase, during which elements can be added, and a
traversal phase, during which elements can be traversed in order but no
further modifications are possible.

<p> One or more arrays are used to store elements. The use of a multiple
arrays has better performance characteristics than a single array used by
{@link ArrayList}, as when the capacity of the list needs to be increased
no copying of elements is required.  This is usually beneficial in the case
where the results will be traversed a small number of times.

@param <E> the type of elements in this list
@since 1.8
"
      class 1164546 "OfInt"
	visibility package 
	nactuals 4
	actual class class_ref 1164418 // SpinedBuffer
	  rank 0 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 0 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 1 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 2 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3724802 // <realization>
	  relation 3724802 -_-|>
	    a public
	      java "${type}<, , >"
	      classrelation_ref 3724802 // <realization>
	    b parent class_ref 1165698 // OfPrimitive
	end

	classrelation 3724930 // <realization>
	  relation 3724930 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3724930 // <realization>
	    b parent class_ref 376706 // IntConsumer
	end

	operation 9575042 "OfInt"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9575170 "OfInt"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param in name "initialCapacity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9575298 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Integer> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9575426 "newArrayArray"
	  cpp_inline protected explicit_return_type "int"
	  nparams 1
	    param in name "size" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9575554 "newArray"
	  cpp_inline public explicit_return_type "int"
	  nparams 1
	    param in name "size" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9575682 "arrayLength"
	  cpp_inline protected explicit_return_type "int"
	  nparams 1
	    param inout name "array" explicit_type "int"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9575810 "arrayForEach"
	  cpp_inline protected explicit_return_type "void"
	  nparams 4
	    param inout name "array" explicit_type "int"
	  multiplicity "[]"
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	    param inout name "consumer" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9575938 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "i" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9576066 "get"
	  cpp_inline public explicit_return_type "int"
	  nparams 1
	    param in name "index" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9576194 "iterator"
	  cpp_inline public return_type class_ref 1089794 // OfInt
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9576322 "spliterator"
	  cpp_inline public return_type class_ref 376578 // OfInt
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9576450 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1165058 "OfLong"
	visibility package 
	nactuals 4
	actual class class_ref 1164418 // SpinedBuffer
	  rank 0 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 0 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 1 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 2 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3725058 // <realization>
	  relation 3725058 -_-|>
	    a public
	      java "${type}<, , >"
	      classrelation_ref 3725058 // <realization>
	    b parent class_ref 1165698 // OfPrimitive
	end

	classrelation 3725186 // <realization>
	  relation 3725186 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3725186 // <realization>
	    b parent class_ref 376962 // LongConsumer
	end

	operation 9576578 "OfLong"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9576706 "OfLong"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param in name "initialCapacity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9576834 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Long> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9576962 "newArrayArray"
	  cpp_inline protected explicit_return_type "long"
	  nparams 1
	    param in name "size" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9577090 "newArray"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param in name "size" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9577218 "arrayLength"
	  cpp_inline protected explicit_return_type "int"
	  nparams 1
	    param inout name "array" explicit_type "long"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9577346 "arrayForEach"
	  cpp_inline protected explicit_return_type "void"
	  nparams 4
	    param inout name "array" explicit_type "long"
	  multiplicity "[]"
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	    param inout name "consumer" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9577474 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "i" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9577602 "get"
	  cpp_inline public explicit_return_type "long"
	  nparams 1
	    param in name "index" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9577730 "iterator"
	  cpp_inline public return_type class_ref 1089922 // OfLong
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9577858 "spliterator"
	  cpp_inline public return_type class_ref 376834 // OfLong
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9577986 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1165570 "OfDouble"
	visibility package 
	nactuals 4
	actual class class_ref 1164418 // SpinedBuffer
	  rank 0 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 0 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 1 explicit_value ""
	actual class class_ref 1165698 // OfPrimitive
	  rank 2 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3725314 // <realization>
	  relation 3725314 -_-|>
	    a public
	      java "${type}<, , >"
	      classrelation_ref 3725314 // <realization>
	    b parent class_ref 1165698 // OfPrimitive
	end

	classrelation 3725442 // <realization>
	  relation 3725442 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3725442 // <realization>
	    b parent class_ref 377346 // DoubleConsumer
	end

	operation 9578114 "OfDouble"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9578242 "OfDouble"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param in name "initialCapacity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9578370 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Double> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9578498 "newArrayArray"
	  cpp_inline protected explicit_return_type "double"
	  nparams 1
	    param in name "size" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9578626 "newArray"
	  cpp_inline public explicit_return_type "double"
	  nparams 1
	    param in name "size" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9578754 "arrayLength"
	  cpp_inline protected explicit_return_type "int"
	  nparams 1
	    param inout name "array" explicit_type "double"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9578882 "arrayForEach"
	  cpp_inline protected explicit_return_type "void"
	  nparams 4
	    param inout name "array" explicit_type "double"
	  multiplicity "[]"
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	    param inout name "consumer" type class_ref 377346 // DoubleConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9579010 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param in name "i" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9579138 "get"
	  cpp_inline public explicit_return_type "double"
	  nparams 1
	    param in name "index" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9579266 "iterator"
	  cpp_inline public return_type class_ref 1090050 // OfDouble
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9579394 "spliterator"
	  cpp_inline public return_type class_ref 377090 // OfDouble
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9579522 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 3724418 // <generalisation>
	relation 3724418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3724418 // <generalisation>
	  b parent class_ref 1154946 // AbstractSpinedBuffer
      end

      classrelation 3724546 // <realization>
	relation 3724546 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3724546 // <realization>
	  b parent class_ref 163458 // Consumer
      end

      classrelation 3724674 // <realization>
	relation 3724674 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3724674 // <realization>
	  b parent class_ref 184322 // Iterable
      end

      class 1165698 "OfPrimitive"
	abstract visibility package 
	nformals 3
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "T_ARR" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "T_CONS" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 184322 // Iterable
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3725570 // <generalisation>
	  relation 3725570 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3725570 // <generalisation>
	    b parent class_ref 1154946 // AbstractSpinedBuffer
	end

	classrelation 3725698 // <realization>
	  relation 3725698 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3725698 // <realization>
	    b parent class_ref 184322 // Iterable
	end

	attribute 2221826 "curChunk"
	  package explicit_type "T_ARR"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "We optimistically hope that all the data will fit into the first chunk,
so we try to avoid inflating the spine[] and priorElementCount[] arrays
prematurely.  So methods must be prepared to deal with these arrays being
null.  If spine is non-null, then spineIndex points to the current chunk
within the spine, otherwise it is zero.  The spine and priorElementCount
arrays are always the same size, and for any i <= spineIndex,
priorElementCount[i] is the sum of the sizes of all the prior chunks.

The curChunk pointer is always valid.  The elementIndex is the index of
the next element to be written in curChunk; this may be past the end of
curChunk so we have to check before writing. When we inflate the spine
array, curChunk becomes the first element in it.  When we clear the
buffer, we discard all chunks except the first one, which we clear,
restoring it to the initial single-chunk state.

 The chunk we're currently writing into

"
	end

	attribute 2221954 "spine"
	  package explicit_type "T_ARR"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " All chunks, or null if there is only one chunk

"
	end

	operation 9581570 "OfPrimitive"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param in name "initialCapacity" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an empty list with the specified initial capacity.

@param  initialCapacity  the initial capacity of the list
@throws IllegalArgumentException if the specified initial capacity
        is negative
"
	end

	operation 9581698 "OfPrimitive"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an empty list with an initial capacity of sixteen.
"
	end

	operation 9581826 "iterator"
	  abstract cpp_inline public return_type class_ref 132994 // Iterator
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9581954 "forEach"
	  abstract cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9582082 "newArrayArray"
	  abstract cpp_inline protected explicit_return_type "T_ARR"
	  nparams 1
	    param in name "size" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Create a new array-of-array of the proper type and size 
"
	end

	operation 9582210 "newArray"
	  abstract cpp_inline public explicit_return_type "T_ARR"
	  nparams 1
	    param in name "size" explicit_type "int"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Create a new array of the proper type and size 
"
	end

	operation 9582338 "arrayLength"
	  abstract cpp_inline protected explicit_return_type "int"
	  nparams 1
	    param inout name "array" explicit_type "T_ARR"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Get the length of an array 
"
	end

	operation 9582466 "arrayForEach"
	  abstract cpp_inline protected explicit_return_type "void"
	  nparams 4
	    param inout name "array" explicit_type "T_ARR"
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	    param inout name "consumer" explicit_type "T_CONS"
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Iterate an array with the provided consumer 
"
	end

	operation 9582594 "capacity"
	  cpp_inline protected explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9582722 "inflateSpine"
	  cpp_inline private explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9582850 "ensureCapacity"
	  cpp_inline protected explicit_return_type "void"
	  nparams 1
	    param in name "targetSize" explicit_type "long"
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9582978 "increaseCapacity"
	  cpp_inline protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9583106 "chunkFor"
	  cpp_inline protected explicit_return_type "int"
	  nparams 1
	    param in name "index" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9583234 "copyInto"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "array" explicit_type "T_ARR"
	    param in name "offset" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9583362 "asPrimitiveArray"
	  cpp_inline public explicit_return_type "T_ARR"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9583490 "preAccept"
	  cpp_inline protected explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9583618 "clear"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9583746 "forEach"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" explicit_type "T_CONS"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"overloads\")
"
	  
	  
	  
	end

	class 1165826 "BaseSpliterator"
	  abstract visibility package 
	  nformals 1
	  formal name "T_SPLITR" type "" explicit_default_value ""
	    explicit_extends "Spliterator.OfPrimitive<E, T_CONS, T_SPLITR>"
	  nactuals 4
	  actual class class_ref 184450 // Spliterator
	    rank 0 explicit_value ""
	  actual class class_ref 376450 // OfPrimitive
	    rank 0 explicit_value ""
	  actual class class_ref 376450 // OfPrimitive
	    rank 1 explicit_value ""
	  actual class class_ref 376450 // OfPrimitive
	    rank 2 explicit_value ""
	  cpp_decl ""
	  java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3725826 // <realization>
	    relation 3725826 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3725826 // <realization>
	      b parent class_ref 376450 // OfPrimitive
	  end

	  attribute 2222082 "splSpineIndex"
	    package explicit_type "int"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " The current spine index

"
	  end

	  attribute 2222210 "lastSpineIndex"
	    const_attribute package explicit_type "int"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " Last spine index

"
	  end

	  attribute 2222338 "splElementIndex"
	    package explicit_type "int"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " The current element index into the current spine

"
	  end

	  attribute 2222466 "lastSpineElementFence"
	    const_attribute package explicit_type "int"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " Last spine's last element index + 1

"
	  end

	  attribute 2222594 "splChunk"
	    package explicit_type "T_ARR"
	    cpp_decl ""
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    mysql_decl ""
	    MysqlColumn
	    comment " When splSpineIndex >= lastSpineIndex and
 splElementIndex >= lastSpineElementFence then
 this spliterator is fully traversed
 tryAdvance can set splSpineIndex > spineIndex if the last spine is full
 The current spine array

"
	  end

	  operation 9583874 "BaseSpliterator"
	    cpp_inline package explicit_return_type ""
	    nparams 4
	      param in name "firstSpineIndex" explicit_type "int"
	      param in name "lastSpineIndex" explicit_type "int"
	      param in name "firstSpineElementIndex" explicit_type "int"
	      param in name "lastSpineElementFence" explicit_type "int"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9584002 "newSpliterator"
	    abstract cpp_inline package explicit_return_type "T_SPLITR"
	    nparams 4
	      param in name "firstSpineIndex" explicit_type "int"
	      param in name "lastSpineIndex" explicit_type "int"
	      param in name "firstSpineElementIndex" explicit_type "int"
	      param in name "lastSpineElementFence" explicit_type "int"
	    
	    java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9584130 "arrayForOne"
	    abstract cpp_inline package explicit_return_type "void"
	    nparams 3
	      param inout name "array" explicit_type "T_ARR"
	      param in name "index" explicit_type "int"
	      param inout name "consumer" explicit_type "T_CONS"
	    
	    java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9584258 "arraySpliterator"
	    abstract cpp_inline package explicit_return_type "T_SPLITR"
	    nparams 3
	      param inout name "array" explicit_type "T_ARR"
	      param in name "offset" explicit_type "int"
	      param in name "len" explicit_type "int"
	    
	    java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 9584386 "estimateSize"
	    cpp_inline public explicit_return_type "long"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end

	  operation 9584514 "characteristics"
	    cpp_inline public explicit_return_type "int"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end

	  operation 9584642 "tryAdvance"
	    cpp_inline public explicit_return_type "boolean"
	    nparams 1
	      param inout name "consumer" explicit_type "T_CONS"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end

	  operation 9584770 "forEachRemaining"
	    cpp_inline public explicit_return_type "void"
	    nparams 1
	      param inout name "consumer" explicit_type "T_CONS"
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end

	  operation 9584898 "trySplit"
	    cpp_inline public explicit_return_type "T_SPLITR"
	    nparams 0
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    java_annotation "@Override
"
	    
	    
	    
	  end
	end
      end

      attribute 2221442 "curChunk"
	protected explicit_type "E"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "We optimistically hope that all the data will fit into the first chunk,
so we try to avoid inflating the spine[] and priorElementCount[] arrays
prematurely.  So methods must be prepared to deal with these arrays being
null.  If spine is non-null, then spineIndex points to the current chunk
within the spine, otherwise it is zero.  The spine and priorElementCount
arrays are always the same size, and for any i <= spineIndex,
priorElementCount[i] is the sum of the sizes of all the prior chunks.

The curChunk pointer is always valid.  The elementIndex is the index of
the next element to be written in curChunk; this may be past the end of
curChunk so we have to check before writing. When we inflate the spine
array, curChunk becomes the first element in it.  When we clear the
buffer, we discard all chunks except the first one, which we clear,
restoring it to the initial single-chunk state.


Chunk that we're currently writing into; may or may not be aliased with
the first element of the spine.


"
      end

      attribute 2221570 "spine"
	protected explicit_type "E"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "All chunks, or null if there is only one chunk.


"
      end

      operation 9579650 "SpinedBuffer"
	cpp_inline package explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Constructs an empty list with the specified initial capacity.

@param  initialCapacity  the initial capacity of the list
@throws IllegalArgumentException if the specified initial capacity
        is negative
"
      end

      operation 9579778 "SpinedBuffer"
	cpp_inline package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Constructs an empty list with an initial capacity of sixteen.
"
      end

      operation 9579906 "capacity"
	cpp_inline protected explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current capacity of the buffer
"
      end

      operation 9580034 "inflateSpine"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 9580162 "ensureCapacity"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param in name "targetSize" explicit_type "long"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Ensure that the buffer has at least capacity to hold the target size
"
      end

      operation 9580290 "increaseCapacity"
	cpp_inline protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force the buffer to increase its capacity.
"
      end

      operation 9580418 "get"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the element at the specified index.
"
      end

      operation 9580546 "copyInto"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "array" explicit_type "E"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copy the elements, starting at the specified offset, into the specified
array.
"
      end

      operation 9580674 "asArray"
	cpp_inline public explicit_return_type "E"
	nparams 1
	  param inout name "arrayFactory" type class_ref 1068034 // IntFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<E[]> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new array using the specified array factory, and copy the
elements into it.
"
      end

      operation 9580802 "clear"
	cpp_inline public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9580930 "iterator"
	cpp_inline public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9581058 "forEach"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "consumer" type class_ref 163458 // Consumer
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9581186 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 9581314 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      attribute 2221698 "SPLITERATOR_CHARACTERISTICS"
	class_attribute const_attribute private explicit_type "int"
	init_value "  Spliterator.SIZED | Spliterator.ORDERED | Spliterator.SUBSIZED"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 9581442 "spliterator"
	cpp_inline public return_type class_ref 184450 // Spliterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a {@link Spliterator} describing the contents of the buffer.
"
      end
    end

    class 1165954 "StreamOpFlag"
      visibility package stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Flags corresponding to characteristics of streams and operations. Flags are
utilized by the stream framework to control, specialize or optimize
computation.

<p>
Stream flags may be used to describe characteristics of several different
entities associated with streams: stream sources, intermediate operations,
and terminal operations.  Not all stream flags are meaningful for all
entities; the following table summarizes which flags are meaningful in what
contexts:

<div>
<table>
  <caption>Type Characteristics</caption>
  <thead class=\"tableSubHeadingColor\">
    <tr>
      <th colspan=\"2\">&nbsp;</th>
      <th>{@code DISTINCT}</th>
      <th>{@code SORTED}</th>
      <th>{@code ORDERED}</th>
      <th>{@code SIZED}</th>
      <th>{@code SHORT_CIRCUIT}</th>
    </tr>
  </thead>
  <tbody>
     <tr>
       <th colspan=\"2\" class=\"tableSubHeadingColor\">Stream source</th>
       <td>Y</td>
       <td>Y</td>
       <td>Y</td>
       <td>Y</td>
       <td>N</td>
     </tr>
     <tr>
       <th colspan=\"2\" class=\"tableSubHeadingColor\">Intermediate operation</th>
       <td>PCI</td>
       <td>PCI</td>
       <td>PCI</td>
       <td>PC</td>
       <td>PI</td>
     </tr>
     <tr>
       <th colspan=\"2\" class=\"tableSubHeadingColor\">Terminal operation</th>
       <td>N</td>
       <td>N</td>
       <td>PC</td>
       <td>N</td>
       <td>PI</td>
     </tr>
  </tbody>
  <tfoot>
      <tr>
        <th class=\"tableSubHeadingColor\" colspan=\"2\">Legend</th>
        <th colspan=\"6\" rowspan=\"7\">&nbsp;</th>
      </tr>
      <tr>
        <th class=\"tableSubHeadingColor\">Flag</th>
        <th class=\"tableSubHeadingColor\">Meaning</th>
        <th colspan=\"6\"></th>
      </tr>
      <tr><td>Y</td><td>Allowed</td></tr>
      <tr><td>N</td><td>Invalid</td></tr>
      <tr><td>P</td><td>Preserves</td></tr>
      <tr><td>C</td><td>Clears</td></tr>
      <tr><td>I</td><td>Injects</td></tr>
  </tfoot>
</table>
</div>

<p>In the above table, \"PCI\" means \"may preserve, clear, or inject\"; \"PC\"
means \"may preserve or clear\", \"PI\" means \"may preserve or inject\", and \"N\"
means \"not valid\".

<p>Stream flags are represented by unioned bit sets, so that a single word
may describe all the characteristics of a given stream entity, and that, for
example, the flags for a stream source can be efficiently combined with the
flags for later operations on that stream.

<p>The bit masks {@link #STREAM_MASK}, {@link #OP_MASK}, and
{@link #TERMINAL_OP_MASK} can be ANDed with a bit set of stream flags to
produce a mask containing only the valid flags for that entity type.

<p>When describing a stream source, one only need describe what
characteristics that stream has; when describing a stream operation, one need
describe whether the operation preserves, injects, or clears that
characteristic.  Accordingly, two bits are used for each flag, so as to allow
representing not only the presence of of a characteristic, but how an
operation modifies that characteristic.  There are two common forms in which
flag bits are combined into an {@code int} bit set.  <em>Stream flags</em>
are a unioned bit set constructed by ORing the enum characteristic values of
{@link #set()} (or, more commonly, ORing the corresponding static named
constants prefixed with {@code IS_}).  <em>Operation flags</em> are a unioned
bit set constructed by ORing the enum characteristic values of {@link #set()}
or {@link #clear()} (to inject, or clear, respectively, the corresponding
flag), or more commonly ORing the corresponding named constants prefixed with
{@code IS_} or {@code NOT_}.  Flags that are not marked with {@code IS_} or
{@code NOT_} are implicitly treated as preserved.  Care must be taken when
combining bitsets that the correct combining operations are applied in the
correct order.

<p>
With the exception of {@link #SHORT_CIRCUIT}, stream characteristics can be
derived from the equivalent {@link java.util.Spliterator} characteristics:
{@link java.util.Spliterator#DISTINCT}, {@link java.util.Spliterator#SORTED},
{@link java.util.Spliterator#ORDERED}, and
{@link java.util.Spliterator#SIZED}.  A spliterator characteristics bit set
can be converted to stream flags using the method
{@link #fromCharacteristics(java.util.Spliterator)} and converted back using
{@link #toCharacteristics(int)}.  (The bit set
{@link #SPLITERATOR_CHARACTERISTICS_MASK} is used to AND with a bit set to
produce a valid spliterator characteristics bit set that can be converted to
stream flags.)

<p>
The source of a stream encapsulates a spliterator. The characteristics of
that source spliterator when transformed to stream flags will be a proper
subset of stream flags of that stream.
For example:
<pre> {@code
    Spliterator s = ...;
    Stream stream = Streams.stream(s);
    flagsFromSplitr = fromCharacteristics(s.characteristics());
    assert(flagsFromSplitr & stream.getStreamFlags() == flagsFromSplitr);
}</pre>

<p>
An intermediate operation, performed on an input stream to create a new
output stream, may preserve, clear or inject stream or operation
characteristics.  Similarly, a terminal operation, performed on an input
stream to produce an output result may preserve, clear or inject stream or
operation characteristics.  Preservation means that if that characteristic
is present on the input, then it is also present on the output.  Clearing
means that the characteristic is not present on the output regardless of the
input.  Injection means that the characteristic is present on the output
regardless of the input.  If a characteristic is not cleared or injected then
it is implicitly preserved.

<p>
A pipeline consists of a stream source encapsulating a spliterator, one or
more intermediate operations, and finally a terminal operation that produces
a result.  At each stage of the pipeline, a combined stream and operation
flags can be calculated, using {@link #combineOpFlags(int, int)}.  Such flags
ensure that preservation, clearing and injecting information is retained at
each stage.

The combined stream and operation flags for the source stage of the pipeline
is calculated as follows:
<pre> {@code
    int flagsForSourceStage = combineOpFlags(sourceFlags, INITIAL_OPS_VALUE);
}</pre>

The combined stream and operation flags of each subsequent intermediate
operation stage in the pipeline is calculated as follows:
<pre> {@code
    int flagsForThisStage = combineOpFlags(flagsForPreviousStage, thisOpFlags);
}</pre>

Finally the flags output from the last intermediate operation of the pipeline
are combined with the operation flags of the terminal operation to produce
the flags output from the pipeline.

<p>Those flags can then be used to apply optimizations. For example, if
{@code SIZED.isKnown(flags)} returns true then the stream size remains
constant throughout the pipeline, this information can be utilized to
pre-allocate data structures and combined with
{@link java.util.Spliterator#SUBSIZED} that information can be utilized to
perform concurrent in-place updates into a shared array.

For specific details see the {@link AbstractPipeline} constructors.

@since 1.8
"
      attribute 2222722 "DISTINCT"
	public type class_ref 1165954 // StreamOpFlag
	cpp_decl ""
	java_decl "  ${@}${name}(0,
               set(Type.SPLITERATOR).set(Type.STREAM).setAndClear(Type.OP)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 2222850 "SORTED"
	public type class_ref 1165954 // StreamOpFlag
	cpp_decl ""
	java_decl "  ${@}${name}(1,
             set(Type.SPLITERATOR).set(Type.STREAM).setAndClear(Type.OP)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Each characteristic takes up 2 bits in a bit set to accommodate
preserving, clearing and setting/injecting information.

This applies to stream flags, intermediate/terminal operation flags, and
combined stream and operation flags. Even though the former only requires
1 bit of information per characteristic, is it more efficient when
combining flags to align set and inject bits.

Characteristics belong to certain types, see the Type enum. Bit masks for
the types are constructed as per the following table:

                       DISTINCT  SORTED  ORDERED  SIZED  SHORT_CIRCUIT
         SPLITERATOR      01       01       01      01        00
              STREAM      01       01       01      01        00
                  OP      11       11       11      10        01
         TERMINAL_OP      00       00       10      00        01
UPSTREAM_TERMINAL_OP      00       00       10      00        00

01 = set/inject
10 = clear
11 = preserve

Construction of the columns is performed using a simple builder for
non-zero values.

 The following flags correspond to characteristics on Spliterator
 and the values MUST be equal.


Characteristic value signifying that, for each pair of
encountered elements in a stream {@code x, y}, {@code !x.equals(y)}.
<p>
A stream may have this value or an intermediate operation can preserve,
clear or inject this value.

 0, 0x00000001
 Matches Spliterator.DISTINCT
"
      end

      attribute 2222978 "ORDERED"
	public type class_ref 1165954 // StreamOpFlag
	cpp_decl ""
	java_decl "  ${@}${name}(2,
              set(Type.SPLITERATOR).set(Type.STREAM).setAndClear(Type.OP).clear(Type.TERMINAL_OP)
                      .clear(Type.UPSTREAM_TERMINAL_OP)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Characteristic value signifying that encounter order follows a natural
sort order of comparable elements.
<p>
A stream can have this value or an intermediate operation can preserve,
clear or inject this value.
<p>
Note: The {@link java.util.Spliterator#SORTED} characteristic can define
a sort order with an associated non-null comparator.  Augmenting flag
state with addition properties such that those properties can be passed
to operations requires some disruptive changes for a singular use-case.
Furthermore, comparing comparators for equality beyond that of identity
is likely to be unreliable.  Therefore the {@code SORTED} characteristic
for a defined non-natural sort order is not mapped internally to the
{@code SORTED} flag.

 1, 0x00000004
 Matches Spliterator.SORTED
"
      end

      attribute 2223106 "SIZED"
	public type class_ref 1165954 // StreamOpFlag
	cpp_decl ""
	java_decl "  ${@}${name}(3,
            set(Type.SPLITERATOR).set(Type.STREAM).clear(Type.OP)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Characteristic value signifying that an encounter order is
defined for stream elements.
<p>
A stream can have this value, an intermediate operation can preserve,
clear or inject this value, or a terminal operation can preserve or clear
this value.

 2, 0x00000010
 Matches Spliterator.ORDERED
"
      end

      attribute 2223234 "SHORT_CIRCUIT"
	public type class_ref 1165954 // StreamOpFlag
	cpp_decl ""
	java_decl "  ${@}${name}(12,
                    set(Type.OP).set(Type.TERMINAL_OP)),${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Characteristic value signifying that size of the stream
is of a known finite size that is equal to the known finite
size of the source spliterator input to the first stream
in the pipeline.
<p>
A stream can have this value or an intermediate operation can preserve or
clear this value.

 3, 0x00000040
 Matches Spliterator.SIZED
"
      end

      class 1166082 "Type"
	visibility package stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 2223362 "SPLITERATOR"
	  public type class_ref 1166082 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The flag is associated with spliterator characteristics.

"
	end

	attribute 2223490 "STREAM"
	  public type class_ref 1166082 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The flag is associated with stream flags.

"
	end

	attribute 2223618 "OP"
	  public type class_ref 1166082 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The flag is associated with intermediate operation flags.

"
	end

	attribute 2223746 "TERMINAL_OP"
	  public type class_ref 1166082 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The flag is associated with terminal operation flags.

"
	end

	attribute 2223874 "UPSTREAM_TERMINAL_OP"
	  public type class_ref 1166082 // Type
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The flag is associated with terminal operation flags that are
propagated upstream across the last stateful operation boundary
"
	end
      end

      attribute 2224002 "SET_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "  0b01"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit pattern for setting/injecting a flag.


"
      end

      attribute 2224130 "CLEAR_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "  0b10"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit pattern for clearing a flag.


"
      end

      attribute 2224258 "PRESERVE_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value "  0b11"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit pattern for preserving a flag.


"
      end

      class 1166210 "MaskBuilder"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3725954 // map (<unidirectional association>)
	  relation 3725954 --->
	    a role_name "map" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Type, Integer> ${name}${value};
"
	      classrelation_ref 3725954 // map (<unidirectional association>)
	    b parent class_ref 130178 // Map
	end

	operation 9585026 "MaskBuilder"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 130178 // Map
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Type, Integer> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9585154 "mask"
	  package return_type class_ref 1166210 // MaskBuilder
	  nparams 2
	    param inout name "t" type class_ref 1166082 // Type
	    param inout name "i" type class_ref 137602 // Integer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9585282 "set"
	  package return_type class_ref 1166210 // MaskBuilder
	  nparams 1
	    param inout name "t" type class_ref 1166082 // Type
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9585410 "clear"
	  package return_type class_ref 1166210 // MaskBuilder
	  nparams 1
	    param inout name "t" type class_ref 1166082 // Type
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9585538 "setAndClear"
	  package return_type class_ref 1166210 // MaskBuilder
	  nparams 1
	    param inout name "t" type class_ref 1166082 // Type
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9585666 "build"
	  package return_type class_ref 130178 // Map
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Type, Integer> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 9585794 "set"
	class_operation private return_type class_ref 1166210 // MaskBuilder
	nparams 1
	  param inout name "t" type class_ref 1166082 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3726082 // maskTable (<unidirectional association>)
	relation 3726082 --->
	  a role_name "maskTable" const_relation private
	    comment "

The mask table for a flag, this is used to determine if a flag
corresponds to a certain flag type and for creating mask constants.


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Type, Integer> ${name}${value};
"
	    classrelation_ref 3726082 // maskTable (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      attribute 2224386 "bitPosition"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit position in the bit mask.


"
      end

      attribute 2224514 "set"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The set 2 bit set offset at the bit position.


"
      end

      attribute 2224642 "clear"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The clear 2 bit set offset at the bit position.


"
      end

      attribute 2224770 "preserve"
	const_attribute private explicit_type "int"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The preserve 2 bit set offset at the bit position.


"
      end

      operation 9585922 "StreamOpFlag"
	private explicit_return_type ""
	nparams 2
	  param in name "position" explicit_type "int"
	  param inout name "maskBuilder" type class_ref 1166210 // MaskBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9586050 "set"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the bitmap associated with setting this characteristic.

@return the bitmap for setting this characteristic
"
      end

      operation 9586178 "clear"
	package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the bitmap associated with clearing this characteristic.

@return the bitmap for clearing this characteristic
"
      end

      operation 9586306 "isStreamFlag"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this flag is a stream-based flag.

@return true if a stream-based flag, otherwise false.
"
      end

      operation 9586434 "isKnown"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this flag is set on stream flags, injected on operation flags,
and injected on combined stream and operation flags.

@param flags the stream flags, operation flags, or combined stream and
       operation flags
@return true if this flag is known, otherwise false.
"
      end

      operation 9586562 "isCleared"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this flag is cleared on operation flags or combined stream and
operation flags.

@param flags the operation flags or combined stream and operations flags.
@return true if this flag is preserved, otherwise false.
"
      end

      operation 9586690 "isPreserved"
	package explicit_return_type "boolean"
	nparams 1
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this flag is preserved on combined stream and operation flags.

@param flags the combined stream and operations flags.
@return true if this flag is preserved, otherwise false.
"
      end

      operation 9586818 "canSet"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "t" type class_ref 1166082 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines if this flag can be set for a flag type.

@param t the flag type.
@return true if this flag can be set for the flag type, otherwise false.
"
      end

      attribute 2224898 "SPLITERATOR_CHARACTERISTICS_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "  createMask(Type.SPLITERATOR)"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit mask for spliterator characteristics


"
      end

      attribute 2225026 "STREAM_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "  createMask(Type.STREAM)"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit mask for source stream flags.


"
      end

      attribute 2225154 "OP_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "  createMask(Type.OP)"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit mask for intermediate operation flags.


"
      end

      attribute 2225282 "TERMINAL_OP_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "  createMask(Type.TERMINAL_OP)"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit mask for terminal operation flags.


"
      end

      attribute 2225410 "UPSTREAM_TERMINAL_OP_MASK"
	class_attribute const_attribute package explicit_type "int"
	init_value "  createMask(Type.UPSTREAM_TERMINAL_OP)"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit mask for upstream terminal operation flags.


"
      end

      operation 9586946 "createMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "t" type class_ref 1166082 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2225538 "FLAG_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value "  createFlagMask()"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Complete flag mask.


"
      end

      operation 9587074 "createFlagMask"
	class_operation private explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2225666 "FLAG_MASK_IS"
	class_attribute const_attribute private explicit_type "int"
	init_value "  STREAM_MASK"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag mask for stream flags that are set.


"
      end

      attribute 2225794 "FLAG_MASK_NOT"
	class_attribute const_attribute private explicit_type "int"
	init_value "  STREAM_MASK << 1"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag mask for stream flags that are cleared.


"
      end

      attribute 2225922 "INITIAL_OPS_VALUE"
	class_attribute const_attribute package explicit_type "int"
	init_value "  FLAG_MASK_IS | FLAG_MASK_NOT"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The initial value to be combined with the stream flags of the first
stream in the pipeline.


"
      end

      attribute 2226050 "IS_DISTINCT"
	class_attribute const_attribute package explicit_type "int"
	init_value "  DISTINCT.set"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to set or inject {@link #DISTINCT}.


"
      end

      attribute 2226178 "NOT_DISTINCT"
	class_attribute const_attribute package explicit_type "int"
	init_value "  DISTINCT.clear"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to clear {@link #DISTINCT}.


"
      end

      attribute 2226306 "IS_SORTED"
	class_attribute const_attribute package explicit_type "int"
	init_value "  SORTED.set"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to set or inject {@link #SORTED}.


"
      end

      attribute 2226434 "NOT_SORTED"
	class_attribute const_attribute package explicit_type "int"
	init_value "  SORTED.clear"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to clear {@link #SORTED}.


"
      end

      attribute 2226562 "IS_ORDERED"
	class_attribute const_attribute package explicit_type "int"
	init_value "  ORDERED.set"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to set or inject {@link #ORDERED}.


"
      end

      attribute 2226690 "NOT_ORDERED"
	class_attribute const_attribute package explicit_type "int"
	init_value "  ORDERED.clear"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to clear {@link #ORDERED}.


"
      end

      attribute 2226818 "IS_SIZED"
	class_attribute const_attribute package explicit_type "int"
	init_value "  SIZED.set"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to set {@link #SIZED}.


"
      end

      attribute 2226946 "NOT_SIZED"
	class_attribute const_attribute package explicit_type "int"
	init_value "  SIZED.clear"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to clear {@link #SIZED}.


"
      end

      attribute 2227074 "IS_SHORT_CIRCUIT"
	class_attribute const_attribute package explicit_type "int"
	init_value "  SHORT_CIRCUIT.set"
	stereotype "attribute"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The bit value to inject {@link #SHORT_CIRCUIT}.


"
      end

      operation 9587202 "getMask"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "flags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9587330 "combineOpFlags"
	class_operation package explicit_return_type "int"
	nparams 2
	  param in name "newStreamOrOpFlags" explicit_type "int"
	  param in name "prevCombOpFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines stream or operation flags with previously combined stream and
operation flags to produce updated combined stream and operation flags.
<p>
A flag set on stream flags or injected on operation flags,
and injected combined stream and operation flags,
will be injected on the updated combined stream and operation flags.

<p>
A flag set on stream flags or injected on operation flags,
and cleared on the combined stream and operation flags,
will be cleared on the updated combined stream and operation flags.

<p>
A flag set on the stream flags or injected on operation flags,
and preserved on the combined stream and operation flags,
will be injected on the updated combined stream and operation flags.

<p>
A flag not set on the stream flags or cleared/preserved on operation
flags, and injected on the combined stream and operation flags,
will be injected on the updated combined stream and operation flags.

<p>
A flag not set on the stream flags or cleared/preserved on operation
flags, and cleared on the combined stream and operation flags,
will be cleared on the updated combined stream and operation flags.

<p>
A flag not set on the stream flags,
and preserved on the combined stream and operation flags
will be preserved on the updated combined stream and operation flags.

<p>
A flag cleared on operation flags,
and preserved on the combined stream and operation flags
will be cleared on the updated combined stream and operation flags.

<p>
A flag preserved on operation flags,
and preserved on the combined stream and operation flags
will be preserved on the updated combined stream and operation flags.

@param newStreamOrOpFlags the stream or operation flags.
@param prevCombOpFlags previously combined stream and operation flags.
       The value {#link INITIAL_OPS_VALUE} must be used as the seed value.
@return the updated combined stream and operation flags.
"
      end

      operation 9587458 "toStreamFlags"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "combOpFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts combined stream and operation flags to stream flags.

<p>Each flag injected on the combined stream and operation flags will be
set on the stream flags.

@param combOpFlags the combined stream and operation flags.
@return the stream flags.
"
      end

      operation 9587586 "toCharacteristics"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "streamFlags" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts stream flags to a spliterator characteristic bit set.

@param streamFlags the stream flags.
@return the spliterator characteristic bit set.
"
      end

      operation 9587714 "fromCharacteristics"
	class_operation package explicit_return_type "int"
	nparams 1
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a spliterator characteristic bit set to stream flags.

@implSpec
If the spliterator is naturally {@code SORTED} (the associated
{@code Comparator} is {@code null}) then the characteristic is converted
to the {@link #SORTED} flag, otherwise the characteristic is not
converted.

@param spliterator the spliterator from which to obtain characteristic
       bit set.
@return the stream flags.
"
      end

      operation 9587842 "fromCharacteristics"
	class_operation package explicit_return_type "int"
	nparams 1
	  param in name "characteristics" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a spliterator characteristic bit set to stream flags.

@param characteristics the spliterator characteristic bit set.
@return the stream flags.
"
      end
    end

    class 1166338 "Streams"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility methods for operating on and creating streams.

<p>Unless otherwise stated, streams are created as sequential streams.  A
sequential stream can be transformed into a parallel stream by calling the
{@code parallel()} method on the created stream.

@since 1.8
"
      operation 9587970 "Streams"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 3726210 // NONE (<unidirectional association>)
	relation 3726210 --->
	  a role_name "NONE" init_value " new Object()" class_relation const_relation package
	    comment "
An object instance representing no value, that cannot be an actual
data element of a stream.  Used when processing streams that can contain
{@code null} elements to distinguish between a {@code null} value and no
value.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3726210 // NONE (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      class 1166466 "RangeIntSpliterator"
	visibility package 
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3726338 // <realization>
	  relation 3726338 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3726338 // <realization>
	    b parent class_ref 376578 // OfInt
	end

	attribute 2227202 "from"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Can never be greater that upTo, this avoids overflow if upper bound
 is Integer.MAX_VALUE
 All elements are traversed if from == upTo & last == 0
"
	end

	attribute 2227330 "upTo"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2227458 "last"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " 1 if the range is closed and the last element has not been traversed
 Otherwise, 0 if the range is open, or is a closed range and all
 elements have been traversed
"
	end

	operation 9588098 "RangeIntSpliterator"
	  package explicit_return_type ""
	  nparams 3
	    param in name "from" explicit_type "int"
	    param in name "upTo" explicit_type "int"
	    param inout name "closed" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9588226 "RangeIntSpliterator"
	  private explicit_return_type ""
	  nparams 3
	    param in name "from" explicit_type "int"
	    param in name "upTo" explicit_type "int"
	    param in name "last" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9588354 "tryAdvance"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "consumer" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9588482 "forEachRemaining"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9588610 "estimateSize"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9588738 "characteristics"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9588866 "getComparator"
	  public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super Integer> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9588994 "trySplit"
	  public return_type class_ref 376578 // OfInt
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	attribute 2227586 "BALANCED_SPLIT_THRESHOLD"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 1 << 24"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The spliterator size below which the spliterator will be split
at the mid-point to produce balanced splits. Above this size the
spliterator will be split at a ratio of
1:(RIGHT_BALANCED_SPLIT_RATIO - 1)
to produce right-balanced splits.

<p>Such splitting ensures that for very large ranges that the left
side of the range will more likely be processed at a lower-depth
than a balanced tree at the expense of a higher-depth for the right
side of the range.

<p>This is optimized for cases such as IntStream.ints() that is
implemented as range of 0 to Integer.MAX_VALUE but is likely to be
augmented with a limit operation that limits the number of elements
to a count lower than this threshold.

"
	end

	attribute 2227714 "RIGHT_BALANCED_SPLIT_RATIO"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 1 << 3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The split ratio of the left and right split when the spliterator
size is above BALANCED_SPLIT_THRESHOLD.

"
	end

	operation 9589122 "splitPoint"
	  private explicit_return_type "int"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1166594 "RangeLongSpliterator"
	visibility package 
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3726466 // <realization>
	  relation 3726466 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3726466 // <realization>
	    b parent class_ref 376834 // OfLong
	end

	attribute 2227842 "from"
	  private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Can never be greater that upTo, this avoids overflow if upper bound
 is Long.MAX_VALUE
 All elements are traversed if from == upTo & last == 0
"
	end

	attribute 2227970 "upTo"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2228098 "last"
	  private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " 1 if the range is closed and the last element has not been traversed
 Otherwise, 0 if the range is open, or is a closed range and all
 elements have been traversed
"
	end

	operation 9589250 "RangeLongSpliterator"
	  package explicit_return_type ""
	  nparams 3
	    param in name "from" explicit_type "long"
	    param in name "upTo" explicit_type "long"
	    param inout name "closed" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9589378 "RangeLongSpliterator"
	  private explicit_return_type ""
	  nparams 3
	    param in name "from" explicit_type "long"
	    param in name "upTo" explicit_type "long"
	    param in name "last" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9589506 "tryAdvance"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "consumer" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9589634 "forEachRemaining"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9589762 "estimateSize"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9589890 "characteristics"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9590018 "getComparator"
	  public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super Long> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9590146 "trySplit"
	  public return_type class_ref 376834 // OfLong
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	attribute 2228226 "BALANCED_SPLIT_THRESHOLD"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1 << 24"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The spliterator size below which the spliterator will be split
at the mid-point to produce balanced splits. Above this size the
spliterator will be split at a ratio of
1:(RIGHT_BALANCED_SPLIT_RATIO - 1)
to produce right-balanced splits.

<p>Such splitting ensures that for very large ranges that the left
side of the range will more likely be processed at a lower-depth
than a balanced tree at the expense of a higher-depth for the right
side of the range.

<p>This is optimized for cases such as LongStream.longs() that is
implemented as range of 0 to Long.MAX_VALUE but is likely to be
augmented with a limit operation that limits the number of elements
to a count lower than this threshold.

"
	end

	attribute 2228354 "RIGHT_BALANCED_SPLIT_RATIO"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1 << 3"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The split ratio of the left and right split when the spliterator
size is above BALANCED_SPLIT_THRESHOLD.

"
	end

	operation 9590274 "splitPoint"
	  private explicit_return_type "long"
	  nparams 1
	    param in name "size" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 1166722 "AbstractStreamBuilderImpl"
	abstract visibility private 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "S" type "" explicit_default_value ""
	  explicit_extends "Spliterator<T>"
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3726594 // <realization>
	  relation 3726594 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3726594 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2228482 "count"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " >= 0 when building, < 0 when built
 -1 == no elements
 -2 == one element, held by first
 -3 == two or more elements, held by buffer
"
	end

	operation 9590402 "trySplit"
	  cpp_inline public explicit_return_type "S"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Spliterator implementation for 0 or 1 element
 count == -1 for no elements
 count == -2 for one element held by first"
	end

	operation 9590530 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9590658 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1166850 "StreamBuilderImpl"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1166722 // AbstractStreamBuilderImpl
	  rank 0 explicit_value ""
	actual class class_ref 1166722 // AbstractStreamBuilderImpl
	  rank 1 explicit_value ""
	actual class class_ref 184706 // Stream
	  rank 0 explicit_value ""
	actual class class_ref 1162242 // Builder
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3726722 // <realization>
	  relation 3726722 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3726722 // <realization>
	    b parent class_ref 1166722 // AbstractStreamBuilderImpl
	end

	classrelation 3726850 // <realization>
	  relation 3726850 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3726850 // <realization>
	    b parent class_ref 1162242 // Builder
	end

	attribute 2228610 "first"
	  package explicit_type "T"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The first element in the stream
 valid if count == 1
"
	end

	classrelation 3726978 // buffer (<unidirectional association>)
	  relation 3726978 --->
	    a role_name "buffer" package
	      comment " The first and subsequent elements in the stream
 non-null if count == 2
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 3726978 // buffer (<unidirectional association>)
	    b parent class_ref 1164418 // SpinedBuffer
	end

	operation 9590786 "StreamBuilderImpl"
	  cpp_inline package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for building a stream of 0 or more elements.
"
	end

	operation 9590914 "StreamBuilderImpl"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "t" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for a singleton stream.

@param t the single element
"
	end

	operation 9591042 "accept"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "t" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " StreamBuilder implementation"
	end

	operation 9591170 "add"
	  cpp_inline public return_type class_ref 1162242 // Builder
	  nparams 1
	    param inout name "t" explicit_type "T"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9591298 "build"
	  cpp_inline public return_type class_ref 184706 // Stream
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9591426 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Spliterator implementation for 0 or 1 element
 count == -1 for no elements
 count == -2 for one element held by first"
	end

	operation 9591554 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1166978 "IntStreamBuilderImpl"
	visibility package 
	nactuals 3
	actual class class_ref 1166722 // AbstractStreamBuilderImpl
	  rank 0 explicit_value ""
	actual class class_ref 1166722 // AbstractStreamBuilderImpl
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3727106 // <realization>
	  relation 3727106 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3727106 // <realization>
	    b parent class_ref 1166722 // AbstractStreamBuilderImpl
	end

	classrelation 3727234 // <realization>
	  relation 3727234 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3727234 // <realization>
	    b parent class_ref 1158658 // Builder
	end

	classrelation 3727362 // <realization>
	  relation 3727362 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3727362 // <realization>
	    b parent class_ref 376578 // OfInt
	end

	attribute 2228738 "first"
	  package explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The first element in the stream
 valid if count == 1
"
	end

	classrelation 3727490 // buffer (<unidirectional association>)
	  relation 3727490 --->
	    a role_name "buffer" package
	      comment " The first and subsequent elements in the stream
 non-null if count == 2
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3727490 // buffer (<unidirectional association>)
	    b parent class_ref 1164546 // OfInt
	end

	operation 9591682 "IntStreamBuilderImpl"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for building a stream of 0 or more elements.
"
	end

	operation 9591810 "IntStreamBuilderImpl"
	  package explicit_return_type ""
	  nparams 1
	    param in name "t" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for a singleton stream.

@param t the single element
"
	end

	operation 9591938 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " StreamBuilder implementation"
	end

	operation 9592066 "build"
	  public return_type class_ref 429570 // IntStream
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9592194 "tryAdvance"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Spliterator implementation for 0 or 1 element
 count == -1 for no elements
 count == -2 for one element held by first"
	end

	operation 9592322 "forEachRemaining"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1167106 "LongStreamBuilderImpl"
	visibility package 
	nactuals 3
	actual class class_ref 1166722 // AbstractStreamBuilderImpl
	  rank 0 explicit_value ""
	actual class class_ref 1166722 // AbstractStreamBuilderImpl
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3727618 // <realization>
	  relation 3727618 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3727618 // <realization>
	    b parent class_ref 1166722 // AbstractStreamBuilderImpl
	end

	classrelation 3727746 // <realization>
	  relation 3727746 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3727746 // <realization>
	    b parent class_ref 1159298 // Builder
	end

	classrelation 3727874 // <realization>
	  relation 3727874 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3727874 // <realization>
	    b parent class_ref 376834 // OfLong
	end

	attribute 2228866 "first"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The first element in the stream
 valid if count == 1
"
	end

	classrelation 3728002 // buffer (<unidirectional association>)
	  relation 3728002 --->
	    a role_name "buffer" package
	      comment " The first and subsequent elements in the stream
 non-null if count == 2
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3728002 // buffer (<unidirectional association>)
	    b parent class_ref 1165058 // OfLong
	end

	operation 9592450 "LongStreamBuilderImpl"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for building a stream of 0 or more elements.
"
	end

	operation 9592578 "LongStreamBuilderImpl"
	  package explicit_return_type ""
	  nparams 1
	    param in name "t" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for a singleton stream.

@param t the single element
"
	end

	operation 9592706 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " StreamBuilder implementation"
	end

	operation 9592834 "build"
	  public return_type class_ref 1023490 // LongStream
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9592962 "tryAdvance"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Spliterator implementation for 0 or 1 element
 count == -1 for no elements
 count == -2 for one element held by first"
	end

	operation 9593090 "forEachRemaining"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1167234 "DoubleStreamBuilderImpl"
	visibility package 
	nactuals 3
	actual class class_ref 1166722 // AbstractStreamBuilderImpl
	  rank 0 explicit_value ""
	actual class class_ref 1166722 // AbstractStreamBuilderImpl
	  rank 1 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3728130 // <realization>
	  relation 3728130 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3728130 // <realization>
	    b parent class_ref 1166722 // AbstractStreamBuilderImpl
	end

	classrelation 3728258 // <realization>
	  relation 3728258 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3728258 // <realization>
	    b parent class_ref 1156098 // Builder
	end

	classrelation 3728386 // <realization>
	  relation 3728386 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3728386 // <realization>
	    b parent class_ref 377090 // OfDouble
	end

	attribute 2228994 "first"
	  package explicit_type "double"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The first element in the stream
 valid if count == 1
"
	end

	classrelation 3728514 // buffer (<unidirectional association>)
	  relation 3728514 --->
	    a role_name "buffer" package
	      comment " The first and subsequent elements in the stream
 non-null if count == 2
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3728514 // buffer (<unidirectional association>)
	    b parent class_ref 1165570 // OfDouble
	end

	operation 9593218 "DoubleStreamBuilderImpl"
	  package explicit_return_type ""
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for building a stream of 0 or more elements.
"
	end

	operation 9593346 "DoubleStreamBuilderImpl"
	  package explicit_return_type ""
	  nparams 1
	    param in name "t" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructor for a singleton stream.

@param t the single element
"
	end

	operation 9593474 "accept"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "t" explicit_type "double"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " StreamBuilder implementation"
	end

	operation 9593602 "build"
	  public return_type class_ref 1023618 // DoubleStream
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9593730 "tryAdvance"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "action" type class_ref 377346 // DoubleConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment " Spliterator implementation for 0 or 1 element
 count == -1 for no elements
 count == -2 for one element held by first"
	end

	operation 9593858 "forEachRemaining"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "action" type class_ref 377346 // DoubleConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1167362 "ConcatSpliterator"
	abstract visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "T_SPLITR" type "" explicit_default_value ""
	  explicit_extends "Spliterator<T>"
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3728642 // <realization>
	  relation 3728642 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3728642 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2229122 "aSpliterator"
	  const_attribute protected explicit_type "T_SPLITR"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2229250 "bSpliterator"
	  const_attribute protected explicit_type "T_SPLITR"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 2229378 "beforeSplit"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " True when no split has occurred, otherwise false
"
	end

	attribute 2229506 "unsized"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Never read after splitting
"
	end

	operation 9593986 "ConcatSpliterator"
	  cpp_inline public explicit_return_type ""
	  nparams 2
	    param inout name "aSpliterator" explicit_type "T_SPLITR"
	    param inout name "bSpliterator" explicit_type "T_SPLITR"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9594114 "trySplit"
	  cpp_inline public explicit_return_type "T_SPLITR"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9594242 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9594370 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9594498 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9594626 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9594754 "getComparator"
	  cpp_inline public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	class 1167490 "OfRef"
	  visibility package 
	  nformals 1
	  formal name "T" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 2
	  actual class class_ref 1167362 // ConcatSpliterator
	    rank 0 explicit_value ""
	  actual class class_ref 1167362 // ConcatSpliterator
	    rank 1 explicit_value ""
	  cpp_decl ""
	  static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  mysql_decl ""
	  
	  classrelation 3728770 // <realization>
	    relation 3728770 -_-|>
	      stereotype "bind"
	      a public
		java "${type}"
		classrelation_ref 3728770 // <realization>
	      b parent class_ref 1167362 // ConcatSpliterator
	  end

	  operation 9594882 "OfRef"
	    cpp_inline package explicit_return_type ""
	    nparams 2
	      param inout name "aSpliterator" type class_ref 184450 // Spliterator
	      param inout name "bSpliterator" type class_ref 184450 // Spliterator
	    
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end
      end
    end

    class 1167618 "StreamSpliterators"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Spliterator implementations for wrapping and delegating spliterators, used
in the implementation of the {@link Stream#spliterator()} method.

@since 1.8
"
      class 1167746 "AbstractWrappingSpliterator"
	abstract visibility private 
	nformals 3
	formal name "P_IN" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "P_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "T_BUFFER" type "" explicit_default_value ""
	  extends class_ref 1154946 // AbstractSpinedBuffer
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3728898 // <realization>
	  relation 3728898 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3728898 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	attribute 2230146 "isParallel"
	  const_attribute package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " @@@ Detect if stateful operations are present or not
     If not then can split otherwise cannot

True if this spliterator supports splitting

"
	end

	classrelation 3729026 // ph (<unidirectional association>)
	  relation 3729026 --->
	    a role_name "ph" const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_OUT> ${name}${value};
"
	      classrelation_ref 3729026 // ph (<unidirectional association>)
	    b parent class_ref 1153794 // PipelineHelper
	end

	classrelation 3729154 // spliteratorSupplier (<unidirectional association>)
	  relation 3729154 --->
	    a role_name "spliteratorSupplier" private
	      comment "
Supplier for the source spliterator.  Client provides either a
spliterator or a supplier.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Spliterator<P_IN>> ${name}${value};
"
	      classrelation_ref 3729154 // spliteratorSupplier (<unidirectional association>)
	    b parent class_ref 933634 // Supplier
	end

	classrelation 3729282 // spliterator (<unidirectional association>)
	  relation 3729282 --->
	    a role_name "spliterator" package
	      comment "
Source spliterator.  Either provided from client or obtained from
supplier.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_IN> ${name}${value};
"
	      classrelation_ref 3729282 // spliterator (<unidirectional association>)
	    b parent class_ref 184450 // Spliterator
	end

	classrelation 3729410 // bufferSink (<unidirectional association>)
	  relation 3729410 --->
	    a role_name "bufferSink" package
	      comment "
Sink chain for the downstream stages of the pipeline, ultimately
leading to the buffer. Used during partial traversal.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<P_IN> ${name}${value};
"
	      classrelation_ref 3729410 // bufferSink (<unidirectional association>)
	    b parent class_ref 1154050 // Sink
	end

	classrelation 3729538 // pusher (<unidirectional association>)
	  relation 3729538 --->
	    a role_name "pusher" package
	      comment "
A function that advances one element of the spliterator, pushing
it to bufferSink.  Returns whether any elements were processed.
Used during partial traversal.

"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3729538 // pusher (<unidirectional association>)
	    b parent class_ref 1132674 // BooleanSupplier
	end

	attribute 2230274 "nextToConsume"
	  package explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Next element to consume from the buffer, used during partial traversal 
"
	end

	attribute 2230402 "buffer"
	  package explicit_type "T_BUFFER"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " Buffer into which elements are pushed.  Used during partial traversal. 
"
	end

	attribute 2230530 "finished"
	  package explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "True if full traversal has occurred (with possible cancelation).
If doing a partial traversal, there may be still elements in buffer.

"
	end

	operation 9595010 "AbstractWrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "spliteratorSupplier" type class_ref 933634 // Supplier
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct an AbstractWrappingSpliterator from a
{@code Supplier<Spliterator>}.
"
	end

	operation 9595138 "AbstractWrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct an AbstractWrappingSpliterator from a
{@code Spliterator}.
"
	end

	operation 9595266 "init"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called before advancing to set up spliterator, if needed.
"
	end

	operation 9595394 "doAdvance"
	  cpp_inline package explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get an element from the source, pushing it into the sink chain,
setting up the buffer if needed
@return whether there are elements to consume from the buffer
"
	end

	operation 9595522 "wrap"
	  abstract cpp_inline package return_type class_ref 1167746 // AbstractWrappingSpliterator
	  nparams 1
	    param inout name "s" type class_ref 184450 // Spliterator
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_IN, P_OUT, ?> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Invokes the shape-specific constructor with the provided arguments
and returns the result.
"
	end

	operation 9595650 "initPartialTraversalState"
	  abstract cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Initializes buffer, sink chain, and pusher for a shape-specific
implementation.
"
	end

	operation 9595778 "trySplit"
	  cpp_inline public return_type class_ref 184450 // Spliterator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9595906 "fillBuffer"
	  cpp_inline private explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "If the buffer is empty, push elements into the sink chain until
the source is empty or cancellation is requested.
@return whether there are elements to consume from the buffer
"
	end

	operation 9596034 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9596162 "getExactSizeIfKnown"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9596290 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9596418 "getComparator"
	  cpp_inline public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super P_OUT> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9596546 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1167874 "WrappingSpliterator"
	visibility package 
	nformals 2
	formal name "P_IN" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "P_OUT" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 3
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 0 explicit_value ""
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 1 explicit_value ""
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3729666 // <realization>
	  relation 3729666 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3729666 // <realization>
	    b parent class_ref 1167746 // AbstractWrappingSpliterator
	end

	operation 9596674 "WrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "supplier" type class_ref 933634 // Supplier
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9596802 "WrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<P_OUT> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9596930 "wrap"
	  cpp_inline package return_type class_ref 1167874 // WrappingSpliterator
	  nparams 1
	    param inout name "s" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_IN, P_OUT> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9597058 "initPartialTraversalState"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9597186 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9597314 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super P_OUT> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1168002 "IntWrappingSpliterator"
	visibility package 
	nformals 1
	formal name "P_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 0 explicit_value ""
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 1 explicit_value ""
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 2 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3729794 // <realization>
	  relation 3729794 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3729794 // <realization>
	    b parent class_ref 1167746 // AbstractWrappingSpliterator
	end

	classrelation 3729922 // <realization>
	  relation 3729922 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3729922 // <realization>
	    b parent class_ref 376578 // OfInt
	end

	operation 9597442 "IntWrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "supplier" type class_ref 933634 // Supplier
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Integer> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9597570 "IntWrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Integer> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9597698 "wrap"
	  cpp_inline package return_type class_ref 1167746 // AbstractWrappingSpliterator
	  nparams 1
	    param inout name "s" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_IN, Integer, ?> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9597826 "initPartialTraversalState"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9597954 "trySplit"
	  cpp_inline public return_type class_ref 376578 // OfInt
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9598082 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "consumer" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9598210 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 376706 // IntConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1168130 "LongWrappingSpliterator"
	visibility package 
	nformals 1
	formal name "P_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 0 explicit_value ""
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 1 explicit_value ""
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 2 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3730050 // <realization>
	  relation 3730050 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3730050 // <realization>
	    b parent class_ref 1167746 // AbstractWrappingSpliterator
	end

	classrelation 3730178 // <realization>
	  relation 3730178 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3730178 // <realization>
	    b parent class_ref 376834 // OfLong
	end

	operation 9598338 "LongWrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "supplier" type class_ref 933634 // Supplier
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Long> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9598466 "LongWrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Long> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9598594 "wrap"
	  cpp_inline package return_type class_ref 1167746 // AbstractWrappingSpliterator
	  nparams 1
	    param inout name "s" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_IN, Long, ?> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9598722 "initPartialTraversalState"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9598850 "trySplit"
	  cpp_inline public return_type class_ref 376834 // OfLong
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9598978 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "consumer" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9599106 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 376962 // LongConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1168258 "DoubleWrappingSpliterator"
	visibility package 
	nformals 1
	formal name "P_IN" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 0 explicit_value ""
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 1 explicit_value ""
	actual class class_ref 1167746 // AbstractWrappingSpliterator
	  rank 2 explicit_value ""
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3730306 // <realization>
	  relation 3730306 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3730306 // <realization>
	    b parent class_ref 1167746 // AbstractWrappingSpliterator
	end

	classrelation 3730434 // <realization>
	  relation 3730434 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3730434 // <realization>
	    b parent class_ref 377090 // OfDouble
	end

	operation 9599234 "DoubleWrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "supplier" type class_ref 933634 // Supplier
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Double> ${p0}, ${t1}<Spliterator<P_IN>> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9599362 "DoubleWrappingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 3
	    param inout name "ph" type class_ref 1153794 // PipelineHelper
	    param inout name "spliterator" type class_ref 184450 // Spliterator
	    param inout name "parallel" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<Double> ${p0}, ${t1}<P_IN> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9599490 "wrap"
	  cpp_inline package return_type class_ref 1167746 // AbstractWrappingSpliterator
	  nparams 1
	    param inout name "s" type class_ref 184450 // Spliterator
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<P_IN, Double, ?> ${name}${(}${t0}<P_IN> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9599618 "initPartialTraversalState"
	  cpp_inline package explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9599746 "trySplit"
	  cpp_inline public return_type class_ref 377090 // OfDouble
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9599874 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "consumer" type class_ref 377346 // DoubleConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9600002 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 377346 // DoubleConsumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1168386 "DelegatingSpliterator"
	visibility package 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "T_SPLITR" type "" explicit_default_value ""
	  explicit_extends "Spliterator<T>"
	nactuals 1
	actual class class_ref 184450 // Spliterator
	  rank 0 explicit_value ""
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3730562 // <realization>
	  relation 3730562 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3730562 // <realization>
	    b parent class_ref 184450 // Spliterator
	end

	classrelation 3730690 // supplier (<unidirectional association>)
	  relation 3730690 --->
	    a role_name "supplier" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends T_SPLITR> ${name}${value};
"
	      classrelation_ref 3730690 // supplier (<unidirectional association>)
	    b parent class_ref 933634 // Supplier
	end

	attribute 2230658 "s"
	  private explicit_type "T_SPLITR"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 9600130 "DelegatingSpliterator"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "supplier" type class_ref 933634 // Supplier
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends T_SPLITR> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9600258 "get"
	  cpp_inline package explicit_return_type "T_SPLITR"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 9600386 "trySplit"
	  cpp_inline public explicit_return_type "T_SPLITR"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 9600514 "tryAdvance"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9600642 "forEachRemaining"
	  cpp_inline public explicit_return_type "void"
	  nparams 1
	    param inout name "consumer" type class_ref 163458 // Consumer
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9600770 "estimateSize"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9600898 "characteristics"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9601026 "getComparator"
	  cpp_inline public return_type class_ref 184962 // Comparator
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9601154 "getExactSizeIfKnown"
	  cpp_inline public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 9601282 "toString"
	  cpp_inline public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1168514 "StreamSupport"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Low-level utility methods for creating and manipulating streams.

<p>This class is mostly for library writers presenting stream views
of data structures; most static stream methods intended for end users are in
the various {@code Stream} classes.

@since 1.8
"
      operation 9601410 "StreamSupport"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Suppresses default constructor, ensuring non-instantiability.
"
      end

      operation 9601538 "stream"
	class_operation public return_type class_ref 184706 // Stream
	nparams 2
	  param inout name "spliterator" type class_ref 184450 // Spliterator
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new sequential or parallel {@code Stream} from a
{@code Spliterator}.

<p>The spliterator is only traversed, split, or queried for estimated
size after the terminal operation of the stream pipeline commences.

<p>It is strongly recommended the spliterator report a characteristic of
{@code IMMUTABLE} or {@code CONCURRENT}, or be
<a href=\"../Spliterator.html#binding\">late-binding</a>.  Otherwise,
{@link #stream(java.util.function.Supplier, int, boolean)} should be used
to reduce the scope of potential interference with the source.  See
<a href=\"package-summary.html#NonInterference\">Non-Interference</a> for
more details.

@param <T> the type of stream elements
@param spliterator a {@code Spliterator} describing the stream elements
@param parallel if {@code true} then the returned stream is a parallel
       stream; if {@code false} the returned stream is a sequential
       stream.
@return a new sequential or parallel {@code Stream}
"
      end

      operation 9601666 "stream"
	class_operation public return_type class_ref 184706 // Stream
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param in name "characteristics" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? extends Spliterator<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new sequential or parallel {@code Stream} from a
{@code Supplier} of {@code Spliterator}.

<p>The {@link Supplier#get()} method will be invoked on the supplier no
more than once, and only after the terminal operation of the stream pipeline
commences.

<p>For spliterators that report a characteristic of {@code IMMUTABLE}
or {@code CONCURRENT}, or that are
<a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely
more efficient to use {@link #stream(java.util.Spliterator, boolean)}
instead.
<p>The use of a {@code Supplier} in this form provides a level of
indirection that reduces the scope of potential interference with the
source.  Since the supplier is only invoked after the terminal operation
commences, any modifications to the source up to the start of the
terminal operation are reflected in the stream result.  See
<a href=\"package-summary.html#NonInterference\">Non-Interference</a> for
more details.

@param <T> the type of stream elements
@param supplier a {@code Supplier} of a {@code Spliterator}
@param characteristics Spliterator characteristics of the supplied
       {@code Spliterator}.  The characteristics must be equal to
       {@code supplier.get().characteristics()}, otherwise undefined
       behavior may occur when terminal operation commences.
@param parallel if {@code true} then the returned stream is a parallel
       stream; if {@code false} the returned stream is a sequential
       stream.
@return a new sequential or parallel {@code Stream}
@see #stream(java.util.Spliterator, boolean)
"
      end

      operation 9601794 "intStream"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 2
	  param inout name "spliterator" type class_ref 376578 // OfInt
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new sequential or parallel {@code IntStream} from a
{@code Spliterator.OfInt}.

<p>The spliterator is only traversed, split, or queried for estimated size
after the terminal operation of the stream pipeline commences.

<p>It is strongly recommended the spliterator report a characteristic of
{@code IMMUTABLE} or {@code CONCURRENT}, or be
<a href=\"../Spliterator.html#binding\">late-binding</a>.  Otherwise,
{@link #intStream(java.util.function.Supplier, int, boolean)} should be
used to reduce the scope of potential interference with the source.  See
<a href=\"package-summary.html#NonInterference\">Non-Interference</a> for
more details.

@param spliterator a {@code Spliterator.OfInt} describing the stream elements
@param parallel if {@code true} then the returned stream is a parallel
       stream; if {@code false} the returned stream is a sequential
       stream.
@return a new sequential or parallel {@code IntStream}
"
      end

      operation 9601922 "intStream"
	class_operation public return_type class_ref 429570 // IntStream
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param in name "characteristics" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Spliterator.OfInt> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new sequential or parallel {@code IntStream} from a
{@code Supplier} of {@code Spliterator.OfInt}.

<p>The {@link Supplier#get()} method will be invoked on the supplier no
more than once, and only after the terminal operation of the stream pipeline
commences.

<p>For spliterators that report a characteristic of {@code IMMUTABLE}
or {@code CONCURRENT}, or that are
<a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely
more efficient to use {@link #intStream(java.util.Spliterator.OfInt, boolean)}
instead.
<p>The use of a {@code Supplier} in this form provides a level of
indirection that reduces the scope of potential interference with the
source.  Since the supplier is only invoked after the terminal operation
commences, any modifications to the source up to the start of the
terminal operation are reflected in the stream result.  See
<a href=\"package-summary.html#NonInterference\">Non-Interference</a> for
more details.

@param supplier a {@code Supplier} of a {@code Spliterator.OfInt}
@param characteristics Spliterator characteristics of the supplied
       {@code Spliterator.OfInt}.  The characteristics must be equal to
       {@code supplier.get().characteristics()}, otherwise undefined
       behavior may occur when terminal operation commences.
@param parallel if {@code true} then the returned stream is a parallel
       stream; if {@code false} the returned stream is a sequential
       stream.
@return a new sequential or parallel {@code IntStream}
@see #intStream(java.util.Spliterator.OfInt, boolean)
"
      end

      operation 9602050 "longStream"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 2
	  param inout name "spliterator" type class_ref 376834 // OfLong
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new sequential or parallel {@code LongStream} from a
{@code Spliterator.OfLong}.

<p>The spliterator is only traversed, split, or queried for estimated
size after the terminal operation of the stream pipeline commences.

<p>It is strongly recommended the spliterator report a characteristic of
{@code IMMUTABLE} or {@code CONCURRENT}, or be
<a href=\"../Spliterator.html#binding\">late-binding</a>.  Otherwise,
{@link #longStream(java.util.function.Supplier, int, boolean)} should be
used to reduce the scope of potential interference with the source.  See
<a href=\"package-summary.html#NonInterference\">Non-Interference</a> for
more details.

@param spliterator a {@code Spliterator.OfLong} describing the stream elements
@param parallel if {@code true} then the returned stream is a parallel
       stream; if {@code false} the returned stream is a sequential
       stream.
@return a new sequential or parallel {@code LongStream}
"
      end

      operation 9602178 "longStream"
	class_operation public return_type class_ref 1023490 // LongStream
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param in name "characteristics" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Spliterator.OfLong> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new sequential or parallel {@code LongStream} from a
{@code Supplier} of {@code Spliterator.OfLong}.

<p>The {@link Supplier#get()} method will be invoked on the supplier no
more than once, and only after the terminal operation of the stream pipeline
commences.

<p>For spliterators that report a characteristic of {@code IMMUTABLE}
or {@code CONCURRENT}, or that are
<a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely
more efficient to use {@link #longStream(java.util.Spliterator.OfLong, boolean)}
instead.
<p>The use of a {@code Supplier} in this form provides a level of
indirection that reduces the scope of potential interference with the
source.  Since the supplier is only invoked after the terminal operation
commences, any modifications to the source up to the start of the
terminal operation are reflected in the stream result.  See
<a href=\"package-summary.html#NonInterference\">Non-Interference</a> for
more details.

@param supplier a {@code Supplier} of a {@code Spliterator.OfLong}
@param characteristics Spliterator characteristics of the supplied
       {@code Spliterator.OfLong}.  The characteristics must be equal to
       {@code supplier.get().characteristics()}, otherwise undefined
       behavior may occur when terminal operation commences.
@param parallel if {@code true} then the returned stream is a parallel
       stream; if {@code false} the returned stream is a sequential
       stream.
@return a new sequential or parallel {@code LongStream}
@see #longStream(java.util.Spliterator.OfLong, boolean)
"
      end

      operation 9602306 "doubleStream"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 2
	  param inout name "spliterator" type class_ref 377090 // OfDouble
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new sequential or parallel {@code DoubleStream} from a
{@code Spliterator.OfDouble}.

<p>The spliterator is only traversed, split, or queried for estimated size
after the terminal operation of the stream pipeline commences.

<p>It is strongly recommended the spliterator report a characteristic of
{@code IMMUTABLE} or {@code CONCURRENT}, or be
<a href=\"../Spliterator.html#binding\">late-binding</a>.  Otherwise,
{@link #doubleStream(java.util.function.Supplier, int, boolean)} should
be used to reduce the scope of potential interference with the source.  See
<a href=\"package-summary.html#NonInterference\">Non-Interference</a> for
more details.

@param spliterator A {@code Spliterator.OfDouble} describing the stream elements
@param parallel if {@code true} then the returned stream is a parallel
       stream; if {@code false} the returned stream is a sequential
       stream.
@return a new sequential or parallel {@code DoubleStream}
"
      end

      operation 9602434 "doubleStream"
	class_operation public return_type class_ref 1023618 // DoubleStream
	nparams 3
	  param inout name "supplier" type class_ref 933634 // Supplier
	  param in name "characteristics" explicit_type "int"
	  param inout name "parallel" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Spliterator.OfDouble> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new sequential or parallel {@code DoubleStream} from a
{@code Supplier} of {@code Spliterator.OfDouble}.

<p>The {@link Supplier#get()} method will be invoked on the supplier no
more than once, and only after the terminal operation of the stream pipeline
commences.

<p>For spliterators that report a characteristic of {@code IMMUTABLE}
or {@code CONCURRENT}, or that are
<a href=\"../Spliterator.html#binding\">late-binding</a>, it is likely
more efficient to use {@link #doubleStream(java.util.Spliterator.OfDouble, boolean)}
instead.
<p>The use of a {@code Supplier} in this form provides a level of
indirection that reduces the scope of potential interference with the
source.  Since the supplier is only invoked after the terminal operation
commences, any modifications to the source up to the start of the
terminal operation are reflected in the stream result.  See
<a href=\"package-summary.html#NonInterference\">Non-Interference</a> for
more details.

@param supplier A {@code Supplier} of a {@code Spliterator.OfDouble}
@param characteristics Spliterator characteristics of the supplied
       {@code Spliterator.OfDouble}.  The characteristics must be equal to
       {@code supplier.get().characteristics()}, otherwise undefined
       behavior may occur when terminal operation commences.
@param parallel if {@code true} then the returned stream is a parallel
       stream; if {@code false} the returned stream is a sequential
       stream.
@return a new sequential or parallel {@code DoubleStream}
@see #doubleStream(java.util.Spliterator.OfDouble, boolean)
"
      end
    end

    class 1168642 "Tripwire"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class for detecting inadvertent uses of boxing in
{@code java.util.stream} classes.  The detection is turned on or off based on
whether the system property {@code org.openjdk.java.util.stream.tripwire} is
considered {@code true} according to {@link Boolean#getBoolean(String)}.
This should normally be turned off for production use.

@apiNote
Typical usage would be for boxing code to do:
<pre>{@code
    if (Tripwire.ENABLED)
        Tripwire.trip(getClass(), \"{0} calling Sink.OfInt.accept(Integer)\");
}</pre>

@since 1.8
"
      classrelation 3730818 // TRIPWIRE_PROPERTY (<unidirectional association>)
	relation 3730818 --->
	  a role_name "TRIPWIRE_PROPERTY" init_value "  \"org.openjdk.java.util.stream.tripwire\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3730818 // TRIPWIRE_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 2230786 "ENABLED"
	class_attribute const_attribute package explicit_type "boolean"
	init_value "  AccessController.doPrivileged(
            (PrivilegedAction<Boolean>) () -> Boolean.getBoolean(TRIPWIRE_PROPERTY))"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Should debugging checks be enabled? 

"
      end

      operation 9602562 "Tripwire"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 9602690 "trip"
	class_operation package explicit_return_type "void"
	nparams 2
	  param inout name "trippingClass" type class_ref 130818 // Class
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produces a log warning, using {@code PlatformLogger.getLogger(className)},
using the supplied message.  The class name of {@code trippingClass} will
be used as the first parameter to the message.

@param trippingClass Name of the class generating the message
@param msg A message format string of the type expected by
{@link PlatformLogger}
"
      end
    end
  end

  deploymentview 171650 "stream"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 826498 "PipelineHelper"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Spliterator;
import java.util.function.IntFunction;
${definition}"
      associated_elems
	class_ref 1153794 // PipelineHelper
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 826626 "BaseStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.IntConsumer;
import java.util.function.Predicate;
${definition}"
      associated_elems
	class_ref 1154434 // BaseStream
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 826754 "AbstractPipeline"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
import java.util.Spliterator;
import java.util.function.IntFunction;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1153666 // AbstractPipeline
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 826882 "AbstractTask"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Spliterator;
import java.util.concurrent.CountedCompleter;
import java.util.concurrent.ForkJoinPool;
${definition}"
      associated_elems
	class_ref 1154818 // AbstractTask
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 827010 "AbstractShortCircuitTask"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Spliterator;
import java.util.concurrent.atomic.AtomicReference;
${definition}"
      associated_elems
	class_ref 1154690 // AbstractShortCircuitTask
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 827138 "AbstractSpinedBuffer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1154946 // AbstractSpinedBuffer
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 827266 "Collector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Function;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1155074 // Collector
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 827394 "Collectors"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractMap;
import java.util.AbstractSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.DoubleSummaryStatistics;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IntSummaryStatistics;
import java.util.Iterator;
import java.util.List;
import java.util.LongSummaryStatistics;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.StringJoiner;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
${definition}"
      associated_elems
	class_ref 1155330 // Collectors
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 827522 "DistinctOps"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;
import java.util.Spliterator;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.IntFunction;
${definition}"
      associated_elems
	class_ref 1155714 // DistinctOps
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 827650 "DoubleStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collection;
import java.util.DoubleSummaryStatistics;
import java.util.Objects;
import java.util.OptionalDouble;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.BiConsumer;
import java.util.function.DoubleBinaryOperator;
import java.util.function.DoubleConsumer;
import java.util.function.DoubleFunction;
import java.util.function.DoublePredicate;
import java.util.function.DoubleSupplier;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleUnaryOperator;
import java.util.function.Function;
import java.util.function.ObjDoubleConsumer;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1023618 // DoubleStream
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 827778 "DoublePipeline"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.DoubleSummaryStatistics;
import java.util.Objects;
import java.util.OptionalDouble;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.DoubleConsumer;
import java.util.function.DoubleFunction;
import java.util.function.DoublePredicate;
import java.util.function.DoubleToIntFunction;
import java.util.function.DoubleToLongFunction;
import java.util.function.DoubleUnaryOperator;
import java.util.function.IntFunction;
import java.util.function.ObjDoubleConsumer;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1155970 // DoublePipeline
      end
      comment "Copyright (c) 2013, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 827906 "TerminalOp"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Spliterator;
${definition}"
      associated_elems
	class_ref 1154562 // TerminalOp
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 828034 "Sink"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.LongConsumer;
${definition}"
      associated_elems
	class_ref 1154050 // Sink
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 828162 "TerminalSink"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1156866 // TerminalSink
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 828290 "IntStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.util.IntSummaryStatistics;
import java.util.Objects;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.IntFunction;
import java.util.function.IntPredicate;
import java.util.function.IntSupplier;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.ObjIntConsumer;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 429570 // IntStream
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 828418 "IntPipeline"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.IntSummaryStatistics;
import java.util.Objects;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.IntConsumer;
import java.util.function.IntFunction;
import java.util.function.IntPredicate;
import java.util.function.IntToDoubleFunction;
import java.util.function.IntToLongFunction;
import java.util.function.IntUnaryOperator;
import java.util.function.ObjIntConsumer;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1158530 // IntPipeline
      end
      comment "Copyright (c) 2012, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 828546 "LongStream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collection;
import java.util.LongSummaryStatistics;
import java.util.Objects;
import java.util.OptionalDouble;
import java.util.OptionalLong;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.function.LongBinaryOperator;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongSupplier;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;
import java.util.function.ObjLongConsumer;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1023490 // LongStream
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 828674 "LongPipeline"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.LongSummaryStatistics;
import java.util.Objects;
import java.util.OptionalDouble;
import java.util.OptionalLong;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.IntFunction;
import java.util.function.LongBinaryOperator;
import java.util.function.LongConsumer;
import java.util.function.LongFunction;
import java.util.function.LongPredicate;
import java.util.function.LongToDoubleFunction;
import java.util.function.LongToIntFunction;
import java.util.function.LongUnaryOperator;
import java.util.function.ObjLongConsumer;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1159170 // LongPipeline
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 828802 "MatchOps"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
import java.util.Spliterator;
import java.util.function.DoublePredicate;
import java.util.function.IntPredicate;
import java.util.function.LongPredicate;
import java.util.function.Predicate;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1159810 // MatchOps
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 828930 "ReduceOps"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.OptionalLong;
import java.util.Spliterator;
import java.util.concurrent.CountedCompleter;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.function.IntBinaryOperator;
import java.util.function.LongBinaryOperator;
import java.util.function.ObjDoubleConsumer;
import java.util.function.ObjIntConsumer;
import java.util.function.ObjLongConsumer;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1161602 // ReduceOps
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 829058 "Stream"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Objects;
import java.util.Optional;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.IntFunction;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.function.UnaryOperator;
${definition}"
      associated_elems
	class_ref 184706 // Stream
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 829186 "ReferencePipeline"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Comparator;
import java.util.Iterator;
import java.util.Objects;
import java.util.Optional;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.BinaryOperator;
import java.util.function.Consumer;
import java.util.function.DoubleConsumer;
import java.util.function.Function;
import java.util.function.IntConsumer;
import java.util.function.IntFunction;
import java.util.function.LongConsumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
${definition}"
      associated_elems
	class_ref 1155842 // ReferencePipeline
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 829314 "SliceOps"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Spliterator;
import java.util.concurrent.CountedCompleter;
import java.util.function.IntFunction;
${definition}"
      associated_elems
	class_ref 1162754 // SliceOps
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 829442 "SortedOps"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Objects;
import java.util.Spliterator;
import java.util.function.IntFunction;
${definition}"
      associated_elems
	class_ref 1163010 // SortedOps
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 829570 "SpinedBuffer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.Objects;
import java.util.PrimitiveIterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
import java.util.function.DoubleConsumer;
import java.util.function.IntConsumer;
import java.util.function.IntFunction;
import java.util.function.LongConsumer;
${definition}"
      associated_elems
	class_ref 1164418 // SpinedBuffer
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 829698 "StreamOpFlag"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.EnumMap;
import java.util.Map;
import java.util.Spliterator;
${definition}"
      associated_elems
	class_ref 1165954 // StreamOpFlag
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 829826 "StreamShape"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1153922 // StreamShape
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 829954 "StreamSupport"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
import java.util.Spliterator;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 1168514 // StreamSupport
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 830082 "Tripwire"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.util.logging.PlatformLogger;
${definition}"
      associated_elems
	class_ref 1168642 // Tripwire
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
