class OffsetDateTime
!!!8382082.java!!!	timeLineOrder() : Comparator
        return OffsetDateTime::compareInstant;
!!!8382210.java!!!	compareInstant(inout datetime1 : OffsetDateTime, inout datetime2 : OffsetDateTime) : int
        if (datetime1.getOffset().equals(datetime2.getOffset())) {
            return datetime1.toLocalDateTime().compareTo(datetime2.toLocalDateTime());
        }
        int cmp = Long.compare(datetime1.toEpochSecond(), datetime2.toEpochSecond());
        if (cmp == 0) {
            cmp = datetime1.toLocalTime().getNano() - datetime2.toLocalTime().getNano();
        }
        return cmp;
!!!8382338.java!!!	now() : OffsetDateTime
        return now(Clock.systemDefaultZone());
!!!8382466.java!!!	now(inout zone : ZoneId) : OffsetDateTime
        return now(Clock.system(zone));
!!!8382594.java!!!	now(inout clock : Clock) : OffsetDateTime
        Objects.requireNonNull(clock, "clock");
        final Instant now = clock.instant();  // called once
        return ofInstant(now, clock.getZone().getRules().getOffset(now));
!!!8382722.java!!!	of(inout date : LocalDate, inout time : LocalTime, inout offset : ZoneOffset) : OffsetDateTime
        LocalDateTime dt = LocalDateTime.of(date, time);
        return new OffsetDateTime(dt, offset);
!!!8382850.java!!!	of(inout dateTime : LocalDateTime, inout offset : ZoneOffset) : OffsetDateTime
        return new OffsetDateTime(dateTime, offset);
!!!8382978.java!!!	of(in year : int, in month : int, in dayOfMonth : int, in hour : int, in minute : int, in second : int, in nanoOfSecond : int, inout offset : ZoneOffset) : OffsetDateTime
        LocalDateTime dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);
        return new OffsetDateTime(dt, offset);
!!!8383106.java!!!	ofInstant(inout instant : Instant, inout zone : ZoneId) : OffsetDateTime
        Objects.requireNonNull(instant, "instant");
        Objects.requireNonNull(zone, "zone");
        ZoneRules rules = zone.getRules();
        ZoneOffset offset = rules.getOffset(instant);
        LocalDateTime ldt = LocalDateTime.ofEpochSecond(instant.getEpochSecond(), instant.getNano(), offset);
        return new OffsetDateTime(ldt, offset);
!!!8383234.java!!!	from(inout temporal : TemporalAccessor) : OffsetDateTime
        if (temporal instanceof OffsetDateTime) {
            return (OffsetDateTime) temporal;
        }
        try {
            ZoneOffset offset = ZoneOffset.from(temporal);
            LocalDate date = temporal.query(TemporalQueries.localDate());
            LocalTime time = temporal.query(TemporalQueries.localTime());
            if (date != null && time != null) {
                return OffsetDateTime.of(date, time, offset);
            } else {
                Instant instant = Instant.from(temporal);
                return OffsetDateTime.ofInstant(instant, offset);
            }
        } catch (DateTimeException ex) {
            throw new DateTimeException("Unable to obtain OffsetDateTime from TemporalAccessor: " +
                    temporal + " of type " + temporal.getClass().getName(), ex);
        }
!!!8383362.java!!!	parse(inout text : CharSequence) : OffsetDateTime
        return parse(text, DateTimeFormatter.ISO_OFFSET_DATE_TIME);
!!!8383490.java!!!	parse(inout text : CharSequence, inout formatter : DateTimeFormatter) : OffsetDateTime
        Objects.requireNonNull(formatter, "formatter");
        return formatter.parse(text, OffsetDateTime::from);
!!!8383618.java!!!	OffsetDateTime(inout dateTime : LocalDateTime, inout offset : ZoneOffset)
        this.dateTime = Objects.requireNonNull(dateTime, "dateTime");
        this.offset = Objects.requireNonNull(offset, "offset");
!!!8383746.java!!!	with(inout dateTime : LocalDateTime, inout offset : ZoneOffset) : OffsetDateTime
        if (this.dateTime == dateTime && this.offset.equals(offset)) {
            return this;
        }
        return new OffsetDateTime(dateTime, offset);
!!!8383874.java!!!	isSupported(inout field : TemporalField) : boolean
        return field instanceof ChronoField || (field != null && field.isSupportedBy(this));
!!!8384002.java!!!	isSupported(inout unit : TemporalUnit) : boolean
        if (unit instanceof ChronoUnit) {
            return unit != FOREVER;
        }
        return unit != null && unit.isSupportedBy(this);
!!!8384130.java!!!	range(inout field : TemporalField) : ValueRange
        if (field instanceof ChronoField) {
            if (field == INSTANT_SECONDS || field == OFFSET_SECONDS) {
                return field.range();
            }
            return dateTime.range(field);
        }
        return field.rangeRefinedBy(this);
!!!8384258.java!!!	get(inout field : TemporalField) : int
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case INSTANT_SECONDS:
                    throw new UnsupportedTemporalTypeException("Invalid field 'InstantSeconds' for get() method, use getLong() instead");
                case OFFSET_SECONDS:
                    return getOffset().getTotalSeconds();
            }
            return dateTime.get(field);
        }
        return Temporal.super.get(field);
!!!8384386.java!!!	getLong(inout field : TemporalField) : long
        if (field instanceof ChronoField) {
            switch ((ChronoField) field) {
                case INSTANT_SECONDS: return toEpochSecond();
                case OFFSET_SECONDS: return getOffset().getTotalSeconds();
            }
            return dateTime.getLong(field);
        }
        return field.getFrom(this);
!!!8384514.java!!!	getOffset() : ZoneOffset
        return offset;
!!!8384642.java!!!	withOffsetSameLocal(inout offset : ZoneOffset) : OffsetDateTime
        return with(dateTime, offset);
!!!8384770.java!!!	withOffsetSameInstant(inout offset : ZoneOffset) : OffsetDateTime
        if (offset.equals(this.offset)) {
            return this;
        }
        int difference = offset.getTotalSeconds() - this.offset.getTotalSeconds();
        LocalDateTime adjusted = dateTime.plusSeconds(difference);
        return new OffsetDateTime(adjusted, offset);
!!!8384898.java!!!	toLocalDateTime() : LocalDateTime
        return dateTime;
!!!8385026.java!!!	toLocalDate() : LocalDate
        return dateTime.toLocalDate();
!!!8385154.java!!!	getYear() : int
        return dateTime.getYear();
!!!8385282.java!!!	getMonthValue() : int
        return dateTime.getMonthValue();
!!!8385410.java!!!	getMonth() : Month
        return dateTime.getMonth();
!!!8385538.java!!!	getDayOfMonth() : int
        return dateTime.getDayOfMonth();
!!!8385666.java!!!	getDayOfYear() : int
        return dateTime.getDayOfYear();
!!!8385794.java!!!	getDayOfWeek() : DayOfWeek
        return dateTime.getDayOfWeek();
!!!8385922.java!!!	toLocalTime() : LocalTime
        return dateTime.toLocalTime();
!!!8386050.java!!!	getHour() : int
        return dateTime.getHour();
!!!8386178.java!!!	getMinute() : int
        return dateTime.getMinute();
!!!8386306.java!!!	getSecond() : int
        return dateTime.getSecond();
!!!8386434.java!!!	getNano() : int
        return dateTime.getNano();
!!!8386562.java!!!	with(inout adjuster : TemporalAdjuster) : OffsetDateTime
        // optimizations
        if (adjuster instanceof LocalDate || adjuster instanceof LocalTime || adjuster instanceof LocalDateTime) {
            return with(dateTime.with(adjuster), offset);
        } else if (adjuster instanceof Instant) {
            return ofInstant((Instant) adjuster, offset);
        } else if (adjuster instanceof ZoneOffset) {
            return with(dateTime, (ZoneOffset) adjuster);
        } else if (adjuster instanceof OffsetDateTime) {
            return (OffsetDateTime) adjuster;
        }
        return (OffsetDateTime) adjuster.adjustInto(this);
!!!8386690.java!!!	with(inout field : TemporalField, in newValue : long) : OffsetDateTime
        if (field instanceof ChronoField) {
            ChronoField f = (ChronoField) field;
            switch (f) {
                case INSTANT_SECONDS: return ofInstant(Instant.ofEpochSecond(newValue, getNano()), offset);
                case OFFSET_SECONDS: {
                    return with(dateTime, ZoneOffset.ofTotalSeconds(f.checkValidIntValue(newValue)));
                }
            }
            return with(dateTime.with(field, newValue), offset);
        }
        return field.adjustInto(this, newValue);
!!!8386818.java!!!	withYear(in year : int) : OffsetDateTime
        return with(dateTime.withYear(year), offset);
!!!8386946.java!!!	withMonth(in month : int) : OffsetDateTime
        return with(dateTime.withMonth(month), offset);
!!!8387074.java!!!	withDayOfMonth(in dayOfMonth : int) : OffsetDateTime
        return with(dateTime.withDayOfMonth(dayOfMonth), offset);
!!!8387202.java!!!	withDayOfYear(in dayOfYear : int) : OffsetDateTime
        return with(dateTime.withDayOfYear(dayOfYear), offset);
!!!8387330.java!!!	withHour(in hour : int) : OffsetDateTime
        return with(dateTime.withHour(hour), offset);
!!!8387458.java!!!	withMinute(in minute : int) : OffsetDateTime
        return with(dateTime.withMinute(minute), offset);
!!!8387586.java!!!	withSecond(in second : int) : OffsetDateTime
        return with(dateTime.withSecond(second), offset);
!!!8387714.java!!!	withNano(in nanoOfSecond : int) : OffsetDateTime
        return with(dateTime.withNano(nanoOfSecond), offset);
!!!8387842.java!!!	truncatedTo(inout unit : TemporalUnit) : OffsetDateTime
        return with(dateTime.truncatedTo(unit), offset);
!!!8387970.java!!!	plus(inout amountToAdd : TemporalAmount) : OffsetDateTime
        return (OffsetDateTime) amountToAdd.addTo(this);
!!!8388098.java!!!	plus(in amountToAdd : long, inout unit : TemporalUnit) : OffsetDateTime
        if (unit instanceof ChronoUnit) {
            return with(dateTime.plus(amountToAdd, unit), offset);
        }
        return unit.addTo(this, amountToAdd);
!!!8388226.java!!!	plusYears(in years : long) : OffsetDateTime
        return with(dateTime.plusYears(years), offset);
!!!8388354.java!!!	plusMonths(in months : long) : OffsetDateTime
        return with(dateTime.plusMonths(months), offset);
!!!8388482.java!!!	plusWeeks(in weeks : long) : OffsetDateTime
        return with(dateTime.plusWeeks(weeks), offset);
!!!8388610.java!!!	plusDays(in days : long) : OffsetDateTime
        return with(dateTime.plusDays(days), offset);
!!!8388738.java!!!	plusHours(in hours : long) : OffsetDateTime
        return with(dateTime.plusHours(hours), offset);
!!!8388866.java!!!	plusMinutes(in minutes : long) : OffsetDateTime
        return with(dateTime.plusMinutes(minutes), offset);
!!!8388994.java!!!	plusSeconds(in seconds : long) : OffsetDateTime
        return with(dateTime.plusSeconds(seconds), offset);
!!!8389122.java!!!	plusNanos(in nanos : long) : OffsetDateTime
        return with(dateTime.plusNanos(nanos), offset);
!!!8389250.java!!!	minus(inout amountToSubtract : TemporalAmount) : OffsetDateTime
        return (OffsetDateTime) amountToSubtract.subtractFrom(this);
!!!8389378.java!!!	minus(in amountToSubtract : long, inout unit : TemporalUnit) : OffsetDateTime
        return (amountToSubtract == Long.MIN_VALUE ? plus(Long.MAX_VALUE, unit).plus(1, unit) : plus(-amountToSubtract, unit));
!!!8389506.java!!!	minusYears(in years : long) : OffsetDateTime
        return (years == Long.MIN_VALUE ? plusYears(Long.MAX_VALUE).plusYears(1) : plusYears(-years));
!!!8389634.java!!!	minusMonths(in months : long) : OffsetDateTime
        return (months == Long.MIN_VALUE ? plusMonths(Long.MAX_VALUE).plusMonths(1) : plusMonths(-months));
!!!8389762.java!!!	minusWeeks(in weeks : long) : OffsetDateTime
        return (weeks == Long.MIN_VALUE ? plusWeeks(Long.MAX_VALUE).plusWeeks(1) : plusWeeks(-weeks));
!!!8389890.java!!!	minusDays(in days : long) : OffsetDateTime
        return (days == Long.MIN_VALUE ? plusDays(Long.MAX_VALUE).plusDays(1) : plusDays(-days));
!!!8390018.java!!!	minusHours(in hours : long) : OffsetDateTime
        return (hours == Long.MIN_VALUE ? plusHours(Long.MAX_VALUE).plusHours(1) : plusHours(-hours));
!!!8390146.java!!!	minusMinutes(in minutes : long) : OffsetDateTime
        return (minutes == Long.MIN_VALUE ? plusMinutes(Long.MAX_VALUE).plusMinutes(1) : plusMinutes(-minutes));
!!!8390274.java!!!	minusSeconds(in seconds : long) : OffsetDateTime
        return (seconds == Long.MIN_VALUE ? plusSeconds(Long.MAX_VALUE).plusSeconds(1) : plusSeconds(-seconds));
!!!8390402.java!!!	minusNanos(in nanos : long) : OffsetDateTime
        return (nanos == Long.MIN_VALUE ? plusNanos(Long.MAX_VALUE).plusNanos(1) : plusNanos(-nanos));
!!!8390530.java!!!	query(inout query : TemporalQuery) : R
        if (query == TemporalQueries.offset() || query == TemporalQueries.zone()) {
            return (R) getOffset();
        } else if (query == TemporalQueries.zoneId()) {
            return null;
        } else if (query == TemporalQueries.localDate()) {
            return (R) toLocalDate();
        } else if (query == TemporalQueries.localTime()) {
            return (R) toLocalTime();
        } else if (query == TemporalQueries.chronology()) {
            return (R) IsoChronology.INSTANCE;
        } else if (query == TemporalQueries.precision()) {
            return (R) NANOS;
        }
        // inline TemporalAccessor.super.query(query) as an optimization
        // non-JDK classes are not permitted to make this optimization
        return query.queryFrom(this);
!!!8390658.java!!!	adjustInto(inout temporal : Temporal) : Temporal
        // OffsetDateTime is treated as three separate fields, not an instant
        // this produces the most consistent set of results overall
        // the offset is set after the date and time, as it is typically a small
        // tweak to the result, with ZonedDateTime frequently ignoring the offset
        return temporal
                .with(EPOCH_DAY, toLocalDate().toEpochDay())
                .with(NANO_OF_DAY, toLocalTime().toNanoOfDay())
                .with(OFFSET_SECONDS, getOffset().getTotalSeconds());
!!!8390786.java!!!	until(inout endExclusive : Temporal, inout unit : TemporalUnit) : long
        OffsetDateTime end = OffsetDateTime.from(endExclusive);
        if (unit instanceof ChronoUnit) {
            end = end.withOffsetSameInstant(offset);
            return dateTime.until(end.dateTime, unit);
        }
        return unit.between(this, end);
!!!8390914.java!!!	format(inout formatter : DateTimeFormatter) : String
        Objects.requireNonNull(formatter, "formatter");
        return formatter.format(this);
!!!8391042.java!!!	atZoneSameInstant(inout zone : ZoneId) : ZonedDateTime
        return ZonedDateTime.ofInstant(dateTime, offset, zone);
!!!8391170.java!!!	atZoneSimilarLocal(inout zone : ZoneId) : ZonedDateTime
        return ZonedDateTime.ofLocal(dateTime, zone, offset);
!!!8391298.java!!!	toOffsetTime() : OffsetTime
        return OffsetTime.of(dateTime.toLocalTime(), offset);
!!!8391426.java!!!	toZonedDateTime() : ZonedDateTime
        return ZonedDateTime.of(dateTime, offset);
!!!8391554.java!!!	toInstant() : Instant
        return dateTime.toInstant(offset);
!!!8391682.java!!!	toEpochSecond() : long
        return dateTime.toEpochSecond(offset);
!!!8391810.java!!!	compareTo(inout other : OffsetDateTime) : int
        int cmp = compareInstant(this, other);
        if (cmp == 0) {
            cmp = toLocalDateTime().compareTo(other.toLocalDateTime());
        }
        return cmp;
!!!8391938.java!!!	isAfter(inout other : OffsetDateTime) : boolean
        long thisEpochSec = toEpochSecond();
        long otherEpochSec = other.toEpochSecond();
        return thisEpochSec > otherEpochSec ||
            (thisEpochSec == otherEpochSec && toLocalTime().getNano() > other.toLocalTime().getNano());
!!!8392066.java!!!	isBefore(inout other : OffsetDateTime) : boolean
        long thisEpochSec = toEpochSecond();
        long otherEpochSec = other.toEpochSecond();
        return thisEpochSec < otherEpochSec ||
            (thisEpochSec == otherEpochSec && toLocalTime().getNano() < other.toLocalTime().getNano());
!!!8392194.java!!!	isEqual(inout other : OffsetDateTime) : boolean
        return toEpochSecond() == other.toEpochSecond() &&
                toLocalTime().getNano() == other.toLocalTime().getNano();
!!!8392322.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) {
            return true;
        }
        if (obj instanceof OffsetDateTime) {
            OffsetDateTime other = (OffsetDateTime) obj;
            return dateTime.equals(other.dateTime) && offset.equals(other.offset);
        }
        return false;
!!!8392450.java!!!	hashCode() : int
        return dateTime.hashCode() ^ offset.hashCode();
!!!8392578.java!!!	toString() : String
        return dateTime.toString() + offset.toString();
!!!8392706.java!!!	writeReplace() : Object
        return new Ser(Ser.OFFSET_DATE_TIME_TYPE, this);
!!!8392834.java!!!	readObject(inout s : ObjectInputStream) : void
        throw new InvalidObjectException("Deserialization via serialization delegate");
!!!8392962.java!!!	writeExternal(inout out : ObjectOutput) : void
        dateTime.writeExternal(out);
        offset.writeExternal(out);
!!!8393090.java!!!	readExternal(inout in : ObjectInput) : OffsetDateTime
        LocalDateTime dateTime = LocalDateTime.readExternal(in);
        ZoneOffset offset = ZoneOffset.readExternal(in);
        return OffsetDateTime.of(dateTime, offset);
