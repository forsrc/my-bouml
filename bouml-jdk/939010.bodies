class StrictMath
!!!7093250.java!!!	toRadians(in angdeg : double) : double
        // Do not delegate to Math.toRadians(angdeg) because
        // this method has the strictfp modifier.
        return angdeg / 180.0 * PI;
!!!7093378.java!!!	toDegrees(in angrad : double) : double
        // Do not delegate to Math.toDegrees(angrad) because
        // this method has the strictfp modifier.
        return angrad * 180.0 / PI;
!!!7094274.java!!!	ceil(in a : double) : double
        return floorOrCeil(a, -0.0, 1.0, 1.0);
!!!7094402.java!!!	floor(in a : double) : double
        return floorOrCeil(a, -1.0, 0.0, -1.0);
!!!7094530.java!!!	floorOrCeil(in a : double, in negativeBoundary : double, in positiveBoundary : double, in sign : double) : double
        int exponent = Math.getExponent(a);

        if (exponent < 0) {
            /*
             * Absolute value of argument is less than 1.
             * floorOrceil(-0.0) => -0.0
             * floorOrceil(+0.0) => +0.0
             */
            return ((a == 0.0) ? a :
                    ( (a < 0.0) ?  negativeBoundary : positiveBoundary) );
        } else if (exponent >= 52) {
            /*
             * Infinity, NaN, or a value so large it must be integral.
             */
            return a;
        }
        // Else the argument is either an integral value already XOR it
        // has to be rounded to one.
        assert exponent >= 0 && exponent <= 51;

        long doppel = Double.doubleToRawLongBits(a);
        long mask   = DoubleConsts.SIGNIF_BIT_MASK >> exponent;

        if ( (mask & doppel) == 0L )
            return a; // integral value
        else {
            double result = Double.longBitsToDouble(doppel & (~mask));
            if (sign*a > 0.0)
                result = result + sign;
            return result;
        }
!!!7094658.java!!!	rint(in a : double) : double
        /*
         * If the absolute value of a is not less than 2^52, it
         * is either a finite integer (the double format does not have
         * enough significand bits for a number that large to have any
         * fractional portion), an infinity, or a NaN.  In any of
         * these cases, rint of the argument is the argument.
         *
         * Otherwise, the sum (twoToThe52 + a ) will properly round
         * away any fractional portion of a since ulp(twoToThe52) ==
         * 1.0; subtracting out twoToThe52 from this sum will then be
         * exact and leave the rounded integer portion of a.
         *
         * This method does *not* need to be declared strictfp to get
         * fully reproducible results.  Whether or not a method is
         * declared strictfp can only make a difference in the
         * returned result if some operation would overflow or
         * underflow with strictfp semantics.  The operation
         * (twoToThe52 + a ) cannot overflow since large values of a
         * are screened out; the add cannot underflow since twoToThe52
         * is too large.  The subtraction ((twoToThe52 + a ) -
         * twoToThe52) will be exact as discussed above and thus
         * cannot overflow or meaningfully underflow.  Finally, the
         * last multiply in the return statement is by plus or minus
         * 1.0, which is exact too.
         */
        double twoToThe52 = (double)(1L << 52); // 2^52
        double sign = Math.copySign(1.0, a); // preserve sign info
        a = Math.abs(a);

        if (a < twoToThe52) { // E_min <= ilogb(a) <= 51
            a = ((twoToThe52 + a ) - twoToThe52);
        }

        return sign * a; // restore original sign
!!!7095042.java!!!	round(in a : float) : int
        return Math.round(a);
!!!7095170.java!!!	round(in a : double) : long
        return Math.round(a);
!!!7095298.java!!!	random() : double
        return RandomNumberGeneratorHolder.randomNumberGenerator.nextDouble();
!!!7095426.java!!!	addExact(in x : int, in y : int) : int
        return Math.addExact(x, y);
!!!7095554.java!!!	addExact(in x : long, in y : long) : long
        return Math.addExact(x, y);
!!!7095682.java!!!	subtractExact(in x : int, in y : int) : int
        return Math.subtractExact(x, y);
!!!7095810.java!!!	subtractExact(in x : long, in y : long) : long
        return Math.subtractExact(x, y);
!!!7095938.java!!!	multiplyExact(in x : int, in y : int) : int
        return Math.multiplyExact(x, y);
!!!7096066.java!!!	multiplyExact(in x : long, in y : long) : long
        return Math.multiplyExact(x, y);
!!!7096194.java!!!	toIntExact(in value : long) : int
        return Math.toIntExact(value);
!!!7096322.java!!!	floorDiv(in x : int, in y : int) : int
        return Math.floorDiv(x, y);
!!!7096450.java!!!	floorDiv(in x : long, in y : long) : long
        return Math.floorDiv(x, y);
!!!7096578.java!!!	floorMod(in x : int, in y : int) : int
        return Math.floorMod(x , y);
!!!7096706.java!!!	floorMod(in x : long, in y : long) : long
        return Math.floorMod(x, y);
!!!7096834.java!!!	abs(in a : int) : int
        return Math.abs(a);
!!!7096962.java!!!	abs(in a : long) : long
        return Math.abs(a);
!!!7097090.java!!!	abs(in a : float) : float
        return Math.abs(a);
!!!7097218.java!!!	abs(in a : double) : double
        return Math.abs(a);
!!!7097346.java!!!	max(in a : int, in b : int) : int
        return Math.max(a, b);
!!!7097474.java!!!	max(in a : long, in b : long) : long
        return Math.max(a, b);
!!!7097602.java!!!	max(in a : float, in b : float) : float
        return Math.max(a, b);
!!!7097730.java!!!	max(in a : double, in b : double) : double
        return Math.max(a, b);
!!!7097858.java!!!	min(in a : int, in b : int) : int
        return Math.min(a, b);
!!!7097986.java!!!	min(in a : long, in b : long) : long
        return Math.min(a, b);
!!!7098114.java!!!	min(in a : float, in b : float) : float
        return Math.min(a, b);
!!!7098242.java!!!	min(in a : double, in b : double) : double
        return Math.min(a, b);
!!!7098370.java!!!	ulp(in d : double) : double
        return Math.ulp(d);
!!!7098498.java!!!	ulp(in f : float) : float
        return Math.ulp(f);
!!!7098626.java!!!	signum(in d : double) : double
        return Math.signum(d);
!!!7098754.java!!!	signum(in f : float) : float
        return Math.signum(f);
!!!7099650.java!!!	copySign(in magnitude : double, in sign : double) : double
        return Math.copySign(magnitude, (Double.isNaN(sign)?1.0d:sign));
!!!7099778.java!!!	copySign(in magnitude : float, in sign : float) : float
        return Math.copySign(magnitude, (Float.isNaN(sign)?1.0f:sign));
!!!7099906.java!!!	getExponent(in f : float) : int
        return Math.getExponent(f);
!!!7100034.java!!!	getExponent(in d : double) : int
        return Math.getExponent(d);
!!!7100162.java!!!	nextAfter(in start : double, in direction : double) : double
        return Math.nextAfter(start, direction);
!!!7100290.java!!!	nextAfter(in start : float, in direction : double) : float
        return Math.nextAfter(start, direction);
!!!7100418.java!!!	nextUp(in d : double) : double
        return Math.nextUp(d);
!!!7100546.java!!!	nextUp(in f : float) : float
        return Math.nextUp(f);
!!!7100674.java!!!	nextDown(in d : double) : double
        return Math.nextDown(d);
!!!7100802.java!!!	nextDown(in f : float) : float
        return Math.nextDown(f);
!!!7100930.java!!!	scalb(in d : double, in scaleFactor : int) : double
        return Math.scalb(d, scaleFactor);
!!!7101058.java!!!	scalb(in f : float, in scaleFactor : int) : float
        return Math.scalb(f, scaleFactor);
