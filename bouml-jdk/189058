format 222
"soap" // jdk1.8::javax::xml::soap
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/javax/xml/soap/"
  java_package "javax.xml.soap"
  classview 182146 "soap"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1425794 "AttachmentPart"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A single attachment to a <code>SOAPMessage</code> object. A <code>SOAPMessage</code>
object may contain zero, one, or many <code>AttachmentPart</code> objects.
Each <code>AttachmentPart</code> object consists of two parts,
application-specific content and associated MIME headers. The
MIME headers consists of name/value pairs that can be used to
identify and describe the content.
<p>
An <code>AttachmentPart</code> object must conform to certain standards.
<OL>
<LI>It must conform to <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">
    MIME [RFC2045] standards</a>
<LI>It MUST contain content
<LI>The header portion MUST include the following header:
 <UL>
  <LI><code>Content-Type</code><br>
      This header identifies the type of data in the content of an
      <code>AttachmentPart</code> object and MUST conform to [RFC2045].
      The following is an example of a Content-Type header:
      <PRE>
      Content-Type:  application/xml
      </PRE>
      The following line of code, in which <code>ap</code> is an
      <code>AttachmentPart</code> object, sets the header shown in
      the previous example.
      <PRE>
      ap.setMimeHeader(\"Content-Type\", \"application/xml\");
      </PRE>
<p>
 </UL>
</OL>
<p>
There are no restrictions on the content portion of an <code>
AttachmentPart</code> object. The content may be anything from a
simple plain text object to a complex XML document or image file.

<p>
An <code>AttachmentPart</code> object is created with the method
<code>SOAPMessage.createAttachmentPart</code>. After setting its MIME headers,
 the <code>AttachmentPart</code> object is added to the message
that created it with the method <code>SOAPMessage.addAttachmentPart</code>.

<p>
The following code fragment, in which <code>m</code> is a
<code>SOAPMessage</code> object and <code>contentStringl</code> is a
<code>String</code>, creates an instance of <code>AttachmentPart</code>,
sets the <code>AttachmentPart</code> object with some content and
header information, and adds the <code>AttachmentPart</code> object to
the <code>SOAPMessage</code> object.
<PRE>
    AttachmentPart ap1 = m.createAttachmentPart();
    ap1.setContent(contentString1, \"text/plain\");
    m.addAttachmentPart(ap1);
</PRE>


<p>
The following code fragment creates and adds a second
<code>AttachmentPart</code> instance to the same message. <code>jpegData</code>
is a binary byte buffer representing the jpeg file.
<PRE>
    AttachmentPart ap2 = m.createAttachmentPart();
    byte[] jpegData =  ...;
    ap2.setContent(new ByteArrayInputStream(jpegData), \"image/jpeg\");
    m.addAttachmentPart(ap2);
</PRE>
<p>
The <code>getContent</code> method retrieves the contents and header from
an <code>AttachmentPart</code> object. Depending on the
<code>DataContentHandler</code> objects present, the returned
<code>Object</code> can either be a typed Java object corresponding
to the MIME type or an <code>InputStream</code> object that contains the
content as bytes.
<PRE>
    String content1 = ap1.getContent();
    java.io.InputStream content2 = ap2.getContent();
</PRE>

The method <code>clearContent</code> removes all the content from an
<code>AttachmentPart</code> object but does not affect its header information.
<PRE>
    ap1.clearContent();
</PRE>
"
      operation 12051074 "getSize"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes in this <code>AttachmentPart</code>
object.

@return the size of this <code>AttachmentPart</code> object in bytes
        or -1 if the size cannot be determined
@exception SOAPException if the content of this attachment is
           corrupted of if there was an exception while trying
           to determine the size.
"
      end

      operation 12051202 "clearContent"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears out the content of this <code>AttachmentPart</code> object.
The MIME header portion is left untouched.
"
      end

      operation 12051330 "getContent"
	abstract public return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the content of this <code>AttachmentPart</code> object as a Java
object. The type of the returned Java object depends on (1) the
<code>DataContentHandler</code> object that is used to interpret the bytes
and (2) the <code>Content-Type</code> given in the header.
<p>
For the MIME content types \"text/plain\", \"text/html\" and \"text/xml\", the
<code>DataContentHandler</code> object does the conversions to and
from the Java types corresponding to the MIME types.
For other MIME types,the <code>DataContentHandler</code> object
can return an <code>InputStream</code> object that contains the content data
as raw bytes.
<p>
A SAAJ-compliant implementation must, as a minimum, return a
<code>java.lang.String</code> object corresponding to any content
stream with a <code>Content-Type</code> value of
<code>text/plain</code>, a
<code>javax.xml.transform.stream.StreamSource</code> object corresponding to a
content stream with a <code>Content-Type</code> value of
<code>text/xml</code>, a <code>java.awt.Image</code> object
corresponding to a content stream with a
<code>Content-Type</code> value of <code>image/gif</code> or
<code>image/jpeg</code>.  For those content types that an
installed <code>DataContentHandler</code> object does not understand, the
<code>DataContentHandler</code> object is required to return a
<code>java.io.InputStream</code> object with the raw bytes.

@return a Java object with the content of this <code>AttachmentPart</code>
        object

@exception SOAPException if there is no content set into this
           <code>AttachmentPart</code> object or if there was a data
           transformation error
"
      end

      operation 12051458 "getRawContent"
	abstract public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the content of this <code>AttachmentPart</code> object as an
InputStream as if a call had been made to <code>getContent</code> and no
<code>DataContentHandler</code> had been registered for the
<code>content-type</code> of this <code>AttachmentPart</code>.
<p>
Note that reading from the returned InputStream would result in consuming
the data in the stream. It is the responsibility of the caller to reset
the InputStream appropriately before calling a Subsequent API. If a copy
of the raw attachment content is required then the {@link #getRawContentBytes} API
should be used instead.

@return an <code>InputStream</code> from which the raw data contained by
     the <code>AttachmentPart</code> can be accessed.

@throws SOAPException if there is no content set into this
     <code>AttachmentPart</code> object or if there was a data
     transformation error.

@since SAAJ 1.3
@see #getRawContentBytes
"
      end

      operation 12051586 "getRawContentBytes"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the content of this <code>AttachmentPart</code> object as a
byte[] array as if a call had been made to <code>getContent</code> and no
<code>DataContentHandler</code> had been registered for the
<code>content-type</code> of this <code>AttachmentPart</code>.

@return a <code>byte[]</code> array containing the raw data of the
     <code>AttachmentPart</code>.

@throws SOAPException if there is no content set into this
     <code>AttachmentPart</code> object or if there was a data
     transformation error.

@since SAAJ 1.3
"
      end

      operation 12051714 "getBase64Content"
	abstract public return_type class_ref 146434 // InputStream
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>InputStream</code> which can be used to obtain the
content of <code>AttachmentPart</code>  as Base64 encoded
character data, this method would base64 encode the raw bytes
of the attachment and return.

@return an <code>InputStream</code> from which the Base64 encoded
      <code>AttachmentPart</code> can be read.

@throws SOAPException if there is no content set into this
     <code>AttachmentPart</code> object or if there was a data
     transformation error.

@since SAAJ 1.3
"
      end

      operation 12051842 "setContent"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "object" type class_ref 129538 // Object
	  param inout name "contentType" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the content of this attachment part to that of the given
<code>Object</code> and sets the value of the <code>Content-Type</code>
header to the given type. The type of the
<code>Object</code> should correspond to the value given for the
<code>Content-Type</code>. This depends on the particular
set of <code>DataContentHandler</code> objects in use.


@param object the Java object that makes up the content for
              this attachment part
@param contentType the MIME string that specifies the type of
                 the content

@exception IllegalArgumentException may be thrown if the contentType
           does not match the type of the content object, or if there
           was no <code>DataContentHandler</code> object for this
           content object

@see #getContent
"
      end

      operation 12051970 "setRawContent"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "content" type class_ref 146434 // InputStream
	  param inout name "contentType" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the content of this attachment part to that contained by the
<code>InputStream</code> <code>content</code> and sets the value of the
<code>Content-Type</code> header to the value contained in
<code>contentType</code>.
<P>
 A subsequent call to getSize() may not be an exact measure
 of the content size.

@param content the raw data to add to the attachment part
@param contentType the value to set into the <code>Content-Type</code>
header

@exception SOAPException if an there is an error in setting the content
@exception NullPointerException if <code>content</code> is null
@since SAAJ 1.3
"
      end

      operation 12052098 "setRawContentBytes"
	abstract public explicit_return_type "void"
	nparams 4
	  param inout name "content" explicit_type "byte"
	multiplicity "[]"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	  param inout name "contentType" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the content of this attachment part to that contained by the
<code>byte[]</code> array <code>content</code> and sets the value of the
<code>Content-Type</code> header to the value contained in
<code>contentType</code>.

@param content the raw data to add to the attachment part
@param contentType the value to set into the <code>Content-Type</code>
header
@param offset the offset in the byte array of the content
@param len the number of bytes that form the content

@exception SOAPException if an there is an error in setting the content
or content is null
@since SAAJ 1.3
"
      end

      operation 12052226 "setBase64Content"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "content" type class_ref 146434 // InputStream
	  param inout name "contentType" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the content of this attachment part from the Base64 source
<code>InputStream</code>  and sets the value of the
<code>Content-Type</code> header to the value contained in
<code>contentType</code>, This method would first decode the base64
input and write the resulting raw bytes to the attachment.
<P>
 A subsequent call to getSize() may not be an exact measure
 of the content size.

@param content the base64 encoded data to add to the attachment part
@param contentType the value to set into the <code>Content-Type</code>
header

@exception SOAPException if an there is an error in setting the content
@exception NullPointerException if <code>content</code> is null

@since SAAJ 1.3
"
      end

      operation 12052354 "getDataHandler"
	abstract public explicit_return_type "DataHandler"
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>DataHandler</code> object for this <code>AttachmentPart</code>
object.

@return the <code>DataHandler</code> object associated with this
        <code>AttachmentPart</code> object

@exception SOAPException if there is no data in
this <code>AttachmentPart</code> object
"
      end

      operation 12052482 "setDataHandler"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "dataHandler" explicit_type "DataHandler"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the given <code>DataHandler</code> object as the data handler
for this <code>AttachmentPart</code> object. Typically, on an incoming
message, the data handler is automatically set. When
a message is being created and populated with content, the
<code>setDataHandler</code> method can be used to get data from
various data sources into the message.

@param dataHandler the <code>DataHandler</code> object to be set

@exception IllegalArgumentException if there was a problem with
           the specified <code>DataHandler</code> object
"
      end

      operation 12052610 "getContentId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the MIME header whose name is \"Content-ID\".

@return a <code>String</code> giving the value of the
         \"Content-ID\" header or <code>null</code> if there
         is none
@see #setContentId
"
      end

      operation 12052738 "getContentLocation"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the MIME header whose name is \"Content-Location\".

@return a <code>String</code> giving the value of the
         \"Content-Location\" header or <code>null</code> if there
         is none
"
      end

      operation 12052866 "getContentType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the value of the MIME header whose name is \"Content-Type\".

@return a <code>String</code> giving the value of the
         \"Content-Type\" header or <code>null</code> if there
         is none
"
      end

      operation 12052994 "setContentId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "contentId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the MIME header whose name is \"Content-ID\" with the given value.

@param contentId a <code>String</code> giving the value of the
         \"Content-ID\" header

@exception IllegalArgumentException if there was a problem with
           the specified <code>contentId</code> value
@see #getContentId
"
      end

      operation 12053122 "setContentLocation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "contentLocation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the MIME header whose name is \"Content-Location\" with the given value.


@param contentLocation a <code>String</code> giving the value of the
         \"Content-Location\" header
@exception IllegalArgumentException if there was a problem with
           the specified content location
"
      end

      operation 12053250 "setContentType"
	public explicit_return_type "void"
	nparams 1
	  param inout name "contentType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the MIME header whose name is \"Content-Type\" with the given value.

@param contentType a <code>String</code> giving the value of the
         \"Content-Type\" header

@exception IllegalArgumentException if there was a problem with
           the specified content type
"
      end

      operation 12053378 "removeMimeHeader"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "header" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all MIME headers that match the given name.

@param header the string name of the MIME header/s to
              be removed
"
      end

      operation 12053506 "removeAllMimeHeaders"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all the MIME header entries.
"
      end

      operation 12053634 "getMimeHeader"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the values of the header identified by the given
<code>String</code>.

@param name the name of the header; example: \"Content-Type\"
@return a <code>String</code> array giving the value for the
        specified header
@see #setMimeHeader
"
      end

      operation 12053762 "setMimeHeader"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the first header entry that matches the given name
to the given value, adding a new header if no existing header
matches. This method also removes all matching headers but the first. <p>

Note that RFC822 headers can only contain US-ASCII characters.

@param   name    a <code>String</code> giving the name of the header
                 for which to search
@param   value   a <code>String</code> giving the value to be set for
                 the header whose name matches the given name

@exception IllegalArgumentException if there was a problem with
           the specified mime header name or value
"
      end

      operation 12053890 "addMimeHeader"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a MIME header with the specified name and value to this
<code>AttachmentPart</code> object.
<p>
Note that RFC822 headers can contain only US-ASCII characters.

@param   name    a <code>String</code> giving the name of the header
                 to be added
@param   value   a <code>String</code> giving the value of the header
                 to be added

@exception IllegalArgumentException if there was a problem with
           the specified mime header name or value
"
      end

      operation 12054018 "getAllMimeHeaders"
	abstract public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all the headers for this <code>AttachmentPart</code> object
as an iterator over the <code>MimeHeader</code> objects.

@return  an <code>Iterator</code> object with all of the Mime
         headers for this <code>AttachmentPart</code> object
"
      end

      operation 12054146 "getMatchingMimeHeaders"
	abstract public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "names" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all <code>MimeHeader</code> objects that match a name in
the given array.

@param names a <code>String</code> array with the name(s) of the
       MIME headers to be returned
@return  all of the MIME headers that match one of the names in the
          given array as an <code>Iterator</code> object
"
      end

      operation 12054274 "getNonMatchingMimeHeaders"
	abstract public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "names" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all <code>MimeHeader</code> objects whose name does
not match a name in the given array.

@param names a <code>String</code> array with the name(s) of the
       MIME headers not to be returned
@return  all of the MIME headers in this <code>AttachmentPart</code> object
         except those that match one of the names in the
          given array.  The nonmatching MIME headers are returned as an
          <code>Iterator</code> object.
"
      end
    end

    class 1425922 "SOAPException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that signals that a SOAP exception has occurred. A
<code>SOAPException</code> object may contain a <code>String</code>
that gives the reason for the exception, an embedded
<code>Throwable</code> object, or both. This class provides methods
for retrieving reason messages and for retrieving the embedded
<code>Throwable</code> object.

<P> Typical reasons for throwing a <code>SOAPException</code>
object are problems such as difficulty setting a header, not being
able to send a message, and not being able to get a connection with
the provider.  Reasons for embedding a <code>Throwable</code>
object include problems such as input/output errors or a parsing
problem, such as an error in parsing a header.
"
      classrelation 4792322 // <generalisation>
	relation 4792322 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4792322 // <generalisation>
	  b parent class_ref 132226 // Exception
      end

      classrelation 4792450 // cause (<unidirectional association>)
	relation 4792450 --->
	  a role_name "cause" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4792450 // cause (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      operation 12069378 "SOAPException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SOAPException</code> object with no
reason or embedded <code>Throwable</code> object.
"
      end

      operation 12069506 "SOAPException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SOAPException</code> object with the given
<code>String</code> as the reason for the exception being thrown.

@param reason a description of what caused the exception
"
      end

      operation 12069634 "SOAPException"
	public explicit_return_type ""
	nparams 2
	  param inout name "reason" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SOAPException</code> object with the given
<code>String</code> as the reason for the exception being thrown
and the given <code>Throwable</code> object as an embedded
exception.

@param reason a description of what caused the exception
@param cause a <code>Throwable</code> object that is to
       be embedded in this <code>SOAPException</code> object
"
      end

      operation 12069762 "SOAPException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>SOAPException</code> object initialized
with the given <code>Throwable</code> object.
"
      end

      operation 12069890 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the detail message for this <code>SOAPException</code>
object.
<P>
If there is an embedded <code>Throwable</code> object, and if the
<code>SOAPException</code> object has no detail message of its
own, this method will return the detail message from the embedded
<code>Throwable</code> object.

@return the error or warning message for this
        <code>SOAPException</code> or, if it has none, the
        message of the embedded <code>Throwable</code> object,
        if there is one
"
      end

      operation 12070018 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>Throwable</code> object embedded in this
<code>SOAPException</code> if there is one. Otherwise, this method
returns <code>null</code>.

@return the embedded <code>Throwable</code> object or <code>null</code>
        if there is none
"
      end

      operation 12070146 "initCause"
	public return_type class_ref 129922 // Throwable
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the <code>cause</code> field of this <code>SOAPException</code>
object with the given <code>Throwable</code> object.
<P>
This method can be called at most once.  It is generally called from
within the constructor or immediately after the constructor has
returned a new <code>SOAPException</code> object.
If this <code>SOAPException</code> object was created with the
constructor {@link #SOAPException(Throwable)} or
{@link #SOAPException(String,Throwable)}, meaning that its
<code>cause</code> field already has a value, this method cannot be
called even once.

@param  cause the <code>Throwable</code> object that caused this
        <code>SOAPException</code> object to be thrown.  The value of this
        parameter is saved for later retrieval by the
        {@link #getCause()} method.  A <tt>null</tt> value is
        permitted and indicates that the cause is nonexistent or
        unknown.
@return  a reference to this <code>SOAPException</code> instance
@throws IllegalArgumentException if <code>cause</code> is this
        <code>Throwable</code> object.  (A <code>Throwable</code> object
        cannot be its own cause.)
@throws IllegalStateException if the cause for this <code>SOAPException</code> object
        has already been initialized
"
      end
    end

    class 1426050 "Detail"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A container for <code>DetailEntry</code> objects. <code>DetailEntry</code>
objects give detailed error information that is application-specific and
related to the <code>SOAPBody</code> object that contains it.
<P>
A <code>Detail</code> object, which is part of a <code>SOAPFault</code>
object, can be retrieved using the method <code>SOAPFault.getDetail</code>.
The <code>Detail</code> interface provides two methods. One creates a new
<code>DetailEntry</code> object and also automatically adds it to
the <code>Detail</code> object. The second method gets a list of the
<code>DetailEntry</code> objects contained in a <code>Detail</code>
object.
<P>
The following code fragment, in which <i>sf</i> is a <code>SOAPFault</code>
object, gets its <code>Detail</code> object (<i>d</i>), adds a new
<code>DetailEntry</code> object to <i>d</i>, and then gets a list of all the
<code>DetailEntry</code> objects in <i>d</i>. The code also creates a
<code>Name</code> object to pass to the method <code>addDetailEntry</code>.
The variable <i>se</i>, used to create the <code>Name</code> object,
is a <code>SOAPEnvelope</code> object.
<PRE>
   Detail d = sf.getDetail();
   Name name = se.createName(\"GetLastTradePrice\", \"WOMBAT\",
                               \"http://www.wombat.org/trader\");
   d.addDetailEntry(name);
   Iterator it = d.getDetailEntries();
</PRE>
"
      classrelation 4786434 // <generalisation>
	relation 4786434 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4786434 // <generalisation>
	  b parent class_ref 1426178 // SOAPFaultElement
      end

      operation 12059010 "addDetailEntry"
	public return_type class_ref 1426690 // DetailEntry
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>DetailEntry</code> object with the given
name and adds it to this <code>Detail</code> object.

@param name a <code>Name</code> object identifying the
        new <code>DetailEntry</code> object

@exception SOAPException thrown when there is a problem in adding a
DetailEntry object to this Detail object.

@see Detail#addDetailEntry(QName qname)
"
      end

      operation 12059138 "addDetailEntry"
	public return_type class_ref 1426690 // DetailEntry
	nparams 1
	  param inout name "qname" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>DetailEntry</code> object with the given
QName and adds it to this <code>Detail</code> object. This method
is the preferred over the one using Name.

@param qname a <code>QName</code> object identifying the
        new <code>DetailEntry</code> object

@exception SOAPException thrown when there is a problem in adding a
DetailEntry object to this Detail object.

@see Detail#addDetailEntry(Name name)
@since SAAJ 1.3
"
      end

      operation 12059266 "getDetailEntries"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an Iterator over all of the <code>DetailEntry</code>s in this <code>Detail</code> object.

@return an <code>Iterator</code> object over the <code>DetailEntry</code>
            objects in this <code>Detail</code> object
"
      end
    end

    class 1426178 "SOAPFaultElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A representation of the contents in
a <code>SOAPFault</code> object.  The <code>Detail</code> interface
is a <code>SOAPFaultElement</code>.
<P>
Content is added to a <code>SOAPFaultElement</code> using the
<code>SOAPElement</code> method <code>addTextNode</code>.
"
      classrelation 4786306 // <generalisation>
	relation 4786306 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4786306 // <generalisation>
	  b parent class_ref 1426306 // SOAPElement
      end
    end

    class 1426306 "SOAPElement"
      abstract visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object representing an element of a SOAP message that is allowed but not
specifically prescribed by a SOAP specification. This interface serves as the
base interface for those objects that are specifically prescribed by a SOAP
specification.
<p>
Methods in this interface that are required to return SAAJ specific objects
may \"silently\" replace nodes in the tree as required to successfully return
objects of the correct type. See {@link #getChildElements()} and
{@link <a HREF=\"package-summary.html#package_description\">javax.xml.soap<a>}
for details.
"
      classrelation 4786050 // <generalisation>
	relation 4786050 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4786050 // <generalisation>
	  b parent class_ref 1426434 // Node
      end

      classrelation 4786178 // <generalisation>
	relation 4786178 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4786178 // <generalisation>
	  b parent class_ref 648194 // Element
      end

      operation 12055170 "addChildElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPElement</code> object initialized with the
given <code>Name</code> object and adds the new element to this
<code>SOAPElement</code> object.
<P>
This method may be deprecated in a future release of SAAJ in favor of
addChildElement(javax.xml.namespace.QName)

@param name a <code>Name</code> object with the XML name for the
       new element

@return the new <code>SOAPElement</code> object that was created
@exception SOAPException if there is an error in creating the
                         <code>SOAPElement</code> object
@see SOAPElement#addChildElement(javax.xml.namespace.QName)
"
      end

      operation 12055298 "addChildElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "qname" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPElement</code> object initialized with the given
<code>QName</code> object and adds the new element to this <code>SOAPElement</code>
 object. The  <i>namespace</i>, <i>localname</i> and <i>prefix</i> of the new
<code>SOAPElement</code> are all taken  from the <code>qname</code> argument.

@param qname a <code>QName</code> object with the XML name for the
       new element

@return the new <code>SOAPElement</code> object that was created
@exception SOAPException if there is an error in creating the
                         <code>SOAPElement</code> object
@see SOAPElement#addChildElement(Name)
@since SAAJ 1.3
"
      end

      operation 12055426 "addChildElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPElement</code> object initialized with the
specified local name and adds the new element to this
<code>SOAPElement</code> object.
The new  <code>SOAPElement</code> inherits any in-scope default namespace.

@param localName a <code>String</code> giving the local name for
         the element
@return the new <code>SOAPElement</code> object that was created
@exception SOAPException if there is an error in creating the
                         <code>SOAPElement</code> object
"
      end

      operation 12055554 "addChildElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 2
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPElement</code> object initialized with the
specified local name and prefix and adds the new element to this
<code>SOAPElement</code> object.

@param localName a <code>String</code> giving the local name for
       the new element
@param prefix a <code>String</code> giving the namespace prefix for
       the new element

@return the new <code>SOAPElement</code> object that was created
@exception SOAPException if the <code>prefix</code> is not valid in the
        context of this <code>SOAPElement</code> or  if there is an error in creating the
                         <code>SOAPElement</code> object
"
      end

      operation 12055682 "addChildElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 3
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPElement</code> object initialized with the
specified local name, prefix, and URI and adds the new element to this
<code>SOAPElement</code> object.

@param localName a <code>String</code> giving the local name for
       the new element
@param prefix a <code>String</code> giving the namespace prefix for
       the new element
@param uri a <code>String</code> giving the URI of the namespace
       to which the new element belongs

@return the new <code>SOAPElement</code> object that was created
@exception SOAPException if there is an error in creating the
                         <code>SOAPElement</code> object
"
      end

      operation 12055810 "addChildElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "element" type class_ref 1426306 // SOAPElement
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Add a <code>SOAPElement</code> as a child of this
<code>SOAPElement</code> instance. The <code>SOAPElement</code>
is expected to be created by a
<code>SOAPFactory</code>. Callers should not rely on the
element instance being added as is into the XML
tree. Implementations could end up copying the content
of the <code>SOAPElement</code> passed into an instance of
a different <code>SOAPElement</code> implementation. For
instance if <code>addChildElement()</code> is called on a
<code>SOAPHeader</code>, <code>element</code> will be copied
into an instance of a <code>SOAPHeaderElement</code>.

<P>The fragment rooted in <code>element</code> is either added
as a whole or not at all, if there was an error.

<P>The fragment rooted in <code>element</code> cannot contain
elements named \"Envelope\", \"Header\" or \"Body\" and in the SOAP
namespace. Any namespace prefixes present in the fragment
should be fully resolved using appropriate namespace
declarations within the fragment itself.

@param element the <code>SOAPElement</code> to be added as a
               new child

@exception SOAPException if there was an error in adding this
                         element as a child

@return an instance representing the new SOAP element that was
        actually added to the tree.
"
      end

      operation 12055938 "removeContents"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Detaches all children of this <code>SOAPElement</code>.
<p>
This method is useful for rolling back the construction of partially
completed <code>SOAPHeaders</code> and <code>SOAPBodys</code> in
preparation for sending a fault when an error condition is detected. It
is also useful for recycling portions of a document within a SOAP
message.

@since SAAJ 1.2
"
      end

      operation 12056066 "addTextNode"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "text" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>Text</code> object initialized with the given
<code>String</code> and adds it to this <code>SOAPElement</code> object.

@param text a <code>String</code> object with the textual content to be added

@return the <code>SOAPElement</code> object into which
        the new <code>Text</code> object was inserted
@exception SOAPException if there is an error in creating the
                   new <code>Text</code> object or if it is not legal to
                     attach it as a child to this
                     <code>SOAPElement</code>
"
      end

      operation 12056194 "addAttribute"
	public return_type class_ref 1426306 // SOAPElement
	nparams 2
	  param inout name "name" type class_ref 1426562 // Name
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an attribute with the specified name and value to this
<code>SOAPElement</code> object.

@param name a <code>Name</code> object with the name of the attribute
@param value a <code>String</code> giving the value of the attribute
@return the <code>SOAPElement</code> object into which the attribute was
        inserted

@exception SOAPException if there is an error in creating the
                         Attribute, or it is invalid to set
an attribute with <code>Name</code>
<code>name</code> on this SOAPElement.
@see SOAPElement#addAttribute(javax.xml.namespace.QName, String)
"
      end

      operation 12056322 "addAttribute"
	public return_type class_ref 1426306 // SOAPElement
	nparams 2
	  param inout name "qname" type class_ref 673666 // QName
	  param inout name "value" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an attribute with the specified name and value to this
<code>SOAPElement</code> object.

@param qname a <code>QName</code> object with the name of the attribute
@param value a <code>String</code> giving the value of the attribute
@return the <code>SOAPElement</code> object into which the attribute was
        inserted

@exception SOAPException if there is an error in creating the
                         Attribute, or it is invalid to set
an attribute with <code>QName</code>
<code>qname</code> on this SOAPElement.
@see SOAPElement#addAttribute(Name, String)
@since SAAJ 1.3
"
      end

      operation 12056450 "addNamespaceDeclaration"
	public return_type class_ref 1426306 // SOAPElement
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a namespace declaration with the specified prefix and URI to this
<code>SOAPElement</code> object.

@param prefix a <code>String</code> giving the prefix of the namespace
@param uri a <code>String</code> giving the uri of the namespace
@return the <code>SOAPElement</code> object into which this
         namespace declaration was inserted.

@exception SOAPException if there is an error in creating the
                         namespace
"
      end

      operation 12056578 "getAttributeValue"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the attribute with the specified name.

@param name a <code>Name</code> object with the name of the attribute
@return a <code>String</code> giving the value of the specified
        attribute, Null if there is no such attribute
@see SOAPElement#getAttributeValue(javax.xml.namespace.QName)
"
      end

      operation 12056706 "getAttributeValue"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "qname" type class_ref 673666 // QName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the attribute with the specified qname.

@param qname a <code>QName</code> object with the qname of the attribute
@return a <code>String</code> giving the value of the specified
        attribute, Null if there is no such attribute
@see SOAPElement#getAttributeValue(Name)
@since SAAJ 1.3
"
      end

      operation 12056834 "getAllAttributes"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all of the attribute
<code>Name</code> objects in this
<code>SOAPElement</code> object. The iterator can be used to get
the attribute names, which can then be passed to the method
<code>getAttributeValue</code> to retrieve the value of each
attribute.

@see SOAPElement#getAllAttributesAsQNames()
@return an iterator over the names of the attributes
"
      end

      operation 12056962 "getAllAttributesAsQNames"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all of the attributes
in this <code>SOAPElement</code>  as <code>QName</code> objects.
The iterator can be used to get the attribute QName, which can then
be passed to the method <code>getAttributeValue</code> to retrieve
the value of each attribute.

@return an iterator over the QNames of the attributes
@see SOAPElement#getAllAttributes()
@since SAAJ 1.3
"
      end

      operation 12057090 "getNamespaceURI"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the URI of the namespace that has the given prefix.

@param prefix a <code>String</code> giving the prefix of the namespace
       for which to search
@return a <code>String</code> with the uri of the namespace that has
       the given prefix
"
      end

      operation 12057218 "getNamespacePrefixes"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over the namespace prefix
<code>String</code>s declared by this element. The prefixes returned by
this iterator can be passed to the method
<code>getNamespaceURI</code> to retrieve the URI of each namespace.

@return an iterator over the namespace prefixes in this
        <code>SOAPElement</code> object
"
      end

      operation 12057346 "getVisibleNamespacePrefixes"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over the namespace prefix
<code>String</code>s visible to this element. The prefixes returned by
this iterator can be passed to the method
<code>getNamespaceURI</code> to retrieve the URI of each namespace.

@return an iterator over the namespace prefixes are within scope of this
        <code>SOAPElement</code> object

@since SAAJ 1.2
"
      end

      operation 12057474 "createQName"
	public return_type class_ref 673666 // QName
	nparams 2
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "prefix" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>QName</code> whose namespace URI is the one associated
with the parameter, <code>prefix</code>, in the context of this
<code>SOAPElement</code>. The remaining elements of the new
<code>QName</code> are taken directly from the parameters,
<code>localName</code> and <code>prefix</code>.

@param localName
         a <code>String</code> containing the local part of the name.
@param prefix
         a <code>String</code> containing the prefix for the name.

@return a <code>QName</code> with the specified <code>localName</code>
         and <code>prefix</code>, and with a namespace that is associated
         with the <code>prefix</code> in the context of this
         <code>SOAPElement</code>. This namespace will be the same as
         the one that would be returned by
         <code>{@link #getNamespaceURI(String)}</code> if it were given
         <code>prefix</code> as it's parameter.

@exception SOAPException if the <code>QName</code> cannot be created.

@since SAAJ 1.3
"
      end

      operation 12057602 "getElementName"
	public return_type class_ref 1426562 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this <code>SOAPElement</code> object.

@return a <code>Name</code> object with the name of this
        <code>SOAPElement</code> object
"
      end

      operation 12057730 "getElementQName"
	public return_type class_ref 673666 // QName
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the qname of this <code>SOAPElement</code> object.

@return a <code>QName</code> object with the qname of this
        <code>SOAPElement</code> object
@see SOAPElement#getElementName()
@since SAAJ 1.3
"
      end

      operation 12057858 "setElementQName"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "newName" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the name of this <code>Element</code> to <code>newName</code> if
possible. SOAP Defined elements such as SOAPEnvelope, SOAPHeader, SOAPBody
etc. cannot have their names changed using this method. Any attempt to do
so will result in a  SOAPException being thrown.
<P>
Callers should not rely on the element instance being renamed as is.
Implementations could end up copying the content of the
<code>SOAPElement</code> to a renamed instance.

@param newName the new name for the <code>Element</code>.

@exception SOAPException if changing the name of this <code>Element</code>
                         is not allowed.
@return The renamed Node

@since SAAJ 1.3
"
      end

      operation 12057986 "removeAttribute"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the attribute with the specified name.

@param name the <code>Name</code> object with the name of the
       attribute to be removed
@return <code>true</code> if the attribute was
        removed successfully; <code>false</code> if it was not
@see SOAPElement#removeAttribute(javax.xml.namespace.QName)
"
      end

      operation 12058114 "removeAttribute"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "qname" type class_ref 673666 // QName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the attribute with the specified qname.

@param qname the <code>QName</code> object with the qname of the
       attribute to be removed
@return <code>true</code> if the attribute was
        removed successfully; <code>false</code> if it was not
@see SOAPElement#removeAttribute(Name)
@since SAAJ 1.3
"
      end

      operation 12058242 "removeNamespaceDeclaration"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "prefix" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the namespace declaration corresponding to the given prefix.

@param prefix a <code>String</code> giving the prefix for which
       to search
@return <code>true</code> if the namespace declaration was
        removed successfully; <code>false</code> if it was not
"
      end

      operation 12058370 "getChildElements"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all the immediate child
{@link Node}s of this element. This includes <code>javax.xml.soap.Text</code>
objects as well as <code>SOAPElement</code> objects.
<p>
Calling this method may cause child <code>Element</code>,
<code>SOAPElement</code> and <code>org.w3c.dom.Text</code> nodes to be
replaced by <code>SOAPElement</code>, <code>SOAPHeaderElement</code>,
<code>SOAPBodyElement</code> or <code>javax.xml.soap.Text</code> nodes as
appropriate for the type of this parent node. As a result the calling
application must treat any existing references to these child nodes that
have been obtained through DOM APIs as invalid and either discard them or
refresh them with the values returned by this <code>Iterator</code>. This
behavior can be avoided by calling the equivalent DOM APIs. See
{@link <a HREF=\"package-summary.html#package_description\">javax.xml.soap<a>}
for more details.

@return an iterator with the content of this <code>SOAPElement</code>
        object
"
      end

      operation 12058498 "getChildElements"
	public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all the immediate child
{@link Node}s of this element with the specified name. All of these
children will be <code>SOAPElement</code> nodes.
<p>
Calling this method may cause child <code>Element</code>,
<code>SOAPElement</code> and <code>org.w3c.dom.Text</code> nodes to be
replaced by <code>SOAPElement</code>, <code>SOAPHeaderElement</code>,
<code>SOAPBodyElement</code> or <code>javax.xml.soap.Text</code> nodes as
appropriate for the type of this parent node. As a result the calling
application must treat any existing references to these child nodes that
have been obtained through DOM APIs as invalid and either discard them or
refresh them with the values returned by this <code>Iterator</code>. This
behavior can be avoided by calling the equivalent DOM APIs. See
{@link <a HREF=\"package-summary.html#package_description\">javax.xml.soap<a>}
for more details.

@param name a <code>Name</code> object with the name of the child
       elements to be returned

@return an <code>Iterator</code> object over all the elements
        in this <code>SOAPElement</code> object with the
        specified name
@see SOAPElement#getChildElements(javax.xml.namespace.QName)
"
      end

      operation 12058626 "getChildElements"
	public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "qname" type class_ref 673666 // QName
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all the immediate child
{@link Node}s of this element with the specified qname. All of these
children will be <code>SOAPElement</code> nodes.
<p>
Calling this method may cause child <code>Element</code>,
<code>SOAPElement</code> and <code>org.w3c.dom.Text</code> nodes to be
replaced by <code>SOAPElement</code>, <code>SOAPHeaderElement</code>,
<code>SOAPBodyElement</code> or <code>javax.xml.soap.Text</code> nodes as
appropriate for the type of this parent node. As a result the calling
application must treat any existing references to these child nodes that
have been obtained through DOM APIs as invalid and either discard them or
refresh them with the values returned by this <code>Iterator</code>. This
behavior can be avoided by calling the equivalent DOM APIs. See
{@link <a HREF=\"package-summary.html#package_description\">javax.xml.soap<a>}
for more details.

@param qname a <code>QName</code> object with the qname of the child
       elements to be returned

@return an <code>Iterator</code> object over all the elements
        in this <code>SOAPElement</code> object with the
        specified qname
@see SOAPElement#getChildElements(Name)
@since SAAJ 1.3
"
      end

      operation 12058754 "setEncodingStyle"
	public explicit_return_type "void"
	nparams 1
	  param inout name "encodingStyle" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the encoding style for this <code>SOAPElement</code> object
to one specified.

@param encodingStyle a <code>String</code> giving the encoding style

@exception IllegalArgumentException if there was a problem in the
           encoding style being set.
@exception SOAPException if setting the encodingStyle is invalid for this SOAPElement.
@see #getEncodingStyle
"
      end

      operation 12058882 "getEncodingStyle"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoding style for this <code>SOAPElement</code> object.

@return a <code>String</code> giving the encoding style

@see #setEncodingStyle
"
      end
    end

    class 1426434 "Node"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A representation of a node (element) in an XML document.
This interface extnends the standard DOM Node interface with methods for
getting and setting the value of a node, for
getting and setting the parent of a node, and for removing a node.
"
      classrelation 4785922 // <generalisation>
	relation 4785922 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4785922 // <generalisation>
	  b parent class_ref 317570 // Node
      end

      operation 12054402 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this node if this is a <code>Text</code> node or the
value of the immediate child of this node otherwise.
If there is an immediate child of this <code>Node</code> that it is a
<code>Text</code> node then it's value will be returned. If there is
more than one <code>Text</code> node then the value of the first
<code>Text</code> Node will be returned.
Otherwise <code>null</code> is returned.

@return a <code>String</code> with the text of this node if this is a
         <code>Text</code> node or the text contained by the first
         immediate child of this <code>Node</code> object that is a
         <code>Text</code> object if such a child exists;
         <code>null</code> otherwise.
"
      end

      operation 12054530 "setValue"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If this is a Text node then this method will set its value,
otherwise it sets the value of  the immediate (Text) child of this node.
The value of the immediate child of this node can be set only if, there is
one child node and that node is a <code>Text</code> node, or if
there are no children in which case a child <code>Text</code> node will be
created.

@exception IllegalStateException if the node is not a <code>Text</code>
             node and either has more than one child node or has a child
             node that is not a <code>Text</code> node.

@since SAAJ 1.2
"
      end

      operation 12054658 "setParentElement"
	public explicit_return_type "void"
	nparams 1
	  param inout name "parent" type class_ref 1426306 // SOAPElement
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the parent of this <code>Node</code> object to the given
<code>SOAPElement</code> object.

@param parent the <code>SOAPElement</code> object to be set as
      the parent of this <code>Node</code> object

@exception SOAPException if there is a problem in setting the
                         parent to the given element
@see #getParentElement
"
      end

      operation 12054786 "getParentElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent element of this <code>Node</code> object.
This method can throw an <code>UnsupportedOperationException</code>
if the tree is not kept in memory.

@return the <code>SOAPElement</code> object that is the parent of
        this <code>Node</code> object or <code>null</code> if this
        <code>Node</code> object is root

@exception UnsupportedOperationException if the whole tree is not
           kept in memory
@see #setParentElement
"
      end

      operation 12054914 "detachNode"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes this <code>Node</code> object from the tree.
"
      end

      operation 12055042 "recycleNode"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the implementation that this <code>Node</code>
object is no longer being used by the application and that the
implementation is free to reuse this object for nodes that may
be created later.
<P>
Calling the method <code>recycleNode</code> implies that the method
<code>detachNode</code> has been called previously.
"
      end
    end

    class 1426562 "Name"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A representation of an XML name.  This interface provides methods for
getting the local and namespace-qualified names and also for getting the
prefix associated with the namespace for the name. It is also possible
to get the URI of the namespace.
<P>
The following is an example of a namespace declaration in an element.
<PRE>
  &lt;wombat:GetLastTradePrice xmlns:wombat=\"http://www.wombat.org/trader\"&gt;
</PRE>
(\"xmlns\" stands for \"XML namespace\".)
The following
shows what the methods in the <code>Name</code> interface will return.
<UL>
 <LI><code>getQualifiedName</code> will return \"prefix:LocalName\" =
     \"WOMBAT:GetLastTradePrice\"
 <LI><code>getURI</code> will return \"http://www.wombat.org/trader\"
 <LI><code>getLocalName</code> will return \"GetLastTracePrice\"
 <LI><code>getPrefix</code> will return \"WOMBAT\"
</UL>
<P>
XML namespaces are used to disambiguate SOAP identifiers from
application-specific identifiers.
<P>
<code>Name</code> objects are created using the method
<code>SOAPEnvelope.createName</code>, which has two versions.
One method creates <code>Name</code> objects with
a local name, a namespace prefix, and a namespace URI.
 and the second creates <code>Name</code> objects with just a local name.
The following line of
code, in which <i>se</i> is a <code>SOAPEnvelope</code> object, creates a new
<code>Name</code> object with all three.
<PRE>
    Name name = se.createName(\"GetLastTradePrice\", \"WOMBAT\",
                               \"http://www.wombat.org/trader\");
</PRE>
The following line of code gives an example of how a <code>Name</code> object
can be used. The variable <i>element</i> is a <code>SOAPElement</code> object.
This code creates a new <code>SOAPElement</code> object with the given name and
adds it to <i>element</i>.
<PRE>
    element.addChildElement(name);
</PRE>
<P>
The <code>Name</code> interface may be deprecated in a future release of SAAJ
in favor of <code>javax.xml.namespace.QName<code>
@see SOAPEnvelope#createName(String, String, String) SOAPEnvelope.createName
@see SOAPFactory#createName(String, String, String) SOAPFactory.createName
"
      operation 12062850 "getLocalName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the local name part of the XML name that this <code>Name</code>
object represents.

@return a string giving the local name
"
      end

      operation 12062978 "getQualifiedName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the namespace-qualified name of the XML name that this
<code>Name</code> object represents.

@return the namespace-qualified name as a string
"
      end

      operation 12063106 "getPrefix"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the prefix that was specified when this <code>Name</code> object
was initialized. This prefix is associated with the namespace for the XML
name that this <code>Name</code> object represents.

@return the prefix as a string
"
      end

      operation 12063234 "getURI"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the URI of the namespace for the XML
name that this <code>Name</code> object represents.

@return the URI as a string
"
      end
    end

    class 1426690 "DetailEntry"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The content for a <code>Detail</code> object, giving details for
a <code>SOAPFault</code> object.  A <code>DetailEntry</code> object,
which carries information about errors related to the <code>SOAPBody</code>
object that contains it, is application-specific.
"
      classrelation 4786562 // <generalisation>
	relation 4786562 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4786562 // <generalisation>
	  b parent class_ref 1426306 // SOAPElement
      end
    end

    class 1426818 "FactoryFinder"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      operation 12059394 "newInstance"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of the specified class using the specified
<code>ClassLoader</code> object.

@exception SOAPException if the given class could not be found
           or could not be instantiated
"
      end

      operation 12059522 "find"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "factoryId" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the implementation <code>Class</code> object for the given
factory name, or null if that fails.
<P>
This method is package private so that this code can be shared.

@return the <code>Class</code> object of the specified message factory;
        or <code>null</code>

@param factoryId             the name of the factory to find, which is
                             a system property
@exception SOAPException if there is a SOAP error
"
      end

      operation 12059650 "find"
	class_operation package return_type class_ref 129538 // Object
	nparams 2
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "fallbackClassName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the implementation <code>Class</code> object for the given
factory name, or if that fails, finds the <code>Class</code> object
for the given fallback class name. The arguments supplied must be
used in order. If using the first argument is successful, the second
one will not be used.
<P>
This method is package private so that this code can be shared.

@return the <code>Class</code> object of the specified message factory;
        may be <code>null</code>

@param factoryId             the name of the factory to find, which is
                             a system property
@param fallbackClassName     the implementation class name, which is
                             to be used only if nothing else
                             is found; <code>null</code> to indicate that
                             there is no fallback class name
@exception SOAPException if there is a SOAP error
"
      end

      operation 12059778 "find"
	class_operation package return_type class_ref 129538 // Object
	nparams 3
	  param inout name "factoryId" type class_ref 128130 // String
	  param inout name "defaultClassName" type class_ref 128130 // String
	  param inout name "tryFallback" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds the implementation <code>Class</code> object for the given
factory name, or if that fails, finds the <code>Class</code> object
for the given default class name, but only if <code>tryFallback</code>
is <code>true</code>.  The arguments supplied must be used in order
If using the first argument is successful, the second one will not
be used.  Note the default class name may be needed even if fallback
is not to be attempted, so certain error conditions can be handled.
<P>
This method is package private so that this code can be shared.

@return the <code>Class</code> object of the specified message factory;
        may not be <code>null</code>

@param factoryId             the name of the factory to find, which is
                             a system property
@param defaultClassName      the implementation class name, which is
                             to be used only if nothing else
                             is found; <code>null</code> to indicate
                             that there is no default class name
@param tryFallback           whether to try the default class as a
                             fallback
@exception SOAPException if there is a SOAP error
"
      end

      operation 12059906 "safeLoadClass"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "className" type class_ref 128130 // String
	  param inout name "classLoader" type class_ref 129026 // ClassLoader
	nexceptions 1
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Loads the class, provided that the calling thread has an access to the
class being loaded. If this is the specified default factory class and it
is restricted by package.access we get a SecurityException and can do a
Class.forName() on it so it will be loaded by the bootstrap class loader.
"
      end

      operation 12060034 "isDefaultImplementation"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "className" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1426946 "MessageFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A factory for creating <code>SOAPMessage</code> objects.
<P>
A SAAJ client can create a <code>MessageFactory</code> object
using the method <code>newInstance</code>, as shown in the following
lines of code.
<PRE>
      MessageFactory mf = MessageFactory.newInstance();
      MessageFactory mf12 = MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
</PRE>
<P>
All <code>MessageFactory</code> objects, regardless of how they are
created, will produce <code>SOAPMessage</code> objects that
have the following elements by default:
<UL>
 <LI>A <code>SOAPPart</code> object
 <LI>A <code>SOAPEnvelope</code> object
 <LI>A <code>SOAPBody</code> object
 <LI>A <code>SOAPHeader</code> object
</UL>
In some cases, specialized MessageFactory objects may be obtained that produce messages
prepopulated with additional entries in the <code>SOAPHeader</code> object and the
<code>SOAPBody</code> object.
The content of a new <code>SOAPMessage</code> object depends on which of the two
<code>MessageFactory</code> methods is used to create it.
<UL>
 <LI><code>createMessage()</code> <BR>
     This is the method clients would normally use to create a request message.
 <LI><code>createMessage(MimeHeaders, java.io.InputStream)</code> -- message has
      content from the <code>InputStream</code> object and headers from the
      <code>MimeHeaders</code> object <BR>
       This method can be used internally by a service implementation to
       create a message that is a response to a request.
</UL>
"
      classrelation 4786690 // DEFAULT_MESSAGE_FACTORY (<unidirectional association>)
	relation 4786690 --->
	  a role_name "DEFAULT_MESSAGE_FACTORY" init_value " \"com.sun.xml.internal.messaging.saaj.soap.ver1_1.SOAPMessageFactory1_1Impl\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4786690 // DEFAULT_MESSAGE_FACTORY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4786818 // MESSAGE_FACTORY_PROPERTY (<unidirectional association>)
	relation 4786818 --->
	  a role_name "MESSAGE_FACTORY_PROPERTY" init_value " \"javax.xml.soap.MessageFactory\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4786818 // MESSAGE_FACTORY_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12060162 "newInstance"
	class_operation public return_type class_ref 1426946 // MessageFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>MessageFactory</code> object that is an instance
of the default implementation (SOAP 1.1),

This method uses the following ordered lookup procedure to determine the MessageFactory implementation class to load:
<UL>
 <LI> Use the javax.xml.soap.MessageFactory system property.
 <LI> Use the properties file \"lib/jaxm.properties\" in the JRE directory. This configuration file is in standard
java.util.Properties format and contains the fully qualified name of the implementation class with the key being the
system property defined above.
 <LI> Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API
will look for a classname in the file META-INF/services/javax.xml.soap.MessageFactory in jars available to the runtime.
 <LI> Use the SAAJMetaFactory instance to locate the MessageFactory implementation class.
</UL>


@return a new instance of a <code>MessageFactory</code>

@exception SOAPException if there was an error in creating the
           default implementation of the
           <code>MessageFactory</code>.
@see SAAJMetaFactory
"
      end

      operation 12060290 "newInstance"
	class_operation public return_type class_ref 1426946 // MessageFactory
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>MessageFactory</code> object that is an instance
of the specified implementation.  May be a dynamic message factory,
a SOAP 1.1 message factory, or a SOAP 1.2 message factory. A dynamic
message factory creates messages based on the MIME headers specified
as arguments to the <code>createMessage</code> method.

This method uses the SAAJMetaFactory to locate the implementation class
and create the MessageFactory instance.

@return a new instance of a <code>MessageFactory</code>

@param protocol  a string constant representing the class of the
                  specified message factory implementation. May be
                  either <code>DYNAMIC_SOAP_PROTOCOL</code>,
                  <code>DEFAULT_SOAP_PROTOCOL</code> (which is the same
                  as) <code>SOAP_1_1_PROTOCOL</code>, or
                  <code>SOAP_1_2_PROTOCOL</code>.

@exception SOAPException if there was an error in creating the
           specified implementation of  <code>MessageFactory</code>.
@see SAAJMetaFactory
@since SAAJ 1.3
"
      end

      operation 12060418 "createMessage"
	abstract public return_type class_ref 1427074 // SOAPMessage
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPMessage</code> object with the default
<code>SOAPPart</code>, <code>SOAPEnvelope</code>, <code>SOAPBody</code>,
and <code>SOAPHeader</code> objects. Profile-specific message factories
can choose to prepopulate the <code>SOAPMessage</code> object with
profile-specific headers.
<P>
Content can be added to this message's <code>SOAPPart</code> object, and
the message can be sent \"as is\" when a message containing only a SOAP part
is sufficient. Otherwise, the <code>SOAPMessage</code> object needs
to create one or more <code>AttachmentPart</code> objects and
add them to itself. Any content that is not in XML format must be
in an <code>AttachmentPart</code> object.

@return a new <code>SOAPMessage</code> object
@exception SOAPException if a SOAP error occurs
@exception UnsupportedOperationException if the protocol of this
     <code>MessageFactory</code> instance is <code>DYNAMIC_SOAP_PROTOCOL</code>
"
      end

      operation 12060546 "createMessage"
	abstract public return_type class_ref 1427074 // SOAPMessage
	nparams 2
	  param inout name "headers" type class_ref 1427202 // MimeHeaders
	  param inout name "in" type class_ref 146434 // InputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internalizes the contents of the given <code>InputStream</code> object into a
new <code>SOAPMessage</code> object and returns the <code>SOAPMessage</code>
object.

@param in the <code>InputStream</code> object that contains the data
          for a message
@param headers the transport-specific headers passed to the
       message in a transport-independent fashion for creation of the
       message
@return a new <code>SOAPMessage</code> object containing the data from
        the given <code>InputStream</code> object

@exception IOException if there is a problem in reading data from
           the input stream

@exception SOAPException may be thrown if the message is invalid

@exception IllegalArgumentException if the <code>MessageFactory</code>
     requires one or more MIME headers to be present in the
     <code>headers</code> parameter and they are missing.
     <code>MessageFactory</code> implementations for
     <code>SOAP_1_1_PROTOCOL</code> or
     <code>SOAP_1_2_PROTOCOL</code> must not throw
     <code>IllegalArgumentException</code> for this reason.
"
      end
    end

    class 1427074 "SOAPMessage"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The root class for all SOAP messages. As transmitted on the \"wire\", a SOAP
message is an XML document or a MIME message whose first body part is an
XML/SOAP document.
<P>
A <code>SOAPMessage</code> object consists of a SOAP part and optionally
one or more attachment parts. The SOAP part for a <code>SOAPMessage</code>
object is a <code>SOAPPart</code> object, which contains information used
for message routing and identification, and which can contain
application-specific content. All data in the SOAP Part of a message must be
in XML format.
<P>
A new <code>SOAPMessage</code> object contains the following by default:
<UL>
  <LI>A <code>SOAPPart</code> object
  <LI>A <code>SOAPEnvelope</code> object
  <LI>A <code>SOAPBody</code> object
  <LI>A <code>SOAPHeader</code> object
</UL>
The SOAP part of a message can be retrieved by calling the method <code>SOAPMessage.getSOAPPart()</code>.
The <code>SOAPEnvelope</code> object is retrieved from the <code>SOAPPart</code>
object, and the <code>SOAPEnvelope</code> object is used to retrieve the
<code>SOAPBody</code> and <code>SOAPHeader</code> objects.

<PRE>
    SOAPPart sp = message.getSOAPPart();
    SOAPEnvelope se = sp.getEnvelope();
    SOAPBody sb = se.getBody();
    SOAPHeader sh = se.getHeader();
</PRE>

<P>
In addition to the mandatory <code>SOAPPart</code> object, a <code>SOAPMessage</code>
object may contain zero or more <code>AttachmentPart</code> objects, each
of which contains application-specific data. The <code>SOAPMessage</code>
interface provides methods for creating <code>AttachmentPart</code>
objects and also for adding them to a <code>SOAPMessage</code> object. A
party that has received a <code>SOAPMessage</code> object can examine its
contents by retrieving individual attachment parts.
<P>
Unlike the rest of a SOAP message, an attachment is not required to be in
XML format and can therefore be anything from simple text to an image file.
Consequently, any message content that is not in XML format must be in an
<code>AttachmentPart</code> object.
<P>
A <code>MessageFactory</code> object may create <code>SOAPMessage</code>
objects with behavior that is specialized to a particular implementation or
application of SAAJ. For instance, a <code>MessageFactory</code> object
may produce <code>SOAPMessage</code> objects that conform to a particular
Profile such as ebXML. In this case a <code>MessageFactory</code> object
might produce <code>SOAPMessage</code> objects that are initialized with
ebXML headers.
<P>
In order to ensure backward source compatibility, methods that are added to
this class after version 1.1 of the SAAJ specification are all concrete
instead of abstract and they all have default implementations. Unless
otherwise noted in the JavaDocs for those methods the default
implementations simply throw an <code>UnsupportedOperationException</code>
and the SAAJ implementation code must override them with methods that
provide the specified behavior. Legacy client code does not have this
restriction, however, so long as there is no claim made that it conforms to
some later version of the specification than it was originally written for.
A legacy class that extends the SOAPMessage class can be compiled and/or run
against succeeding versions of the SAAJ API without modification. If such a
class was correctly implemented then it will continue to behave correctly
relative to the version of the specification against which it was written.

@see MessageFactory
@see AttachmentPart
"
      classrelation 4793218 // CHARACTER_SET_ENCODING (<unidirectional association>)
	relation 4793218 --->
	  a role_name "CHARACTER_SET_ENCODING" init_value "
        \"javax.xml.soap.character-set-encoding\"" class_relation const_relation public
	    comment "
Specifies the character type encoding for the SOAP Message. Valid values
include \"utf-8\" and \"utf-16\". See vendor documentation for additional
supported values. The default is \"utf-8\".

@see SOAPMessage#setProperty(String, Object) SOAPMessage.setProperty
@since SAAJ 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4793218 // CHARACTER_SET_ENCODING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4793346 // WRITE_XML_DECLARATION (<unidirectional association>)
	relation 4793346 --->
	  a role_name "WRITE_XML_DECLARATION" init_value "
        \"javax.xml.soap.write-xml-declaration\"" class_relation const_relation public
	    comment "
Specifies whether the SOAP Message will contain an XML declaration when
it is sent. The only valid values are \"true\" and \"false\". The default is
\"false\".

@see SOAPMessage#setProperty(String, Object) SOAPMessage.setProperty
@since SAAJ 1.2

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4793346 // WRITE_XML_DECLARATION (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12077570 "setContentDescription"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "description" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the description of this <code>SOAPMessage</code> object's
content with the given description.

@param description a <code>String</code> describing the content of this
        message
@see #getContentDescription
"
      end

      operation 12077698 "getContentDescription"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves a description of this <code>SOAPMessage</code> object's
content.

@return a <code>String</code> describing the content of this
        message or <code>null</code> if no description has been set
@see #setContentDescription
"
      end

      operation 12077826 "getSOAPPart"
	abstract public return_type class_ref 1429250 // SOAPPart
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the SOAP part of this <code>SOAPMessage</code> object.
<P>
<code>SOAPMessage</code> object contains one or more attachments, the
SOAP Part must be the first MIME body part in the message.

@return the <code>SOAPPart</code> object for this <code>SOAPMessage</code>
        object
"
      end

      operation 12077954 "getSOAPBody"
	public return_type class_ref 1427970 // SOAPBody
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the SOAP Body contained in this <code>SOAPMessage</code> object.
<p>

@return the <code>SOAPBody</code> object contained by this <code>SOAPMessage</code>
        object
@exception SOAPException
              if the SOAP Body does not exist or cannot be retrieved
@since SAAJ 1.2
"
      end

      operation 12078082 "getSOAPHeader"
	public return_type class_ref 1428994 // SOAPHeader
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the SOAP Header contained in this <code>SOAPMessage</code>
object.
<p>

@return the <code>SOAPHeader</code> object contained by this <code>SOAPMessage</code>
        object
@exception SOAPException
              if the SOAP Header does not exist or cannot be retrieved
@since SAAJ 1.2
"
      end

      operation 12078210 "removeAllAttachments"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all <code>AttachmentPart</code> objects that have been added
to this <code>SOAPMessage</code> object.
<P>
This method does not touch the SOAP part.
"
      end

      operation 12078338 "countAttachments"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a count of the number of attachments in this message. This count
does not include the SOAP part.

@return the number of <code>AttachmentPart</code> objects that are
        part of this <code>SOAPMessage</code> object
"
      end

      operation 12078466 "getAttachments"
	abstract public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all the <code>AttachmentPart</code> objects that are part of
this <code>SOAPMessage</code> object.

@return an iterator over all the attachments in this message
"
      end

      operation 12078594 "getAttachments"
	abstract public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "headers" type class_ref 1427202 // MimeHeaders
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all the <code>AttachmentPart</code> objects that have header
entries that match the specified headers. Note that a returned
attachment could have headers in addition to those specified.

@param headers
          a <code>MimeHeaders</code> object containing the MIME
          headers for which to search
@return an iterator over all attachments that have a header that matches
        one of the given headers
"
      end

      operation 12078722 "removeAttachments"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "headers" type class_ref 1427202 // MimeHeaders
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all the <code>AttachmentPart</code> objects that have header
entries that match the specified headers. Note that the removed
attachment could have headers in addition to those specified.

@param headers
          a <code>MimeHeaders</code> object containing the MIME
          headers for which to search
@since SAAJ 1.3
"
      end

      operation 12078850 "getAttachment"
	abstract public return_type class_ref 1425794 // AttachmentPart
	nparams 1
	  param inout name "element" type class_ref 1426306 // SOAPElement
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>AttachmentPart</code> object that is associated with an
attachment that is referenced by this <code>SOAPElement</code> or
<code>null</code> if no such attachment exists. References can be made
via an <code>href</code> attribute as described in
{@link <a href=\"http://www.w3.org/TR/SOAP-attachments#SOAPReferenceToAttachements\">SOAP Messages with Attachments</a>},
or via a single <code>Text</code> child node containing a URI as
described in the WS-I Attachments Profile 1.0 for elements of schema
type {@link <a href=\"http://www.ws-i.org/Profiles/AttachmentsProfile-1.0-2004-08-24.html\">ref:swaRef</a>}.  These two mechanisms must be supported.
The support for references via <code>href</code> attribute also implies that
this method should also be supported on an element that is an
<i>xop:Include</i> element (
{@link <a  href=\"http://www.w3.org/2000/xp/Group/3/06/Attachments/XOP.html\">XOP</a>}).
other reference mechanisms may be supported by individual
implementations of this standard. Contact your vendor for details.

@param  element The <code>SOAPElement</code> containing the reference to an Attachment
@return the referenced <code>AttachmentPart</code> or null if no such
         <code>AttachmentPart</code> exists or no reference can be
         found in this <code>SOAPElement</code>.
@throws SOAPException if there is an error in the attempt to access the
         attachment

@since SAAJ 1.3
"
      end

      operation 12078978 "addAttachmentPart"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "AttachmentPart" type class_ref 1425794 // AttachmentPart
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given <code>AttachmentPart</code> object to this <code>SOAPMessage</code>
object. An <code>AttachmentPart</code> object must be created before
it can be added to a message.

@param AttachmentPart
          an <code>AttachmentPart</code> object that is to become part
          of this <code>SOAPMessage</code> object
@exception IllegalArgumentException
"
      end

      operation 12079106 "createAttachmentPart"
	abstract public return_type class_ref 1425794 // AttachmentPart
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new empty <code>AttachmentPart</code> object. Note that the
method <code>addAttachmentPart</code> must be called with this new
<code>AttachmentPart</code> object as the parameter in order for it to
become an attachment to this <code>SOAPMessage</code> object.

@return a new <code>AttachmentPart</code> object that can be populated
        and added to this <code>SOAPMessage</code> object
"
      end

      operation 12079234 "createAttachmentPart"
	public return_type class_ref 1425794 // AttachmentPart
	nparams 1
	  param inout name "dataHandler" explicit_type "DataHandler"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <code>AttachmentPart</code> object and populates it using
the given <code>DataHandler</code> object.

@param dataHandler
          the <code>javax.activation.DataHandler</code> object that
          will generate the content for this <code>SOAPMessage</code>
          object
@return a new <code>AttachmentPart</code> object that contains data
        generated by the given <code>DataHandler</code> object
@exception IllegalArgumentException
              if there was a problem with the specified <code>DataHandler</code>
              object
@see javax.activation.DataHandler
@see javax.activation.DataContentHandler
"
      end

      operation 12079362 "getMimeHeaders"
	abstract public return_type class_ref 1427202 // MimeHeaders
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the transport-specific MIME headers for this <code>SOAPMessage</code>
object in a transport-independent fashion.

@return a <code>MimeHeaders</code> object containing the <code>MimeHeader</code>
        objects
"
      end

      operation 12079490 "createAttachmentPart"
	public return_type class_ref 1425794 // AttachmentPart
	nparams 2
	  param inout name "content" type class_ref 129538 // Object
	  param inout name "contentType" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an <code>AttachmentPart</code> object and populates it with
the specified data of the specified content type. The type of the
<code>Object</code> should correspond to the value given for the
<code>Content-Type</code>.

@param content
          an <code>Object</code> containing the content for the
          <code>AttachmentPart</code> object to be created
@param contentType
          a <code>String</code> object giving the type of content;
          examples are \"text/xml\", \"text/plain\", and \"image/jpeg\"
@return a new <code>AttachmentPart</code> object that contains the
        given data
@exception IllegalArgumentException
              may be thrown if the contentType does not match the type
              of the content object, or if there was no
              <code>DataContentHandler</code> object for the given
              content object
@see javax.activation.DataHandler
@see javax.activation.DataContentHandler
"
      end

      operation 12079618 "saveChanges"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this <code>SOAPMessage</code> object with all the changes that
have been made to it. This method is called automatically when
{@link SOAPMessage#writeTo(OutputStream)} is  called. However, if
changes are made to a message that was received or to one that has
already been sent, the method <code>saveChanges</code> needs to be
called explicitly in order to save the changes. The method <code>saveChanges</code>
also generates any changes that can be read back (for example, a
MessageId in profiles that support a message id). All MIME headers in a
message that is created for sending purposes are guaranteed to have
valid values only after <code>saveChanges</code> has been called.
<P>
In addition, this method marks the point at which the data from all
constituent <code>AttachmentPart</code> objects are pulled into the
message.
<P>

@exception <code>SOAPException</code> if there was a problem saving
              changes to this message.
"
      end

      operation 12079746 "saveRequired"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this <code>SOAPMessage</code> object needs to have
the method <code>saveChanges</code> called on it.

@return <code>true</code> if <code>saveChanges</code> needs to be
        called; <code>false</code> otherwise.
"
      end

      operation 12079874 "writeTo"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 2
	  exception class_ref 1425922 // SOAPException
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes this <code>SOAPMessage</code> object to the given output
stream. The externalization format is as defined by the SOAP 1.1 with
Attachments specification.
<P>
If there are no attachments, just an XML stream is written out. For
those messages that have attachments, <code>writeTo</code> writes a
MIME-encoded byte stream.
<P>
Note that this method does not write the transport-specific MIME Headers
of the Message

@param out
          the <code>OutputStream</code> object to which this <code>SOAPMessage</code>
          object will be written
@exception IOException
              if an I/O error occurs
@exception SOAPException
              if there was a problem in externalizing this SOAP message
"
      end

      operation 12080002 "setProperty"
	public explicit_return_type "void"
	nparams 2
	  param inout name "property" type class_ref 128130 // String
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified value with the specified property. If there was
already a value associated with this property, the old value is
replaced.
<p>
The valid property names include
{@link SOAPMessage#WRITE_XML_DECLARATION}  and
{@link SOAPMessage#CHARACTER_SET_ENCODING}. All of these standard SAAJ
properties are prefixed by \"javax.xml.soap\". Vendors may also add
implementation specific properties. These properties must be prefixed
with package names that are unique to the vendor.
<p>
Setting the property <code>WRITE_XML_DECLARATION</code> to <code>\"true\"</code>
will cause an XML Declaration to be written out at the start of the SOAP
message. The default value of \"false\" suppresses this declaration.
<p>
The property <code>CHARACTER_SET_ENCODING</code> defaults to the value
<code>\"utf-8\"</code> which causes the SOAP message to be encoded using
UTF-8. Setting <code>CHARACTER_SET_ENCODING</code> to <code>\"utf-16\"</code>
causes the SOAP message to be encoded using UTF-16.
<p>
Some implementations may allow encodings in addition to UTF-8 and
UTF-16. Refer to your vendor's documentation for details.

@param property
          the property with which the specified value is to be
          associated.
@param value
          the value to be associated with the specified property
@exception SOAPException
              if the property name is not recognized.
@since SAAJ 1.2
"
      end

      operation 12080130 "getProperty"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "property" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves value of the specified property.

@param property
          the name of the property to retrieve
@return the value associated with the named property or <code>null</code>
        if no such property exists.
@exception SOAPException
              if the property name is not recognized.
@since SAAJ 1.2
"
      end
    end

    class 1427202 "MimeHeaders"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A container for <code>MimeHeader</code> objects, which represent
the MIME headers present in a MIME part of a message.

<p>This class is used primarily when an application wants to
retrieve specific attachments based on certain MIME headers and
values. This class will most likely be used by implementations of
<code>AttachmentPart</code> and other MIME dependent parts of the SAAJ
API.
@see SOAPMessage#getAttachments
@see AttachmentPart
"
      classrelation 4787202 // headers (<unidirectional association>)
	relation 4787202 --->
	  a role_name "headers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4787202 // headers (<unidirectional association>)
	  b parent class_ref 141442 // Vector
      end

      operation 12061058 "MimeHeaders"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a default <code>MimeHeaders</code> object initialized with
an empty <code>Vector</code> object.
"
      end

      operation 12061186 "getHeader"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all of the values for the specified header as an array of
<code>String</code> objects.

@param   name the name of the header for which values will be returned
@return a <code>String</code> array with all of the values for the
        specified header
@see #setHeader
"
      end

      operation 12061314 "setHeader"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the current value of the first header entry whose name matches
the given name with the given value, adding a new header if no existing header
name matches. This method also removes all matching headers after the first one.
<P>
Note that RFC822 headers can contain only US-ASCII characters.

@param   name a <code>String</code> with the name of the header for
         which to search
@param   value a <code>String</code> with the value that will replace the
         current value of the specified header

@exception IllegalArgumentException if there was a problem in the
mime header name or the value being set
@see #getHeader
"
      end

      operation 12061442 "addHeader"
	public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a <code>MimeHeader</code> object with the specified name and value
to this <code>MimeHeaders</code> object's list of headers.
<P>
Note that RFC822 headers can contain only US-ASCII characters.

@param   name a <code>String</code> with the name of the header to
         be added
@param   value a <code>String</code> with the value of the header to
         be added

@exception IllegalArgumentException if there was a problem in the
mime header name or value being added
"
      end

      operation 12061570 "removeHeader"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove all <code>MimeHeader</code> objects whose name matches the
given name.

@param   name a <code>String</code> with the name of the header for
         which to search
"
      end

      operation 12061698 "removeAllHeaders"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all the header entries from this <code>MimeHeaders</code> object.
"
      end

      operation 12061826 "getAllHeaders"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the <code>MimeHeader</code>s in this <code>MimeHeaders</code> object.

@return  an <code>Iterator</code> object over this <code>MimeHeaders</code>
         object's list of <code>MimeHeader</code> objects
"
      end

      class 1427458 "MatchingIterator"
	visibility package 
	nactuals 1
	actual class class_ref 132994 // Iterator
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 4787330 // <realization>
	  relation 4787330 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 4787330 // <realization>
	    b parent class_ref 132994 // Iterator
	end

	attribute 2624386 "match"
	  private explicit_type "boolean"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 4787458 // iterator (<unidirectional association>)
	  relation 4787458 --->
	    a role_name "iterator" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4787458 // iterator (<unidirectional association>)
	    b parent class_ref 132994 // Iterator
	end

	classrelation 4787586 // names (<unidirectional association>)
	  relation 4787586 --->
	    a role_name "names" multiplicity "[]" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 4787586 // names (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 4787714 // nextHeader (<unidirectional association>)
	  relation 4787714 --->
	    a role_name "nextHeader" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 4787714 // nextHeader (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 12061954 "MatchingIterator"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "names" type class_ref 128130 // String
	  multiplicity "[]"
	    param inout name "match" explicit_type "boolean"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 12062082 "nextMatch"
	  private return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 12062210 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 12062338 "next"
	  public return_type class_ref 129538 // Object
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 12062466 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 12062594 "getMatchingHeaders"
	public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "names" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all the <code>MimeHeader</code> objects whose name matches
a name in the given array of names.

@param names an array of <code>String</code> objects with the names
        for which to search
@return  an <code>Iterator</code> object over the <code>MimeHeader</code>
         objects whose name matches one of the names in the given list
"
      end

      operation 12062722 "getNonMatchingHeaders"
	public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "names" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns all of the <code>MimeHeader</code> objects whose name does not
match a name in the given array of names.

@param names an array of <code>String</code> objects with the names
        for which to search
@return  an <code>Iterator</code> object over the <code>MimeHeader</code>
         objects whose name does not match one of the names in the given list
"
      end
    end

    class 1427330 "MimeHeader"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that stores a MIME header name and its value. One or more
<code>MimeHeader</code> objects may be contained in a <code>MimeHeaders</code>
object.

@see MimeHeaders
"
      classrelation 4786946 // name (<unidirectional association>)
	relation 4786946 --->
	  a role_name "name" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4786946 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4787074 // value (<unidirectional association>)
	relation 4787074 --->
	  a role_name "value" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4787074 // value (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12060674 "MimeHeader"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>MimeHeader</code> object initialized with the given
name and value.

@param name a <code>String</code> giving the name of the header
@param value a <code>String</code> giving the value of the header
"
      end

      operation 12060802 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this <code>MimeHeader</code> object.

@return the name of the header as a <code>String</code>
"
      end

      operation 12060930 "getValue"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this <code>MimeHeader</code> object.

@return  the value of the header as a <code>String</code>
"
      end
    end

    class 1427586 "SAAJMetaFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The access point for the implementation classes of the factories defined in the
SAAJ API. All of the <code>newInstance</code> methods defined on factories in
SAAJ 1.3 defer to instances of this class to do the actual object creation.
The implementations of <code>newInstance()</code> methods (in SOAPFactory and MessageFactory)
that existed in SAAJ 1.2 have been updated to also delegate to the SAAJMetaFactory when the SAAJ 1.2
defined lookup fails to locate the Factory implementation class name.

<p>
SAAJMetaFactory is a service provider interface. There are no public methods on this
class.

@author SAAJ RI Development Team
@since SAAJ 1.3
"
      classrelation 4787842 // META_FACTORY_CLASS_PROPERTY (<unidirectional association>)
	relation 4787842 --->
	  a role_name "META_FACTORY_CLASS_PROPERTY" init_value "
        \"javax.xml.soap.MetaFactory\"" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4787842 // META_FACTORY_CLASS_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4787970 // DEFAULT_META_FACTORY_CLASS (<unidirectional association>)
	relation 4787970 --->
	  a role_name "DEFAULT_META_FACTORY_CLASS" init_value "
        \"com.sun.xml.internal.messaging.saaj.soap.SAAJMetaFactoryImpl\"" class_relation const_relation package
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4787970 // DEFAULT_META_FACTORY_CLASS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12063362 "getInstance"
	class_operation package return_type class_ref 1427586 // SAAJMetaFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of a concrete <code>SAAJMetaFactory</code> object.
The SAAJMetaFactory is an SPI, it pulls the creation of the other factories together into a
single place. Changing out the SAAJMetaFactory has the effect of changing out the entire SAAJ
implementation. Service providers provide the name of their <code>SAAJMetaFactory</code>
implementation.

This method uses the following ordered lookup procedure to determine the SAAJMetaFactory implementation class to load:
<UL>
 <LI> Use the javax.xml.soap.MetaFactory system property.
 <LI> Use the properties file \"lib/jaxm.properties\" in the JRE directory. This configuration file is in standard
java.util.Properties format and contains the fully qualified name of the implementation class with the key being the
system property defined above.
 <LI> Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API
will look for a classname in the file META-INF/services/javax.xml.soap.MetaFactory in jars available to the runtime.
 <LI> Default to com.sun.xml.internal.messaging.saaj.soap.SAAJMetaFactoryImpl.
</UL>

@return a concrete <code>SAAJMetaFactory</code> object
@exception SOAPException if there is an error in creating the <code>SAAJMetaFactory</code>
"
      end

      operation 12063490 "SAAJMetaFactory"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12063618 "newMessageFactory"
	abstract protected return_type class_ref 1426946 // MessageFactory
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>MessageFactory</code> object for
the given <code>String</code> protocol.

@param protocol a <code>String</code> indicating the protocol
@exception SOAPException if there is an error in creating the
           MessageFactory
@see SOAPConstants#SOAP_1_1_PROTOCOL
@see SOAPConstants#SOAP_1_2_PROTOCOL
@see SOAPConstants#DYNAMIC_SOAP_PROTOCOL
"
      end

      operation 12063746 "newSOAPFactory"
	abstract protected return_type class_ref 1427714 // SOAPFactory
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SOAPFactory</code> object for
the given <code>String</code> protocol.

@param protocol a <code>String</code> indicating the protocol
@exception SOAPException if there is an error in creating the
           SOAPFactory
@see SOAPConstants#SOAP_1_1_PROTOCOL
@see SOAPConstants#SOAP_1_2_PROTOCOL
@see SOAPConstants#DYNAMIC_SOAP_PROTOCOL
"
      end
    end

    class 1427714 "SOAPFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>SOAPFactory</code> is a factory for creating various objects
that exist in the SOAP XML tree.

<code>SOAPFactory</code> can be
used to create XML fragments that will eventually end up in the
SOAP part. These fragments can be inserted as children of the
{@link SOAPHeaderElement} or {@link SOAPBodyElement} or
{@link SOAPEnvelope} or other {@link SOAPElement} objects.

<code>SOAPFactory</code> also has methods to create
<code>javax.xml.soap.Detail</code> objects as well as
<code>java.xml.soap.Name</code> objects.

"
      classrelation 4792578 // SOAP_FACTORY_PROPERTY (<unidirectional association>)
	relation 4792578 --->
	  a role_name "SOAP_FACTORY_PROPERTY" init_value "
        \"javax.xml.soap.SOAPFactory\"" class_relation const_relation private
	    comment "
A constant representing the property used to lookup the name of
a <code>SOAPFactory</code> implementation class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4792578 // SOAP_FACTORY_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4792706 // DEFAULT_SOAP_FACTORY (<unidirectional association>)
	relation 4792706 --->
	  a role_name "DEFAULT_SOAP_FACTORY" init_value " \"com.sun.xml.internal.messaging.saaj.soap.ver1_1.SOAPFactory1_1Impl\"" class_relation const_relation package
	    comment "
Class name of default <code>SOAPFactory</code> implementation.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4792706 // DEFAULT_SOAP_FACTORY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12070274 "createElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "domElement" type class_ref 648194 // Element
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SOAPElement</code> object from an existing DOM
<code>Element</code>. If the DOM <code>Element</code> that is passed in
as an argument is already a <code>SOAPElement</code> then this method
must return it unmodified without any further work. Otherwise, a new
<code>SOAPElement</code> is created and a deep copy is made of the
<code>domElement</code> argument. The concrete type of the return value
will depend on the name of the <code>domElement</code> argument. If any
part of the tree rooted in <code>domElement</code> violates SOAP rules, a
<code>SOAPException</code> will be thrown.

@param domElement - the <code>Element</code> to be copied.

@return a new <code>SOAPElement</code> that is a copy of <code>domElement</code>.

@exception SOAPException if there is an error in creating the
           <code>SOAPElement</code> object

@since SAAJ 1.3
"
      end

      operation 12070402 "createElement"
	abstract public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SOAPElement</code> object initialized with the
given <code>Name</code> object. The concrete type of the return value
will depend on the name given to the new <code>SOAPElement</code>. For
instance, a new <code>SOAPElement</code> with the name
\"{http://www.w3.org/2003/05/soap-envelope}Envelope\" would cause a
<code>SOAPEnvelope</code> that supports SOAP 1.2 behavior to be created.

@param name a <code>Name</code> object with the XML name for
            the new element

@return the new <code>SOAPElement</code> object that was
        created

@exception SOAPException if there is an error in creating the
           <code>SOAPElement</code> object
@see SOAPFactory#createElement(javax.xml.namespace.QName)
"
      end

      operation 12070530 "createElement"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "qname" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SOAPElement</code> object initialized with the
given <code>QName</code> object. The concrete type of the return value
will depend on the name given to the new <code>SOAPElement</code>. For
instance, a new <code>SOAPElement</code> with the name
\"{http://www.w3.org/2003/05/soap-envelope}Envelope\" would cause a
<code>SOAPEnvelope</code> that supports SOAP 1.2 behavior to be created.

@param qname a <code>QName</code> object with the XML name for
            the new element

@return the new <code>SOAPElement</code> object that was
        created

@exception SOAPException if there is an error in creating the
           <code>SOAPElement</code> object
@see SOAPFactory#createElement(Name)
@since SAAJ 1.3
"
      end

      operation 12070658 "createElement"
	abstract public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SOAPElement</code> object initialized with the
given local name.

@param localName a <code>String</code> giving the local name for
            the new element

@return the new <code>SOAPElement</code> object that was
        created

@exception SOAPException if there is an error in creating the
           <code>SOAPElement</code> object
"
      end

      operation 12070786 "createElement"
	abstract public return_type class_ref 1426306 // SOAPElement
	nparams 3
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPElement</code> object with the given
local name, prefix and uri. The concrete type of the return value
will depend on the name given to the new <code>SOAPElement</code>. For
instance, a new <code>SOAPElement</code> with the name
\"{http://www.w3.org/2003/05/soap-envelope}Envelope\" would cause a
<code>SOAPEnvelope</code> that supports SOAP 1.2 behavior to be created.

@param localName a <code>String</code> giving the local name
                 for the new element
@param prefix the prefix for this <code>SOAPElement</code>
@param uri a <code>String</code> giving the URI of the
           namespace to which the new element belongs

@exception SOAPException if there is an error in creating the
           <code>SOAPElement</code> object
"
      end

      operation 12070914 "createDetail"
	abstract public return_type class_ref 1426050 // Detail
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>Detail</code> object which serves as a container
for <code>DetailEntry</code> objects.
<P>
This factory method creates <code>Detail</code> objects for use in
situations where it is not practical to use the <code>SOAPFault</code>
abstraction.

@return a <code>Detail</code> object
@throws SOAPException if there is a SOAP error
@throws UnsupportedOperationException if the protocol specified
        for the SOAPFactory was <code>DYNAMIC_SOAP_PROTOCOL</code>
"
      end

      operation 12071042 "createFault"
	abstract public return_type class_ref 1428098 // SOAPFault
	nparams 2
	  param inout name "reasonText" type class_ref 128130 // String
	  param inout name "faultCode" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPFault</code> object initialized with the given <code>reasonText</code>
 and <code>faultCode</code>
@param reasonText the ReasonText/FaultString for the fault
@param faultCode the FaultCode for the fault
@return a <code>SOAPFault</code> object
@throws SOAPException if there is a SOAP error
@since SAAJ 1.3
"
      end

      operation 12071170 "createFault"
	abstract public return_type class_ref 1428098 // SOAPFault
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new default <code>SOAPFault</code> object
@return a <code>SOAPFault</code> object
@throws SOAPException if there is a SOAP error
@since SAAJ 1.3
"
      end

      operation 12071298 "createName"
	abstract public return_type class_ref 1426562 // Name
	nparams 3
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>Name</code> object initialized with the
given local name, namespace prefix, and namespace URI.
<P>
This factory method creates <code>Name</code> objects for use in
situations where it is not practical to use the <code>SOAPEnvelope</code>
abstraction.

@param localName a <code>String</code> giving the local name
@param prefix a <code>String</code> giving the prefix of the namespace
@param uri a <code>String</code> giving the URI of the namespace
@return a <code>Name</code> object initialized with the given
        local name, namespace prefix, and namespace URI
@throws SOAPException if there is a SOAP error
"
      end

      operation 12071426 "createName"
	abstract public return_type class_ref 1426562 // Name
	nparams 1
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>Name</code> object initialized with the
given local name.
<P>
This factory method creates <code>Name</code> objects for use in
situations where it is not practical to use the <code>SOAPEnvelope</code>
abstraction.

@param localName a <code>String</code> giving the local name
@return a <code>Name</code> object initialized with the given
        local name
@throws SOAPException if there is a SOAP error
"
      end

      operation 12071554 "newInstance"
	class_operation public return_type class_ref 1427714 // SOAPFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPFactory</code> object that is an instance of
the default implementation (SOAP 1.1),

This method uses the following ordered lookup procedure to determine the SOAPFactory implementation class to load:
<UL>
 <LI> Use the javax.xml.soap.SOAPFactory system property.
 <LI> Use the properties file \"lib/jaxm.properties\" in the JRE directory. This configuration file is in standard
java.util.Properties format and contains the fully qualified name of the implementation class with the key being the
system property defined above.
 <LI> Use the Services API (as detailed in the JAR specification), if available, to determine the classname. The Services API
will look for a classname in the file META-INF/services/javax.xml.soap.SOAPFactory in jars available to the runtime.
 <LI> Use the SAAJMetaFactory instance to locate the SOAPFactory implementation class.
</UL>

@return a new instance of a <code>SOAPFactory</code>

@exception SOAPException if there was an error creating the
           default <code>SOAPFactory</code>
@see SAAJMetaFactory
"
      end

      operation 12071682 "newInstance"
	class_operation public return_type class_ref 1427714 // SOAPFactory
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPFactory</code> object that is an instance of
the specified implementation, this method uses the SAAJMetaFactory to
locate the implementation class and create the SOAPFactory instance.

@return a new instance of a <code>SOAPFactory</code>

@param protocol  a string constant representing the protocol of the
                  specified SOAP factory implementation. May be
                  either <code>DYNAMIC_SOAP_PROTOCOL</code>,
                  <code>DEFAULT_SOAP_PROTOCOL</code> (which is the same
                  as) <code>SOAP_1_1_PROTOCOL</code>, or
                  <code>SOAP_1_2_PROTOCOL</code>.

@exception SOAPException if there was an error creating the
           specified <code>SOAPFactory</code>
@see SAAJMetaFactory
@since SAAJ 1.3
"
      end
    end

    class 1427842 "SAAJResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Acts as a holder for the results of a JAXP transformation or a JAXB
marshalling, in the form of a SAAJ tree. These results should be accessed
by using the {@link #getResult()} method. The {@link DOMResult#getNode()}
method should be avoided in almost all cases.

@author XWS-Security Development Team

@since SAAJ 1.3
"
      classrelation 4788738 // <generalisation>
	relation 4788738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4788738 // <generalisation>
	  b parent class_ref 724994 // DOMResult
      end

      operation 12065282 "SAAJResult"
	public explicit_return_type ""
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SAAJResult</code> that will present results in the form
of a SAAJ tree that supports the default (SOAP 1.1) protocol.
<p>
This kind of <code>SAAJResult</code> is meant for use in situations where the
results will be used as a parameter to a method that takes a parameter
whose type, such as <code>SOAPElement</code>, is drawn from the SAAJ
API. When used in a transformation, the results are populated into the
<code>SOAPPart</code> of a <code>SOAPMessage</code> that is created internally.
The <code>SOAPPart</code> returned by {@link DOMResult#getNode()}
is not guaranteed to be well-formed.

@throws SOAPException if there is a problem creating a <code>SOAPMessage</code>

@since SAAJ 1.3
"
      end

      operation 12065410 "SAAJResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "protocol" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SAAJResult</code> that will present results in the form
of a SAAJ tree that supports the specified protocol. The
<code>DYNAMIC_SOAP_PROTOCOL</code> is ambiguous in this context and will
cause this constructor to throw an <code>UnsupportedOperationException</code>.
<p>
This kind of <code>SAAJResult</code> is meant for use in situations where the
results will be used as a parameter to a method that takes a parameter
whose type, such as <code>SOAPElement</code>, is drawn from the SAAJ
API. When used in a transformation the results are populated into the
<code>SOAPPart</code> of a <code>SOAPMessage</code> that is created
internally. The <code>SOAPPart</code> returned by {@link DOMResult#getNode()}
is not guaranteed to be well-formed.

@param protocol - the name of the SOAP protocol that the resulting SAAJ
                     tree should support

@throws SOAPException if a <code>SOAPMessage</code> supporting the
            specified protocol cannot be created

@since SAAJ 1.3
"
      end

      operation 12065538 "SAAJResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 1427074 // SOAPMessage
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SAAJResult</code> that will write the results into the
<code>SOAPPart</code> of the supplied <code>SOAPMessage</code>.
In the normal case these results will be written using DOM APIs and,
as a result, the finished <code>SOAPPart</code> will not be guaranteed
to be well-formed unless the data used to create it is also well formed.
When used in a transformation the validity of the <code>SOAPMessage</code>
after the transformation can be guaranteed only by means outside SAAJ
specification.

@param message - the message whose <code>SOAPPart</code> will be
                 populated as a result of some transformation or
                 marshalling operation

@since SAAJ 1.3
"
      end

      operation 12065666 "SAAJResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "rootNode" type class_ref 1426306 // SOAPElement
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SAAJResult</code> that will write the results as a
child node of the <code>SOAPElement</code> specified. In the normal
case these results will be written using DOM APIs and as a result may
invalidate the structure of the SAAJ tree. This kind of
<code>SAAJResult</code> should only be used when the validity of the
incoming data can be guaranteed by means outside of the SAAJ
specification.

@param rootNode - the root to which the results will be appended

@since SAAJ 1.3
"
      end

      operation 12065794 "getResult"
	public return_type class_ref 1426434 // Node
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return the resulting Tree that was created under the specified root Node.
@since SAAJ 1.3
"
      end
    end

    class 1427970 "SOAPBody"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object that represents the contents of the SOAP body
element in a SOAP message. A SOAP body element consists of XML data
that affects the way the application-specific content is processed.
<P>
A <code>SOAPBody</code> object contains <code>SOAPBodyElement</code>
objects, which have the content for the SOAP body.
A <code>SOAPFault</code> object, which carries status and/or
error information, is an example of a <code>SOAPBodyElement</code> object.

@see SOAPFault
"
      classrelation 4788866 // <generalisation>
	relation 4788866 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4788866 // <generalisation>
	  b parent class_ref 1426306 // SOAPElement
      end

      operation 12065922 "addFault"
	public return_type class_ref 1428098 // SOAPFault
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPFault</code> object and adds it to
this <code>SOAPBody</code> object. The new <code>SOAPFault</code> will
have default values set for the mandatory child elements. The type of
the <code>SOAPFault</code> will be a SOAP 1.1 or a SOAP 1.2 <code>SOAPFault</code>
depending on the <code>protocol</code> specified while creating the
<code>MessageFactory</code> instance.
<p>
A <code>SOAPBody</code> may contain at most one <code>SOAPFault</code>
child element.

@return the new <code>SOAPFault</code> object
@exception SOAPException if there is a SOAP error
"
      end

      operation 12066050 "addFault"
	public return_type class_ref 1428098 // SOAPFault
	nparams 3
	  param inout name "faultCode" type class_ref 1426562 // Name
	  param inout name "faultString" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPFault</code> object and adds it to
this <code>SOAPBody</code> object. The type of the
<code>SOAPFault</code> will be a SOAP 1.1  or a SOAP 1.2
<code>SOAPFault</code> depending on the <code>protocol</code>
specified while creating the <code>MessageFactory</code> instance.
<p>
For SOAP 1.2 the <code>faultCode</code> parameter is the value of the
<i>Fault/Code/Value</i> element  and the <code>faultString</code> parameter
is the value of the <i>Fault/Reason/Text</i> element. For SOAP 1.1
the <code>faultCode</code> parameter is the value of the <code>faultcode</code>
element and the <code>faultString</code> parameter is the value of the <code>faultstring</code>
element.
<p>
A <code>SOAPBody</code> may contain at most one <code>SOAPFault</code>
child element.

@param faultCode a <code>Name</code> object giving the fault
        code to be set; must be one of the fault codes defined in the Version
        of SOAP specification in use
@param faultString a <code>String</code> giving an explanation of
        the fault
@param locale a {@link java.util.Locale} object indicating
        the native language of the <code>faultString</code>
@return the new <code>SOAPFault</code> object
@exception SOAPException if there is a SOAP error
@see SOAPFault#setFaultCode
@see SOAPFault#setFaultString
@since SAAJ 1.2
"
      end

      operation 12066178 "addFault"
	public return_type class_ref 1428098 // SOAPFault
	nparams 3
	  param inout name "faultCode" type class_ref 673666 // QName
	  param inout name "faultString" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPFault</code> object and adds it to this
<code>SOAPBody</code> object. The type of the <code>SOAPFault</code>
will be a SOAP 1.1 or a SOAP 1.2 <code>SOAPFault</code> depending on
the <code>protocol</code> specified while creating the <code>MessageFactory</code>
instance.
<p>
For SOAP 1.2 the <code>faultCode</code> parameter is the value of the
<i>Fault/Code/Value</i> element  and the <code>faultString</code> parameter
is the value of the <i>Fault/Reason/Text</i> element. For SOAP 1.1
the <code>faultCode</code> parameter is the value of the <code>faultcode</code>
element and the <code>faultString</code> parameter is the value of the <code>faultstring</code>
element.
<p>
A <code>SOAPBody</code> may contain at most one <code>SOAPFault</code>
child element.

@param faultCode
           a <code>QName</code> object giving the fault code to be
           set; must be one of the fault codes defined in the version
           of SOAP specification in use.
@param faultString
           a <code>String</code> giving an explanation of the fault
@param locale
           a {@link java.util.Locale Locale} object indicating the
           native language of the <code>faultString</code>
@return the new <code>SOAPFault</code> object
@exception SOAPException
               if there is a SOAP error
@see SOAPFault#setFaultCode
@see SOAPFault#setFaultString
@see SOAPBody#addFault(Name faultCode, String faultString, Locale locale)

@since SAAJ 1.3
"
      end

      operation 12066306 "addFault"
	public return_type class_ref 1428098 // SOAPFault
	nparams 2
	  param inout name "faultCode" type class_ref 1426562 // Name
	  param inout name "faultString" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new  <code>SOAPFault</code> object and adds it to this
<code>SOAPBody</code> object. The type of the <code>SOAPFault</code>
will be a SOAP 1.1 or a SOAP 1.2 <code>SOAPFault</code> depending on
the <code>protocol</code> specified while creating the <code>MessageFactory</code>
instance.
<p>
For SOAP 1.2 the <code>faultCode</code> parameter is the value of the
<i>Fault/Code/Value</i> element  and the <code>faultString</code> parameter
is the value of the <i>Fault/Reason/Text</i> element. For SOAP 1.1
the <code>faultCode</code> parameter is the value of the <i>faultcode</i>
element and the <code>faultString</code> parameter is the value of the <i>faultstring</i>
element.
<p>
In case of a SOAP 1.2 fault, the default value for the mandatory <code>xml:lang</code>
attribute on the <i>Fault/Reason/Text</i> element will be set to
<code>java.util.Locale.getDefault()</code>
<p>
A <code>SOAPBody</code> may contain at most one <code>SOAPFault</code>
child element.

@param faultCode
           a <code>Name</code> object giving the fault code to be set;
           must be one of the fault codes defined in the version of SOAP
           specification in use
@param faultString
           a <code>String</code> giving an explanation of the fault
@return the new <code>SOAPFault</code> object
@exception SOAPException
               if there is a SOAP error
@see SOAPFault#setFaultCode
@see SOAPFault#setFaultString
@since SAAJ 1.2
"
      end

      operation 12066434 "addFault"
	public return_type class_ref 1428098 // SOAPFault
	nparams 2
	  param inout name "faultCode" type class_ref 673666 // QName
	  param inout name "faultString" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPFault</code> object and adds it to this <code>SOAPBody</code>
object. The type of the <code>SOAPFault</code>
will be a SOAP 1.1 or a SOAP 1.2 <code>SOAPFault</code> depending on
the <code>protocol</code> specified while creating the <code>MessageFactory</code>
instance.
<p>
For SOAP 1.2 the <code>faultCode</code> parameter is the value of the
<i>Fault/Code/Value</i> element  and the <code>faultString</code> parameter
is the value of the <i>Fault/Reason/Text</i> element. For SOAP 1.1
the <code>faultCode</code> parameter is the value of the <i>faultcode</i>
element and the <code>faultString</code> parameter is the value of the <i>faultstring</i>
element.
<p>
In case of a SOAP 1.2 fault, the default value for the mandatory <code>xml:lang</code>
attribute on the <i>Fault/Reason/Text</i> element will be set to
<code>java.util.Locale.getDefault()</code>
<p>
A <code>SOAPBody</code> may contain at most one <code>SOAPFault</code>
child element

@param faultCode
           a <code>QName</code> object giving the fault code to be
           set; must be one of the fault codes defined in the version
           of  SOAP specification in use
@param faultString
           a <code>String</code> giving an explanation of the fault
@return the new <code>SOAPFault</code> object
@exception SOAPException
               if there is a SOAP error
@see SOAPFault#setFaultCode
@see SOAPFault#setFaultString
@see SOAPBody#addFault(Name faultCode, String faultString)
@since SAAJ 1.3
"
      end

      operation 12066562 "hasFault"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether a <code>SOAPFault</code> object exists in this
<code>SOAPBody</code> object.

@return <code>true</code> if a <code>SOAPFault</code> object exists
        in this <code>SOAPBody</code> object; <code>false</code>
        otherwise
"
      end

      operation 12066690 "getFault"
	public return_type class_ref 1428098 // SOAPFault
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>SOAPFault</code> object in this <code>SOAPBody</code>
object.

@return the <code>SOAPFault</code> object in this <code>SOAPBody</code>
        object if present, null otherwise.
"
      end

      operation 12066818 "addBodyElement"
	public return_type class_ref 1428226 // SOAPBodyElement
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPBodyElement</code> object with the specified
name and adds it to this <code>SOAPBody</code> object.

@param name
           a <code>Name</code> object with the name for the new <code>SOAPBodyElement</code>
           object
@return the new <code>SOAPBodyElement</code> object
@exception SOAPException
               if a SOAP error occurs
@see SOAPBody#addBodyElement(javax.xml.namespace.QName)
"
      end

      operation 12066946 "addBodyElement"
	public return_type class_ref 1428226 // SOAPBodyElement
	nparams 1
	  param inout name "qname" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPBodyElement</code> object with the specified
QName and adds it to this <code>SOAPBody</code> object.

@param qname
           a <code>QName</code> object with the qname for the new
           <code>SOAPBodyElement</code> object
@return the new <code>SOAPBodyElement</code> object
@exception SOAPException
               if a SOAP error occurs
@see SOAPBody#addBodyElement(Name)
@since SAAJ 1.3
"
      end

      operation 12067074 "addDocument"
	public return_type class_ref 1428226 // SOAPBodyElement
	nparams 1
	  param inout name "document" type class_ref 378626 // Document
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the root node of the DOM <code>{@link org.w3c.dom.Document}</code>
to this <code>SOAPBody</code> object.
<p>
Calling this method invalidates the <code>document</code> parameter.
The client application should discard all references to this <code>Document</code>
and its contents upon calling <code>addDocument</code>. The behavior
of an application that continues to use such references is undefined.

@param document
           the <code>Document</code> object whose root node will be
           added to this <code>SOAPBody</code>.
@return the <code>SOAPBodyElement</code> that represents the root node
        that was added.
@exception SOAPException
               if the <code>Document</code> cannot be added
@since SAAJ 1.2
"
      end

      operation 12067202 "extractContentAsDocument"
	public return_type class_ref 378626 // Document
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new DOM <code>{@link org.w3c.dom.Document}</code> and sets
the first child of this <code>SOAPBody</code> as it's document
element. The child <code>SOAPElement</code> is removed as part of the
process.

@return the <code>{@link org.w3c.dom.Document}</code> representation
        of the <code>SOAPBody</code> content.

@exception SOAPException
               if there is not exactly one child <code>SOAPElement</code> of the <code>
             <code>SOAPBody</code>.

@since SAAJ 1.3
"
      end
    end

    class 1428098 "SOAPFault"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An element in the <code>SOAPBody</code> object that contains
error and/or status information. This information may relate to
errors in the <code>SOAPMessage</code> object or to problems
that are not related to the content in the message itself. Problems
not related to the message itself are generally errors in
processing, such as the inability to communicate with an upstream
server.
<P>
Depending on the <code>protocol</code> specified while creating the
<code>MessageFactory</code> instance,  a <code>SOAPFault</code> has
sub-elements as defined in the SOAP 1.1/SOAP 1.2 specification.
"
      classrelation 4792834 // <generalisation>
	relation 4792834 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4792834 // <generalisation>
	  b parent class_ref 1428226 // SOAPBodyElement
      end

      operation 12071810 "setFaultCode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "faultCodeQName" type class_ref 1426562 // Name
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>SOAPFault</code> object with the given fault code.

<P> Fault codes, which give information about the fault, are defined
in the SOAP 1.1 specification. A fault code is mandatory and must
be of type <code>Name</code>. This method provides a convenient
way to set a fault code. For example,

<PRE>
SOAPEnvelope se = ...;
// Create a qualified name in the SOAP namespace with a localName
// of \"Client\". Note that prefix parameter is optional and is null
// here which causes the implementation to use an appropriate prefix.
Name qname = se.createName(\"Client\", null,
                           SOAPConstants.URI_NS_SOAP_ENVELOPE);
SOAPFault fault = ...;
fault.setFaultCode(qname);
</PRE>
It is preferable to use this method over {@link #setFaultCode(String)}.

@param faultCodeQName a <code>Name</code> object giving the fault
code to be set. It must be namespace qualified.
@see #getFaultCodeAsName

@exception SOAPException if there was an error in adding the
           <i>faultcode</i> element to the underlying XML tree.

@since SAAJ 1.2
"
      end

      operation 12071938 "setFaultCode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "faultCodeQName" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>SOAPFault</code> object with the given fault code.

It is preferable to use this method over {@link #setFaultCode(Name)}.

@param faultCodeQName a <code>QName</code> object giving the fault
code to be set. It must be namespace qualified.
@see #getFaultCodeAsQName

@exception SOAPException if there was an error in adding the
           <code>faultcode</code> element to the underlying XML tree.

@see #setFaultCode(Name)
@see #getFaultCodeAsQName()

@since SAAJ 1.3
"
      end

      operation 12072066 "setFaultCode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "faultCode" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>SOAPFault</code> object with the give fault code.
<P>
Fault codes, which given information about the fault, are defined in
the SOAP 1.1 specification. This element is mandatory in SOAP 1.1.
Because the fault code is required to be a QName it is preferable to
use the {@link #setFaultCode(Name)} form of this method.

@param faultCode a <code>String</code> giving the fault code to be set.
        It must be of the form \"prefix:localName\" where the prefix has
        been defined in a namespace declaration.
@see #setFaultCode(Name)
@see #getFaultCode
@see SOAPElement#addNamespaceDeclaration

@exception SOAPException if there was an error in adding the
           <code>faultCode</code> to the underlying XML tree.
"
      end

      operation 12072194 "getFaultCodeAsName"
	public return_type class_ref 1426562 // Name
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the mandatory SOAP 1.1 fault code for this
<code>SOAPFault</code> object as a SAAJ <code>Name</code> object.
The SOAP 1.1 specification requires the value of the \"faultcode\"
element to be of type QName. This method returns the content of the
element as a QName in the form of a SAAJ Name object. This method
should be used instead of the <code>getFaultCode</code> method since
it allows applications to easily access the namespace name without
additional parsing.

@return a <code>Name</code> representing the faultcode
@see #setFaultCode(Name)

@since SAAJ 1.2
"
      end

      operation 12072322 "getFaultCodeAsQName"
	public return_type class_ref 673666 // QName
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the fault code for this
<code>SOAPFault</code> object as a <code>QName</code> object.

@return a <code>QName</code> representing the faultcode

@see #setFaultCode(QName)

@since SAAJ 1.3
"
      end

      operation 12072450 "getFaultSubcodes"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Subcodes for this <code>SOAPFault</code> as an iterator over
<code>QNames</code>.

@return an <code>Iterator</code> that accesses a sequence of
     <code>QNames</code>. This <code>Iterator</code> should not support
     the optional <code>remove</code> method. The order in which the
     Subcodes are returned reflects the hierarchy of Subcodes present
     in the fault from top to bottom.

@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Subcode.

@since SAAJ 1.3
"
      end

      operation 12072578 "removeAllFaultSubcodes"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes any Subcodes that may be contained by this
<code>SOAPFault</code>. Subsequent calls to
<code>getFaultSubcodes</code> will return an empty iterator until a call
to <code>appendFaultSubcode</code> is made.

@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Subcode.

@since SAAJ 1.3
"
      end

      operation 12072706 "appendFaultSubcode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subcode" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a Subcode to the end of the sequence of Subcodes contained by this
<code>SOAPFault</code>. Subcodes, which were introduced in SOAP 1.2, are
represented by a recursive sequence of subelements rooted in the
mandatory Code subelement of a SOAP Fault.

@param subcode a QName containing the Value of the Subcode.

@exception SOAPException if there was an error in setting the Subcode
@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Subcode.

@since SAAJ 1.3
"
      end

      operation 12072834 "getFaultCode"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the fault code for this <code>SOAPFault</code> object.

@return a <code>String</code> with the fault code
@see #getFaultCodeAsName
@see #setFaultCode
"
      end

      operation 12072962 "setFaultActor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "faultActor" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this <code>SOAPFault</code> object with the given fault actor.
<P>
The fault actor is the recipient in the message path who caused the
fault to happen.
<P>
If this <code>SOAPFault</code> supports SOAP 1.2 then this call is
equivalent to {@link #setFaultRole(String)}

@param faultActor a <code>String</code> identifying the actor that
       caused this <code>SOAPFault</code> object
@see #getFaultActor

@exception SOAPException if there was an error in adding the
           <code>faultActor</code> to the underlying XML tree.
"
      end

      operation 12073090 "getFaultActor"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the fault actor for this <code>SOAPFault</code> object.
<P>
If this <code>SOAPFault</code> supports SOAP 1.2 then this call is
equivalent to {@link #getFaultRole()}

@return a <code>String</code> giving the actor in the message path
        that caused this <code>SOAPFault</code> object
@see #setFaultActor
"
      end

      operation 12073218 "setFaultString"
	public explicit_return_type "void"
	nparams 1
	  param inout name "faultString" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the fault string for this <code>SOAPFault</code> object
to the given string.
<P>
If this
<code>SOAPFault</code> is part of a message that supports SOAP 1.2 then
this call is equivalent to:
<pre>
     addFaultReasonText(faultString, Locale.getDefault());
</pre>

@param faultString a <code>String</code> giving an explanation of
       the fault
@see #getFaultString

@exception SOAPException if there was an error in adding the
           <code>faultString</code> to the underlying XML tree.
"
      end

      operation 12073346 "setFaultString"
	public explicit_return_type "void"
	nparams 2
	  param inout name "faultString" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the fault string for this <code>SOAPFault</code> object
to the given string and localized to the given locale.
<P>
If this
<code>SOAPFault</code> is part of a message that supports SOAP 1.2 then
this call is equivalent to:
<pre>
     addFaultReasonText(faultString, locale);
</pre>

@param faultString a <code>String</code> giving an explanation of
        the fault
@param locale a {@link java.util.Locale Locale} object indicating
        the native language of the <code>faultString</code>
@see #getFaultString

@exception SOAPException if there was an error in adding the
           <code>faultString</code> to the underlying XML tree.

@since SAAJ 1.2
"
      end

      operation 12073474 "getFaultString"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the fault string for this <code>SOAPFault</code> object.
<P>
If this
<code>SOAPFault</code> is part of a message that supports SOAP 1.2 then
this call is equivalent to:
<pre>
   String reason = null;
   try {
       reason = (String) getFaultReasonTexts().next();
   } catch (SOAPException e) {}
   return reason;
</pre>

@return a <code>String</code> giving an explanation of
       the fault
@see #setFaultString(String)
@see #setFaultString(String, Locale)
"
      end

      operation 12073602 "getFaultStringLocale"
	public return_type class_ref 312962 // Locale
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the locale of the fault string for this <code>SOAPFault</code>
object.
<P>
If this
<code>SOAPFault</code> is part of a message that supports SOAP 1.2 then
this call is equivalent to:
<pre>
   Locale locale = null;
   try {
       locale = (Locale) getFaultReasonLocales().next();
   } catch (SOAPException e) {}
   return locale;
</pre>

@return a <code>Locale</code> object indicating the native language of
         the fault string or <code>null</code> if no locale was specified
@see #setFaultString(String, Locale)

@since SAAJ 1.2
"
      end

      operation 12073730 "hasDetail"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this <code>SOAPFault</code> has a <code>Detail</code>
subelement and false otherwise. Equivalent to
<code>(getDetail()!=null)</code>.

@return true if this <code>SOAPFault</code> has a <code>Detail</code>
subelement and false otherwise.

@since SAAJ 1.3
"
      end

      operation 12073858 "getDetail"
	public return_type class_ref 1426050 // Detail
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the optional detail element for this <code>SOAPFault</code>
object.
<P>
A <code>Detail</code> object carries application-specific error
information, the scope of the error information is restricted to
faults in the <code>SOAPBodyElement</code> objects if this is a
SOAP 1.1 Fault.

@return a <code>Detail</code> object with application-specific
        error information if present, null otherwise
"
      end

      operation 12073986 "addDetail"
	public return_type class_ref 1426050 // Detail
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an optional <code>Detail</code> object and sets it as the
<code>Detail</code> object for this <code>SOAPFault</code>
object.
<P>
It is illegal to add a detail when the fault already
contains a detail. Therefore, this method should be called
only after the existing detail has been removed.

@return the new <code>Detail</code> object

@exception SOAPException if this
           <code>SOAPFault</code> object already contains a
           valid <code>Detail</code> object
"
      end

      operation 12074114 "getFaultReasonLocales"
	public return_type class_ref 132994 // Iterator
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over a distinct sequence of
<code>Locale</code>s for which there are associated Reason Text items.
Any of these <code>Locale</code>s can be used in a call to
<code>getFaultReasonText</code> in order to obtain a localized version
of the Reason Text string.

@return an <code>Iterator</code> over a sequence of <code>Locale</code>
     objects for which there are associated Reason Text items.

@exception SOAPException if there was an error in retrieving
the  fault Reason locales.
@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Reason.

@since SAAJ 1.3
"
      end

      operation 12074242 "getFaultReasonTexts"
	public return_type class_ref 132994 // Iterator
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over a sequence of
<code>String</code> objects containing all of the Reason Text items for
this <code>SOAPFault</code>.

@return an <code>Iterator</code> over env:Fault/env:Reason/env:Text items.

@exception SOAPException if there was an error in retrieving
the  fault Reason texts.
@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Reason.

@since SAAJ 1.3
"
      end

      operation 12074370 "getFaultReasonText"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "locale" type class_ref 312962 // Locale
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Reason Text associated with the given <code>Locale</code>.
If more than one such Reason Text exists the first matching Text is
returned

@param locale -- the <code>Locale</code> for which a localized
     Reason Text is desired

@return the Reason Text associated with <code>locale</code>

@see #getFaultString

@exception SOAPException if there was an error in retrieving
the  fault Reason text for the specified locale .
@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Reason.

@since SAAJ 1.3
"
      end

      operation 12074498 "addFaultReasonText"
	public explicit_return_type "void"
	nparams 2
	  param inout name "text" type class_ref 128130 // String
	  param inout name "locale" type class_ref 312962 // Locale
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends or replaces a Reason Text item containing the specified
text message and an <i>xml:lang</i> derived from
<code>locale</code>. If a Reason Text item with this
<i>xml:lang</i> already exists its text value will be replaced
with <code>text</code>.
The <code>locale</code> parameter should not be <code>null</code>
<P>
Code sample:

<PRE>
SOAPFault fault = ...;
fault.addFaultReasonText(\"Version Mismatch\", Locale.ENGLISH);
</PRE>

@param text -- reason message string
@param locale -- Locale object representing the locale of the message

@exception SOAPException if there was an error in adding the Reason text
or the <code>locale</code> passed was <code>null</code>.
@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Reason.

@since SAAJ 1.3
"
      end

      operation 12074626 "getFaultNode"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the optional Node element value for this
<code>SOAPFault</code> object. The Node element is
optional in SOAP 1.2.

@return Content of the env:Fault/env:Node element as a String
or <code>null</code> if none

@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Node.

@since SAAJ 1.3
"
      end

      operation 12074754 "setFaultNode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates or replaces any existing Node element value for
this <code>SOAPFault</code> object. The Node element
is optional in SOAP 1.2.

@exception SOAPException  if there was an error in setting the
           Node for this  <code>SOAPFault</code> object.
@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Node.


@since SAAJ 1.3
"
      end

      operation 12074882 "getFaultRole"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the optional Role element value for this
<code>SOAPFault</code> object. The Role element is
optional in SOAP 1.2.

@return Content of the env:Fault/env:Role element as a String
or <code>null</code> if none

@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Role.

@since SAAJ 1.3
"
      end

      operation 12075010 "setFaultRole"
	public explicit_return_type "void"
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates or replaces any existing Role element value for
this <code>SOAPFault</code> object. The Role element
is optional in SOAP 1.2.

@param uri - the URI of the Role

@exception SOAPException  if there was an error in setting the
           Role for this  <code>SOAPFault</code> object.

@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Role.

@since SAAJ 1.3
"
      end
    end

    class 1428226 "SOAPBodyElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A <code>SOAPBodyElement</code> object represents the contents in
a <code>SOAPBody</code> object.  The <code>SOAPFault</code> interface
is a <code>SOAPBodyElement</code> object that has been defined.
<P>
A new <code>SOAPBodyElement</code> object can be created and added
to a <code>SOAPBody</code> object with the <code>SOAPBody</code>
method <code>addBodyElement</code>. In the following line of code,
<code>sb</code> is a <code>SOAPBody</code> object, and
<code>myName</code> is a <code>Name</code> object.
<PRE>
   SOAPBodyElement sbe = sb.addBodyElement(myName);
</PRE>
"
      classrelation 4788994 // <generalisation>
	relation 4788994 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4788994 // <generalisation>
	  b parent class_ref 1426306 // SOAPElement
      end
    end

    class 1428354 "SOAPConnection"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A point-to-point connection that a client can use for sending messages
directly to a remote party (represented by a URL, for instance).
<p>
The SOAPConnection class is optional. Some implementations may
not implement this interface in which case the call to
<code>SOAPConnectionFactory.newInstance()</code> (see below) will
throw an <code>UnsupportedOperationException</code>.
<p>
A client can obtain a <code>SOAPConnection</code> object using a
{@link SOAPConnectionFactory} object as in the following example:
<PRE>
     SOAPConnectionFactory factory = SOAPConnectionFactory.newInstance();
     SOAPConnection con = factory.createConnection();
</PRE>
A <code>SOAPConnection</code> object can be used to send messages
directly to a URL following the request/response paradigm.  That is,
messages are sent using the method <code>call</code>, which sends the
message and then waits until it gets a reply.
"
      operation 12067330 "call"
	abstract public return_type class_ref 1427074 // SOAPMessage
	nparams 2
	  param inout name "request" type class_ref 1427074 // SOAPMessage
	  param inout name "to" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends the given message to the specified endpoint and blocks until
it has returned the response.

@param request the <code>SOAPMessage</code> object to be sent
@param to an <code>Object</code> that identifies
        where the message should be sent. It is required to
        support Objects of type
        <code>java.lang.String</code>,
        <code>java.net.URL</code>, and when JAXM is present
        <code>javax.xml.messaging.URLEndpoint</code>

@return the <code>SOAPMessage</code> object that is the response to the
        message that was sent
@throws SOAPException if there is a SOAP error
"
      end

      operation 12067458 "get"
	public return_type class_ref 1427074 // SOAPMessage
	nparams 1
	  param inout name "to" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a message from a specific endpoint and blocks until it receives,

@param to an <code>Object</code> that identifies where
                 the request should be sent. Objects of type
                <code>java.lang.String</code> and
                <code>java.net.URL</code> must be supported.

@return the <code>SOAPMessage</code> object that is the response to the
                 get message request
@throws SOAPException if there is a SOAP error
@since SAAJ 1.3
"
      end

      operation 12067586 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this <code>SOAPConnection</code> object.

@throws SOAPException if there is a SOAP error
"
      end
    end

    class 1428482 "SOAPConnectionFactory"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A factory for creating <code>SOAPConnection</code> objects. Implementation of this class
is optional. If <code>SOAPConnectionFactory.newInstance()</code> throws an
UnsupportedOperationException then the implementation does not support the
SAAJ communication infrastructure. Otherwise {@link SOAPConnection} objects
can be created by calling <code>createConnection()</code> on the newly
created <code>SOAPConnectionFactory</code> object.
"
      classrelation 4789122 // DEFAULT_SOAP_CONNECTION_FACTORY (<unidirectional association>)
	relation 4789122 --->
	  a role_name "DEFAULT_SOAP_CONNECTION_FACTORY" init_value " \"com.sun.xml.internal.messaging.saaj.client.p2p.HttpSOAPConnectionFactory\"" class_relation const_relation package
	    comment "
A constant representing the default value for a <code>SOAPConnection</code>
object. The default is the point-to-point SOAP connection.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4789122 // DEFAULT_SOAP_CONNECTION_FACTORY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4789250 // SF_PROPERTY (<unidirectional association>)
	relation 4789250 --->
	  a role_name "SF_PROPERTY" init_value " \"javax.xml.soap.SOAPConnectionFactory\"" class_relation const_relation private
	    comment "
A constant representing the <code>SOAPConnection</code> class.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4789250 // SF_PROPERTY (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 12067714 "newInstance"
	class_operation public return_type class_ref 1428482 // SOAPConnectionFactory
	nparams 0
	nexceptions 2
	  exception class_ref 1425922 // SOAPException
	  exception class_ref 193538 // UnsupportedOperationException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of the default
<code>SOAPConnectionFactory</code> object.

@return a new instance of a default
        <code>SOAPConnectionFactory</code> object

@exception SOAPException if there was an error creating the
           <code>SOAPConnectionFactory</code>

@exception UnsupportedOperationException if newInstance is not
supported.
"
      end

      operation 12067842 "createConnection"
	abstract public return_type class_ref 1428354 // SOAPConnection
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>SOAPConnection</code>.

@return the new <code>SOAPConnection</code> object.

@exception SOAPException if there was an exception creating the
<code>SOAPConnection</code> object.
"
      end
    end

    class 1428610 "SOAPConstants"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The definition of constants pertaining to the SOAP protocol.
"
      classrelation 4789378 // DYNAMIC_SOAP_PROTOCOL (<unidirectional association>)
	relation 4789378 --->
	  a role_name "DYNAMIC_SOAP_PROTOCOL" init_value " \"Dynamic Protocol\"" class_relation const_relation public
	    comment "
Used to create <code>MessageFactory</code> instances that create
<code>SOAPMessages</code> whose concrete type is based on the
<code>Content-Type</code> MIME header passed to the
<code>createMessage</code> method. If no <code>Content-Type</code>
header is passed then the <code>createMessage</code> may throw an
<code>IllegalArgumentException</code> or, in the case of the no
argument version of <code>createMessage</code>, an
<code>UnsupportedOperationException</code>.

@since  SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4789378 // DYNAMIC_SOAP_PROTOCOL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4789506 // SOAP_1_1_PROTOCOL (<unidirectional association>)
	relation 4789506 --->
	  a role_name "SOAP_1_1_PROTOCOL" init_value " \"SOAP 1.1 Protocol\"" class_relation const_relation public
	    comment "
Used to create <code>MessageFactory</code> instances that create
<code>SOAPMessages</code> whose behavior supports the SOAP 1.1  specification.

@since  SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4789506 // SOAP_1_1_PROTOCOL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4789634 // SOAP_1_2_PROTOCOL (<unidirectional association>)
	relation 4789634 --->
	  a role_name "SOAP_1_2_PROTOCOL" init_value " \"SOAP 1.2 Protocol\"" class_relation const_relation public
	    comment "
Used to create <code>MessageFactory</code> instances that create
<code>SOAPMessages</code> whose behavior supports the SOAP 1.2
specification

@since  SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4789634 // SOAP_1_2_PROTOCOL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4789762 // DEFAULT_SOAP_PROTOCOL (<unidirectional association>)
	relation 4789762 --->
	  a role_name "DEFAULT_SOAP_PROTOCOL" init_value " SOAP_1_1_PROTOCOL" class_relation const_relation public
	    comment "
The default protocol: SOAP 1.1 for backwards compatibility.

@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4789762 // DEFAULT_SOAP_PROTOCOL (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4789890 // URI_NS_SOAP_1_1_ENVELOPE (<unidirectional association>)
	relation 4789890 --->
	  a role_name "URI_NS_SOAP_1_1_ENVELOPE" init_value " \"http://schemas.xmlsoap.org/soap/envelope/\"" class_relation const_relation public
	    comment "
The namespace identifier for the SOAP 1.1 envelope.
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4789890 // URI_NS_SOAP_1_1_ENVELOPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4790018 // URI_NS_SOAP_1_2_ENVELOPE (<unidirectional association>)
	relation 4790018 --->
	  a role_name "URI_NS_SOAP_1_2_ENVELOPE" init_value " \"http://www.w3.org/2003/05/soap-envelope\"" class_relation const_relation public
	    comment "
The namespace identifier for the SOAP 1.2 envelope.
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4790018 // URI_NS_SOAP_1_2_ENVELOPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4790146 // URI_NS_SOAP_ENVELOPE (<unidirectional association>)
	relation 4790146 --->
	  a role_name "URI_NS_SOAP_ENVELOPE" init_value " URI_NS_SOAP_1_1_ENVELOPE" class_relation const_relation public
	    comment "
The namespace identifier for the SOAP 1.1 envelope, All SOAPElements in this
namespace are defined by the SOAP 1.1 specification.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4790146 // URI_NS_SOAP_ENVELOPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4790274 // URI_NS_SOAP_ENCODING (<unidirectional association>)
	relation 4790274 --->
	  a role_name "URI_NS_SOAP_ENCODING" init_value " \"http://schemas.xmlsoap.org/soap/encoding/\"" class_relation const_relation public
	    comment "
The namespace identifier for the SOAP 1.1 encoding.
An attribute named <code>encodingStyle</code> in the
<code>URI_NS_SOAP_ENVELOPE</code> namespace and set to the value
<code>URI_NS_SOAP_ENCODING</code> can be added to an element to indicate
that it is encoded using the rules in section 5 of the SOAP 1.1
specification.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4790274 // URI_NS_SOAP_ENCODING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4790402 // URI_NS_SOAP_1_2_ENCODING (<unidirectional association>)
	relation 4790402 --->
	  a role_name "URI_NS_SOAP_1_2_ENCODING" init_value " \"http://www.w3.org/2003/05/soap-encoding\"" class_relation const_relation public
	    comment "
The namespace identifier for the SOAP 1.2 encoding.
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4790402 // URI_NS_SOAP_1_2_ENCODING (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4790530 // SOAP_1_1_CONTENT_TYPE (<unidirectional association>)
	relation 4790530 --->
	  a role_name "SOAP_1_1_CONTENT_TYPE" init_value " \"text/xml\"" class_relation const_relation public
	    comment "
The media type  of the <code>Content-Type</code> MIME header in SOAP 1.1.
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4790530 // SOAP_1_1_CONTENT_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4790658 // SOAP_1_2_CONTENT_TYPE (<unidirectional association>)
	relation 4790658 --->
	  a role_name "SOAP_1_2_CONTENT_TYPE" init_value " \"application/soap+xml\"" class_relation const_relation public
	    comment "
The media type  of the <code>Content-Type</code> MIME header in SOAP 1.2.
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4790658 // SOAP_1_2_CONTENT_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4790786 // URI_SOAP_ACTOR_NEXT (<unidirectional association>)
	relation 4790786 --->
	  a role_name "URI_SOAP_ACTOR_NEXT" init_value " \"http://schemas.xmlsoap.org/soap/actor/next\"" class_relation const_relation public
	    comment "
The URI identifying the next application processing a SOAP request as the intended
actor for a SOAP 1.1 header entry (see section 4.2.2 of the SOAP 1.1 specification).
<p>
This value can be passed to
{@link SOAPHeader#examineMustUnderstandHeaderElements(String)},
{@link SOAPHeader#examineHeaderElements(String)} and
{@link SOAPHeader#extractHeaderElements(String)}

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4790786 // URI_SOAP_ACTOR_NEXT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4790914 // URI_SOAP_1_2_ROLE_NEXT (<unidirectional association>)
	relation 4790914 --->
	  a role_name "URI_SOAP_1_2_ROLE_NEXT" init_value " URI_NS_SOAP_1_2_ENVELOPE + \"/role/next\"" class_relation const_relation public
	    comment "
The URI identifying the next application processing a SOAP request as the intended
role for a SOAP 1.2 header entry (see section 2.2 of part 1 of the SOAP 1.2
specification).
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4790914 // URI_SOAP_1_2_ROLE_NEXT (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4791042 // URI_SOAP_1_2_ROLE_NONE (<unidirectional association>)
	relation 4791042 --->
	  a role_name "URI_SOAP_1_2_ROLE_NONE" init_value " URI_NS_SOAP_1_2_ENVELOPE + \"/role/none\"" class_relation const_relation public
	    comment "
The URI specifying the role None in SOAP 1.2.
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4791042 // URI_SOAP_1_2_ROLE_NONE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4791170 // URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER (<unidirectional association>)
	relation 4791170 --->
	  a role_name "URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER" init_value "
            URI_NS_SOAP_1_2_ENVELOPE + \"/role/ultimateReceiver\"" class_relation const_relation public
	    comment "
The URI identifying the ultimate receiver of the SOAP 1.2 message.
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4791170 // URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4791298 // SOAP_ENV_PREFIX (<unidirectional association>)
	relation 4791298 --->
	  a role_name "SOAP_ENV_PREFIX" init_value " \"env\"" class_relation const_relation public
	    comment "
The default namespace prefix for http://www.w3.org/2003/05/soap-envelope
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4791298 // SOAP_ENV_PREFIX (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 4791426 // SOAP_VERSIONMISMATCH_FAULT (<unidirectional association>)
	relation 4791426 --->
	  a role_name "SOAP_VERSIONMISMATCH_FAULT" init_value "
         new QName(URI_NS_SOAP_1_2_ENVELOPE, \"VersionMismatch\", SOAP_ENV_PREFIX)" class_relation const_relation public
	    comment "
SOAP 1.2 VersionMismatch Fault
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4791426 // SOAP_VERSIONMISMATCH_FAULT (<unidirectional association>)
	  b parent class_ref 673666 // QName
      end

      classrelation 4791554 // SOAP_MUSTUNDERSTAND_FAULT (<unidirectional association>)
	relation 4791554 --->
	  a role_name "SOAP_MUSTUNDERSTAND_FAULT" init_value "
         new QName(URI_NS_SOAP_1_2_ENVELOPE, \"MustUnderstand\", SOAP_ENV_PREFIX)" class_relation const_relation public
	    comment "
SOAP 1.2 MustUnderstand Fault
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4791554 // SOAP_MUSTUNDERSTAND_FAULT (<unidirectional association>)
	  b parent class_ref 673666 // QName
      end

      classrelation 4791682 // SOAP_DATAENCODINGUNKNOWN_FAULT (<unidirectional association>)
	relation 4791682 --->
	  a role_name "SOAP_DATAENCODINGUNKNOWN_FAULT" init_value "
         new QName(URI_NS_SOAP_1_2_ENVELOPE, \"DataEncodingUnknown\", SOAP_ENV_PREFIX)" class_relation const_relation public
	    comment "
SOAP 1.2 DataEncodingUnknown Fault
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4791682 // SOAP_DATAENCODINGUNKNOWN_FAULT (<unidirectional association>)
	  b parent class_ref 673666 // QName
      end

      classrelation 4791810 // SOAP_SENDER_FAULT (<unidirectional association>)
	relation 4791810 --->
	  a role_name "SOAP_SENDER_FAULT" init_value "
         new QName(URI_NS_SOAP_1_2_ENVELOPE, \"Sender\", SOAP_ENV_PREFIX)" class_relation const_relation public
	    comment "
SOAP 1.2 Sender Fault
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4791810 // SOAP_SENDER_FAULT (<unidirectional association>)
	  b parent class_ref 673666 // QName
      end

      classrelation 4791938 // SOAP_RECEIVER_FAULT (<unidirectional association>)
	relation 4791938 --->
	  a role_name "SOAP_RECEIVER_FAULT" init_value "
         new QName(URI_NS_SOAP_1_2_ENVELOPE, \"Receiver\", SOAP_ENV_PREFIX)" class_relation const_relation public
	    comment "
SOAP 1.2 Receiver Fault
@since SAAJ 1.3

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4791938 // SOAP_RECEIVER_FAULT (<unidirectional association>)
	  b parent class_ref 673666 // QName
      end
    end

    class 1428738 "SOAPElementFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<code>SOAPElementFactory</code> is a factory for XML fragments that
will eventually end up in the SOAP part. These fragments
can be inserted as children of the <code>SOAPHeader</code> or
<code>SOAPBody</code> or <code>SOAPEnvelope</code>.

<p>Elements created using this factory do not have the properties
of an element that lives inside a SOAP header document. These
elements are copied into the XML document tree when they are
inserted.
@deprecated - Use <code>javax.xml.soap.SOAPFactory</code> for creating SOAPElements.
@see javax.xml.soap.SOAPFactory
"
      classrelation 4792066 // soapFactory (<unidirectional association>)
	relation 4792066 --->
	  a role_name "soapFactory" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 4792066 // soapFactory (<unidirectional association>)
	  b parent class_ref 1427714 // SOAPFactory
      end

      operation 12067970 "SOAPElementFactory"
	private explicit_return_type ""
	nparams 1
	  param inout name "soapFactory" type class_ref 1427714 // SOAPFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 12068098 "create"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <code>SOAPElement</code> object initialized with the
given <code>Name</code> object.

@param name a <code>Name</code> object with the XML name for
            the new element

@return the new <code>SOAPElement</code> object that was
        created

@exception SOAPException if there is an error in creating the
           <code>SOAPElement</code> object

@deprecated Use
javax.xml.soap.SOAPFactory.createElement(javax.xml.soap.Name)
instead

@see javax.xml.soap.SOAPFactory#createElement(javax.xml.soap.Name)
@see javax.xml.soap.SOAPFactory#createElement(javax.xml.namespace.QName)
"
      end

      operation 12068226 "create"
	public return_type class_ref 1426306 // SOAPElement
	nparams 1
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a <code>SOAPElement</code> object initialized with the
given local name.

@param localName a <code>String</code> giving the local name for
            the new element

@return the new <code>SOAPElement</code> object that was
        created

@exception SOAPException if there is an error in creating the
           <code>SOAPElement</code> object

@deprecated Use
javax.xml.soap.SOAPFactory.createElement(String localName) instead

@see javax.xml.soap.SOAPFactory#createElement(java.lang.String)
"
      end

      operation 12068354 "create"
	public return_type class_ref 1426306 // SOAPElement
	nparams 3
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new <code>SOAPElement</code> object with the given
local name, prefix and uri.

@param localName a <code>String</code> giving the local name
                 for the new element
@param prefix the prefix for this <code>SOAPElement</code>
@param uri a <code>String</code> giving the URI of the
           namespace to which the new element belongs

@exception SOAPException if there is an error in creating the
           <code>SOAPElement</code> object

@deprecated Use
javax.xml.soap.SOAPFactory.createElement(String localName,
                     String prefix,
                     String uri)
instead

@see javax.xml.soap.SOAPFactory#createElement(java.lang.String, java.lang.String, java.lang.String)
"
      end

      operation 12068482 "newInstance"
	class_operation public return_type class_ref 1428738 // SOAPElementFactory
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of <code>SOAPElementFactory</code>.

@return a new instance of a <code>SOAPElementFactory</code>

@exception SOAPException if there was an error creating the
           default <code>SOAPElementFactory</code>
"
      end
    end

    class 1428866 "SOAPEnvelope"
      abstract visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The container for the SOAPHeader and SOAPBody portions of a
<code>SOAPPart</code> object. By default, a <code>SOAPMessage</code>
object is created with a <code>SOAPPart</code> object that has a
<code>SOAPEnvelope</code> object. The <code>SOAPEnvelope</code> object
by default has an empty <code>SOAPBody</code> object and an empty
<code>SOAPHeader</code> object.  The <code>SOAPBody</code> object is
required, and the <code>SOAPHeader</code> object, though
optional, is used in the majority of cases. If the
<code>SOAPHeader</code> object is not needed, it can be deleted,
which is shown later.
<P>
A client can access the <code>SOAPHeader</code> and <code>SOAPBody</code>
objects by calling the methods <code>SOAPEnvelope.getHeader</code> and
<code>SOAPEnvelope.getBody</code>. The
following  lines of code use these two methods after starting with
the <code>SOAPMessage</code>
object <i>message</i> to get the <code>SOAPPart</code> object <i>sp</i>,
which is then used to get the <code>SOAPEnvelope</code> object <i>se</i>.

<PRE>
    SOAPPart sp = message.getSOAPPart();
    SOAPEnvelope se = sp.getEnvelope();
    SOAPHeader sh = se.getHeader();
    SOAPBody sb = se.getBody();
</PRE>
<P>
It is possible to change the body or header of a <code>SOAPEnvelope</code>
object by retrieving the current one, deleting it, and then adding
a new body or header. The <code>javax.xml.soap.Node</code> method
<code>deleteNode</code> deletes the XML element (node) on which it is
called.  For example, the following line of code deletes the
<code>SOAPBody</code> object that is retrieved by the method <code>getBody</code>.
<PRE>
     se.getBody().detachNode();
</PRE>
To create a <code>SOAPHeader</code> object to replace the one that was removed,
a client uses
the method <code>SOAPEnvelope.addHeader</code>, which creates a new header and
adds it to the <code>SOAPEnvelope</code> object. Similarly, the method
<code>addBody</code> creates a new <code>SOAPBody</code> object and adds
it to the <code>SOAPEnvelope</code> object. The following code fragment
retrieves the current header, removes it, and adds a new one. Then
it retrieves the current body, removes it, and adds a new one.

<PRE>
    SOAPPart sp = message.getSOAPPart();
    SOAPEnvelope se = sp.getEnvelope();
    se.getHeader().detachNode();
    SOAPHeader sh = se.addHeader();
    se.getBody().detachNode();
    SOAPBody sb = se.addBody();
</PRE>
It is an error to add a <code>SOAPBody</code> or <code>SOAPHeader</code>
object if one already exists.
<P>
The <code>SOAPEnvelope</code> interface provides three methods for creating
<code>Name</code> objects. One method creates <code>Name</code> objects with
a local name, a namespace prefix, and a namesapce URI. The second method creates
<code>Name</code> objects with a local name and a namespace prefix, and the third
creates <code>Name</code> objects with just a local name.  The following line of
code, in which <i>se</i> is a <code>SOAPEnvelope</code> object, creates a new
<code>Name</code> object with all three.
<PRE>
    Name name = se.createName(\"GetLastTradePrice\", \"WOMBAT\",
                               \"http://www.wombat.org/trader\");
</PRE>
"
      classrelation 4792194 // <generalisation>
	relation 4792194 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4792194 // <generalisation>
	  b parent class_ref 1426306 // SOAPElement
      end

      operation 12068610 "createName"
	abstract public return_type class_ref 1426562 // Name
	nparams 3
	  param inout name "localName" type class_ref 128130 // String
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>Name</code> object initialized with the
given local name, namespace prefix, and namespace URI.
<P>
This factory method creates <code>Name</code> objects for use in
the SOAP/XML document.

@param localName a <code>String</code> giving the local name
@param prefix a <code>String</code> giving the prefix of the namespace
@param uri a <code>String</code> giving the URI of the namespace
@return a <code>Name</code> object initialized with the given
        local name, namespace prefix, and namespace URI
@throws SOAPException if there is a SOAP error
"
      end

      operation 12068738 "createName"
	abstract public return_type class_ref 1426562 // Name
	nparams 1
	  param inout name "localName" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>Name</code> object initialized with the
given local name.
<P>
This factory method creates <code>Name</code> objects for use in
the SOAP/XML document.

@param localName a <code>String</code> giving the local name
@return a <code>Name</code> object initialized with the given
        local name
@throws SOAPException if there is a SOAP error
"
      end

      operation 12068866 "getHeader"
	public return_type class_ref 1428994 // SOAPHeader
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>SOAPHeader</code> object for
this <code>SOAPEnvelope</code> object.
<P>
A new <code>SOAPMessage</code> object is by default created with a
<code>SOAPEnvelope</code> object that contains an empty
<code>SOAPHeader</code> object.  As a result, the method
<code>getHeader</code> will always return a <code>SOAPHeader</code>
object unless the header has been removed and a new one has not
been added.

@return the <code>SOAPHeader</code> object or <code>null</code> if
        there is none
@exception SOAPException if there is a problem obtaining the
           <code>SOAPHeader</code> object
"
      end

      operation 12068994 "getBody"
	public return_type class_ref 1427970 // SOAPBody
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <code>SOAPBody</code> object associated with this
<code>SOAPEnvelope</code> object.
<P>
A new <code>SOAPMessage</code> object is by default created with a
<code>SOAPEnvelope</code> object that contains an empty
<code>SOAPBody</code> object.  As a result, the method
<code>getBody</code> will always return a <code>SOAPBody</code>
object unless the body has been removed and a new one has not
been added.

@return the <code>SOAPBody</code> object for this
        <code>SOAPEnvelope</code> object or <code>null</code>
        if there is none
@exception SOAPException if there is a problem obtaining the
           <code>SOAPBody</code> object
"
      end

      operation 12069122 "addHeader"
	public return_type class_ref 1428994 // SOAPHeader
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SOAPHeader</code> object and sets it as the
<code>SOAPHeader</code> object for this <code>SOAPEnvelope</code>
object.
<P>
It is illegal to add a header when the envelope already
contains a header.  Therefore, this method should be called
only after the existing header has been removed.

@return the new <code>SOAPHeader</code> object

@exception SOAPException if this
           <code>SOAPEnvelope</code> object already contains a
           valid <code>SOAPHeader</code> object
"
      end

      operation 12069250 "addBody"
	public return_type class_ref 1427970 // SOAPBody
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>SOAPBody</code> object and sets it as the
<code>SOAPBody</code> object for this <code>SOAPEnvelope</code>
object.
<P>
It is illegal to add a body when the envelope already
contains a body. Therefore, this method should be called
only after the existing body has been removed.

@return the new <code>SOAPBody</code> object

@exception SOAPException if this
           <code>SOAPEnvelope</code> object already contains a
           valid <code>SOAPBody</code> object
"
      end
    end

    class 1428994 "SOAPHeader"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A representation of the SOAP header
element. A SOAP header element consists of XML data that affects
the way the application-specific content is processed by the message
provider. For example, transaction semantics, authentication information,
and so on, can be specified as the content of a <code>SOAPHeader</code>
object.
<P>
A <code>SOAPEnvelope</code> object contains an empty
<code>SOAPHeader</code> object by default. If the <code>SOAPHeader</code>
object, which is optional, is not needed, it can be retrieved and deleted
with the following line of code. The variable <i>se</i> is a
<code>SOAPEnvelope</code> object.
<PRE>
     se.getHeader().detachNode();
</PRE>

A <code>SOAPHeader</code> object is created with the <code>SOAPEnvelope</code>
method <code>addHeader</code>. This method, which creates a new header and adds it
to the envelope, may be called only after the existing header has been removed.

<PRE>
     se.getHeader().detachNode();
     SOAPHeader sh = se.addHeader();
</PRE>
<P>
A <code>SOAPHeader</code> object can have only <code>SOAPHeaderElement</code>
objects as its immediate children. The method <code>addHeaderElement</code>
creates a new <code>HeaderElement</code> object and adds it to the
<code>SOAPHeader</code> object. In the following line of code, the
argument to the method <code>addHeaderElement</code> is a <code>Name</code>
object that is the name for the new <code>HeaderElement</code> object.
<PRE>
     SOAPHeaderElement shElement = sh.addHeaderElement(name);
</PRE>

@see SOAPHeaderElement
"
      classrelation 4792962 // <generalisation>
	relation 4792962 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4792962 // <generalisation>
	  b parent class_ref 1426306 // SOAPElement
      end

      operation 12075138 "addHeaderElement"
	public return_type class_ref 1429122 // SOAPHeaderElement
	nparams 1
	  param inout name "name" type class_ref 1426562 // Name
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPHeaderElement</code> object initialized with the
specified name and adds it to this <code>SOAPHeader</code> object.

@param name a <code>Name</code> object with the name of the new
       <code>SOAPHeaderElement</code> object
@return the new <code>SOAPHeaderElement</code> object that was
         inserted into this <code>SOAPHeader</code> object
@exception SOAPException if a SOAP error occurs
@see SOAPHeader#addHeaderElement(javax.xml.namespace.QName)
"
      end

      operation 12075266 "addHeaderElement"
	public return_type class_ref 1429122 // SOAPHeaderElement
	nparams 1
	  param inout name "qname" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <code>SOAPHeaderElement</code> object initialized with the
specified qname and adds it to this <code>SOAPHeader</code> object.

@param qname a <code>QName</code> object with the qname of the new
       <code>SOAPHeaderElement</code> object
@return the new <code>SOAPHeaderElement</code> object that was
         inserted into this <code>SOAPHeader</code> object
@exception SOAPException if a SOAP error occurs
@see SOAPHeader#addHeaderElement(Name)
@since SAAJ 1.3
"
      end

      operation 12075394 "examineMustUnderstandHeaderElements"
	public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "actor" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects
in this <code>SOAPHeader</code> object
that have the specified <i>actor</i> and that have a MustUnderstand attribute
whose value is equivalent to <code>true</code>.
<p>
In SOAP 1.2 the <i>env:actor</i> attribute is replaced by the <i>env:role</i>
attribute, but with essentially the same semantics.

@param actor a <code>String</code> giving the URI of the <code>actor</code> / <code>role</code>
       for which to search
@return an <code>Iterator</code> object over all the
        <code>SOAPHeaderElement</code> objects that contain the specified
         <code>actor</code> / <code>role</code> and are marked as MustUnderstand
@see #examineHeaderElements
@see #extractHeaderElements
@see SOAPConstants#URI_SOAP_ACTOR_NEXT

@since SAAJ 1.2
"
      end

      operation 12075522 "examineHeaderElements"
	public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "actor" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects
in this <code>SOAPHeader</code> object
that have the specified <i>actor</i>.

An <i>actor</i> is a global attribute that indicates the intermediate
parties that should process a message before it reaches its ultimate
receiver. An actor receives the message and processes it before sending
it on to the next actor. The default actor is the ultimate intended
recipient for the message, so if no actor attribute is included in a
<code>SOAPHeader</code> object, it is sent to the ultimate receiver
along with the message body.
<p>
In SOAP 1.2 the <i>env:actor</i> attribute is replaced by the <i>env:role</i>
attribute, but with essentially the same semantics.

@param actor a <code>String</code> giving the URI of the <code>actor</code> / <code>role</code>
       for which to search
@return an <code>Iterator</code> object over all the
        <code>SOAPHeaderElement</code> objects that contain the specified
         <code>actor</code> / <code>role</code>
@see #extractHeaderElements
@see SOAPConstants#URI_SOAP_ACTOR_NEXT
"
      end

      operation 12075650 "extractHeaderElements"
	public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "actor" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects
in this <code>SOAPHeader</code> object
that have the specified <i>actor</i> and detaches them
from this <code>SOAPHeader</code> object.
<P>
This method allows an actor to process the parts of the
<code>SOAPHeader</code> object that apply to it and to remove
them before passing the message on to the next actor.
<p>
In SOAP 1.2 the <i>env:actor</i> attribute is replaced by the <i>env:role</i>
attribute, but with essentially the same semantics.

@param actor a <code>String</code> giving the URI of the <code>actor</code> / <code>role</code>
       for which to search
@return an <code>Iterator</code> object over all the
        <code>SOAPHeaderElement</code> objects that contain the specified
         <code>actor</code> / <code>role</code>

@see #examineHeaderElements
@see SOAPConstants#URI_SOAP_ACTOR_NEXT
"
      end

      operation 12075778 "addNotUnderstoodHeaderElement"
	public return_type class_ref 1429122 // SOAPHeaderElement
	nparams 1
	  param inout name "name" type class_ref 673666 // QName
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new NotUnderstood <code>SOAPHeaderElement</code> object initialized
with the specified name and adds it to this <code>SOAPHeader</code> object.
This operation is supported only by SOAP 1.2.

@param name a <code>QName</code> object with the name of the
       <code>SOAPHeaderElement</code> object that was not understood.
@return the new <code>SOAPHeaderElement</code> object that was
         inserted into this <code>SOAPHeader</code> object
@exception SOAPException if a SOAP error occurs.
@exception UnsupportedOperationException if this is a SOAP 1.1 Header.
@since SAAJ 1.3
"
      end

      operation 12075906 "addUpgradeHeaderElement"
	public return_type class_ref 1429122 // SOAPHeaderElement
	nparams 1
	  param inout name "supportedSOAPURIs" type class_ref 132994 // Iterator
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Upgrade <code>SOAPHeaderElement</code> object initialized
with the specified List of supported SOAP URIs and adds it to this
<code>SOAPHeader</code> object.
This operation is supported on both SOAP 1.1 and SOAP 1.2 header.

@param supportedSOAPURIs an <code>Iterator</code> object with the URIs of SOAP
         versions supported.
@return the new <code>SOAPHeaderElement</code> object that was
         inserted into this <code>SOAPHeader</code> object
@exception SOAPException if a SOAP error occurs.
@since SAAJ 1.3
"
      end

      operation 12076034 "addUpgradeHeaderElement"
	public return_type class_ref 1429122 // SOAPHeaderElement
	nparams 1
	  param inout name "supportedSoapUris" type class_ref 128130 // String
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Upgrade <code>SOAPHeaderElement</code> object initialized
with the specified array of supported SOAP URIs and adds it to this
<code>SOAPHeader</code> object.
This operation is supported on both SOAP 1.1 and SOAP 1.2 header.

@param  supportedSoapUris an array of the URIs of SOAP versions supported.
@return the new <code>SOAPHeaderElement</code> object that was
         inserted into this <code>SOAPHeader</code> object
@exception SOAPException if a SOAP error occurs.
@since SAAJ 1.3
"
      end

      operation 12076162 "addUpgradeHeaderElement"
	public return_type class_ref 1429122 // SOAPHeaderElement
	nparams 1
	  param inout name "supportedSoapUri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Upgrade <code>SOAPHeaderElement</code> object initialized
with the specified supported SOAP URI and adds it to this
<code>SOAPHeader</code> object.
This operation is supported on both SOAP 1.1 and SOAP 1.2 header.

@param supportedSoapUri the URI of SOAP the version that is supported.
@return the new <code>SOAPHeaderElement</code> object that was
         inserted into this <code>SOAPHeader</code> object
@exception SOAPException if a SOAP error occurs.
@since SAAJ 1.3
"
      end

      operation 12076290 "examineAllHeaderElements"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects
in this <code>SOAPHeader</code> object.

@return an <code>Iterator</code> object over all the
         <code>SOAPHeaderElement</code> objects contained by this
         <code>SOAPHeader</code>
@see #extractAllHeaderElements

@since SAAJ 1.2
"
      end

      operation 12076418 "extractAllHeaderElements"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an <code>Iterator</code> over all the <code>SOAPHeaderElement</code> objects
in this <code>SOAPHeader</code> object and detaches them
from this <code>SOAPHeader</code> object.

@return an <code>Iterator</code> object over all the
         <code>SOAPHeaderElement</code> objects contained by this
         <code>SOAPHeader</code>

@see #examineAllHeaderElements

@since SAAJ 1.2
"
      end
    end

    class 1429122 "SOAPHeaderElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An object representing the contents in the SOAP header part of the
SOAP envelope.
The immediate children of a <code>SOAPHeader</code> object can
be represented only as <code>SOAPHeaderElement</code> objects.
<P>
A <code>SOAPHeaderElement</code> object can have other
<code>SOAPElement</code> objects as its children.
"
      classrelation 4793090 // <generalisation>
	relation 4793090 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4793090 // <generalisation>
	  b parent class_ref 1426306 // SOAPElement
      end

      operation 12076546 "setActor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "actorURI" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the actor associated with this <code>SOAPHeaderElement</code>
object to the specified actor. The default value of an actor is:
         <code>SOAPConstants.URI_SOAP_ACTOR_NEXT</code>
<P>
If this <code>SOAPHeaderElement</code> supports SOAP 1.2 then this call is
equivalent to {@link #setRole(String)}

@param  actorURI a <code>String</code> giving the URI of the actor
          to set

@exception IllegalArgumentException if there is a problem in
setting the actor.

@see #getActor
"
      end

      operation 12076674 "setRole"
	public explicit_return_type "void"
	nparams 1
	  param inout name "uri" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <code>Role</code> associated with this <code>SOAPHeaderElement</code>
object to the specified <code>Role</code>.

@param uri - the URI of the <code>Role</code>

@throws SOAPException if there is an error in setting the role

@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Role.

@since SAAJ 1.3
"
      end

      operation 12076802 "getActor"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the uri of the <i>actor</i> attribute of this
<code>SOAPHeaderElement</code>.
<P>
If this <code>SOAPHeaderElement</code> supports SOAP 1.2 then this call is
equivalent to {@link #getRole()}
@return  a <code>String</code> giving the URI of the actor
@see #setActor
"
      end

      operation 12076930 "getRole"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the <i>Role</i> attribute of this
<code>SOAPHeaderElement</code>.

@return a <code>String</code> giving the URI of the <code>Role</code>

@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Fault Role.

@since SAAJ 1.3
"
      end

      operation 12077058 "setMustUnderstand"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mustUnderstand" explicit_type "boolean"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the mustUnderstand attribute for this <code>SOAPHeaderElement</code>
object to be either true or false.
<P>
If the mustUnderstand attribute is on, the actor who receives the
<code>SOAPHeaderElement</code> must process it correctly. This
ensures, for example, that if the <code>SOAPHeaderElement</code>
object modifies the message, that the message is being modified correctly.

@param mustUnderstand <code>true</code> to set the mustUnderstand
       attribute to true; <code>false</code> to set it to false

@exception IllegalArgumentException if there is a problem in
setting the mustUnderstand attribute
@see #getMustUnderstand
@see #setRelay
"
      end

      operation 12077186 "getMustUnderstand"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the boolean value of the mustUnderstand attribute for this
<code>SOAPHeaderElement</code>.

@return <code>true</code> if the mustUnderstand attribute of this
       <code>SOAPHeaderElement</code> object is turned on; <code>false</code>
        otherwise
"
      end

      operation 12077314 "setRelay"
	public explicit_return_type "void"
	nparams 1
	  param inout name "relay" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the <i>relay</i> attribute for this <code>SOAPHeaderElement</code> to be
either true or false.
<P>
The SOAP relay attribute is set to true to indicate that the SOAP header
block must be relayed by any node that is targeted by the header block
but not actually process it. This attribute is ignored on header blocks
whose mustUnderstand attribute is set to true or that are targeted at
the ultimate reciever (which is the default). The default value of this
attribute is <code>false</code>.

@param relay the new value of the <i>relay</i> attribute

@exception SOAPException if there is a problem in setting the
relay attribute.
@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Relay attribute.

@see #setMustUnderstand
@see #getRelay

@since SAAJ 1.3
"
      end

      operation 12077442 "getRelay"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the boolean value of the <i>relay</i> attribute for this
<code>SOAPHeaderElement</code>

@return <code>true</code> if the relay attribute is turned on;
<code>false</code> otherwise

@exception UnsupportedOperationException if this message does not
     support the SOAP 1.2 concept of Relay attribute.

@see #getMustUnderstand
@see #setRelay

@since SAAJ 1.3
"
      end
    end

    class 1429250 "SOAPPart"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The container for the SOAP-specific portion of a <code>SOAPMessage</code>
object. All messages are required to have a SOAP part, so when a
<code>SOAPMessage</code> object is created, it will automatically
have a <code>SOAPPart</code> object.
<P>
A <code>SOAPPart</code> object is a MIME part and has the MIME headers
Content-Id, Content-Location, and Content-Type.  Because the value of
Content-Type must be \"text/xml\", a <code>SOAPPart</code> object automatically
has a MIME header of Content-Type with its value set to \"text/xml\".
The value must be \"text/xml\" because content in the SOAP part of a
message must be in XML format.  Content that is not of type \"text/xml\"
must be in an <code>AttachmentPart</code> object rather than in the
<code>SOAPPart</code> object.
<P>
When a message is sent, its SOAP part must have the MIME header Content-Type
set to \"text/xml\". Or, from the other perspective, the SOAP part of any
message that is received must have the MIME header Content-Type with a
value of \"text/xml\".
<P>
A client can access the <code>SOAPPart</code> object of a
<code>SOAPMessage</code> object by
calling the method <code>SOAPMessage.getSOAPPart</code>. The
following  line of code, in which <code>message</code> is a
<code>SOAPMessage</code> object, retrieves the SOAP part of a message.
<PRE>
  SOAPPart soapPart = message.getSOAPPart();
</PRE>
<P>
A <code>SOAPPart</code> object contains a <code>SOAPEnvelope</code> object,
which in turn contains a <code>SOAPBody</code> object and a
<code>SOAPHeader</code> object.
The <code>SOAPPart</code> method <code>getEnvelope</code> can be used
to retrieve the <code>SOAPEnvelope</code> object.
<P>
"
      classrelation 4793474 // <realization>
	relation 4793474 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4793474 // <realization>
	  b parent class_ref 378626 // Document
      end

      classrelation 4793602 // <realization>
	relation 4793602 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 4793602 // <realization>
	  b parent class_ref 1426434 // Node
      end

      operation 12080258 "getEnvelope"
	abstract public return_type class_ref 1428866 // SOAPEnvelope
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the <code>SOAPEnvelope</code> object associated with this
<code>SOAPPart</code> object. Once the SOAP envelope is obtained, it
can be used to get its contents.

@return the <code>SOAPEnvelope</code> object for this
          <code>SOAPPart</code> object
@exception SOAPException if there is a SOAP error
"
      end

      operation 12080386 "getContentId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the MIME header whose name is \"Content-Id\".

@return a <code>String</code> giving the value of the MIME header
        named \"Content-Id\"
@see #setContentId
"
      end

      operation 12080514 "getContentLocation"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves the value of the MIME header whose name is \"Content-Location\".

@return a <code>String</code> giving the value of the MIME header whose
         name is \"Content-Location\"
@see #setContentLocation
"
      end

      operation 12080642 "setContentId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "contentId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the MIME header named \"Content-Id\"
to the given <code>String</code>.

@param contentId a <code>String</code> giving the value of the MIME
       header \"Content-Id\"

@exception IllegalArgumentException if there is a problem in
setting the content id
@see #getContentId
"
      end

      operation 12080770 "setContentLocation"
	public explicit_return_type "void"
	nparams 1
	  param inout name "contentLocation" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the MIME header \"Content-Location\"
to the given <code>String</code>.

@param contentLocation a <code>String</code> giving the value
       of the MIME
       header \"Content-Location\"
@exception IllegalArgumentException if there is a problem in
           setting the content location.
@see #getContentLocation
"
      end

      operation 12080898 "removeMimeHeader"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "header" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all MIME headers that match the given name.

@param header a <code>String</code> giving the name of the MIME header(s) to
              be removed
"
      end

      operation 12081026 "removeAllMimeHeaders"
	abstract public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all the <code>MimeHeader</code> objects for this
<code>SOAPEnvelope</code> object.
"
      end

      operation 12081154 "getMimeHeader"
	abstract public return_type class_ref 128130 // String
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the values of the <code>MimeHeader</code> object
in this <code>SOAPPart</code> object that
is identified by the given <code>String</code>.

@param name the name of the header; example: \"Content-Type\"
@return a <code>String</code> array giving all the values for the
        specified header
@see #setMimeHeader
"
      end

      operation 12081282 "setMimeHeader"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Changes the first header entry that matches the given header name
so that its value is the given value, adding a new header with the
given name and value if no
existing header is a match. If there is a match, this method clears
all existing values for the first header that matches and sets the
given value instead. If more than one header has
the given name, this method removes all of the matching headers after
the first one.
<P>
Note that RFC822 headers can contain only US-ASCII characters.

@param   name    a <code>String</code> giving the header name
                 for which to search
@param   value   a <code>String</code> giving the value to be set.
                 This value will be substituted for the current value(s)
                 of the first header that is a match if there is one.
                 If there is no match, this value will be the value for
                 a new <code>MimeHeader</code> object.

@exception IllegalArgumentException if there was a problem with
           the specified mime header name or value
@see #getMimeHeader
"
      end

      operation 12081410 "addMimeHeader"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "value" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <code>MimeHeader</code> object with the specified
name and value and adds it to this <code>SOAPPart</code> object.
If a <code>MimeHeader</code> with the specified name already
exists, this method adds the specified value to the already
existing value(s).
<P>
Note that RFC822 headers can contain only US-ASCII characters.

@param   name    a <code>String</code> giving the header name
@param   value   a <code>String</code> giving the value to be set
                 or added
@exception IllegalArgumentException if there was a problem with
           the specified mime header name or value
"
      end

      operation 12081538 "getAllMimeHeaders"
	abstract public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all the headers for this <code>SOAPPart</code> object
as an iterator over the <code>MimeHeader</code> objects.

@return  an <code>Iterator</code> object with all of the Mime
         headers for this <code>SOAPPart</code> object
"
      end

      operation 12081666 "getMatchingMimeHeaders"
	abstract public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "names" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all <code>MimeHeader</code> objects that match a name in
the given array.

@param names a <code>String</code> array with the name(s) of the
       MIME headers to be returned
@return  all of the MIME headers that match one of the names in the
          given array, returned as an <code>Iterator</code> object
"
      end

      operation 12081794 "getNonMatchingMimeHeaders"
	abstract public return_type class_ref 132994 // Iterator
	nparams 1
	  param inout name "names" type class_ref 128130 // String
	multiplicity "[]"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves all <code>MimeHeader</code> objects whose name does
not match a name in the given array.

@param names a <code>String</code> array with the name(s) of the
       MIME headers not to be returned
@return  all of the MIME headers in this <code>SOAPPart</code> object
         except those that match one of the names in the
          given array.  The nonmatching MIME headers are returned as an
          <code>Iterator</code> object.
"
      end

      operation 12081922 "setContent"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "source" type class_ref 627202 // Source
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the content of the <code>SOAPEnvelope</code> object with the data
from the given <code>Source</code> object. This <code>Source</code>
must contain a valid SOAP document.

@param source the <code>javax.xml.transform.Source</code> object with the
       data to be set

@exception SOAPException if there is a problem in setting the source
@see #getContent
"
      end

      operation 12082050 "getContent"
	abstract public return_type class_ref 627202 // Source
	nparams 0
	nexceptions 1
	  exception class_ref 1425922 // SOAPException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the content of the SOAPEnvelope as a JAXP <code>Source</code>
object.

@return the content as a <code>javax.xml.transform.Source</code> object

@exception SOAPException if the implementation cannot convert
                         the specified <code>Source</code> object
@see #setContent
"
      end
    end

    class 1429378 "Text"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A representation of a node whose value is text.  A <code>Text</code> object
may represent text that is content or text that is a comment.

"
      classrelation 4793730 // <generalisation>
	relation 4793730 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4793730 // <generalisation>
	  b parent class_ref 1426434 // Node
      end

      classrelation 4793858 // <generalisation>
	relation 4793858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 4793858 // <generalisation>
	  b parent class_ref 649090 // Text
      end

      operation 12082178 "isComment"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves whether this <code>Text</code> object represents a comment.

@return <code>true</code> if this <code>Text</code> object is a
        comment; <code>false</code> otherwise
"
      end
    end
  end

  deploymentview 178562 "soap"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 1015426 "AttachmentPart"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.io.Reader;
import java.util.Iterator;
import javax.activation.DataHandler;
${definition}"
      associated_elems
	class_ref 1425794 // AttachmentPart
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1015554 "Node"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1426434 // Node
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1015682 "SOAPElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import javax.xml.namespace.QName;
${definition}"
      associated_elems
	class_ref 1426306 // SOAPElement
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1015810 "SOAPFaultElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1426178 // SOAPFaultElement
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1015938 "Detail"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import javax.xml.namespace.QName;
${definition}"
      associated_elems
	class_ref 1426050 // Detail
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1016066 "DetailEntry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1426690 // DetailEntry
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1016194 "FactoryFinder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.*;
import java.util.Properties;
${definition}"
      associated_elems
	class_ref 1426818 // FactoryFinder
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1016322 "MessageFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
${definition}"
      associated_elems
	class_ref 1426946 // MessageFactory
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1016450 "MimeHeader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1427330 // MimeHeader
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1016578 "MimeHeaders"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.Vector;
${definition}"
      associated_elems
	class_ref 1427202 // MimeHeaders
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1016706 "Name"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1426562 // Name
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1016834 "SAAJMetaFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1427586 // SAAJMetaFactory
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1017090 "SAAJResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.dom.DOMResult;
${definition}"
      associated_elems
	class_ref 1427842 // SAAJResult
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1017218 "SOAPBody"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Locale;
import org.w3c.dom.Document;
import javax.xml.namespace.QName;
${definition}"
      associated_elems
	class_ref 1427970 // SOAPBody
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1017346 "SOAPBodyElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1428226 // SOAPBodyElement
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1017474 "SOAPConnection"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1428354 // SOAPConnection
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1017602 "SOAPConnectionFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1428482 // SOAPConnectionFactory
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1017730 "SOAPConstants"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.namespace.QName;
${definition}"
      associated_elems
	class_ref 1428610 // SOAPConstants
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1017858 "SOAPElementFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1428738 // SOAPElementFactory
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1017986 "SOAPEnvelope"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1428866 // SOAPEnvelope
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1018114 "SOAPException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1425922 // SOAPException
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1018242 "SOAPFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import javax.xml.namespace.QName;
import org.w3c.dom.Element;
${definition}"
      associated_elems
	class_ref 1427714 // SOAPFactory
      end
      comment "Copyright (c) 2004, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1018370 "SOAPFault"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.Locale;
import javax.xml.namespace.QName;
${definition}"
      associated_elems
	class_ref 1428098 // SOAPFault
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1018498 "SOAPHeader"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import javax.xml.namespace.QName;
${definition}"
      associated_elems
	class_ref 1428994 // SOAPHeader
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1018626 "SOAPHeaderElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1429122 // SOAPHeaderElement
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1018754 "SOAPMessage"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.OutputStream;
import java.io.IOException;
import java.util.Iterator;
import javax.activation.DataHandler;
${definition}"
      associated_elems
	class_ref 1427074 // SOAPMessage
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1018882 "SOAPPart"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import javax.xml.transform.Source;
${definition}"
      associated_elems
	class_ref 1429250 // SOAPPart
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 1019010 "Text"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1429378 // Text
      end
      comment "Copyright (c) 2004, 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
