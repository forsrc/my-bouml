class AbstractStringBuilder
!!!6946690.java!!!	AbstractStringBuilder(in capacity : int)
        value = new char[capacity];
!!!6946818.java!!!	length() : int
        return count;
!!!6946946.java!!!	capacity() : int
        return value.length;
!!!6947074.java!!!	ensureCapacity(in minimumCapacity : int) : void
        if (minimumCapacity > 0)
            ensureCapacityInternal(minimumCapacity);
!!!6947202.java!!!	ensureCapacityInternal(in minimumCapacity : int) : void
        // overflow-conscious code
        if (minimumCapacity - value.length > 0) {
            value = Arrays.copyOf(value,
                    newCapacity(minimumCapacity));
        }
!!!6947330.java!!!	newCapacity(in minCapacity : int) : int
        // overflow-conscious code
        int newCapacity = (value.length << 1) + 2;
        if (newCapacity - minCapacity < 0) {
            newCapacity = minCapacity;
        }
        return (newCapacity <= 0 || MAX_ARRAY_SIZE - newCapacity < 0)
            ? hugeCapacity(minCapacity)
            : newCapacity;
!!!6947458.java!!!	hugeCapacity(in minCapacity : int) : int
        if (Integer.MAX_VALUE - minCapacity < 0) { // overflow
            throw new OutOfMemoryError();
        }
        return (minCapacity > MAX_ARRAY_SIZE)
            ? minCapacity : MAX_ARRAY_SIZE;
!!!6947586.java!!!	trimToSize() : void
        if (count < value.length) {
            value = Arrays.copyOf(value, count);
        }
!!!6947714.java!!!	setLength(in newLength : int) : void
        if (newLength < 0)
            throw new StringIndexOutOfBoundsException(newLength);
        ensureCapacityInternal(newLength);

        if (count < newLength) {
            Arrays.fill(value, count, newLength, '\0');
        }

        count = newLength;
!!!6947842.java!!!	charAt(in index : int) : char
        if ((index < 0) || (index >= count))
            throw new StringIndexOutOfBoundsException(index);
        return value[index];
!!!6947970.java!!!	codePointAt(in index : int) : int
        if ((index < 0) || (index >= count)) {
            throw new StringIndexOutOfBoundsException(index);
        }
        return Character.codePointAtImpl(value, index, count);
!!!6948098.java!!!	codePointBefore(in index : int) : int
        int i = index - 1;
        if ((i < 0) || (i >= count)) {
            throw new StringIndexOutOfBoundsException(index);
        }
        return Character.codePointBeforeImpl(value, index, 0);
!!!6948226.java!!!	codePointCount(in beginIndex : int, in endIndex : int) : int
        if (beginIndex < 0 || endIndex > count || beginIndex > endIndex) {
            throw new IndexOutOfBoundsException();
        }
        return Character.codePointCountImpl(value, beginIndex, endIndex-beginIndex);
!!!6948354.java!!!	offsetByCodePoints(in index : int, in codePointOffset : int) : int
        if (index < 0 || index > count) {
            throw new IndexOutOfBoundsException();
        }
        return Character.offsetByCodePointsImpl(value, 0, count,
                                                index, codePointOffset);
!!!6948482.java!!!	getChars(in srcBegin : int, in srcEnd : int, inout dst : char [[]], in dstBegin : int) : void
        if (srcBegin < 0)
            throw new StringIndexOutOfBoundsException(srcBegin);
        if ((srcEnd < 0) || (srcEnd > count))
            throw new StringIndexOutOfBoundsException(srcEnd);
        if (srcBegin > srcEnd)
            throw new StringIndexOutOfBoundsException("srcBegin > srcEnd");
        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);
!!!6948610.java!!!	setCharAt(in index : int, in ch : char) : void
        if ((index < 0) || (index >= count))
            throw new StringIndexOutOfBoundsException(index);
        value[index] = ch;
!!!6948738.java!!!	append(inout obj : Object) : AbstractStringBuilder
        return append(String.valueOf(obj));
!!!6948866.java!!!	append(inout str : String) : AbstractStringBuilder
        if (str == null)
            return appendNull();
        int len = str.length();
        ensureCapacityInternal(count + len);
        str.getChars(0, len, value, count);
        count += len;
        return this;
!!!6948994.java!!!	append(inout sb : StringBuffer) : AbstractStringBuilder
        if (sb == null)
            return appendNull();
        int len = sb.length();
        ensureCapacityInternal(count + len);
        sb.getChars(0, len, value, count);
        count += len;
        return this;
!!!6949122.java!!!	append(inout asb : AbstractStringBuilder) : AbstractStringBuilder
        if (asb == null)
            return appendNull();
        int len = asb.length();
        ensureCapacityInternal(count + len);
        asb.getChars(0, len, value, count);
        count += len;
        return this;
!!!6949250.java!!!	append(inout s : CharSequence) : AbstractStringBuilder
        if (s == null)
            return appendNull();
        if (s instanceof String)
            return this.append((String)s);
        if (s instanceof AbstractStringBuilder)
            return this.append((AbstractStringBuilder)s);

        return this.append(s, 0, s.length());
!!!6949378.java!!!	appendNull() : AbstractStringBuilder
        int c = count;
        ensureCapacityInternal(c + 4);
        final char[] value = this.value;
        value[c++] = 'n';
        value[c++] = 'u';
        value[c++] = 'l';
        value[c++] = 'l';
        count = c;
        return this;
!!!6949506.java!!!	append(inout s : CharSequence, in start : int, in end : int) : AbstractStringBuilder
        if (s == null)
            s = "null";
        if ((start < 0) || (start > end) || (end > s.length()))
            throw new IndexOutOfBoundsException(
                "start " + start + ", end " + end + ", s.length() "
                + s.length());
        int len = end - start;
        ensureCapacityInternal(count + len);
        for (int i = start, j = count; i < end; i++, j++)
            value[j] = s.charAt(i);
        count += len;
        return this;
!!!6949634.java!!!	append(inout str : char [[]]) : AbstractStringBuilder
        int len = str.length;
        ensureCapacityInternal(count + len);
        System.arraycopy(str, 0, value, count, len);
        count += len;
        return this;
!!!6949762.java!!!	append(inout str : char [[]], in offset : int, in len : int) : AbstractStringBuilder
        if (len > 0)                // let arraycopy report AIOOBE for len < 0
            ensureCapacityInternal(count + len);
        System.arraycopy(str, offset, value, count, len);
        count += len;
        return this;
!!!6949890.java!!!	append(inout b : boolean) : AbstractStringBuilder
        if (b) {
            ensureCapacityInternal(count + 4);
            value[count++] = 't';
            value[count++] = 'r';
            value[count++] = 'u';
            value[count++] = 'e';
        } else {
            ensureCapacityInternal(count + 5);
            value[count++] = 'f';
            value[count++] = 'a';
            value[count++] = 'l';
            value[count++] = 's';
            value[count++] = 'e';
        }
        return this;
!!!6950018.java!!!	append(in c : char) : AbstractStringBuilder
        ensureCapacityInternal(count + 1);
        value[count++] = c;
        return this;
!!!6950146.java!!!	append(in i : int) : AbstractStringBuilder
        if (i == Integer.MIN_VALUE) {
            append("-2147483648");
            return this;
        }
        int appendedLength = (i < 0) ? Integer.stringSize(-i) + 1
                                     : Integer.stringSize(i);
        int spaceNeeded = count + appendedLength;
        ensureCapacityInternal(spaceNeeded);
        Integer.getChars(i, spaceNeeded, value);
        count = spaceNeeded;
        return this;
!!!6950274.java!!!	append(in l : long) : AbstractStringBuilder
        if (l == Long.MIN_VALUE) {
            append("-9223372036854775808");
            return this;
        }
        int appendedLength = (l < 0) ? Long.stringSize(-l) + 1
                                     : Long.stringSize(l);
        int spaceNeeded = count + appendedLength;
        ensureCapacityInternal(spaceNeeded);
        Long.getChars(l, spaceNeeded, value);
        count = spaceNeeded;
        return this;
!!!6950402.java!!!	append(in f : float) : AbstractStringBuilder
        FloatingDecimal.appendTo(f,this);
        return this;
!!!6950530.java!!!	append(in d : double) : AbstractStringBuilder
        FloatingDecimal.appendTo(d,this);
        return this;
!!!6950658.java!!!	delete(in start : int, in end : int) : AbstractStringBuilder
        if (start < 0)
            throw new StringIndexOutOfBoundsException(start);
        if (end > count)
            end = count;
        if (start > end)
            throw new StringIndexOutOfBoundsException();
        int len = end - start;
        if (len > 0) {
            System.arraycopy(value, start+len, value, start, count-end);
            count -= len;
        }
        return this;
!!!6950786.java!!!	appendCodePoint(in codePoint : int) : AbstractStringBuilder
        final int count = this.count;

        if (Character.isBmpCodePoint(codePoint)) {
            ensureCapacityInternal(count + 1);
            value[count] = (char) codePoint;
            this.count = count + 1;
        } else if (Character.isValidCodePoint(codePoint)) {
            ensureCapacityInternal(count + 2);
            Character.toSurrogates(codePoint, value, count);
            this.count = count + 2;
        } else {
            throw new IllegalArgumentException();
        }
        return this;
!!!6950914.java!!!	deleteCharAt(in index : int) : AbstractStringBuilder
        if ((index < 0) || (index >= count))
            throw new StringIndexOutOfBoundsException(index);
        System.arraycopy(value, index+1, value, index, count-index-1);
        count--;
        return this;
!!!6951042.java!!!	replace(in start : int, in end : int, inout str : String) : AbstractStringBuilder
        if (start < 0)
            throw new StringIndexOutOfBoundsException(start);
        if (start > count)
            throw new StringIndexOutOfBoundsException("start > length()");
        if (start > end)
            throw new StringIndexOutOfBoundsException("start > end");

        if (end > count)
            end = count;
        int len = str.length();
        int newCount = count + len - (end - start);
        ensureCapacityInternal(newCount);

        System.arraycopy(value, end, value, start + len, count - end);
        str.getChars(value, start);
        count = newCount;
        return this;
!!!6951170.java!!!	substring(in start : int) : String
        return substring(start, count);
!!!6951298.java!!!	subSequence(in start : int, in end : int) : CharSequence
        return substring(start, end);
!!!6951426.java!!!	substring(in start : int, in end : int) : String
        if (start < 0)
            throw new StringIndexOutOfBoundsException(start);
        if (end > count)
            throw new StringIndexOutOfBoundsException(end);
        if (start > end)
            throw new StringIndexOutOfBoundsException(end - start);
        return new String(value, start, end - start);
!!!6951554.java!!!	insert(in index : int, inout str : char [[]], in offset : int, in len : int) : AbstractStringBuilder
        if ((index < 0) || (index > length()))
            throw new StringIndexOutOfBoundsException(index);
        if ((offset < 0) || (len < 0) || (offset > str.length - len))
            throw new StringIndexOutOfBoundsException(
                "offset " + offset + ", len " + len + ", str.length "
                + str.length);
        ensureCapacityInternal(count + len);
        System.arraycopy(value, index, value, index + len, count - index);
        System.arraycopy(str, offset, value, index, len);
        count += len;
        return this;
!!!6951682.java!!!	insert(in offset : int, inout obj : Object) : AbstractStringBuilder
        return insert(offset, String.valueOf(obj));
!!!6951810.java!!!	insert(in offset : int, inout str : String) : AbstractStringBuilder
        if ((offset < 0) || (offset > length()))
            throw new StringIndexOutOfBoundsException(offset);
        if (str == null)
            str = "null";
        int len = str.length();
        ensureCapacityInternal(count + len);
        System.arraycopy(value, offset, value, offset + len, count - offset);
        str.getChars(value, offset);
        count += len;
        return this;
!!!6951938.java!!!	insert(in offset : int, inout str : char [[]]) : AbstractStringBuilder
        if ((offset < 0) || (offset > length()))
            throw new StringIndexOutOfBoundsException(offset);
        int len = str.length;
        ensureCapacityInternal(count + len);
        System.arraycopy(value, offset, value, offset + len, count - offset);
        System.arraycopy(str, 0, value, offset, len);
        count += len;
        return this;
!!!6952066.java!!!	insert(in dstOffset : int, inout s : CharSequence) : AbstractStringBuilder
        if (s == null)
            s = "null";
        if (s instanceof String)
            return this.insert(dstOffset, (String)s);
        return this.insert(dstOffset, s, 0, s.length());
!!!6952194.java!!!	insert(in dstOffset : int, inout s : CharSequence, in start : int, in end : int) : AbstractStringBuilder
        if (s == null)
            s = "null";
        if ((dstOffset < 0) || (dstOffset > this.length()))
            throw new IndexOutOfBoundsException("dstOffset "+dstOffset);
        if ((start < 0) || (end < 0) || (start > end) || (end > s.length()))
            throw new IndexOutOfBoundsException(
                "start " + start + ", end " + end + ", s.length() "
                + s.length());
        int len = end - start;
        ensureCapacityInternal(count + len);
        System.arraycopy(value, dstOffset, value, dstOffset + len,
                         count - dstOffset);
        for (int i=start; i<end; i++)
            value[dstOffset++] = s.charAt(i);
        count += len;
        return this;
!!!6952322.java!!!	insert(in offset : int, inout b : boolean) : AbstractStringBuilder
        return insert(offset, String.valueOf(b));
!!!6952450.java!!!	insert(in offset : int, in c : char) : AbstractStringBuilder
        ensureCapacityInternal(count + 1);
        System.arraycopy(value, offset, value, offset + 1, count - offset);
        value[offset] = c;
        count += 1;
        return this;
!!!6952578.java!!!	insert(in offset : int, in i : int) : AbstractStringBuilder
        return insert(offset, String.valueOf(i));
!!!6952706.java!!!	insert(in offset : int, in l : long) : AbstractStringBuilder
        return insert(offset, String.valueOf(l));
!!!6952834.java!!!	insert(in offset : int, in f : float) : AbstractStringBuilder
        return insert(offset, String.valueOf(f));
!!!6952962.java!!!	insert(in offset : int, in d : double) : AbstractStringBuilder
        return insert(offset, String.valueOf(d));
!!!6953090.java!!!	indexOf(inout str : String) : int
        return indexOf(str, 0);
!!!6953218.java!!!	indexOf(inout str : String, in fromIndex : int) : int
        return String.indexOf(value, 0, count, str, fromIndex);
!!!6953346.java!!!	lastIndexOf(inout str : String) : int
        return lastIndexOf(str, count);
!!!6953474.java!!!	lastIndexOf(inout str : String, in fromIndex : int) : int
        return String.lastIndexOf(value, 0, count, str, fromIndex);
!!!6953602.java!!!	reverse() : AbstractStringBuilder
        boolean hasSurrogates = false;
        int n = count - 1;
        for (int j = (n-1) >> 1; j >= 0; j--) {
            int k = n - j;
            char cj = value[j];
            char ck = value[k];
            value[j] = ck;
            value[k] = cj;
            if (Character.isSurrogate(cj) ||
                Character.isSurrogate(ck)) {
                hasSurrogates = true;
            }
        }
        if (hasSurrogates) {
            reverseAllValidSurrogatePairs();
        }
        return this;
!!!6953730.java!!!	reverseAllValidSurrogatePairs() : void
        for (int i = 0; i < count - 1; i++) {
            char c2 = value[i];
            if (Character.isLowSurrogate(c2)) {
                char c1 = value[i + 1];
                if (Character.isHighSurrogate(c1)) {
                    value[i++] = c1;
                    value[i] = c2;
                }
            }
        }
!!!6953986.java!!!	getValue() : char
        return value;
