format 222
"function" // jdk1.8::java::util::function
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/util/function/"
  java_package "java.util.function"
  classview 132610 "function"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 163458 "Consumer"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation that accepts a single input argument and returns no
result. Unlike most other functional interfaces, {@code Consumer} is expected
to operate via side-effects.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #accept(Object)}.

@param <T> the type of the input to the operation

@since 1.8
"
      operation 8917378 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "t" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs this operation on the given argument.

@param t the input argument
"
      end

      operation 8917506 "andThen"
	cpp_inline public return_type class_ref 163458 // Consumer
	nparams 1
	  param inout name "after" type class_ref 163458 // Consumer
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed {@code Consumer} that performs, in sequence, this
operation followed by the {@code after} operation. If performing either
operation throws an exception, it is relayed to the caller of the
composed operation.  If performing this operation throws an exception,
the {@code after} operation will not be performed.

@param after the operation to perform after this operation
@return a composed {@code Consumer} that performs in sequence this
operation followed by the {@code after} operation
@throws NullPointerException if {@code after} is null
"
      end
    end

    class 184578 "Predicate"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a predicate (boolean-valued function) of one argument.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #test(Object)}.

@param <T> the type of the input to the predicate

@since 1.8
"
      operation 9326082 "test"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "t" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluates this predicate on the given argument.

@param t the input argument
@return {@code true} if the input argument matches the predicate,
otherwise {@code false}
"
      end

      operation 9326210 "and"
	cpp_inline public return_type class_ref 184578 // Predicate
	nparams 1
	  param inout name "other" type class_ref 184578 // Predicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
AND of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code false}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ANDed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
AND of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end

      operation 9326338 "negate"
	cpp_inline public return_type class_ref 184578 // Predicate
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a predicate that represents the logical negation of this
predicate.

@return a predicate that represents the logical negation of this
predicate
"
      end

      operation 9326466 "or"
	cpp_inline public return_type class_ref 184578 // Predicate
	nparams 1
	  param inout name "other" type class_ref 184578 // Predicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
OR of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code true}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ORed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
OR of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end

      operation 9326594 "isEqual"
	class_operation cpp_inline public return_type class_ref 184578 // Predicate
	nparams 1
	  param inout name "targetRef" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a predicate that tests if two arguments are equal according
to {@link Objects#equals(Object, Object)}.

@param <T> the type of arguments to the predicate
@param targetRef the object reference with which to compare for equality,
              which may be {@code null}
@return a predicate that tests if two arguments are equal according
to {@link Objects#equals(Object, Object)}
"
      end
    end

    class 184834 "UnaryOperator"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 192770 // Function
        rank 0 explicit_value ""
      actual class class_ref 192770 // Function
        rank 1 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation on a single operand that produces a result of the
same type as its operand.  This is a specialization of {@code Function} for
the case where the operand and result are of the same type.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #apply(Object)}.

@param <T> the type of the operand and result of the operator

@see Function
@since 1.8
"
      classrelation 3654018 // <realization>
	relation 3654018 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3654018 // <realization>
	  b parent class_ref 192770 // Function
      end

      operation 9327490 "identity"
	class_operation cpp_inline public return_type class_ref 184834 // UnaryOperator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a unary operator that always returns its input argument.

@param <T> the type of the input and output of the operator
@return a unary operator that always returns its input argument
"
      end
    end

    class 192514 "BiConsumer"
      visibility public stereotype "interface"
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "U" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation that accepts two input arguments and returns no
result.  This is the two-arity specialization of {@link Consumer}.
Unlike most other functional interfaces, {@code BiConsumer} is expected
to operate via side-effects.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #accept(Object, Object)}.

@param <T> the type of the first argument to the operation
@param <U> the type of the second argument to the operation

@see Consumer
@since 1.8
"
      operation 9319042 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param inout name "u" explicit_type "U"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs this operation on the given arguments.

@param t the first input argument
@param u the second input argument
"
      end

      operation 9319170 "andThen"
	cpp_inline public return_type class_ref 192514 // BiConsumer
	nparams 1
	  param inout name "after" type class_ref 192514 // BiConsumer
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T, U> ${name}${(}${t0}<? super T, ? super U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed {@code BiConsumer} that performs, in sequence, this
operation followed by the {@code after} operation. If performing either
operation throws an exception, it is relayed to the caller of the
composed operation.  If performing this operation throws an exception,
the {@code after} operation will not be performed.

@param after the operation to perform after this operation
@return a composed {@code BiConsumer} that performs in sequence this
operation followed by the {@code after} operation
@throws NullPointerException if {@code after} is null
"
      end
    end

    class 192642 "BiFunction"
      visibility public stereotype "interface"
      nformals 3
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "U" type "" explicit_default_value ""
        explicit_extends ""
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts two arguments and produces a result.
This is the two-arity specialization of {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #apply(Object, Object)}.

@param <T> the type of the first argument to the function
@param <U> the type of the second argument to the function
@param <R> the type of the result of the function

@see Function
@since 1.8
"
      operation 7362562 "apply"
	cpp_inline public explicit_return_type "R"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param inout name "u" explicit_type "U"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given arguments.

@param t the first function argument
@param u the second function argument
@return the function result
"
      end

      operation 7362690 "andThen"
	cpp_inline public return_type class_ref 192642 // BiFunction
	nparams 1
	  param inout name "after" type class_ref 192770 // Function
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<T, U, V> ${name}${(}${t0}<? super R, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed function that first applies this function to
its input, and then applies the {@code after} function to the result.
If evaluation of either function throws an exception, it is relayed to
the caller of the composed function.

@param <V> the type of output of the {@code after} function, and of the
          composed function
@param after the function to apply after this function is applied
@return a composed function that first applies this function and then
applies the {@code after} function
@throws NullPointerException if after is null
"
      end
    end

    class 192770 "Function"
      visibility public stereotype "interface"
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts one argument and produces a result.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #apply(Object)}.

@param <T> the type of the input to the function
@param <R> the type of the result of the function

@since 1.8
"
      operation 9321858 "apply"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param inout name "t" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param t the function argument
@return the function result
"
      end

      operation 9321986 "compose"
	cpp_inline public return_type class_ref 192770 // Function
	nparams 1
	  param inout name "before" type class_ref 192770 // Function
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V, R> ${name}${(}${t0}<? super V, ? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed function that first applies the {@code before}
function to its input, and then applies this function to the result.
If evaluation of either function throws an exception, it is relayed to
the caller of the composed function.

@param <V> the type of input to the {@code before} function, and to the
          composed function
@param before the function to apply before this function is applied
@return a composed function that first applies the {@code before}
function and then applies this function
@throws NullPointerException if before is null

@see #andThen(Function)
"
      end

      operation 9322114 "andThen"
	cpp_inline public return_type class_ref 192770 // Function
	nparams 1
	  param inout name "after" type class_ref 192770 // Function
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<T, V> ${name}${(}${t0}<? super R, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed function that first applies this function to
its input, and then applies the {@code after} function to the result.
If evaluation of either function throws an exception, it is relayed to
the caller of the composed function.

@param <V> the type of output of the {@code after} function, and of the
          composed function
@param after the function to apply after this function is applied
@return a composed function that first applies this function and then
applies the {@code after} function
@throws NullPointerException if after is null

@see #compose(Function)
"
      end

      operation 9322242 "identity"
	class_operation cpp_inline public return_type class_ref 192770 // Function
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T, T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a function that always returns its input argument.

@param <T> the type of the input and output objects to the function
@return a function that always returns its input argument
"
      end
    end

    class 193922 "ToIntFunction"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that produces an int-valued result.  This is the
{@code int}-producing primitive specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsInt(Object)}.

@param <T> the type of the input to the function

@see Function
@since 1.8
"
      operation 9327106 "applyAsInt"
	cpp_inline public explicit_return_type "int"
	nparams 1
	  param inout name "value" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 194050 "ToLongFunction"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that produces a long-valued result.  This is the
{@code long}-producing primitive specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsLong(Object)}.

@param <T> the type of the input to the function

@see Function
@since 1.8
"
      operation 9327362 "applyAsLong"
	cpp_inline public explicit_return_type "long"
	nparams 1
	  param inout name "value" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 194178 "ToDoubleFunction"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that produces a double-valued result.  This is the
{@code double}-producing primitive specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsDouble(Object)}.

@param <T> the type of the input to the function

@see Function
@since 1.8
"
      operation 9326850 "applyAsDouble"
	cpp_inline public explicit_return_type "double"
	nparams 1
	  param inout name "value" explicit_type "T"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 376706 "IntConsumer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation that accepts a single {@code int}-valued argument and
returns no result.  This is the primitive type specialization of
{@link Consumer} for {@code int}.  Unlike most other functional interfaces,
{@code IntConsumer} is expected to operate via side-effects.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #accept(int)}.

@see Consumer
@since 1.8
"
      operation 8828162 "accept"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs this operation on the given argument.

@param value the input argument
"
      end

      operation 8828290 "andThen"
	public return_type class_ref 376706 // IntConsumer
	nparams 1
	  param inout name "after" type class_ref 376706 // IntConsumer
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed {@code IntConsumer} that performs, in sequence, this
operation followed by the {@code after} operation. If performing either
operation throws an exception, it is relayed to the caller of the
composed operation.  If performing this operation throws an exception,
the {@code after} operation will not be performed.

@param after the operation to perform after this operation
@return a composed {@code IntConsumer} that performs in sequence this
operation followed by the {@code after} operation
@throws NullPointerException if {@code after} is null
"
      end
    end

    class 376962 "LongConsumer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation that accepts a single {@code long}-valued argument and
returns no result.  This is the primitive type specialization of
{@link Consumer} for {@code long}.  Unlike most other functional interfaces,
{@code LongConsumer} is expected to operate via side-effects.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #accept(long)}.

@see Consumer
@since 1.8
"
      operation 8857346 "accept"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs this operation on the given argument.

@param value the input argument
"
      end

      operation 8857474 "andThen"
	public return_type class_ref 376962 // LongConsumer
	nparams 1
	  param inout name "after" type class_ref 376962 // LongConsumer
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed {@code LongConsumer} that performs, in sequence, this
operation followed by the {@code after} operation. If performing either
operation throws an exception, it is relayed to the caller of the
composed operation.  If performing this operation throws an exception,
the {@code after} operation will not be performed.

@param after the operation to perform after this operation
@return a composed {@code LongConsumer} that performs in sequence this
operation followed by the {@code after} operation
@throws NullPointerException if {@code after} is null
"
      end
    end

    class 377346 "DoubleConsumer"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation that accepts a single {@code double}-valued argument and
returns no result.  This is the primitive type specialization of
{@link Consumer} for {@code double}.  Unlike most other functional interfaces,
{@code DoubleConsumer} is expected to operate via side-effects.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #accept(double)}.

@see Consumer
@since 1.8
"
      operation 8772354 "accept"
	public explicit_return_type "void"
	nparams 1
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs this operation on the given argument.

@param value the input argument
"
      end

      operation 8772482 "andThen"
	public return_type class_ref 377346 // DoubleConsumer
	nparams 1
	  param inout name "after" type class_ref 377346 // DoubleConsumer
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed {@code DoubleConsumer} that performs, in sequence, this
operation followed by the {@code after} operation. If performing either
operation throws an exception, it is relayed to the caller of the
composed operation.  If performing this operation throws an exception,
the {@code after} operation will not be performed.

@param after the operation to perform after this operation
@return a composed {@code DoubleConsumer} that performs in sequence this
operation followed by the {@code after} operation
@throws NullPointerException if {@code after} is null
"
      end
    end

    class 933634 "Supplier"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a supplier of results.

<p>There is no requirement that a new or distinct result be returned each
time the supplier is invoked.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #get()}.

@param <T> the type of results supplied by this supplier

@since 1.8
"
      operation 7367554 "get"
	cpp_inline public explicit_return_type "T"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a result.

@return a result
"
      end
    end

    class 996610 "BiPredicate"
      visibility public stereotype "interface"
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "U" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a predicate (boolean-valued function) of two arguments.  This is
the two-arity specialization of {@link Predicate}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #test(Object, Object)}.

@param <T> the type of the first argument to the predicate
@param <U> the type of the second argument the predicate

@see Predicate
@since 1.8
"
      operation 9319554 "test"
	cpp_inline public explicit_return_type "boolean"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param inout name "u" explicit_type "U"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluates this predicate on the given arguments.

@param t the first input argument
@param u the second input argument
@return {@code true} if the input arguments match the predicate,
otherwise {@code false}
"
      end

      operation 9319682 "and"
	cpp_inline public return_type class_ref 996610 // BiPredicate
	nparams 1
	  param inout name "other" type class_ref 996610 // BiPredicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T, U> ${name}${(}${t0}<? super T, ? super U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
AND of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code false}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ANDed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
AND of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end

      operation 9319810 "negate"
	cpp_inline public return_type class_ref 996610 // BiPredicate
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T, U> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a predicate that represents the logical negation of this
predicate.

@return a predicate that represents the logical negation of this
predicate
"
      end

      operation 9319938 "or"
	cpp_inline public return_type class_ref 996610 // BiPredicate
	nparams 1
	  param inout name "other" type class_ref 996610 // BiPredicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T, U> ${name}${(}${t0}<? super T, ? super U> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
OR of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code true}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ORed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
OR of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end
    end

    class 1066626 "BinaryOperator"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 3
      actual class class_ref 192642 // BiFunction
        rank 0 explicit_value ""
      actual class class_ref 192642 // BiFunction
        rank 1 explicit_value ""
      actual class class_ref 192642 // BiFunction
        rank 2 explicit_value ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation upon two operands of the same type, producing a result
of the same type as the operands.  This is a specialization of
{@link BiFunction} for the case where the operands and the result are all of
the same type.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #apply(Object, Object)}.

@param <T> the type of the operands and result of the operator

@see BiFunction
@see UnaryOperator
@since 1.8
"
      classrelation 3653890 // <realization>
	relation 3653890 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3653890 // <realization>
	  b parent class_ref 192642 // BiFunction
      end

      operation 9319298 "minBy"
	class_operation cpp_inline public return_type class_ref 1066626 // BinaryOperator
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link BinaryOperator} which returns the lesser of two elements
according to the specified {@code Comparator}.

@param <T> the type of the input arguments of the comparator
@param comparator a {@code Comparator} for comparing the two values
@return a {@code BinaryOperator} which returns the lesser of its operands,
        according to the supplied {@code Comparator}
@throws NullPointerException if the argument is null
"
      end

      operation 9319426 "maxBy"
	class_operation cpp_inline public return_type class_ref 1066626 // BinaryOperator
	nparams 1
	  param inout name "comparator" type class_ref 184962 // Comparator
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? super T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link BinaryOperator} which returns the greater of two elements
according to the specified {@code Comparator}.

@param <T> the type of the input arguments of the comparator
@param comparator a {@code Comparator} for comparing the two values
@return a {@code BinaryOperator} which returns the greater of its operands,
        according to the supplied {@code Comparator}
@throws NullPointerException if the argument is null
"
      end
    end

    class 1066882 "LongBinaryOperator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation upon two {@code long}-valued operands and producing a
{@code long}-valued result.   This is the primitive type specialization of
{@link BinaryOperator} for {@code long}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsLong(long, long)}.

@see BinaryOperator
@see LongUnaryOperator
@since 1.8
"
      operation 9324034 "applyAsLong"
	public explicit_return_type "long"
	nparams 2
	  param in name "left" explicit_type "long"
	  param in name "right" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this operator to the given operands.

@param left the first operand
@param right the second operand
@return the operator result
"
      end
    end

    class 1067138 "DoubleBinaryOperator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation upon two {@code double}-valued operands and producing a
{@code double}-valued result.   This is the primitive type specialization of
{@link BinaryOperator} for {@code double}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsDouble(double, double)}.

@see BinaryOperator
@see DoubleUnaryOperator
@since 1.8
"
      operation 9320194 "applyAsDouble"
	public explicit_return_type "double"
	nparams 2
	  param in name "left" explicit_type "double"
	  param in name "right" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this operator to the given operands.

@param left the first operand
@param right the second operand
@return the operator result
"
      end
    end

    class 1067394 "IntBinaryOperator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation upon two {@code int}-valued operands and producing an
{@code int}-valued result.   This is the primitive type specialization of
{@link BinaryOperator} for {@code int}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsInt(int, int)}.

@see BinaryOperator
@see IntUnaryOperator
@since 1.8
"
      operation 9322370 "applyAsInt"
	public explicit_return_type "int"
	nparams 2
	  param in name "left" explicit_type "int"
	  param in name "right" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this operator to the given operands.

@param left the first operand
@param right the second operand
@return the operator result
"
      end
    end

    class 1068034 "IntFunction"
      visibility public stereotype "interface"
      nformals 1
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts an int-valued argument and produces a
result.  This is the {@code int}-consuming primitive specialization for
{@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #apply(int)}.

@param <R> the type of the result of the function

@see Function
@since 1.8
"
      operation 9322498 "apply"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param in name "value" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1068162 "IntUnaryOperator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation on a single {@code int}-valued operand that produces
an {@code int}-valued result.  This is the primitive type specialization of
{@link UnaryOperator} for {@code int}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsInt(int)}.

@see UnaryOperator
@since 1.8
"
      operation 9323522 "applyAsInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "operand" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this operator to the given operand.

@param operand the operand
@return the operator result
"
      end

      operation 9323650 "compose"
	public return_type class_ref 1068162 // IntUnaryOperator
	nparams 1
	  param inout name "before" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed operator that first applies the {@code before}
operator to its input, and then applies this operator to the result.
If evaluation of either operator throws an exception, it is relayed to
the caller of the composed operator.

@param before the operator to apply before this operator is applied
@return a composed operator that first applies the {@code before}
operator and then applies this operator
@throws NullPointerException if before is null

@see #andThen(IntUnaryOperator)
"
      end

      operation 9323778 "andThen"
	public return_type class_ref 1068162 // IntUnaryOperator
	nparams 1
	  param inout name "after" type class_ref 1068162 // IntUnaryOperator
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed operator that first applies this operator to
its input, and then applies the {@code after} operator to the result.
If evaluation of either operator throws an exception, it is relayed to
the caller of the composed operator.

@param after the operator to apply after this operator is applied
@return a composed operator that first applies this operator and then
applies the {@code after} operator
@throws NullPointerException if after is null

@see #compose(IntUnaryOperator)
"
      end

      operation 9323906 "identity"
	class_operation public return_type class_ref 1068162 // IntUnaryOperator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a unary operator that always returns its input argument.

@return a unary operator that always returns its input argument
"
      end
    end

    class 1068290 "IntToLongFunction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts an int-valued argument and produces a
long-valued result.  This is the {@code int}-to-{@code long} primitive
specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsLong(int)}.

@see Function
@since 1.8
"
      operation 9323394 "applyAsLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "value" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1068418 "IntToDoubleFunction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts an int-valued argument and produces a
double-valued result.  This is the {@code int}-to-{@code double} primitive
specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsDouble(int)}.

@see Function
@since 1.8
"
      operation 9323266 "applyAsDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "value" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1089026 "DoubleSupplier"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a supplier of {@code double}-valued results.  This is the
{@code double}-producing primitive specialization of {@link Supplier}.

<p>There is no requirement that a distinct result be returned each
time the supplier is invoked.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #getAsDouble()}.

@see Supplier
@since 1.8
"
      operation 9320962 "getAsDouble"
	public explicit_return_type "double"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a result.

@return a result
"
      end
    end

    class 1089282 "IntSupplier"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a supplier of {@code int}-valued results.  This is the
{@code int}-producing primitive specialization of {@link Supplier}.

<p>There is no requirement that a distinct result be returned each
time the supplier is invoked.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #getAsInt()}.

@see Supplier
@since 1.8
"
      operation 9323138 "getAsInt"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a result.

@return a result
"
      end
    end

    class 1089538 "LongSupplier"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a supplier of {@code long}-valued results.  This is the
{@code long}-producing primitive specialization of {@link Supplier}.

<p>There is no requirement that a distinct result be returned each
time the supplier is invoked.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #getAsLong()}.

@see Supplier
@since 1.8
"
      operation 9324802 "getAsLong"
	public explicit_return_type "long"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a result.

@return a result
"
      end
    end

    class 1108610 "ToDoubleBiFunction"
      visibility public stereotype "interface"
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "U" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts two arguments and produces a double-valued
result.  This is the {@code double}-producing primitive specialization for
{@link BiFunction}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsDouble(Object, Object)}.

@param <T> the type of the first argument to the function
@param <U> the type of the second argument to the function

@see BiFunction
@since 1.8
"
      operation 9326722 "applyAsDouble"
	cpp_inline public explicit_return_type "double"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param inout name "u" explicit_type "U"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given arguments.

@param t the first function argument
@param u the second function argument
@return the function result
"
      end
    end

    class 1108738 "ToLongBiFunction"
      visibility public stereotype "interface"
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "U" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts two arguments and produces a long-valued
result.  This is the {@code long}-producing primitive specialization for
{@link BiFunction}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsLong(Object, Object)}.

@param <T> the type of the first argument to the function
@param <U> the type of the second argument to the function

@see BiFunction
@since 1.8
"
      operation 9327234 "applyAsLong"
	cpp_inline public explicit_return_type "long"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param inout name "u" explicit_type "U"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given arguments.

@param t the first function argument
@param u the second function argument
@return the function result
"
      end
    end

    class 1108866 "ToIntBiFunction"
      visibility public stereotype "interface"
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "U" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts two arguments and produces an int-valued
result.  This is the {@code int}-producing primitive specialization for
{@link BiFunction}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsInt(Object, Object)}.

@param <T> the type of the first argument to the function
@param <U> the type of the second argument to the function

@see BiFunction
@since 1.8
"
      operation 9326978 "applyAsInt"
	cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param inout name "u" explicit_type "U"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given arguments.

@param t the first function argument
@param u the second function argument
@return the function result
"
      end
    end

    class 1127810 "LongUnaryOperator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation on a single {@code long}-valued operand that produces
a {@code long}-valued result.  This is the primitive type specialization of
{@link UnaryOperator} for {@code long}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsLong(long)}.

@see UnaryOperator
@since 1.8
"
      operation 9325186 "applyAsLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "operand" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this operator to the given operand.

@param operand the operand
@return the operator result
"
      end

      operation 9325314 "compose"
	public return_type class_ref 1127810 // LongUnaryOperator
	nparams 1
	  param inout name "before" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed operator that first applies the {@code before}
operator to its input, and then applies this operator to the result.
If evaluation of either operator throws an exception, it is relayed to
the caller of the composed operator.

@param before the operator to apply before this operator is applied
@return a composed operator that first applies the {@code before}
operator and then applies this operator
@throws NullPointerException if before is null

@see #andThen(LongUnaryOperator)
"
      end

      operation 9325442 "andThen"
	public return_type class_ref 1127810 // LongUnaryOperator
	nparams 1
	  param inout name "after" type class_ref 1127810 // LongUnaryOperator
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed operator that first applies this operator to
its input, and then applies the {@code after} operator to the result.
If evaluation of either operator throws an exception, it is relayed to
the caller of the composed operator.

@param after the operator to apply after this operator is applied
@return a composed operator that first applies this operator and then
applies the {@code after} operator
@throws NullPointerException if after is null

@see #compose(LongUnaryOperator)
"
      end

      operation 9325570 "identity"
	class_operation public return_type class_ref 1127810 // LongUnaryOperator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a unary operator that always returns its input argument.

@return a unary operator that always returns its input argument
"
      end
    end

    class 1132674 "BooleanSupplier"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a supplier of {@code boolean}-valued results.  This is the
{@code boolean}-producing primitive specialization of {@link Supplier}.

<p>There is no requirement that a new or distinct result be returned each
time the supplier is invoked.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #getAsBoolean()}.

@see Supplier
@since 1.8
"
      operation 9320066 "getAsBoolean"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a result.

@return a result
"
      end
    end

    class 1132802 "DoubleFunction"
      visibility public stereotype "interface"
      nformals 1
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts a double-valued argument and produces a
result.  This is the {@code double}-consuming primitive specialization for
{@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #apply(double)}.

@param <R> the type of the result of the function

@see Function
@since 1.8
"
      operation 9320322 "apply"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1132930 "DoublePredicate"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a predicate (boolean-valued function) of one {@code double}-valued
argument. This is the {@code double}-consuming primitive type specialization
of {@link Predicate}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #test(double)}.

@see Predicate
@since 1.8
"
      operation 9320450 "test"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluates this predicate on the given argument.

@param value the input argument
@return {@code true} if the input argument matches the predicate,
otherwise {@code false}
"
      end

      operation 9320578 "and"
	public return_type class_ref 1132930 // DoublePredicate
	nparams 1
	  param inout name "other" type class_ref 1132930 // DoublePredicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
AND of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code false}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ANDed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
AND of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end

      operation 9320706 "negate"
	public return_type class_ref 1132930 // DoublePredicate
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a predicate that represents the logical negation of this
predicate.

@return a predicate that represents the logical negation of this
predicate
"
      end

      operation 9320834 "or"
	public return_type class_ref 1132930 // DoublePredicate
	nparams 1
	  param inout name "other" type class_ref 1132930 // DoublePredicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
OR of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code true}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ORed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
OR of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end
    end

    class 1133058 "DoubleToIntFunction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts a double-valued argument and produces an
int-valued result.  This is the {@code double}-to-{@code int} primitive
specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsInt(double)}.

@see Function
@since 1.8
"
      operation 9321090 "applyAsInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1133186 "DoubleToLongFunction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts a double-valued argument and produces a
long-valued result.  This is the {@code double}-to-{@code long} primitive
specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsLong(double)}.

@see Function
@since 1.8
"
      operation 9321218 "applyAsLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1133314 "DoubleUnaryOperator"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation on a single {@code double}-valued operand that produces
a {@code double}-valued result.  This is the primitive type specialization of
{@link UnaryOperator} for {@code double}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsDouble(double)}.

@see UnaryOperator
@since 1.8
"
      operation 9321346 "applyAsDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "operand" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this operator to the given operand.

@param operand the operand
@return the operator result
"
      end

      operation 9321474 "compose"
	public return_type class_ref 1133314 // DoubleUnaryOperator
	nparams 1
	  param inout name "before" type class_ref 1133314 // DoubleUnaryOperator
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed operator that first applies the {@code before}
operator to its input, and then applies this operator to the result.
If evaluation of either operator throws an exception, it is relayed to
the caller of the composed operator.

@param before the operator to apply before this operator is applied
@return a composed operator that first applies the {@code before}
operator and then applies this operator
@throws NullPointerException if before is null

@see #andThen(DoubleUnaryOperator)
"
      end

      operation 9321602 "andThen"
	public return_type class_ref 1133314 // DoubleUnaryOperator
	nparams 1
	  param inout name "after" type class_ref 1133314 // DoubleUnaryOperator
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed operator that first applies this operator to
its input, and then applies the {@code after} operator to the result.
If evaluation of either operator throws an exception, it is relayed to
the caller of the composed operator.

@param after the operator to apply after this operator is applied
@return a composed operator that first applies this operator and then
applies the {@code after} operator
@throws NullPointerException if after is null

@see #compose(DoubleUnaryOperator)
"
      end

      operation 9321730 "identity"
	class_operation public return_type class_ref 1133314 // DoubleUnaryOperator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a unary operator that always returns its input argument.

@return a unary operator that always returns its input argument
"
      end
    end

    class 1133442 "IntPredicate"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a predicate (boolean-valued function) of one {@code int}-valued
argument. This is the {@code int}-consuming primitive type specialization of
{@link Predicate}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #test(int)}.

@see Predicate
@since 1.8
"
      operation 9322626 "test"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "value" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluates this predicate on the given argument.

@param value the input argument
@return {@code true} if the input argument matches the predicate,
otherwise {@code false}
"
      end

      operation 9322754 "and"
	public return_type class_ref 1133442 // IntPredicate
	nparams 1
	  param inout name "other" type class_ref 1133442 // IntPredicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
AND of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code false}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ANDed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
AND of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end

      operation 9322882 "negate"
	public return_type class_ref 1133442 // IntPredicate
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a predicate that represents the logical negation of this
predicate.

@return a predicate that represents the logical negation of this
predicate
"
      end

      operation 9323010 "or"
	public return_type class_ref 1133442 // IntPredicate
	nparams 1
	  param inout name "other" type class_ref 1133442 // IntPredicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
OR of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code true}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ORed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
OR of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end
    end

    class 1133570 "LongFunction"
      visibility public stereotype "interface"
      nformals 1
      formal name "R" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts a long-valued argument and produces a
result.  This is the {@code long}-consuming primitive specialization for
{@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #apply(long)}.

@param <R> the type of the result of the function

@see Function
@since 1.8
"
      operation 9324162 "apply"
	cpp_inline public explicit_return_type "R"
	nparams 1
	  param in name "value" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1133698 "LongPredicate"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a predicate (boolean-valued function) of one {@code long}-valued
argument. This is the {@code long}-consuming primitive type specialization of
{@link Predicate}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #test(long)}.

@see Predicate
@since 1.8
"
      operation 9324290 "test"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "value" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Evaluates this predicate on the given argument.

@param value the input argument
@return {@code true} if the input argument matches the predicate,
otherwise {@code false}
"
      end

      operation 9324418 "and"
	public return_type class_ref 1133698 // LongPredicate
	nparams 1
	  param inout name "other" type class_ref 1133698 // LongPredicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
AND of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code false}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ANDed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
AND of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end

      operation 9324546 "negate"
	public return_type class_ref 1133698 // LongPredicate
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a predicate that represents the logical negation of this
predicate.

@return a predicate that represents the logical negation of this
predicate
"
      end

      operation 9324674 "or"
	public return_type class_ref 1133698 // LongPredicate
	nparams 1
	  param inout name "other" type class_ref 1133698 // LongPredicate
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a composed predicate that represents a short-circuiting logical
OR of this predicate and another.  When evaluating the composed
predicate, if this predicate is {@code true}, then the {@code other}
predicate is not evaluated.

<p>Any exceptions thrown during evaluation of either predicate are relayed
to the caller; if evaluation of this predicate throws an exception, the
{@code other} predicate will not be evaluated.

@param other a predicate that will be logically-ORed with this
             predicate
@return a composed predicate that represents the short-circuiting logical
OR of this predicate and the {@code other} predicate
@throws NullPointerException if other is null
"
      end
    end

    class 1133826 "LongToDoubleFunction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts a long-valued argument and produces a
double-valued result.  This is the {@code long}-to-{@code double} primitive
specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsDouble(long)}.

@see Function
@since 1.8
"
      operation 9324930 "applyAsDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "value" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1133954 "LongToIntFunction"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents a function that accepts a long-valued argument and produces an
int-valued result.  This is the {@code long}-to-{@code int} primitive
specialization for {@link Function}.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #applyAsInt(long)}.

@see Function
@since 1.8
"
      operation 9325058 "applyAsInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "value" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies this function to the given argument.

@param value the function argument
@return the function result
"
      end
    end

    class 1134082 "ObjDoubleConsumer"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation that accepts an object-valued and a
{@code double}-valued argument, and returns no result.  This is the
{@code (reference, double)} specialization of {@link BiConsumer}.
Unlike most other functional interfaces, {@code ObjDoubleConsumer} is
expected to operate via side-effects.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #accept(Object, double)}.

@param <T> the type of the object argument to the operation

@see BiConsumer
@since 1.8
"
      operation 9325698 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param in name "value" explicit_type "double"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs this operation on the given arguments.

@param t the first input argument
@param value the second input argument
"
      end
    end

    class 1134210 "ObjIntConsumer"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation that accepts an object-valued and a
{@code int}-valued argument, and returns no result.  This is the
{@code (reference, int)} specialization of {@link BiConsumer}.
Unlike most other functional interfaces, {@code ObjIntConsumer} is
expected to operate via side-effects.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #accept(Object, int)}.

@param <T> the type of the object argument to the operation

@see BiConsumer
@since 1.8
"
      operation 9325826 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param in name "value" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs this operation on the given arguments.

@param t the first input argument
@param value the second input argument
"
      end
    end

    class 1134338 "ObjLongConsumer"
      visibility public stereotype "interface"
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      java_annotation "@FunctionalInterface
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an operation that accepts an object-valued and a
{@code long}-valued argument, and returns no result.  This is the
{@code (reference, long)} specialization of {@link BiConsumer}.
Unlike most other functional interfaces, {@code ObjLongConsumer} is
expected to operate via side-effects.

<p>This is a <a href=\"package-summary.html\">functional interface</a>
whose functional method is {@link #accept(Object, long)}.

@param <T> the type of the object argument to the operation

@see BiConsumer
@since 1.8
"
      operation 9325954 "accept"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "t" explicit_type "T"
	  param in name "value" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs this operation on the given arguments.

@param t the first input argument
@param value the second input argument
"
      end
    end
  end

  deploymentview 167426 "function"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 699394 "BiFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 192642 // BiFunction
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 700162 "Supplier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 933634 // Supplier
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 795266 "DoubleConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 377346 // DoubleConsumer
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 798338 "IntConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 376706 // IntConsumer
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 799362 "LongConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 376962 // LongConsumer
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 802178 "Consumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 163458 // Consumer
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 813826 "BiConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 192514 // BiConsumer
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 813954 "BinaryOperator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
import java.util.Comparator;
${definition}"
      associated_elems
	class_ref 1066626 // BinaryOperator
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 814082 "BiPredicate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 996610 // BiPredicate
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 814210 "BooleanSupplier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1132674 // BooleanSupplier
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 814338 "DoubleBinaryOperator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1067138 // DoubleBinaryOperator
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 814466 "DoubleFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1132802 // DoubleFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 814594 "DoublePredicate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1132930 // DoublePredicate
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 814722 "DoubleSupplier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1089026 // DoubleSupplier
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 814850 "DoubleToIntFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1133058 // DoubleToIntFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 814978 "DoubleToLongFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1133186 // DoubleToLongFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 815106 "DoubleUnaryOperator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1133314 // DoubleUnaryOperator
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 815234 "Function"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 192770 // Function
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 815362 "IntBinaryOperator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1067394 // IntBinaryOperator
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 815490 "IntFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1068034 // IntFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 815618 "IntPredicate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1133442 // IntPredicate
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 815746 "IntSupplier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1089282 // IntSupplier
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 815874 "IntToDoubleFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1068418 // IntToDoubleFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 816002 "IntToLongFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1068290 // IntToLongFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 816130 "IntUnaryOperator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1068162 // IntUnaryOperator
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 816258 "LongBinaryOperator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1066882 // LongBinaryOperator
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 816386 "LongFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1133570 // LongFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 816514 "LongPredicate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1133698 // LongPredicate
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 816642 "LongSupplier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1089538 // LongSupplier
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 816770 "LongToDoubleFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1133826 // LongToDoubleFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 816898 "LongToIntFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1133954 // LongToIntFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 817026 "LongUnaryOperator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1127810 // LongUnaryOperator
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 817154 "ObjDoubleConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1134082 // ObjDoubleConsumer
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 817282 "ObjIntConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1134210 // ObjIntConsumer
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 817410 "ObjLongConsumer"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1134338 // ObjLongConsumer
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 817538 "Predicate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 184578 // Predicate
      end
      comment "Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 817666 "ToDoubleBiFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1108610 // ToDoubleBiFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 817794 "ToDoubleFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 194178 // ToDoubleFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 817922 "ToIntBiFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1108866 // ToIntBiFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 818050 "ToIntFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 193922 // ToIntFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 818178 "ToLongBiFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1108738 // ToLongBiFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 818306 "ToLongFunction"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 194050 // ToLongFunction
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 818434 "UnaryOperator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 184834 // UnaryOperator
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
