class SignatureSpi
!!!8003586.java!!!	engineInitSign(inout privateKey : PrivateKey, inout random : SecureRandom) : void
            this.appRandom = random;
            engineInitSign(privateKey);
!!!8003970.java!!!	engineUpdate(inout input : ByteBuffer) : void
        if (input.hasRemaining() == false) {
            return;
        }
        try {
            if (input.hasArray()) {
                byte[] b = input.array();
                int ofs = input.arrayOffset();
                int pos = input.position();
                int lim = input.limit();
                engineUpdate(b, ofs + pos, lim - pos);
                input.position(lim);
            } else {
                int len = input.remaining();
                byte[] b = new byte[JCAUtil.getTempArraySize(len)];
                while (len > 0) {
                    int chunk = Math.min(len, b.length);
                    input.get(b, 0, chunk);
                    engineUpdate(b, 0, chunk);
                    len -= chunk;
                }
            }
        } catch (SignatureException e) {
            // is specified to only occur when the engine is not initialized
            // this case should never occur as it is caught in Signature.java
            throw new ProviderException("update() failed", e);
        }
!!!8004226.java!!!	engineSign(inout outbuf : byte [[]], in offset : int, in len : int) : int
        byte[] sig = engineSign();
        if (len < sig.length) {
                throw new SignatureException
                    ("partial signatures not returned");
        }
        if (outbuf.length - offset < sig.length) {
                throw new SignatureException
                    ("insufficient space in the output buffer to store the "
                     + "signature");
        }
        System.arraycopy(sig, 0, outbuf, offset, sig.length);
        return sig.length;
!!!8004482.java!!!	engineVerify(inout sigBytes : byte [[]], in offset : int, in length : int) : boolean
        byte[] sigBytesCopy = new byte[length];
        System.arraycopy(sigBytes, offset, sigBytesCopy, 0, length);
        return engineVerify(sigBytesCopy);
!!!8004738.java!!!	engineSetParameter(inout params : AlgorithmParameterSpec) : void
            throw new UnsupportedOperationException();
!!!8004866.java!!!	engineGetParameters() : AlgorithmParameters
        throw new UnsupportedOperationException();
!!!8005122.java!!!	clone() : Object
        if (this instanceof Cloneable) {
            return super.clone();
        } else {
            throw new CloneNotSupportedException();
        }
