class CurrentNodeListIterator
!!!3964674.java!!!	CurrentNodeListIterator(inout source : DTMAxisIterator, inout filter : CurrentNodeListFilter, in currentNode : int, inout translet : AbstractTranslet)
        this(source, !source.isReverse(), filter, currentNode, translet);
!!!3964802.java!!!	CurrentNodeListIterator(inout source : DTMAxisIterator, inout docOrder : boolean, inout filter : CurrentNodeListFilter, in currentNode : int, inout translet : AbstractTranslet)
        _source = source;
        _filter = filter;
        _translet = translet;
        _docOrder = docOrder;
        _currentNode = currentNode;
!!!3964930.java!!!	forceNaturalOrder() : DTMAxisIterator
        _docOrder = true;
        return this;
!!!3965058.java!!!	setRestartable(inout isRestartable : boolean) : void
        _isRestartable = isRestartable;
        _source.setRestartable(isRestartable);
!!!3965186.java!!!	isReverse() : boolean
        return !_docOrder;
!!!3965314.java!!!	cloneIterator() : DTMAxisIterator
        try {
            final CurrentNodeListIterator clone =
                (CurrentNodeListIterator) super.clone();
            clone._nodes = (IntegerArray) _nodes.clone();
            clone._source = _source.cloneIterator();
            clone._isRestartable = false;
            return clone.reset();
        }
        catch (CloneNotSupportedException e) {
            BasisLibrary.runTimeError(BasisLibrary.ITERATOR_CLONE_ERR,
                                      e.toString());
            return null;
        }
!!!3965442.java!!!	reset() : DTMAxisIterator
        _currentIndex = 0;
        return resetPosition();
!!!3965570.java!!!	next() : int
        final int last = _nodes.cardinality();
        final int currentNode = _currentNode;
        final AbstractTranslet translet = _translet;

        for (int index = _currentIndex; index < last; ) {
            final int position = _docOrder ? index + 1 : last - index;
            final int node = _nodes.at(index++);        // note increment

            if (_filter.test(node, position, last, currentNode, translet,
                             this)) {
                _currentIndex = index;
                return returnNode(node);
            }
        }
        return END;
!!!3965698.java!!!	setStartNode(in node : int) : DTMAxisIterator
        if (_isRestartable) {
            _source.setStartNode(_startNode = node);

            _nodes.clear();
            while ((node = _source.next()) != END) {
                _nodes.add(node);
            }
            _currentIndex = 0;
            resetPosition();
        }
        return this;
!!!3965826.java!!!	getLast() : int
        if (_last == -1) {
            _last = computePositionOfLast();
        }
        return _last;
!!!3965954.java!!!	setMark() : void
        _markedNode = _currentIndex;
!!!3966082.java!!!	gotoMark() : void
        _currentIndex = _markedNode;
!!!3966210.java!!!	computePositionOfLast() : int
        final int last = _nodes.cardinality();
        final int currNode = _currentNode;
        final AbstractTranslet translet = _translet;

        int lastPosition = _position;
        for (int index = _currentIndex; index < last; ) {
            final int position = _docOrder ? index + 1 : last - index;
            int nodeIndex = _nodes.at(index++);         // note increment

            if (_filter.test(nodeIndex, position, last, currNode, translet,
                             this)) {
                lastPosition++;
            }
        }
        return lastPosition;
