class TableHeaderPainter
!!!11377154.java!!!	TableHeaderPainter(inout ctx : AbstractRegionPainter::PaintContext, in state : int)
        super();
        this.state = state;
        this.ctx = ctx;
!!!11377282.java!!!	doPaint(inout g : Graphics2D, inout c : JComponent, in width : int, in height : int, inout extendedCacheKeys : Object [[]]) : void
        //populate componentColors array with colors calculated in getExtendedCacheKeys call
        componentColors = extendedCacheKeys;
        //generate this entire method. Each state/bg/fg/border combo that has
        //been painted gets its own KEY and paint method.
        switch(state) {
            case ASCENDINGSORTICON_ENABLED: paintascendingSortIconEnabled(g); break;
            case DESCENDINGSORTICON_ENABLED: paintdescendingSortIconEnabled(g); break;

        }
!!!11377410.java!!!	getPaintContext() : AbstractRegionPainter::PaintContext
        return ctx;
!!!11377538.java!!!	paintascendingSortIconEnabled(inout g : Graphics2D) : void
        path = decodePath1();
        g.setPaint(decodeGradient1(path));
        g.fill(path);

!!!11377666.java!!!	paintdescendingSortIconEnabled(inout g : Graphics2D) : void
        path = decodePath2();
        g.setPaint(decodeGradient1(path));
        g.fill(path);

!!!11377794.java!!!	decodePath1() : Path2D
        path.reset();
        path.moveTo(decodeX(1.0f), decodeY(2.0f));
        path.lineTo(decodeX(1.7070175f), decodeY(0.0f));
        path.lineTo(decodeX(3.0f), decodeY(2.0f));
        path.lineTo(decodeX(1.0f), decodeY(2.0f));
        path.closePath();
        return path;
!!!11377922.java!!!	decodePath2() : Path2D
        path.reset();
        path.moveTo(decodeX(1.0f), decodeY(1.0f));
        path.lineTo(decodeX(2.0f), decodeY(1.0f));
        path.lineTo(decodeX(1.5025063f), decodeY(2.0f));
        path.lineTo(decodeX(1.0f), decodeY(1.0f));
        path.closePath();
        return path;
!!!11378050.java!!!	decodeGradient1(inout s : Shape) : Paint
        Rectangle2D bounds = s.getBounds2D();
        float x = (float)bounds.getX();
        float y = (float)bounds.getY();
        float w = (float)bounds.getWidth();
        float h = (float)bounds.getHeight();
        return decodeGradient((0.5f * w) + x, (0.0f * h) + y, (0.5f * w) + x, (1.0f * h) + y,
                new float[] { 0.0f,0.5f,1.0f },
                new Color[] { color1,
                            decodeColor(color1,color2,0.5f),
                            color2});
