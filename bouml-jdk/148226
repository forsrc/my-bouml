format 222
"cert" // jdk1.8::java::security::cert
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/security/cert/"
  java_package "java.security.cert"
  classview 144642 "cert"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 319490 "Certificate"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Abstract class for managing a variety of identity certificates.
An identity certificate is a binding of a principal to a public key which
is vouched for by another principal.  (A principal represents
an entity such as an individual user, a group, or a corporation.)
<p>
This class is an abstraction for certificates that have different
formats but important common uses.  For example, different types of
certificates, such as X.509 and PGP, share general certificate
functionality (like encoding and verifying) and
some types of information (like a public key).
<p>
X.509, PGP, and SDSI certificates can all be implemented by
subclassing the Certificate class, even though they contain different
sets of information, and they store and retrieve the information in
different ways.

@see X509Certificate
@see CertificateFactory

@author Hemma Prafullchandra
"
      classrelation 3370114 // <realization>
	relation 3370114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3370114 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1860866 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3585440601605666277L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3370242 // type (<unidirectional association>)
	relation 3370242 --->
	  a role_name "type" const_relation private
	    comment " the certificate type
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3370242 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1860994 "hash"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cache the hash code for the certiticate 
 Default to -1"
      end

      operation 8019970 "Certificate"
	protected explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a certificate of the specified type.

@param type the standard name of the certificate type.
See the CertificateFactory section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard certificate types.
"
      end

      operation 8020098 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this certificate.

@return the type of this certificate.
"
      end

      operation 8020226 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this certificate for equality with the specified
object. If the {@code other} object is an
{@code instanceof} {@code Certificate}, then
its encoded form is retrieved and compared with the
encoded form of this certificate.

@param other the object to test for equality with this certificate.
@return true iff the encoded forms of the two certificates
match, false otherwise.
"
      end

      operation 8020354 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this certificate from its
encoded form.

@return the hashcode value.
"
      end

      operation 8020482 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1025922 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoded form of this certificate. It is
assumed that each certificate type would have only a single
form of encoding; for example, X.509 certificates would
be encoded as ASN.1 DER.

@return the encoded form of this certificate

@exception CertificateEncodingException if an encoding error occurs.
"
      end

      operation 8020610 "verify"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 765826 // PublicKey
	nexceptions 5
	  exception class_ref 770306 // CertificateException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 509442 // NoSuchProviderException
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this certificate was signed using the
private key that corresponds to the specified public key.

@param key the PublicKey used to carry out the verification.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException if there's no default provider.
@exception SignatureException on signature errors.
@exception CertificateException on encoding errors.
"
      end

      operation 8020738 "verify"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 765826 // PublicKey
	  param inout name "sigProvider" type class_ref 128130 // String
	nexceptions 5
	  exception class_ref 770306 // CertificateException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 509442 // NoSuchProviderException
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this certificate was signed using the
private key that corresponds to the specified public key.
This method uses the signature verification engine
supplied by the specified provider.

@param key the PublicKey used to carry out the verification.
@param sigProvider the name of the signature provider.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException on incorrect provider.
@exception SignatureException on signature errors.
@exception CertificateException on encoding errors.
"
      end

      operation 8020866 "verify"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 765826 // PublicKey
	  param inout name "sigProvider" type class_ref 509570 // Provider
	nexceptions 4
	  exception class_ref 770306 // CertificateException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this certificate was signed using the
private key that corresponds to the specified public key.
This method uses the signature verification engine
supplied by the specified provider. Note that the specified
Provider object does not have to be registered in the provider list.

<p> This method was added to version 1.8 of the Java Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be {@code abstract}
and by default throws an {@code UnsupportedOperationException}.

@param key the PublicKey used to carry out the verification.
@param sigProvider the signature provider.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception SignatureException on signature errors.
@exception CertificateException on encoding errors.
@exception UnsupportedOperationException if the method is not supported
@since 1.8
"
      end

      operation 8020994 "toString"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this certificate.

@return a string representation of this certificate.
"
      end

      operation 8021122 "getPublicKey"
	abstract public return_type class_ref 765826 // PublicKey
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the public key from this certificate.

@return the public key.
"
      end

      class 1026050 "CertificateRep"
	visibility protected 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3370370 // <realization>
	  relation 3370370 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3370370 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1861122 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -8563758940495660020L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3370498 // type (<unidirectional association>)
	  relation 3370498 --->
	    a role_name "type" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3370498 // type (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1861250 "data"
	  private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8021250 "CertificateRep"
	  protected explicit_return_type ""
	  nparams 2
	    param inout name "type" type class_ref 128130 // String
	    param inout name "data" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Construct the alternate Certificate class with the Certificate
type and Certificate encoding bytes.

<p>

@param type the standard name of the Certificate type. <p>

@param data the Certificate data.
"
	end

	operation 8021378 "readResolve"
	  protected return_type class_ref 129538 // Object
	  nparams 0
	  nexceptions 1
	    exception class_ref 261506 // ObjectStreamException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resolve the Certificate Object.

<p>

@return the resolved Certificate Object

@throws java.io.ObjectStreamException if the Certificate
     could not be resolved
"
	end
      end

      operation 8021506 "writeReplace"
	protected return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace the Certificate to be serialized.

@return the alternate Certificate object to be serialized

@throws java.io.ObjectStreamException if a new object representing
this Certificate could not be created
@since 1.3
"
      end
    end

    class 767234 "X509Certificate"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>
Abstract class for X.509 certificates. This provides a standard
way to access all the attributes of an X.509 certificate.
<p>
In June of 1996, the basic X.509 v3 format was completed by
ISO/IEC and ANSI X9, which is described below in ASN.1:
<pre>
Certificate  ::=  SEQUENCE  {
    tbsCertificate       TBSCertificate,
    signatureAlgorithm   AlgorithmIdentifier,
    signature            BIT STRING  }
</pre>
<p>
These certificates are widely used to support authentication and
other functionality in Internet security systems. Common applications
include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),
code signing for trusted software distribution, and Secure Electronic
Transactions (SET).
<p>
These certificates are managed and vouched for by <em>Certificate
Authorities</em> (CAs). CAs are services which create certificates by
placing data in the X.509 standard format and then digitally signing
that data. CAs act as trusted third parties, making introductions
between principals who have no direct knowledge of each other.
CA certificates are either signed by themselves, or by some other
CA such as a \"root\" CA.
<p>
More information can be found in
<a href=\"http://www.ietf.org/rfc/rfc3280.txt\">RFC 3280: Internet X.509
Public Key Infrastructure Certificate and CRL Profile</a>.
<p>
The ASN.1 definition of {@code tbsCertificate} is:
<pre>
TBSCertificate  ::=  SEQUENCE  {
    version         [0]  EXPLICIT Version DEFAULT v1,
    serialNumber         CertificateSerialNumber,
    signature            AlgorithmIdentifier,
    issuer               Name,
    validity             Validity,
    subject              Name,
    subjectPublicKeyInfo SubjectPublicKeyInfo,
    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,
                         -- If present, version must be v2 or v3
    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,
                         -- If present, version must be v2 or v3
    extensions      [3]  EXPLICIT Extensions OPTIONAL
                         -- If present, version must be v3
    }
</pre>
<p>
Certificates are instantiated using a certificate factory. The following is
an example of how to instantiate an X.509 certificate:
<pre>
try (InputStream inStream = new FileInputStream(\"fileName-of-cert\")) {
    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
    X509Certificate cert = (X509Certificate)cf.generateCertificate(inStream);
}
</pre>

@author Hemma Prafullchandra


@see Certificate
@see CertificateFactory
@see X509Extension
"
      classrelation 3380994 // <generalisation>
	relation 3380994 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3380994 // <generalisation>
	  b parent class_ref 319490 // Certificate
      end

      classrelation 3381122 // <realization>
	relation 3381122 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3381122 // <realization>
	  b parent class_ref 1031938 // X509Extension
      end

      attribute 1868546 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2491127588187038216L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3381250 // subjectX500Principal (<unidirectional association>)
	relation 3381250 --->
	  a role_name "subjectX500Principal" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3381250 // subjectX500Principal (<unidirectional association>)
	  b parent class_ref 833026 // X500Principal
      end

      classrelation 3381378 // issuerX500Principal (<unidirectional association>)
	relation 3381378 --->
	  a role_name "issuerX500Principal" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3381378 // issuerX500Principal (<unidirectional association>)
	  b parent class_ref 833026 // X500Principal
      end

      operation 8052994 "X509Certificate"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for X.509 certificates.
"
      end

      operation 8053122 "checkValidity"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 2
	  exception class_ref 1026178 // CertificateExpiredException
	  exception class_ref 1026690 // CertificateNotYetValidException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the certificate is currently valid. It is if
the current date and time are within the validity period given in the
certificate.
<p>
The validity period consists of two date/time values:
the first and last dates (and times) on which the certificate
is valid. It is defined in
ASN.1 as:
<pre>
validity             Validity

Validity ::= SEQUENCE {
    notBefore      CertificateValidityDate,
    notAfter       CertificateValidityDate }

CertificateValidityDate ::= CHOICE {
    utcTime        UTCTime,
    generalTime    GeneralizedTime }
</pre>

@exception CertificateExpiredException if the certificate has expired.
@exception CertificateNotYetValidException if the certificate is not
yet valid.
"
      end

      operation 8053250 "checkValidity"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "date" type class_ref 521474 // Date
	nexceptions 2
	  exception class_ref 1026178 // CertificateExpiredException
	  exception class_ref 1026690 // CertificateNotYetValidException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the given date is within the certificate's
validity period. In other words, this determines whether the
certificate would be valid at the given date/time.

@param date the Date to check against to see if this certificate
       is valid at that date/time.

@exception CertificateExpiredException if the certificate has expired
with respect to the {@code date} supplied.
@exception CertificateNotYetValidException if the certificate is not
yet valid with respect to the {@code date} supplied.

@see #checkValidity()
"
      end

      operation 8053378 "getVersion"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code version} (version number) value from the
certificate.
The ASN.1 definition for this is:
<pre>
version  [0] EXPLICIT Version DEFAULT v1

Version ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
</pre>
@return the version number, i.e. 1, 2 or 3.
"
      end

      operation 8053506 "getSerialNumber"
	abstract public return_type class_ref 686338 // BigInteger
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code serialNumber} value from the certificate.
The serial number is an integer assigned by the certification
authority to each certificate. It must be unique for each
certificate issued by a given CA (i.e., the issuer name and
serial number identify a unique certificate).
The ASN.1 definition for this is:
<pre>
serialNumber     CertificateSerialNumber

CertificateSerialNumber  ::=  INTEGER
</pre>

@return the serial number.
"
      end

      operation 8053634 "getIssuerDN"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, replaced by {@linkplain
#getIssuerX500Principal()}. This method returns the {@code issuer}
as an implementation specific Principal object, which should not be
relied upon by portable code.

<p>
Gets the {@code issuer} (issuer distinguished name) value from
the certificate. The issuer name identifies the entity that signed (and
issued) the certificate.

<p>The issuer name field contains an
X.500 distinguished name (DN).
The ASN.1 definition for this is:
<pre>
issuer    Name

Name ::= CHOICE { RDNSequence }
RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
RelativeDistinguishedName ::=
    SET OF AttributeValueAssertion

AttributeValueAssertion ::= SEQUENCE {
                              AttributeType,
                              AttributeValue }
AttributeType ::= OBJECT IDENTIFIER
AttributeValue ::= ANY
</pre>
The {@code Name} describes a hierarchical name composed of
attributes,
such as country name, and corresponding values, such as US.
The type of the {@code AttributeValue} component is determined by
the {@code AttributeType}; in general it will be a
{@code directoryString}. A {@code directoryString} is usually
one of {@code PrintableString},
{@code TeletexString} or {@code UniversalString}.

@return a Principal whose name is the issuer distinguished name.
"
      end

      operation 8053762 "getIssuerX500Principal"
	public return_type class_ref 833026 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuer (issuer distinguished name) value from the
certificate as an {@code X500Principal}.
<p>
It is recommended that subclasses override this method.

@return an {@code X500Principal} representing the issuer
         distinguished name
@since 1.4
"
      end

      operation 8053890 "getSubjectDN"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, replaced by {@linkplain
#getSubjectX500Principal()}. This method returns the {@code subject}
as an implementation specific Principal object, which should not be
relied upon by portable code.

<p>
Gets the {@code subject} (subject distinguished name) value
from the certificate.  If the {@code subject} value is empty,
then the {@code getName()} method of the returned
{@code Principal} object returns an empty string (\"\").

<p> The ASN.1 definition for this is:
<pre>
subject    Name
</pre>

<p>See {@link #getIssuerDN() getIssuerDN} for {@code Name}
and other relevant definitions.

@return a Principal whose name is the subject name.
"
      end

      operation 8054018 "getSubjectX500Principal"
	public return_type class_ref 833026 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subject (subject distinguished name) value from the
certificate as an {@code X500Principal}.  If the subject value
is empty, then the {@code getName()} method of the returned
{@code X500Principal} object returns an empty string (\"\").
<p>
It is recommended that subclasses override this method.

@return an {@code X500Principal} representing the subject
         distinguished name
@since 1.4
"
      end

      operation 8054146 "getNotBefore"
	abstract public return_type class_ref 521474 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code notBefore} date from the validity period of
the certificate.
The relevant ASN.1 definitions are:
<pre>
validity             Validity

Validity ::= SEQUENCE {
    notBefore      CertificateValidityDate,
    notAfter       CertificateValidityDate }

CertificateValidityDate ::= CHOICE {
    utcTime        UTCTime,
    generalTime    GeneralizedTime }
</pre>

@return the start date of the validity period.
@see #checkValidity
"
      end

      operation 8054274 "getNotAfter"
	abstract public return_type class_ref 521474 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code notAfter} date from the validity period of
the certificate. See {@link #getNotBefore() getNotBefore}
for relevant ASN.1 definitions.

@return the end date of the validity period.
@see #checkValidity
"
      end

      operation 8054402 "getTBSCertificate"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1025922 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded certificate information, the
{@code tbsCertificate} from this certificate.
This can be used to verify the signature independently.

@return the DER-encoded certificate information.
@exception CertificateEncodingException if an encoding error occurs.
"
      end

      operation 8054530 "getSignature"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code signature} value (the raw signature bits) from
the certificate.
The ASN.1 definition for this is:
<pre>
signature     BIT STRING
</pre>

@return the signature.
"
      end

      operation 8054658 "getSigAlgName"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm name for the certificate
signature algorithm. An example is the string \"SHA256withRSA\".
The ASN.1 definition for this is:
<pre>
signatureAlgorithm   AlgorithmIdentifier

AlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               OBJECT IDENTIFIER,
    parameters              ANY DEFINED BY algorithm OPTIONAL  }
                            -- contains a value of the type
                            -- registered for use with the
                            -- algorithm object identifier value
</pre>

<p>The algorithm name is determined from the {@code algorithm}
OID string.

@return the signature algorithm name.
"
      end

      operation 8054786 "getSigAlgOID"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm OID string from the certificate.
An OID is represented by a set of nonnegative whole numbers separated
by periods.
For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1
with DSA signature algorithm defined in
<a href=\"http://www.ietf.org/rfc/rfc3279.txt\">RFC 3279: Algorithms and
Identifiers for the Internet X.509 Public Key Infrastructure Certificate
and CRL Profile</a>.

<p>See {@link #getSigAlgName() getSigAlgName} for
relevant ASN.1 definitions.

@return the signature algorithm OID string.
"
      end

      operation 8054914 "getSigAlgParams"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded signature algorithm parameters from this
certificate's signature algorithm. In most cases, the signature
algorithm parameters are null; the parameters are usually
supplied with the certificate's public key.
If access to individual parameter values is needed then use
{@link java.security.AlgorithmParameters AlgorithmParameters}
and instantiate with the name returned by
{@link #getSigAlgName() getSigAlgName}.

<p>See {@link #getSigAlgName() getSigAlgName} for
relevant ASN.1 definitions.

@return the DER-encoded signature algorithm parameters, or
        null if no parameters are present.
"
      end

      operation 8055042 "getIssuerUniqueID"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code issuerUniqueID} value from the certificate.
The issuer unique identifier is present in the certificate
to handle the possibility of reuse of issuer names over time.
RFC 3280 recommends that names not be reused and that
conforming certificates not make use of unique identifiers.
Applications conforming to that profile should be capable of
parsing unique identifiers and making comparisons.

<p>The ASN.1 definition for this is:
<pre>
issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL

UniqueIdentifier  ::=  BIT STRING
</pre>

@return the issuer unique identifier or null if it is not
present in the certificate.
"
      end

      operation 8055170 "getSubjectUniqueID"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code subjectUniqueID} value from the certificate.

<p>The ASN.1 definition for this is:
<pre>
subjectUniqueID  [2]  IMPLICIT UniqueIdentifier OPTIONAL

UniqueIdentifier  ::=  BIT STRING
</pre>

@return the subject unique identifier or null if it is not
present in the certificate.
"
      end

      operation 8055298 "getKeyUsage"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a boolean array representing bits of
the {@code KeyUsage} extension, (OID = 2.5.29.15).
The key usage extension defines the purpose (e.g., encipherment,
signature, certificate signing) of the key contained in the
certificate.
The ASN.1 definition for this is:
<pre>
KeyUsage ::= BIT STRING {
    digitalSignature        (0),
    nonRepudiation          (1),
    keyEncipherment         (2),
    dataEncipherment        (3),
    keyAgreement            (4),
    keyCertSign             (5),
    cRLSign                 (6),
    encipherOnly            (7),
    decipherOnly            (8) }
</pre>
RFC 3280 recommends that when used, this be marked
as a critical extension.

@return the KeyUsage extension of this certificate, represented as
an array of booleans. The order of KeyUsage values in the array is
the same as in the above ASN.1 definition. The array will contain a
value for each KeyUsage defined above. If the KeyUsage list encoded
in the certificate is longer than the above list, it will not be
truncated. Returns null if this certificate does not
contain a KeyUsage extension.
"
      end

      operation 8055426 "getExtendedKeyUsage"
	public return_type class_ref 175362 // List
	nparams 0
	nexceptions 1
	  exception class_ref 1026818 // CertificateParsingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an unmodifiable list of Strings representing the OBJECT
IDENTIFIERs of the {@code ExtKeyUsageSyntax} field of the
extended key usage extension, (OID = 2.5.29.37).  It indicates
one or more purposes for which the certified public key may be
used, in addition to or in place of the basic purposes
indicated in the key usage extension field.  The ASN.1
definition for this is:
<pre>
ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId

KeyPurposeId ::= OBJECT IDENTIFIER
</pre>

Key purposes may be defined by any organization with a
need. Object identifiers used to identify key purposes shall be
assigned in accordance with IANA or ITU-T Rec. X.660 |
ISO/IEC/ITU 9834-1.
<p>
This method was added to version 1.4 of the Java 2 Platform Standard
Edition. In order to maintain backwards compatibility with existing
service providers, this method is not {@code abstract}
and it provides a default implementation. Subclasses
should override this method with a correct implementation.

@return the ExtendedKeyUsage extension of this certificate,
        as an unmodifiable list of object identifiers represented
        as Strings. Returns null if this certificate does not
        contain an ExtendedKeyUsage extension.
@throws CertificateParsingException if the extension cannot be decoded
@since 1.4
"
      end

      operation 8055554 "getBasicConstraints"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the certificate constraints path length from the
critical {@code BasicConstraints} extension, (OID = 2.5.29.19).
<p>
The basic constraints extension identifies whether the subject
of the certificate is a Certificate Authority (CA) and
how deep a certification path may exist through that CA. The
{@code pathLenConstraint} field (see below) is meaningful
only if {@code cA} is set to TRUE. In this case, it gives the
maximum number of CA certificates that may follow this certificate in a
certification path. A value of zero indicates that only an end-entity
certificate may follow in the path.
<p>
The ASN.1 definition for this is:
<pre>
BasicConstraints ::= SEQUENCE {
    cA                  BOOLEAN DEFAULT FALSE,
    pathLenConstraint   INTEGER (0..MAX) OPTIONAL }
</pre>

@return the value of {@code pathLenConstraint} if the
BasicConstraints extension is present in the certificate and the
subject of the certificate is a CA, otherwise -1.
If the subject of the certificate is a CA and
{@code pathLenConstraint} does not appear,
{@code Integer.MAX_VALUE} is returned to indicate that there is no
limit to the allowed length of the certification path.
"
      end

      operation 8055682 "getSubjectAlternativeNames"
	public return_type class_ref 184194 // Collection
	nparams 0
	nexceptions 1
	  exception class_ref 1026818 // CertificateParsingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an immutable collection of subject alternative names from the
{@code SubjectAltName} extension, (OID = 2.5.29.17).
<p>
The ASN.1 definition of the {@code SubjectAltName} extension is:
<pre>
SubjectAltName ::= GeneralNames

GeneralNames :: = SEQUENCE SIZE (1..MAX) OF GeneralName

GeneralName ::= CHOICE {
     otherName                       [0]     OtherName,
     rfc822Name                      [1]     IA5String,
     dNSName                         [2]     IA5String,
     x400Address                     [3]     ORAddress,
     directoryName                   [4]     Name,
     ediPartyName                    [5]     EDIPartyName,
     uniformResourceIdentifier       [6]     IA5String,
     iPAddress                       [7]     OCTET STRING,
     registeredID                    [8]     OBJECT IDENTIFIER}
</pre>
<p>
If this certificate does not contain a {@code SubjectAltName}
extension, {@code null} is returned. Otherwise, a
{@code Collection} is returned with an entry representing each
{@code GeneralName} included in the extension. Each entry is a
{@code List} whose first entry is an {@code Integer}
(the name type, 0-8) and whose second entry is a {@code String}
or a byte array (the name, in string or ASN.1 DER encoded form,
respectively).
<p>
<a href=\"http://www.ietf.org/rfc/rfc822.txt\">RFC 822</a>, DNS, and URI
names are returned as {@code String}s,
using the well-established string formats for those types (subject to
the restrictions included in RFC 3280). IPv4 address names are
returned using dotted quad notation. IPv6 address names are returned
in the form \"a1:a2:...:a8\", where a1-a8 are hexadecimal values
representing the eight 16-bit pieces of the address. OID names are
returned as {@code String}s represented as a series of nonnegative
integers separated by periods. And directory names (distinguished names)
are returned in <a href=\"http://www.ietf.org/rfc/rfc2253.txt\">
RFC 2253</a> string format. No standard string format is
defined for otherNames, X.400 names, EDI party names, or any
other type of names. They are returned as byte arrays
containing the ASN.1 DER encoded form of the name.
<p>
Note that the {@code Collection} returned may contain more
than one name of the same type. Also, note that the returned
{@code Collection} is immutable and any entries containing byte
arrays are cloned to protect against subsequent modifications.
<p>
This method was added to version 1.4 of the Java 2 Platform Standard
Edition. In order to maintain backwards compatibility with existing
service providers, this method is not {@code abstract}
and it provides a default implementation. Subclasses
should override this method with a correct implementation.

@return an immutable {@code Collection} of subject alternative
names (or {@code null})
@throws CertificateParsingException if the extension cannot be decoded
@since 1.4
"
      end

      operation 8055810 "getIssuerAlternativeNames"
	public return_type class_ref 184194 // Collection
	nparams 0
	nexceptions 1
	  exception class_ref 1026818 // CertificateParsingException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an immutable collection of issuer alternative names from the
{@code IssuerAltName} extension, (OID = 2.5.29.18).
<p>
The ASN.1 definition of the {@code IssuerAltName} extension is:
<pre>
IssuerAltName ::= GeneralNames
</pre>
The ASN.1 definition of {@code GeneralNames} is defined
in {@link #getSubjectAlternativeNames getSubjectAlternativeNames}.
<p>
If this certificate does not contain an {@code IssuerAltName}
extension, {@code null} is returned. Otherwise, a
{@code Collection} is returned with an entry representing each
{@code GeneralName} included in the extension. Each entry is a
{@code List} whose first entry is an {@code Integer}
(the name type, 0-8) and whose second entry is a {@code String}
or a byte array (the name, in string or ASN.1 DER encoded form,
respectively). For more details about the formats used for each
name type, see the {@code getSubjectAlternativeNames} method.
<p>
Note that the {@code Collection} returned may contain more
than one name of the same type. Also, note that the returned
{@code Collection} is immutable and any entries containing byte
arrays are cloned to protect against subsequent modifications.
<p>
This method was added to version 1.4 of the Java 2 Platform Standard
Edition. In order to maintain backwards compatibility with existing
service providers, this method is not {@code abstract}
and it provides a default implementation. Subclasses
should override this method with a correct implementation.

@return an immutable {@code Collection} of issuer alternative
names (or {@code null})
@throws CertificateParsingException if the extension cannot be decoded
@since 1.4
"
      end

      operation 8055938 "verify"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 765826 // PublicKey
	  param inout name "sigProvider" type class_ref 509570 // Provider
	nexceptions 4
	  exception class_ref 770306 // CertificateException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this certificate was signed using the
private key that corresponds to the specified public key.
This method uses the signature verification engine
supplied by the specified provider. Note that the specified
Provider object does not have to be registered in the provider list.

This method was added to version 1.8 of the Java Platform Standard
Edition. In order to maintain backwards compatibility with existing
service providers, this method is not {@code abstract}
and it provides a default implementation.

@param key the PublicKey used to carry out the verification.
@param sigProvider the signature provider.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception SignatureException on signature errors.
@exception CertificateException on encoding errors.
@exception UnsupportedOperationException if the method is not supported
@since 1.8
"
      end
    end

    class 770306 "CertificateException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This exception indicates one of a variety of certificate problems.

@author Hemma Prafullchandra
@see Certificate
"
      classrelation 3370626 // <generalisation>
	relation 3370626 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3370626 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1861378 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3192535253797119798L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8021634 "CertificateException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a certificate exception with no detail message. A detail
message is a String that describes this particular exception.
"
      end

      operation 8021762 "CertificateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a certificate exception with the given detail
message. A detail message is a String that describes this
particular exception.

@param msg the detail message.
"
      end

      operation 8021890 "CertificateException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertificateException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 8022018 "CertificateException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertificateException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 833282 "CertPath"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An immutable sequence of certificates (a certification path).
<p>
This is an abstract class that defines the methods common to all
{@code CertPath}s. Subclasses can handle different kinds of
certificates (X.509, PGP, etc.).
<p>
All {@code CertPath} objects have a type, a list of
{@code Certificate}s, and one or more supported encodings. Because the
{@code CertPath} class is immutable, a {@code CertPath} cannot
change in any externally visible way after being constructed. This
stipulation applies to all public fields and methods of this class and any
added or overridden by subclasses.
<p>
The type is a {@code String} that identifies the type of
{@code Certificate}s in the certification path. For each
certificate {@code cert} in a certification path {@code certPath},
{@code cert.getType().equals(certPath.getType())} must be
{@code true}.
<p>
The list of {@code Certificate}s is an ordered {@code List} of
zero or more {@code Certificate}s. This {@code List} and all
of the {@code Certificate}s contained in it must be immutable.
<p>
Each {@code CertPath} object must support one or more encodings
so that the object can be translated into a byte array for storage or
transmission to other parties. Preferably, these encodings should be
well-documented standards (such as PKCS#7). One of the encodings supported
by a {@code CertPath} is considered the default encoding. This
encoding is used if no encoding is explicitly requested (for the
{@link #getEncoded() getEncoded()} method, for instance).
<p>
All {@code CertPath} objects are also {@code Serializable}.
{@code CertPath} objects are resolved into an alternate
{@link CertPathRep CertPathRep} object during serialization. This allows
a {@code CertPath} object to be serialized into an equivalent
representation regardless of its underlying implementation.
<p>
{@code CertPath} objects can be created with a
{@code CertificateFactory} or they can be returned by other classes,
such as a {@code CertPathBuilder}.
<p>
By convention, X.509 {@code CertPath}s (consisting of
{@code X509Certificate}s), are ordered starting with the target
certificate and ending with a certificate issued by the trust anchor. That
is, the issuer of one certificate is the subject of the following one. The
certificate representing the {@link TrustAnchor TrustAnchor} should not be
included in the certification path. Unvalidated X.509 {@code CertPath}s
may not follow these conventions. PKIX {@code CertPathValidator}s will
detect any departure from these conventions that cause the certification
path to be invalid and throw a {@code CertPathValidatorException}.

<p> Every implementation of the Java platform is required to support the
following standard {@code CertPath} encodings:
<ul>
<li>{@code PKCS7}</li>
<li>{@code PkiPath}</li>
</ul>
These encodings are described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\">
CertPath Encodings section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other encodings are supported.
<p>
<b>Concurrent Access</b>
<p>
All {@code CertPath} objects must be thread-safe. That is, multiple
threads may concurrently invoke the methods defined in this class on a
single {@code CertPath} object (or more than one) with no
ill effects. This is also true for the {@code List} returned by
{@code CertPath.getCertificates}.
<p>
Requiring {@code CertPath} objects to be immutable and thread-safe
allows them to be passed around to various pieces of code without worrying
about coordinating access.  Providing this thread-safety is
generally not difficult, since the {@code CertPath} and
{@code List} objects in question are immutable.

@see CertificateFactory
@see CertPathBuilder

@author      Yassir Elley
@since       1.4
"
      classrelation 3372290 // <realization>
	relation 3372290 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3372290 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1862146 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6068470306649138683L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3372418 // type (<unidirectional association>)
	relation 3372418 --->
	  a role_name "type" private
	    comment " the type of certificates in this chain"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3372418 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8027650 "CertPath"
	protected explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPath} of the specified type.
<p>
This constructor is protected because most users should use a
{@code CertificateFactory} to create {@code CertPath}s.

@param type the standard name of the type of
{@code Certificate}s in this path
"
      end

      operation 8027778 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of {@code Certificate}s in this certification
path. This is the same string that would be returned by
{@link java.security.cert.Certificate#getType() cert.getType()}
for all {@code Certificate}s in the certification path.

@return the type of {@code Certificate}s in this certification
path (never null)
"
      end

      operation 8027906 "getEncodings"
	abstract public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration of the encodings supported by this certification
path, with the default encoding first. Attempts to modify the returned
{@code Iterator} via its {@code remove} method result in an
{@code UnsupportedOperationException}.

@return an {@code Iterator} over the names of the supported
        encodings (as Strings)
"
      end

      operation 8028034 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this certification path for equality with the specified
object. Two {@code CertPath}s are equal if and only if their
types are equal and their certificate {@code List}s (and by
implication the {@code Certificate}s in those {@code List}s)
are equal. A {@code CertPath} is never equal to an object that is
not a {@code CertPath}.
<p>
This algorithm is implemented by this method. If it is overridden,
the behavior specified here must be maintained.

@param other the object to test for equality with this certification path
@return true if the specified object is equal to this certification path,
false otherwise
"
      end

      operation 8028162 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the hashcode for this certification path. The hash code of
a certification path is defined to be the result of the following
calculation:
<pre>{@code
 hashCode = path.getType().hashCode();
 hashCode = 31*hashCode + path.getCertificates().hashCode();
}</pre>
This ensures that {@code path1.equals(path2)} implies that
{@code path1.hashCode()==path2.hashCode()} for any two certification
paths, {@code path1} and {@code path2}, as required by the
general contract of {@code Object.hashCode}.

@return the hashcode value for this certification path
"
      end

      operation 8028290 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this certification path.
This calls the {@code toString} method on each of the
{@code Certificate}s in the path.

@return a string representation of this certification path
"
      end

      operation 8028418 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1025922 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoded form of this certification path, using the default
encoding.

@return the encoded bytes
@exception CertificateEncodingException if an encoding error occurs
"
      end

      operation 8028546 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 1
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 1025922 // CertificateEncodingException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encoded form of this certification path, using the
specified encoding.

@param encoding the name of the encoding to use
@return the encoded bytes
@exception CertificateEncodingException if an encoding error occurs or
  the encoding requested is not supported
"
      end

      operation 8028674 "getCertificates"
	abstract public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the list of certificates in this certification path.
The {@code List} returned must be immutable and thread-safe.

@return an immutable {@code List} of {@code Certificate}s
        (may be empty, but not null)
"
      end

      operation 8028802 "writeReplace"
	protected return_type class_ref 129538 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 261506 // ObjectStreamException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the {@code CertPath} to be serialized with a
{@code CertPathRep} object.

@return the {@code CertPathRep} to be serialized

@throws ObjectStreamException if a {@code CertPathRep} object
representing this certification path could not be created
"
      end

      class 1027202 "CertPathRep"
	visibility protected 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3372546 // <realization>
	  relation 3372546 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3372546 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1862274 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 3015633072427920915L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3372674 // type (<unidirectional association>)
	  relation 3372674 --->
	    a role_name "type" private
	      comment " The Certificate type 
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3372674 // type (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	attribute 1862402 "data"
	  private explicit_type "byte"
	  multiplicity "[]"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment " The encoded form of the cert path 
"
	end

	operation 8028930 "CertPathRep"
	  protected explicit_return_type ""
	  nparams 2
	    param inout name "type" type class_ref 128130 // String
	    param inout name "data" explicit_type "byte"
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a {@code CertPathRep} with the specified
type and encoded form of a certification path.

@param type the standard name of a {@code CertPath} type
@param data the encoded form of the certification path
"
	end

	operation 8029058 "readResolve"
	  protected return_type class_ref 129538 // Object
	  nparams 0
	  nexceptions 1
	    exception class_ref 261506 // ObjectStreamException
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a {@code CertPath} constructed from the type and data.

@return the resolved {@code CertPath} object

@throws ObjectStreamException if a {@code CertPath} could not
be constructed
"
	end
      end
    end

    class 1015810 "CertificateFactory"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the functionality of a certificate factory, which is
used to generate certificate, certification path ({@code CertPath})
and certificate revocation list (CRL) objects from their encodings.

<p>For encodings consisting of multiple certificates, use
{@code generateCertificates} when you want to
parse a collection of possibly unrelated certificates. Otherwise,
use {@code generateCertPath} when you want to generate
a {@code CertPath} (a certificate chain) and subsequently
validate it with a {@code CertPathValidator}.

<p>A certificate factory for X.509 must return certificates that are an
instance of {@code java.security.cert.X509Certificate}, and CRLs
that are an instance of {@code java.security.cert.X509CRL}.

<p>The following example reads a file with Base64 encoded certificates,
which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and
bounded at the end by -----END CERTIFICATE-----. We convert the
{@code FileInputStream} (which does not support {@code mark}
and {@code reset}) to a {@code BufferedInputStream} (which
supports those methods), so that each call to
{@code generateCertificate} consumes only one certificate, and the
read position of the input stream is positioned to the next certificate in
the file:

<pre>{@code
FileInputStream fis = new FileInputStream(filename);
BufferedInputStream bis = new BufferedInputStream(fis);

CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");

while (bis.available() > 0) {
   Certificate cert = cf.generateCertificate(bis);
   System.out.println(cert.toString());
}
}</pre>

<p>The following example parses a PKCS#7-formatted certificate reply stored
in a file and extracts all the certificates from it:

<pre>
FileInputStream fis = new FileInputStream(filename);
CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
Collection c = cf.generateCertificates(fis);
Iterator i = c.iterator();
while (i.hasNext()) {
   Certificate cert = (Certificate)i.next();
   System.out.println(cert);
}
</pre>

<p> Every implementation of the Java platform is required to support the
following standard {@code CertificateFactory} type:
<ul>
<li>{@code X.509}</li>
</ul>
and the following standard {@code CertPath} encodings:
<ul>
<li>{@code PKCS7}</li>
<li>{@code PkiPath}</li>
</ul>
The type and encodings are described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\">
CertificateFactory section</a> and the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\">
CertPath Encodings section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other types or encodings are supported.

@author Hemma Prafullchandra
@author Jan Luehe
@author Sean Mullan

@see Certificate
@see X509Certificate
@see CertPath
@see CRL
@see X509CRL

@since 1.2
"
      classrelation 3371010 // type (<unidirectional association>)
	relation 3371010 --->
	  a role_name "type" private
	    comment " The certificate type
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3371010 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3371138 // provider (<unidirectional association>)
	relation 3371138 --->
	  a role_name "provider" private
	    comment " The provider
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3371138 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3371266 // certFacSpi (<unidirectional association>)
	relation 3371266 --->
	  a role_name "certFacSpi" private
	    comment " The provider implementation
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3371266 // certFacSpi (<unidirectional association>)
	  b parent class_ref 1026306 // CertificateFactorySpi
      end

      operation 8022914 "CertificateFactory"
	protected explicit_return_type ""
	nparams 3
	  param inout name "certFacSpi" type class_ref 1026306 // CertificateFactorySpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "type" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a CertificateFactory object of the given type, and encapsulates
the given provider implementation (SPI object) in it.

@param certFacSpi the provider implementation.
@param provider the provider.
@param type the certificate type.
"
      end

      operation 8023042 "getInstance"
	class_operation public return_type class_ref 1015810 // CertificateFactory
	nparams 1
	  param inout name "type" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a certificate factory object that implements the
specified certificate type.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new CertificateFactory object encapsulating the
CertificateFactorySpi implementation from the first
Provider that supports the specified type is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param type the name of the requested certificate type.
See the CertificateFactory section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard certificate types.

@return a certificate factory object for the specified type.

@exception CertificateException if no Provider supports a
         CertificateFactorySpi implementation for the
         specified type.

@see java.security.Provider
"
      end

      operation 8023170 "getInstance"
	class_operation public return_type class_ref 1015810 // CertificateFactory
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 770306 // CertificateException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a certificate factory object for the specified
certificate type.

<p> A new CertificateFactory object encapsulating the
CertificateFactorySpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param type the certificate type.
See the CertificateFactory section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard certificate types.

@param provider the name of the provider.

@return a certificate factory object for the specified type.

@exception CertificateException if a CertificateFactorySpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the provider name is null
         or empty.

@see java.security.Provider
"
      end

      operation 8023298 "getInstance"
	class_operation public return_type class_ref 1015810 // CertificateFactory
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a certificate factory object for the specified
certificate type.

<p> A new CertificateFactory object encapsulating the
CertificateFactorySpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param type the certificate type.
See the CertificateFactory section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertificateFactory\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard certificate types.
@param provider the provider.

@return a certificate factory object for the specified type.

@exception CertificateException if a CertificateFactorySpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the {@code provider} is
         null.

@see java.security.Provider

@since 1.4
"
      end

      operation 8023426 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this certificate factory.

@return the provider of this certificate factory.
"
      end

      operation 8023554 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the certificate type associated with this
certificate factory.

@return the name of the certificate type associated with this
certificate factory.
"
      end

      operation 8023682 "generateCertificate"
	public return_type class_ref 319490 // Certificate
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate object and initializes it with
the data read from the input stream {@code inStream}.

<p>In order to take advantage of the specialized certificate format
supported by this certificate factory,
the returned certificate object can be typecast to the corresponding
certificate class. For example, if this certificate
factory implements X.509 certificates, the returned certificate object
can be typecast to the {@code X509Certificate} class.

<p>In the case of a certificate factory for X.509 certificates, the
certificate provided in {@code inStream} must be DER-encoded and
may be supplied in binary or printable (Base64) encoding. If the
certificate is provided in Base64 encoding, it must be bounded at
the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at
the end by -----END CERTIFICATE-----.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream. Otherwise, each call to this
method consumes one certificate and the read position of the
input stream is positioned to the next available byte after
the inherent end-of-certificate marker. If the data in the input stream
does not contain an inherent end-of-certificate marker (other
than EOF) and there is trailing data after the certificate is parsed, a
{@code CertificateException} is thrown.

@param inStream an input stream with the certificate data.

@return a certificate object initialized with the data
from the input stream.

@exception CertificateException on parsing errors.
"
      end

      operation 8023810 "getCertPathEncodings"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration of the {@code CertPath} encodings supported
by this certificate factory, with the default encoding first. See
the CertPath Encodings section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard encoding names and their formats.
<p>
Attempts to modify the returned {@code Iterator} via its
{@code remove} method result in an
{@code UnsupportedOperationException}.

@return an {@code Iterator} over the names of the supported
        {@code CertPath} encodings (as {@code String}s)
@since 1.4
"
      end

      operation 8023938 "generateCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a {@code CertPath} object and initializes it with
the data read from the {@code InputStream} inStream. The data
is assumed to be in the default encoding. The name of the default
encoding is the first element of the {@code Iterator} returned by
the {@link #getCertPathEncodings getCertPathEncodings} method.

@param inStream an {@code InputStream} containing the data
@return a {@code CertPath} initialized with the data from the
  {@code InputStream}
@exception CertificateException if an exception occurs while decoding
@since 1.4
"
      end

      operation 8024066 "generateCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 2
	  param inout name "inStream" type class_ref 146434 // InputStream
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a {@code CertPath} object and initializes it with
the data read from the {@code InputStream} inStream. The data
is assumed to be in the specified encoding. See
the CertPath Encodings section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard encoding names and their formats.

@param inStream an {@code InputStream} containing the data
@param encoding the encoding used for the data
@return a {@code CertPath} initialized with the data from the
  {@code InputStream}
@exception CertificateException if an exception occurs while decoding or
  the encoding requested is not supported
@since 1.4
"
      end

      operation 8024194 "generateCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 1
	  param inout name "certificates" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Certificate> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a {@code CertPath} object and initializes it with
a {@code List} of {@code Certificate}s.
<p>
The certificates supplied must be of a type supported by the
{@code CertificateFactory}. They will be copied out of the supplied
{@code List} object.

@param certificates a {@code List} of {@code Certificate}s
@return a {@code CertPath} initialized with the supplied list of
  certificates
@exception CertificateException if an exception occurs
@since 1.4
"
      end

      operation 8024322 "generateCertificates"
	public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (possibly empty) collection view of the certificates read
from the given input stream {@code inStream}.

<p>In order to take advantage of the specialized certificate format
supported by this certificate factory, each element in
the returned collection view can be typecast to the corresponding
certificate class. For example, if this certificate
factory implements X.509 certificates, the elements in the returned
collection can be typecast to the {@code X509Certificate} class.

<p>In the case of a certificate factory for X.509 certificates,
{@code inStream} may contain a sequence of DER-encoded certificates
in the formats described for
{@link #generateCertificate(java.io.InputStream) generateCertificate}.
In addition, {@code inStream} may contain a PKCS#7 certificate
chain. This is a PKCS#7 <i>SignedData</i> object, with the only
significant field being <i>certificates</i>. In particular, the
signature and the contents are ignored. This format allows multiple
certificates to be downloaded at once. If no certificates are present,
an empty collection is returned.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream.

@param inStream the input stream with the certificates.

@return a (possibly empty) collection view of
java.security.cert.Certificate objects
initialized with the data from the input stream.

@exception CertificateException on parsing errors.
"
      end

      operation 8024450 "generateCRL"
	public return_type class_ref 1026434 // CRL
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1026562 // CRLException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate revocation list (CRL) object and initializes it
with the data read from the input stream {@code inStream}.

<p>In order to take advantage of the specialized CRL format
supported by this certificate factory,
the returned CRL object can be typecast to the corresponding
CRL class. For example, if this certificate
factory implements X.509 CRLs, the returned CRL object
can be typecast to the {@code X509CRL} class.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream. Otherwise, each call to this
method consumes one CRL and the read position of the input stream
is positioned to the next available byte after the inherent
end-of-CRL marker. If the data in the
input stream does not contain an inherent end-of-CRL marker (other
than EOF) and there is trailing data after the CRL is parsed, a
{@code CRLException} is thrown.

@param inStream an input stream with the CRL data.

@return a CRL object initialized with the data
from the input stream.

@exception CRLException on parsing errors.
"
      end

      operation 8024578 "generateCRLs"
	public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1026562 // CRLException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CRL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (possibly empty) collection view of the CRLs read
from the given input stream {@code inStream}.

<p>In order to take advantage of the specialized CRL format
supported by this certificate factory, each element in
the returned collection view can be typecast to the corresponding
CRL class. For example, if this certificate
factory implements X.509 CRLs, the elements in the returned
collection can be typecast to the {@code X509CRL} class.

<p>In the case of a certificate factory for X.509 CRLs,
{@code inStream} may contain a sequence of DER-encoded CRLs.
In addition, {@code inStream} may contain a PKCS#7 CRL
set. This is a PKCS#7 <i>SignedData</i> object, with the only
significant field being <i>crls</i>. In particular, the
signature and the contents are ignored. This format allows multiple
CRLs to be downloaded at once. If no CRLs are present,
an empty collection is returned.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream.

@param inStream the input stream with the CRLs.

@return a (possibly empty) collection view of
java.security.cert.CRL objects initialized with the data from the input
stream.

@exception CRLException on parsing errors.
"
      end
    end

    class 1025922 "CertificateEncodingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Certificate Encoding Exception. This is thrown whenever an error
occurs while attempting to encode a certificate.

@author Hemma Prafullchandra
"
      classrelation 3370754 // <generalisation>
	relation 3370754 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3370754 // <generalisation>
	  b parent class_ref 770306 // CertificateException
      end

      attribute 1861506 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6219492851589449162L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8022146 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateEncodingException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 8022274 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateEncodingException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end

      operation 8022402 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertificateEncodingException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 8022530 "CertificateEncodingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertificateEncodingException}
with the specified cause and a detail message of
{@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1026178 "CertificateExpiredException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Certificate Expired Exception. This is thrown whenever the current
{@code Date} or the specified {@code Date} is after the
{@code notAfter} date/time specified in the validity period
of the certificate.

@author Hemma Prafullchandra
"
      classrelation 3370882 // <generalisation>
	relation 3370882 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3370882 // <generalisation>
	  b parent class_ref 770306 // CertificateException
      end

      attribute 1861634 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 9071001339691533771L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8022658 "CertificateExpiredException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateExpiredException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 8022786 "CertificateExpiredException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateExpiredException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end
    end

    class 1026306 "CertificateFactorySpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@code CertificateFactory} class.
All the abstract methods in this class must be implemented by each
cryptographic service provider who wishes to supply the implementation
of a certificate factory for a particular certificate type, e.g., X.509.

<p>Certificate factories are used to generate certificate, certification path
({@code CertPath}) and certificate revocation list (CRL) objects from
their encodings.

<p>A certificate factory for X.509 must return certificates that are an
instance of {@code java.security.cert.X509Certificate}, and CRLs
that are an instance of {@code java.security.cert.X509CRL}.

@author Hemma Prafullchandra
@author Jan Luehe
@author Sean Mullan


@see CertificateFactory
@see Certificate
@see X509Certificate
@see CertPath
@see CRL
@see X509CRL

@since 1.2
"
      operation 8024706 "engineGenerateCertificate"
	abstract public return_type class_ref 319490 // Certificate
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate object and initializes it with
the data read from the input stream {@code inStream}.

<p>In order to take advantage of the specialized certificate format
supported by this certificate factory,
the returned certificate object can be typecast to the corresponding
certificate class. For example, if this certificate
factory implements X.509 certificates, the returned certificate object
can be typecast to the {@code X509Certificate} class.

<p>In the case of a certificate factory for X.509 certificates, the
certificate provided in {@code inStream} must be DER-encoded and
may be supplied in binary or printable (Base64) encoding. If the
certificate is provided in Base64 encoding, it must be bounded at
the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at
the end by -----END CERTIFICATE-----.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream. Otherwise, each call to this
method consumes one certificate and the read position of the input stream
is positioned to the next available byte after the inherent
end-of-certificate marker. If the data in the
input stream does not contain an inherent end-of-certificate marker (other
than EOF) and there is trailing data after the certificate is parsed, a
{@code CertificateException} is thrown.

@param inStream an input stream with the certificate data.

@return a certificate object initialized with the data
from the input stream.

@exception CertificateException on parsing errors.
"
      end

      operation 8024834 "engineGenerateCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a {@code CertPath} object and initializes it with
the data read from the {@code InputStream} inStream. The data
is assumed to be in the default encoding.

<p> This method was added to version 1.4 of the Java 2 Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be {@code abstract}
and by default throws an {@code UnsupportedOperationException}.

@param inStream an {@code InputStream} containing the data
@return a {@code CertPath} initialized with the data from the
  {@code InputStream}
@exception CertificateException if an exception occurs while decoding
@exception UnsupportedOperationException if the method is not supported
@since 1.4
"
      end

      operation 8024962 "engineGenerateCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 2
	  param inout name "inStream" type class_ref 146434 // InputStream
	  param inout name "encoding" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a {@code CertPath} object and initializes it with
the data read from the {@code InputStream} inStream. The data
is assumed to be in the specified encoding.

<p> This method was added to version 1.4 of the Java 2 Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be {@code abstract}
and by default throws an {@code UnsupportedOperationException}.

@param inStream an {@code InputStream} containing the data
@param encoding the encoding used for the data
@return a {@code CertPath} initialized with the data from the
  {@code InputStream}
@exception CertificateException if an exception occurs while decoding or
  the encoding requested is not supported
@exception UnsupportedOperationException if the method is not supported
@since 1.4
"
      end

      operation 8025090 "engineGenerateCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 1
	  param inout name "certificates" type class_ref 175362 // List
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Certificate> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a {@code CertPath} object and initializes it with
a {@code List} of {@code Certificate}s.
<p>
The certificates supplied must be of a type supported by the
{@code CertificateFactory}. They will be copied out of the supplied
{@code List} object.

<p> This method was added to version 1.4 of the Java 2 Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be {@code abstract}
and by default throws an {@code UnsupportedOperationException}.

@param certificates a {@code List} of {@code Certificate}s
@return a {@code CertPath} initialized with the supplied list of
  certificates
@exception CertificateException if an exception occurs
@exception UnsupportedOperationException if the method is not supported
@since 1.4
"
      end

      operation 8025218 "engineGetCertPathEncodings"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iteration of the {@code CertPath} encodings supported
by this certificate factory, with the default encoding first. See
the CertPath Encodings section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathEncodings\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard encoding names.
<p>
Attempts to modify the returned {@code Iterator} via its
{@code remove} method result in an
{@code UnsupportedOperationException}.

<p> This method was added to version 1.4 of the Java 2 Platform
Standard Edition. In order to maintain backwards compatibility with
existing service providers, this method cannot be {@code abstract}
and by default throws an {@code UnsupportedOperationException}.

@return an {@code Iterator} over the names of the supported
        {@code CertPath} encodings (as {@code String}s)
@exception UnsupportedOperationException if the method is not supported
@since 1.4
"
      end

      operation 8025346 "engineGenerateCertificates"
	abstract public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 770306 // CertificateException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (possibly empty) collection view of the certificates read
from the given input stream {@code inStream}.

<p>In order to take advantage of the specialized certificate format
supported by this certificate factory, each element in
the returned collection view can be typecast to the corresponding
certificate class. For example, if this certificate
factory implements X.509 certificates, the elements in the returned
collection can be typecast to the {@code X509Certificate} class.

<p>In the case of a certificate factory for X.509 certificates,
{@code inStream} may contain a single DER-encoded certificate
in the formats described for
{@link CertificateFactory#generateCertificate(java.io.InputStream)
generateCertificate}.
In addition, {@code inStream} may contain a PKCS#7 certificate
chain. This is a PKCS#7 <i>SignedData</i> object, with the only
significant field being <i>certificates</i>. In particular, the
signature and the contents are ignored. This format allows multiple
certificates to be downloaded at once. If no certificates are present,
an empty collection is returned.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream.

@param inStream the input stream with the certificates.

@return a (possibly empty) collection view of
java.security.cert.Certificate objects
initialized with the data from the input stream.

@exception CertificateException on parsing errors.
"
      end

      operation 8025474 "engineGenerateCRL"
	abstract public return_type class_ref 1026434 // CRL
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1026562 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a certificate revocation list (CRL) object and initializes it
with the data read from the input stream {@code inStream}.

<p>In order to take advantage of the specialized CRL format
supported by this certificate factory,
the returned CRL object can be typecast to the corresponding
CRL class. For example, if this certificate
factory implements X.509 CRLs, the returned CRL object
can be typecast to the {@code X509CRL} class.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream. Otherwise, each call to this
method consumes one CRL and the read position of the input stream
is positioned to the next available byte after the inherent
end-of-CRL marker. If the data in the
input stream does not contain an inherent end-of-CRL marker (other
than EOF) and there is trailing data after the CRL is parsed, a
{@code CRLException} is thrown.

@param inStream an input stream with the CRL data.

@return a CRL object initialized with the data
from the input stream.

@exception CRLException on parsing errors.
"
      end

      operation 8025602 "engineGenerateCRLs"
	abstract public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "inStream" type class_ref 146434 // InputStream
	nexceptions 1
	  exception class_ref 1026562 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CRL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a (possibly empty) collection view of the CRLs read
from the given input stream {@code inStream}.

<p>In order to take advantage of the specialized CRL format
supported by this certificate factory, each element in
the returned collection view can be typecast to the corresponding
CRL class. For example, if this certificate
factory implements X.509 CRLs, the elements in the returned
collection can be typecast to the {@code X509CRL} class.

<p>In the case of a certificate factory for X.509 CRLs,
{@code inStream} may contain a single DER-encoded CRL.
In addition, {@code inStream} may contain a PKCS#7 CRL
set. This is a PKCS#7 <i>SignedData</i> object, with the only
significant field being <i>crls</i>. In particular, the
signature and the contents are ignored. This format allows multiple
CRLs to be downloaded at once. If no CRLs are present,
an empty collection is returned.

<p>Note that if the given input stream does not support
{@link java.io.InputStream#mark(int) mark} and
{@link java.io.InputStream#reset() reset}, this method will
consume the entire input stream.

@param inStream the input stream with the CRLs.

@return a (possibly empty) collection view of
java.security.cert.CRL objects initialized with the data from the input
stream.

@exception CRLException on parsing errors.
"
      end
    end

    class 1026434 "CRL"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class is an abstraction of certificate revocation lists (CRLs) that
have different formats but important common uses. For example, all CRLs
share the functionality of listing revoked certificates, and can be queried
on whether or not they list a given certificate.
<p>
Specialized CRL types can be defined by subclassing off of this abstract
class.

@author Hemma Prafullchandra


@see X509CRL
@see CertificateFactory

@since 1.2
"
      classrelation 3376386 // type (<unidirectional association>)
	relation 3376386 --->
	  a role_name "type" private
	    comment " the CRL type
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3376386 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8038786 "CRL"
	protected explicit_return_type ""
	nparams 1
	  param inout name "type" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a CRL of the specified type.

@param type the standard name of the CRL type.
See Appendix A in the <a href=
\"../../../../technotes/guides/security/crypto/CryptoSpec.html#AppA\">
Java Cryptography Architecture API Specification &amp; Reference </a>
for information about standard CRL types.
"
      end

      operation 8038914 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this CRL.

@return the type of this CRL.
"
      end

      operation 8039042 "toString"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this CRL.

@return a string representation of this CRL.
"
      end

      operation 8039170 "isRevoked"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "cert" type class_ref 319490 // Certificate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the given certificate is on this CRL.

@param cert the certificate to check for.
@return true if the given certificate is on this CRL,
false otherwise.
"
      end
    end

    class 1026562 "CRLException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "CRL (Certificate Revocation List) Exception.

@author Hemma Prafullchandra
"
      classrelation 3376514 // <generalisation>
	relation 3376514 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3376514 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1863938 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6694728944094197147L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8039298 "CRLException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CRLException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 8039426 "CRLException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CRLException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end

      operation 8039554 "CRLException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CRLException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 8039682 "CRLException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CRLException} with the specified cause
and a detail message of {@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1026690 "CertificateNotYetValidException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Certificate is not yet valid exception. This is thrown whenever
the current {@code Date} or the specified {@code Date}
is before the {@code notBefore} date/time in the Certificate
validity period.

@author Hemma Prafullchandra
"
      classrelation 3371394 // <generalisation>
	relation 3371394 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3371394 // <generalisation>
	  b parent class_ref 770306 // CertificateException
      end

      attribute 1861762 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 4355919900041064702L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8025730 "CertificateNotYetValidException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateNotYetValidException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 8025858 "CertificateNotYetValidException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateNotYetValidException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end
    end

    class 1026818 "CertificateParsingException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Certificate Parsing Exception. This is thrown whenever an
invalid DER-encoded certificate is parsed or unsupported DER features
are found in the Certificate.

@author Hemma Prafullchandra
"
      classrelation 3371522 // <generalisation>
	relation 3371522 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3371522 // <generalisation>
	  b parent class_ref 770306 // CertificateException
      end

      attribute 1861890 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7989222416793322029L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8025986 "CertificateParsingException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateParsingException with no detail message. A
detail message is a String that describes this particular
exception.
"
      end

      operation 8026114 "CertificateParsingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a CertificateParsingException with the specified detail
message. A detail message is a String that describes this
particular exception.

@param message the detail message.
"
      end

      operation 8026242 "CertificateParsingException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertificateParsingException} with the specified
detail message and cause.

@param message the detail message (which is saved for later retrieval
       by the {@link #getMessage()} method).
@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end

      operation 8026370 "CertificateParsingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertificateParsingException} with the
specified cause and a detail message of
{@code (cause==null ? null : cause.toString())}
(which typically contains the class and detail message of
{@code cause}).

@param cause the cause (which is saved for later retrieval by the
       {@link #getCause()} method).  (A {@code null} value is permitted,
       and indicates that the cause is nonexistent or unknown.)
@since 1.5
"
      end
    end

    class 1026946 "CertificateRevokedException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception that indicates an X.509 certificate is revoked. A
{@code CertificateRevokedException} contains additional information
about the revoked certificate, such as the date on which the
certificate was revoked and the reason it was revoked.

@author Sean Mullan
@since 1.7
@see CertPathValidatorException
"
      classrelation 3371650 // <generalisation>
	relation 3371650 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3371650 // <generalisation>
	  b parent class_ref 770306 // CertificateException
      end

      attribute 1862018 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7839996631571608627L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3371778 // revocationDate (<unidirectional association>)
	relation 3371778 --->
	  a role_name "revocationDate" private
	    comment "
@serial the date on which the certificate was revoked

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3371778 // revocationDate (<unidirectional association>)
	  b parent class_ref 521474 // Date
      end

      classrelation 3371906 // reason (<unidirectional association>)
	relation 3371906 --->
	  a role_name "reason" const_relation private
	    comment "
@serial the revocation reason

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3371906 // reason (<unidirectional association>)
	  b parent class_ref 1027074 // CRLReason
      end

      classrelation 3372034 // authority (<unidirectional association>)
	relation 3372034 --->
	  a role_name "authority" const_relation private
	    comment "
@serial the {@code X500Principal} that represents the name of the
authority that signed the certificate's revocation status information

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3372034 // authority (<unidirectional association>)
	  b parent class_ref 833026 // X500Principal
      end

      classrelation 3372162 // extensions (<unidirectional association>)
	relation 3372162 --->
	  a role_name "extensions" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Extension> ${name}${value};
"
	    classrelation_ref 3372162 // extensions (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 8026498 "CertificateRevokedException"
	public explicit_return_type ""
	nparams 4
	  param inout name "revocationDate" type class_ref 521474 // Date
	  param inout name "reason" type class_ref 1027074 // CRLReason
	  param inout name "authority" type class_ref 833026 // X500Principal
	  param inout name "extensions" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<String, Extension> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CertificateRevokedException} with
the specified revocation date, reason code, authority name, and map
of extensions.

@param revocationDate the date on which the certificate was revoked. The
   date is copied to protect against subsequent modification.
@param reason the revocation reason
@param extensions a map of X.509 Extensions. Each key is an OID String
   that maps to the corresponding Extension. The map is copied to
   prevent subsequent modification.
@param authority the {@code X500Principal} that represents the name
   of the authority that signed the certificate's revocation status
   information
@throws NullPointerException if {@code revocationDate},
   {@code reason}, {@code authority}, or
   {@code extensions} is {@code null}
"
      end

      operation 8026626 "getRevocationDate"
	public return_type class_ref 521474 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the date on which the certificate was revoked. A new copy is
returned each time the method is invoked to protect against subsequent
modification.

@return the revocation date
"
      end

      operation 8026754 "getRevocationReason"
	public return_type class_ref 1027074 // CRLReason
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the reason the certificate was revoked.

@return the revocation reason
"
      end

      operation 8026882 "getAuthorityName"
	public return_type class_ref 833026 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the authority that signed the certificate's
revocation status information.

@return the {@code X500Principal} that represents the name of the
    authority that signed the certificate's revocation status information
"
      end

      operation 8027010 "getInvalidityDate"
	public return_type class_ref 521474 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the invalidity date, as specified in the Invalidity Date
extension of this {@code CertificateRevokedException}. The
invalidity date is the date on which it is known or suspected that the
private key was compromised or that the certificate otherwise became
invalid. This implementation calls {@code getExtensions()} and
checks the returned map for an entry for the Invalidity Date extension
OID (\"2.5.29.24\"). If found, it returns the invalidity date in the
extension; otherwise null. A new Date object is returned each time the
method is invoked to protect against subsequent modification.

@return the invalidity date, or {@code null} if not specified
"
      end

      operation 8027138 "getExtensions"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, Extension> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map of X.509 extensions containing additional information
about the revoked certificate, such as the Invalidity Date
Extension. Each key is an OID String that maps to the corresponding
Extension.

@return an unmodifiable map of X.509 extensions, or an empty map
   if there are no extensions
"
      end

      operation 8027266 "getMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8027394 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "oos" type class_ref 173442 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Serialize this {@code CertificateRevokedException} instance.

@serialData the size of the extensions map (int), followed by all of
the extensions in the map, in no particular order. For each extension,
the following data is emitted: the OID String (Object), the criticality
flag (boolean), the length of the encoded extension value byte array
(int), and the encoded extension value bytes.
"
      end

      operation 8027522 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "ois" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deserialize the {@code CertificateRevokedException} instance.
"
      end
    end

    class 1027074 "CRLReason"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The CRLReason enumeration specifies the reason that a certificate
is revoked, as defined in <a href=\"http://www.ietf.org/rfc/rfc3280.txt\">
RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL
Profile</a>.

@author Sean Mullan
@since 1.7
@see X509CRLEntry#getRevocationReason
@see CertificateRevokedException#getRevocationReason
"
      attribute 1864066 "UNSPECIFIED"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that it is unspecified as to why the
certificate has been revoked.

"
      end

      attribute 1864194 "KEY_COMPROMISE"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that it is known or suspected that the
certificate subject's private key has been compromised. It applies
to end-entity certificates only.

"
      end

      attribute 1864322 "CA_COMPROMISE"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that it is known or suspected that the
certificate subject's private key has been compromised. It applies
to certificate authority (CA) certificates only.

"
      end

      attribute 1864450 "AFFILIATION_CHANGED"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that the subject's name or other information
has changed.

"
      end

      attribute 1864578 "SUPERSEDED"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that the certificate has been superseded.

"
      end

      attribute 1864706 "CESSATION_OF_OPERATION"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that the certificate is no longer needed.

"
      end

      attribute 1864834 "CERTIFICATE_HOLD"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that the certificate has been put on hold.

"
      end

      attribute 1864962 "UNUSED"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Unused reason.

"
      end

      attribute 1865090 "REMOVE_FROM_CRL"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that the certificate was previously on hold
and should be removed from the CRL. It is for use with delta CRLs.

"
      end

      attribute 1865218 "PRIVILEGE_WITHDRAWN"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that the privileges granted to the subject of
the certificate have been withdrawn.

"
      end

      attribute 1865346 "AA_COMPROMISE"
	public type class_ref 1027074 // CRLReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "This reason indicates that it is known or suspected that the
certificate subject's private key has been compromised. It applies
to authority attribute (AA) certificates only.
"
      end
    end

    class 1027330 "CertPathBuilder"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class for building certification paths (also known as certificate chains).
<p>
This class uses a provider-based architecture.
To create a {@code CertPathBuilder}, call
one of the static {@code getInstance} methods, passing in the
algorithm name of the {@code CertPathBuilder} desired and optionally
the name of the provider desired.

<p>Once a {@code CertPathBuilder} object has been created, certification
paths can be constructed by calling the {@link #build build} method and
passing it an algorithm-specific set of parameters. If successful, the
result (including the {@code CertPath} that was built) is returned
in an object that implements the {@code CertPathBuilderResult}
interface.

<p>The {@link #getRevocationChecker} method allows an application to specify
additional algorithm-specific parameters and options used by the
{@code CertPathBuilder} when checking the revocation status of certificates.
Here is an example demonstrating how it is used with the PKIX algorithm:

<pre>
CertPathBuilder cpb = CertPathBuilder.getInstance(\"PKIX\");
PKIXRevocationChecker rc = (PKIXRevocationChecker)cpb.getRevocationChecker();
rc.setOptions(EnumSet.of(Option.PREFER_CRLS));
params.addCertPathChecker(rc);
CertPathBuilderResult cpbr = cpb.build(params);
</pre>

<p>Every implementation of the Java platform is required to support the
following standard {@code CertPathBuilder} algorithm:
<ul>
<li>{@code PKIX}</li>
</ul>
This algorithm is described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathBuilder\">
CertPathBuilder section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other algorithms are supported.

<p>
<b>Concurrent Access</b>
<p>
The static methods of this class are guaranteed to be thread-safe.
Multiple threads may concurrently invoke the static methods defined in
this class with no ill effects.
<p>
However, this is not true for the non-static methods defined by this class.
Unless otherwise documented by a specific provider, threads that need to
access a single {@code CertPathBuilder} instance concurrently should
synchronize amongst themselves and provide the necessary locking. Multiple
threads each manipulating a different {@code CertPathBuilder} instance
need not synchronize.

@see CertPath

@since       1.4
@author      Sean Mullan
@author      Yassir Elley
"
      classrelation 3372802 // CPB_TYPE (<unidirectional association>)
	relation 3372802 --->
	  a role_name "CPB_TYPE" init_value " \"certpathbuilder.type\"" class_relation const_relation private
	    comment "
Constant to lookup in the Security properties file to determine
the default certpathbuilder type. In the Security properties file,
the default certpathbuilder type is given as:
<pre>
certpathbuilder.type=PKIX
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3372802 // CPB_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3372930 // builderSpi (<unidirectional association>)
	relation 3372930 --->
	  a role_name "builderSpi" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3372930 // builderSpi (<unidirectional association>)
	  b parent class_ref 1027458 // CertPathBuilderSpi
      end

      classrelation 3373058 // provider (<unidirectional association>)
	relation 3373058 --->
	  a role_name "provider" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3373058 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3373186 // algorithm (<unidirectional association>)
	relation 3373186 --->
	  a role_name "algorithm" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3373186 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8029186 "CertPathBuilder"
	protected explicit_return_type ""
	nparams 3
	  param inout name "builderSpi" type class_ref 1027458 // CertPathBuilderSpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathBuilder} object of the given algorithm,
and encapsulates the given provider implementation (SPI object) in it.

@param builderSpi the provider implementation
@param provider the provider
@param algorithm the algorithm name
"
      end

      operation 8029314 "getInstance"
	class_operation public return_type class_ref 1027330 // CertPathBuilder
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathBuilder} object that implements the
specified algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new CertPathBuilder object encapsulating the
CertPathBuilderSpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the requested {@code CertPathBuilder}
 algorithm.  See the CertPathBuilder section in the <a href=
 \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathBuilder\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return a {@code CertPathBuilder} object that implements the
         specified algorithm.

@throws NoSuchAlgorithmException if no Provider supports a
         CertPathBuilderSpi implementation for the
         specified algorithm.

@see java.security.Provider
"
      end

      operation 8029442 "getInstance"
	class_operation public return_type class_ref 1027330 // CertPathBuilder
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathBuilder} object that implements the
specified algorithm.

<p> A new CertPathBuilder object encapsulating the
CertPathBuilderSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the requested {@code CertPathBuilder}
 algorithm.  See the CertPathBuilder section in the <a href=
 \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathBuilder\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the name of the provider.

@return a {@code CertPathBuilder} object that implements the
         specified algorithm.

@throws NoSuchAlgorithmException if a CertPathBuilderSpi
         implementation for the specified algorithm is not
         available from the specified provider.

@throws NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the {@code provider} is
         null or empty.

@see java.security.Provider
"
      end

      operation 8029570 "getInstance"
	class_operation public return_type class_ref 1027330 // CertPathBuilder
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathBuilder} object that implements the
specified algorithm.

<p> A new CertPathBuilder object encapsulating the
CertPathBuilderSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param algorithm the name of the requested {@code CertPathBuilder}
 algorithm.  See the CertPathBuilder section in the <a href=
 \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathBuilder\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the provider.

@return a {@code CertPathBuilder} object that implements the
         specified algorithm.

@exception NoSuchAlgorithmException if a CertPathBuilderSpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the {@code provider} is
         null.

@see java.security.Provider
"
      end

      operation 8029698 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this {@code CertPathBuilder}.

@return the provider of this {@code CertPathBuilder}
"
      end

      operation 8029826 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the algorithm of this {@code CertPathBuilder}.

@return the name of the algorithm of this {@code CertPathBuilder}
"
      end

      operation 8029954 "build"
	public return_type class_ref 1027586 // CertPathBuilderResult
	nparams 1
	  param inout name "params" type class_ref 1027714 // CertPathParameters
	nexceptions 2
	  exception class_ref 1027842 // CertPathBuilderException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to build a certification path using the specified algorithm
parameter set.

@param params the algorithm parameters
@return the result of the build algorithm
@throws CertPathBuilderException if the builder is unable to construct
 a certification path that satisfies the specified parameters
@throws InvalidAlgorithmParameterException if the specified parameters
are inappropriate for this {@code CertPathBuilder}
"
      end

      operation 8030082 "getDefaultType"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default {@code CertPathBuilder} type as specified by
the {@code certpathbuilder.type} security property, or the string
{@literal \"PKIX\"} if no such property exists.

<p>The default {@code CertPathBuilder} type can be used by
applications that do not want to use a hard-coded type when calling one
of the {@code getInstance} methods, and want to provide a default
type in case a user does not specify its own.

<p>The default {@code CertPathBuilder} type can be changed by
setting the value of the {@code certpathbuilder.type} security property
to the desired type.

@see java.security.Security security properties
@return the default {@code CertPathBuilder} type as specified
by the {@code certpathbuilder.type} security property, or the string
{@literal \"PKIX\"} if no such property exists.
"
      end

      operation 8030210 "getRevocationChecker"
	public return_type class_ref 1027970 // CertPathChecker
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathChecker} that the encapsulated
{@code CertPathBuilderSpi} implementation uses to check the revocation
status of certificates. A PKIX implementation returns objects of
type {@code PKIXRevocationChecker}. Each invocation of this method
returns a new instance of {@code CertPathChecker}.

<p>The primary purpose of this method is to allow callers to specify
additional input parameters and options specific to revocation checking.
See the class description for an example.

@return a {@code CertPathChecker}
@throws UnsupportedOperationException if the service provider does not
        support this method
@since 1.8
"
      end
    end

    class 1027458 "CertPathBuilderSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@link CertPathBuilder CertPathBuilder} class. All
{@code CertPathBuilder} implementations must include a class (the
SPI class) that extends this class ({@code CertPathBuilderSpi}) and
implements all of its methods. In general, instances of this class should
only be accessed through the {@code CertPathBuilder} class. For
details, see the Java Cryptography Architecture.
<p>
<b>Concurrent Access</b>
<p>
Instances of this class need not be protected against concurrent
access from multiple threads. Threads that need to access a single
{@code CertPathBuilderSpi} instance concurrently should synchronize
amongst themselves and provide the necessary locking before calling the
wrapping {@code CertPathBuilder} object.
<p>
However, implementations of {@code CertPathBuilderSpi} may still
encounter concurrency issues, since multiple threads each
manipulating a different {@code CertPathBuilderSpi} instance need not
synchronize.

@since       1.4
@author      Sean Mullan
"
      operation 8031106 "CertPathBuilderSpi"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default constructor.
"
      end

      operation 8031234 "engineBuild"
	abstract public return_type class_ref 1027586 // CertPathBuilderResult
	nparams 1
	  param inout name "params" type class_ref 1027714 // CertPathParameters
	nexceptions 2
	  exception class_ref 1027842 // CertPathBuilderException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to build a certification path using the specified
algorithm parameter set.

@param params the algorithm parameters
@return the result of the build algorithm
@throws CertPathBuilderException if the builder is unable to construct
a certification path that satisfies the specified parameters
@throws InvalidAlgorithmParameterException if the specified parameters
are inappropriate for this {@code CertPathBuilder}
"
      end

      operation 8031362 "engineGetRevocationChecker"
	public return_type class_ref 1027970 // CertPathChecker
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathChecker} that this implementation uses to
check the revocation status of certificates. A PKIX implementation
returns objects of type {@code PKIXRevocationChecker}.

<p>The primary purpose of this method is to allow callers to specify
additional input parameters and options specific to revocation checking.
See the class description of {@code CertPathBuilder} for an example.

<p>This method was added to version 1.8 of the Java Platform Standard
Edition. In order to maintain backwards compatibility with existing
service providers, this method cannot be abstract and by default throws
an {@code UnsupportedOperationException}.

@return a {@code CertPathChecker} that this implementation uses to
check the revocation status of certificates
@throws UnsupportedOperationException if this method is not supported
@since 1.8
"
      end
    end

    class 1027586 "CertPathBuilderResult"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A specification of the result of a certification path builder algorithm.
All results returned by the {@link CertPathBuilder#build
CertPathBuilder.build} method must implement this interface.
<p>
At a minimum, a {@code CertPathBuilderResult} contains the
{@code CertPath} built by the {@code CertPathBuilder} instance.
Implementations of this interface may add methods to return implementation
or algorithm specific information, such as debugging information or
certification path validation results.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this interface are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathBuilder

@since       1.4
@author      Sean Mullan
"
      classrelation 3373442 // <generalisation>
	relation 3373442 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3373442 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8030850 "getCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the built certification path.

@return the certification path (never {@code null})
"
      end

      operation 8030978 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this {@code CertPathBuilderResult}. Changes to the
copy will not affect the original and vice versa.

@return a copy of this {@code CertPathBuilderResult}
"
      end
    end

    class 1027714 "CertPathParameters"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A specification of certification path algorithm parameters.
The purpose of this interface is to group (and provide type safety for)
all {@code CertPath} parameter specifications. All
{@code CertPath} parameter specifications must implement this
interface.

@author      Yassir Elley
@see         CertPathValidator#validate(CertPath, CertPathParameters)
@see         CertPathBuilder#build(CertPathParameters)
@since       1.4
"
      classrelation 3373698 // <generalisation>
	relation 3373698 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3373698 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8032386 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this {@code CertPathParameters}. Changes to the
copy will not affect the original and vice versa.

@return a copy of this {@code CertPathParameters}
"
      end
    end

    class 1027842 "CertPathBuilderException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception indicating one of a variety of problems encountered when
building a certification path with a {@code CertPathBuilder}.
<p>
A {@code CertPathBuilderException} provides support for wrapping
exceptions. The {@link #getCause getCause} method returns the throwable,
if any, that caused this exception to be thrown.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathBuilder

@since       1.4
@author      Sean Mullan
"
      classrelation 3373314 // <generalisation>
	relation 3373314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3373314 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1862530 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5316471420178794402L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8030338 "CertPathBuilderException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathBuilderException} with {@code null}
as its detail message.
"
      end

      operation 8030466 "CertPathBuilderException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathBuilderException} with the given
detail message. The detail message is a {@code String} that
describes this particular exception in more detail.

@param msg the detail message
"
      end

      operation 8030594 "CertPathBuilderException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathBuilderException} that wraps the specified
throwable. This allows any exception to be converted into a
{@code CertPathBuilderException}, while retaining information
about the wrapped exception, which may be useful for debugging. The
detail message is set to ({@code cause==null ? null : cause.toString()})
(which typically contains the class and detail message of
cause).

@param cause the cause (which is saved for later retrieval by the
{@link #getCause getCause()} method). (A {@code null} value is
permitted, and indicates that the cause is nonexistent or unknown.)
"
      end

      operation 8030722 "CertPathBuilderException"
	public explicit_return_type ""
	nparams 2
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathBuilderException} with the specified
detail message and cause.

@param msg the detail message
@param  cause the cause (which is saved for later retrieval by the
{@link #getCause getCause()} method). (A {@code null} value is
permitted, and indicates that the cause is nonexistent or unknown.)
"
      end
    end

    class 1027970 "CertPathChecker"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Performs one or more checks on each {@code Certificate} of a
{@code CertPath}.

<p>A {@code CertPathChecker} implementation is typically created to extend
a certification path validation algorithm. For example, an implementation
may check for and process a critical private extension of each certificate
in a certification path.

@since 1.8
"
      operation 8031490 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "forward" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1028098 // CertPathValidatorException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the internal state of this {@code CertPathChecker}.

<p>The {@code forward} flag specifies the order that certificates will
be passed to the {@link #check check} method (forward or reverse).

@param forward the order that certificates are presented to the
       {@code check} method. If {@code true}, certificates are
       presented from target to trust anchor (forward); if
       {@code false}, from trust anchor to target (reverse).
@throws CertPathValidatorException if this {@code CertPathChecker} is
        unable to check certificates in the specified order
"
      end

      operation 8031618 "isForwardCheckingSupported"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if forward checking is supported. Forward checking refers
to the ability of the {@code CertPathChecker} to perform its checks
when certificates are presented to the {@code check} method in the
forward direction (from target to trust anchor).

@return {@code true} if forward checking is supported, {@code false}
        otherwise
"
      end

      operation 8031746 "check"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cert" type class_ref 319490 // Certificate
	nexceptions 1
	  exception class_ref 1028098 // CertPathValidatorException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the check(s) on the specified certificate using its internal
state. The certificates are presented in the order specified by the
{@code init} method.

@param cert the {@code Certificate} to be checked
@throws CertPathValidatorException if the specified certificate does
        not pass the check
"
      end
    end

    class 1028098 "CertPathValidatorException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception indicating one of a variety of problems encountered when
validating a certification path.
<p>
A {@code CertPathValidatorException} provides support for wrapping
exceptions. The {@link #getCause getCause} method returns the throwable,
if any, that caused this exception to be thrown.
<p>
A {@code CertPathValidatorException} may also include the
certification path that was being validated when the exception was thrown,
the index of the certificate in the certification path that caused the
exception to be thrown, and the reason that caused the failure. Use the
{@link #getCertPath getCertPath}, {@link #getIndex getIndex}, and
{@link #getReason getReason} methods to retrieve this information.

<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathValidator

@since       1.4
@author      Yassir Elley
"
      classrelation 3374338 // <generalisation>
	relation 3374338 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3374338 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1862658 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3083180014971893139L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1862786 "index"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "@serial the index of the certificate in the certification path
that caused the exception to be thrown

"
      end

      classrelation 3374466 // certPath (<unidirectional association>)
	relation 3374466 --->
	  a role_name "certPath" private
	    comment "
@serial the {@code CertPath} that was being validated when
the exception was thrown

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3374466 // certPath (<unidirectional association>)
	  b parent class_ref 833282 // CertPath
      end

      class 1029122 "Reason"
	visibility public stereotype "interface"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3374722 // <generalisation>
	  relation 3374722 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3374722 // <generalisation>
	    b parent class_ref 136578 // Serializable
	end
      end

      classrelation 3374594 // reason (<unidirectional association>)
	relation 3374594 --->
	  a role_name "reason" init_value " BasicReason.UNSPECIFIED" private
	    comment "
@serial the reason the validation failed

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3374594 // reason (<unidirectional association>)
	  b parent class_ref 1029122 // Reason
      end

      operation 8033666 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathValidatorException} with
no detail message.
"
      end

      operation 8033794 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathValidatorException} with the given
detail message. A detail message is a {@code String} that
describes this particular exception.

@param msg the detail message
"
      end

      operation 8033922 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathValidatorException} that wraps the
specified throwable. This allows any exception to be converted into a
{@code CertPathValidatorException}, while retaining information
about the wrapped exception, which may be useful for debugging. The
detail message is set to ({@code cause==null ? null : cause.toString()})
(which typically contains the class and detail message of
cause).

@param cause the cause (which is saved for later retrieval by the
{@link #getCause getCause()} method). (A {@code null} value is
permitted, and indicates that the cause is nonexistent or unknown.)
"
      end

      operation 8034050 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 2
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathValidatorException} with the specified
detail message and cause.

@param msg the detail message
@param cause the cause (which is saved for later retrieval by the
{@link #getCause getCause()} method). (A {@code null} value is
permitted, and indicates that the cause is nonexistent or unknown.)
"
      end

      operation 8034178 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 4
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	  param inout name "certPath" type class_ref 833282 // CertPath
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathValidatorException} with the specified
detail message, cause, certification path, and index.

@param msg the detail message (or {@code null} if none)
@param cause the cause (or {@code null} if none)
@param certPath the certification path that was in the process of
being validated when the error was encountered
@param index the index of the certificate in the certification path
that caused the error (or -1 if not applicable). Note that
the list of certificates in a {@code CertPath} is zero based.
@throws IndexOutOfBoundsException if the index is out of range
{@code (index < -1 || (certPath != null && index >=
certPath.getCertificates().size()) }
@throws IllegalArgumentException if {@code certPath} is
{@code null} and {@code index} is not -1
"
      end

      operation 8034306 "CertPathValidatorException"
	public explicit_return_type ""
	nparams 5
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	  param inout name "certPath" type class_ref 833282 // CertPath
	  param in name "index" explicit_type "int"
	  param inout name "reason" type class_ref 1029122 // Reason
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathValidatorException} with the specified
detail message, cause, certification path, index, and reason.

@param msg the detail message (or {@code null} if none)
@param cause the cause (or {@code null} if none)
@param certPath the certification path that was in the process of
being validated when the error was encountered
@param index the index of the certificate in the certification path
that caused the error (or -1 if not applicable). Note that
the list of certificates in a {@code CertPath} is zero based.
@param reason the reason the validation failed
@throws IndexOutOfBoundsException if the index is out of range
{@code (index < -1 || (certPath != null && index >=
certPath.getCertificates().size()) }
@throws IllegalArgumentException if {@code certPath} is
{@code null} and {@code index} is not -1
@throws NullPointerException if {@code reason} is {@code null}

@since 1.7
"
      end

      operation 8034434 "getCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certification path that was being validated when
the exception was thrown.

@return the {@code CertPath} that was being validated when
the exception was thrown (or {@code null} if not specified)
"
      end

      operation 8034562 "getIndex"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the certificate in the certification path
that caused the exception to be thrown. Note that the list of
certificates in a {@code CertPath} is zero based. If no
index has been set, -1 is returned.

@return the index that has been set, or -1 if none has been set
"
      end

      operation 8034690 "getReason"
	public return_type class_ref 1029122 // Reason
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the reason that the validation failed. The reason is
associated with the index of the certificate returned by
{@link #getIndex}.

@return the reason that the validation failed, or
   {@code BasicReason.UNSPECIFIED} if a reason has not been
   specified

@since 1.7
"
      end

      operation 8034818 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "stream" type class_ref 168962 // ObjectInputStream
	nexceptions 2
	  exception class_ref 169730 // ClassNotFoundException
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 1029250 "BasicReason"
	visibility public stereotype "enum"
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3374850 // <realization>
	  relation 3374850 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3374850 // <realization>
	    b parent class_ref 1029122 // Reason
	end

	attribute 1862914 "UNSPECIFIED"
	  public type class_ref 1029250 // BasicReason
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Unspecified reason.

"
	end

	attribute 1863042 "EXPIRED"
	  public type class_ref 1029250 // BasicReason
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The certificate is expired.

"
	end

	attribute 1863170 "NOT_YET_VALID"
	  public type class_ref 1029250 // BasicReason
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The certificate is not yet valid.

"
	end

	attribute 1863298 "REVOKED"
	  public type class_ref 1029250 // BasicReason
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The certificate is revoked.

"
	end

	attribute 1863426 "UNDETERMINED_REVOCATION_STATUS"
	  public type class_ref 1029250 // BasicReason
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The revocation status of the certificate could not be determined.

"
	end

	attribute 1863554 "INVALID_SIGNATURE"
	  public type class_ref 1029250 // BasicReason
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The signature is invalid.

"
	end

	attribute 1863682 "ALGORITHM_CONSTRAINED"
	  public type class_ref 1029250 // BasicReason
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "The public key or the signature algorithm has been constrained.
"
	end
      end
    end

    class 1028226 "CertPathHelperImpl"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Helper class that allows the Sun CertPath provider to access
implementation dependent APIs in CertPath framework.

@author Andreas Sterbenz
"
      operation 8031874 "CertPathHelperImpl"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8032002 "initialize"
	class_operation package explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize the helper framework. This method must be called from
the static initializer of each class that is the target of one of
the methods in this class. This ensures that the helper is initialized
prior to a tunneled call from the Sun provider.
"
      end

      operation 8032130 "implSetPathToNames"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "sel" type class_ref 1028482 // X509CertSelector
	  param inout name "names" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<GeneralNameInterface> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8032258 "implSetDateAndTime"
	protected explicit_return_type "void"
	nparams 3
	  param inout name "sel" type class_ref 1028610 // X509CRLSelector
	  param inout name "date" type class_ref 521474 // Date
	  param in name "skew" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1028482 "X509CertSelector"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code CertSelector} that selects {@code X509Certificates} that
match all specified criteria. This class is particularly useful when
selecting certificates from a {@code CertStore} to build a
PKIX-compliant certification path.
<p>
When first constructed, an {@code X509CertSelector} has no criteria
enabled and each of the {@code get} methods return a default value
({@code null}, or {@code -1} for the {@link #getBasicConstraints
getBasicConstraints} method). Therefore, the {@link #match match}
method would return {@code true} for any {@code X509Certificate}.
Typically, several criteria are enabled (by calling
{@link #setIssuer setIssuer} or
{@link #setKeyUsage setKeyUsage}, for instance) and then the
{@code X509CertSelector} is passed to
{@link CertStore#getCertificates CertStore.getCertificates} or some similar
method.
<p>
Several criteria can be enabled (by calling {@link #setIssuer setIssuer}
and {@link #setSerialNumber setSerialNumber},
for example) such that the {@code match} method
usually uniquely matches a single {@code X509Certificate}. We say
usually, since it is possible for two issuing CAs to have the same
distinguished name and each issue a certificate with the same serial
number. Other unique combinations include the issuer, subject,
subjectKeyIdentifier and/or the subjectPublicKey criteria.
<p>
Please refer to <a href=\"http://www.ietf.org/rfc/rfc3280.txt\">RFC 3280:
Internet X.509 Public Key Infrastructure Certificate and CRL Profile</a> for
definitions of the X.509 certificate extensions mentioned below.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertSelector
@see X509Certificate

@since       1.4
@author      Steve Hanna
"
      classrelation 3381506 // <realization>
	relation 3381506 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3381506 // <realization>
	  b parent class_ref 1029378 // CertSelector
      end

      attribute 1868674 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value " Debug.getInstance(\"certpath\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1868802 "ANY_EXTENDED_KEY_USAGE"
	class_attribute const_attribute private explicit_type "ObjectIdentifier"
	init_value "
        ObjectIdentifier.newInternal(new int[] {2, 5, 29, 37, 0})"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      extra_member 167938 "initialization"
	
	cpp "" ""
	java "  static {
        CertPathHelperImpl.initialize();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      classrelation 3381634 // serialNumber (<unidirectional association>)
	relation 3381634 --->
	  a role_name "serialNumber" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3381634 // serialNumber (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3381762 // issuer (<unidirectional association>)
	relation 3381762 --->
	  a role_name "issuer" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3381762 // issuer (<unidirectional association>)
	  b parent class_ref 833026 // X500Principal
      end

      classrelation 3381890 // subject (<unidirectional association>)
	relation 3381890 --->
	  a role_name "subject" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3381890 // subject (<unidirectional association>)
	  b parent class_ref 833026 // X500Principal
      end

      attribute 1868930 "subjectKeyID"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1869058 "authorityKeyID"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3382018 // certificateValid (<unidirectional association>)
	relation 3382018 --->
	  a role_name "certificateValid" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3382018 // certificateValid (<unidirectional association>)
	  b parent class_ref 521474 // Date
      end

      classrelation 3382146 // privateKeyValid (<unidirectional association>)
	relation 3382146 --->
	  a role_name "privateKeyValid" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3382146 // privateKeyValid (<unidirectional association>)
	  b parent class_ref 521474 // Date
      end

      attribute 1869186 "subjectPublicKeyAlgID"
	private explicit_type "ObjectIdentifier"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3382274 // subjectPublicKey (<unidirectional association>)
	relation 3382274 --->
	  a role_name "subjectPublicKey" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3382274 // subjectPublicKey (<unidirectional association>)
	  b parent class_ref 765826 // PublicKey
      end

      attribute 1869314 "subjectPublicKeyBytes"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1869442 "keyUsage"
	private explicit_type "boolean"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3382402 // keyPurposeSet (<unidirectional association>)
	relation 3382402 --->
	  a role_name "keyPurposeSet" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3382402 // keyPurposeSet (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3382530 // keyPurposeOIDSet (<unidirectional association>)
	relation 3382530 --->
	  a role_name "keyPurposeOIDSet" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ObjectIdentifier> ${name}${value};
"
	    classrelation_ref 3382530 // keyPurposeOIDSet (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3382658 // subjectAlternativeNames (<unidirectional association>)
	relation 3382658 --->
	  a role_name "subjectAlternativeNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<List<?>> ${name}${value};
"
	    classrelation_ref 3382658 // subjectAlternativeNames (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3382786 // subjectAlternativeGeneralNames (<unidirectional association>)
	relation 3382786 --->
	  a role_name "subjectAlternativeGeneralNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<GeneralNameInterface> ${name}${value};
"
	    classrelation_ref 3382786 // subjectAlternativeGeneralNames (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      attribute 1869570 "policy"
	private explicit_type "CertificatePolicySet"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3382914 // policySet (<unidirectional association>)
	relation 3382914 --->
	  a role_name "policySet" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3382914 // policySet (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3383042 // pathToNames (<unidirectional association>)
	relation 3383042 --->
	  a role_name "pathToNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<List<?>> ${name}${value};
"
	    classrelation_ref 3383042 // pathToNames (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3383170 // pathToGeneralNames (<unidirectional association>)
	relation 3383170 --->
	  a role_name "pathToGeneralNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<GeneralNameInterface> ${name}${value};
"
	    classrelation_ref 3383170 // pathToGeneralNames (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      attribute 1869698 "nc"
	private explicit_type "NameConstraintsExtension"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1869826 "ncBytes"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1869954 "basicConstraints"
	private explicit_type "int"
	init_value " -1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3383298 // x509Cert (<unidirectional association>)
	relation 3383298 --->
	  a role_name "x509Cert" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3383298 // x509Cert (<unidirectional association>)
	  b parent class_ref 767234 // X509Certificate
      end

      attribute 1870082 "matchAllSubjectAltNames"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3383426 // FALSE (<unidirectional association>)
	relation 3383426 --->
	  a role_name "FALSE" init_value " Boolean.FALSE" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3383426 // FALSE (<unidirectional association>)
	  b parent class_ref 315010 // Boolean
      end

      attribute 1870210 "PRIVATE_KEY_USAGE_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1870338 "SUBJECT_ALT_NAME_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1870466 "NAME_CONSTRAINTS_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1870594 "CERT_POLICIES_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1870722 "EXTENDED_KEY_USAGE_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1870850 "NUM_OF_EXTENSIONS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3383554 // EXTENSION_OIDS (<unidirectional association>)
	relation 3383554 --->
	  a role_name "EXTENSION_OIDS" multiplicity "[]" init_value " new String[NUM_OF_EXTENSIONS]" class_relation const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3383554 // EXTENSION_OIDS (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      extra_member 168066 "initialization"
	
	cpp "" ""
	java "  static {
        EXTENSION_OIDS[PRIVATE_KEY_USAGE_ID]  = \"2.5.29.16\";
        EXTENSION_OIDS[SUBJECT_ALT_NAME_ID]   = \"2.5.29.17\";
        EXTENSION_OIDS[NAME_CONSTRAINTS_ID]   = \"2.5.29.30\";
        EXTENSION_OIDS[CERT_POLICIES_ID]      = \"2.5.29.32\";
        EXTENSION_OIDS[EXTENDED_KEY_USAGE_ID] = \"2.5.29.37\";
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1870978 "NAME_ANY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Constants representing the GeneralName types 
"
      end

      attribute 1871106 "NAME_RFC822"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1871234 "NAME_DNS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1871362 "NAME_X400"
	class_attribute const_attribute package explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1871490 "NAME_DIRECTORY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1871618 "NAME_EDI"
	class_attribute const_attribute package explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1871746 "NAME_URI"
	class_attribute const_attribute package explicit_type "int"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1871874 "NAME_IP"
	class_attribute const_attribute package explicit_type "int"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1872002 "NAME_OID"
	class_attribute const_attribute package explicit_type "int"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8056066 "X509CertSelector"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code X509CertSelector}. Initially, no criteria are set
so any {@code X509Certificate} will match.
"
      end

      operation 8056194 "setCertificate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the certificateEquals criterion. The specified
{@code X509Certificate} must be equal to the
{@code X509Certificate} passed to the {@code match} method.
If {@code null}, then this check is not applied.

<p>This method is particularly useful when it is necessary to
match a single certificate. Although other criteria can be specified
in conjunction with the certificateEquals criterion, it is usually not
practical or necessary.

@param cert the {@code X509Certificate} to match (or
{@code null})
@see #getCertificate
"
      end

      operation 8056322 "setSerialNumber"
	public explicit_return_type "void"
	nparams 1
	  param inout name "serial" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the serialNumber criterion. The specified serial number
must match the certificate serial number in the
{@code X509Certificate}. If {@code null}, any certificate
serial number will do.

@param serial the certificate serial number to match
       (or {@code null})
@see #getSerialNumber
"
      end

      operation 8056450 "setIssuer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "issuer" type class_ref 833026 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the issuer criterion. The specified distinguished name
must match the issuer distinguished name in the
{@code X509Certificate}. If {@code null}, any issuer
distinguished name will do.

@param issuer a distinguished name as X500Principal
                (or {@code null})
@since 1.5
"
      end

      operation 8056578 "setIssuer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "issuerDN" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use {@linkplain #setIssuer(X500Principal)}
or {@linkplain #setIssuer(byte[])} instead. This method should not be
relied on as it can fail to match some certificates because of a loss of
encoding information in the
<a href=\"http://www.ietf.org/rfc/rfc2253.txt\">RFC 2253</a> String form
of some distinguished names.
<p>
Sets the issuer criterion. The specified distinguished name
must match the issuer distinguished name in the
{@code X509Certificate}. If {@code null}, any issuer
distinguished name will do.
<p>
If {@code issuerDN} is not {@code null}, it should contain a
distinguished name, in RFC 2253 format.

@param issuerDN a distinguished name in RFC 2253 format
                (or {@code null})
@throws IOException if a parsing error occurs (incorrect form for DN)
"
      end

      operation 8056706 "setIssuer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "issuerDN" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the issuer criterion. The specified distinguished name
must match the issuer distinguished name in the
{@code X509Certificate}. If {@code null} is specified,
the issuer criterion is disabled and any issuer distinguished name will
do.
<p>
If {@code issuerDN} is not {@code null}, it should contain a
single DER encoded distinguished name, as defined in X.501. The ASN.1
notation for this structure is as follows.
<pre>{@code
Name ::= CHOICE {
  RDNSequence }

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

RelativeDistinguishedName ::=
  SET SIZE (1 .. MAX) OF AttributeTypeAndValue

AttributeTypeAndValue ::= SEQUENCE {
  type     AttributeType,
  value    AttributeValue }

AttributeType ::= OBJECT IDENTIFIER

AttributeValue ::= ANY DEFINED BY AttributeType
....
DirectoryString ::= CHOICE {
      teletexString           TeletexString (SIZE (1..MAX)),
      printableString         PrintableString (SIZE (1..MAX)),
      universalString         UniversalString (SIZE (1..MAX)),
      utf8String              UTF8String (SIZE (1.. MAX)),
      bmpString               BMPString (SIZE (1..MAX)) }
}</pre>
<p>
Note that the byte array specified here is cloned to protect against
subsequent modifications.

@param issuerDN a byte array containing the distinguished name
                in ASN.1 DER encoded form (or {@code null})
@throws IOException if an encoding error occurs (incorrect form for DN)
"
      end

      operation 8056834 "setSubject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subject" type class_ref 833026 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subject criterion. The specified distinguished name
must match the subject distinguished name in the
{@code X509Certificate}. If {@code null}, any subject
distinguished name will do.

@param subject a distinguished name as X500Principal
                 (or {@code null})
@since 1.5
"
      end

      operation 8056962 "setSubject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subjectDN" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use {@linkplain #setSubject(X500Principal)}
or {@linkplain #setSubject(byte[])} instead. This method should not be
relied on as it can fail to match some certificates because of a loss of
encoding information in the RFC 2253 String form of some distinguished
names.
<p>
Sets the subject criterion. The specified distinguished name
must match the subject distinguished name in the
{@code X509Certificate}. If {@code null}, any subject
distinguished name will do.
<p>
If {@code subjectDN} is not {@code null}, it should contain a
distinguished name, in RFC 2253 format.

@param subjectDN a distinguished name in RFC 2253 format
                 (or {@code null})
@throws IOException if a parsing error occurs (incorrect form for DN)
"
      end

      operation 8057090 "setSubject"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subjectDN" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subject criterion. The specified distinguished name
must match the subject distinguished name in the
{@code X509Certificate}. If {@code null}, any subject
distinguished name will do.
<p>
If {@code subjectDN} is not {@code null}, it should contain a
single DER encoded distinguished name, as defined in X.501. For the ASN.1
notation for this structure, see
{@link #setIssuer(byte [] issuerDN) setIssuer(byte [] issuerDN)}.

@param subjectDN a byte array containing the distinguished name in
                 ASN.1 DER format (or {@code null})
@throws IOException if an encoding error occurs (incorrect form for DN)
"
      end

      operation 8057218 "setSubjectKeyIdentifier"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subjectKeyID" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectKeyIdentifier criterion. The
{@code X509Certificate} must contain a SubjectKeyIdentifier
extension for which the contents of the extension
matches the specified criterion value.
If the criterion value is {@code null}, no
subjectKeyIdentifier check will be done.
<p>
If {@code subjectKeyID} is not {@code null}, it
should contain a single DER encoded value corresponding to the contents
of the extension value (not including the object identifier,
criticality setting, and encapsulating OCTET STRING)
for a SubjectKeyIdentifier extension.
The ASN.1 notation for this structure follows.

<pre>{@code
SubjectKeyIdentifier ::= KeyIdentifier

KeyIdentifier ::= OCTET STRING
}</pre>
<p>
Since the format of subject key identifiers is not mandated by
any standard, subject key identifiers are not parsed by the
{@code X509CertSelector}. Instead, the values are compared using
a byte-by-byte comparison.
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param subjectKeyID the subject key identifier (or {@code null})
@see #getSubjectKeyIdentifier
"
      end

      operation 8057346 "setAuthorityKeyIdentifier"
	public explicit_return_type "void"
	nparams 1
	  param inout name "authorityKeyID" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the authorityKeyIdentifier criterion. The
{@code X509Certificate} must contain an
AuthorityKeyIdentifier extension for which the contents of the
extension value matches the specified criterion value.
If the criterion value is {@code null}, no
authorityKeyIdentifier check will be done.
<p>
If {@code authorityKeyID} is not {@code null}, it
should contain a single DER encoded value corresponding to the contents
of the extension value (not including the object identifier,
criticality setting, and encapsulating OCTET STRING)
for an AuthorityKeyIdentifier extension.
The ASN.1 notation for this structure follows.

<pre>{@code
AuthorityKeyIdentifier ::= SEQUENCE {
   keyIdentifier             [0] KeyIdentifier           OPTIONAL,
   authorityCertIssuer       [1] GeneralNames            OPTIONAL,
   authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }

KeyIdentifier ::= OCTET STRING
}</pre>
<p>
Authority key identifiers are not parsed by the
{@code X509CertSelector}.  Instead, the values are
compared using a byte-by-byte comparison.
<p>
When the {@code keyIdentifier} field of
{@code AuthorityKeyIdentifier} is populated, the value is
usually taken from the {@code SubjectKeyIdentifier} extension
in the issuer's certificate.  Note, however, that the result of
{@code X509Certificate.getExtensionValue(<SubjectKeyIdentifier Object
Identifier>)} on the issuer's certificate may NOT be used
directly as the input to {@code setAuthorityKeyIdentifier}.
This is because the SubjectKeyIdentifier contains
only a KeyIdentifier OCTET STRING, and not a SEQUENCE of
KeyIdentifier, GeneralNames, and CertificateSerialNumber.
In order to use the extension value of the issuer certificate's
{@code SubjectKeyIdentifier}
extension, it will be necessary to extract the value of the embedded
{@code KeyIdentifier} OCTET STRING, then DER encode this OCTET
STRING inside a SEQUENCE.
For more details on SubjectKeyIdentifier, see
{@link #setSubjectKeyIdentifier(byte[] subjectKeyID)}.
<p>
Note also that the byte array supplied here is cloned to protect against
subsequent modifications.

@param authorityKeyID the authority key identifier
       (or {@code null})
@see #getAuthorityKeyIdentifier
"
      end

      operation 8057474 "setCertificateValid"
	public explicit_return_type "void"
	nparams 1
	  param inout name "certValid" type class_ref 521474 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the certificateValid criterion. The specified date must fall
within the certificate validity period for the
{@code X509Certificate}. If {@code null}, no certificateValid
check will be done.
<p>
Note that the {@code Date} supplied here is cloned to protect
against subsequent modifications.

@param certValid the {@code Date} to check (or {@code null})
@see #getCertificateValid
"
      end

      operation 8057602 "setPrivateKeyValid"
	public explicit_return_type "void"
	nparams 1
	  param inout name "privateKeyValid" type class_ref 521474 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the privateKeyValid criterion. The specified date must fall
within the private key validity period for the
{@code X509Certificate}. If {@code null}, no privateKeyValid
check will be done.
<p>
Note that the {@code Date} supplied here is cloned to protect
against subsequent modifications.

@param privateKeyValid the {@code Date} to check (or
                       {@code null})
@see #getPrivateKeyValid
"
      end

      operation 8057730 "setSubjectPublicKeyAlgID"
	public explicit_return_type "void"
	nparams 1
	  param inout name "oid" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectPublicKeyAlgID criterion. The
{@code X509Certificate} must contain a subject public key
with the specified algorithm. If {@code null}, no
subjectPublicKeyAlgID check will be done.

@param oid The object identifier (OID) of the algorithm to check
           for (or {@code null}). An OID is represented by a
           set of nonnegative integers separated by periods.
@throws IOException if the OID is invalid, such as
the first component being not 0, 1 or 2 or the second component
being greater than 39.

@see #getSubjectPublicKeyAlgID
"
      end

      operation 8057858 "setSubjectPublicKey"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 765826 // PublicKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectPublicKey criterion. The
{@code X509Certificate} must contain the specified subject public
key. If {@code null}, no subjectPublicKey check will be done.

@param key the subject public key to check for (or {@code null})
@see #getSubjectPublicKey
"
      end

      operation 8057986 "setSubjectPublicKey"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectPublicKey criterion. The {@code X509Certificate}
must contain the specified subject public key. If {@code null},
no subjectPublicKey check will be done.
<p>
Because this method allows the public key to be specified as a byte
array, it may be used for unknown key types.
<p>
If {@code key} is not {@code null}, it should contain a
single DER encoded SubjectPublicKeyInfo structure, as defined in X.509.
The ASN.1 notation for this structure is as follows.
<pre>{@code
SubjectPublicKeyInfo  ::=  SEQUENCE  {
  algorithm            AlgorithmIdentifier,
  subjectPublicKey     BIT STRING  }

AlgorithmIdentifier  ::=  SEQUENCE  {
  algorithm               OBJECT IDENTIFIER,
  parameters              ANY DEFINED BY algorithm OPTIONAL  }
                             -- contains a value of the type
                             -- registered for use with the
                             -- algorithm object identifier value
}</pre>
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param key a byte array containing the subject public key in ASN.1 DER
           form (or {@code null})
@throws IOException if an encoding error occurs (incorrect form for
subject public key)
@see #getSubjectPublicKey
"
      end

      operation 8058114 "setKeyUsage"
	public explicit_return_type "void"
	nparams 1
	  param inout name "keyUsage" explicit_type "boolean"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the keyUsage criterion. The {@code X509Certificate}
must allow the specified keyUsage values. If {@code null}, no
keyUsage check will be done. Note that an {@code X509Certificate}
that has no keyUsage extension implicitly allows all keyUsage values.
<p>
Note that the boolean array supplied here is cloned to protect against
subsequent modifications.

@param keyUsage a boolean array in the same format as the boolean
                array returned by
{@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}.
                Or {@code null}.
@see #getKeyUsage
"
      end

      operation 8058242 "setExtendedKeyUsage"
	public explicit_return_type "void"
	nparams 1
	  param inout name "keyPurposeSet" type class_ref 192258 // Set
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the extendedKeyUsage criterion. The {@code X509Certificate}
must allow the specified key purposes in its extended key usage
extension. If {@code keyPurposeSet} is empty or {@code null},
no extendedKeyUsage check will be done. Note that an
{@code X509Certificate} that has no extendedKeyUsage extension
implicitly allows all key purposes.
<p>
Note that the {@code Set} is cloned to protect against
subsequent modifications.

@param keyPurposeSet a {@code Set} of key purpose OIDs in string
format (or {@code null}). Each OID is represented by a set of
nonnegative integers separated by periods.
@throws IOException if the OID is invalid, such as
the first component being not 0, 1 or 2 or the second component
being greater than 39.
@see #getExtendedKeyUsage
"
      end

      operation 8058370 "setMatchAllSubjectAltNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "matchAllNames" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enables/disables matching all of the subjectAlternativeNames
specified in the {@link #setSubjectAlternativeNames
setSubjectAlternativeNames} or {@link #addSubjectAlternativeName
addSubjectAlternativeName} methods. If enabled,
the {@code X509Certificate} must contain all of the
specified subject alternative names. If disabled, the
{@code X509Certificate} must contain at least one of the
specified subject alternative names.

<p>The matchAllNames flag is {@code true} by default.

@param matchAllNames if {@code true}, the flag is enabled;
if {@code false}, the flag is disabled.
@see #getMatchAllSubjectAltNames
"
      end

      operation 8058498 "setSubjectAlternativeNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the subjectAlternativeNames criterion. The
{@code X509Certificate} must contain all or at least one of the
specified subjectAlternativeNames, depending on the value of
the matchAllNames flag (see {@link #setMatchAllSubjectAltNames
setMatchAllSubjectAltNames}).
<p>
This method allows the caller to specify, with a single method call,
the complete set of subject alternative names for the
subjectAlternativeNames criterion. The specified value replaces
the previous value for the subjectAlternativeNames criterion.
<p>
The {@code names} parameter (if not {@code null}) is a
{@code Collection} with one
entry for each name to be included in the subject alternative name
criterion. Each entry is a {@code List} whose first entry is an
{@code Integer} (the name type, 0-8) and whose second
entry is a {@code String} or a byte array (the name, in
string or ASN.1 DER encoded form, respectively).
There can be multiple names of the same type. If {@code null}
is supplied as the value for this argument, no
subjectAlternativeNames check will be performed.
<p>
Each subject alternative name in the {@code Collection}
may be specified either as a {@code String} or as an ASN.1 encoded
byte array. For more details about the formats used, see
{@link #addSubjectAlternativeName(int type, String name)
addSubjectAlternativeName(int type, String name)} and
{@link #addSubjectAlternativeName(int type, byte [] name)
addSubjectAlternativeName(int type, byte [] name)}.
<p>
<strong>Note:</strong> for distinguished names, specify the byte
array form instead of the String form. See the note in
{@link #addSubjectAlternativeName(int, String)} for more information.
<p>
Note that the {@code names} parameter can contain duplicate
names (same name and name type), but they may be removed from the
{@code Collection} of names returned by the
{@link #getSubjectAlternativeNames getSubjectAlternativeNames} method.
<p>
Note that a deep copy is performed on the {@code Collection} to
protect against subsequent modifications.

@param names a {@code Collection} of names (or {@code null})
@throws IOException if a parsing error occurs
@see #getSubjectAlternativeNames
"
      end

      operation 8058626 "addSubjectAlternativeName"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the subjectAlternativeNames criterion. The
{@code X509Certificate} must contain all or at least one
of the specified subjectAlternativeNames, depending on the value of
the matchAllNames flag (see {@link #setMatchAllSubjectAltNames
setMatchAllSubjectAltNames}).
<p>
This method allows the caller to add a name to the set of subject
alternative names.
The specified name is added to any previous value for the
subjectAlternativeNames criterion. If the specified name is a
duplicate, it may be ignored.
<p>
The name is provided in string format.
<a href=\"http://www.ietf.org/rfc/rfc822.txt\">RFC 822</a>, DNS, and URI
names use the well-established string formats for those types (subject to
the restrictions included in RFC 3280). IPv4 address names are
supplied using dotted quad notation. OID address names are represented
as a series of nonnegative integers separated by periods. And
directory names (distinguished names) are supplied in RFC 2253 format.
No standard string format is defined for otherNames, X.400 names,
EDI party names, IPv6 address names, or any other type of names. They
should be specified using the
{@link #addSubjectAlternativeName(int type, byte [] name)
addSubjectAlternativeName(int type, byte [] name)}
method.
<p>
<strong>Note:</strong> for distinguished names, use
{@linkplain #addSubjectAlternativeName(int, byte[])} instead.
This method should not be relied on as it can fail to match some
certificates because of a loss of encoding information in the RFC 2253
String form of some distinguished names.

@param type the name type (0-8, as specified in
            RFC 3280, section 4.2.1.7)
@param name the name in string form (not {@code null})
@throws IOException if a parsing error occurs
"
      end

      operation 8058754 "addSubjectAlternativeName"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the subjectAlternativeNames criterion. The
{@code X509Certificate} must contain all or at least one
of the specified subjectAlternativeNames, depending on the value of
the matchAllNames flag (see {@link #setMatchAllSubjectAltNames
setMatchAllSubjectAltNames}).
<p>
This method allows the caller to add a name to the set of subject
alternative names.
The specified name is added to any previous value for the
subjectAlternativeNames criterion. If the specified name is a
duplicate, it may be ignored.
<p>
The name is provided as a byte array. This byte array should contain
the DER encoded name, as it would appear in the GeneralName structure
defined in RFC 3280 and X.509. The encoded byte array should only contain
the encoded value of the name, and should not include the tag associated
with the name in the GeneralName structure. The ASN.1 definition of this
structure appears below.
<pre>{@code
 GeneralName ::= CHOICE {
      otherName                       [0]     OtherName,
      rfc822Name                      [1]     IA5String,
      dNSName                         [2]     IA5String,
      x400Address                     [3]     ORAddress,
      directoryName                   [4]     Name,
      ediPartyName                    [5]     EDIPartyName,
      uniformResourceIdentifier       [6]     IA5String,
      iPAddress                       [7]     OCTET STRING,
      registeredID                    [8]     OBJECT IDENTIFIER}
}</pre>
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param type the name type (0-8, as listed above)
@param name a byte array containing the name in ASN.1 DER encoded form
@throws IOException if a parsing error occurs
"
      end

      operation 8058882 "addSubjectAlternativeNameInternal"
	private explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A private method that adds a name (String or byte array) to the
subjectAlternativeNames criterion. The {@code X509Certificate}
must contain the specified subjectAlternativeName.

@param type the name type (0-8, as specified in
            RFC 3280, section 4.2.1.7)
@param name the name in string or byte array form
@throws IOException if a parsing error occurs
"
      end

      operation 8059010 "parseNames"
	class_operation private return_type class_ref 192258 // Set
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<GeneralNameInterface> ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse an argument of the form passed to setSubjectAlternativeNames,
returning a {@code Collection} of
{@code GeneralNameInterface}s.
Throw an IllegalArgumentException or a ClassCastException
if the argument is malformed.

@param names a Collection with one entry per name.
             Each entry is a {@code List} whose first entry
             is an Integer (the name type, 0-8) and whose second
             entry is a String or a byte array (the name, in
             string or ASN.1 DER encoded form, respectively).
             There can be multiple names of the same type. Null is
             not an acceptable value.
@return a Set of {@code GeneralNameInterface}s
@throws IOException if a parsing error occurs
"
      end

      operation 8059138 "equalNames"
	class_operation package explicit_return_type "boolean"
	nparams 2
	  param inout name "object1" type class_ref 184194 // Collection
	  param inout name "object2" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compare for equality two objects of the form passed to
setSubjectAlternativeNames (or X509CRLSelector.setIssuerNames).
Throw an {@code IllegalArgumentException} or a
{@code ClassCastException} if one of the objects is malformed.

@param object1 a Collection containing the first object to compare
@param object2 a Collection containing the second object to compare
@return true if the objects are equal, false otherwise
"
      end

      operation 8059266 "makeGeneralNameInterface"
	class_operation package explicit_return_type "GeneralNameInterface"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a {@code GeneralNameInterface} out of a name type (0-8) and an
Object that may be a byte array holding the ASN.1 DER encoded
name or a String form of the name.  Except for X.509
Distinguished Names, the String form of the name must not be the
result from calling toString on an existing GeneralNameInterface
implementing class.  The output of toString is not compatible
with the String constructors for names other than Distinguished
Names.

@param type name type (0-8)
@param name name as ASN.1 Der-encoded byte array or String
@return a GeneralNameInterface name
@throws IOException if a parsing error occurs
"
      end

      operation 8059394 "setNameConstraints"
	public explicit_return_type "void"
	nparams 1
	  param inout name "bytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the name constraints criterion. The {@code X509Certificate}
must have subject and subject alternative names that
meet the specified name constraints.
<p>
The name constraints are specified as a byte array. This byte array
should contain the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 3280
and X.509. The ASN.1 definition of this structure appears below.

<pre>{@code
 NameConstraints ::= SEQUENCE {
      permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
      excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }

 GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

 GeneralSubtree ::= SEQUENCE {
      base                    GeneralName,
      minimum         [0]     BaseDistance DEFAULT 0,
      maximum         [1]     BaseDistance OPTIONAL }

 BaseDistance ::= INTEGER (0..MAX)

 GeneralName ::= CHOICE {
      otherName                       [0]     OtherName,
      rfc822Name                      [1]     IA5String,
      dNSName                         [2]     IA5String,
      x400Address                     [3]     ORAddress,
      directoryName                   [4]     Name,
      ediPartyName                    [5]     EDIPartyName,
      uniformResourceIdentifier       [6]     IA5String,
      iPAddress                       [7]     OCTET STRING,
      registeredID                    [8]     OBJECT IDENTIFIER}
}</pre>
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param bytes a byte array containing the ASN.1 DER encoding of
             a NameConstraints extension to be used for checking
             name constraints. Only the value of the extension is
             included, not the OID or criticality flag. Can be
             {@code null},
             in which case no name constraints check will be performed.
@throws IOException if a parsing error occurs
@see #getNameConstraints
"
      end

      operation 8059522 "setBasicConstraints"
	public explicit_return_type "void"
	nparams 1
	  param in name "minMaxPathLen" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the basic constraints constraint. If the value is greater than or
equal to zero, {@code X509Certificates} must include a
basicConstraints extension with
a pathLen of at least this value. If the value is -2, only end-entity
certificates are accepted. If the value is -1, no check is done.
<p>
This constraint is useful when building a certification path forward
(from the target toward the trust anchor. If a partial path has been
built, any candidate certificate must have a maxPathLen value greater
than or equal to the number of certificates in the partial path.

@param minMaxPathLen the value for the basic constraints constraint
@throws IllegalArgumentException if the value is less than -2
@see #getBasicConstraints
"
      end

      operation 8059650 "setPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "certPolicySet" type class_ref 192258 // Set
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy constraint. The {@code X509Certificate} must
include at least one of the specified policies in its certificate
policies extension. If {@code certPolicySet} is empty, then the
{@code X509Certificate} must include at least some specified policy
in its certificate policies extension. If {@code certPolicySet} is
{@code null}, no policy check will be performed.
<p>
Note that the {@code Set} is cloned to protect against
subsequent modifications.

@param certPolicySet a {@code Set} of certificate policy OIDs in
                     string format (or {@code null}). Each OID is
                     represented by a set of nonnegative integers
                   separated by periods.
@throws IOException if a parsing error occurs on the OID such as
the first component is not 0, 1 or 2 or the second component is
greater than 39.
@see #getPolicy
"
      end

      operation 8059778 "setPathToNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the pathToNames criterion. The {@code X509Certificate} must
not include name constraints that would prohibit building a
path to the specified names.
<p>
This method allows the caller to specify, with a single method call,
the complete set of names which the {@code X509Certificates}'s
name constraints must permit. The specified value replaces
the previous value for the pathToNames criterion.
<p>
This constraint is useful when building a certification path forward
(from the target toward the trust anchor. If a partial path has been
built, any candidate certificate must not include name constraints that
would prohibit building a path to any of the names in the partial path.
<p>
The {@code names} parameter (if not {@code null}) is a
{@code Collection} with one
entry for each name to be included in the pathToNames
criterion. Each entry is a {@code List} whose first entry is an
{@code Integer} (the name type, 0-8) and whose second
entry is a {@code String} or a byte array (the name, in
string or ASN.1 DER encoded form, respectively).
There can be multiple names of the same type. If {@code null}
is supplied as the value for this argument, no
pathToNames check will be performed.
<p>
Each name in the {@code Collection}
may be specified either as a {@code String} or as an ASN.1 encoded
byte array. For more details about the formats used, see
{@link #addPathToName(int type, String name)
addPathToName(int type, String name)} and
{@link #addPathToName(int type, byte [] name)
addPathToName(int type, byte [] name)}.
<p>
<strong>Note:</strong> for distinguished names, specify the byte
array form instead of the String form. See the note in
{@link #addPathToName(int, String)} for more information.
<p>
Note that the {@code names} parameter can contain duplicate
names (same name and name type), but they may be removed from the
{@code Collection} of names returned by the
{@link #getPathToNames getPathToNames} method.
<p>
Note that a deep copy is performed on the {@code Collection} to
protect against subsequent modifications.

@param names a {@code Collection} with one entry per name
             (or {@code null})
@throws IOException if a parsing error occurs
@see #getPathToNames
"
      end

      operation 8059906 "setPathToNamesInternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "names" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<GeneralNameInterface> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " called from CertPathHelper"
      end

      operation 8060034 "addPathToName"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the pathToNames criterion. The {@code X509Certificate}
must not include name constraints that would prohibit building a
path to the specified name.
<p>
This method allows the caller to add a name to the set of names which
the {@code X509Certificates}'s name constraints must permit.
The specified name is added to any previous value for the
pathToNames criterion.  If the name is a duplicate, it may be ignored.
<p>
The name is provided in string format. RFC 822, DNS, and URI names
use the well-established string formats for those types (subject to
the restrictions included in RFC 3280). IPv4 address names are
supplied using dotted quad notation. OID address names are represented
as a series of nonnegative integers separated by periods. And
directory names (distinguished names) are supplied in RFC 2253 format.
No standard string format is defined for otherNames, X.400 names,
EDI party names, IPv6 address names, or any other type of names. They
should be specified using the
{@link #addPathToName(int type, byte [] name)
addPathToName(int type, byte [] name)} method.
<p>
<strong>Note:</strong> for distinguished names, use
{@linkplain #addPathToName(int, byte[])} instead.
This method should not be relied on as it can fail to match some
certificates because of a loss of encoding information in the RFC 2253
String form of some distinguished names.

@param type the name type (0-8, as specified in
            RFC 3280, section 4.2.1.7)
@param name the name in string form
@throws IOException if a parsing error occurs
"
      end

      operation 8060162 "addPathToName"
	public explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the pathToNames criterion. The {@code X509Certificate}
must not include name constraints that would prohibit building a
path to the specified name.
<p>
This method allows the caller to add a name to the set of names which
the {@code X509Certificates}'s name constraints must permit.
The specified name is added to any previous value for the
pathToNames criterion. If the name is a duplicate, it may be ignored.
<p>
The name is provided as a byte array. This byte array should contain
the DER encoded name, as it would appear in the GeneralName structure
defined in RFC 3280 and X.509. The ASN.1 definition of this structure
appears in the documentation for
{@link #addSubjectAlternativeName(int type, byte [] name)
addSubjectAlternativeName(int type, byte [] name)}.
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param type the name type (0-8, as specified in
            RFC 3280, section 4.2.1.7)
@param name a byte array containing the name in ASN.1 DER encoded form
@throws IOException if a parsing error occurs
"
      end

      operation 8060290 "addPathToNameInternal"
	private explicit_return_type "void"
	nparams 2
	  param in name "type" explicit_type "int"
	  param inout name "name" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A private method that adds a name (String or byte array) to the
pathToNames criterion. The {@code X509Certificate} must contain
the specified pathToName.

@param type the name type (0-8, as specified in
            RFC 3280, section 4.2.1.7)
@param name the name in string or byte array form
@throws IOException if an encoding error occurs (incorrect form for DN)
"
      end

      operation 8060418 "getCertificate"
	public return_type class_ref 767234 // X509Certificate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificateEquals criterion. The specified
{@code X509Certificate} must be equal to the
{@code X509Certificate} passed to the {@code match} method.
If {@code null}, this check is not applied.

@return the {@code X509Certificate} to match (or {@code null})
@see #setCertificate
"
      end

      operation 8060546 "getSerialNumber"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the serialNumber criterion. The specified serial number
must match the certificate serial number in the
{@code X509Certificate}. If {@code null}, any certificate
serial number will do.

@return the certificate serial number to match
               (or {@code null})
@see #setSerialNumber
"
      end

      operation 8060674 "getIssuer"
	public return_type class_ref 833026 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuer criterion as an {@code X500Principal}. This
distinguished name must match the issuer distinguished name in the
{@code X509Certificate}. If {@code null}, the issuer criterion
is disabled and any issuer distinguished name will do.

@return the required issuer distinguished name as X500Principal
        (or {@code null})
@since 1.5
"
      end

      operation 8060802 "getIssuerAsString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use {@linkplain #getIssuer()} or
{@linkplain #getIssuerAsBytes()} instead. This method should not be
relied on as it can fail to match some certificates because of a loss of
encoding information in the RFC 2253 String form of some distinguished
names.
<p>
Returns the issuer criterion as a {@code String}. This
distinguished name must match the issuer distinguished name in the
{@code X509Certificate}. If {@code null}, the issuer criterion
is disabled and any issuer distinguished name will do.
<p>
If the value returned is not {@code null}, it is a
distinguished name, in RFC 2253 format.

@return the required issuer distinguished name in RFC 2253 format
        (or {@code null})
"
      end

      operation 8060930 "getIssuerAsBytes"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuer criterion as a byte array. This distinguished name
must match the issuer distinguished name in the
{@code X509Certificate}. If {@code null}, the issuer criterion
is disabled and any issuer distinguished name will do.
<p>
If the value returned is not {@code null}, it is a byte
array containing a single DER encoded distinguished name, as defined in
X.501. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #setIssuer(byte [] issuerDN) setIssuer(byte [] issuerDN)}.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the required issuer distinguished name
        in ASN.1 DER format (or {@code null})
@throws IOException if an encoding error occurs
"
      end

      operation 8061058 "getSubject"
	public return_type class_ref 833026 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subject criterion as an {@code X500Principal}. This
distinguished name must match the subject distinguished name in the
{@code X509Certificate}. If {@code null}, the subject criterion
is disabled and any subject distinguished name will do.

@return the required subject distinguished name as X500Principal
        (or {@code null})
@since 1.5
"
      end

      operation 8061186 "getSubjectAsString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use {@linkplain #getSubject()} or
{@linkplain #getSubjectAsBytes()} instead. This method should not be
relied on as it can fail to match some certificates because of a loss of
encoding information in the RFC 2253 String form of some distinguished
names.
<p>
Returns the subject criterion as a {@code String}. This
distinguished name must match the subject distinguished name in the
{@code X509Certificate}. If {@code null}, the subject criterion
is disabled and any subject distinguished name will do.
<p>
If the value returned is not {@code null}, it is a
distinguished name, in RFC 2253 format.

@return the required subject distinguished name in RFC 2253 format
        (or {@code null})
"
      end

      operation 8061314 "getSubjectAsBytes"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subject criterion as a byte array. This distinguished name
must match the subject distinguished name in the
{@code X509Certificate}. If {@code null}, the subject criterion
is disabled and any subject distinguished name will do.
<p>
If the value returned is not {@code null}, it is a byte
array containing a single DER encoded distinguished name, as defined in
X.501. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #setSubject(byte [] subjectDN) setSubject(byte [] subjectDN)}.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the required subject distinguished name
        in ASN.1 DER format (or {@code null})
@throws IOException if an encoding error occurs
"
      end

      operation 8061442 "getSubjectKeyIdentifier"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subjectKeyIdentifier criterion. The
{@code X509Certificate} must contain a SubjectKeyIdentifier
extension with the specified value. If {@code null}, no
subjectKeyIdentifier check will be done.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return the key identifier (or {@code null})
@see #setSubjectKeyIdentifier
"
      end

      operation 8061570 "getAuthorityKeyIdentifier"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the authorityKeyIdentifier criterion. The
{@code X509Certificate} must contain a AuthorityKeyIdentifier
extension with the specified value. If {@code null}, no
authorityKeyIdentifier check will be done.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return the key identifier (or {@code null})
@see #setAuthorityKeyIdentifier
"
      end

      operation 8061698 "getCertificateValid"
	public return_type class_ref 521474 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificateValid criterion. The specified date must fall
within the certificate validity period for the
{@code X509Certificate}. If {@code null}, no certificateValid
check will be done.
<p>
Note that the {@code Date} returned is cloned to protect against
subsequent modifications.

@return the {@code Date} to check (or {@code null})
@see #setCertificateValid
"
      end

      operation 8061826 "getPrivateKeyValid"
	public return_type class_ref 521474 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the privateKeyValid criterion. The specified date must fall
within the private key validity period for the
{@code X509Certificate}. If {@code null}, no privateKeyValid
check will be done.
<p>
Note that the {@code Date} returned is cloned to protect against
subsequent modifications.

@return the {@code Date} to check (or {@code null})
@see #setPrivateKeyValid
"
      end

      operation 8061954 "getSubjectPublicKeyAlgID"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subjectPublicKeyAlgID criterion. The
{@code X509Certificate} must contain a subject public key
with the specified algorithm. If {@code null}, no
subjectPublicKeyAlgID check will be done.

@return the object identifier (OID) of the signature algorithm to check
        for (or {@code null}). An OID is represented by a set of
        nonnegative integers separated by periods.
@see #setSubjectPublicKeyAlgID
"
      end

      operation 8062082 "getSubjectPublicKey"
	public return_type class_ref 765826 // PublicKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the subjectPublicKey criterion. The
{@code X509Certificate} must contain the specified subject
public key. If {@code null}, no subjectPublicKey check will be done.

@return the subject public key to check for (or {@code null})
@see #setSubjectPublicKey
"
      end

      operation 8062210 "getKeyUsage"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the keyUsage criterion. The {@code X509Certificate}
must allow the specified keyUsage values. If null, no keyUsage
check will be done.
<p>
Note that the boolean array returned is cloned to protect against
subsequent modifications.

@return a boolean array in the same format as the boolean
                array returned by
{@link X509Certificate#getKeyUsage() X509Certificate.getKeyUsage()}.
                Or {@code null}.
@see #setKeyUsage
"
      end

      operation 8062338 "getExtendedKeyUsage"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the extendedKeyUsage criterion. The {@code X509Certificate}
must allow the specified key purposes in its extended key usage
extension. If the {@code keyPurposeSet} returned is empty or
{@code null}, no extendedKeyUsage check will be done. Note that an
{@code X509Certificate} that has no extendedKeyUsage extension
implicitly allows all key purposes.

@return an immutable {@code Set} of key purpose OIDs in string
format (or {@code null})
@see #setExtendedKeyUsage
"
      end

      operation 8062466 "getMatchAllSubjectAltNames"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if the {@code X509Certificate} must contain all
or at least one of the subjectAlternativeNames
specified in the {@link #setSubjectAlternativeNames
setSubjectAlternativeNames} or {@link #addSubjectAlternativeName
addSubjectAlternativeName} methods. If {@code true},
the {@code X509Certificate} must contain all of the
specified subject alternative names. If {@code false}, the
{@code X509Certificate} must contain at least one of the
specified subject alternative names.

@return {@code true} if the flag is enabled;
{@code false} if the flag is disabled. The flag is
{@code true} by default.
@see #setMatchAllSubjectAltNames
"
      end

      operation 8062594 "getSubjectAlternativeNames"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the subjectAlternativeNames criterion.
The {@code X509Certificate} must contain all or at least one
of the specified subjectAlternativeNames, depending on the value
of the matchAllNames flag (see {@link #getMatchAllSubjectAltNames
getMatchAllSubjectAltNames}). If the value returned is
{@code null}, no subjectAlternativeNames check will be performed.
<p>
If the value returned is not {@code null}, it is a
{@code Collection} with
one entry for each name to be included in the subject alternative name
criterion. Each entry is a {@code List} whose first entry is an
{@code Integer} (the name type, 0-8) and whose second
entry is a {@code String} or a byte array (the name, in
string or ASN.1 DER encoded form, respectively).
There can be multiple names of the same type.  Note that the
{@code Collection} returned may contain duplicate names (same name
and name type).
<p>
Each subject alternative name in the {@code Collection}
may be specified either as a {@code String} or as an ASN.1 encoded
byte array. For more details about the formats used, see
{@link #addSubjectAlternativeName(int type, String name)
addSubjectAlternativeName(int type, String name)} and
{@link #addSubjectAlternativeName(int type, byte [] name)
addSubjectAlternativeName(int type, byte [] name)}.
<p>
Note that a deep copy is performed on the {@code Collection} to
protect against subsequent modifications.

@return a {@code Collection} of names (or {@code null})
@see #setSubjectAlternativeNames
"
      end

      operation 8062722 "cloneNames"
	class_operation private return_type class_ref 192258 // Set
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone an object of the form passed to
setSubjectAlternativeNames and setPathToNames.
Throw a {@code RuntimeException} if the argument is malformed.
<p>
This method wraps cloneAndCheckNames, changing any
{@code IOException} into a {@code RuntimeException}. This
method should be used when the object being
cloned has already been checked, so there should never be any exceptions.

@param names a {@code Collection} with one entry per name.
             Each entry is a {@code List} whose first entry
             is an Integer (the name type, 0-8) and whose second
             entry is a String or a byte array (the name, in
             string or ASN.1 DER encoded form, respectively).
             There can be multiple names of the same type. Null
             is not an acceptable value.
@return a deep copy of the specified {@code Collection}
@throws RuntimeException if a parsing error occurs
"
      end

      operation 8062850 "cloneAndCheckNames"
	class_operation private return_type class_ref 192258 // Set
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${t0}<List<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone and check an argument of the form passed to
setSubjectAlternativeNames and setPathToNames.
Throw an {@code IOException} if the argument is malformed.

@param names a {@code Collection} with one entry per name.
             Each entry is a {@code List} whose first entry
             is an Integer (the name type, 0-8) and whose second
             entry is a String or a byte array (the name, in
             string or ASN.1 DER encoded form, respectively).
             There can be multiple names of the same type.
             {@code null} is not an acceptable value.
@return a deep copy of the specified {@code Collection}
@throws IOException if a parsing error occurs
"
      end

      operation 8062978 "getNameConstraints"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name constraints criterion. The {@code X509Certificate}
must have subject and subject alternative names that
meet the specified name constraints.
<p>
The name constraints are returned as a byte array. This byte array
contains the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 3280
and X.509. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #setNameConstraints(byte [] bytes) setNameConstraints(byte [] bytes)}.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the ASN.1 DER encoding of
        a NameConstraints extension used for checking name constraints.
        {@code null} if no name constraints check will be performed.
@see #setNameConstraints
"
      end

      operation 8063106 "getBasicConstraints"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the basic constraints constraint. If the value is greater than
or equal to zero, the {@code X509Certificates} must include a
basicConstraints extension with a pathLen of at least this value.
If the value is -2, only end-entity certificates are accepted. If
the value is -1, no basicConstraints check is done.

@return the value for the basic constraints constraint
@see #setBasicConstraints
"
      end

      operation 8063234 "getPolicy"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the policy criterion. The {@code X509Certificate} must
include at least one of the specified policies in its certificate policies
extension. If the {@code Set} returned is empty, then the
{@code X509Certificate} must include at least some specified policy
in its certificate policies extension. If the {@code Set} returned is
{@code null}, no policy check will be performed.

@return an immutable {@code Set} of certificate policy OIDs in
        string format (or {@code null})
@see #setPolicy
"
      end

      operation 8063362 "getPathToNames"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<List<?>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the pathToNames criterion. The
{@code X509Certificate} must not include name constraints that would
prohibit building a path to the specified names. If the value
returned is {@code null}, no pathToNames check will be performed.
<p>
If the value returned is not {@code null}, it is a
{@code Collection} with one
entry for each name to be included in the pathToNames
criterion. Each entry is a {@code List} whose first entry is an
{@code Integer} (the name type, 0-8) and whose second
entry is a {@code String} or a byte array (the name, in
string or ASN.1 DER encoded form, respectively).
There can be multiple names of the same type. Note that the
{@code Collection} returned may contain duplicate names (same
name and name type).
<p>
Each name in the {@code Collection}
may be specified either as a {@code String} or as an ASN.1 encoded
byte array. For more details about the formats used, see
{@link #addPathToName(int type, String name)
addPathToName(int type, String name)} and
{@link #addPathToName(int type, byte [] name)
addPathToName(int type, byte [] name)}.
<p>
Note that a deep copy is performed on the {@code Collection} to
protect against subsequent modifications.

@return a {@code Collection} of names (or {@code null})
@see #setPathToNames
"
      end

      operation 8063490 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a printable representation of the {@code CertSelector}.

@return a {@code String} describing the contents of the
        {@code CertSelector}
"
      end

      operation 8063618 "keyUsageToString"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param inout name "k" explicit_type "boolean"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Copied from sun.security.x509.KeyUsageExtension
 (without calling the superclass)

Returns a printable representation of the KeyUsage.
"
      end

      operation 8063746 "getExtensionObject"
	class_operation private return_type class_ref 1030274 // Extension
	nparams 2
	  param inout name "cert" type class_ref 767234 // X509Certificate
	  param in name "extId" explicit_type "int"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an Extension object given any X509Certificate and extension oid.
Throw an {@code IOException} if the extension byte value is
malformed.

@param cert a {@code X509Certificate}
@param extId an {@code integer} which specifies the extension index.
Currently, the supported extensions are as follows:
index 0 - PrivateKeyUsageExtension
index 1 - SubjectAlternativeNameExtension
index 2 - NameConstraintsExtension
index 3 - CertificatePoliciesExtension
index 4 - ExtendedKeyUsageExtension
@return an {@code Extension} object whose real type is as specified
by the extension oid.
@throws IOException if cannot construct the {@code Extension}
object with the extension encoding retrieved from the passed in
{@code X509Certificate}.
"
      end

      operation 8063874 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cert" type class_ref 319490 // Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides whether a {@code Certificate} should be selected.

@param cert the {@code Certificate} to be checked
@return {@code true} if the {@code Certificate} should be
        selected, {@code false} otherwise
"
      end

      operation 8064002 "matchSubjectKeyID"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on subject key identifier extension value "
      end

      operation 8064130 "matchAuthorityKeyID"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on authority key identifier extension value "
      end

      operation 8064258 "matchPrivateKeyValid"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on private key usage range "
      end

      operation 8064386 "matchSubjectPublicKeyAlgID"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on subject public key algorithm OID "
      end

      operation 8064514 "matchKeyUsage"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on key usage extension value "
      end

      operation 8064642 "matchExtendedKeyUsage"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on extended key usage purpose OIDs "
      end

      operation 8064770 "matchSubjectAlternativeNames"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on subject alternative name extension names "
      end

      operation 8064898 "matchNameConstraints"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on name constraints "
      end

      operation 8065026 "matchPolicy"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on policy OIDs "
      end

      operation 8065154 "matchPathToNames"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on pathToNames "
      end

      operation 8065282 "matchExcluded"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "excluded" explicit_type "GeneralSubtrees"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8065410 "matchPermitted"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "permitted" explicit_type "GeneralSubtrees"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8065538 "matchBasicConstraints"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "xcert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " match on basic constraints "
      end

      operation 8065666 "cloneSet"
	class_operation private return_type class_ref 192258 // Set
	nparams 1
	  param inout name "set" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 8065794 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object.

@return the copy
"
      end
    end

    class 1028610 "X509CRLSelector"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code CRLSelector} that selects {@code X509CRLs} that
match all specified criteria. This class is particularly useful when
selecting CRLs from a {@code CertStore} to check revocation status
of a particular certificate.
<p>
When first constructed, an {@code X509CRLSelector} has no criteria
enabled and each of the {@code get} methods return a default
value ({@code null}). Therefore, the {@link #match match} method
would return {@code true} for any {@code X509CRL}. Typically,
several criteria are enabled (by calling {@link #setIssuers setIssuers}
or {@link #setDateAndTime setDateAndTime}, for instance) and then the
{@code X509CRLSelector} is passed to
{@link CertStore#getCRLs CertStore.getCRLs} or some similar
method.
<p>
Please refer to <a href=\"http://www.ietf.org/rfc/rfc3280.txt\">RFC 3280:
Internet X.509 Public Key Infrastructure Certificate and CRL Profile</a>
for definitions of the X.509 CRL fields and extensions mentioned below.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CRLSelector
@see X509CRL

@since       1.4
@author      Steve Hanna
"
      classrelation 3384194 // <realization>
	relation 3384194 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3384194 // <realization>
	  b parent class_ref 1030018 // CRLSelector
      end

      extra_member 168194 "initialization"
	
	cpp "" ""
	java "  static {
        CertPathHelperImpl.initialize();
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1872130 "debug"
	class_attribute const_attribute private explicit_type "Debug"
	init_value " Debug.getInstance(\"certpath\")"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3384322 // issuerNames (<unidirectional association>)
	relation 3384322 --->
	  a role_name "issuerNames" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 3384322 // issuerNames (<unidirectional association>)
	  b parent class_ref 388482 // HashSet
      end

      classrelation 3384450 // issuerX500Principals (<unidirectional association>)
	relation 3384450 --->
	  a role_name "issuerX500Principals" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<X500Principal> ${name}${value};
"
	    classrelation_ref 3384450 // issuerX500Principals (<unidirectional association>)
	  b parent class_ref 388482 // HashSet
      end

      classrelation 3384578 // minCRL (<unidirectional association>)
	relation 3384578 --->
	  a role_name "minCRL" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3384578 // minCRL (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3384706 // maxCRL (<unidirectional association>)
	relation 3384706 --->
	  a role_name "maxCRL" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3384706 // maxCRL (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3384834 // dateAndTime (<unidirectional association>)
	relation 3384834 --->
	  a role_name "dateAndTime" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3384834 // dateAndTime (<unidirectional association>)
	  b parent class_ref 521474 // Date
      end

      classrelation 3384962 // certChecking (<unidirectional association>)
	relation 3384962 --->
	  a role_name "certChecking" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3384962 // certChecking (<unidirectional association>)
	  b parent class_ref 767234 // X509Certificate
      end

      attribute 1872258 "skew"
	private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8069634 "X509CRLSelector"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code X509CRLSelector}. Initially, no criteria are set
so any {@code X509CRL} will match.
"
      end

      operation 8069762 "setIssuers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "issuers" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<X500Principal> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the issuerNames criterion. The issuer distinguished name in the
{@code X509CRL} must match at least one of the specified
distinguished names. If {@code null}, any issuer distinguished name
will do.
<p>
This method allows the caller to specify, with a single method call,
the complete set of issuer names which {@code X509CRLs} may contain.
The specified value replaces the previous value for the issuerNames
criterion.
<p>
The {@code names} parameter (if not {@code null}) is a
{@code Collection} of {@code X500Principal}s.
<p>
Note that the {@code names} parameter can contain duplicate
distinguished names, but they may be removed from the
{@code Collection} of names returned by the
{@link #getIssuers getIssuers} method.
<p>
Note that a copy is performed on the {@code Collection} to
protect against subsequent modifications.

@param issuers a {@code Collection} of X500Principals
  (or {@code null})
@see #getIssuers
@since 1.5
"
      end

      operation 8069890 "setIssuerNames"
	public explicit_return_type "void"
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Note:</strong> use {@linkplain #setIssuers(Collection)} instead
or only specify the byte array form of distinguished names when using
this method. See {@link #addIssuerName(String)} for more information.
<p>
Sets the issuerNames criterion. The issuer distinguished name in the
{@code X509CRL} must match at least one of the specified
distinguished names. If {@code null}, any issuer distinguished name
will do.
<p>
This method allows the caller to specify, with a single method call,
the complete set of issuer names which {@code X509CRLs} may contain.
The specified value replaces the previous value for the issuerNames
criterion.
<p>
The {@code names} parameter (if not {@code null}) is a
{@code Collection} of names. Each name is a {@code String}
or a byte array representing a distinguished name (in
<a href=\"http://www.ietf.org/rfc/rfc2253.txt\">RFC 2253</a> or
ASN.1 DER encoded form, respectively). If {@code null} is supplied
as the value for this argument, no issuerNames check will be performed.
<p>
Note that the {@code names} parameter can contain duplicate
distinguished names, but they may be removed from the
{@code Collection} of names returned by the
{@link #getIssuerNames getIssuerNames} method.
<p>
If a name is specified as a byte array, it should contain a single DER
encoded distinguished name, as defined in X.501. The ASN.1 notation for
this structure is as follows.
<pre>{@code
Name ::= CHOICE {
  RDNSequence }

RDNSequence ::= SEQUENCE OF RelativeDistinguishedName

RelativeDistinguishedName ::=
  SET SIZE (1 .. MAX) OF AttributeTypeAndValue

AttributeTypeAndValue ::= SEQUENCE {
  type     AttributeType,
  value    AttributeValue }

AttributeType ::= OBJECT IDENTIFIER

AttributeValue ::= ANY DEFINED BY AttributeType
....
DirectoryString ::= CHOICE {
      teletexString           TeletexString (SIZE (1..MAX)),
      printableString         PrintableString (SIZE (1..MAX)),
      universalString         UniversalString (SIZE (1..MAX)),
      utf8String              UTF8String (SIZE (1.. MAX)),
      bmpString               BMPString (SIZE (1..MAX)) }
}</pre>
<p>
Note that a deep copy is performed on the {@code Collection} to
protect against subsequent modifications.

@param names a {@code Collection} of names (or {@code null})
@throws IOException if a parsing error occurs
@see #getIssuerNames
"
      end

      operation 8070018 "addIssuer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "issuer" type class_ref 833026 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the issuerNames criterion. The issuer distinguished
name in the {@code X509CRL} must match at least one of the specified
distinguished names.
<p>
This method allows the caller to add a name to the set of issuer names
which {@code X509CRLs} may contain. The specified name is added to
any previous value for the issuerNames criterion.
If the specified name is a duplicate, it may be ignored.

@param issuer the issuer as X500Principal
@since 1.5
"
      end

      operation 8070146 "addIssuerName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, use
{@linkplain #addIssuer(X500Principal)} or
{@linkplain #addIssuerName(byte[])} instead. This method should not be
relied on as it can fail to match some CRLs because of a loss of
encoding information in the RFC 2253 String form of some distinguished
names.
<p>
Adds a name to the issuerNames criterion. The issuer distinguished
name in the {@code X509CRL} must match at least one of the specified
distinguished names.
<p>
This method allows the caller to add a name to the set of issuer names
which {@code X509CRLs} may contain. The specified name is added to
any previous value for the issuerNames criterion.
If the specified name is a duplicate, it may be ignored.

@param name the name in RFC 2253 form
@throws IOException if a parsing error occurs
"
      end

      operation 8070274 "addIssuerName"
	public explicit_return_type "void"
	nparams 1
	  param inout name "name" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a name to the issuerNames criterion. The issuer distinguished
name in the {@code X509CRL} must match at least one of the specified
distinguished names.
<p>
This method allows the caller to add a name to the set of issuer names
which {@code X509CRLs} may contain. The specified name is added to
any previous value for the issuerNames criterion. If the specified name
is a duplicate, it may be ignored.
If a name is specified as a byte array, it should contain a single DER
encoded distinguished name, as defined in X.501. The ASN.1 notation for
this structure is as follows.
<p>
The name is provided as a byte array. This byte array should contain
a single DER encoded distinguished name, as defined in X.501. The ASN.1
notation for this structure appears in the documentation for
{@link #setIssuerNames setIssuerNames(Collection names)}.
<p>
Note that the byte array supplied here is cloned to protect against
subsequent modifications.

@param name a byte array containing the name in ASN.1 DER encoded form
@throws IOException if a parsing error occurs
"
      end

      operation 8070402 "addIssuerNameInternal"
	private explicit_return_type "void"
	nparams 2
	  param inout name "name" type class_ref 129538 // Object
	  param inout name "principal" type class_ref 833026 // X500Principal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A private method that adds a name (String or byte array) to the
issuerNames criterion. The issuer distinguished
name in the {@code X509CRL} must match at least one of the specified
distinguished names.

@param name the name in string or byte array form
@param principal the name in X500Principal form
@throws IOException if a parsing error occurs
"
      end

      operation 8070530 "cloneAndCheckIssuerNames"
	class_operation private return_type class_ref 388482 // HashSet
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone and check an argument of the form passed to
setIssuerNames. Throw an IOException if the argument is malformed.

@param names a {@code Collection} of names. Each entry is a
             String or a byte array (the name, in string or ASN.1
             DER encoded form, respectively). {@code null} is
             not an acceptable value.
@return a deep copy of the specified {@code Collection}
@throws IOException if a parsing error occurs
"
      end

      operation 8070658 "cloneIssuerNames"
	class_operation private return_type class_ref 388482 // HashSet
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0}<Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clone an argument of the form passed to setIssuerNames.
Throw a RuntimeException if the argument is malformed.
<p>
This method wraps cloneAndCheckIssuerNames, changing any IOException
into a RuntimeException. This method should be used when the object being
cloned has already been checked, so there should never be any exceptions.

@param names a {@code Collection} of names. Each entry is a
             String or a byte array (the name, in string or ASN.1
             DER encoded form, respectively). {@code null} is
             not an acceptable value.
@return a deep copy of the specified {@code Collection}
@throws RuntimeException if a parsing error occurs
"
      end

      operation 8070786 "parseIssuerNames"
	class_operation private return_type class_ref 388482 // HashSet
	nparams 1
	  param inout name "names" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<X500Principal> ${name}${(}${t0}<Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse an argument of the form passed to setIssuerNames,
returning a Collection of issuerX500Principals.
Throw an IOException if the argument is malformed.

@param names a {@code Collection} of names. Each entry is a
             String or a byte array (the name, in string or ASN.1
             DER encoded form, respectively). <Code>Null</Code> is
             not an acceptable value.
@return a HashSet of issuerX500Principals
@throws IOException if a parsing error occurs
"
      end

      operation 8070914 "setMinCRLNumber"
	public explicit_return_type "void"
	nparams 1
	  param inout name "minCRL" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the minCRLNumber criterion. The {@code X509CRL} must have a
CRL number extension whose value is greater than or equal to the
specified value. If {@code null}, no minCRLNumber check will be
done.

@param minCRL the minimum CRL number accepted (or {@code null})
"
      end

      operation 8071042 "setMaxCRLNumber"
	public explicit_return_type "void"
	nparams 1
	  param inout name "maxCRL" type class_ref 686338 // BigInteger
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maxCRLNumber criterion. The {@code X509CRL} must have a
CRL number extension whose value is less than or equal to the
specified value. If {@code null}, no maxCRLNumber check will be
done.

@param maxCRL the maximum CRL number accepted (or {@code null})
"
      end

      operation 8071170 "setDateAndTime"
	public explicit_return_type "void"
	nparams 1
	  param inout name "dateAndTime" type class_ref 521474 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the dateAndTime criterion. The specified date must be
equal to or later than the value of the thisUpdate component
of the {@code X509CRL} and earlier than the value of the
nextUpdate component. There is no match if the {@code X509CRL}
does not contain a nextUpdate component.
If {@code null}, no dateAndTime check will be done.
<p>
Note that the {@code Date} supplied here is cloned to protect
against subsequent modifications.

@param dateAndTime the {@code Date} to match against
                   (or {@code null})
@see #getDateAndTime
"
      end

      operation 8071298 "setDateAndTime"
	package explicit_return_type "void"
	nparams 2
	  param inout name "dateAndTime" type class_ref 521474 // Date
	  param in name "skew" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the dateAndTime criterion and allows for the specified clock skew
(in milliseconds) when checking against the validity period of the CRL.
"
      end

      operation 8071426 "setCertificateChecking"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the certificate being checked. This is not a criterion. Rather,
it is optional information that may help a {@code CertStore}
find CRLs that would be relevant when checking revocation for the
specified certificate. If {@code null} is specified, then no
such optional information is provided.

@param cert the {@code X509Certificate} being checked
            (or {@code null})
@see #getCertificateChecking
"
      end

      operation 8071554 "getIssuers"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<X500Principal> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuerNames criterion. The issuer distinguished
name in the {@code X509CRL} must match at least one of the specified
distinguished names. If the value returned is {@code null}, any
issuer distinguished name will do.
<p>
If the value returned is not {@code null}, it is a
unmodifiable {@code Collection} of {@code X500Principal}s.

@return an unmodifiable {@code Collection} of names
  (or {@code null})
@see #setIssuers
@since 1.5
"
      end

      operation 8071682 "getIssuerNames"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of the issuerNames criterion. The issuer distinguished
name in the {@code X509CRL} must match at least one of the specified
distinguished names. If the value returned is {@code null}, any
issuer distinguished name will do.
<p>
If the value returned is not {@code null}, it is a
{@code Collection} of names. Each name is a {@code String}
or a byte array representing a distinguished name (in RFC 2253 or
ASN.1 DER encoded form, respectively).  Note that the
{@code Collection} returned may contain duplicate names.
<p>
If a name is specified as a byte array, it should contain a single DER
encoded distinguished name, as defined in X.501. The ASN.1 notation for
this structure is given in the documentation for
{@link #setIssuerNames setIssuerNames(Collection names)}.
<p>
Note that a deep copy is performed on the {@code Collection} to
protect against subsequent modifications.

@return a {@code Collection} of names (or {@code null})
@see #setIssuerNames
"
      end

      operation 8071810 "getMinCRL"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the minCRLNumber criterion. The {@code X509CRL} must have a
CRL number extension whose value is greater than or equal to the
specified value. If {@code null}, no minCRLNumber check will be done.

@return the minimum CRL number accepted (or {@code null})
"
      end

      operation 8071938 "getMaxCRL"
	public return_type class_ref 686338 // BigInteger
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maxCRLNumber criterion. The {@code X509CRL} must have a
CRL number extension whose value is less than or equal to the
specified value. If {@code null}, no maxCRLNumber check will be
done.

@return the maximum CRL number accepted (or {@code null})
"
      end

      operation 8072066 "getDateAndTime"
	public return_type class_ref 521474 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the dateAndTime criterion. The specified date must be
equal to or later than the value of the thisUpdate component
of the {@code X509CRL} and earlier than the value of the
nextUpdate component. There is no match if the
{@code X509CRL} does not contain a nextUpdate component.
If {@code null}, no dateAndTime check will be done.
<p>
Note that the {@code Date} returned is cloned to protect against
subsequent modifications.

@return the {@code Date} to match against (or {@code null})
@see #setDateAndTime
"
      end

      operation 8072194 "getCertificateChecking"
	public return_type class_ref 767234 // X509Certificate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the certificate being checked. This is not a criterion. Rather,
it is optional information that may help a {@code CertStore}
find CRLs that would be relevant when checking revocation for the
specified certificate. If the value returned is {@code null}, then
no such optional information is provided.

@return the certificate being checked (or {@code null})
@see #setCertificateChecking
"
      end

      operation 8072322 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a printable representation of the {@code X509CRLSelector}.

@return a {@code String} describing the contents of the
        {@code X509CRLSelector}.
"
      end

      operation 8072450 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "crl" type class_ref 1026434 // CRL
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides whether a {@code CRL} should be selected.

@param crl the {@code CRL} to be checked
@return {@code true} if the {@code CRL} should be selected,
        {@code false} otherwise
"
      end

      operation 8072578 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object.

@return the copy
"
      end
    end

    class 1028738 "CertPathValidator"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class for validating certification paths (also known as certificate
chains).
<p>
This class uses a provider-based architecture.
To create a {@code CertPathValidator},
call one of the static {@code getInstance} methods, passing in the
algorithm name of the {@code CertPathValidator} desired and
optionally the name of the provider desired.

<p>Once a {@code CertPathValidator} object has been created, it can
be used to validate certification paths by calling the {@link #validate
validate} method and passing it the {@code CertPath} to be validated
and an algorithm-specific set of parameters. If successful, the result is
returned in an object that implements the
{@code CertPathValidatorResult} interface.

<p>The {@link #getRevocationChecker} method allows an application to specify
additional algorithm-specific parameters and options used by the
{@code CertPathValidator} when checking the revocation status of
certificates. Here is an example demonstrating how it is used with the PKIX
algorithm:

<pre>
CertPathValidator cpv = CertPathValidator.getInstance(\"PKIX\");
PKIXRevocationChecker rc = (PKIXRevocationChecker)cpv.getRevocationChecker();
rc.setOptions(EnumSet.of(Option.SOFT_FAIL));
params.addCertPathChecker(rc);
CertPathValidatorResult cpvr = cpv.validate(path, params);
</pre>

<p>Every implementation of the Java platform is required to support the
following standard {@code CertPathValidator} algorithm:
<ul>
<li>{@code PKIX}</li>
</ul>
This algorithm is described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathValidator\">
CertPathValidator section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other algorithms are supported.

<p>
<b>Concurrent Access</b>
<p>
The static methods of this class are guaranteed to be thread-safe.
Multiple threads may concurrently invoke the static methods defined in
this class with no ill effects.
<p>
However, this is not true for the non-static methods defined by this class.
Unless otherwise documented by a specific provider, threads that need to
access a single {@code CertPathValidator} instance concurrently should
synchronize amongst themselves and provide the necessary locking. Multiple
threads each manipulating a different {@code CertPathValidator}
instance need not synchronize.

@see CertPath

@since       1.4
@author      Yassir Elley
"
      classrelation 3373826 // CPV_TYPE (<unidirectional association>)
	relation 3373826 --->
	  a role_name "CPV_TYPE" init_value " \"certpathvalidator.type\"" class_relation const_relation private
	    comment "
Constant to lookup in the Security properties file to determine
the default certpathvalidator type. In the Security properties file,
the default certpathvalidator type is given as:
<pre>
certpathvalidator.type=PKIX
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3373826 // CPV_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3373954 // validatorSpi (<unidirectional association>)
	relation 3373954 --->
	  a role_name "validatorSpi" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3373954 // validatorSpi (<unidirectional association>)
	  b parent class_ref 1028866 // CertPathValidatorSpi
      end

      classrelation 3374082 // provider (<unidirectional association>)
	relation 3374082 --->
	  a role_name "provider" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3374082 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3374210 // algorithm (<unidirectional association>)
	relation 3374210 --->
	  a role_name "algorithm" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3374210 // algorithm (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8032514 "CertPathValidator"
	protected explicit_return_type ""
	nparams 3
	  param inout name "validatorSpi" type class_ref 1028866 // CertPathValidatorSpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "algorithm" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertPathValidator} object of the given algorithm,
and encapsulates the given provider implementation (SPI object) in it.

@param validatorSpi the provider implementation
@param provider the provider
@param algorithm the algorithm name
"
      end

      operation 8032642 "getInstance"
	class_operation public return_type class_ref 1028738 // CertPathValidator
	nparams 1
	  param inout name "algorithm" type class_ref 128130 // String
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathValidator} object that implements the
specified algorithm.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new CertPathValidator object encapsulating the
CertPathValidatorSpi implementation from the first
Provider that supports the specified algorithm is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the requested {@code CertPathValidator}
 algorithm. See the CertPathValidator section in the <a href=
 \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathValidator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@return a {@code CertPathValidator} object that implements the
         specified algorithm.

@exception NoSuchAlgorithmException if no Provider supports a
         CertPathValidatorSpi implementation for the
         specified algorithm.

@see java.security.Provider
"
      end

      operation 8032770 "getInstance"
	class_operation public return_type class_ref 1028738 // CertPathValidator
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathValidator} object that implements the
specified algorithm.

<p> A new CertPathValidator object encapsulating the
CertPathValidatorSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

@param algorithm the name of the requested {@code CertPathValidator}
 algorithm. See the CertPathValidator section in the <a href=
 \"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathValidator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the name of the provider.

@return a {@code CertPathValidator} object that implements the
         specified algorithm.

@exception NoSuchAlgorithmException if a CertPathValidatorSpi
         implementation for the specified algorithm is not
         available from the specified provider.

@exception NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the {@code provider} is
         null or empty.

@see java.security.Provider
"
      end

      operation 8032898 "getInstance"
	class_operation public return_type class_ref 1028738 // CertPathValidator
	nparams 2
	  param inout name "algorithm" type class_ref 128130 // String
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 1
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathValidator} object that implements the
specified algorithm.

<p> A new CertPathValidator object encapsulating the
CertPathValidatorSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

@param algorithm the name of the requested {@code CertPathValidator}
algorithm. See the CertPathValidator section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertPathValidator\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard algorithm names.

@param provider the provider.

@return a {@code CertPathValidator} object that implements the
         specified algorithm.

@exception NoSuchAlgorithmException if a CertPathValidatorSpi
         implementation for the specified algorithm is not available
         from the specified Provider object.

@exception IllegalArgumentException if the {@code provider} is
         null.

@see java.security.Provider
"
      end

      operation 8033026 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Provider} of this
{@code CertPathValidator}.

@return the {@code Provider} of this {@code CertPathValidator}
"
      end

      operation 8033154 "getAlgorithm"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the algorithm name of this {@code CertPathValidator}.

@return the algorithm name of this {@code CertPathValidator}
"
      end

      operation 8033282 "validate"
	public return_type class_ref 1028994 // CertPathValidatorResult
	nparams 2
	  param inout name "certPath" type class_ref 833282 // CertPath
	  param inout name "params" type class_ref 1027714 // CertPathParameters
	nexceptions 2
	  exception class_ref 1028098 // CertPathValidatorException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the specified certification path using the specified
algorithm parameter set.
<p>
The {@code CertPath} specified must be of a type that is
supported by the validation algorithm, otherwise an
{@code InvalidAlgorithmParameterException} will be thrown. For
example, a {@code CertPathValidator} that implements the PKIX
algorithm validates {@code CertPath} objects of type X.509.

@param certPath the {@code CertPath} to be validated
@param params the algorithm parameters
@return the result of the validation algorithm
@exception CertPathValidatorException if the {@code CertPath}
does not validate
@exception InvalidAlgorithmParameterException if the specified
parameters or the type of the specified {@code CertPath} are
inappropriate for this {@code CertPathValidator}
"
      end

      operation 8033410 "getDefaultType"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default {@code CertPathValidator} type as specified by
the {@code certpathvalidator.type} security property, or the string
{@literal \"PKIX\"} if no such property exists.

<p>The default {@code CertPathValidator} type can be used by
applications that do not want to use a hard-coded type when calling one
of the {@code getInstance} methods, and want to provide a default
type in case a user does not specify its own.

<p>The default {@code CertPathValidator} type can be changed by
setting the value of the {@code certpathvalidator.type} security
property to the desired type.

@see java.security.Security security properties
@return the default {@code CertPathValidator} type as specified
by the {@code certpathvalidator.type} security property, or the string
{@literal \"PKIX\"} if no such property exists.
"
      end

      operation 8033538 "getRevocationChecker"
	public return_type class_ref 1027970 // CertPathChecker
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathChecker} that the encapsulated
{@code CertPathValidatorSpi} implementation uses to check the revocation
status of certificates. A PKIX implementation returns objects of
type {@code PKIXRevocationChecker}. Each invocation of this method
returns a new instance of {@code CertPathChecker}.

<p>The primary purpose of this method is to allow callers to specify
additional input parameters and options specific to revocation checking.
See the class description for an example.

@return a {@code CertPathChecker}
@throws UnsupportedOperationException if the service provider does not
        support this method
@since 1.8
"
      end
    end

    class 1028866 "CertPathValidatorSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "
The <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@link CertPathValidator CertPathValidator} class. All
{@code CertPathValidator} implementations must include a class (the
SPI class) that extends this class ({@code CertPathValidatorSpi})
and implements all of its methods. In general, instances of this class
should only be accessed through the {@code CertPathValidator} class.
For details, see the Java Cryptography Architecture.
<p>
<b>Concurrent Access</b>
<p>
Instances of this class need not be protected against concurrent
access from multiple threads. Threads that need to access a single
{@code CertPathValidatorSpi} instance concurrently should synchronize
amongst themselves and provide the necessary locking before calling the
wrapping {@code CertPathValidator} object.
<p>
However, implementations of {@code CertPathValidatorSpi} may still
encounter concurrency issues, since multiple threads each
manipulating a different {@code CertPathValidatorSpi} instance need not
synchronize.

@since       1.4
@author      Yassir Elley
"
      operation 8035074 "CertPathValidatorSpi"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default constructor.
"
      end

      operation 8035202 "engineValidate"
	abstract public return_type class_ref 1028994 // CertPathValidatorResult
	nparams 2
	  param inout name "certPath" type class_ref 833282 // CertPath
	  param inout name "params" type class_ref 1027714 // CertPathParameters
	nexceptions 2
	  exception class_ref 1028098 // CertPathValidatorException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates the specified certification path using the specified
algorithm parameter set.
<p>
The {@code CertPath} specified must be of a type that is
supported by the validation algorithm, otherwise an
{@code InvalidAlgorithmParameterException} will be thrown. For
example, a {@code CertPathValidator} that implements the PKIX
algorithm validates {@code CertPath} objects of type X.509.

@param certPath the {@code CertPath} to be validated
@param params the algorithm parameters
@return the result of the validation algorithm
@exception CertPathValidatorException if the {@code CertPath}
does not validate
@exception InvalidAlgorithmParameterException if the specified
parameters or the type of the specified {@code CertPath} are
inappropriate for this {@code CertPathValidator}
"
      end

      operation 8035330 "engineGetRevocationChecker"
	public return_type class_ref 1027970 // CertPathChecker
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertPathChecker} that this implementation uses to
check the revocation status of certificates. A PKIX implementation
returns objects of type {@code PKIXRevocationChecker}.

<p>The primary purpose of this method is to allow callers to specify
additional input parameters and options specific to revocation checking.
See the class description of {@code CertPathValidator} for an example.

<p>This method was added to version 1.8 of the Java Platform Standard
Edition. In order to maintain backwards compatibility with existing
service providers, this method cannot be abstract and by default throws
an {@code UnsupportedOperationException}.

@return a {@code CertPathChecker} that this implementation uses to
check the revocation status of certificates
@throws UnsupportedOperationException if this method is not supported
@since 1.8
"
      end
    end

    class 1028994 "CertPathValidatorResult"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A specification of the result of a certification path validator algorithm.
<p>
The purpose of this interface is to group (and provide type safety
for) all certification path validator results. All results returned
by the {@link CertPathValidator#validate CertPathValidator.validate}
method must implement this interface.

@see CertPathValidator

@since       1.4
@author      Yassir Elley
"
      classrelation 3374978 // <generalisation>
	relation 3374978 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3374978 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8034946 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this {@code CertPathValidatorResult}. Changes to the
copy will not affect the original and vice versa.

@return a copy of this {@code CertPathValidatorResult}
"
      end
    end

    class 1029378 "CertSelector"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A selector that defines a set of criteria for selecting
{@code Certificate}s. Classes that implement this interface
are often used to specify which {@code Certificate}s should
be retrieved from a {@code CertStore}.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this interface are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see Certificate
@see CertStore
@see CertStore#getCertificates

@author      Steve Hanna
@since       1.4
"
      classrelation 3375106 // <generalisation>
	relation 3375106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3375106 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8035458 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cert" type class_ref 319490 // Certificate
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides whether a {@code Certificate} should be selected.

@param   cert    the {@code Certificate} to be checked
@return  {@code true} if the {@code Certificate}
should be selected, {@code false} otherwise
"
      end

      operation 8035586 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this {@code CertSelector}. Changes to the
copy will not affect the original and vice versa.

@return a copy of this {@code CertSelector}
"
      end
    end

    class 1029506 "CertStore"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A class for retrieving {@code Certificate}s and {@code CRL}s
from a repository.
<p>
This class uses a provider-based architecture.
To create a {@code CertStore}, call one of the static
{@code getInstance} methods, passing in the type of
{@code CertStore} desired, any applicable initialization parameters
and optionally the name of the provider desired.
<p>
Once the {@code CertStore} has been created, it can be used to
retrieve {@code Certificate}s and {@code CRL}s by calling its
{@link #getCertificates(CertSelector selector) getCertificates} and
{@link #getCRLs(CRLSelector selector) getCRLs} methods.
<p>
Unlike a {@link java.security.KeyStore KeyStore}, which provides access
to a cache of private keys and trusted certificates, a
{@code CertStore} is designed to provide access to a potentially
vast repository of untrusted certificates and CRLs. For example, an LDAP
implementation of {@code CertStore} provides access to certificates
and CRLs stored in one or more directories using the LDAP protocol and the
schema as defined in the RFC service attribute.

<p> Every implementation of the Java platform is required to support the
following standard {@code CertStore} type:
<ul>
<li>{@code Collection}</li>
</ul>
This type is described in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertStore\">
CertStore section</a> of the
Java Cryptography Architecture Standard Algorithm Name Documentation.
Consult the release documentation for your implementation to see if any
other types are supported.

<p>
<b>Concurrent Access</b>
<p>
All public methods of {@code CertStore} objects must be thread-safe.
That is, multiple threads may concurrently invoke these methods on a
single {@code CertStore} object (or more than one) with no
ill effects. This allows a {@code CertPathBuilder} to search for a
CRL while simultaneously searching for further certificates, for instance.
<p>
The static methods of this class are also guaranteed to be thread-safe.
Multiple threads may concurrently invoke the static methods defined in
this class with no ill effects.

@since       1.4
@author      Sean Mullan, Steve Hanna
"
      classrelation 3375234 // CERTSTORE_TYPE (<unidirectional association>)
	relation 3375234 --->
	  a role_name "CERTSTORE_TYPE" init_value " \"certstore.type\"" class_relation const_relation private
	    comment "
Constant to lookup in the Security properties file to determine
the default certstore type. In the Security properties file, the
default certstore type is given as:
<pre>
certstore.type=LDAP
</pre>

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3375234 // CERTSTORE_TYPE (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3375362 // storeSpi (<unidirectional association>)
	relation 3375362 --->
	  a role_name "storeSpi" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3375362 // storeSpi (<unidirectional association>)
	  b parent class_ref 1029634 // CertStoreSpi
      end

      classrelation 3375490 // provider (<unidirectional association>)
	relation 3375490 --->
	  a role_name "provider" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3375490 // provider (<unidirectional association>)
	  b parent class_ref 509570 // Provider
      end

      classrelation 3375618 // type (<unidirectional association>)
	relation 3375618 --->
	  a role_name "type" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3375618 // type (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3375746 // params (<unidirectional association>)
	relation 3375746 --->
	  a role_name "params" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3375746 // params (<unidirectional association>)
	  b parent class_ref 1029762 // CertStoreParameters
      end

      operation 8035714 "CertStore"
	protected explicit_return_type ""
	nparams 4
	  param inout name "storeSpi" type class_ref 1029634 // CertStoreSpi
	  param inout name "provider" type class_ref 509570 // Provider
	  param inout name "type" type class_ref 128130 // String
	  param inout name "params" type class_ref 1029762 // CertStoreParameters
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertStore} object of the given type, and
encapsulates the given provider implementation (SPI object) in it.

@param storeSpi the provider implementation
@param provider the provider
@param type the type
@param params the initialization parameters (may be {@code null})
"
      end

      operation 8035842 "getCertificates"
	public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "selector" type class_ref 1029378 // CertSelector
	nexceptions 1
	  exception class_ref 1029890 // CertStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collection} of {@code Certificate}s that
match the specified selector. If no {@code Certificate}s
match the selector, an empty {@code Collection} will be returned.
<p>
For some {@code CertStore} types, the resulting
{@code Collection} may not contain <b>all</b> of the
{@code Certificate}s that match the selector. For instance,
an LDAP {@code CertStore} may not search all entries in the
directory. Instead, it may just search entries that are likely to
contain the {@code Certificate}s it is looking for.
<p>
Some {@code CertStore} implementations (especially LDAP
{@code CertStore}s) may throw a {@code CertStoreException}
unless a non-null {@code CertSelector} is provided that
includes specific criteria that can be used to find the certificates.
Issuer and/or subject names are especially useful criteria.

@param selector A {@code CertSelector} used to select which
 {@code Certificate}s should be returned. Specify {@code null}
 to return all {@code Certificate}s (if supported).
@return A {@code Collection} of {@code Certificate}s that
        match the specified selector (never {@code null})
@throws CertStoreException if an exception occurs
"
      end

      operation 8035970 "getCRLs"
	public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "selector" type class_ref 1030018 // CRLSelector
	nexceptions 1
	  exception class_ref 1029890 // CertStoreException
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CRL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collection} of {@code CRL}s that
match the specified selector. If no {@code CRL}s
match the selector, an empty {@code Collection} will be returned.
<p>
For some {@code CertStore} types, the resulting
{@code Collection} may not contain <b>all</b> of the
{@code CRL}s that match the selector. For instance,
an LDAP {@code CertStore} may not search all entries in the
directory. Instead, it may just search entries that are likely to
contain the {@code CRL}s it is looking for.
<p>
Some {@code CertStore} implementations (especially LDAP
{@code CertStore}s) may throw a {@code CertStoreException}
unless a non-null {@code CRLSelector} is provided that
includes specific criteria that can be used to find the CRLs.
Issuer names and/or the certificate to be checked are especially useful.

@param selector A {@code CRLSelector} used to select which
 {@code CRL}s should be returned. Specify {@code null}
 to return all {@code CRL}s (if supported).
@return A {@code Collection} of {@code CRL}s that
        match the specified selector (never {@code null})
@throws CertStoreException if an exception occurs
"
      end

      operation 8036098 "getInstance"
	class_operation public return_type class_ref 1029506 // CertStore
	nparams 2
	  param inout name "type" type class_ref 128130 // String
	  param inout name "params" type class_ref 1029762 // CertStoreParameters
	nexceptions 2
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	  exception class_ref 509314 // NoSuchAlgorithmException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertStore} object that implements the specified
{@code CertStore} type and is initialized with the specified
parameters.

<p> This method traverses the list of registered security Providers,
starting with the most preferred Provider.
A new CertStore object encapsulating the
CertStoreSpi implementation from the first
Provider that supports the specified type is returned.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

<p>The {@code CertStore} that is returned is initialized with the
specified {@code CertStoreParameters}. The type of parameters
needed may vary between different types of {@code CertStore}s.
Note that the specified {@code CertStoreParameters} object is
cloned.

@param type the name of the requested {@code CertStore} type.
See the CertStore section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertStore\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard types.

@param params the initialization parameters (may be {@code null}).

@return a {@code CertStore} object that implements the specified
         {@code CertStore} type.

@throws NoSuchAlgorithmException if no Provider supports a
         CertStoreSpi implementation for the specified type.

@throws InvalidAlgorithmParameterException if the specified
         initialization parameters are inappropriate for this
         {@code CertStore}.

@see java.security.Provider
"
      end

      operation 8036226 "handleException"
	class_operation private return_type class_ref 1029506 // CertStore
	nparams 1
	  param inout name "e" type class_ref 509314 // NoSuchAlgorithmException
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8036354 "getInstance"
	class_operation public return_type class_ref 1029506 // CertStore
	nparams 3
	  param inout name "type" type class_ref 128130 // String
	  param inout name "params" type class_ref 1029762 // CertStoreParameters
	  param inout name "provider" type class_ref 128130 // String
	nexceptions 3
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 509442 // NoSuchProviderException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertStore} object that implements the specified
{@code CertStore} type.

<p> A new CertStore object encapsulating the
CertStoreSpi implementation from the specified provider
is returned.  The specified provider must be registered
in the security provider list.

<p> Note that the list of registered providers may be retrieved via
the {@link Security#getProviders() Security.getProviders()} method.

<p>The {@code CertStore} that is returned is initialized with the
specified {@code CertStoreParameters}. The type of parameters
needed may vary between different types of {@code CertStore}s.
Note that the specified {@code CertStoreParameters} object is
cloned.

@param type the requested {@code CertStore} type.
See the CertStore section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertStore\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard types.

@param params the initialization parameters (may be {@code null}).

@param provider the name of the provider.

@return a {@code CertStore} object that implements the
         specified type.

@throws NoSuchAlgorithmException if a CertStoreSpi
         implementation for the specified type is not
         available from the specified provider.

@throws InvalidAlgorithmParameterException if the specified
         initialization parameters are inappropriate for this
         {@code CertStore}.

@throws NoSuchProviderException if the specified provider is not
         registered in the security provider list.

@exception IllegalArgumentException if the {@code provider} is
         null or empty.

@see java.security.Provider
"
      end

      operation 8036482 "getInstance"
	class_operation public return_type class_ref 1029506 // CertStore
	nparams 3
	  param inout name "type" type class_ref 128130 // String
	  param inout name "params" type class_ref 1029762 // CertStoreParameters
	  param inout name "provider" type class_ref 509570 // Provider
	nexceptions 2
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code CertStore} object that implements the specified
{@code CertStore} type.

<p> A new CertStore object encapsulating the
CertStoreSpi implementation from the specified Provider
object is returned.  Note that the specified Provider object
does not have to be registered in the provider list.

<p>The {@code CertStore} that is returned is initialized with the
specified {@code CertStoreParameters}. The type of parameters
needed may vary between different types of {@code CertStore}s.
Note that the specified {@code CertStoreParameters} object is
cloned.

@param type the requested {@code CertStore} type.
See the CertStore section in the <a href=
\"{@docRoot}/../technotes/guides/security/StandardNames.html#CertStore\">
Java Cryptography Architecture Standard Algorithm Name Documentation</a>
for information about standard types.

@param params the initialization parameters (may be {@code null}).

@param provider the provider.

@return a {@code CertStore} object that implements the
         specified type.

@exception NoSuchAlgorithmException if a CertStoreSpi
         implementation for the specified type is not available
         from the specified Provider object.

@throws InvalidAlgorithmParameterException if the specified
         initialization parameters are inappropriate for this
         {@code CertStore}

@exception IllegalArgumentException if the {@code provider} is
         null.

@see java.security.Provider
"
      end

      operation 8036610 "getCertStoreParameters"
	public return_type class_ref 1029762 // CertStoreParameters
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters used to initialize this {@code CertStore}.
Note that the {@code CertStoreParameters} object is cloned before
it is returned.

@return the parameters used to initialize this {@code CertStore}
(may be {@code null})
"
      end

      operation 8036738 "getType"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the type of this {@code CertStore}.

@return the type of this {@code CertStore}
"
      end

      operation 8036866 "getProvider"
	public return_type class_ref 509570 // Provider
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this {@code CertStore}.

@return the provider of this {@code CertStore}
"
      end

      operation 8036994 "getDefaultType"
	class_operation public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default {@code CertStore} type as specified by the
{@code certstore.type} security property, or the string
{@literal \"LDAP\"} if no such property exists.

<p>The default {@code CertStore} type can be used by applications
that do not want to use a hard-coded type when calling one of the
{@code getInstance} methods, and want to provide a default
{@code CertStore} type in case a user does not specify its own.

<p>The default {@code CertStore} type can be changed by setting
the value of the {@code certstore.type} security property to the
desired type.

@see java.security.Security security properties
@return the default {@code CertStore} type as specified by the
{@code certstore.type} security property, or the string
{@literal \"LDAP\"} if no such property exists.
"
      end
    end

    class 1029634 "CertStoreSpi"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The <i>Service Provider Interface</i> (<b>SPI</b>)
for the {@link CertStore CertStore} class. All {@code CertStore}
implementations must include a class (the SPI class) that extends
this class ({@code CertStoreSpi}), provides a constructor with
a single argument of type {@code CertStoreParameters}, and implements
all of its methods. In general, instances of this class should only be
accessed through the {@code CertStore} class.
For details, see the Java Cryptography Architecture.
<p>
<b>Concurrent Access</b>
<p>
The public methods of all {@code CertStoreSpi} objects must be
thread-safe. That is, multiple threads may concurrently invoke these
methods on a single {@code CertStoreSpi} object (or more than one)
with no ill effects. This allows a {@code CertPathBuilder} to search
for a CRL while simultaneously searching for further certificates, for
instance.
<p>
Simple {@code CertStoreSpi} implementations will probably ensure
thread safety by adding a {@code synchronized} keyword to their
{@code engineGetCertificates} and {@code engineGetCRLs} methods.
More sophisticated ones may allow truly concurrent access.

@since       1.4
@author      Steve Hanna
"
      operation 8037762 "CertStoreSpi"
	public explicit_return_type ""
	nparams 1
	  param inout name "params" type class_ref 1029762 // CertStoreParameters
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The sole constructor.

@param params the initialization parameters (may be {@code null})
@throws InvalidAlgorithmParameterException if the initialization
parameters are inappropriate for this {@code CertStoreSpi}
"
      end

      operation 8037890 "engineGetCertificates"
	abstract public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "selector" type class_ref 1029378 // CertSelector
	nexceptions 1
	  exception class_ref 1029890 // CertStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends Certificate> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collection} of {@code Certificate}s that
match the specified selector. If no {@code Certificate}s
match the selector, an empty {@code Collection} will be returned.
<p>
For some {@code CertStore} types, the resulting
{@code Collection} may not contain <b>all</b> of the
{@code Certificate}s that match the selector. For instance,
an LDAP {@code CertStore} may not search all entries in the
directory. Instead, it may just search entries that are likely to
contain the {@code Certificate}s it is looking for.
<p>
Some {@code CertStore} implementations (especially LDAP
{@code CertStore}s) may throw a {@code CertStoreException}
unless a non-null {@code CertSelector} is provided that includes
specific criteria that can be used to find the certificates. Issuer
and/or subject names are especially useful criteria.

@param selector A {@code CertSelector} used to select which
 {@code Certificate}s should be returned. Specify {@code null}
 to return all {@code Certificate}s (if supported).
@return A {@code Collection} of {@code Certificate}s that
        match the specified selector (never {@code null})
@throws CertStoreException if an exception occurs
"
      end

      operation 8038018 "engineGetCRLs"
	abstract public return_type class_ref 184194 // Collection
	nparams 1
	  param inout name "selector" type class_ref 1030018 // CRLSelector
	nexceptions 1
	  exception class_ref 1029890 // CertStoreException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends CRL> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Collection} of {@code CRL}s that
match the specified selector. If no {@code CRL}s
match the selector, an empty {@code Collection} will be returned.
<p>
For some {@code CertStore} types, the resulting
{@code Collection} may not contain <b>all</b> of the
{@code CRL}s that match the selector. For instance,
an LDAP {@code CertStore} may not search all entries in the
directory. Instead, it may just search entries that are likely to
contain the {@code CRL}s it is looking for.
<p>
Some {@code CertStore} implementations (especially LDAP
{@code CertStore}s) may throw a {@code CertStoreException}
unless a non-null {@code CRLSelector} is provided that includes
specific criteria that can be used to find the CRLs. Issuer names
and/or the certificate to be checked are especially useful.

@param selector A {@code CRLSelector} used to select which
 {@code CRL}s should be returned. Specify {@code null}
 to return all {@code CRL}s (if supported).
@return A {@code Collection} of {@code CRL}s that
        match the specified selector (never {@code null})
@throws CertStoreException if an exception occurs
"
      end
    end

    class 1029762 "CertStoreParameters"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A specification of {@code CertStore} parameters.
<p>
The purpose of this interface is to group (and provide type safety for)
all {@code CertStore} parameter specifications. All
{@code CertStore} parameter specifications must implement this
interface.
<p>
Typically, a {@code CertStoreParameters} object is passed as a parameter
to one of the {@link CertStore#getInstance CertStore.getInstance} methods.
The {@code getInstance} method returns a {@code CertStore} that
is used for retrieving {@code Certificate}s and {@code CRL}s. The
{@code CertStore} that is returned is initialized with the specified
parameters. The type of parameters needed may vary between different types
of {@code CertStore}s.

@see CertStore#getInstance

@since       1.4
@author      Steve Hanna
"
      classrelation 3376002 // <generalisation>
	relation 3376002 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3376002 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8037634 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this {@code CertStoreParameters}.
<p>
The precise meaning of \"copy\" may depend on the class of
the {@code CertStoreParameters} object. A typical implementation
performs a \"deep copy\" of this object, but this is not an absolute
requirement. Some implementations may perform a \"shallow copy\" of some
or all of the fields of this object.
<p>
Note that the {@code CertStore.getInstance} methods make a copy
of the specified {@code CertStoreParameters}. A deep copy
implementation of {@code clone} is safer and more robust, as it
prevents the caller from corrupting a shared {@code CertStore} by
subsequently modifying the contents of its initialization parameters.
However, a shallow copy implementation of {@code clone} is more
appropriate for applications that need to hold a reference to a
parameter contained in the {@code CertStoreParameters}. For example,
a shallow copy clone allows an application to release the resources of
a particular {@code CertStore} initialization parameter immediately,
rather than waiting for the garbage collection mechanism. This should
be done with the utmost care, since the {@code CertStore} may still
be in use by other threads.
<p>
Each subclass should state the precise behavior of this method so
that users and developers know what to expect.

@return a copy of this {@code CertStoreParameters}
"
      end
    end

    class 1029890 "CertStoreException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An exception indicating one of a variety of problems retrieving
certificates and CRLs from a {@code CertStore}.
<p>
A {@code CertStoreException} provides support for wrapping
exceptions. The {@link #getCause getCause} method returns the throwable,
if any, that caused this exception to be thrown.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertStore

@since       1.4
@author      Sean Mullan
"
      classrelation 3375874 // <generalisation>
	relation 3375874 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3375874 // <generalisation>
	  b parent class_ref 1016066 // GeneralSecurityException
      end

      attribute 1863810 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2395296107471573245L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8037122 "CertStoreException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertStoreException} with {@code null} as
its detail message.
"
      end

      operation 8037250 "CertStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertStoreException} with the given detail
message. A detail message is a {@code String} that describes this
particular exception.

@param msg the detail message
"
      end

      operation 8037378 "CertStoreException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertStoreException} that wraps the specified
throwable. This allows any exception to be converted into a
{@code CertStoreException}, while retaining information about the
cause, which may be useful for debugging. The detail message is
set to ({@code cause==null ? null : cause.toString()}) (which
typically contains the class and detail message of cause).

@param cause the cause (which is saved for later retrieval by the
{@link #getCause getCause()} method). (A {@code null} value is
permitted, and indicates that the cause is nonexistent or unknown.)
"
      end

      operation 8037506 "CertStoreException"
	public explicit_return_type ""
	nparams 2
	  param inout name "msg" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code CertStoreException} with the specified detail
message and cause.

@param msg the detail message
@param cause the cause (which is saved for later retrieval by the
{@link #getCause getCause()} method). (A {@code null} value is
permitted, and indicates that the cause is nonexistent or unknown.)
"
      end
    end

    class 1030018 "CRLSelector"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A selector that defines a set of criteria for selecting {@code CRL}s.
Classes that implement this interface are often used to specify
which {@code CRL}s should be retrieved from a {@code CertStore}.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this interface are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CRL
@see CertStore
@see CertStore#getCRLs

@author      Steve Hanna
@since       1.4
"
      classrelation 3376642 // <generalisation>
	relation 3376642 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3376642 // <generalisation>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8039810 "match"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "crl" type class_ref 1026434 // CRL
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decides whether a {@code CRL} should be selected.

@param   crl     the {@code CRL} to be checked
@return  {@code true} if the {@code CRL} should be selected,
{@code false} otherwise
"
      end

      operation 8039938 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this {@code CRLSelector}. Changes to the
copy will not affect the original and vice versa.

@return a copy of this {@code CRLSelector}
"
      end
    end

    class 1030146 "CollectionCertStoreParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameters used as input for the Collection {@code CertStore}
algorithm.
<p>
This class is used to provide necessary configuration parameters
to implementations of the Collection {@code CertStore}
algorithm. The only parameter included in this class is the
{@code Collection} from which the {@code CertStore} will
retrieve certificates and CRLs.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@since       1.4
@author      Steve Hanna
@see         java.util.Collection
@see         CertStore
"
      classrelation 3376130 // <realization>
	relation 3376130 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3376130 // <realization>
	  b parent class_ref 1029762 // CertStoreParameters
      end

      classrelation 3376258 // coll (<unidirectional association>)
	relation 3376258 --->
	  a role_name "coll" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3376258 // coll (<unidirectional association>)
	  b parent class_ref 184194 // Collection
      end

      operation 8038146 "CollectionCertStoreParameters"
	public explicit_return_type ""
	nparams 1
	  param inout name "collection" type class_ref 184194 // Collection
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code CollectionCertStoreParameters}
which will allow certificates and CRLs to be retrieved from the
specified {@code Collection}. If the specified
{@code Collection} contains an object that is not a
{@code Certificate} or {@code CRL}, that object will be
ignored by the Collection {@code CertStore}.
<p>
The {@code Collection} is <b>not</b> copied. Instead, a
reference is used. This allows the caller to subsequently add or
remove {@code Certificates} or {@code CRL}s from the
{@code Collection}, thus changing the set of
{@code Certificates} or {@code CRL}s available to the
Collection {@code CertStore}. The Collection {@code CertStore}
will not modify the contents of the {@code Collection}.
<p>
If the {@code Collection} will be modified by one thread while
another thread is calling a method of a Collection {@code CertStore}
that has been initialized with this {@code Collection}, the
{@code Collection} must have fail-fast iterators.

@param collection a {@code Collection} of
       {@code Certificate}s and {@code CRL}s
@exception NullPointerException if {@code collection} is
{@code null}
"
      end

      operation 8038274 "CollectionCertStoreParameters"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code CollectionCertStoreParameters} with
the default parameter values (an empty and immutable
{@code Collection}).
"
      end

      operation 8038402 "getCollection"
	public return_type class_ref 184194 // Collection
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Collection} from which {@code Certificate}s
and {@code CRL}s are retrieved. This is <b>not</b> a copy of the
{@code Collection}, it is a reference. This allows the caller to
subsequently add or remove {@code Certificates} or
{@code CRL}s from the {@code Collection}.

@return the {@code Collection} (never null)
"
      end

      operation 8038530 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object. Note that only a reference to the
{@code Collection} is copied, and not the contents.

@return the copy
"
      end

      operation 8038658 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters
"
      end
    end

    class 1030274 "Extension"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This interface represents an X.509 extension.

<p>
Extensions provide a means of associating additional attributes with users
or public keys and for managing a certification hierarchy.  The extension
format also allows communities to define private extensions to carry
information unique to those communities.

<p>
Each extension contains an object identifier, a criticality setting
indicating whether it is a critical or a non-critical extension, and
and an ASN.1 DER-encoded value. Its ASN.1 definition is:

<pre>

    Extension ::= SEQUENCE {
        extnId        OBJECT IDENTIFIER,
        critical      BOOLEAN DEFAULT FALSE,
        extnValue     OCTET STRING
                -- contains a DER encoding of a value
                -- of the type registered for use with
                -- the extnId object identifier value
    }

</pre>

<p>
This interface is designed to provide access to a single extension,
unlike {@link java.security.cert.X509Extension} which is more suitable
for accessing a set of extensions.

@since 1.7
"
      operation 8040066 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the extensions's object identifier.

@return the object identifier as a String
"
      end

      operation 8040194 "isCritical"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the extension's criticality setting.

@return true if this is a critical extension.
"
      end

      operation 8040322 "getValue"
	public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the extensions's DER-encoded value. Note, this is the bytes
that are encoded as an OCTET STRING. It does not include the OCTET
STRING tag and length.

@return a copy of the extension's value, or {@code null} if no
   extension value is present.
"
      end

      operation 8040450 "encode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 151298 // OutputStream
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the extension's DER encoding and writes it to the output
stream.

@param out the output stream
@exception IOException on encoding or output error.
@exception NullPointerException if {@code out} is {@code null}.
"
      end
    end

    class 1030402 "LDAPCertStoreParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameters used as input for the LDAP {@code CertStore} algorithm.
<p>
This class is used to provide necessary configuration parameters (server
name and port number) to implementations of the LDAP {@code CertStore}
algorithm.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@since       1.4
@author      Steve Hanna
@see         CertStore
"
      classrelation 3376770 // <realization>
	relation 3376770 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3376770 // <realization>
	  b parent class_ref 1029762 // CertStoreParameters
      end

      attribute 1865474 "LDAP_DEFAULT_PORT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 389"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1865602 "port"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "the port number of the LDAP server

"
      end

      classrelation 3376898 // serverName (<unidirectional association>)
	relation 3376898 --->
	  a role_name "serverName" private
	    comment "
the DNS name of the LDAP server

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3376898 // serverName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8040578 "LDAPCertStoreParameters"
	public explicit_return_type ""
	nparams 2
	  param inout name "serverName" type class_ref 128130 // String
	  param in name "port" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code LDAPCertStoreParameters} with the
specified parameter values.

@param serverName the DNS name of the LDAP server
@param port the port number of the LDAP server
@exception NullPointerException if {@code serverName} is
{@code null}
"
      end

      operation 8040706 "LDAPCertStoreParameters"
	public explicit_return_type ""
	nparams 1
	  param inout name "serverName" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code LDAPCertStoreParameters} with the
specified server name and a default port of 389.

@param serverName the DNS name of the LDAP server
@exception NullPointerException if {@code serverName} is
{@code null}
"
      end

      operation 8040834 "LDAPCertStoreParameters"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code LDAPCertStoreParameters} with the
default parameter values (server name \"localhost\", port 389).
"
      end

      operation 8040962 "getServerName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the DNS name of the LDAP server.

@return the name (not {@code null})
"
      end

      operation 8041090 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the port number of the LDAP server.

@return the port number
"
      end

      operation 8041218 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object. Changes to the copy will not affect
the original and vice versa.
<p>
Note: this method currently performs a shallow copy of the object
(simply calls {@code Object.clone()}). This may be changed in a
future revision to perform a deep copy if new parameters are added
that should not be shared.

@return the copy
"
      end

      operation 8041346 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters
"
      end
    end

    class 1030530 "PKIXBuilderParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameters used as input for the PKIX {@code CertPathBuilder}
algorithm.
<p>
A PKIX {@code CertPathBuilder} uses these parameters to {@link
CertPathBuilder#build build} a {@code CertPath} which has been
validated according to the PKIX certification path validation algorithm.

<p>To instantiate a {@code PKIXBuilderParameters} object, an
application must specify one or more <i>most-trusted CAs</i> as defined by
the PKIX certification path validation algorithm. The most-trusted CA
can be specified using one of two constructors. An application
can call {@link #PKIXBuilderParameters(Set, CertSelector)
PKIXBuilderParameters(Set, CertSelector)}, specifying a
{@code Set} of {@code TrustAnchor} objects, each of which
identifies a most-trusted CA. Alternatively, an application can call
{@link #PKIXBuilderParameters(KeyStore, CertSelector)
PKIXBuilderParameters(KeyStore, CertSelector)}, specifying a
{@code KeyStore} instance containing trusted certificate entries, each
of which will be considered as a most-trusted CA.

<p>In addition, an application must specify constraints on the target
certificate that the {@code CertPathBuilder} will attempt
to build a path to. The constraints are specified as a
{@code CertSelector} object. These constraints should provide the
{@code CertPathBuilder} with enough search criteria to find the target
certificate. Minimal criteria for an {@code X509Certificate} usually
include the subject name and/or one or more subject alternative names.
If enough criteria is not specified, the {@code CertPathBuilder}
may throw a {@code CertPathBuilderException}.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathBuilder

@since       1.4
@author      Sean Mullan
"
      classrelation 3378050 // <generalisation>
	relation 3378050 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3378050 // <generalisation>
	  b parent class_ref 1030658 // PKIXParameters
      end

      attribute 1866370 "maxPathLength"
	private explicit_type "int"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8045314 "PKIXBuilderParameters"
	public explicit_return_type ""
	nparams 2
	  param inout name "trustAnchors" type class_ref 192258 // Set
	  param inout name "targetConstraints" type class_ref 1029378 // CertSelector
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<TrustAnchor> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code PKIXBuilderParameters} with
the specified {@code Set} of most-trusted CAs.
Each element of the set is a {@link TrustAnchor TrustAnchor}.

<p>Note that the {@code Set} is copied to protect against
subsequent modifications.

@param trustAnchors a {@code Set} of {@code TrustAnchor}s
@param targetConstraints a {@code CertSelector} specifying the
constraints on the target certificate
@throws InvalidAlgorithmParameterException if {@code trustAnchors}
is empty {@code (trustAnchors.isEmpty() == true)}
@throws NullPointerException if {@code trustAnchors} is
{@code null}
@throws ClassCastException if any of the elements of
{@code trustAnchors} are not of type
{@code java.security.cert.TrustAnchor}
"
      end

      operation 8045442 "PKIXBuilderParameters"
	public explicit_return_type ""
	nparams 2
	  param inout name "keystore" type class_ref 769922 // KeyStore
	  param inout name "targetConstraints" type class_ref 1029378 // CertSelector
	nexceptions 2
	  exception class_ref 770050 // KeyStoreException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code PKIXBuilderParameters} that
populates the set of most-trusted CAs from the trusted
certificate entries contained in the specified {@code KeyStore}.
Only keystore entries that contain trusted {@code X509Certificate}s
are considered; all other certificate types are ignored.

@param keystore a {@code KeyStore} from which the set of
most-trusted CAs will be populated
@param targetConstraints a {@code CertSelector} specifying the
constraints on the target certificate
@throws KeyStoreException if {@code keystore} has not been
initialized
@throws InvalidAlgorithmParameterException if {@code keystore} does
not contain at least one trusted certificate entry
@throws NullPointerException if {@code keystore} is
{@code null}
"
      end

      operation 8045570 "setMaxPathLength"
	public explicit_return_type "void"
	nparams 1
	  param in name "maxPathLength" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the value of the maximum number of non-self-issued intermediate
certificates that may exist in a certification path. A certificate
is self-issued if the DNs that appear in the subject and issuer
fields are identical and are not empty. Note that the last certificate
in a certification path is not an intermediate certificate, and is not
included in this limit. Usually the last certificate is an end entity
certificate, but it can be a CA certificate. A PKIX
{@code CertPathBuilder} instance must not build
paths longer than the length specified.

<p> A value of 0 implies that the path can only contain
a single certificate. A value of -1 implies that the
path length is unconstrained (i.e. there is no maximum).
The default maximum path length, if not specified, is 5.
Setting a value less than -1 will cause an exception to be thrown.

<p> If any of the CA certificates contain the
{@code BasicConstraintsExtension}, the value of the
{@code pathLenConstraint} field of the extension overrides
the maximum path length parameter whenever the result is a
certification path of smaller length.

@param maxPathLength the maximum number of non-self-issued intermediate
 certificates that may exist in a certification path
@throws InvalidParameterException if {@code maxPathLength} is set
 to a value less than -1

@see #getMaxPathLength
"
      end

      operation 8045698 "getMaxPathLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of the maximum number of intermediate non-self-issued
certificates that may exist in a certification path. See
the {@link #setMaxPathLength} method for more details.

@return the maximum number of non-self-issued intermediate certificates
 that may exist in a certification path, or -1 if there is no limit

@see #setMaxPathLength
"
      end

      operation 8045826 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters
"
      end
    end

    class 1030658 "PKIXParameters"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Parameters used as input for the PKIX {@code CertPathValidator}
algorithm.
<p>
A PKIX {@code CertPathValidator} uses these parameters to
validate a {@code CertPath} according to the PKIX certification path
validation algorithm.

<p>To instantiate a {@code PKIXParameters} object, an
application must specify one or more <i>most-trusted CAs</i> as defined by
the PKIX certification path validation algorithm. The most-trusted CAs
can be specified using one of two constructors. An application
can call {@link #PKIXParameters(Set) PKIXParameters(Set)},
specifying a {@code Set} of {@code TrustAnchor} objects, each
of which identify a most-trusted CA. Alternatively, an application can call
{@link #PKIXParameters(KeyStore) PKIXParameters(KeyStore)}, specifying a
{@code KeyStore} instance containing trusted certificate entries, each
of which will be considered as a most-trusted CA.
<p>
Once a {@code PKIXParameters} object has been created, other parameters
can be specified (by calling {@link #setInitialPolicies setInitialPolicies}
or {@link #setDate setDate}, for instance) and then the
{@code PKIXParameters} is passed along with the {@code CertPath}
to be validated to {@link CertPathValidator#validate
CertPathValidator.validate}.
<p>
Any parameter that is not set (or is set to {@code null}) will
be set to the default value for that parameter. The default value for the
{@code date} parameter is {@code null}, which indicates
the current time when the path is validated. The default for the
remaining parameters is the least constrained.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathValidator

@since       1.4
@author      Sean Mullan
@author      Yassir Elley
"
      classrelation 3377026 // <realization>
	relation 3377026 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3377026 // <realization>
	  b parent class_ref 1027714 // CertPathParameters
      end

      classrelation 3377154 // unmodTrustAnchors (<unidirectional association>)
	relation 3377154 --->
	  a role_name "unmodTrustAnchors" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TrustAnchor> ${name}${value};
"
	    classrelation_ref 3377154 // unmodTrustAnchors (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      classrelation 3377282 // date (<unidirectional association>)
	relation 3377282 --->
	  a role_name "date" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3377282 // date (<unidirectional association>)
	  b parent class_ref 521474 // Date
      end

      classrelation 3377410 // certPathCheckers (<unidirectional association>)
	relation 3377410 --->
	  a role_name "certPathCheckers" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<PKIXCertPathChecker> ${name}${value};
"
	    classrelation_ref 3377410 // certPathCheckers (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3377538 // sigProvider (<unidirectional association>)
	relation 3377538 --->
	  a role_name "sigProvider" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3377538 // sigProvider (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1865730 "revocationEnabled"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3377666 // unmodInitialPolicies (<unidirectional association>)
	relation 3377666 --->
	  a role_name "unmodInitialPolicies" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 3377666 // unmodInitialPolicies (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      attribute 1865858 "explicitPolicyRequired"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1865986 "policyMappingInhibited"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1866114 "anyPolicyInhibited"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1866242 "policyQualifiersRejected"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3377794 // certStores (<unidirectional association>)
	relation 3377794 --->
	  a role_name "certStores" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<CertStore> ${name}${value};
"
	    classrelation_ref 3377794 // certStores (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3377922 // certSelector (<unidirectional association>)
	relation 3377922 --->
	  a role_name "certSelector" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3377922 // certSelector (<unidirectional association>)
	  b parent class_ref 1029378 // CertSelector
      end

      operation 8041474 "PKIXParameters"
	public explicit_return_type ""
	nparams 1
	  param inout name "trustAnchors" type class_ref 192258 // Set
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<TrustAnchor> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code PKIXParameters} with the specified
{@code Set} of most-trusted CAs. Each element of the
set is a {@link TrustAnchor TrustAnchor}.
<p>
Note that the {@code Set} is copied to protect against
subsequent modifications.

@param trustAnchors a {@code Set} of {@code TrustAnchor}s
@throws InvalidAlgorithmParameterException if the specified
{@code Set} is empty {@code (trustAnchors.isEmpty() == true)}
@throws NullPointerException if the specified {@code Set} is
{@code null}
@throws ClassCastException if any of the elements in the {@code Set}
are not of type {@code java.security.cert.TrustAnchor}
"
      end

      operation 8041602 "PKIXParameters"
	public explicit_return_type ""
	nparams 1
	  param inout name "keystore" type class_ref 769922 // KeyStore
	nexceptions 2
	  exception class_ref 770050 // KeyStoreException
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code PKIXParameters} that
populates the set of most-trusted CAs from the trusted
certificate entries contained in the specified {@code KeyStore}.
Only keystore entries that contain trusted {@code X509Certificates}
are considered; all other certificate types are ignored.

@param keystore a {@code KeyStore} from which the set of
most-trusted CAs will be populated
@throws KeyStoreException if the keystore has not been initialized
@throws InvalidAlgorithmParameterException if the keystore does
not contain at least one trusted certificate entry
@throws NullPointerException if the keystore is {@code null}
"
      end

      operation 8041730 "getTrustAnchors"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TrustAnchor> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable {@code Set} of the most-trusted
CAs.

@return an immutable {@code Set} of {@code TrustAnchor}s
(never {@code null})

@see #setTrustAnchors
"
      end

      operation 8041858 "setTrustAnchors"
	public explicit_return_type "void"
	nparams 1
	  param inout name "trustAnchors" type class_ref 192258 // Set
	nexceptions 1
	  exception class_ref 1013762 // InvalidAlgorithmParameterException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<TrustAnchor> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code Set} of most-trusted CAs.
<p>
Note that the {@code Set} is copied to protect against
subsequent modifications.

@param trustAnchors a {@code Set} of {@code TrustAnchor}s
@throws InvalidAlgorithmParameterException if the specified
{@code Set} is empty {@code (trustAnchors.isEmpty() == true)}
@throws NullPointerException if the specified {@code Set} is
{@code null}
@throws ClassCastException if any of the elements in the set
are not of type {@code java.security.cert.TrustAnchor}

@see #getTrustAnchors
"
      end

      operation 8041986 "getInitialPolicies"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable {@code Set} of initial
policy identifiers (OID strings), indicating that any one of these
policies would be acceptable to the certificate user for the purposes of
certification path processing. The default return value is an empty
{@code Set}, which is interpreted as meaning that any policy would
be acceptable.

@return an immutable {@code Set} of initial policy OIDs in
{@code String} format, or an empty {@code Set} (implying any
policy is acceptable). Never returns {@code null}.

@see #setInitialPolicies
"
      end

      operation 8042114 "setInitialPolicies"
	public explicit_return_type "void"
	nparams 1
	  param inout name "initialPolicies" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<String> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@code Set} of initial policy identifiers
(OID strings), indicating that any one of these
policies would be acceptable to the certificate user for the purposes of
certification path processing. By default, any policy is acceptable
(i.e. all policies), so a user that wants to allow any policy as
acceptable does not need to call this method, or can call it
with an empty {@code Set} (or {@code null}).
<p>
Note that the {@code Set} is copied to protect against
subsequent modifications.

@param initialPolicies a {@code Set} of initial policy
OIDs in {@code String} format (or {@code null})
@throws ClassCastException if any of the elements in the set are
not of type {@code String}

@see #getInitialPolicies
"
      end

      operation 8042242 "setCertStores"
	public explicit_return_type "void"
	nparams 1
	  param inout name "stores" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<CertStore> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the list of {@code CertStore}s to be used in finding
certificates and CRLs. May be {@code null}, in which case
no {@code CertStore}s will be used. The first
{@code CertStore}s in the list may be preferred to those that
appear later.
<p>
Note that the {@code List} is copied to protect against
subsequent modifications.

@param stores a {@code List} of {@code CertStore}s (or
{@code null})
@throws ClassCastException if any of the elements in the list are
not of type {@code java.security.cert.CertStore}

@see #getCertStores
"
      end

      operation 8042370 "addCertStore"
	public explicit_return_type "void"
	nparams 1
	  param inout name "store" type class_ref 1029506 // CertStore
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a {@code CertStore} to the end of the list of
{@code CertStore}s used in finding certificates and CRLs.

@param store the {@code CertStore} to add. If {@code null},
the store is ignored (not added to list).
"
      end

      operation 8042498 "getCertStores"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<CertStore> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable {@code List} of {@code CertStore}s that
are used to find certificates and CRLs.

@return an immutable {@code List} of {@code CertStore}s
(may be empty, but never {@code null})

@see #setCertStores
"
      end

      operation 8042626 "setRevocationEnabled"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the RevocationEnabled flag. If this flag is true, the default
revocation checking mechanism of the underlying PKIX service provider
will be used. If this flag is false, the default revocation checking
mechanism will be disabled (not used).
<p>
When a {@code PKIXParameters} object is created, this flag is set
to true. This setting reflects the most common strategy for checking
revocation, since each service provider must support revocation
checking to be PKIX compliant. Sophisticated applications should set
this flag to false when it is not practical to use a PKIX service
provider's default revocation checking mechanism or when an alternative
revocation checking mechanism is to be substituted (by also calling the
{@link #addCertPathChecker addCertPathChecker} or {@link
#setCertPathCheckers setCertPathCheckers} methods).

@param val the new value of the RevocationEnabled flag
"
      end

      operation 8042754 "isRevocationEnabled"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks the RevocationEnabled flag. If this flag is true, the default
revocation checking mechanism of the underlying PKIX service provider
will be used. If this flag is false, the default revocation checking
mechanism will be disabled (not used). See the {@link
#setRevocationEnabled setRevocationEnabled} method for more details on
setting the value of this flag.

@return the current value of the RevocationEnabled flag
"
      end

      operation 8042882 "setExplicitPolicyRequired"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ExplicitPolicyRequired flag. If this flag is true, an
acceptable policy needs to be explicitly identified in every certificate.
By default, the ExplicitPolicyRequired flag is false.

@param val {@code true} if explicit policy is to be required,
{@code false} otherwise
"
      end

      operation 8043010 "isExplicitPolicyRequired"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if explicit policy is required. If this flag is true, an
acceptable policy needs to be explicitly identified in every certificate.
By default, the ExplicitPolicyRequired flag is false.

@return {@code true} if explicit policy is required,
{@code false} otherwise
"
      end

      operation 8043138 "setPolicyMappingInhibited"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the PolicyMappingInhibited flag. If this flag is true, policy
mapping is inhibited. By default, policy mapping is not inhibited (the
flag is false).

@param val {@code true} if policy mapping is to be inhibited,
{@code false} otherwise
"
      end

      operation 8043266 "isPolicyMappingInhibited"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if policy mapping is inhibited. If this flag is true, policy
mapping is inhibited. By default, policy mapping is not inhibited (the
flag is false).

@return true if policy mapping is inhibited, false otherwise
"
      end

      operation 8043394 "setAnyPolicyInhibited"
	public explicit_return_type "void"
	nparams 1
	  param inout name "val" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets state to determine if the any policy OID should be processed
if it is included in a certificate. By default, the any policy OID
is not inhibited ({@link #isAnyPolicyInhibited isAnyPolicyInhibited()}
returns {@code false}).

@param val {@code true} if the any policy OID is to be
inhibited, {@code false} otherwise
"
      end

      operation 8043522 "isAnyPolicyInhibited"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the any policy OID should be processed if it
is included in a certificate.

@return {@code true} if the any policy OID is inhibited,
{@code false} otherwise
"
      end

      operation 8043650 "setPolicyQualifiersRejected"
	public explicit_return_type "void"
	nparams 1
	  param inout name "qualifiersRejected" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the PolicyQualifiersRejected flag. If this flag is true,
certificates that include policy qualifiers in a certificate
policies extension that is marked critical are rejected.
If the flag is false, certificates are not rejected on this basis.

<p> When a {@code PKIXParameters} object is created, this flag is
set to true. This setting reflects the most common (and simplest)
strategy for processing policy qualifiers. Applications that want to use
a more sophisticated policy must set this flag to false.
<p>
Note that the PKIX certification path validation algorithm specifies
that any policy qualifier in a certificate policies extension that is
marked critical must be processed and validated. Otherwise the
certification path must be rejected. If the policyQualifiersRejected flag
is set to false, it is up to the application to validate all policy
qualifiers in this manner in order to be PKIX compliant.

@param qualifiersRejected the new value of the PolicyQualifiersRejected
flag
@see #getPolicyQualifiersRejected
@see PolicyQualifierInfo
"
      end

      operation 8043778 "getPolicyQualifiersRejected"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the PolicyQualifiersRejected flag. If this flag is true,
certificates that include policy qualifiers in a certificate policies
extension that is marked critical are rejected.
If the flag is false, certificates are not rejected on this basis.

<p> When a {@code PKIXParameters} object is created, this flag is
set to true. This setting reflects the most common (and simplest)
strategy for processing policy qualifiers. Applications that want to use
a more sophisticated policy must set this flag to false.

@return the current value of the PolicyQualifiersRejected flag
@see #setPolicyQualifiersRejected
"
      end

      operation 8043906 "getDate"
	public return_type class_ref 521474 // Date
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the time for which the validity of the certification path
should be determined. If {@code null}, the current time is used.
<p>
Note that the {@code Date} returned is copied to protect against
subsequent modifications.

@return the {@code Date}, or {@code null} if not set
@see #setDate
"
      end

      operation 8044034 "setDate"
	public explicit_return_type "void"
	nparams 1
	  param inout name "date" type class_ref 521474 // Date
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time for which the validity of the certification path
should be determined. If {@code null}, the current time is used.
<p>
Note that the {@code Date} supplied here is copied to protect
against subsequent modifications.

@param date the {@code Date}, or {@code null} for the
current time
@see #getDate
"
      end

      operation 8044162 "setCertPathCheckers"
	public explicit_return_type "void"
	nparams 1
	  param inout name "checkers" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<PKIXCertPathChecker> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a {@code List} of additional certification path checkers. If
the specified {@code List} contains an object that is not a
{@code PKIXCertPathChecker}, it is ignored.
<p>
Each {@code PKIXCertPathChecker} specified implements
additional checks on a certificate. Typically, these are checks to
process and verify private extensions contained in certificates.
Each {@code PKIXCertPathChecker} should be instantiated with any
initialization parameters needed to execute the check.
<p>
This method allows sophisticated applications to extend a PKIX
{@code CertPathValidator} or {@code CertPathBuilder}.
Each of the specified {@code PKIXCertPathChecker}s will be called,
in turn, by a PKIX {@code CertPathValidator} or
{@code CertPathBuilder} for each certificate processed or
validated.
<p>
Regardless of whether these additional {@code PKIXCertPathChecker}s
are set, a PKIX {@code CertPathValidator} or
{@code CertPathBuilder} must perform all of the required PKIX
checks on each certificate. The one exception to this rule is if the
RevocationEnabled flag is set to false (see the {@link
#setRevocationEnabled setRevocationEnabled} method).
<p>
Note that the {@code List} supplied here is copied and each
{@code PKIXCertPathChecker} in the list is cloned to protect
against subsequent modifications.

@param checkers a {@code List} of {@code PKIXCertPathChecker}s.
May be {@code null}, in which case no additional checkers will be
used.
@throws ClassCastException if any of the elements in the list
are not of type {@code java.security.cert.PKIXCertPathChecker}
@see #getCertPathCheckers
"
      end

      operation 8044290 "getCertPathCheckers"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<PKIXCertPathChecker> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code List} of certification path checkers.
The returned {@code List} is immutable, and each
{@code PKIXCertPathChecker} in the {@code List} is cloned
to protect against subsequent modifications.

@return an immutable {@code List} of
{@code PKIXCertPathChecker}s (may be empty, but not
{@code null})
@see #setCertPathCheckers
"
      end

      operation 8044418 "addCertPathChecker"
	public explicit_return_type "void"
	nparams 1
	  param inout name "checker" type class_ref 1030914 // PKIXCertPathChecker
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a {@code PKIXCertPathChecker} to the list of certification
path checkers. See the {@link #setCertPathCheckers setCertPathCheckers}
method for more details.
<p>
Note that the {@code PKIXCertPathChecker} is cloned to protect
against subsequent modifications.

@param checker a {@code PKIXCertPathChecker} to add to the list of
checks. If {@code null}, the checker is ignored (not added to list).
"
      end

      operation 8044546 "getSigProvider"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the signature provider's name, or {@code null}
if not set.

@return the signature provider's name (or {@code null})
@see #setSigProvider
"
      end

      operation 8044674 "setSigProvider"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sigProvider" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the signature provider's name. The specified provider will be
preferred when creating {@link java.security.Signature Signature}
objects. If {@code null} or not set, the first provider found
supporting the algorithm will be used.

@param sigProvider the signature provider's name (or {@code null})
@see #getSigProvider
"
      end

      operation 8044802 "getTargetCertConstraints"
	public return_type class_ref 1029378 // CertSelector
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the required constraints on the target certificate.
The constraints are returned as an instance of {@code CertSelector}.
If {@code null}, no constraints are defined.

<p>Note that the {@code CertSelector} returned is cloned
to protect against subsequent modifications.

@return a {@code CertSelector} specifying the constraints
on the target certificate (or {@code null})
@see #setTargetCertConstraints
"
      end

      operation 8044930 "setTargetCertConstraints"
	public explicit_return_type "void"
	nparams 1
	  param inout name "selector" type class_ref 1029378 // CertSelector
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the required constraints on the target certificate.
The constraints are specified as an instance of
{@code CertSelector}. If {@code null}, no constraints are
defined.

<p>Note that the {@code CertSelector} specified is cloned
to protect against subsequent modifications.

@param selector a {@code CertSelector} specifying the constraints
on the target certificate (or {@code null})
@see #getTargetCertConstraints
"
      end

      operation 8045058 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes a copy of this {@code PKIXParameters} object. Changes
to the copy will not affect the original and vice versa.

@return a copy of this {@code PKIXParameters} object
"
      end

      operation 8045186 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the parameters.

@return a formatted string describing the parameters.
"
      end
    end

    class 1030786 "TrustAnchor"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A trust anchor or most-trusted Certification Authority (CA).
<p>
This class represents a \"most-trusted CA\", which is used as a trust anchor
for validating X.509 certification paths. A most-trusted CA includes the
public key of the CA, the CA's name, and any constraints upon the set of
paths which may be validated using this key. These parameters can be
specified in the form of a trusted {@code X509Certificate} or as
individual parameters.
<p>
<b>Concurrent Access</b>
<p>All {@code TrustAnchor} objects must be immutable and
thread-safe. That is, multiple threads may concurrently invoke the
methods defined in this class on a single {@code TrustAnchor}
object (or more than one) with no ill effects. Requiring
{@code TrustAnchor} objects to be immutable and thread-safe
allows them to be passed around to various pieces of code without
worrying about coordinating access. This stipulation applies to all
public fields and methods of this class and any added or overridden
by subclasses.

@see PKIXParameters#PKIXParameters(Set)
@see PKIXBuilderParameters#PKIXBuilderParameters(Set, CertSelector)

@since       1.4
@author      Sean Mullan
"
      classrelation 3380482 // pubKey (<unidirectional association>)
	relation 3380482 --->
	  a role_name "pubKey" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3380482 // pubKey (<unidirectional association>)
	  b parent class_ref 765826 // PublicKey
      end

      classrelation 3380610 // caName (<unidirectional association>)
	relation 3380610 --->
	  a role_name "caName" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3380610 // caName (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3380738 // caPrincipal (<unidirectional association>)
	relation 3380738 --->
	  a role_name "caPrincipal" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3380738 // caPrincipal (<unidirectional association>)
	  b parent class_ref 833026 // X500Principal
      end

      classrelation 3380866 // trustedCert (<unidirectional association>)
	relation 3380866 --->
	  a role_name "trustedCert" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3380866 // trustedCert (<unidirectional association>)
	  b parent class_ref 767234 // X509Certificate
      end

      attribute 1868290 "ncBytes"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1868418 "nc"
	private explicit_type "NameConstraintsExtension"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 8051202 "TrustAnchor"
	public explicit_return_type ""
	nparams 2
	  param inout name "trustedCert" type class_ref 767234 // X509Certificate
	  param inout name "nameConstraints" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code TrustAnchor} with the specified
{@code X509Certificate} and optional name constraints, which
are intended to be used as additional constraints when validating
an X.509 certification path.
<p>
The name constraints are specified as a byte array. This byte array
should contain the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in
<a href=\"http://www.ietf.org/rfc/rfc3280\">RFC 3280</a>
and X.509. The ASN.1 definition of this structure appears below.

<pre>{@code
 NameConstraints ::= SEQUENCE {
      permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
      excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }

 GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree

 GeneralSubtree ::= SEQUENCE {
      base                    GeneralName,
      minimum         [0]     BaseDistance DEFAULT 0,
      maximum         [1]     BaseDistance OPTIONAL }

 BaseDistance ::= INTEGER (0..MAX)

 GeneralName ::= CHOICE {
      otherName                       [0]     OtherName,
      rfc822Name                      [1]     IA5String,
      dNSName                         [2]     IA5String,
      x400Address                     [3]     ORAddress,
      directoryName                   [4]     Name,
      ediPartyName                    [5]     EDIPartyName,
      uniformResourceIdentifier       [6]     IA5String,
      iPAddress                       [7]     OCTET STRING,
      registeredID                    [8]     OBJECT IDENTIFIER}
}</pre>
<p>
Note that the name constraints byte array supplied is cloned to protect
against subsequent modifications.

@param trustedCert a trusted {@code X509Certificate}
@param nameConstraints a byte array containing the ASN.1 DER encoding of
a NameConstraints extension to be used for checking name constraints.
Only the value of the extension is included, not the OID or criticality
flag. Specify {@code null} to omit the parameter.
@throws IllegalArgumentException if the name constraints cannot be
decoded
@throws NullPointerException if the specified
{@code X509Certificate} is {@code null}
"
      end

      operation 8051330 "TrustAnchor"
	public explicit_return_type ""
	nparams 3
	  param inout name "caPrincipal" type class_ref 833026 // X500Principal
	  param inout name "pubKey" type class_ref 765826 // PublicKey
	  param inout name "nameConstraints" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code TrustAnchor} where the
most-trusted CA is specified as an X500Principal and public key.
Name constraints are an optional parameter, and are intended to be used
as additional constraints when validating an X.509 certification path.
<p>
The name constraints are specified as a byte array. This byte array
contains the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 3280
and X.509. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #TrustAnchor(X509Certificate, byte[])
TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
<p>
Note that the name constraints byte array supplied here is cloned to
protect against subsequent modifications.

@param caPrincipal the name of the most-trusted CA as X500Principal
@param pubKey the public key of the most-trusted CA
@param nameConstraints a byte array containing the ASN.1 DER encoding of
a NameConstraints extension to be used for checking name constraints.
Only the value of the extension is included, not the OID or criticality
flag. Specify {@code null} to omit the parameter.
@throws NullPointerException if the specified {@code caPrincipal} or
{@code pubKey} parameter is {@code null}
@since 1.5
"
      end

      operation 8051458 "TrustAnchor"
	public explicit_return_type ""
	nparams 3
	  param inout name "caName" type class_ref 128130 // String
	  param inout name "pubKey" type class_ref 765826 // PublicKey
	  param inout name "nameConstraints" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code TrustAnchor} where the
most-trusted CA is specified as a distinguished name and public key.
Name constraints are an optional parameter, and are intended to be used
as additional constraints when validating an X.509 certification path.
<p>
The name constraints are specified as a byte array. This byte array
contains the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 3280
and X.509. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #TrustAnchor(X509Certificate, byte[])
TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
<p>
Note that the name constraints byte array supplied here is cloned to
protect against subsequent modifications.

@param caName the X.500 distinguished name of the most-trusted CA in
<a href=\"http://www.ietf.org/rfc/rfc2253.txt\">RFC 2253</a>
{@code String} format
@param pubKey the public key of the most-trusted CA
@param nameConstraints a byte array containing the ASN.1 DER encoding of
a NameConstraints extension to be used for checking name constraints.
Only the value of the extension is included, not the OID or criticality
flag. Specify {@code null} to omit the parameter.
@throws IllegalArgumentException if the specified
{@code caName} parameter is empty {@code (caName.length() == 0)}
or incorrectly formatted or the name constraints cannot be decoded
@throws NullPointerException if the specified {@code caName} or
{@code pubKey} parameter is {@code null}
"
      end

      operation 8051586 "getTrustedCert"
	public return_type class_ref 767234 // X509Certificate
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the most-trusted CA certificate.

@return a trusted {@code X509Certificate} or {@code null}
if the trust anchor was not specified as a trusted certificate
"
      end

      operation 8051714 "getCA"
	public return_type class_ref 833026 // X500Principal
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the most-trusted CA as an X500Principal.

@return the X.500 distinguished name of the most-trusted CA, or
{@code null} if the trust anchor was not specified as a trusted
public key and name or X500Principal pair
@since 1.5
"
      end

      operation 8051842 "getCAName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the most-trusted CA in RFC 2253 {@code String}
format.

@return the X.500 distinguished name of the most-trusted CA, or
{@code null} if the trust anchor was not specified as a trusted
public key and name or X500Principal pair
"
      end

      operation 8051970 "getCAPublicKey"
	public return_type class_ref 765826 // PublicKey
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the public key of the most-trusted CA.

@return the public key of the most-trusted CA, or {@code null}
if the trust anchor was not specified as a trusted public key and name
or X500Principal pair
"
      end

      operation 8052098 "setNameConstraints"
	private explicit_return_type "void"
	nparams 1
	  param inout name "bytes" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decode the name constraints and clone them if not null.
"
      end

      operation 8052226 "getNameConstraints"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name constraints parameter. The specified name constraints
are associated with this trust anchor and are intended to be used
as additional constraints when validating an X.509 certification path.
<p>
The name constraints are returned as a byte array. This byte array
contains the DER encoded form of the name constraints, as they
would appear in the NameConstraints structure defined in RFC 3280
and X.509. The ASN.1 notation for this structure is supplied in the
documentation for
{@link #TrustAnchor(X509Certificate, byte[])
TrustAnchor(X509Certificate trustedCert, byte[] nameConstraints) }.
<p>
Note that the byte array returned is cloned to protect against
subsequent modifications.

@return a byte array containing the ASN.1 DER encoding of
        a NameConstraints extension used for checking name constraints,
        or {@code null} if not set.
"
      end

      operation 8052354 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a formatted string describing the {@code TrustAnchor}.

@return a formatted string describing the {@code TrustAnchor}
"
      end
    end

    class 1030914 "PKIXCertPathChecker"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An abstract class that performs one or more checks on an
{@code X509Certificate}.

<p>A concrete implementation of the {@code PKIXCertPathChecker} class
can be created to extend the PKIX certification path validation algorithm.
For example, an implementation may check for and process a critical private
extension of each certificate in a certification path.

<p>Instances of {@code PKIXCertPathChecker} are passed as parameters
using the {@link PKIXParameters#setCertPathCheckers setCertPathCheckers}
or {@link PKIXParameters#addCertPathChecker addCertPathChecker} methods
of the {@code PKIXParameters} and {@code PKIXBuilderParameters}
class. Each of the {@code PKIXCertPathChecker}s {@link #check check}
methods will be called, in turn, for each certificate processed by a PKIX
{@code CertPathValidator} or {@code CertPathBuilder}
implementation.

<p>A {@code PKIXCertPathChecker} may be called multiple times on
successive certificates in a certification path. Concrete subclasses
are expected to maintain any internal state that may be necessary to
check successive certificates. The {@link #init init} method is used
to initialize the internal state of the checker so that the certificates
of a new certification path may be checked. A stateful implementation
<b>must</b> override the {@link #clone clone} method if necessary in
order to allow a PKIX {@code CertPathBuilder} to efficiently
backtrack and try other paths. In these situations, the
{@code CertPathBuilder} is able to restore prior path validation
states by restoring the cloned {@code PKIXCertPathChecker}s.

<p>The order in which the certificates are presented to the
{@code PKIXCertPathChecker} may be either in the forward direction
(from target to most-trusted CA) or in the reverse direction (from
most-trusted CA to target). A {@code PKIXCertPathChecker} implementation
<b>must</b> support reverse checking (the ability to perform its checks when
it is presented with certificates in the reverse direction) and <b>may</b>
support forward checking (the ability to perform its checks when it is
presented with certificates in the forward direction). The
{@link #isForwardCheckingSupported isForwardCheckingSupported} method
indicates whether forward checking is supported.
<p>
Additional input parameters required for executing the check may be
specified through constructors of concrete implementations of this class.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see PKIXParameters
@see PKIXBuilderParameters

@since       1.4
@author      Yassir Elley
@author      Sean Mullan
"
      classrelation 3379074 // <realization>
	relation 3379074 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3379074 // <realization>
	  b parent class_ref 1027970 // CertPathChecker
      end

      classrelation 3379202 // <realization>
	relation 3379202 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3379202 // <realization>
	  b parent class_ref 185858 // Cloneable
      end

      operation 8047106 "PKIXCertPathChecker"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 8047234 "init"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "forward" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 1028098 // CertPathValidatorException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Initializes the internal state of this {@code PKIXCertPathChecker}.
<p>
The {@code forward} flag specifies the order that
certificates will be passed to the {@link #check check} method
(forward or reverse). A {@code PKIXCertPathChecker} <b>must</b>
support reverse checking and <b>may</b> support forward checking.

@param forward the order that certificates are presented to
the {@code check} method. If {@code true}, certificates
are presented from target to most-trusted CA (forward); if
{@code false}, from most-trusted CA to target (reverse).
@throws CertPathValidatorException if this
{@code PKIXCertPathChecker} is unable to check certificates in
the specified order; it should never be thrown if the forward flag
is false since reverse checking must be supported
"
      end

      operation 8047362 "isForwardCheckingSupported"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Indicates if forward checking is supported. Forward checking refers
to the ability of the {@code PKIXCertPathChecker} to perform
its checks when certificates are presented to the {@code check}
method in the forward direction (from target to most-trusted CA).

@return {@code true} if forward checking is supported,
{@code false} otherwise
"
      end

      operation 8047490 "getSupportedExtensions"
	abstract public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable {@code Set} of X.509 certificate extensions
that this {@code PKIXCertPathChecker} supports (i.e. recognizes, is
able to process), or {@code null} if no extensions are supported.
<p>
Each element of the set is a {@code String} representing the
Object Identifier (OID) of the X.509 extension that is supported.
The OID is represented by a set of nonnegative integers separated by
periods.
<p>
All X.509 certificate extensions that a {@code PKIXCertPathChecker}
might possibly be able to process should be included in the set.

@return an immutable {@code Set} of X.509 extension OIDs (in
{@code String} format) supported by this
{@code PKIXCertPathChecker}, or {@code null} if no
extensions are supported
"
      end

      operation 8047618 "check"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "cert" type class_ref 319490 // Certificate
	  param inout name "unresolvedCritExts" type class_ref 184194 // Collection
	nexceptions 1
	  exception class_ref 1028098 // CertPathValidatorException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the check(s) on the specified certificate using its internal
state and removes any critical extensions that it processes from the
specified collection of OID strings that represent the unresolved
critical extensions. The certificates are presented in the order
specified by the {@code init} method.

@param cert the {@code Certificate} to be checked
@param unresolvedCritExts a {@code Collection} of OID strings
representing the current set of unresolved critical extensions
@exception CertPathValidatorException if the specified certificate does
not pass the check
"
      end

      operation 8047746 "check"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cert" type class_ref 319490 // Certificate
	nexceptions 1
	  exception class_ref 1028098 // CertPathValidatorException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}

<p>This implementation calls
{@code check(cert, java.util.Collections.<String>emptySet())}.
"
      end

      operation 8047874 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a clone of this object. Calls the {@code Object.clone()}
method.
All subclasses which maintain state must support and
override this method, if necessary.

@return a copy of this {@code PKIXCertPathChecker}
"
      end
    end

    class 1031042 "PKIXCertPathBuilderResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents the successful result of the PKIX certification
path builder algorithm. All certification paths that are built and
returned using this algorithm are also validated according to the PKIX
certification path validation algorithm.

<p>Instances of {@code PKIXCertPathBuilderResult} are returned by
the {@code build} method of {@code CertPathBuilder}
objects implementing the PKIX algorithm.

<p>All {@code PKIXCertPathBuilderResult} objects contain the
certification path constructed by the build algorithm, the
valid policy tree and subject public key resulting from the build
algorithm, and a {@code TrustAnchor} describing the certification
authority (CA) that served as a trust anchor for the certification path.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathBuilderResult

@since       1.4
@author      Anne Anderson
"
      classrelation 3378690 // <generalisation>
	relation 3378690 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3378690 // <generalisation>
	  b parent class_ref 1031170 // PKIXCertPathValidatorResult
      end

      classrelation 3378818 // <realization>
	relation 3378818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3378818 // <realization>
	  b parent class_ref 1027586 // CertPathBuilderResult
      end

      classrelation 3378946 // certPath (<unidirectional association>)
	relation 3378946 --->
	  a role_name "certPath" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3378946 // certPath (<unidirectional association>)
	  b parent class_ref 833282 // CertPath
      end

      operation 8046722 "PKIXCertPathBuilderResult"
	public explicit_return_type ""
	nparams 4
	  param inout name "certPath" type class_ref 833282 // CertPath
	  param inout name "trustAnchor" type class_ref 1030786 // TrustAnchor
	  param inout name "policyTree" type class_ref 1031298 // PolicyNode
	  param inout name "subjectPublicKey" type class_ref 765826 // PublicKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code PKIXCertPathBuilderResult}
containing the specified parameters.

@param certPath the validated {@code CertPath}
@param trustAnchor a {@code TrustAnchor} describing the CA that
served as a trust anchor for the certification path
@param policyTree the immutable valid policy tree, or {@code null}
if there are no valid policies
@param subjectPublicKey the public key of the subject
@throws NullPointerException if the {@code certPath},
{@code trustAnchor} or {@code subjectPublicKey} parameters
are {@code null}
"
      end

      operation 8046850 "getCertPath"
	public return_type class_ref 833282 // CertPath
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the built and validated certification path. The
{@code CertPath} object does not include the trust anchor.
Instead, use the {@link #getTrustAnchor() getTrustAnchor()} method to
obtain the {@code TrustAnchor} that served as the trust anchor
for the certification path.

@return the built and validated {@code CertPath} (never
{@code null})
"
      end

      operation 8046978 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a printable representation of this
{@code PKIXCertPathBuilderResult}.

@return a {@code String} describing the contents of this
        {@code PKIXCertPathBuilderResult}
"
      end
    end

    class 1031170 "PKIXCertPathValidatorResult"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This class represents the successful result of the PKIX certification
path validation algorithm.

<p>Instances of {@code PKIXCertPathValidatorResult} are returned by the
{@link CertPathValidator#validate validate} method of
{@code CertPathValidator} objects implementing the PKIX algorithm.

<p> All {@code PKIXCertPathValidatorResult} objects contain the
valid policy tree and subject public key resulting from the
validation algorithm, as well as a {@code TrustAnchor} describing
the certification authority (CA) that served as a trust anchor for the
certification path.
<p>
<b>Concurrent Access</b>
<p>
Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single
object concurrently should synchronize amongst themselves and
provide the necessary locking. Multiple threads each manipulating
separate objects need not synchronize.

@see CertPathValidatorResult

@since       1.4
@author      Yassir Elley
@author      Sean Mullan
"
      classrelation 3378178 // <realization>
	relation 3378178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3378178 // <realization>
	  b parent class_ref 1028994 // CertPathValidatorResult
      end

      classrelation 3378306 // trustAnchor (<unidirectional association>)
	relation 3378306 --->
	  a role_name "trustAnchor" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3378306 // trustAnchor (<unidirectional association>)
	  b parent class_ref 1030786 // TrustAnchor
      end

      classrelation 3378434 // policyTree (<unidirectional association>)
	relation 3378434 --->
	  a role_name "policyTree" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3378434 // policyTree (<unidirectional association>)
	  b parent class_ref 1031298 // PolicyNode
      end

      classrelation 3378562 // subjectPublicKey (<unidirectional association>)
	relation 3378562 --->
	  a role_name "subjectPublicKey" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3378562 // subjectPublicKey (<unidirectional association>)
	  b parent class_ref 765826 // PublicKey
      end

      operation 8045954 "PKIXCertPathValidatorResult"
	public explicit_return_type ""
	nparams 3
	  param inout name "trustAnchor" type class_ref 1030786 // TrustAnchor
	  param inout name "policyTree" type class_ref 1031298 // PolicyNode
	  param inout name "subjectPublicKey" type class_ref 765826 // PublicKey
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code PKIXCertPathValidatorResult}
containing the specified parameters.

@param trustAnchor a {@code TrustAnchor} describing the CA that
served as a trust anchor for the certification path
@param policyTree the immutable valid policy tree, or {@code null}
if there are no valid policies
@param subjectPublicKey the public key of the subject
@throws NullPointerException if the {@code subjectPublicKey} or
{@code trustAnchor} parameters are {@code null}
"
      end

      operation 8046082 "getTrustAnchor"
	public return_type class_ref 1030786 // TrustAnchor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code TrustAnchor} describing the CA that served
as a trust anchor for the certification path.

@return the {@code TrustAnchor} (never {@code null})
"
      end

      operation 8046210 "getPolicyTree"
	public return_type class_ref 1031298 // PolicyNode
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root node of the valid policy tree resulting from the
PKIX certification path validation algorithm. The
{@code PolicyNode} object that is returned and any objects that
it returns through public methods are immutable.

<p>Most applications will not need to examine the valid policy tree.
They can achieve their policy processing goals by setting the
policy-related parameters in {@code PKIXParameters}. However, more
sophisticated applications, especially those that process policy
qualifiers, may need to traverse the valid policy tree using the
{@link PolicyNode#getParent PolicyNode.getParent} and
{@link PolicyNode#getChildren PolicyNode.getChildren} methods.

@return the root node of the valid policy tree, or {@code null}
if there are no valid policies
"
      end

      operation 8046338 "getPublicKey"
	public return_type class_ref 765826 // PublicKey
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the public key of the subject (target) of the certification
path, including any inherited public key parameters if applicable.

@return the public key of the subject (never {@code null})
"
      end

      operation 8046466 "clone"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this object.

@return the copy
"
      end

      operation 8046594 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a printable representation of this
{@code PKIXCertPathValidatorResult}.

@return a {@code String} describing the contents of this
        {@code PKIXCertPathValidatorResult}
"
      end
    end

    class 1031298 "PolicyNode"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An immutable valid policy tree node as defined by the PKIX certification
path validation algorithm.

<p>One of the outputs of the PKIX certification path validation
algorithm is a valid policy tree, which includes the policies that
were determined to be valid, how this determination was reached,
and any policy qualifiers encountered. This tree is of depth
<i>n</i>, where <i>n</i> is the length of the certification
path that has been validated.

<p>Most applications will not need to examine the valid policy tree.
They can achieve their policy processing goals by setting the
policy-related parameters in {@code PKIXParameters}. However,
the valid policy tree is available for more sophisticated applications,
especially those that process policy qualifiers.

<p>{@link PKIXCertPathValidatorResult#getPolicyTree()
PKIXCertPathValidatorResult.getPolicyTree} returns the root node of the
valid policy tree. The tree can be traversed using the
{@link #getChildren getChildren} and {@link #getParent getParent} methods.
Data about a particular node can be retrieved using other methods of
{@code PolicyNode}.

<p><b>Concurrent Access</b>
<p>All {@code PolicyNode} objects must be immutable and
thread-safe. Multiple threads may concurrently invoke the methods defined
in this class on a single {@code PolicyNode} object (or more than one)
with no ill effects. This stipulation applies to all public fields and
methods of this class and any added or overridden by subclasses.

@since       1.4
@author      Sean Mullan
"
      operation 8049666 "getParent"
	public return_type class_ref 1031298 // PolicyNode
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent of this node, or {@code null} if this is the
root node.

@return the parent of this node, or {@code null} if this is the
root node
"
      end

      operation 8049794 "getChildren"
	public return_type class_ref 132994 // Iterator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends PolicyNode> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the children of this node. Any attempts to
modify the children of this node through the
{@code Iterator}'s remove method must throw an
{@code UnsupportedOperationException}.

@return an iterator over the children of this node
"
      end

      operation 8049922 "getDepth"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the depth of this node in the valid policy tree.

@return the depth of this node (0 for the root node, 1 for its
children, and so on)
"
      end

      operation 8050050 "getValidPolicy"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the valid policy represented by this node.

@return the {@code String} OID of the valid policy
represented by this node. For the root node, this method always returns
the special anyPolicy OID: \"2.5.29.32.0\".
"
      end

      operation 8050178 "getPolicyQualifiers"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends PolicyQualifierInfo> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of policy qualifiers associated with the
valid policy represented by this node.

@return an immutable {@code Set} of
{@code PolicyQualifierInfo}s. For the root node, this
is always an empty {@code Set}.
"
      end

      operation 8050306 "getExpectedPolicies"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of expected policies that would satisfy this
node's valid policy in the next certificate to be processed.

@return an immutable {@code Set} of expected policy
{@code String} OIDs. For the root node, this method
always returns a {@code Set} with one element, the
special anyPolicy OID: \"2.5.29.32.0\".
"
      end

      operation 8050434 "isCritical"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the criticality indicator of the certificate policy extension
in the most recently processed certificate.

@return {@code true} if extension marked critical,
{@code false} otherwise. For the root node, {@code false}
is always returned.
"
      end
    end

    class 1031426 "PKIXReason"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code PKIXReason} enumerates the potential PKIX-specific reasons
that an X.509 certification path may be invalid according to the PKIX
(RFC 3280) standard. These reasons are in addition to those of the
{@code CertPathValidatorException.BasicReason} enumeration.

@since 1.7
"
      classrelation 3379330 // <realization>
	relation 3379330 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3379330 // <realization>
	  b parent class_ref 1029122 // Reason
      end

      attribute 1866498 "NAME_CHAINING"
	public type class_ref 1031426 // PKIXReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The certificate does not chain correctly.

"
      end

      attribute 1866626 "INVALID_KEY_USAGE"
	public type class_ref 1031426 // PKIXReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The certificate's key usage is invalid.

"
      end

      attribute 1866754 "INVALID_POLICY"
	public type class_ref 1031426 // PKIXReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The policy constraints have been violated.

"
      end

      attribute 1866882 "NO_TRUST_ANCHOR"
	public type class_ref 1031426 // PKIXReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "No acceptable trust anchor found.

"
      end

      attribute 1867010 "UNRECOGNIZED_CRIT_EXT"
	public type class_ref 1031426 // PKIXReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The certificate contains one or more unrecognized critical
extensions.

"
      end

      attribute 1867138 "NOT_CA_CERT"
	public type class_ref 1031426 // PKIXReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The certificate is not a CA certificate.

"
      end

      attribute 1867266 "PATH_TOO_LONG"
	public type class_ref 1031426 // PKIXReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The path length constraint has been violated.

"
      end

      attribute 1867394 "INVALID_NAME"
	public type class_ref 1031426 // PKIXReason
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The name constraints have been violated.
"
      end
    end

    class 1031554 "PKIXRevocationChecker"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code PKIXCertPathChecker} for checking the revocation status of
certificates with the PKIX algorithm.

<p>A {@code PKIXRevocationChecker} checks the revocation status of
certificates with the Online Certificate Status Protocol (OCSP) or
Certificate Revocation Lists (CRLs). OCSP is described in RFC 2560 and
is a network protocol for determining the status of a certificate. A CRL
is a time-stamped list identifying revoked certificates, and RFC 5280
describes an algorithm for determining the revocation status of certificates
using CRLs.

<p>Each {@code PKIXRevocationChecker} must be able to check the revocation
status of certificates with OCSP and CRLs. By default, OCSP is the
preferred mechanism for checking revocation status, with CRLs as the
fallback mechanism. However, this preference can be switched to CRLs with
the {@link Option#PREFER_CRLS PREFER_CRLS} option. In addition, the fallback
mechanism can be disabled with the {@link Option#NO_FALLBACK NO_FALLBACK}
option.

<p>A {@code PKIXRevocationChecker} is obtained by calling the
{@link CertPathValidator#getRevocationChecker getRevocationChecker} method
of a PKIX {@code CertPathValidator}. Additional parameters and options
specific to revocation can be set (by calling the
{@link #setOcspResponder setOcspResponder} method for instance). The
{@code PKIXRevocationChecker} is added to a {@code PKIXParameters} object
using the {@link PKIXParameters#addCertPathChecker addCertPathChecker}
or {@link PKIXParameters#setCertPathCheckers setCertPathCheckers} method,
and then the {@code PKIXParameters} is passed along with the {@code CertPath}
to be validated to the {@link CertPathValidator#validate validate} method
of a PKIX {@code CertPathValidator}. When supplying a revocation checker in
this manner, it will be used to check revocation irrespective of the setting
of the {@link PKIXParameters#isRevocationEnabled RevocationEnabled} flag.
Similarly, a {@code PKIXRevocationChecker} may be added to a
{@code PKIXBuilderParameters} object for use with a PKIX
{@code CertPathBuilder}.

<p>Note that when a {@code PKIXRevocationChecker} is added to
{@code PKIXParameters}, it clones the {@code PKIXRevocationChecker};
thus any subsequent modifications to the {@code PKIXRevocationChecker}
have no effect.

<p>Any parameter that is not set (or is set to {@code null}) will be set to
the default value for that parameter.

<p><b>Concurrent Access</b>

<p>Unless otherwise specified, the methods defined in this class are not
thread-safe. Multiple threads that need to access a single object
concurrently should synchronize amongst themselves and provide the
necessary locking. Multiple threads each manipulating separate objects
need not synchronize.

@since 1.8

@see <a href=\"http://www.ietf.org/rfc/rfc2560.txt\"><i>RFC&nbsp;2560: X.509
Internet Public Key Infrastructure Online Certificate Status Protocol -
OCSP</i></a>, <br><a
href=\"http://www.ietf.org/rfc/rfc5280.txt\"><i>RFC&nbsp;5280: Internet X.509
Public Key Infrastructure Certificate and Certificate Revocation List (CRL)
Profile</i></a>
"
      classrelation 3379458 // <generalisation>
	relation 3379458 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3379458 // <generalisation>
	  b parent class_ref 1030914 // PKIXCertPathChecker
      end

      classrelation 3379586 // ocspResponder (<unidirectional association>)
	relation 3379586 --->
	  a role_name "ocspResponder" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3379586 // ocspResponder (<unidirectional association>)
	  b parent class_ref 783874 // URI
      end

      classrelation 3379714 // ocspResponderCert (<unidirectional association>)
	relation 3379714 --->
	  a role_name "ocspResponderCert" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3379714 // ocspResponderCert (<unidirectional association>)
	  b parent class_ref 767234 // X509Certificate
      end

      classrelation 3379842 // ocspExtensions (<unidirectional association>)
	relation 3379842 --->
	  a role_name "ocspExtensions" init_value " Collections.<Extension>emptyList()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Extension> ${name}${value};
"
	    classrelation_ref 3379842 // ocspExtensions (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      classrelation 3379970 // ocspResponses (<unidirectional association>)
	relation 3379970 --->
	  a role_name "ocspResponses" init_value " Collections.emptyMap()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<X509Certificate, byte[]> ${name}${value};
"
	    classrelation_ref 3379970 // ocspResponses (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      class 1031682 "Option"
	visibility public stereotype "enum"
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1867522 "ONLY_END_ENTITY"
	  public type class_ref 1031682 // Option
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Only check the revocation status of end-entity certificates.

"
	end

	attribute 1867650 "PREFER_CRLS"
	  public type class_ref 1031682 // Option
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Prefer CRLs to OSCP. The default behavior is to prefer OCSP. Each
PKIX implementation should document further details of their
specific preference rules and fallback policies.

"
	end

	attribute 1867778 "NO_FALLBACK"
	  public type class_ref 1031682 // Option
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Disable the fallback mechanism.

"
	end

	attribute 1867906 "SOFT_FAIL"
	  public type class_ref 1031682 // Option
	  cpp_decl ""
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	  comment "Allow revocation check to succeed if the revocation status cannot be
determined for one of the following reasons:
<ul>
 <li>The CRL or OCSP response cannot be obtained because of a
     network error.
 <li>The OCSP responder returns one of the following errors
     specified in section 2.3 of RFC 2560: internalError or tryLater.
</ul><br>
Note that these conditions apply to both OCSP and CRLs, and unless
the {@code NO_FALLBACK} option is set, the revocation check is
allowed to succeed only if both mechanisms fail under one of the
conditions as stated above.
Exceptions that cause the network errors are ignored but can be
later retrieved by calling the
{@link #getSoftFailExceptions getSoftFailExceptions} method.
"
	end
      end

      classrelation 3380098 // options (<unidirectional association>)
	relation 3380098 --->
	  a role_name "options" init_value " Collections.emptySet()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Option> ${name}${value};
"
	    classrelation_ref 3380098 // options (<unidirectional association>)
	  b parent class_ref 192258 // Set
      end

      operation 8048002 "PKIXRevocationChecker"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default constructor.
"
      end

      operation 8048130 "setOcspResponder"
	public explicit_return_type "void"
	nparams 1
	  param inout name "uri" type class_ref 783874 // URI
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the URI that identifies the location of the OCSP responder. This
overrides the {@code ocsp.responderURL} security property and any
responder specified in a certificate's Authority Information Access
Extension, as defined in RFC 5280.

@param uri the responder URI
"
      end

      operation 8048258 "getOcspResponder"
	public return_type class_ref 783874 // URI
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the URI that identifies the location of the OCSP responder. This
overrides the {@code ocsp.responderURL} security property. If this
parameter or the {@code ocsp.responderURL} property is not set, the
location is determined from the certificate's Authority Information
Access Extension, as defined in RFC 5280.

@return the responder URI, or {@code null} if not set
"
      end

      operation 8048386 "setOcspResponderCert"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cert" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the OCSP responder's certificate. This overrides the
{@code ocsp.responderCertSubjectName},
{@code ocsp.responderCertIssuerName},
and {@code ocsp.responderCertSerialNumber} security properties.

@param cert the responder's certificate
"
      end

      operation 8048514 "getOcspResponderCert"
	public return_type class_ref 767234 // X509Certificate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the OCSP responder's certificate. This overrides the
{@code ocsp.responderCertSubjectName},
{@code ocsp.responderCertIssuerName},
and {@code ocsp.responderCertSerialNumber} security properties. If this
parameter or the aforementioned properties are not set, then the
responder's certificate is determined as specified in RFC 2560.

@return the responder's certificate, or {@code null} if not set
"
      end

      operation 8048642 "setOcspExtensions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "extensions" type class_ref 175362 // List
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Extension> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " request extensions; single extensions not supported

Sets the optional OCSP request extensions.

@param extensions a list of extensions. The list is copied to protect
       against subsequent modification.
"
      end

      operation 8048770 "getOcspExtensions"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Extension> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the optional OCSP request extensions.

@return an unmodifiable list of extensions. The list is empty if no
        extensions have been specified.
"
      end

      operation 8048898 "setOcspResponses"
	public explicit_return_type "void"
	nparams 1
	  param inout name "responses" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<X509Certificate, byte[]> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the OCSP responses. These responses are used to determine
the revocation status of the specified certificates when OCSP is used.

@param responses a map of OCSP responses. Each key is an
       {@code X509Certificate} that maps to the corresponding
       DER-encoded OCSP response for that certificate. A deep copy of
       the map is performed to protect against subsequent modification.
"
      end

      operation 8049026 "getOcspResponses"
	public return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<X509Certificate, byte[]> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the OCSP responses. These responses are used to determine
the revocation status of the specified certificates when OCSP is used.

@return a map of OCSP responses. Each key is an
       {@code X509Certificate} that maps to the corresponding
       DER-encoded OCSP response for that certificate. A deep copy of
       the map is returned to protect against subsequent modification.
       Returns an empty map if no responses have been specified.
"
      end

      operation 8049154 "setOptions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "options" type class_ref 192258 // Set
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Option> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the revocation options.

@param options a set of revocation options. The set is copied to protect
       against subsequent modification.
"
      end

      operation 8049282 "getOptions"
	public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Option> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the revocation options.

@return an unmodifiable set of revocation options. The set is empty if
        no options have been specified.
"
      end

      operation 8049410 "getSoftFailExceptions"
	abstract public return_type class_ref 175362 // List
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<CertPathValidatorException> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list containing the exceptions that are ignored by the
revocation checker when the {@link Option#SOFT_FAIL SOFT_FAIL} option
is set. The list is cleared each time {@link #init init} is called.
The list is ordered in ascending order according to the certificate
index returned by {@link CertPathValidatorException#getIndex getIndex}
method of each entry.
<p>
An implementation of {@code PKIXRevocationChecker} is responsible for
adding the ignored exceptions to the list.

@return an unmodifiable list containing the ignored exceptions. The list
        is empty if no exceptions have been ignored.
"
      end

      operation 8049538 "clone"
	public return_type class_ref 1031554 // PKIXRevocationChecker
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 1031810 "PolicyQualifierInfo"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo
structure.

<p>The ASN.1 definition is as follows:
<pre>
  PolicyQualifierInfo ::= SEQUENCE {
       policyQualifierId       PolicyQualifierId,
       qualifier               ANY DEFINED BY policyQualifierId }
</pre>
<p>
A certificate policies extension, if present in an X.509 version 3
certificate, contains a sequence of one or more policy information terms,
each of which consists of an object identifier (OID) and optional
qualifiers. In an end-entity certificate, these policy information terms
indicate the policy under which the certificate has been issued and the
purposes for which the certificate may be used. In a CA certificate, these
policy information terms limit the set of policies for certification paths
which include this certificate.
<p>
A {@code Set} of {@code PolicyQualifierInfo} objects are returned
by the {@link PolicyNode#getPolicyQualifiers PolicyNode.getPolicyQualifiers}
method. This allows applications with specific policy requirements to
process and validate each policy qualifier. Applications that need to
process policy qualifiers should explicitly set the
{@code policyQualifiersRejected} flag to false (by calling the
{@link PKIXParameters#setPolicyQualifiersRejected
PKIXParameters.setPolicyQualifiersRejected} method) before validating
a certification path.

<p>Note that the PKIX certification path validation algorithm specifies
that any policy qualifier in a certificate policies extension that is
marked critical must be processed and validated. Otherwise the
certification path must be rejected. If the
{@code policyQualifiersRejected} flag is set to false, it is up to
the application to validate all policy qualifiers in this manner in order
to be PKIX compliant.

<p><b>Concurrent Access</b>

<p>All {@code PolicyQualifierInfo} objects must be immutable and
thread-safe. That is, multiple threads may concurrently invoke the
methods defined in this class on a single {@code PolicyQualifierInfo}
object (or more than one) with no ill effects. Requiring
{@code PolicyQualifierInfo} objects to be immutable and thread-safe
allows them to be passed around to various pieces of code without
worrying about coordinating access.

@author      seth proctor
@author      Sean Mullan
@since       1.4
"
      attribute 1868034 "mEncoded"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3380226 // mId (<unidirectional association>)
	relation 3380226 --->
	  a role_name "mId" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3380226 // mId (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1868162 "mData"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3380354 // pqiString (<unidirectional association>)
	relation 3380354 --->
	  a role_name "pqiString" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3380354 // pqiString (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8050562 "PolicyQualifierInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "encoded" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code PolicyQualifierInfo} from the
encoded bytes. The encoded byte array is copied on construction.

@param encoded a byte array containing the qualifier in DER encoding
@exception IOException thrown if the byte array does not represent a
valid and parsable policy qualifier
"
      end

      operation 8050690 "getPolicyQualifierId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code policyQualifierId} field of this
{@code PolicyQualifierInfo}. The {@code policyQualifierId}
is an Object Identifier (OID) represented by a set of nonnegative
integers separated by periods.

@return the OID (never {@code null})
"
      end

      operation 8050818 "getEncoded"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 DER encoded form of this
{@code PolicyQualifierInfo}.

@return the ASN.1 DER encoded bytes (never {@code null}).
Note that a copy is returned, so the data is cloned each time
this method is called.
"
      end

      operation 8050946 "getPolicyQualifier"
	public explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 DER encoded form of the {@code qualifier}
field of this {@code PolicyQualifierInfo}.

@return the ASN.1 DER encoded bytes of the {@code qualifier}
field. Note that a copy is returned, so the data is cloned each
time this method is called.
"
      end

      operation 8051074 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a printable representation of this
{@code PolicyQualifierInfo}.

@return a {@code String} describing the contents of this
        {@code PolicyQualifierInfo}
"
      end
    end

    class 1031938 "X509Extension"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface for an X.509 extension.

<p>The extensions defined for X.509 v3
{@link X509Certificate Certificates} and v2
{@link X509CRL CRLs} (Certificate Revocation
Lists) provide methods
for associating additional attributes with users or public keys,
for managing the certification hierarchy, and for managing CRL
distribution. The X.509 extensions format also allows communities
to define private extensions to carry information unique to those
communities.

<p>Each extension in a certificate/CRL may be designated as
critical or non-critical.  A certificate/CRL-using system (an application
validating a certificate/CRL) must reject the certificate/CRL if it
encounters a critical extension it does not recognize.  A non-critical
extension may be ignored if it is not recognized.
<p>
The ASN.1 definition for this is:
<pre>
Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

Extension  ::=  SEQUENCE  {
    extnId        OBJECT IDENTIFIER,
    critical      BOOLEAN DEFAULT FALSE,
    extnValue     OCTET STRING
                  -- contains a DER encoding of a value
                  -- of the type registered for use with
                  -- the extnId object identifier value
}
</pre>
Since not all extensions are known, the {@code getExtensionValue}
method returns the DER-encoded OCTET STRING of the
extension value (i.e., the {@code extnValue}). This can then
be handled by a <em>Class</em> that understands the extension.

@author Hemma Prafullchandra
"
      operation 8052482 "hasUnsupportedCriticalExtension"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check if there is a critical extension that is not supported.

@return {@code true} if a critical extension is found that is
not supported, otherwise {@code false}.
"
      end

      operation 8052610 "getCriticalExtensionOIDs"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a Set of the OID strings for the extension(s) marked
CRITICAL in the certificate/CRL managed by the object
implementing this interface.

Here is sample code to get a Set of critical extensions from an
X509Certificate and print the OIDs:
<pre>{@code
X509Certificate cert = null;
try (InputStream inStrm = new FileInputStream(\"DER-encoded-Cert\")) {
    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
    cert = (X509Certificate)cf.generateCertificate(inStrm);
}

Set<String> critSet = cert.getCriticalExtensionOIDs();
if (critSet != null && !critSet.isEmpty()) {
    System.out.println(\"Set of critical extensions:\");
    for (String oid : critSet) {
        System.out.println(oid);
    }
}
}</pre>
@return a Set (or an empty Set if none are marked critical) of
the extension OID strings for extensions that are marked critical.
If there are no extensions present at all, then this method returns
null.
"
      end

      operation 8052738 "getNonCriticalExtensionOIDs"
	public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a Set of the OID strings for the extension(s) marked
NON-CRITICAL in the certificate/CRL managed by the object
implementing this interface.

Here is sample code to get a Set of non-critical extensions from an
X509CRL revoked certificate entry and print the OIDs:
<pre>{@code
CertificateFactory cf = null;
X509CRL crl = null;
try (InputStream inStrm = new FileInputStream(\"DER-encoded-CRL\")) {
    cf = CertificateFactory.getInstance(\"X.509\");
    crl = (X509CRL)cf.generateCRL(inStrm);
}

byte[] certData = <DER-encoded certificate data>
ByteArrayInputStream bais = new ByteArrayInputStream(certData);
X509Certificate cert = (X509Certificate)cf.generateCertificate(bais);
X509CRLEntry badCert =
             crl.getRevokedCertificate(cert.getSerialNumber());

if (badCert != null) {
    Set<String> nonCritSet = badCert.getNonCriticalExtensionOIDs();
    if (nonCritSet != null)
        for (String oid : nonCritSet) {
            System.out.println(oid);
        }
}
}</pre>

@return a Set (or an empty Set if none are marked non-critical) of
the extension OID strings for extensions that are marked non-critical.
If there are no extensions present at all, then this method returns
null.
"
      end

      operation 8052866 "getExtensionValue"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "oid" type class_ref 128130 // String
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded OCTET string for the extension value
(<em>extnValue</em>) identified by the passed-in {@code oid}
String.
The {@code oid} string is
represented by a set of nonnegative whole numbers separated
by periods.

<p>For example:<br>
<table border=groove summary=\"Examples of OIDs and extension names\">
<tr>
<th>OID <em>(Object Identifier)</em></th>
<th>Extension Name</th></tr>
<tr><td>2.5.29.14</td>
<td>SubjectKeyIdentifier</td></tr>
<tr><td>2.5.29.15</td>
<td>KeyUsage</td></tr>
<tr><td>2.5.29.16</td>
<td>PrivateKeyUsage</td></tr>
<tr><td>2.5.29.17</td>
<td>SubjectAlternativeName</td></tr>
<tr><td>2.5.29.18</td>
<td>IssuerAlternativeName</td></tr>
<tr><td>2.5.29.19</td>
<td>BasicConstraints</td></tr>
<tr><td>2.5.29.30</td>
<td>NameConstraints</td></tr>
<tr><td>2.5.29.33</td>
<td>PolicyMappings</td></tr>
<tr><td>2.5.29.35</td>
<td>AuthorityKeyIdentifier</td></tr>
<tr><td>2.5.29.36</td>
<td>PolicyConstraints</td></tr>
</table>

@param oid the Object Identifier value for the extension.
@return the DER-encoded octet string of the extension value or
null if it is not present.
"
      end
    end

    class 1032066 "X509CRL"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>
Abstract class for an X.509 Certificate Revocation List (CRL).
A CRL is a time-stamped list identifying revoked certificates.
It is signed by a Certificate Authority (CA) and made freely
available in a public repository.

<p>Each revoked certificate is
identified in a CRL by its certificate serial number. When a
certificate-using system uses a certificate (e.g., for verifying a
remote user's digital signature), that system not only checks the
certificate signature and validity but also acquires a suitably-
recent CRL and checks that the certificate serial number is not on
that CRL.  The meaning of \"suitably-recent\" may vary with local
policy, but it usually means the most recently-issued CRL.  A CA
issues a new CRL on a regular periodic basis (e.g., hourly, daily, or
weekly).  Entries are added to CRLs as revocations occur, and an
entry may be removed when the certificate expiration date is reached.
<p>
The X.509 v2 CRL format is described below in ASN.1:
<pre>
CertificateList  ::=  SEQUENCE  {
    tbsCertList          TBSCertList,
    signatureAlgorithm   AlgorithmIdentifier,
    signature            BIT STRING  }
</pre>
<p>
More information can be found in
<a href=\"http://www.ietf.org/rfc/rfc3280.txt\">RFC 3280: Internet X.509
Public Key Infrastructure Certificate and CRL Profile</a>.
<p>
The ASN.1 definition of {@code tbsCertList} is:
<pre>
TBSCertList  ::=  SEQUENCE  {
    version                 Version OPTIONAL,
                            -- if present, must be v2
    signature               AlgorithmIdentifier,
    issuer                  Name,
    thisUpdate              ChoiceOfTime,
    nextUpdate              ChoiceOfTime OPTIONAL,
    revokedCertificates     SEQUENCE OF SEQUENCE  {
        userCertificate         CertificateSerialNumber,
        revocationDate          ChoiceOfTime,
        crlEntryExtensions      Extensions OPTIONAL
                                -- if present, must be v2
        }  OPTIONAL,
    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                 -- if present, must be v2
    }
</pre>
<p>
CRLs are instantiated using a certificate factory. The following is an
example of how to instantiate an X.509 CRL:
<pre>{@code
try (InputStream inStream = new FileInputStream(\"fileName-of-crl\")) {
    CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");
    X509CRL crl = (X509CRL)cf.generateCRL(inStream);
}
}</pre>

@author Hemma Prafullchandra


@see CRL
@see CertificateFactory
@see X509Extension
"
      classrelation 3383682 // <generalisation>
	relation 3383682 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3383682 // <generalisation>
	  b parent class_ref 1026434 // CRL
      end

      classrelation 3383810 // <realization>
	relation 3383810 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3383810 // <realization>
	  b parent class_ref 1031938 // X509Extension
      end

      classrelation 3383938 // issuerPrincipal (<unidirectional association>)
	relation 3383938 --->
	  a role_name "issuerPrincipal" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3383938 // issuerPrincipal (<unidirectional association>)
	  b parent class_ref 833026 // X500Principal
      end

      operation 8065922 "X509CRL"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for X.509 CRLs.
"
      end

      operation 8066050 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this CRL for equality with the given
object. If the {@code other} object is an
{@code instanceof} {@code X509CRL}, then
its encoded form is retrieved and compared with the
encoded form of this CRL.

@param other the object to test for equality with this CRL.

@return true iff the encoded forms of the two CRLs
match, false otherwise.
"
      end

      operation 8066178 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this CRL from its
encoded form.

@return the hashcode value.
"
      end

      operation 8066306 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1026562 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 DER-encoded form of this CRL.

@return the encoded form of this certificate
@exception CRLException if an encoding error occurs.
"
      end

      operation 8066434 "verify"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 765826 // PublicKey
	nexceptions 5
	  exception class_ref 1026562 // CRLException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 509442 // NoSuchProviderException
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this CRL was signed using the
private key that corresponds to the given public key.

@param key the PublicKey used to carry out the verification.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException if there's no default provider.
@exception SignatureException on signature errors.
@exception CRLException on encoding errors.
"
      end

      operation 8066562 "verify"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 765826 // PublicKey
	  param inout name "sigProvider" type class_ref 128130 // String
	nexceptions 5
	  exception class_ref 1026562 // CRLException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 509442 // NoSuchProviderException
	  exception class_ref 1024770 // SignatureException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this CRL was signed using the
private key that corresponds to the given public key.
This method uses the signature verification engine
supplied by the given provider.

@param key the PublicKey used to carry out the verification.
@param sigProvider the name of the signature provider.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception NoSuchProviderException on incorrect provider.
@exception SignatureException on signature errors.
@exception CRLException on encoding errors.
"
      end

      operation 8066690 "verify"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 765826 // PublicKey
	  param inout name "sigProvider" type class_ref 509570 // Provider
	nexceptions 4
	  exception class_ref 1026562 // CRLException
	  exception class_ref 509314 // NoSuchAlgorithmException
	  exception class_ref 1017346 // InvalidKeyException
	  exception class_ref 1024770 // SignatureException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Verifies that this CRL was signed using the
private key that corresponds to the given public key.
This method uses the signature verification engine
supplied by the given provider. Note that the specified Provider object
does not have to be registered in the provider list.

This method was added to version 1.8 of the Java Platform Standard
Edition. In order to maintain backwards compatibility with existing
service providers, this method is not {@code abstract}
and it provides a default implementation.

@param key the PublicKey used to carry out the verification.
@param sigProvider the signature provider.

@exception NoSuchAlgorithmException on unsupported signature
algorithms.
@exception InvalidKeyException on incorrect key.
@exception SignatureException on signature errors.
@exception CRLException on encoding errors.
@since 1.8
"
      end

      operation 8066818 "getVersion"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code version} (version number) value from the CRL.
The ASN.1 definition for this is:
<pre>
version    Version OPTIONAL,
            -- if present, must be v2

Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
            -- v3 does not apply to CRLs but appears for consistency
            -- with definition of Version for certs
</pre>

@return the version number, i.e. 1 or 2.
"
      end

      operation 8066946 "getIssuerDN"
	abstract public return_type class_ref 510594 // Principal
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<strong>Denigrated</strong>, replaced by {@linkplain
#getIssuerX500Principal()}. This method returns the {@code issuer}
as an implementation specific Principal object, which should not be
relied upon by portable code.

<p>
Gets the {@code issuer} (issuer distinguished name) value from
the CRL. The issuer name identifies the entity that signed (and
issued) the CRL.

<p>The issuer name field contains an
X.500 distinguished name (DN).
The ASN.1 definition for this is:
<pre>
issuer    Name

Name ::= CHOICE { RDNSequence }
RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
RelativeDistinguishedName ::=
    SET OF AttributeValueAssertion

AttributeValueAssertion ::= SEQUENCE {
                              AttributeType,
                              AttributeValue }
AttributeType ::= OBJECT IDENTIFIER
AttributeValue ::= ANY
</pre>
The {@code Name} describes a hierarchical name composed of
attributes,
such as country name, and corresponding values, such as US.
The type of the {@code AttributeValue} component is determined by
the {@code AttributeType}; in general it will be a
{@code directoryString}. A {@code directoryString} is usually
one of {@code PrintableString},
{@code TeletexString} or {@code UniversalString}.

@return a Principal whose name is the issuer distinguished name.
"
      end

      operation 8067074 "getIssuerX500Principal"
	public return_type class_ref 833026 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the issuer (issuer distinguished name) value from the
CRL as an {@code X500Principal}.
<p>
It is recommended that subclasses override this method.

@return an {@code X500Principal} representing the issuer
         distinguished name
@since 1.4
"
      end

      operation 8067202 "getThisUpdate"
	abstract public return_type class_ref 521474 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code thisUpdate} date from the CRL.
The ASN.1 definition for this is:
<pre>
thisUpdate   ChoiceOfTime
ChoiceOfTime ::= CHOICE {
    utcTime        UTCTime,
    generalTime    GeneralizedTime }
</pre>

@return the {@code thisUpdate} date from the CRL.
"
      end

      operation 8067330 "getNextUpdate"
	abstract public return_type class_ref 521474 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code nextUpdate} date from the CRL.

@return the {@code nextUpdate} date from the CRL, or null if
not present.
"
      end

      operation 8067458 "getRevokedCertificate"
	abstract public return_type class_ref 1032194 // X509CRLEntry
	nparams 1
	  param inout name "serialNumber" type class_ref 686338 // BigInteger
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the CRL entry, if any, with the given certificate serialNumber.

@param serialNumber the serial number of the certificate for which a CRL entry
is to be looked up
@return the entry with the given serial number, or null if no such entry
exists in this CRL.
@see X509CRLEntry
"
      end

      operation 8067586 "getRevokedCertificate"
	public return_type class_ref 1032194 // X509CRLEntry
	nparams 1
	  param inout name "certificate" type class_ref 767234 // X509Certificate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the CRL entry, if any, for the given certificate.

<p>This method can be used to lookup CRL entries in indirect CRLs,
that means CRLs that contain entries from issuers other than the CRL
issuer. The default implementation will only return entries for
certificates issued by the CRL issuer. Subclasses that wish to
support indirect CRLs should override this method.

@param certificate the certificate for which a CRL entry is to be looked
  up
@return the entry for the given certificate, or null if no such entry
  exists in this CRL.
@exception NullPointerException if certificate is null

@since 1.5
"
      end

      operation 8067714 "getRevokedCertificates"
	abstract public return_type class_ref 192258 // Set
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends X509CRLEntry> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets all the entries from this CRL.
This returns a Set of X509CRLEntry objects.

@return all the entries or null if there are none present.
@see X509CRLEntry
"
      end

      operation 8067842 "getTBSCertList"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1026562 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded CRL information, the
{@code tbsCertList} from this CRL.
This can be used to verify the signature independently.

@return the DER-encoded CRL information.
@exception CRLException if an encoding error occurs.
"
      end

      operation 8067970 "getSignature"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the {@code signature} value (the raw signature bits) from
the CRL.
The ASN.1 definition for this is:
<pre>
signature     BIT STRING
</pre>

@return the signature.
"
      end

      operation 8068098 "getSigAlgName"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm name for the CRL
signature algorithm. An example is the string \"SHA256withRSA\".
The ASN.1 definition for this is:
<pre>
signatureAlgorithm   AlgorithmIdentifier

AlgorithmIdentifier  ::=  SEQUENCE  {
    algorithm               OBJECT IDENTIFIER,
    parameters              ANY DEFINED BY algorithm OPTIONAL  }
                            -- contains a value of the type
                            -- registered for use with the
                            -- algorithm object identifier value
</pre>

<p>The algorithm name is determined from the {@code algorithm}
OID string.

@return the signature algorithm name.
"
      end

      operation 8068226 "getSigAlgOID"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the signature algorithm OID string from the CRL.
An OID is represented by a set of nonnegative whole numbers separated
by periods.
For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1
with DSA signature algorithm defined in
<a href=\"http://www.ietf.org/rfc/rfc3279.txt\">RFC 3279: Algorithms and
Identifiers for the Internet X.509 Public Key Infrastructure Certificate
and CRL Profile</a>.

<p>See {@link #getSigAlgName() getSigAlgName} for
relevant ASN.1 definitions.

@return the signature algorithm OID string.
"
      end

      operation 8068354 "getSigAlgParams"
	abstract public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the DER-encoded signature algorithm parameters from this
CRL's signature algorithm. In most cases, the signature
algorithm parameters are null; the parameters are usually
supplied with the public key.
If access to individual parameter values is needed then use
{@link java.security.AlgorithmParameters AlgorithmParameters}
and instantiate with the name returned by
{@link #getSigAlgName() getSigAlgName}.

<p>See {@link #getSigAlgName() getSigAlgName} for
relevant ASN.1 definitions.

@return the DER-encoded signature algorithm parameters, or
        null if no parameters are present.
"
      end
    end

    class 1032194 "X509CRLEntry"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<p>Abstract class for a revoked certificate in a CRL (Certificate
Revocation List).

The ASN.1 definition for <em>revokedCertificates</em> is:
<pre>
revokedCertificates    SEQUENCE OF SEQUENCE  {
    userCertificate    CertificateSerialNumber,
    revocationDate     ChoiceOfTime,
    crlEntryExtensions Extensions OPTIONAL
                       -- if present, must be v2
}  OPTIONAL

CertificateSerialNumber  ::=  INTEGER

Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension

Extension  ::=  SEQUENCE  {
    extnId        OBJECT IDENTIFIER,
    critical      BOOLEAN DEFAULT FALSE,
    extnValue     OCTET STRING
                  -- contains a DER encoding of a value
                  -- of the type registered for use with
                  -- the extnId object identifier value
}
</pre>

@see X509CRL
@see X509Extension

@author Hemma Prafullchandra
"
      classrelation 3384066 // <realization>
	relation 3384066 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3384066 // <realization>
	  b parent class_ref 1031938 // X509Extension
      end

      operation 8068482 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this CRL entry for equality with the given
object. If the {@code other} object is an
{@code instanceof} {@code X509CRLEntry}, then
its encoded form (the inner SEQUENCE) is retrieved and compared
with the encoded form of this CRL entry.

@param other the object to test for equality with this CRL entry.
@return true iff the encoded forms of the two CRL entries
match, false otherwise.
"
      end

      operation 8068610 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode value for this CRL entry from its
encoded form.

@return the hashcode value.
"
      end

      operation 8068738 "getEncoded"
	abstract public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 1026562 // CRLException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 DER-encoded form of this CRL Entry,
that is the inner SEQUENCE.

@return the encoded form of this certificate
@exception CRLException if an encoding error occurs.
"
      end

      operation 8068866 "getSerialNumber"
	abstract public return_type class_ref 686338 // BigInteger
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the serial number from this X509CRLEntry,
the <em>userCertificate</em>.

@return the serial number.
"
      end

      operation 8068994 "getCertificateIssuer"
	public return_type class_ref 833026 // X500Principal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the issuer of the X509Certificate described by this entry. If
the certificate issuer is also the CRL issuer, this method returns
null.

<p>This method is used with indirect CRLs. The default implementation
always returns null. Subclasses that wish to support indirect CRLs
should override it.

@return the issuer of the X509Certificate described by this entry
or null if it is issued by the CRL issuer.

@since 1.5
"
      end

      operation 8069122 "getRevocationDate"
	abstract public return_type class_ref 521474 // Date
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the revocation date from this X509CRLEntry,
the <em>revocationDate</em>.

@return the revocation date.
"
      end

      operation 8069250 "hasExtensions"
	abstract public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this CRL entry has extensions.

@return true if this entry has extensions, false otherwise.
"
      end

      operation 8069378 "toString"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string representation of this CRL entry.

@return a string representation of this CRL entry.
"
      end

      operation 8069506 "getRevocationReason"
	public return_type class_ref 1027074 // CRLReason
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the reason the certificate has been revoked, as specified
in the Reason Code extension of this CRL entry.

@return the reason the certificate has been revoked, or
   {@code null} if this CRL entry does not have
   a Reason Code extension
@since 1.7
"
      end
    end
  end

  deploymentview 169346 "cert"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 758914 "Certificate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.security.Provider;
import java.security.PublicKey;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.SignatureException;
import sun.security.x509.X509CertImpl;
${definition}"
      associated_elems
	class_ref 319490 // Certificate
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 759042 "CertificateException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_elems
	class_ref 770306 // CertificateException
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 759170 "CertificateEncodingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1025922 // CertificateEncodingException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 759298 "CertificateExpiredException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1026178 // CertificateExpiredException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 759426 "CertificateFactory"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.security.Provider;
import java.security.Security;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_elems
	class_ref 1015810 // CertificateFactory
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 759554 "CertificateFactorySpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InputStream;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.security.Provider;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
${definition}"
      associated_elems
	class_ref 1026306 // CertificateFactorySpi
      end
      comment "Copyright (c) 1998, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 759682 "CertificateNotYetValidException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1026690 // CertificateNotYetValidException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 759810 "CertificateParsingException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1026818 // CertificateParsingException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 759938 "CertificateRevokedException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.IOException;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.security.auth.x500.X500Principal;
import sun.security.util.ObjectIdentifier;
import sun.security.x509.InvalidityDateExtension;
${definition}"
      associated_elems
	class_ref 1026946 // CertificateRevokedException
      end
      comment "Copyright (c) 2007, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 760066 "CertPath"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayInputStream;
import java.io.NotSerializableException;
import java.io.ObjectStreamException;
import java.io.Serializable;
import java.util.Iterator;
import java.util.List;
${definition}"
      associated_elems
	class_ref 833282 // CertPath
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 760194 "CertPathBuilder"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivilegedAction;
import java.security.Provider;
import java.security.Security;
import sun.security.util.Debug;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_elems
	class_ref 1027330 // CertPathBuilder
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 760322 "CertPathBuilderException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_elems
	class_ref 1027842 // CertPathBuilderException
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 760450 "CertPathBuilderResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1027586 // CertPathBuilderResult
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 760578 "CertPathBuilderSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
${definition}"
      associated_elems
	class_ref 1027458 // CertPathBuilderSpi
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 760706 "CertPathChecker"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1027970 // CertPathChecker
      end
      comment "Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 760834 "CertPathHelperImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import sun.security.provider.certpath.CertPathHelper;
import sun.security.x509.GeneralNameInterface;
${definition}"
      associated_elems
	class_ref 1028226 // CertPathHelperImpl
      end
      comment "Copyright (c) 2002, 2009, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 760962 "CertPathParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1027714 // CertPathParameters
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 761090 "CertPathValidator"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivilegedAction;
import java.security.Provider;
import java.security.Security;
import sun.security.util.Debug;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_elems
	class_ref 1028738 // CertPathValidator
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 761218 "CertPathValidatorException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.InvalidObjectException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.security.GeneralSecurityException;
${definition}"
      associated_elems
	class_ref 1028098 // CertPathValidatorException
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 761346 "CertPathValidatorResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1028994 // CertPathValidatorResult
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 761474 "CertPathValidatorSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
${definition}"
      associated_elems
	class_ref 1028866 // CertPathValidatorSpi
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 761602 "CertSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1029378 // CertSelector
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 761730 "CertStore"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivilegedAction;
import java.security.Provider;
import java.security.Security;
import java.util.Collection;
import sun.security.jca.*;
import sun.security.jca.GetInstance.Instance;
${definition}"
      associated_elems
	class_ref 1029506 // CertStore
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 761858 "CertStoreException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_elems
	class_ref 1029890 // CertStoreException
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 761986 "CertStoreParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1029762 // CertStoreParameters
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 762114 "CertStoreSpi"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
import java.util.Collection;
${definition}"
      associated_elems
	class_ref 1029634 // CertStoreSpi
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 762242 "CollectionCertStoreParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
${definition}"
      associated_elems
	class_ref 1030146 // CollectionCertStoreParameters
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 762370 "CRL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1026434 // CRL
      end
      comment "Copyright (c) 1998, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 762498 "CRLException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_elems
	class_ref 1026562 // CRLException
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 762626 "CRLReason"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1027074 // CRLReason
      end
      comment "Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 762754 "CRLSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1030018 // CRLSelector
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 762882 "Extension"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.OutputStream;
import java.io.Serializable;
${definition}"
      associated_elems
	class_ref 1030274 // Extension
      end
      comment "Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 763010 "LDAPCertStoreParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1030402 // LDAPCertStoreParameters
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 763138 "PKIXParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1030658 // PKIXParameters
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 763266 "PKIXBuilderParameters"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidParameterException;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1030530 // PKIXBuilderParameters
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 763394 "PKIXCertPathValidatorResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PublicKey;
${definition}"
      associated_elems
	class_ref 1031170 // PKIXCertPathValidatorResult
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 763522 "PKIXCertPathBuilderResult"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.PublicKey;
${definition}"
      associated_elems
	class_ref 1031042 // PKIXCertPathBuilderResult
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 763650 "PKIXCertPathChecker"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1030914 // PKIXCertPathChecker
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 763778 "PKIXReason"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1031426 // PKIXReason
      end
      comment "Copyright (c) 2008, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 763906 "PKIXRevocationChecker"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.URI;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1031554 // PKIXRevocationChecker
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 764034 "PolicyNode"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1031298 // PolicyNode
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 764162 "PolicyQualifierInfo"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import sun.misc.HexDumpEncoder;
import sun.security.util.DerValue;
${definition}"
      associated_elems
	class_ref 1031810 // PolicyQualifierInfo
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 764290 "TrustAnchor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.security.PublicKey;
import javax.security.auth.x500.X500Principal;
import sun.security.x509.NameConstraintsExtension;
import sun.security.x509.X500Name;
${definition}"
      associated_elems
	class_ref 1030786 // TrustAnchor
      end
      comment "Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 764418 "X509Extension"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Set;
${definition}"
      associated_elems
	class_ref 1031938 // X509Extension
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 764546 "X509Certificate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigInteger;
import java.security.*;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.security.auth.x500.X500Principal;
import sun.security.x509.X509CertImpl;
${definition}"
      associated_elems
	class_ref 767234 // X509Certificate
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 764674 "X509CertSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.math.BigInteger;
import java.security.PublicKey;
import java.util.*;
import javax.security.auth.x500.X500Principal;
import sun.misc.HexDumpEncoder;
import sun.security.util.Debug;
import sun.security.util.DerInputStream;
import sun.security.util.DerValue;
import sun.security.util.ObjectIdentifier;
import sun.security.x509.*;
${definition}"
      associated_elems
	class_ref 1028482 // X509CertSelector
      end
      comment "Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 764802 "X509CRL"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.InvalidKeyException;
import java.security.SignatureException;
import java.security.Principal;
import java.security.Provider;
import java.security.PublicKey;
import javax.security.auth.x500.X500Principal;
import java.math.BigInteger;
import java.util.Date;
import java.util.Set;
import java.util.Arrays;
import sun.security.x509.X509CRLImpl;
${definition}"
      associated_elems
	class_ref 1032066 // X509CRL
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 764930 "X509CRLEntry"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.math.BigInteger;
import java.util.Date;
import javax.security.auth.x500.X500Principal;
import sun.security.x509.X509CRLEntryImpl;
${definition}"
      associated_elems
	class_ref 1032194 // X509CRLEntry
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 765058 "X509CRLSelector"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.math.BigInteger;
import java.util.*;
import javax.security.auth.x500.X500Principal;
import sun.security.util.Debug;
import sun.security.util.DerInputStream;
import sun.security.x509.CRLNumberExtension;
import sun.security.x509.X500Name;
${definition}"
      associated_elems
	class_ref 1028610 // X509CRLSelector
      end
      comment "Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
