format 222
"internal" // jdk1.8::com::sun::jmx::snmp::internal
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/jmx/snmp/internal/"
  java_package "com.sun.jmx.snmp.internal"
  classview 154242 "internal"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 521730 "SnmpAccessControlModel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Access Control Model interface. Every access control model must implement this interface in order to be integrated in the engine based framework.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      classrelation 1050370 // <generalisation>
	relation 1050370 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1050370 // <generalisation>
	  b parent class_ref 530050 // SnmpModel
      end

      operation 3239810 "checkAccess"
	public explicit_return_type "void"
	nparams 7
	  param in name "version" explicit_type "int"
	  param inout name "principal" type class_ref 128130 // String
	  param in name "securityLevel" explicit_type "int"
	  param in name "pduType" explicit_type "int"
	  param in name "securityModel" explicit_type "int"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "oid" type class_ref 514306 // SnmpOid
	nexceptions 1
	  exception class_ref 514434 // SnmpStatusException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method called by the dispatcher in order to control the access at an <CODE>SnmpOid</CODE> Level. If access is not allowed, an <CODE>SnmpStatusException</CODE> is thrown.
This method is called after the <CODE>checkPduAccess</CODE> pdu based method.
@param version The SNMP protocol version number.
@param principal The request principal.
@param securityLevel The request security level as defined in <CODE>SnmpEngine</CODE>.
@param pduType The pdu type (get, set, ...).
@param securityModel The security model ID.
@param contextName The access control context name.
@param oid The OID to check.
"
      end

      operation 3239938 "checkPduAccess"
	public explicit_return_type "void"
	nparams 7
	  param in name "version" explicit_type "int"
	  param inout name "principal" type class_ref 128130 // String
	  param in name "securityLevel" explicit_type "int"
	  param in name "pduType" explicit_type "int"
	  param in name "securityModel" explicit_type "int"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "pdu" type class_ref 513538 // SnmpPdu
	nexceptions 1
	  exception class_ref 514434 // SnmpStatusException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method called by the dispatcher in order to control the access at an SNMP pdu Level. If access is not allowed, an <CODE>SnmpStatusException</CODE> is thrown. In case of exception, the access control is aborted. OIDs are not checked.
This method should be called prior to the <CODE>checkAccess</CODE> OID based method.
@param version The SNMP protocol version number.
@param principal The request principal.
@param securityLevel The request security level as defined in <CODE>SnmpEngine</CODE>.
@param pduType The pdu type (get, set, ...).
@param securityModel The security model ID.
@param contextName The access control context name.
@param pdu The pdu to check.
"
      end

      operation 3240066 "enableSnmpV1V2SetRequest"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enable SNMP V1 and V2 set requests. Be aware that can lead to a security hole in a context of SNMP V3 management. By default SNMP V1 and V2 set requests are not authorized.
@return boolean True the activation suceeded.
"
      end

      operation 3240194 "disableSnmpV1V2SetRequest"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disable SNMP V1 and V2 set requests. By default SNMP V1 and V2 set requests are not authorized.
@return boolean True the deactivation suceeded.
"
      end

      operation 3240322 "isSnmpV1V2SetRequestAuthorized"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The SNMP V1 and V2 set requests authorization status. By default SNMP V1 and V2 set requests are not authorized.
@return boolean True SNMP V1 and V2 requests are authorized.
"
      end
    end

    class 521858 "SnmpEngineImpl"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "This engine is conformant with the RFC 2571. It is the main object within
an SNMP entity (agent, manager...).
To an engine is associated an {@link com.sun.jmx.snmp.SnmpEngineId}.
The way the engineId is retrieved is linked to the way the engine is
instantiated. See each <CODE>SnmpEngine</CODE> constructor for more details.
An engine is composed of a set of sub systems
{@link com.sun.jmx.snmp.internal.SnmpSubSystem}. An <CODE>SNMP</CODE>
engine can contain a:
<ul>
<li> Message Processing Sub System :
{@link com.sun.jmx.snmp.internal.SnmpMsgProcessingSubSystem}</li>
<li> Security Sub System :
{@link com.sun.jmx.snmp.internal.SnmpSecuritySubSystem} </li>
<li> Access Control Sub System :
{@link com.sun.jmx.snmp.internal.SnmpAccessControlSubSystem}</li>
</ul>
<P> Each sub system contains a set of models. A model is an implementation
of a particular treatement (eg: the User based Security Model defined in
RFC 2574 is a functional element dealing with authentication and privacy).
</P>
Engine instantiation is based on a factory. This factory, implementing
mandatorily {@link com.sun.jmx.snmp.SnmpEngineFactory  SnmpEngineFactory}
is set in the method <CODE>setFactory</CODE>.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      classrelation 1050626 // <realization>
	relation 1050626 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1050626 // <realization>
	  b parent class_ref 514818 // SnmpEngine
      end

      classrelation 1050754 // <realization>
	relation 1050754 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1050754 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 681986 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2564301391365614725L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 682114 "noAuthNoPriv"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Security level. No authentication, no privacy. Value is 0,
as defined in RFC 2572

"
      end

      attribute 682242 "authNoPriv"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Security level. Authentication, no privacy. Value is 1, as
defined in RFC 2572

"
      end

      attribute 682370 "authPriv"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Security level. Authentication, privacy. Value is 3,
as defined in RFC 2572

"
      end

      attribute 682498 "reportableFlag"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Flag that indicates that a report is to be sent. Value is 4, as defined in RFC 2572

"
      end

      attribute 682626 "authMask"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Mask used to isolate authentication information within a message flag.

"
      end

      attribute 682754 "privMask"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Mask used to isolate privacy information within a message flag.

"
      end

      attribute 682882 "authPrivMask"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Mask used to isolate authentication and privacy information within a message flag.

"
      end

      classrelation 1050882 // engineid (<unidirectional association>)
	relation 1050882 --->
	  a role_name "engineid" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1050882 // engineid (<unidirectional association>)
	  b parent class_ref 514946 // SnmpEngineId
      end

      classrelation 1051010 // factory (<unidirectional association>)
	relation 1051010 --->
	  a role_name "factory" init_value " null" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1051010 // factory (<unidirectional association>)
	  b parent class_ref 515202 // SnmpEngineFactory
      end

      attribute 683010 "startTime"
	private explicit_type "long"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 683138 "boot"
	private explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 683266 "checkOid"
	private explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 1051138 // usmKeyHandler (<unidirectional association>)
	relation 1051138 --->
	  a role_name "usmKeyHandler" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1051138 // usmKeyHandler (<unidirectional association>)
	  b parent class_ref 515074 // SnmpUsmKeyHandler
      end

      classrelation 1051266 // lcd (<unidirectional association>)
	relation 1051266 --->
	  a role_name "lcd" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1051266 // lcd (<unidirectional association>)
	  b parent class_ref 530562 // SnmpLcd
      end

      classrelation 1051394 // securitySub (<unidirectional association>)
	relation 1051394 --->
	  a role_name "securitySub" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1051394 // securitySub (<unidirectional association>)
	  b parent class_ref 530690 // SnmpSecuritySubSystem
      end

      classrelation 1051522 // messageSub (<unidirectional association>)
	relation 1051522 --->
	  a role_name "messageSub" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1051522 // messageSub (<unidirectional association>)
	  b parent class_ref 530818 // SnmpMsgProcessingSubSystem
      end

      classrelation 1051650 // accessSub (<unidirectional association>)
	relation 1051650 --->
	  a role_name "accessSub" init_value " null" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1051650 // accessSub (<unidirectional association>)
	  b parent class_ref 530306 // SnmpAccessControlSubSystem
      end

      operation 3241474 "getEngineTime"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the engine time in seconds. This is the time from the last reboot.
@return The time from the last reboot.
"
      end

      operation 3241602 "getEngineId"
	public return_type class_ref 514946 // SnmpEngineId
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the engine Id. This is unique for each engine.
@return The engine Id object.
"
      end

      operation 3241730 "getUsmKeyHandler"
	public return_type class_ref 515074 // SnmpUsmKeyHandler
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the Usm key handler.
@return The key handler.
"
      end

      operation 3241858 "getLcd"
	public return_type class_ref 530562 // SnmpLcd
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the engine Lcd.
@return The engine Lcd.
"
      end

      operation 3241986 "getEngineBoots"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the engine boot number. This is the number of time this engine has rebooted. Each time an <CODE>SnmpEngine</CODE> is instantiated, it will read this value in its Lcd, and store back the value incremented by one.
@return The engine's number of reboot.
"
      end

      operation 3242114 "SnmpEngineImpl"
	public explicit_return_type ""
	nparams 3
	  param inout name "fact" type class_ref 515202 // SnmpEngineFactory
	  param inout name "lcd" type class_ref 530562 // SnmpLcd
	  param inout name "engineid" type class_ref 514946 // SnmpEngineId
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine Id, engine boots).
<P> WARNING : The SnmpEngineId is computed as follow:
<ul>
<li> If an lcd file is provided containing the property \"localEngineID\", this property value is used.</li>.
<li> If not, if the passed engineID is not null, this engine ID is used.</li>
<li> If not, a time based engineID is computed.</li>
</ul>
This constructor should be called by an <CODE>SnmpEngineFactory</CODE>. Don't call it directly.
@param fact The factory used to instantiate this engine.
@param lcd The local configuration datastore.
@param engineid The engine ID to use. If null is provided, an SnmpEngineId is computed using the current time.
@throws UnknownHostException Exception thrown, if the host name located in the property \"localEngineID\" is invalid.
"
      end

      operation 3242242 "SnmpEngineImpl"
	public explicit_return_type ""
	nparams 4
	  param inout name "fact" type class_ref 515202 // SnmpEngineFactory
	  param inout name "lcd" type class_ref 530562 // SnmpLcd
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
<P> WARNING : The SnmpEngineId is computed as follow:
<ul>
<li> If an lcd file is provided containing the property \"localEngineID\", this property value is used.</li>.
<li> If not, the passed address and port are used to compute one.</li>
</ul>
This constructor should be called by an <CODE>SnmpEngineFactory</CODE>. Don't call it directly.
@param fact The factory used to instantiate this engine.
@param lcd The local configuration datastore.
@param port UDP port to use in order to calculate the engine ID.
@param address An IP address used to calculate the engine ID.
@throws UnknownHostException Exception thrown, if the host name located in the property \"localEngineID\" is invalid.
"
      end

      operation 3242370 "SnmpEngineImpl"
	public explicit_return_type ""
	nparams 3
	  param inout name "fact" type class_ref 515202 // SnmpEngineFactory
	  param inout name "lcd" type class_ref 530562 // SnmpLcd
	  param in name "port" explicit_type "int"
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
<P> WARNING : The SnmpEngineId is computed as follow:
<ul>
<li> If an lcd file is provided containing the property \"localEngineID\", this property value is used.</li>.
<li> If not, The passed port is used to compute one.</li>
</ul>
This constructor should be called by an <CODE>SnmpEngineFactory</CODE>. Don't call it directly.
@param fact The factory used to instantiate this engine.
@param lcd The local configuration datastore
@param port UDP port to use in order to calculate the engine ID.
@throws UnknownHostException Exception thrown, if the host name located in the property \"localEngineID\" is invalid.
"
      end

      operation 3242498 "SnmpEngineImpl"
	public explicit_return_type ""
	nparams 2
	  param inout name "fact" type class_ref 515202 // SnmpEngineFactory
	  param inout name "lcd" type class_ref 530562 // SnmpLcd
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor. A Local Configuration Datastore is passed to the engine. It will be used to store and retrieve data (engine ID, engine boots).
<P> WARNING : The SnmpEngineId is computed as follow:
<ul>
<li> If an lcd file is provided containing the property \"localEngineID\", this property value is used.</li>.
<li> If not, a time based engineID is computed.</li>
</ul>
When no configuration nor java property is set for the engine ID value, a unique time based engine ID will be generated.
This constructor should be called by an <CODE>SnmpEngineFactory</CODE>. Don't call it directly.
@param fact The factory used to instantiate this engine.
@param lcd The local configuration datastore.
"
      end

      operation 3242626 "activateCheckOid"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Access Control will check the oids. By default is false.
"
      end

      operation 3242754 "deactivateCheckOid"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Access Control will not check the oids. By default is false.
"
      end

      operation 3242882 "isCheckOidActivated"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Access Control check or not the oids. By default is false.
"
      end

      operation 3243010 "storeNBBoots"
	private explicit_return_type "void"
	nparams 1
	  param in name "boot" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Do some check and store the nb boots value."
      end

      operation 3243138 "init"
	private explicit_return_type "void"
	nparams 2
	  param inout name "lcd" type class_ref 530562 // SnmpLcd
	  param inout name "fact" type class_ref 515202 // SnmpEngineFactory
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Initialize internal status."
      end

      operation 3243266 "setUsmKeyHandler"
	package explicit_return_type "void"
	nparams 1
	  param inout name "usmKeyHandler" type class_ref 515074 // SnmpUsmKeyHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 3243394 "initEngineID"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 246786 // UnknownHostException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initialize the engineID."
      end

      operation 3243522 "getMsgProcessingSubSystem"
	public return_type class_ref 530818 // SnmpMsgProcessingSubSystem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Message Processing Sub System.
@return The Message Processing Sub System.
"
      end

      operation 3243650 "setMsgProcessingSubSystem"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sys" type class_ref 530818 // SnmpMsgProcessingSubSystem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the Message Processing Sub System.
@param sys The Message Processing Sub System.
"
      end

      operation 3243778 "getSecuritySubSystem"
	public return_type class_ref 530690 // SnmpSecuritySubSystem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Security Sub System.
@return The Security Sub System.
"
      end

      operation 3243906 "setSecuritySubSystem"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sys" type class_ref 530690 // SnmpSecuritySubSystem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the Security Sub System.
@param sys The Security Sub System.
"
      end

      operation 3244034 "setAccessControlSubSystem"
	public explicit_return_type "void"
	nparams 1
	  param inout name "sys" type class_ref 530306 // SnmpAccessControlSubSystem
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the Access Control Sub System.
@param sys The Access Control Sub System.
"
      end

      operation 3244162 "getAccessControlSubSystem"
	public return_type class_ref 530306 // SnmpAccessControlSubSystem
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Access Control Sub System.
@return The Access Control Sub System.
"
      end

      operation 3244290 "checkSecurityLevel"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "msgFlags" explicit_type "byte"
	nexceptions 1
	  exception class_ref 513666 // SnmpBadSecurityLevelException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks the passed msg flags according to the rules specified in RFC 2572.
@param msgFlags The msg flags.
"
      end
    end

    class 529282 "SnmpIncomingRequest"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P> An <CODE>SnmpIncomingRequest</CODE> handles both sides of an incoming SNMP request:
<ul>
<li> The request. Unmarshalling of the received message. </li>
<li> The response. Marshalling of the message to send. </li>
</ul>
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      operation 3244418 "getSecurityParameters"
	public return_type class_ref 516482 // SnmpSecurityParameters
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Once the incoming request decoded, returns the decoded security parameters.
@return The decoded security parameters.
"
      end

      operation 3244546 "isReport"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if a report is expected.
@return boolean indicating if a report is to be sent.
"
      end

      operation 3244674 "isResponse"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests if a response is expected.
@return boolean indicating if a response is to be sent.
"
      end

      operation 3244802 "noResponse"
	public explicit_return_type "void"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tells this request that no response will be sent.
"
      end

      operation 3244930 "getPrincipal"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming request principal.
@return The request principal.
"
      end

      operation 3245058 "getSecurityLevel"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming request security level. This level is defined in {@link com.sun.jmx.snmp.SnmpEngine SnmpEngine}.
@return The security level.
"
      end

      operation 3245186 "getSecurityModel"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming request security model.
@return The security model.
"
      end

      operation 3245314 "getContextName"
	public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming request context name.
@return The context name.
"
      end

      operation 3245442 "getContextEngineId"
	public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming request context engine Id.
@return The context engine Id.
"
      end

      operation 3245570 "getAccessContext"
	public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming request context name used by Access Control Model in order to allow or deny the access to OIDs.
"
      end

      operation 3245698 "encodeMessage"
	public explicit_return_type "int"
	nparams 1
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 516610 // SnmpTooBigException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes the response message to send and puts the result in the specified byte array.

@param outputBytes An array to receive the resulting encoding.

@exception ArrayIndexOutOfBoundsException If the result does not fit
                                          into the specified array.
"
      end

      operation 3245826 "decodeMessage"
	public explicit_return_type "void"
	nparams 4
	  param inout name "inputBytes" explicit_type "byte"
	multiplicity "[]"
	  param in name "byteCount" explicit_type "int"
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 3
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 520578 // SnmpUnknownSecModelException
	  exception class_ref 513666 // SnmpBadSecurityLevelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes the specified bytes and initializes the request with the incoming message.

@param inputBytes The bytes to be decoded.

@exception SnmpStatusException If the specified bytes are not a valid encoding or if the security applied to this request failed and no report is to be sent (typically trap PDU).
"
      end

      operation 3245954 "encodeSnmpPdu"
	public return_type class_ref 516354 // SnmpMsg
	nparams 2
	  param inout name "p" type class_ref 513538 // SnmpPdu
	  param in name "maxDataLength" explicit_type "int"
	nexceptions 2
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 516610 // SnmpTooBigException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the response to send with the passed Pdu.
<P>
If the encoding length exceeds <CODE>maxDataLength</CODE>,
the method throws an exception.

@param p The PDU to be encoded.
@param maxDataLength The maximum length permitted for the data field.

@exception SnmpStatusException If the specified <CODE>pdu</CODE>
    is not valid.
@exception SnmpTooBigException If the resulting encoding does not fit
into <CODE>maxDataLength</CODE> bytes.
@exception ArrayIndexOutOfBoundsException If the encoding exceeds
  <CODE>maxDataLength</CODE>.
"
      end

      operation 3246082 "decodeSnmpPdu"
	public return_type class_ref 513538 // SnmpPdu
	nparams 0
	nexceptions 1
	  exception class_ref 514434 // SnmpStatusException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the request PDU encoded in the received message.
<P>
This method decodes the data field and returns the resulting PDU.

@return The resulting PDU.
@exception SnmpStatusException If the encoding is not valid.
"
      end

      operation 3246210 "printRequestMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stringified form of the received message.
@return The message state string.
"
      end

      operation 3246338 "printResponseMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stringified form of the message to send.
@return The message state string.
"
      end
    end

    class 530050 "SnmpModel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Interface that every SNMP model must implement in order to be integrated in the engine framework.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      operation 3239554 "getSubSystem"
	public return_type class_ref 530178 // SnmpSubSystem
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sub system that manages this model.
@return The sub system.
"
      end

      operation 3239682 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "A human readable model name.
@return The model name.
"
      end
    end

    class 530178 "SnmpSubSystem"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "SNMP sub system interface. To allow engine framework integration, a sub system must implement this interface. A sub system is a model manager. Every model is identified by an ID. A sub system can retrieve a previously registered model using this ID.
<P> Every sub system is associated to its SNMP engine.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
"
      operation 3240450 "getEngine"
	public return_type class_ref 514818 // SnmpEngine
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the associated engine.
@return The engine.
"
      end

      operation 3240578 "addModel"
	public explicit_return_type "void"
	nparams 2
	  param in name "id" explicit_type "int"
	  param inout name "model" type class_ref 530050 // SnmpModel
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a model to this sub system.
@param id The model ID.
@param model The model to add.
"
      end

      operation 3240706 "removeModel"
	public return_type class_ref 530050 // SnmpModel
	nparams 1
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 520194 // SnmpUnknownModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a model from this sub system.
@param id The model ID to remove.
@return The removed model.
"
      end

      operation 3240834 "getModel"
	public return_type class_ref 530050 // SnmpModel
	nparams 1
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 520194 // SnmpUnknownModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a model from this sub system.
@param id The model ID to get.
@return The model.
"
      end

      operation 3240962 "getModelIds"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of model Ids that have been registered within the sub system.
"
      end

      operation 3241090 "getModelNames"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the set of model names that have been registered within the sub system.
"
      end
    end

    class 530306 "SnmpAccessControlSubSystem"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Access Control sub system interface. To allow engine integration, an Access Control sub system must implement this interface.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      classrelation 1050498 // <generalisation>
	relation 1050498 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1050498 // <generalisation>
	  b parent class_ref 530178 // SnmpSubSystem
      end

      operation 3241218 "checkPduAccess"
	public explicit_return_type "void"
	nparams 7
	  param in name "version" explicit_type "int"
	  param inout name "principal" type class_ref 128130 // String
	  param in name "securityLevel" explicit_type "int"
	  param in name "pduType" explicit_type "int"
	  param in name "securityModel" explicit_type "int"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "pdu" type class_ref 513538 // SnmpPdu
	nexceptions 2
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 520066 // SnmpUnknownAccContrModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method called by the dispatcher in order to control the access at an SNMP pdu Level.
<P> This call is routed by the sub system to the target model according to the SNMP protocol version number.</P>
@param version The SNMP protocol version number.
@param principal The request principal.
@param securityLevel The request security level as defined in <CODE>SnmpEngine</CODE>.
@param pduType The pdu type (get, set, ...).
@param securityModel The security model ID.
@param contextName The access control context name.
@param pdu The pdu to check.
"
      end

      operation 3241346 "checkAccess"
	public explicit_return_type "void"
	nparams 7
	  param in name "version" explicit_type "int"
	  param inout name "principal" type class_ref 128130 // String
	  param in name "securityLevel" explicit_type "int"
	  param in name "pduType" explicit_type "int"
	  param in name "securityModel" explicit_type "int"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "oid" type class_ref 514306 // SnmpOid
	nexceptions 2
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 520066 // SnmpUnknownAccContrModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5}[] ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method called by the dispatcher in order to control the access at an <CODE>SnmpOid</CODE> Level.
This method is called after the <CODE>checkPduAccess</CODE> pdu based method.
<P> This call is routed by the sub system to the target model according to the SNMP protocol version number.</P>
@param version The SNMP protocol version number.
@param principal The request principal.
@param securityLevel The request security level as defined in <CODE>SnmpEngine</CODE>.
@param pduType The pdu type (get, set, ...).
@param securityModel The security model ID.
@param contextName The access control context name.
@param oid The OID to check.
"
      end
    end

    class 530434 "SnmpDecryptedPdu"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Class returned by <CODE>SnmpSecuritySubSystem</CODE> and <CODE>SnmpSecurityModel</CODE>. If privacy is applied, the received pdu must be decrypted. This class contains the field of of a decrypted scoped pdu.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      attribute 681474 "data"
	public explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Decrypted pdu data.

"
      end

      attribute 681602 "dataLength"
	public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Decrypted pdu data length.

"
      end

      attribute 681730 "contextName"
	public explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Decrypted context name.

"
      end

      attribute 681858 "contextEngineId"
	public explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Decrypted context engine Id.

"
      end
    end

    class 530562 "SnmpLcd"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Class to extend in order to develop a customized Local Configuration Datastore. The Lcd is used by the <CODE>SnmpEngine</CODE> to store and retrieve data.
<P> <CODE>SnmpLcd</CODE> manages the Lcds needed by every {@link com.sun.jmx.snmp.internal.SnmpModel SnmpModel}. It is possible to add and remove {@link com.sun.jmx.snmp.internal.SnmpModelLcd SnmpModelLcd}.</P>
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      class 531202 "SubSysLcdManager"
	visibility package 
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 1051778 // models (<unidirectional association>)
	  relation 1051778 --->
	    a role_name "models" init_value "
                new Hashtable<Integer, SnmpModelLcd>()" private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, SnmpModelLcd> ${name}${value};
"
	      classrelation_ref 1051778 // models (<unidirectional association>)
	    b parent class_ref 137090 // Hashtable
	end

	operation 3247874 "addModelLcd"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "id" explicit_type "int"
	    param inout name "usmlcd" type class_ref 531330 // SnmpModelLcd
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3248002 "getModelLcd"
	  public return_type class_ref 531330 // SnmpModelLcd
	  nparams 1
	    param in name "id" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 3248130 "removeModelLcd"
	  public return_type class_ref 531330 // SnmpModelLcd
	  nparams 1
	    param in name "id" explicit_type "int"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1051906 // subs (<unidirectional association>)
	relation 1051906 --->
	  a role_name "subs" init_value "
            new Hashtable<SnmpSubSystem, SubSysLcdManager>()" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<SnmpSubSystem, SubSysLcdManager> ${name}${value};
"
	    classrelation_ref 1051906 // subs (<unidirectional association>)
	  b parent class_ref 137090 // Hashtable
      end

      operation 3248258 "getEngineBoots"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of time the engine rebooted.
@return The number of reboots or -1 if the information is not present in the Lcd.
"
      end

      operation 3248386 "getEngineId"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the engine Id located in the Lcd.
@return The engine Id or null if the information is not present in the Lcd.
"
      end

      operation 3248514 "storeEngineBoots"
	abstract public explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Persists the number of reboots.
@param i Reboot number.
"
      end

      operation 3248642 "storeEngineId"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "id" type class_ref 514946 // SnmpEngineId
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Persists the engine Id.
@param id The engine Id.
"
      end

      operation 3248770 "addModelLcd"
	public explicit_return_type "void"
	nparams 3
	  param inout name "sys" type class_ref 530178 // SnmpSubSystem
	  param in name "id" explicit_type "int"
	  param inout name "lcd" type class_ref 531330 // SnmpModelLcd
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an Lcd model.
@param sys The subsytem managing the model.
@param id The model Id.
@param lcd The Lcd model.
"
      end

      operation 3248898 "removeModelLcd"
	public explicit_return_type "void"
	nparams 2
	  param inout name "sys" type class_ref 530178 // SnmpSubSystem
	  param in name "id" explicit_type "int"
	nexceptions 2
	  exception class_ref 520322 // SnmpUnknownModelLcdException
	  exception class_ref 520706 // SnmpUnknownSubSystemException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes an Lcd model.
@param sys The subsytem managing the model.
@param id The model Id.
"
      end

      operation 3249026 "getModelLcd"
	public return_type class_ref 531330 // SnmpModelLcd
	nparams 2
	  param inout name "sys" type class_ref 530178 // SnmpSubSystem
	  param in name "id" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets an Lcd model.
@param sys The subsytem managing the model
@param id The model Id.
@return The Lcd model or null if no Lcd model were found.
"
      end
    end

    class 530690 "SnmpSecuritySubSystem"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Security sub system interface. To allow engine integration, a security sub system must implement this interface.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
"
      classrelation 1052418 // <generalisation>
	relation 1052418 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1052418 // <generalisation>
	  b parent class_ref 530178 // SnmpSubSystem
      end

      operation 3252994 "createSecurityCache"
	public return_type class_ref 531074 // SnmpSecurityCache
	nparams 1
	  param in name "id" explicit_type "int"
	nexceptions 1
	  exception class_ref 520578 // SnmpUnknownSecModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiates an <CODE>SnmpSecurityCache</CODE> that is dependant to the model implementation. This call is routed to the dedicated model according to the model ID.
@param id The model ID.
@return The model dependant security cache.
"
      end

      operation 3253122 "releaseSecurityCache"
	public explicit_return_type "void"
	nparams 2
	  param in name "id" explicit_type "int"
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	nexceptions 1
	  exception class_ref 520578 // SnmpUnknownSecModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "To release the previously created cache. This call is routed to the dedicated model according to the model ID.
@param id The model ID.
@param cache The security cache to release.
"
      end

      operation 3253250 "generateRequestMsg"
	public explicit_return_type "int"
	nparams 12
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" type class_ref 516482 // SnmpSecurityParameters
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "dataLength" explicit_type "int"
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 4
	  exception class_ref 516610 // SnmpTooBigException
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	  exception class_ref 520578 // SnmpUnknownSecModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10} ${p10}, ${t11}[] ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a request is to be sent to the network. It must be securized. This call is routed to the dedicated model according to the model ID.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param cache The cache that has been created by calling <CODE>createSecurityCache</CODE> on this model.
@param version The SNMP protocol version.
@param msgID The current request id.
@param msgMaxSize The message max size.
@param msgFlags The message flags (reportable, Auth and Priv).
@param msgSecurityModel This current security model.
@param params The security parameters that contain the model dependant parameters.
@param contextEngineID The context engine ID.
@param contextName The context name.
@param data The marshalled varbind list
@param dataLength The marshalled varbind list length.
@param outputBytes The buffer to fill with securized request. This is a representation independant marshalled format. This buffer will be sent to the network.
@return The marshalled byte number.
"
      end

      operation 3253378 "generateResponseMsg"
	public explicit_return_type "int"
	nparams 12
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" type class_ref 516482 // SnmpSecurityParameters
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "dataLength" explicit_type "int"
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 4
	  exception class_ref 516610 // SnmpTooBigException
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	  exception class_ref 520578 // SnmpUnknownSecModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10} ${p10}, ${t11}[] ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a response is to be sent to the network. It must be securized. This call is routed to the dedicated model according to the model ID.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param cache The cache that has been created by calling <CODE>createSecurityCache</CODE> on this model.
@param version The SNMP protocol version.
@param msgID The current request id.
@param msgMaxSize The message max size.
@param msgFlags The message flags (reportable, Auth and Priv).
@param msgSecurityModel This current security model.
@param params The security parameters that contain the model dependant parameters.
@param contextEngineID The context engine ID.
@param contextName The context name.
@param data The marshalled varbind list
@param dataLength The marshalled varbind list length.
@param outputBytes The buffer to fill with securized request. This is a representation independant marshalled format. This buffer will be sent to the network.
@return The marshalled byte number.
"
      end

      operation 3253506 "processIncomingRequest"
	public return_type class_ref 516482 // SnmpSecurityParameters
	nparams 12
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param inout name "encryptedPdu" explicit_type "byte"
	multiplicity "[]"
	  param inout name "decryptedPdu" type class_ref 530434 // SnmpDecryptedPdu
	nexceptions 3
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	  exception class_ref 520578 // SnmpUnknownSecModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10}[] ${p10}, ${t11} ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a request is received from the network. It handles authentication and privacy. This call is routed to the dedicated model according to the model ID.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param cache The cache that has been created by calling <CODE>createSecurityCache</CODE> on this model.
@param version The SNMP protocol version.
@param msgID The current request id.
@param msgMaxSize The message max size.
@param msgFlags The message flags (reportable, Auth and Priv)
@param msgSecurityModel This current security model.
@param params The security parameters in a marshalled format. The informations cointained in this array are model dependant.
@param contextEngineID The context engine ID or null if encrypted.
@param contextName The context name or null if encrypted.
@param data The marshalled varbind list or null if encrypted.
@param encryptedPdu The encrypted pdu or null if not encrypted.
@param decryptedPdu The decrypted pdu. If no decryption is to be done, the passed context engine ID, context name and data could be used to fill this object.
@return The decoded security parameters.

"
      end

      operation 3253634 "processIncomingResponse"
	public return_type class_ref 516482 // SnmpSecurityParameters
	nparams 12
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param inout name "encryptedPdu" explicit_type "byte"
	multiplicity "[]"
	  param inout name "decryptedPdu" type class_ref 530434 // SnmpDecryptedPdu
	nexceptions 3
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	  exception class_ref 520578 // SnmpUnknownSecModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10}[] ${p10}, ${t11} ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a response is received from the network. It handles authentication and privacy. This call is routed to the dedicated model according to the model ID.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param cache The cache that has been created by calling <CODE>createSecurityCache</CODE> on this model.
@param version The SNMP protocol version.
@param msgID The current request id.
@param msgMaxSize The message max size.
@param msgFlags The message flags (reportable, Auth and Priv).
@param msgSecurityModel This current security model.
@param params The security parameters in a marshalled format. The informations cointained in this array are model dependant.
@param contextEngineID The context engine ID or null if encrypted.
@param contextName The context name or null if encrypted.
@param data The marshalled varbind list or null if encrypted.
@param encryptedPdu The encrypted pdu or null if not encrypted.
@param decryptedPdu The decrypted pdu. If no decryption is to be done, the passed context engine ID, context name and data could be used to fill this object.
@return The security parameters.

"
      end
    end

    class 530818 "SnmpMsgProcessingSubSystem"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Message processing sub system interface. To allow engine integration, a message processing sub system must implement this interface. This sub system is called by the dispatcher when receiving or sending calls.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      classrelation 1052162 // <generalisation>
	relation 1052162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1052162 // <generalisation>
	  b parent class_ref 530178 // SnmpSubSystem
      end

      operation 3250434 "setSecuritySubSystem"
	public explicit_return_type "void"
	nparams 1
	  param inout name "security" type class_ref 530690 // SnmpSecuritySubSystem
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attaches the security sub system to this sub system. Message processing model are making usage of various security sub systems. This direct attachement avoid the need of accessing the engine to retrieve the Security sub system.
@param security The security sub system.
"
      end

      operation 3250562 "getSecuritySubSystem"
	public return_type class_ref 530690 // SnmpSecuritySubSystem
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Gets the attached security sub system.
@return The security sub system.
"
      end

      operation 3250690 "getIncomingRequest"
	public return_type class_ref 529282 // SnmpIncomingRequest
	nparams 2
	  param in name "model" explicit_type "int"
	  param inout name "factory" type class_ref 518402 // SnmpPduFactory
	nexceptions 1
	  exception class_ref 520450 // SnmpUnknownMsgProcModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when a call is received from the network.
@param model The model ID.
@param factory The pdu factory to use to encode and decode pdu.
@return The object that will handle every steps of the receiving (mainly unmarshalling and security).
"
      end

      operation 3250818 "getOutgoingRequest"
	public return_type class_ref 531586 // SnmpOutgoingRequest
	nparams 2
	  param in name "model" explicit_type "int"
	  param inout name "factory" type class_ref 518402 // SnmpPduFactory
	nexceptions 1
	  exception class_ref 520450 // SnmpUnknownMsgProcModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when a call is to be sent to the network. The sub system routes the call to the dedicated model according to the model ID.
@param model The model ID.
@param factory The pdu factory to use to encode and decode pdu.
@return The object that will handle every steps of the sending (mainly marshalling and security).
"
      end

      operation 3250946 "getRequestPdu"
	public return_type class_ref 513538 // SnmpPdu
	nparams 3
	  param in name "model" explicit_type "int"
	  param inout name "p" type class_ref 517890 // SnmpParams
	  param in name "type" explicit_type "int"
	nexceptions 2
	  exception class_ref 520450 // SnmpUnknownMsgProcModelException
	  exception class_ref 514434 // SnmpStatusException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called to instantiate a pdu according to the passed pdu type and parameters. The sub system routes the call to the dedicated model according to the model ID.
@param model The model ID.
@param p The request parameters.
@param type The pdu type.
@return The pdu.
"
      end

      operation 3251074 "getIncomingResponse"
	public return_type class_ref 530946 // SnmpIncomingResponse
	nparams 2
	  param in name "model" explicit_type "int"
	  param inout name "factory" type class_ref 518402 // SnmpPduFactory
	nexceptions 1
	  exception class_ref 520450 // SnmpUnknownMsgProcModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when a call is received from the network. The sub system routes the call to the dedicated model according to the model ID.
@param model The model ID.
@param factory The pdu factory to use to decode pdu.
@return The object that will handle every steps of the receiving (mainly marshalling and security).
"
      end

      operation 3251202 "encode"
	public explicit_return_type "int"
	nparams 11
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" type class_ref 516482 // SnmpSecurityParameters
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "dataLength" explicit_type "int"
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 516610 // SnmpTooBigException
	  exception class_ref 520450 // SnmpUnknownMsgProcModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9} ${p9}, ${t10}[] ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called to encode a full scoped pdu that as not been encrypted. <CODE>contextName</CODE>, <CODE>contextEngineID</CODE> and data are known. It will be routed to the dedicated model according to the version value.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param version The SNMP protocol version.
@param msgID The SNMP message ID.
@param msgMaxSize The max message size.
@param msgFlags The message flags.
@param msgSecurityModel The message security model.
@param params The security parameters.
@param contextEngineID The context engine ID.
@param contextName The context name.
@param data The encoded data.
@param dataLength The encoded data length.
@param outputBytes The buffer containing the encoded message.
@return The encoded bytes number.
"
      end

      operation 3251330 "encodePriv"
	public explicit_return_type "int"
	nparams 8
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" type class_ref 516482 // SnmpSecurityParameters
	  param inout name "encryptedPdu" explicit_type "byte"
	multiplicity "[]"
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 516610 // SnmpTooBigException
	  exception class_ref 520450 // SnmpUnknownMsgProcModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called to encode a full scoped pdu that as been encrypted. <CODE>contextName</CODE>, <CODE>contextEngineID</CODE> and data are not known. It will be routed to the dedicated model according to the version value.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param version The SNMP protocol version.
@param msgID The SNMP message ID.
@param msgMaxSize The max message size.
@param msgFlags The message flags.
@param msgSecurityModel The message security model.
@param params The security parameters.
@param encryptedPdu The encrypted pdu.
@param outputBytes The buffer containing the encoded message.
@return The encoded bytes number.
"
      end

      operation 3251458 "decode"
	public return_type class_ref 530434 // SnmpDecryptedPdu
	nparams 2
	  param in name "version" explicit_type "int"
	  param inout name "pdu" explicit_type "byte"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 520450 // SnmpUnknownMsgProcModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method returns a decoded scoped pdu. This method decodes only the <CODE>contextEngineID</CODE>, <CODE>contextName</CODE> and data. It is needed by the <CODE>SnmpSecurityModel</CODE> after decryption. It will be routed to the dedicated model according to the version value.
@param version The SNMP protocol version.
@param pdu The encoded pdu.
@return the partialy scoped pdu.
"
      end

      operation 3251586 "encode"
	public explicit_return_type "int"
	nparams 3
	  param in name "version" explicit_type "int"
	  param inout name "pdu" type class_ref 530434 // SnmpDecryptedPdu
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 516610 // SnmpTooBigException
	  exception class_ref 520450 // SnmpUnknownMsgProcModelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method returns an encoded scoped pdu. This method encodes only the <CODE>contextEngineID</CODE>, <CODE>contextName</CODE> and data. It is needed by the <CODE>SnmpSecurityModel</CODE> for decryption. It will be routed to the dedicated model according to the version value.
@param version The SNMP protocol version.
@param pdu The pdu to encode.
@param outputBytes The partialy scoped pdu.
@return The encoded bytes number.
"
      end
    end

    class 530946 "SnmpIncomingResponse"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P> An <CODE>SnmpIncomingResponse</CODE> handles the unmarshalling of the received response.</P>
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      operation 3246466 "getAddress"
	public return_type class_ref 513154 // InetAddress
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the source address.
@return The source address.
"
      end

      operation 3246594 "getPort"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the source port.
@return The source port.
"
      end

      operation 3246722 "getSecurityParameters"
	public return_type class_ref 516482 // SnmpSecurityParameters
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming response security parameters.
@return The security parameters.
"
      end

      operation 3246850 "setSecurityCache"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call this method in order to reuse <CODE>SnmpOutgoingRequest</CODE> cache.
@param cache The security cache.
"
      end

      operation 3246978 "getSecurityLevel"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming response security level. This level is defined in
{@link com.sun.jmx.snmp.SnmpEngine SnmpEngine}.
@return The security level.
"
      end

      operation 3247106 "getSecurityModel"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming response security model.
@return The security model.
"
      end

      operation 3247234 "getContextName"
	public explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the incoming response context name.
@return The context name.
"
      end

      operation 3247362 "decodeMessage"
	public return_type class_ref 516354 // SnmpMsg
	nparams 4
	  param inout name "inputBytes" explicit_type "byte"
	multiplicity "[]"
	  param in name "byteCount" explicit_type "int"
	  param inout name "address" type class_ref 513154 // InetAddress
	  param in name "port" explicit_type "int"
	nexceptions 2
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes the specified bytes and initializes itself with the received
response.

@param inputBytes The bytes to be decoded.

@exception SnmpStatusException If the specified bytes are not a valid encoding.
"
      end

      operation 3247490 "decodeSnmpPdu"
	public return_type class_ref 513538 // SnmpPdu
	nparams 0
	nexceptions 1
	  exception class_ref 514434 // SnmpStatusException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the request PDU encoded in the received response.
<P>
This method decodes the data field and returns the resulting PDU.

@return The resulting PDU.
@exception SnmpStatusException If the encoding is not valid.
"
      end

      operation 3247618 "getRequestId"
	public explicit_return_type "int"
	nparams 1
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 514434 // SnmpStatusException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the response request Id.
@param data The flat message.
@return The request Id.
"
      end

      operation 3247746 "printMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stringified form of the message to send.
@return The message state string.
"
      end
    end

    class 531074 "SnmpSecurityCache"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Cache is returned by <CODE>SnmpSecurityModel</CODE> when handling requests. The cache contants is security dependant. This interface is a marker that every cache classes must implement.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
    end

    class 531330 "SnmpModelLcd"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An interface to implement when developping customized model configuration datastore.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
    end

    class 531458 "SnmpMsgProcessingModel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The message processing model interface. Any message processing model must implement this interface in order to be integrated in the engine framework.
The model is called by the dispatcher when a call is received or when a call is sent.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      classrelation 1052034 // <generalisation>
	relation 1052034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1052034 // <generalisation>
	  b parent class_ref 530050 // SnmpModel
      end

      operation 3249154 "getOutgoingRequest"
	public return_type class_ref 531586 // SnmpOutgoingRequest
	nparams 1
	  param inout name "factory" type class_ref 518402 // SnmpPduFactory
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when a call is to be sent to the network.
@param factory The pdu factory to use to encode and decode pdu.
@return The object that will handle every steps of the sending (mainly marshalling and security).
"
      end

      operation 3249282 "getIncomingRequest"
	public return_type class_ref 529282 // SnmpIncomingRequest
	nparams 1
	  param inout name "factory" type class_ref 518402 // SnmpPduFactory
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when a call is received from the network.
@param factory The pdu factory to use to encode and decode pdu.
@return The object that will handle every steps of the receiving (mainly unmarshalling and security).
"
      end

      operation 3249410 "getIncomingResponse"
	public return_type class_ref 530946 // SnmpIncomingResponse
	nparams 1
	  param inout name "factory" type class_ref 518402 // SnmpPduFactory
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when a response is received from the network.
@param factory The pdu factory to use to encode and decode pdu.
@return The object that will handle every steps of the receiving (mainly unmarshalling and security).
"
      end

      operation 3249538 "getRequestPdu"
	public return_type class_ref 513538 // SnmpPdu
	nparams 2
	  param inout name "p" type class_ref 517890 // SnmpParams
	  param in name "type" explicit_type "int"
	nexceptions 1
	  exception class_ref 514434 // SnmpStatusException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called to instantiate a pdu according to the passed pdu type and parameters.
@param p The request parameters.
@param type The pdu type.
@return The pdu.
"
      end

      operation 3249666 "encode"
	public explicit_return_type "int"
	nparams 11
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" type class_ref 516482 // SnmpSecurityParameters
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "dataLength" explicit_type "int"
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 516610 // SnmpTooBigException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9} ${p9}, ${t10}[] ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called to encode a full scoped pdu that has not been encrypted. <CODE>contextName</CODE>, <CODE>contextEngineID</CODE> and data are known.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param version The SNMP protocol version.
@param msgID The SNMP message ID.
@param msgMaxSize The max message size.
@param msgFlags The message flags.
@param msgSecurityModel The message security model.
@param params The security parameters.
@param contextEngineID The context engine ID.
@param contextName The context name.
@param data The encoded data.
@param dataLength The encoded data length.
@param outputBytes The buffer containing the encoded message.
@return The encoded bytes number.
"
      end

      operation 3249794 "encodePriv"
	public explicit_return_type "int"
	nparams 8
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" type class_ref 516482 // SnmpSecurityParameters
	  param inout name "encryptedPdu" explicit_type "byte"
	multiplicity "[]"
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 516610 // SnmpTooBigException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called to encode a full scoped pdu that as been encrypted. <CODE>contextName</CODE>, <CODE>contextEngineID</CODE> and data are known.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param version The SNMP protocol version.
@param msgID The SNMP message ID.
@param msgMaxSize The max message size.
@param msgFlags The message flags.
@param msgSecurityModel The message security model.
@param params The security parameters.
@param encryptedPdu The encrypted pdu.
@param outputBytes The buffer containing the encoded message.
@return The encoded bytes number.
"
      end

      operation 3249922 "decode"
	public return_type class_ref 530434 // SnmpDecryptedPdu
	nparams 1
	  param inout name "pdu" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 514434 // SnmpStatusException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method returns a decoded scoped pdu. This method decodes only the <CODE>contextEngineID</CODE>, <CODE>contextName</CODE> and data. It is needed by the <CODE>SnmpSecurityModel</CODE> after decryption.
@param pdu The encoded pdu.
@return The partialy scoped pdu.
"
      end

      operation 3250050 "encode"
	public explicit_return_type "int"
	nparams 2
	  param inout name "pdu" type class_ref 530434 // SnmpDecryptedPdu
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 516610 // SnmpTooBigException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method returns an encoded scoped pdu. This method encode only the <CODE>contextEngineID</CODE>, <CODE>contextName</CODE> and data. It is needed by the <CODE>SnmpSecurityModel</CODE> for decryption.
@param pdu The pdu to encode.
@param outputBytes The partialy scoped pdu.
@return The encoded bytes number.
"
      end

      operation 3250178 "setMsgTranslator"
	public explicit_return_type "void"
	nparams 1
	  param inout name "translator" type class_ref 531714 // SnmpMsgTranslator
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "In order to change the behavior of the translator, set it.
@param translator The translator that will be used.
"
      end

      operation 3250306 "getMsgTranslator"
	public return_type class_ref 531714 // SnmpMsgTranslator
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current translator.
@return The current translator.
"
      end
    end

    class 531586 "SnmpOutgoingRequest"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "<P> An <CODE>SnmpOutgoingRequest</CODE> handles the marshalling of the message to send.</P>
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      operation 3251714 "getSecurityCache"
	public return_type class_ref 531074 // SnmpSecurityCache
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cached security data used when marshalling the call as a secure one.
@return The cached data.
"
      end

      operation 3251842 "encodeMessage"
	public explicit_return_type "int"
	nparams 1
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 5
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 516610 // SnmpTooBigException
	  exception class_ref 519682 // SnmpSecurityException
	  exception class_ref 520578 // SnmpUnknownSecModelException
	  exception class_ref 513666 // SnmpBadSecurityLevelException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes the message to send and puts the result in the specified byte array.

@param outputBytes An array to receive the resulting encoding.

@exception ArrayIndexOutOfBoundsException If the result does not fit
                                          into the specified array.
"
      end

      operation 3251970 "encodeSnmpPdu"
	public return_type class_ref 516354 // SnmpMsg
	nparams 2
	  param inout name "p" type class_ref 513538 // SnmpPdu
	  param in name "maxDataLength" explicit_type "int"
	nexceptions 2
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 516610 // SnmpTooBigException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes the message to send with the passed Pdu.
<P>
If the encoding length exceeds <CODE>maxDataLength</CODE>,
the method throws an exception.</P>

@param p The PDU to be encoded.
@param maxDataLength The maximum length permitted for the data field.

@exception SnmpStatusException If the specified PDU <CODE>p</CODE> is
   not valid.
@exception SnmpTooBigException If the resulting encoding does not fit
   into <CODE>maxDataLength</CODE> bytes.
@exception ArrayIndexOutOfBoundsException If the encoding exceeds
   <CODE>maxDataLength</CODE>.
"
      end

      operation 3252098 "printMessage"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a stringified form of the message to send.
@return The message state string.
"
      end
    end

    class 531842 "SnmpSecurityModel"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Security model interface. Any security model implementation must implement this interface in order to be integrated in the engine framework. Security models are called when SNMP messages are received or sent. They deal with security (authentication and privacy).
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      classrelation 1052290 // <generalisation>
	relation 1052290 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 1052290 // <generalisation>
	  b parent class_ref 530050 // SnmpModel
      end

      operation 3252226 "generateRequestMsg"
	public explicit_return_type "int"
	nparams 12
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" type class_ref 516482 // SnmpSecurityParameters
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "dataLength" explicit_type "int"
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 516610 // SnmpTooBigException
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10} ${p10}, ${t11}[] ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a request is to be sent to the network. It must be securized.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param cache The cache that has been created by calling <CODE>createSecurityCache</CODE> on this model.
@param version The SNMP protocol version.
@param msgID The current request id.
@param msgMaxSize The message max size.
@param msgFlags The message flags (reportable, Auth and Priv).
@param msgSecurityModel This current security model.
@param params The security parameters that contain the model dependant parameters.
@param contextEngineID The context engine ID.
@param contextName The context name.
@param data The marshalled varbind list.
@param dataLength The marshalled varbind list length.
@param outputBytes The buffer to fill with securized request. This is a representation independant marshalled format. This buffer will be sent to the network.
@return The marshalled byte number.
"
      end

      operation 3252354 "generateResponseMsg"
	public explicit_return_type "int"
	nparams 12
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" type class_ref 516482 // SnmpSecurityParameters
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "dataLength" explicit_type "int"
	  param inout name "outputBytes" explicit_type "byte"
	multiplicity "[]"
	nexceptions 3
	  exception class_ref 516610 // SnmpTooBigException
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10} ${p10}, ${t11}[] ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a response is to be sent to the network. It must be securized.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param cache The cache that has been created by calling <CODE>createSecurityCache</CODE> on this model.
@param version The SNMP protocol version.
@param msgID The current request id.
@param msgMaxSize The message max size.
@param msgFlags The message flags (reportable, Auth and Priv)
@param msgSecurityModel This current security model.
@param params The security parameters that contain the model dependant parameters.
@param contextEngineID The context engine ID.
@param contextName The context name.
@param data The marshalled varbind list.
@param dataLength The marshalled varbind list length.
@param outputBytes The buffer to fill with securized request. This is a representation independant marshalled format. This buffer will be sent to the network.
@return The marshalled byte number.
"
      end

      operation 3252482 "processIncomingRequest"
	public return_type class_ref 516482 // SnmpSecurityParameters
	nparams 12
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param inout name "encryptedPdu" explicit_type "byte"
	multiplicity "[]"
	  param inout name "decryptedPdu" type class_ref 530434 // SnmpDecryptedPdu
	nexceptions 2
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10}[] ${p10}, ${t11} ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a request is received from the network. It handles authentication and privacy.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param cache The cache that has been created by calling <CODE>createSecurityCache</CODE> on this model.
@param version The SNMP protocol version.
@param msgID The current request id.
@param msgMaxSize The message max size.
@param msgFlags The message flags (reportable, Auth and Priv)
@param msgSecurityModel This current security model.
@param params The security parameters in a marshalled format. The informations contained in this array are model dependant.
@param contextEngineID The context engine ID or null if encrypted.
@param contextName The context name or null if encrypted.
@param data The marshalled varbind list or null if encrypted
@param encryptedPdu The encrypted pdu or null if not encrypted.
@param decryptedPdu The decrypted pdu. If no decryption is to be done, the passed context engine ID, context name and data could be used to fill this object.
@return The decoded security parameters.

"
      end

      operation 3252610 "processIncomingResponse"
	public return_type class_ref 516482 // SnmpSecurityParameters
	nparams 12
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	  param in name "version" explicit_type "int"
	  param in name "msgID" explicit_type "int"
	  param in name "msgMaxSize" explicit_type "int"
	  param in name "msgFlags" explicit_type "byte"
	  param in name "msgSecurityModel" explicit_type "int"
	  param inout name "params" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextEngineID" explicit_type "byte"
	multiplicity "[]"
	  param inout name "contextName" explicit_type "byte"
	multiplicity "[]"
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param inout name "encryptedPdu" explicit_type "byte"
	multiplicity "[]"
	  param inout name "decryptedPdu" type class_ref 530434 // SnmpDecryptedPdu
	nexceptions 2
	  exception class_ref 514434 // SnmpStatusException
	  exception class_ref 519682 // SnmpSecurityException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10}[] ${p10}, ${t11} ${p11}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when a response is received from the network. It handles authentication and privacy.
<BR>The specified parameters are defined in RFC 2572 (see also the {@link com.sun.jmx.snmp.SnmpV3Message} class).
@param cache The cache that has been created by calling <CODE>createSecurityCache</CODE> on this model.
@param version The SNMP protocol version.
@param msgID The current request id.
@param msgMaxSize The message max size.
@param msgFlags The message flags (reportable, Auth and Priv)
@param msgSecurityModel This current security model.
@param params The security parameters in a marshalled format. The informations cointained in this array are model dependant.
@param contextEngineID The context engine ID or null if encrypted.
@param contextName The context name or null if encrypted.
@param data The marshalled varbind list or null if encrypted
@param encryptedPdu The encrypted pdu or null if not encrypted.
@param decryptedPdu The decrypted pdu. If no decryption is to be done, the passed context engine ID, context name and data could be used to fill this object.
@return The security parameters.

"
      end

      operation 3252738 "createSecurityCache"
	public return_type class_ref 531074 // SnmpSecurityCache
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Instantiate an <CODE>SnmpSecurityCache</CODE> that is dependant to the model implementation.
@return The model dependant security cache.
"
      end

      operation 3252866 "releaseSecurityCache"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cache" type class_ref 531074 // SnmpSecurityCache
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Release the previously created cache.
@param cache The security cache to release.
"
      end
    end

    class 531970 "SnmpTools"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Utility class used to deal with various data representations.
<p><b>This API is a Sun Microsystems internal API  and is subject
to change without notice.</b></p>
@since 1.5
"
      classrelation 1052546 // <realization>
	relation 1052546 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 1052546 // <realization>
	  b parent class_ref 514690 // SnmpDefinitions
      end

      operation 3253762 "binary2ascii"
	class_operation public return_type class_ref 128130 // String
	nparams 2
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	  param in name "length" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a binary representation in an ASCII one. The returned string is an hexadecimal string starting with 0x.
@param data Binary to translate.
@return Translated binary.
"
      end

      operation 3253890 "binary2ascii"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param inout name "data" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a binary representation in an ASCII one. The returned string is an hexadecimal string starting with 0x.
@param data Binary to translate.
@return Translated binary.
"
      end

      operation 3254018 "ascii2binary"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param inout name "str" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates a stringified representation in a binary one. The passed string is an hexadecimal one starting with 0x.
@param str String to translate.
@return Translated string.
"
      end
    end
  end

  deploymentview 148226 "internal"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 350338 "SnmpModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 530050 // SnmpModel
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 350466 "SnmpAccessControlModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpOid;
import com.sun.jmx.snmp.SnmpPdu;
${definition}"
      associated_elems
	class_ref 521730 // SnmpAccessControlModel
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 350594 "SnmpSubSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.snmp.SnmpEngine;
import com.sun.jmx.snmp.SnmpUnknownModelException;
import java.util.Hashtable;
${definition}"
      associated_elems
	class_ref 530178 // SnmpSubSystem
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 350722 "SnmpAccessControlSubSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpOid;
import com.sun.jmx.snmp.SnmpPdu;
import com.sun.jmx.snmp.SnmpUnknownAccContrModelException;
${definition}"
      associated_elems
	class_ref 530306 // SnmpAccessControlSubSystem
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 350850 "SnmpDecryptedPdu"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 530434 // SnmpDecryptedPdu
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 350978 "SnmpEngineImpl"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Hashtable;
import java.util.logging.Level;
import java.io.Serializable;
import com.sun.jmx.snmp.SnmpDefinitions;
import com.sun.jmx.snmp.SnmpEngineId;
import com.sun.jmx.snmp.SnmpEngine;
import com.sun.jmx.snmp.SnmpUsmKeyHandler;
import com.sun.jmx.snmp.SnmpEngineFactory;
import com.sun.jmx.snmp.SnmpUnknownModelException;
import com.sun.jmx.snmp.internal.SnmpTools;
import com.sun.jmx.snmp.SnmpBadSecurityLevelException;
import static com.sun.jmx.defaults.JmxProperties.SNMP_LOGGER;
${definition}"
      associated_elems
	class_ref 521858 // SnmpEngineImpl
      end
      comment "Copyright (c) 2001, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 351106 "SnmpIncomingRequest"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.InetAddress;
import com.sun.jmx.snmp.SnmpSecurityParameters;
import com.sun.jmx.snmp.SnmpTooBigException;
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpPdu;
import com.sun.jmx.snmp.SnmpMsg;
import com.sun.jmx.snmp.SnmpUnknownSecModelException;
import com.sun.jmx.snmp.SnmpBadSecurityLevelException;
${definition}"
      associated_elems
	class_ref 529282 // SnmpIncomingRequest
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 351234 "SnmpIncomingResponse"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.InetAddress;
import com.sun.jmx.snmp.SnmpPduFactory;
import com.sun.jmx.snmp.SnmpSecurityParameters;
import com.sun.jmx.snmp.SnmpSecurityException;
import com.sun.jmx.snmp.SnmpTooBigException;
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpPdu;
import com.sun.jmx.snmp.SnmpMsg;
import com.sun.jmx.snmp.internal.SnmpSecurityCache;
import com.sun.jmx.snmp.SnmpBadSecurityLevelException;
${definition}"
      associated_elems
	class_ref 530946 // SnmpIncomingResponse
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 351362 "SnmpLcd"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Hashtable;
import com.sun.jmx.snmp.SnmpEngineId;
import com.sun.jmx.snmp.SnmpUnknownModelLcdException;
import com.sun.jmx.snmp.SnmpUnknownSubSystemException;
${definition}"
      associated_elems
	class_ref 530562 // SnmpLcd
      end
      comment "Copyright (c) 2001, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 351490 "SnmpModelLcd"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 531330 // SnmpModelLcd
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 351618 "SnmpMsgProcessingModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.snmp.mpm.SnmpMsgTranslator;
import com.sun.jmx.snmp.SnmpTooBigException;
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpPdu;
import com.sun.jmx.snmp.SnmpPduFactory;
import com.sun.jmx.snmp.SnmpSecurityParameters;
import com.sun.jmx.snmp.SnmpParams;
${definition}"
      associated_elems
	class_ref 531458 // SnmpMsgProcessingModel
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 351746 "SnmpMsgProcessingSubSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Vector;
import com.sun.jmx.snmp.SnmpMsg;
import com.sun.jmx.snmp.SnmpParams;
import com.sun.jmx.snmp.SnmpPdu;
import com.sun.jmx.snmp.SnmpVarBind;
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpTooBigException;
import com.sun.jmx.snmp.SnmpPduFactory;
import com.sun.jmx.snmp.SnmpSecurityParameters;
import com.sun.jmx.snmp.SnmpUnknownMsgProcModelException;
${definition}"
      associated_elems
	class_ref 530818 // SnmpMsgProcessingSubSystem
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 351874 "SnmpOutgoingRequest"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.net.InetAddress;
import com.sun.jmx.snmp.SnmpSecurityException;
import com.sun.jmx.snmp.SnmpTooBigException;
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpPdu;
import com.sun.jmx.snmp.SnmpMsg;
import com.sun.jmx.snmp.internal.SnmpSecurityCache;
import com.sun.jmx.snmp.SnmpUnknownSecModelException;
import com.sun.jmx.snmp.SnmpBadSecurityLevelException;
${definition}"
      associated_elems
	class_ref 531586 // SnmpOutgoingRequest
      end
      comment "Copyright (c) 2001, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 352002 "SnmpSecurityCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 531074 // SnmpSecurityCache
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 352130 "SnmpSecurityModel"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.snmp.SnmpSecurityException;
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpTooBigException;
import com.sun.jmx.snmp.SnmpSecurityParameters;
${definition}"
      associated_elems
	class_ref 531842 // SnmpSecurityModel
      end
      comment "Copyright (c) 2001, 2003, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 352258 "SnmpSecuritySubSystem"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.snmp.SnmpTooBigException;
import com.sun.jmx.snmp.SnmpStatusException;
import com.sun.jmx.snmp.SnmpUnknownSecModelException;
import com.sun.jmx.snmp.SnmpSecurityException;
import com.sun.jmx.snmp.SnmpSecurityParameters;
${definition}"
      associated_elems
	class_ref 530690 // SnmpSecuritySubSystem
      end
      comment "Copyright (c) 2001, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 352386 "SnmpTools"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import com.sun.jmx.snmp.SnmpDefinitions;
${definition}"
      associated_elems
	class_ref 531970 // SnmpTools
      end
      comment "Copyright (c) 2001, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
