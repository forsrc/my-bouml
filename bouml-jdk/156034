format 222
"runtime" // jdk1.8::com::sun::java_cup::internal::runtime
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/com/sun/java_cup/internal/runtime/"
  java_package "com.sun.java_cup.internal.runtime"
  classview 151298 "runtime"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 480258 "lr_parser"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class implements a skeleton table driven LR parser.  In general,
 LR parsers are a form of bottom up shift-reduce parsers.  Shift-reduce
 parsers act by shifting input onto a parse stack until the Symbols
 matching the right hand side of a production appear on the top of the
 stack.  Once this occurs, a reduce is performed.  This involves removing
 the Symbols corresponding to the right hand side of the production
 (the so called \"handle\") and replacing them with the non-terminal from
 the left hand side of the production.  <p>

 To control the decision of whether to shift or reduce at any given point,
 the parser uses a state machine (the \"viable prefix recognition machine\"
 built by the parser generator).  The current state of the machine is placed
 on top of the parse stack (stored as part of a Symbol object representing
 a terminal or non terminal).  The parse action table is consulted
 (using the current state and the current lookahead Symbol as indexes) to
 determine whether to shift or to reduce.  When the parser shifts, it
 changes to a new state by pushing a new Symbol (containing a new state)
 onto the stack.  When the parser reduces, it pops the handle (right hand
 side of a production) off the stack.  This leaves the parser in the state
 it was in before any of those Symbols were matched.  Next the reduce-goto
 table is consulted (using the new state and current lookahead Symbol as
 indexes) to determine a new state to go to.  The parser then shifts to
 this goto state by pushing the left hand side Symbol of the production
 (also containing the new state) onto the stack.<p>

 This class actually provides four LR parsers.  The methods parse() and
 debug_parse() provide two versions of the main parser (the only difference
 being that debug_parse() emits debugging trace messages as it parses).
 In addition to these main parsers, the error recovery mechanism uses two
 more.  One of these is used to simulate \"parsing ahead\" in the input
 without carrying out actions (to verify that a potential error recovery
 has worked), and the other is used to parse through buffered \"parse ahead\"
 input in order to execute all actions and re-synchronize the actual parser
 configuration.<p>

 This is an abstract class which is normally filled out by a subclass
 generated by the JavaCup parser generator.  In addition to supplying
 the actual parse tables, generated code also supplies methods which
 invoke various pieces of user supplied code, provide access to certain
 special Symbols (e.g., EOF and error), etc.  Specifically, the following
 abstract methods are normally supplied by generated code:
 <dl compact>
 <dt> short[][] production_table()
 <dd> Provides a reference to the production table (indicating the index of
      the left hand side non terminal and the length of the right hand side
      for each production in the grammar).
 <dt> short[][] action_table()
 <dd> Provides a reference to the parse action table.
 <dt> short[][] reduce_table()
 <dd> Provides a reference to the reduce-goto table.
 <dt> int start_state()
 <dd> Indicates the index of the start state.
 <dt> int start_production()
 <dd> Indicates the index of the starting production.
 <dt> int EOF_sym()
 <dd> Indicates the index of the EOF Symbol.
 <dt> int error_sym()
 <dd> Indicates the index of the error Symbol.
 <dt> Symbol do_action()
 <dd> Executes a piece of user supplied action code.  This always comes at
      the point of a reduce in the parse, so this code also allocates and
      fills in the left hand side non terminal Symbol object that is to be
      pushed onto the stack for the reduce.
 <dt> void init_actions()
 <dd> Code to initialize a special object that encapsulates user supplied
      actions (this object is used by do_action() to actually carry out the
      actions).
 </dl>

 In addition to these routines that <i>must</i> be supplied by the
 generated subclass there are also a series of routines that <i>may</i>
 be supplied.  These include:
 <dl>
 <dt> Symbol scan()
 <dd> Used to get the next input Symbol from the scanner.
 <dt> Scanner getScanner()
 <dd> Used to provide a scanner for the default implementation of
      scan().
 <dt> int error_sync_size()
 <dd> This determines how many Symbols past the point of an error
      must be parsed without error in order to consider a recovery to
      be valid.  This defaults to 3.  Values less than 2 are not
      recommended.
 <dt> void report_error(String message, Object info)
 <dd> This method is called to report an error.  The default implementation
      simply prints a message to System.err and where the error occurred.
      This method is often replaced in order to provide a more sophisticated
      error reporting mechanism.
 <dt> void report_fatal_error(String message, Object info)
 <dd> This method is called when a fatal error that cannot be recovered from
      is encountered.  In the default implementation, it calls
      report_error() to emit a message, then throws an exception.
 <dt> void syntax_error(Symbol cur_token)
 <dd> This method is called as soon as syntax error is detected (but
      before recovery is attempted).  In the default implementation it
      invokes: report_error(\"Syntax error\", null);
 <dt> void unrecovered_syntax_error(Symbol cur_token)
 <dd> This method is called if syntax error recovery fails.  In the default
      implementation it invokes:<br>
        report_fatal_error(\"Couldn't repair and continue parse\", null);
 </dl>

@see     com.sun.java_cup.internal.runtime.Symbol
@see     com.sun.java_cup.internal.runtime.Symbol
@see     com.sun.java_cup.internal.runtime.virtual_parse_stack
@author  Frank Flannery
"
      operation 2885250 "lr_parser"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------
--- Constructor(s) ----------------------------------------
-----------------------------------------------------------
 Simple constructor. "
      end

      operation 2885378 "lr_parser"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 480386 // Scanner
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Constructor that sets the default scanner. [CSA/davidm] "
      end

      attribute 618114 "_error_sync_size"
	class_attribute const_attribute protected explicit_type "int"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "-----------------------------------------------------------
--- (Access to) Static (Class) Variables ------------------
-----------------------------------------------------------
 The default number of Symbols after an error we much match to consider
 it recovered from.

"
      end

      operation 2885506 "error_sync_size"
	protected explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The number of Symbols after an error we much match to consider it
 recovered from.
"
      end

      operation 2885634 "production_table"
	abstract public explicit_return_type "short"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------
--- (Access to) Instance Variables ------------------------
-----------------------------------------------------------
 Table of production information (supplied by generated subclass).
 This table contains one entry per production and is indexed by
 the negative-encoded values (reduce actions) in the action_table.
 Each entry has two parts, the index of the non-terminal on the
 left hand side of the production, and the number of Symbols
 on the right hand side.
"
      end

      operation 2885762 "action_table"
	abstract public explicit_return_type "short"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The action table (supplied by generated subclass).  This table is
 indexed by state and terminal number indicating what action is to
 be taken when the parser is in the given state (i.e., the given state
 is on top of the stack) and the given terminal is next on the input.
 States are indexed using the first dimension, however, the entries for
 a given state are compacted and stored in adjacent index, value pairs
 which are searched for rather than accessed directly (see get_action()).
 The actions stored in the table will be either shifts, reduces, or
 errors.  Shifts are encoded as positive values (one greater than the
 state shifted to).  Reduces are encoded as negative values (one less
 than the production reduced by).  Error entries are denoted by zero.

@see com.sun.java_cup.internal.runtime.lr_parser#get_action
"
      end

      operation 2885890 "reduce_table"
	abstract public explicit_return_type "short"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The reduce-goto table (supplied by generated subclass).  This
 table is indexed by state and non-terminal number and contains
 state numbers.  States are indexed using the first dimension, however,
 the entries for a given state are compacted and stored in adjacent
 index, value pairs which are searched for rather than accessed
 directly (see get_reduce()).  When a reduce occurs, the handle
 (corresponding to the RHS of the matched production) is popped off
 the stack.  The new top of stack indicates a state.  This table is
 then indexed by that state and the LHS of the reducing production to
 indicate where to \"shift\" to.

@see com.sun.java_cup.internal.runtime.lr_parser#get_reduce
"
      end

      operation 2886018 "start_state"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The index of the start state (supplied by generated subclass). "
      end

      operation 2886146 "start_production"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The index of the start production (supplied by generated subclass). "
      end

      operation 2886274 "EOF_sym"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The index of the end of file terminal Symbol (supplied by generated
 subclass).
"
      end

      operation 2886402 "error_sym"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The index of the special error Symbol (supplied by generated subclass). "
      end

      attribute 618242 "_done_parsing"
	protected explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Internal flag to indicate when parser should quit. 
"
      end

      operation 2886530 "done_parsing"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 This method is called to indicate that the parser should quit.  This is
 normally called by an accept action, but can be used to cancel parsing
 early in other circumstances if desired.
"
      end

      attribute 618370 "tos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Global parse state shared by parse(), error recovery, and
debugging routines 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Indication of the index for top of stack (for use by actions). 
"
      end

      classrelation 953218 // cur_token (<unidirectional association>)
	relation 953218 --->
	  a role_name "cur_token" protected
	    comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The current lookahead Symbol. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 953218 // cur_token (<unidirectional association>)
	  b parent class_ref 480514 // Symbol
      end

      classrelation 953346 // stack (<unidirectional association>)
	relation 953346 --->
	  a role_name "stack" init_value " new Stack()" protected
	    comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The parse stack itself. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 953346 // stack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      attribute 618498 "production_tab"
	protected explicit_type "short"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Direct reference to the production table. 
"
      end

      attribute 618626 "action_tab"
	protected explicit_type "short"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Direct reference to the action table. 
"
      end

      attribute 618754 "reduce_tab"
	protected explicit_type "short"
	multiplicity "[][]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Direct reference to the reduce-goto table. 
"
      end

      classrelation 953474 // _scanner (<unidirectional association>)
	relation 953474 --->
	  a role_name "_scanner" private
	    comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 This is the scanner object used by the default implementation
 of scan() to get Symbols.  To avoid name conflicts with existing
 code, this field is private. [CSA/davidm] 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 953474 // _scanner (<unidirectional association>)
	  b parent class_ref 480386 // Scanner
      end

      operation 2886658 "setScanner"
	public explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 480386 // Scanner
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Simple accessor method to set the default scanner.
"
      end

      operation 2886786 "getScanner"
	public return_type class_ref 480386 // Scanner
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Simple accessor method to get the default scanner.
"
      end

      operation 2886914 "do_action"
	abstract public return_type class_ref 480514 // Symbol
	nparams 4
	  param in name "act_num" explicit_type "int"
	  param inout name "parser" type class_ref 480258 // lr_parser
	  param inout name "stack" type class_ref 183810 // Stack
	  param in name "top" explicit_type "int"
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------
--- General Methods ---------------------------------------
-----------------------------------------------------------
 Perform a bit of user supplied action code (supplied by generated
 subclass).  Actions are indexed by an internal action number assigned
 at parser generation time.

@param act_num   the internal index of the action to be performed.
@param parser    the parser object we are acting for.
@param stack     the parse stack of that object.
@param top       the index of the top element of the parse stack.
"
      end

      operation 2887042 "user_init"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 User code for initialization inside the parser.  Typically this
 initializes the scanner.  This is called before the parser requests
 the first Symbol.  Here this is just a placeholder for subclasses that
 might need this and we perform no action.   This method is normally
 overridden by the generated code using this contents of the \"init with\"
 clause as its body.
"
      end

      operation 2887170 "init_actions"
	abstract protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Initialize the action object.  This is called before the parser does
 any parse actions. This is filled in by generated code to create
 an object that encapsulates all action code.
"
      end

      operation 2887298 "scan"
	public return_type class_ref 480514 // Symbol
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Get the next Symbol from the input (supplied by generated subclass).
 Once end of file has been reached, all subsequent calls to scan
 should return an EOF Symbol (which is Symbol number 0).  By default
 this method returns getScanner().next_token(); this implementation
 can be overriden by the generated parser using the code declared in
 the \"scan with\" clause.  Do not recycle objects; every call to
 scan() should return a fresh object.
"
      end

      operation 2887426 "report_fatal_error"
	public explicit_return_type "void"
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "info" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Report a fatal error.  This method takes a  message string and an
 additional object (to be used by specializations implemented in
 subclasses).  Here in the base class a very simple implementation
 is provided which reports the error then throws an exception.

@param message an error message.
@param info    an extra object reserved for use by specialized subclasses.
"
      end

      operation 2887554 "report_error"
	public explicit_return_type "void"
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "info" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Report a non fatal error (or warning).  This method takes a message
 string and an additional object (to be used by specializations
 implemented in subclasses).  Here in the base class a very simple
 implementation is provided which simply prints the message to
 System.err.

@param message an error message.
@param info    an extra object reserved for use by specialized subclasses.
"
      end

      operation 2887682 "syntax_error"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cur_token" type class_ref 480514 // Symbol
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 This method is called when a syntax error has been detected and recovery
 is about to be invoked.  Here in the base class we just emit a
 \"Syntax error\" error message.

@param cur_token the current lookahead Symbol.
"
      end

      operation 2887810 "unrecovered_syntax_error"
	public explicit_return_type "void"
	nparams 1
	  param inout name "cur_token" type class_ref 480514 // Symbol
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 This method is called if it is determined that syntax error recovery
 has been unsuccessful.  Here in the base class we report a fatal error.

@param cur_token the current lookahead Symbol.
"
      end

      operation 2887938 "get_action"
	protected explicit_return_type "short"
	nparams 2
	  param in name "state" explicit_type "int"
	  param in name "sym" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Fetch an action from the action table.  The table is broken up into
 rows, one per state (rows are indexed directly by state number).
 Within each row, a list of index, value pairs are given (as sequential
 entries in the table), and the list is terminated by a default entry
 (denoted with a Symbol index of -1).  To find the proper entry in a row
 we do a linear or binary search (depending on the size of the row).

@param state the state index of the action being accessed.
@param sym   the Symbol index of the action being accessed.
"
      end

      operation 2888066 "get_reduce"
	protected explicit_return_type "short"
	nparams 2
	  param in name "state" explicit_type "int"
	  param in name "sym" explicit_type "int"
	
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Fetch a state from the reduce-goto table.  The table is broken up into
 rows, one per state (rows are indexed directly by state number).
 Within each row, a list of index, value pairs are given (as sequential
 entries in the table), and the list is terminated by a default entry
 (denoted with a Symbol index of -1).  To find the proper entry in a row
 we do a linear search.

@param state the state index of the entry being accessed.
@param sym   the Symbol index of the entry being accessed.
"
      end

      operation 2888194 "parse"
	public return_type class_ref 480514 // Symbol
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 This method provides the main parsing routine.  It returns only when
 done_parsing() has been called (typically because the parser has
 accepted, or a fatal error has been reported).  See the header
 documentation for the class regarding how shift/reduce parsers operate
 and how the various tables are used.
"
      end

      operation 2888322 "debug_message"
	public explicit_return_type "void"
	nparams 1
	  param inout name "mess" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Write a debugging message to System.err for the debugging version
 of the parser.

@param mess the text of the debugging message.
"
      end

      operation 2888450 "dump_stack"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Dump the parse stack for debugging purposes. "
      end

      operation 2888578 "debug_reduce"
	public explicit_return_type "void"
	nparams 3
	  param in name "prod_num" explicit_type "int"
	  param in name "nt_num" explicit_type "int"
	  param in name "rhs_size" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Do debug output for a reduce.

@param prod_num  the production we are reducing with.
@param nt_num    the index of the LHS non terminal.
@param rhs_size  the size of the RHS.
"
      end

      operation 2888706 "debug_shift"
	public explicit_return_type "void"
	nparams 1
	  param inout name "shift_tkn" type class_ref 480514 // Symbol
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Do debug output for shift.

@param shift_tkn the Symbol being shifted onto the stack.
"
      end

      operation 2888834 "debug_stack"
	public explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Do debug output for stack state. [CSA]
"
      end

      operation 2888962 "debug_parse"
	public return_type class_ref 480514 // Symbol
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Perform a parse with debugging output.  This does exactly the
 same things as parse(), except that it calls debug_shift() and
 debug_reduce() when shift and reduce moves are taken by the parser
 and produces various other debugging messages.
"
      end

      operation 2889090 "error_recovery"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "debug" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Error recovery code 
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Attempt to recover from a syntax error.  This returns false if recovery
 fails, true if it succeeds.  Recovery happens in 4 steps.  First we
 pop the parse stack down to a point at which we have a shift out
 of the top-most state on the error Symbol.  This represents the
 initial error recovery configuration.  If no such configuration is
 found, then we fail.  Next a small number of \"lookahead\" or \"parse
 ahead\" Symbols are read into a buffer.  The size of this buffer is
 determined by error_sync_size() and determines how many Symbols beyond
 the error must be matched to consider the recovery a success.  Next,
 we begin to discard Symbols in attempt to get past the point of error
 to a point where we can continue parsing.  After each Symbol, we attempt
 to \"parse ahead\" though the buffered lookahead Symbols.  The \"parse ahead\"
 process simulates that actual parse, but does not modify the real
 parser's configuration, nor execute any actions. If we can  parse all
 the stored Symbols without error, then the recovery is considered a
 success.  Once a successful recovery point is determined, we do an
 actual parse over the stored input -- modifying the real parse
 configuration and executing all actions.  Finally, we return the the
 normal parser to continue with the overall parse.

@param debug should we produce debugging messages as we parse.
"
      end

      operation 2889218 "shift_under_error"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Determine if we can shift under the special error Symbol out of the
 state currently on the top of the (real) parse stack.
"
      end

      operation 2889346 "find_recovery_config"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "debug" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Put the (real) parse stack into error recovery configuration by
 popping the stack down to a state that can shift on the special
 error Symbol, then doing the shift.  If no suitable state exists on
 the stack we return false

@param debug should we produce debugging messages as we parse.
"
      end

      classrelation 953602 // lookahead (<unidirectional association>)
	relation 953602 --->
	  a role_name "lookahead" multiplicity "[]" protected
	    comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Lookahead Symbols used for attempting error recovery \"parse aheads\". 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 953602 // lookahead (<unidirectional association>)
	  b parent class_ref 480514 // Symbol
      end

      attribute 618882 "lookahead_pos"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Position in lookahead input buffer used for \"parse ahead\". 
"
      end

      operation 2889474 "read_lookahead"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Read from input to establish our buffer of \"parse ahead\" lookahead
 Symbols.
"
      end

      operation 2889602 "cur_err_token"
	protected return_type class_ref 480514 // Symbol
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Return the current lookahead in our error \"parse ahead\" buffer. "
      end

      operation 2889730 "advance_lookahead"
	protected explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Advance to next \"parse ahead\" input Symbol. Return true if we have
 input to advance to, false otherwise.
"
      end

      operation 2889858 "restart_lookahead"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Reset the parse ahead input to one Symbol past where we started error
 recovery (this consumes one new Symbol from the real input).
"
      end

      operation 2889986 "try_parse_ahead"
	protected explicit_return_type "boolean"
	nparams 1
	  param inout name "debug" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Do a simulated parse forward (a \"parse ahead\") from the current
 stack configuration using stored lookahead input and a virtual parse
 stack.  Return true if we make it all the way through the stored
 lookahead input without error. This basically simulates the action of
 parse() using only our saved \"parse ahead\" input, and not executing any
 actions.

@param debug should we produce debugging messages as we parse.
"
      end

      operation 2890114 "parse_lookahead"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "debug" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Parse forward using stored lookahead Symbols.  In this case we have
 already verified that parsing will make it through the stored lookahead
 Symbols and we are now getting back to the point at which we can hand
 control back to the normal parser.  Consequently, this version of the
 parser performs all actions and modifies the real parse configuration.
 This returns once we have consumed all the stored input or we accept.

@param debug should we produce debugging messages as we parse.
"
      end

      operation 2890242 "unpackFromStrings"
	class_operation protected explicit_return_type "short"
	nparams 1
	  param inout name "sa" type class_ref 128130 // String
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------
 Utility function: unpacks parse tables from strings "
      end
    end

    class 480386 "Scanner"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the Scanner interface, which CUP uses in the default
implementation of <code>lr_parser.scan()</code>.  Integration
of scanners implementing <code>Scanner</code> is facilitated.

@author David MacMahon <davidm@smartsc.com>

 *************************************************
Interface Scanner

Declares the next_token() method that should be
implemented by scanners.  This method is typically
called by lr_parser.scan().
*************************************************"
      operation 2890370 "next_token"
	public return_type class_ref 480514 // Symbol
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 480514 "Symbol"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Defines the Symbol class, which is used to represent all terminals
and nonterminals while parsing.  The lexer should pass CUP Symbols
and CUP returns a Symbol.

@author  Frank Flannery

 ****************************************************************
Class Symbol
what the parser expects to receive from the lexer.
the token is identified as follows:
sym:    the symbol type
parse_state: the parse state.
value:  is the lexical value of type Object
left :  is the left position in the original input file
right:  is the right position in the original input file
****************************************************************"
      operation 2890498 "Symbol"
	public explicit_return_type ""
	nparams 4
	  param in name "id" explicit_type "int"
	  param in name "l" explicit_type "int"
	  param in name "r" explicit_type "int"
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for l,r values
*****************************"
      end

      operation 2890626 "Symbol"
	public explicit_return_type ""
	nparams 2
	  param in name "id" explicit_type "int"
	  param inout name "o" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for no l,r values
******************************"
      end

      operation 2890754 "Symbol"
	public explicit_return_type ""
	nparams 3
	  param in name "sym_num" explicit_type "int"
	  param in name "l" explicit_type "int"
	  param in name "r" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for no value
*************************"
      end

      operation 2890882 "Symbol"
	public explicit_return_type ""
	nparams 1
	  param in name "sym_num" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for no value or l,r
*********************************"
      end

      operation 2891010 "Symbol"
	public explicit_return_type ""
	nparams 2
	  param in name "sym_num" explicit_type "int"
	  param in name "state" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor to give a start state
*********************************"
      end

      attribute 619010 "sym"
	public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The symbol number of the terminal or non terminal being represented 
"
      end

      attribute 619138 "parse_state"
	public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The parse state to be recorded on the parse stack with this symbol.
 This field is for the convenience of the parser and shouldn't be
 modified except by the parser.

"
      end

      attribute 619266 "used_by_parser"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " This allows us to catch some errors caused by scanners recycling
 symbols.  For the use of the parser only. [CSA, 23-Jul-1999] 
"
      end

      attribute 619394 "left"
	public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The data passed to parser
*****************************
"
      end

      attribute 619522 "right"
	public explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The data passed to parser
*****************************
"
      end

      classrelation 953730 // value (<unidirectional association>)
	relation 953730 --->
	  a role_name "value" public
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 953730 // value (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 2891138 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Printing this token out. (Override for pretty-print).
**************************"
      end
    end

    class 480642 "virtual_parse_stack"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " This class implements a temporary or \"virtual\" parse stack that
 replaces the top portion of the actual parse stack (the part that
 has been changed by some set of operations) while maintaining its
 original contents.  This data structure is used when the parse needs
 to \"parse ahead\" to determine if a given error recovery attempt will
 allow the parse to continue far enough to consider it successful.  Once
 success or failure of parse ahead is determined the system then
 reverts to the original parse stack (which has not actually been
 modified).  Since parse ahead does not execute actions, only parse
 state is maintained on the virtual stack, not full Symbol objects.

@see     com.sun.java_cup.internal.runtime.lr_parser
@author  Frank Flannery
"
      operation 2891266 "virtual_parse_stack"
	public explicit_return_type ""
	nparams 1
	  param inout name "shadowing_stack" type class_ref 183810 // Stack
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------
--- Constructor(s) ----------------------------------------
-----------------------------------------------------------
 Constructor to build a virtual stack out of a real stack. "
      end

      classrelation 953858 // real_stack (<unidirectional association>)
	relation 953858 --->
	  a role_name "real_stack" protected
	    comment "-----------------------------------------------------------
--- (Access to) Instance Variables ------------------------
-----------------------------------------------------------
 The real stack that we shadow.  This is accessed when we move off
 the bottom of the virtual portion of the stack, but is always left
 unmodified.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 953858 // real_stack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      attribute 619650 "real_next"
	protected explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Top of stack indicator for where we leave off in the real stack.
 This is measured from top of stack, so 0 would indicate that no
 elements have been \"moved\" from the real to virtual stack.

"
      end

      classrelation 953986 // vstack (<unidirectional association>)
	relation 953986 --->
	  a role_name "vstack" protected
	    comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 The virtual top portion of the stack.  This stack contains Integer
 objects with state numbers.  This stack shadows the top portion
 of the real stack within the area that has been modified (via operations
 on the virtual stack).  When this portion of the stack becomes empty we
 transfer elements from the underlying stack onto this stack.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 953986 // vstack (<unidirectional association>)
	  b parent class_ref 183810 // Stack
      end

      operation 2891394 "get_from_real"
	protected explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------
--- General Methods ---------------------------------------
-----------------------------------------------------------
 Transfer an element from the real to the virtual stack.  This assumes
 that the virtual stack is currently empty.
"
      end

      operation 2891522 "empty"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Indicate whether the stack is empty. "
      end

      operation 2891650 "top"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Return value on the top of the stack (without popping it). "
      end

      operation 2891778 "pop"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 132226 // Exception
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Pop the stack. "
      end

      operation 2891906 "push"
	public explicit_return_type "void"
	nparams 1
	  param in name "state_num" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment ". . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 Push a state number onto the stack. "
      end
    end
  end

  deploymentview 145282 "runtime"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 319106 "lr_parser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Stack;
${definition}"
      associated_elems
	class_ref 480258 // lr_parser
      end
      comment "Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 319234 "Scanner"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 480386 // Scanner
      end
      comment "Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 319362 "Symbol"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 480514 // Symbol
      end
      comment "Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 319490 "virtual_parse_stack"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.util.Stack;
${definition}"
      associated_elems
	class_ref 480642 // virtual_parse_stack
      end
      comment "Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
