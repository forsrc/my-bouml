class StandardMBeanIntrospector
!!!2994434.java!!!	getInstance() : StandardMBeanIntrospector
        return instance;
!!!2994562.java!!!	getPerInterfaceMap() : MBeanIntrospector::PerInterfaceMap
        return perInterfaceMap;
!!!2994690.java!!!	getMBeanInfoMap() : MBeanIntrospector::MBeanInfoMap
        return mbeanInfoMap;
!!!2994818.java!!!	getAnalyzer(inout mbeanInterface : Class) : MBeanAnalyzer
        return MBeanAnalyzer.analyzer(mbeanInterface, this);
!!!2994946.java!!!	isMXBean() : boolean
        return false;
!!!2995074.java!!!	mFrom(inout m : Method) : Method
        return m;
!!!2995202.java!!!	getName(inout m : Method) : String
        return m.getName();
!!!2995330.java!!!	getGenericReturnType(inout m : Method) : Type
        return m.getGenericReturnType();
!!!2995458.java!!!	getGenericParameterTypes(inout m : Method) : Type
        return m.getGenericParameterTypes();
!!!2995586.java!!!	getSignature(inout m : Method) : String
        Class<?>[] params = m.getParameterTypes();
        String[] sig = new String[params.length];
        for (int i = 0; i < params.length; i++)
            sig[i] = params[i].getName();
        return sig;
!!!2995842.java!!!	invokeM2(inout m : Method, inout target : Object, inout args : Object [[]], inout cookie : Object) : Object
        return MethodUtil.invoke(m, target, args);
!!!2995970.java!!!	validParameter(inout m : Method, inout value : Object, in paramNo : int, inout cookie : Object) : boolean
        return isValidParameter(m, value, paramNo);
!!!2996098.java!!!	getMBeanAttributeInfo(inout attributeName : String, inout getter : Method, inout setter : Method) : MBeanAttributeInfo

        final String description = "Attribute exposed for management";
        try {
            return new MBeanAttributeInfo(attributeName, description,
                                          getter, setter);
        } catch (IntrospectionException e) {
            throw new RuntimeException(e); // should not happen
        }
!!!2996226.java!!!	getMBeanOperationInfo(inout operationName : String, inout operation : Method) : MBeanOperationInfo
        final String description = "Operation exposed for management";
        return new MBeanOperationInfo(description, operation);
!!!2996354.java!!!	getBasicMBeanDescriptor() : Descriptor
        /* We don't bother saying mxbean=false, and we can't know whether
           the info is immutable until we know whether the MBean class
           (not interface) is a NotificationBroadcaster. */
        return ImmutableDescriptor.EMPTY_DESCRIPTOR;
!!!2996482.java!!!	getMBeanDescriptor(inout resourceClass : Class) : Descriptor
        boolean immutable = isDefinitelyImmutableInfo(resourceClass);
        return new ImmutableDescriptor("mxbean=false",
                                       "immutableInfo=" + immutable);
!!!2996610.java!!!	isDefinitelyImmutableInfo(inout implClass : Class) : boolean
        if (!NotificationBroadcaster.class.isAssignableFrom(implClass))
            return true;
        synchronized (definitelyImmutable) {
            Boolean immutable = definitelyImmutable.get(implClass);
            if (immutable == null) {
                final Class<NotificationBroadcasterSupport> nbs =
                        NotificationBroadcasterSupport.class;
                if (nbs.isAssignableFrom(implClass)) {
                    try {
                        Method m = implClass.getMethod("getNotificationInfo");
                        immutable = (m.getDeclaringClass() == nbs);
                    } catch (Exception e) {
                        // Too bad, we'll say no for now.
                        return false;
                    }
                } else
                    immutable = false;
                definitelyImmutable.put(implClass, immutable);
            }
            return immutable;
        }
