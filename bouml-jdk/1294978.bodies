class LegacyGlueFocusTraversalPolicy
!!!10781442.java!!!	LegacyGlueFocusTraversalPolicy(inout delegatePolicy : FocusTraversalPolicy)
        this.delegatePolicy = delegatePolicy;
!!!10781570.java!!!	LegacyGlueFocusTraversalPolicy(inout delegateManager : DefaultFocusManager)
        this.delegateManager = delegateManager;
!!!10781698.java!!!	setNextFocusableComponent(inout left : Component, inout right : Component) : void
        forwardMap.put(left, right);
        backwardMap.put(right, left);
!!!10781826.java!!!	unsetNextFocusableComponent(inout left : Component, inout right : Component) : void
        forwardMap.remove(left);
        backwardMap.remove(right);
!!!10781954.java!!!	getComponentAfter(inout focusCycleRoot : Container, inout aComponent : Component) : Component
        Component hardCoded = aComponent, prevHardCoded;
        HashSet<Component> sanity = new HashSet<Component>();

        do {
            prevHardCoded = hardCoded;
            hardCoded = forwardMap.get(hardCoded);
            if (hardCoded == null) {
                if (delegatePolicy != null &&
                    prevHardCoded.isFocusCycleRoot(focusCycleRoot)) {
                    return delegatePolicy.getComponentAfter(focusCycleRoot,
                                                            prevHardCoded);
                } else if (delegateManager != null) {
                    return delegateManager.
                        getComponentAfter(focusCycleRoot, aComponent);
                } else {
                    return null;
                }
            }
            if (sanity.contains(hardCoded)) {
                // cycle detected; bail
                return null;
            }
            sanity.add(hardCoded);
        } while (!accept(hardCoded));

        return hardCoded;
!!!10782082.java!!!	getComponentBefore(inout focusCycleRoot : Container, inout aComponent : Component) : Component
        Component hardCoded = aComponent, prevHardCoded;
        HashSet<Component> sanity = new HashSet<Component>();

        do {
            prevHardCoded = hardCoded;
            hardCoded = backwardMap.get(hardCoded);
            if (hardCoded == null) {
                if (delegatePolicy != null &&
                    prevHardCoded.isFocusCycleRoot(focusCycleRoot)) {
                    return delegatePolicy.getComponentBefore(focusCycleRoot,
                                                       prevHardCoded);
                } else if (delegateManager != null) {
                    return delegateManager.
                        getComponentBefore(focusCycleRoot, aComponent);
                } else {
                    return null;
                }
            }
            if (sanity.contains(hardCoded)) {
                // cycle detected; bail
                return null;
            }
            sanity.add(hardCoded);
        } while (!accept(hardCoded));

        return hardCoded;
!!!10782210.java!!!	getFirstComponent(inout focusCycleRoot : Container) : Component
        if (delegatePolicy != null) {
            return delegatePolicy.getFirstComponent(focusCycleRoot);
        } else if (delegateManager != null) {
            return delegateManager.getFirstComponent(focusCycleRoot);
        } else {
            return null;
        }
!!!10782338.java!!!	getLastComponent(inout focusCycleRoot : Container) : Component
        if (delegatePolicy != null) {
            return delegatePolicy.getLastComponent(focusCycleRoot);
        } else if (delegateManager != null) {
            return delegateManager.getLastComponent(focusCycleRoot);
        } else {
            return null;
        }
!!!10782466.java!!!	getDefaultComponent(inout focusCycleRoot : Container) : Component
        if (delegatePolicy != null) {
            return delegatePolicy.getDefaultComponent(focusCycleRoot);
        } else {
            return getFirstComponent(focusCycleRoot);
        }
!!!10782594.java!!!	accept(inout aComponent : Component) : boolean
        if (!(aComponent.isVisible() && aComponent.isDisplayable() &&
              aComponent.isFocusable() && aComponent.isEnabled())) {
            return false;
        }

        // Verify that the Component is recursively enabled. Disabling a
        // heavyweight Container disables its children, whereas disabling
        // a lightweight Container does not.
        if (!(aComponent instanceof Window)) {
            for (Container enableTest = aComponent.getParent();
                 enableTest != null;
                 enableTest = enableTest.getParent())
            {
                if (!(enableTest.isEnabled() || enableTest.isLightweight())) {
                    return false;
                }
                if (enableTest instanceof Window) {
                    break;
                }
            }
        }

        return true;
!!!10782722.java!!!	writeObject(inout out : ObjectOutputStream) : void
        out.defaultWriteObject();

        if (delegatePolicy instanceof Serializable) {
            out.writeObject(delegatePolicy);
        } else {
            out.writeObject(null);
        }

        if (delegateManager instanceof Serializable) {
            out.writeObject(delegateManager);
        } else {
            out.writeObject(null);
        }
!!!10782850.java!!!	readObject(inout in : ObjectInputStream) : void
        in.defaultReadObject();
        delegatePolicy = (FocusTraversalPolicy)in.readObject();
        delegateManager = (DefaultFocusManager)in.readObject();
