class ColorModelHSL
!!!10880898.java!!!	ColorModelHSL()
        super("hsl", "Hue", "Saturation", "Lightness", "Transparency"); // NON-NLS: components
!!!10881026.java!!!	setColor(in color : int, inout space : float [[]]) : void
        super.setColor(color, space);
        RGBtoHSL(space, space);
        space[3] = 1.0f - space[3];
!!!10881154.java!!!	getColor(inout space : float [[]]) : int
        space[3] = 1.0f - space[3];
        HSLtoRGB(space, space);
        return super.getColor(space);
!!!10881282.java!!!	getMaximum(in index : int) : int
        return (index == 0) ? 360 : 100;
!!!10881410.java!!!	getDefault(in index : int) : float
        return (index == 0) ? -1.0f : (index == 2) ? 0.5f : 1.0f;
!!!10881538.java!!!	HSLtoRGB(inout hsl : float [[]], inout rgb : float [[]]) : float
        if (rgb == null) {
            rgb = new float[3];
        }
        float hue = hsl[0];
        float saturation = hsl[1];
        float lightness = hsl[2];

        if (saturation > 0.0f) {
            hue = (hue < 1.0f) ? hue * 6.0f : 0.0f;
            float q = lightness + saturation * ((lightness > 0.5f) ? 1.0f - lightness : lightness);
            float p = 2.0f * lightness - q;
            rgb[0]= normalize(q, p, (hue < 4.0f) ? (hue + 2.0f) : (hue - 4.0f));
            rgb[1]= normalize(q, p, hue);
            rgb[2]= normalize(q, p, (hue < 2.0f) ? (hue + 4.0f) : (hue - 2.0f));
        }
        else {
            rgb[0] = lightness;
            rgb[1] = lightness;
            rgb[2] = lightness;
        }
        return rgb;
!!!10881666.java!!!	RGBtoHSL(inout rgb : float [[]], inout hsl : float [[]]) : float
        if (hsl == null) {
            hsl = new float[3];
        }
        float max = max(rgb[0], rgb[1], rgb[2]);
        float min = min(rgb[0], rgb[1], rgb[2]);

        float summa = max + min;
        float saturation = max - min;
        if (saturation > 0.0f) {
            saturation /= (summa > 1.0f)
                    ? 2.0f - summa
                    : summa;
        }
        hsl[0] = getHue(rgb[0], rgb[1], rgb[2], max, min);
        hsl[1] = saturation;
        hsl[2] = summa / 2.0f;
        return hsl;
!!!10881794.java!!!	min(in red : float, in green : float, in blue : float) : float
        float min = (red < green) ? red : green;
        return (min < blue) ? min : blue;
!!!10881922.java!!!	max(in red : float, in green : float, in blue : float) : float
        float max = (red > green) ? red : green;
        return (max > blue) ? max : blue;
!!!10882050.java!!!	getHue(in red : float, in green : float, in blue : float, in max : float, in min : float) : float
        float hue = max - min;
        if (hue > 0.0f) {
            if (max == red) {
                hue = (green - blue) / hue;
                if (hue < 0.0f) {
                    hue += 6.0f;
                }
            }
            else if (max == green) {
                hue = 2.0f + (blue - red) / hue;
            }
            else /*max == blue*/ {
                hue = 4.0f + (red - green) / hue;
            }
            hue /= 6.0f;
        }
        return hue;
!!!10882178.java!!!	normalize(in q : float, in p : float, in color : float) : float
        if (color < 1.0f) {
            return p + (q - p) * color;
        }
        if (color < 3.0f) {
            return q;
        }
        if (color < 4.0f) {
            return p + (q - p) * (4.0f - color);
        }
        return p;
