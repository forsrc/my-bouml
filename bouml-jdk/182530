format 222
"time" // jdk1.8::java::time
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/time/"
  java_package "java.time"
  classview 175234 "time"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 1003778 "Instant"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "An instantaneous point on the time-line.
<p>
This class models a single instantaneous point on the time-line.
This might be used to record event time-stamps in the application.
<p>
The range of an instant requires the storage of a number larger than a {@code long}.
To achieve this, the class stores a {@code long} representing epoch-seconds and an
{@code int} representing nanosecond-of-second, which will always be between 0 and 999,999,999.
The epoch-seconds are measured from the standard Java epoch of {@code 1970-01-01T00:00:00Z}
where instants after the epoch have positive values, and earlier instants have negative values.
For both the epoch-second and nanosecond parts, a larger value is always later on the time-line
than a smaller value.

<h3>Time-scale</h3>
<p>
The length of the solar day is the standard way that humans measure time.
This has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds,
forming a 86400 second day.
<p>
Modern timekeeping is based on atomic clocks which precisely define an SI second
relative to the transitions of a Caesium atom. The length of an SI second was defined
to be very close to the 86400th fraction of a day.
<p>
Unfortunately, as the Earth rotates the length of the day varies.
In addition, over time the average length of the day is getting longer as the Earth slows.
As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.
The actual length of any given day and the amount by which the Earth is slowing
are not predictable and can only be determined by measurement.
The UT1 time-scale captures the accurate length of day, but is only available some
time after the day has completed.
<p>
The UTC time-scale is a standard approach to bundle up all the additional fractions
of a second from UT1 into whole seconds, known as <i>leap-seconds</i>.
A leap-second may be added or removed depending on the Earth's rotational changes.
As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where
necessary in order to keep the day aligned with the Sun.
<p>
The modern UTC time-scale was introduced in 1972, introducing the concept of whole leap-seconds.
Between 1958 and 1972, the definition of UTC was complex, with minor sub-second leaps and
alterations to the length of the notional second. As of 2012, discussions are underway
to change the definition of UTC again, with the potential to remove leap seconds or
introduce other changes.
<p>
Given the complexity of accurate timekeeping described above, this Java API defines
its own time-scale, the <i>Java Time-Scale</i>.
<p>
The Java Time-Scale divides each calendar day into exactly 86400
subdivisions, known as seconds.  These seconds may differ from the
SI second.  It closely matches the de facto international civil time
scale, the definition of which changes from time to time.
<p>
The Java Time-Scale has slightly different definitions for different
segments of the time-line, each based on the consensus international
time scale that is used as the basis for civil time. Whenever the
internationally-agreed time scale is modified or replaced, a new
segment of the Java Time-Scale must be defined for it.  Each segment
must meet these requirements:
<ul>
<li>the Java Time-Scale shall closely match the underlying international
 civil time scale;</li>
<li>the Java Time-Scale shall exactly match the international civil
 time scale at noon each day;</li>
<li>the Java Time-Scale shall have a precisely-defined relationship to
 the international civil time scale.</li>
</ul>
There are currently, as of 2013, two segments in the Java time-scale.
<p>
For the segment from 1972-11-03 (exact boundary discussed below) until
further notice, the consensus international time scale is UTC (with
leap seconds).  In this segment, the Java Time-Scale is identical to
<a href=\"http://www.cl.cam.ac.uk/~mgk25/time/utc-sls/\">UTC-SLS</a>.
This is identical to UTC on days that do not have a leap second.
On days that do have a leap second, the leap second is spread equally
over the last 1000 seconds of the day, maintaining the appearance of
exactly 86400 seconds per day.
<p>
For the segment prior to 1972-11-03, extending back arbitrarily far,
the consensus international time scale is defined to be UT1, applied
proleptically, which is equivalent to the (mean) solar time on the
prime meridian (Greenwich). In this segment, the Java Time-Scale is
identical to the consensus international time scale. The exact
boundary between the two segments is the instant where UT1 = UTC
between 1972-11-03T00:00 and 1972-11-04T12:00.
<p>
Implementations of the Java time-scale using the JSR-310 API are not
required to provide any clock that is sub-second accurate, or that
progresses monotonically or smoothly. Implementations are therefore
not required to actually perform the UTC-SLS slew or to otherwise be
aware of leap seconds. JSR-310 does, however, require that
implementations must document the approach they use when defining a
clock representing the current instant.
See {@link Clock} for details on the available clocks.
<p>
The Java time-scale is used for all date-time classes.
This includes {@code Instant}, {@code LocalDate}, {@code LocalTime}, {@code OffsetDateTime},
{@code ZonedDateTime} and {@code Duration}.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code Instant} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3424642 // <realization>
	relation 3424642 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3424642 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3424770 // <realization>
	relation 3424770 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3424770 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3424898 // <realization>
	relation 3424898 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3424898 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3425026 // <realization>
	relation 3425026 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3425026 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3425154 // EPOCH (<unidirectional association>)
	relation 3425154 --->
	  a role_name "EPOCH" init_value " new Instant(0, 0)" class_relation const_relation public
	    comment "
Constant for the 1970-01-01T00:00:00Z epoch instant.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3425154 // EPOCH (<unidirectional association>)
	  b parent class_ref 1003778 // Instant
      end

      attribute 1941634 "MIN_SECOND"
	class_attribute const_attribute private explicit_type "long"
	init_value " -31557014167219200L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum supported epoch second.

"
      end

      attribute 1941762 "MAX_SECOND"
	class_attribute const_attribute private explicit_type "long"
	init_value " 31556889864403199L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum supported epoch second.

"
      end

      classrelation 3425282 // MIN (<unidirectional association>)
	relation 3425282 --->
	  a role_name "MIN" init_value " Instant.ofEpochSecond(MIN_SECOND, 0)" class_relation const_relation public
	    comment "
The minimum supported {@code Instant}, '-1000000000-01-01T00:00Z'.
This could be used by an application as a \"far past\" instant.
<p>
This is one year earlier than the minimum {@code LocalDateTime}.
This provides sufficient values to handle the range of {@code ZoneOffset}
which affect the instant in addition to the local date-time.
The value is also chosen such that the value of the year fits in
an {@code int}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3425282 // MIN (<unidirectional association>)
	  b parent class_ref 1003778 // Instant
      end

      classrelation 3425410 // MAX (<unidirectional association>)
	relation 3425410 --->
	  a role_name "MAX" init_value " Instant.ofEpochSecond(MAX_SECOND, 999_999_999)" class_relation const_relation public
	    comment "
The maximum supported {@code Instant}, '1000000000-12-31T23:59:59.999999999Z'.
This could be used by an application as a \"far future\" instant.
<p>
This is one year later than the maximum {@code LocalDateTime}.
This provides sufficient values to handle the range of {@code ZoneOffset}
which affect the instant in addition to the local date-time.
The value is also chosen such that the value of the year fits in
an {@code int}.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3425410 // MAX (<unidirectional association>)
	  b parent class_ref 1003778 // Instant
      end

      attribute 1941890 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -665713676816604388L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1942018 "seconds"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of seconds from the epoch of 1970-01-01T00:00:00Z.

"
      end

      attribute 1942146 "nanos"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of nanoseconds, later along the time-line, from the seconds field.
This is always positive, and never exceeds 999,999,999.

"
      end

      operation 8334210 "now"
	class_operation public return_type class_ref 1003778 // Instant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current instant from the system clock.
<p>
This will query the {@link Clock#systemUTC() system UTC clock} to
obtain the current instant.
<p>
Using this method will prevent the ability to use an alternate time-source for
testing because the clock is effectively hard-coded.

@return the current instant using the system clock, not null
"
      end

      operation 8334338 "now"
	class_operation public return_type class_ref 1003778 // Instant
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current instant from the specified clock.
<p>
This will query the specified clock to obtain the current time.
<p>
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current instant, not null
"
      end

      operation 8334466 "ofEpochSecond"
	class_operation public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "epochSecond" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Instant} using seconds from the
epoch of 1970-01-01T00:00:00Z.
<p>
The nanosecond field is set to zero.

@param epochSecond  the number of seconds from 1970-01-01T00:00:00Z
@return an instant, not null
@throws DateTimeException if the instant exceeds the maximum or minimum instant
"
      end

      operation 8334594 "ofEpochSecond"
	class_operation public return_type class_ref 1003778 // Instant
	nparams 2
	  param in name "epochSecond" explicit_type "long"
	  param in name "nanoAdjustment" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code Instant} using seconds from the
epoch of 1970-01-01T00:00:00Z and nanosecond fraction of second.
<p>
This method allows an arbitrary number of nanoseconds to be passed in.
The factory will alter the values of the second and nanosecond in order
to ensure that the stored nanosecond is in the range 0 to 999,999,999.
For example, the following will result in the exactly the same instant:
<pre>
 Instant.ofEpochSecond(3, 1);
 Instant.ofEpochSecond(4, -999_999_999);
 Instant.ofEpochSecond(2, 1000_000_001);
</pre>

@param epochSecond  the number of seconds from 1970-01-01T00:00:00Z
@param nanoAdjustment  the nanosecond adjustment to the number of seconds, positive or negative
@return an instant, not null
@throws DateTimeException if the instant exceeds the maximum or minimum instant
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8334722 "ofEpochMilli"
	class_operation public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "epochMilli" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code Instant} using milliseconds from the
epoch of 1970-01-01T00:00:00Z.
<p>
The seconds and nanoseconds are extracted from the specified milliseconds.

@param epochMilli  the number of milliseconds from 1970-01-01T00:00:00Z
@return an instant, not null
@throws DateTimeException if the instant exceeds the maximum or minimum instant
"
      end

      operation 8334850 "from"
	class_operation public return_type class_ref 1003778 // Instant
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Instant} from a temporal object.
<p>
This obtains an instant based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code Instant}.
<p>
The conversion extracts the {@link ChronoField#INSTANT_SECONDS INSTANT_SECONDS}
and {@link ChronoField#NANO_OF_SECOND NANO_OF_SECOND} fields.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code Instant::from}.

@param temporal  the temporal object to convert, not null
@return the instant, not null
@throws DateTimeException if unable to convert to an {@code Instant}
"
      end

      operation 8334978 "parse"
	class_operation public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Instant} from a text string such as
{@code 2007-12-03T10:15:30.00Z}.
<p>
The string must represent a valid instant in UTC and is parsed using
{@link DateTimeFormatter#ISO_INSTANT}.

@param text  the text to parse, not null
@return the parsed instant, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8335106 "create"
	class_operation private return_type class_ref 1003778 // Instant
	nparams 2
	  param in name "seconds" explicit_type "long"
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Instant} using seconds and nanoseconds.

@param seconds  the length of the duration in seconds
@param nanoOfSecond  the nano-of-second, from 0 to 999,999,999
@throws DateTimeException if the instant exceeds the maximum or minimum instant
"
      end

      operation 8335234 "Instant"
	private explicit_return_type ""
	nparams 2
	  param in name "epochSecond" explicit_type "long"
	  param in name "nanos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of {@code Instant} using seconds from the epoch of
1970-01-01T00:00:00Z and nanosecond fraction of second.

@param epochSecond  the number of seconds from 1970-01-01T00:00:00Z
@param nanos  the nanoseconds within the second, must be positive
"
      end

      operation 8335362 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this instant can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code NANO_OF_SECOND}
<li>{@code MICRO_OF_SECOND}
<li>{@code MILLI_OF_SECOND}
<li>{@code INSTANT_SECONDS}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this instant, false if not
"
      end

      operation 8335490 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this date-time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code NANOS}
<li>{@code MICROS}
<li>{@code MILLIS}
<li>{@code SECONDS}
<li>{@code MINUTES}
<li>{@code HOURS}
<li>{@code HALF_DAYS}
<li>{@code DAYS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not
"
      end

      operation 8335618 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This instant is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported

 override for Javadoc"
      end

      operation 8335746 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this instant as an {@code int}.
<p>
This queries this instant for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date-time, except {@code INSTANT_SECONDS} which is too
large to fit in an {@code int} and throws a {@code DateTimeException}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc and performance"
      end

      operation 8335874 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this instant as a {@code long}.
<p>
This queries this instant for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date-time.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8336002 "getEpochSecond"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.
<p>
The epoch second count is a simple incrementing count of seconds where
second 0 is 1970-01-01T00:00:00Z.
The nanosecond part of the day is returned by {@code getNanosOfSecond}.

@return the seconds from the epoch of 1970-01-01T00:00:00Z
"
      end

      operation 8336130 "getNano"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of nanoseconds, later along the time-line, from the start
of the second.
<p>
The nanosecond-of-second value measures the total number of nanoseconds from
the second returned by {@code getEpochSecond}.

@return the nanoseconds within the second, always positive, never exceeds 999,999,999
"
      end

      operation 8336258 "with"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Returns an adjusted copy of this instant.
<p>
This returns an {@code Instant}, based on this one, with the instant adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return an {@code Instant} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8336386 "with"
	public return_type class_ref 1003778 // Instant
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this instant with the specified field set to a new value.
<p>
This returns an {@code Instant}, based on this one, with the value
for the specified field changed.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code NANO_OF_SECOND} -
 Returns an {@code Instant} with the specified nano-of-second.
 The epoch-second will be unchanged.
<li>{@code MICRO_OF_SECOND} -
 Returns an {@code Instant} with the nano-of-second replaced by the specified
 micro-of-second multiplied by 1,000. The epoch-second will be unchanged.
<li>{@code MILLI_OF_SECOND} -
 Returns an {@code Instant} with the nano-of-second replaced by the specified
 milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged.
<li>{@code INSTANT_SECONDS} -
 Returns an {@code Instant} with the specified epoch-second.
 The nano-of-second will be unchanged.
</ul>
<p>
In all cases, if the new value is outside the valid range of values for the field
then a {@code DateTimeException} will be thrown.
<p>
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return an {@code Instant} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8336514 "truncatedTo"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code Instant} truncated to the specified unit.
<p>
Truncating the instant returns a copy of the original with fields
smaller than the specified unit set to zero.
The fields are calculated on the basis of using a UTC offset as seen
in {@code toString}.
For example, truncating with the {@link ChronoUnit#MINUTES MINUTES} unit will
round down to the nearest minute, setting the seconds and nanoseconds to zero.
<p>
The unit must have a {@linkplain TemporalUnit#getDuration() duration}
that divides into the length of a standard day without remainder.
This includes all supplied time units on {@link ChronoUnit} and
{@link ChronoUnit#DAYS DAYS}. Other units throw an exception.
<p>
This instance is immutable and unaffected by this method call.

@param unit  the unit to truncate to, not null
@return an {@code Instant} based on this instant with the time truncated, not null
@throws DateTimeException if the unit is invalid for truncation
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8336642 "plus"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this instant with the specified amount added.
<p>
This returns an {@code Instant}, based on this one, with the specified amount added.
The amount is typically {@link Duration} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return an {@code Instant} based on this instant with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8336770 "plus"
	public return_type class_ref 1003778 // Instant
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this instant with the specified amount added.
<p>
This returns an {@code Instant}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code NANOS} -
 Returns a {@code Instant} with the specified number of nanoseconds added.
 This is equivalent to {@link #plusNanos(long)}.
<li>{@code MICROS} -
 Returns a {@code Instant} with the specified number of microseconds added.
 This is equivalent to {@link #plusNanos(long)} with the amount
 multiplied by 1,000.
<li>{@code MILLIS} -
 Returns a {@code Instant} with the specified number of milliseconds added.
 This is equivalent to {@link #plusNanos(long)} with the amount
 multiplied by 1,000,000.
<li>{@code SECONDS} -
 Returns a {@code Instant} with the specified number of seconds added.
 This is equivalent to {@link #plusSeconds(long)}.
<li>{@code MINUTES} -
 Returns a {@code Instant} with the specified number of minutes added.
 This is equivalent to {@link #plusSeconds(long)} with the amount
 multiplied by 60.
<li>{@code HOURS} -
 Returns a {@code Instant} with the specified number of hours added.
 This is equivalent to {@link #plusSeconds(long)} with the amount
 multiplied by 3,600.
<li>{@code HALF_DAYS} -
 Returns a {@code Instant} with the specified number of half-days added.
 This is equivalent to {@link #plusSeconds(long)} with the amount
 multiplied by 43,200 (12 hours).
<li>{@code DAYS} -
 Returns a {@code Instant} with the specified number of days added.
 This is equivalent to {@link #plusSeconds(long)} with the amount
 multiplied by 86,400 (24 hours).
</ul>
<p>
All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return an {@code Instant} based on this instant with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8336898 "plusSeconds"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "secondsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this instant with the specified duration in seconds added.
<p>
This instance is immutable and unaffected by this method call.

@param secondsToAdd  the seconds to add, positive or negative
@return an {@code Instant} based on this instant with the specified seconds added, not null
@throws DateTimeException if the result exceeds the maximum or minimum instant
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8337026 "plusMillis"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "millisToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this instant with the specified duration in milliseconds added.
<p>
This instance is immutable and unaffected by this method call.

@param millisToAdd  the milliseconds to add, positive or negative
@return an {@code Instant} based on this instant with the specified milliseconds added, not null
@throws DateTimeException if the result exceeds the maximum or minimum instant
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8337154 "plusNanos"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "nanosToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this instant with the specified duration in nanoseconds added.
<p>
This instance is immutable and unaffected by this method call.

@param nanosToAdd  the nanoseconds to add, positive or negative
@return an {@code Instant} based on this instant with the specified nanoseconds added, not null
@throws DateTimeException if the result exceeds the maximum or minimum instant
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8337282 "plus"
	private return_type class_ref 1003778 // Instant
	nparams 2
	  param in name "secondsToAdd" explicit_type "long"
	  param in name "nanosToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this instant with the specified duration added.
<p>
This instance is immutable and unaffected by this method call.

@param secondsToAdd  the seconds to add, positive or negative
@param nanosToAdd  the nanos to add, positive or negative
@return an {@code Instant} based on this instant with the specified seconds added, not null
@throws DateTimeException if the result exceeds the maximum or minimum instant
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8337410 "minus"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this instant with the specified amount subtracted.
<p>
This returns an {@code Instant}, based on this one, with the specified amount subtracted.
The amount is typically {@link Duration} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return an {@code Instant} based on this instant with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8337538 "minus"
	public return_type class_ref 1003778 // Instant
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this instant with the specified amount subtracted.
<p>
This returns a {@code Instant}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return an {@code Instant} based on this instant with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8337666 "minusSeconds"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "secondsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this instant with the specified duration in seconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param secondsToSubtract  the seconds to subtract, positive or negative
@return an {@code Instant} based on this instant with the specified seconds subtracted, not null
@throws DateTimeException if the result exceeds the maximum or minimum instant
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8337794 "minusMillis"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "millisToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this instant with the specified duration in milliseconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param millisToSubtract  the milliseconds to subtract, positive or negative
@return an {@code Instant} based on this instant with the specified milliseconds subtracted, not null
@throws DateTimeException if the result exceeds the maximum or minimum instant
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8337922 "minusNanos"
	public return_type class_ref 1003778 // Instant
	nparams 1
	  param in name "nanosToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this instant with the specified duration in nanoseconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param nanosToSubtract  the nanoseconds to subtract, positive or negative
@return an {@code Instant} based on this instant with the specified nanoseconds subtracted, not null
@throws DateTimeException if the result exceeds the maximum or minimum instant
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8338050 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Queries this instant using the specified query.
<p>
This queries this instant using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8338178 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have this instant.
<p>
This returns a temporal object of the same observable type as the input
with the instant changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
twice, passing {@link ChronoField#INSTANT_SECONDS} and
{@link ChronoField#NANO_OF_SECOND} as the fields.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisInstant.adjustInto(temporal);
  temporal = temporal.with(thisInstant);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8338306 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another instant in terms of the specified unit.
<p>
This calculates the amount of time between two {@code Instant}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified instant.
The result will be negative if the end is before the start.
The calculation returns a whole number, representing the number of
complete units between the two instants.
The {@code Temporal} passed to this method is converted to a
{@code Instant} using {@link #from(TemporalAccessor)}.
For example, the amount in days between two dates can be calculated
using {@code startInstant.until(endInstant, SECONDS)}.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, SECONDS);
  amount = SECONDS.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},
{@code MINUTES}, {@code HOURS}, {@code HALF_DAYS} and {@code DAYS}
are supported. Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end date, exclusive, which is converted to an {@code Instant}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this instant and the end instant
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to an {@code Instant}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8338434 "nanosUntil"
	private explicit_return_type "long"
	nparams 1
	  param inout name "end" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8338562 "secondsUntil"
	private explicit_return_type "long"
	nparams 1
	  param inout name "end" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8338690 "atOffset"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this instant with an offset to create an {@code OffsetDateTime}.
<p>
This returns an {@code OffsetDateTime} formed from this instant at the
specified offset from UTC/Greenwich. An exception will be thrown if the
instant is too large to fit into an offset date-time.
<p>
This method is equivalent to
{@link OffsetDateTime#ofInstant(Instant, ZoneId) OffsetDateTime.ofInstant(this, offset)}.

@param offset  the offset to combine with, not null
@return the offset date-time formed from this instant and the specified offset, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8338818 "atZone"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this instant with a time-zone to create a {@code ZonedDateTime}.
<p>
This returns an {@code ZonedDateTime} formed from this instant at the
specified time-zone. An exception will be thrown if the instant is too
large to fit into a zoned date-time.
<p>
This method is equivalent to
{@link ZonedDateTime#ofInstant(Instant, ZoneId) ZonedDateTime.ofInstant(this, zone)}.

@param zone  the zone to combine with, not null
@return the zoned date-time formed from this instant and the specified zone, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8338946 "toEpochMilli"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Converts this instant to the number of milliseconds from the epoch
of 1970-01-01T00:00:00Z.
<p>
If this instant represents a point on the time-line too far in the future
or past to fit in a {@code long} milliseconds, then an exception is thrown.
<p>
If this instant has greater than millisecond precision, then the conversion
will drop any excess precision information as though the amount in nanoseconds
was subject to integer division by one million.

@return the number of milliseconds since the epoch of 1970-01-01T00:00:00Z
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8339074 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "otherInstant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this instant to the specified instant.
<p>
The comparison is based on the time-line position of the instants.
It is \"consistent with equals\", as defined by {@link Comparable}.

@param otherInstant  the other instant to compare to, not null
@return the comparator value, negative if less, positive if greater
@throws NullPointerException if otherInstant is null
"
      end

      operation 8339202 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "otherInstant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this instant is after the specified instant.
<p>
The comparison is based on the time-line position of the instants.

@param otherInstant  the other instant to compare to, not null
@return true if this instant is after the specified instant
@throws NullPointerException if otherInstant is null
"
      end

      operation 8339330 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "otherInstant" type class_ref 1003778 // Instant
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this instant is before the specified instant.
<p>
The comparison is based on the time-line position of the instants.

@param otherInstant  the other instant to compare to, not null
@return true if this instant is before the specified instant
@throws NullPointerException if otherInstant is null
"
      end

      operation 8339458 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "otherInstant" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this instant is equal to the specified instant.
<p>
The comparison is based on the time-line position of the instants.

@param otherInstant  the other instant, null returns false
@return true if the other instant is equal to this one
"
      end

      operation 8339586 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a hash code for this instant.

@return a suitable hash code
"
      end

      operation 8339714 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

A string representation of this instant using ISO-8601 representation.
<p>
The format used is the same as {@link DateTimeFormatter#ISO_INSTANT}.

@return an ISO-8601 representation of this instant, not null
"
      end

      operation 8339842 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(2);  // identifies an Instant
 out.writeLong(seconds);
 out.writeInt(nanos);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8339970 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8340098 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8340226 "readExternal"
	class_operation package return_type class_ref 1003778 // Instant
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1040770 "LocalDate"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date without a time-zone in the ISO-8601 calendar system,
such as {@code 2007-12-03}.
<p>
{@code LocalDate} is an immutable date-time object that represents a date,
often viewed as year-month-day. Other date fields, such as day-of-year,
day-of-week and week-of-year, can also be accessed.
For example, the value \"2nd October 2007\" can be stored in a {@code LocalDate}.
<p>
This class does not store or represent a time or time-zone.
Instead, it is a description of the date, as used for birthdays.
It cannot represent an instant on the time-line without additional information
such as an offset or time-zone.
<p>
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. It is equivalent to the proleptic Gregorian calendar
system, in which today's rules for leap years are applied for all time.
For most applications written today, the ISO-8601 rules are entirely suitable.
However, any application that makes use of historical dates, and requires them
to be accurate will find the ISO-8601 approach unsuitable.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code LocalDate} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3425538 // <realization>
	relation 3425538 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3425538 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3425666 // <realization>
	relation 3425666 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3425666 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3426178 // <realization>
	relation 3426178 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3426178 // <realization>
	  b parent class_ref 1052418 // ChronoLocalDate
      end

      classrelation 3426306 // <realization>
	relation 3426306 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3426306 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3426434 // MIN (<unidirectional association>)
	relation 3426434 --->
	  a role_name "MIN" init_value " LocalDate.of(Year.MIN_VALUE, 1, 1)" class_relation const_relation public
	    comment "
The minimum supported {@code LocalDate}, '-999999999-01-01'.
This could be used by an application as a \"far past\" date.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3426434 // MIN (<unidirectional association>)
	  b parent class_ref 1040770 // LocalDate
      end

      classrelation 3426562 // MAX (<unidirectional association>)
	relation 3426562 --->
	  a role_name "MAX" init_value " LocalDate.of(Year.MAX_VALUE, 12, 31)" class_relation const_relation public
	    comment "
The maximum supported {@code LocalDate}, '+999999999-12-31'.
This could be used by an application as a \"far future\" date.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3426562 // MAX (<unidirectional association>)
	  b parent class_ref 1040770 // LocalDate
      end

      attribute 1942274 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2942565459149668126L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1942402 "DAYS_PER_CYCLE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 146097"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of days in a 400 year cycle.

"
      end

      attribute 1942530 "DAYS_0000_TO_1970"
	class_attribute const_attribute package explicit_type "long"
	init_value " (DAYS_PER_CYCLE * 5L) - (30L * 365L + 7L)"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of days from year zero to year 1970.
There are five 400 year cycles from year zero to 2000.
There are 7 leap years from 1970 to 2000.

"
      end

      attribute 1942658 "year"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The year.

"
      end

      attribute 1942786 "month"
	const_attribute private explicit_type "short"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The month-of-year.

"
      end

      attribute 1942914 "day"
	const_attribute private explicit_type "short"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The day-of-month.

"
      end

      operation 8344066 "now"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current date from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current date using the system clock and default time-zone, not null
"
      end

      operation 8344194 "now"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current date from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current date using the system clock, not null
"
      end

      operation 8344322 "now"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current date from the specified clock.
<p>
This will query the specified clock to obtain the current date - today.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current date, not null
"
      end

      operation 8344450 "of"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 3
	  param in name "year" explicit_type "int"
	  param inout name "month" type class_ref 1053186 // Month
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDate} from a year, month and day.
<p>
This returns a {@code LocalDate} with the specified year, month and day-of-month.
The day must be valid for the year and month, otherwise an exception will be thrown.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, not null
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@return the local date, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8344578 "of"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDate} from a year, month and day.
<p>
This returns a {@code LocalDate} with the specified year, month and day-of-month.
The day must be valid for the year and month, otherwise an exception will be thrown.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@return the local date, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8344706 "ofYearDay"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 2
	  param in name "year" explicit_type "int"
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDate} from a year and day-of-year.
<p>
This returns a {@code LocalDate} with the specified year and day-of-year.
The day-of-year must be valid for the year, otherwise an exception will be thrown.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param dayOfYear  the day-of-year to represent, from 1 to 366
@return the local date, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-year is invalid for the year
"
      end

      operation 8344834 "ofEpochDay"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "epochDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDate} from the epoch day count.
<p>
This returns a {@code LocalDate} with the specified epoch-day.
The {@link ChronoField#EPOCH_DAY EPOCH_DAY} is a simple incrementing count
of days where day 0 is 1970-01-01. Negative numbers represent earlier days.

@param epochDay  the Epoch Day to convert, based on the epoch 1970-01-01
@return the local date, not null
@throws DateTimeException if the epoch day exceeds the supported date range
"
      end

      operation 8344962 "from"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDate} from a temporal object.
<p>
This obtains a local date based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code LocalDate}.
<p>
The conversion uses the {@link TemporalQueries#localDate()} query, which relies
on extracting the {@link ChronoField#EPOCH_DAY EPOCH_DAY} field.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code LocalDate::from}.

@param temporal  the temporal object to convert, not null
@return the local date, not null
@throws DateTimeException if unable to convert to a {@code LocalDate}
"
      end

      operation 8345090 "parse"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDate} from a text string such as {@code 2007-12-03}.
<p>
The string must represent a valid date and is parsed using
{@link java.time.format.DateTimeFormatter#ISO_LOCAL_DATE}.

@param text  the text to parse such as \"2007-12-03\", not null
@return the parsed local date, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8345218 "parse"
	class_operation public return_type class_ref 1040770 // LocalDate
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDate} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a date.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed local date, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8345346 "create"
	class_operation private return_type class_ref 1040770 // LocalDate
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates a local date from the year, month and day fields.

@param year  the year to represent, validated from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, from 1 to 12, validated
@param dayOfMonth  the day-of-month to represent, validated from 1 to 31
@return the local date, not null
@throws DateTimeException if the day-of-month is invalid for the month-year
"
      end

      operation 8345474 "resolvePreviousValid"
	class_operation private return_type class_ref 1040770 // LocalDate
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "day" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves the date, resolving days past the end of month.

@param year  the year to represent, validated from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, validated from 1 to 12
@param day  the day-of-month to represent, validated from 1 to 31
@return the resolved date, not null
"
      end

      operation 8345602 "LocalDate"
	private explicit_return_type ""
	nparams 3
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor, previously validated.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, not null
@param dayOfMonth  the day-of-month to represent, valid for year-month, from 1 to 31
"
      end

      operation 8345730 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this date can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code DAY_OF_WEEK}
<li>{@code ALIGNED_DAY_OF_WEEK_IN_MONTH}
<li>{@code ALIGNED_DAY_OF_WEEK_IN_YEAR}
<li>{@code DAY_OF_MONTH}
<li>{@code DAY_OF_YEAR}
<li>{@code EPOCH_DAY}
<li>{@code ALIGNED_WEEK_OF_MONTH}
<li>{@code ALIGNED_WEEK_OF_YEAR}
<li>{@code MONTH_OF_YEAR}
<li>{@code PROLEPTIC_MONTH}
<li>{@code YEAR_OF_ERA}
<li>{@code YEAR}
<li>{@code ERA}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this date, false if not

 override for Javadoc"
      end

      operation 8345858 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this date.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code DAYS}
<li>{@code WEEKS}
<li>{@code MONTHS}
<li>{@code YEARS}
<li>{@code DECADES}
<li>{@code CENTURIES}
<li>{@code MILLENNIA}
<li>{@code ERAS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not

 override for Javadoc"
      end

      operation 8345986 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This date is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8346114 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this date as an {@code int}.
<p>
This queries this date for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date, except {@code EPOCH_DAY} and {@code PROLEPTIC_MONTH}
which are too large to fit in an {@code int} and throw a {@code DateTimeException}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc and performance"
      end

      operation 8346242 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this date as a {@code long}.
<p>
This queries this date for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8346370 "get0"
	private explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8346498 "getProlepticMonth"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8346626 "getChronology"
	public return_type class_ref 1053314 // IsoChronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the chronology of this date, which is the ISO calendar system.
<p>
The {@code Chronology} represents the calendar system in use.
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. It is equivalent to the proleptic Gregorian calendar
system, in which today's rules for leap years are applied for all time.

@return the ISO chronology, not null
"
      end

      operation 8346754 "getEra"
	public return_type class_ref 1052674 // Era
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the era applicable at this date.
<p>
The official ISO-8601 standard does not define eras, however {@code IsoChronology} does.
It defines two eras, 'CE' from year one onwards and 'BCE' from year zero backwards.
Since dates before the Julian-Gregorian cutover are not in line with history,
the cutover between 'BCE' and 'CE' is also not aligned with the commonly used
eras, often referred to using 'BC' and 'AD'.
<p>
Users of this class should typically ignore this method as it exists primarily
to fulfill the {@link ChronoLocalDate} contract where it is necessary to support
the Japanese calendar system.
<p>
The returned era will be a singleton capable of being compared with the constants
in {@link IsoChronology} using the {@code ==} operator.

@return the {@code IsoChronology} era constant applicable at this date, not null

 override for Javadoc"
      end

      operation 8346882 "getYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the year field.
<p>
This method returns the primitive {@code int} value for the year.
<p>
The year returned by this method is proleptic as per {@code get(YEAR)}.
To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.

@return the year, from MIN_YEAR to MAX_YEAR
"
      end

      operation 8347010 "getMonthValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field from 1 to 12.
<p>
This method returns the month as an {@code int} from 1 to 12.
Application code is frequently clearer if the enum {@link Month}
is used by calling {@link #getMonth()}.

@return the month-of-year, from 1 to 12
@see #getMonth()
"
      end

      operation 8347138 "getMonth"
	public return_type class_ref 1053186 // Month
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field using the {@code Month} enum.
<p>
This method returns the enum {@link Month} for the month.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link Month#getValue() int value}.

@return the month-of-year, not null
@see #getMonthValue()
"
      end

      operation 8347266 "getDayOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-month field.
<p>
This method returns the primitive {@code int} value for the day-of-month.

@return the day-of-month, from 1 to 31
"
      end

      operation 8347394 "getDayOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-year field.
<p>
This method returns the primitive {@code int} value for the day-of-year.

@return the day-of-year, from 1 to 365, or 366 in a leap year
"
      end

      operation 8347522 "getDayOfWeek"
	public return_type class_ref 1050626 // DayOfWeek
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-week field, which is an enum {@code DayOfWeek}.
<p>
This method returns the enum {@link DayOfWeek} for the day-of-week.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link DayOfWeek#getValue() int value}.
<p>
Additional information can be obtained from the {@code DayOfWeek}.
This includes textual names of the values.

@return the day-of-week, not null
"
      end

      operation 8347650 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the year is a leap year, according to the ISO proleptic
calendar system rules.
<p>
This method applies the current rules for leap years across the whole time-line.
In general, a year is a leap year if it is divisible by four without
remainder. However, years divisible by 100, are not leap years, with
the exception of years divisible by 400 which are.
<p>
For example, 1904 is a leap year it is divisible by 4.
1900 was not a leap year as it is divisible by 100, however 2000 was a
leap year as it is divisible by 400.
<p>
The calculation is proleptic - applying the same rules into the far future and far past.
This is historically inaccurate, but is correct for the ISO-8601 standard.

@return true if the year is leap, false otherwise

 override for Javadoc and performance"
      end

      operation 8347778 "lengthOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the length of the month represented by this date.
<p>
This returns the length of the month in days.
For example, a date in January would return 31.

@return the length of the month in days
"
      end

      operation 8347906 "lengthOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the length of the year represented by this date.
<p>
This returns the length of the year in days, either 365 or 366.

@return 366 if the year is leap, 365 otherwise

 override for Javadoc and performance"
      end

      operation 8348034 "with"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an adjusted copy of this date.
<p>
This returns a {@code LocalDate}, based on this one, with the date adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
A simple adjuster might simply set the one of the fields, such as the year field.
A more complex adjuster might set the date to the last day of the month.
<p>
A selection of common adjustments is provided in
{@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.
These include finding the \"last day of the month\" and \"next Wednesday\".
Key date-time classes also implement the {@code TemporalAdjuster} interface,
such as {@link Month} and {@link java.time.MonthDay MonthDay}.
The adjuster is responsible for handling special cases, such as the varying
lengths of month and leap years.
<p>
For example this code returns a date on the last day of July:
<pre>
 import static java.time.Month.*;
 import static java.time.temporal.TemporalAdjusters.*;

 result = localDate.with(JULY).with(lastDayOfMonth());
</pre>
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return a {@code LocalDate} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8348162 "with"
	public return_type class_ref 1040770 // LocalDate
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date with the specified field set to a new value.
<p>
This returns a {@code LocalDate}, based on this one, with the value
for the specified field changed.
This can be used to change any supported field, such as the year, month or day-of-month.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
In some cases, changing the specified field can cause the resulting date to become invalid,
such as changing the month from 31st January to February would make the day-of-month invalid.
In cases like this, the field is responsible for resolving the date. Typically it will choose
the previous valid date, which would be the last valid day of February in this example.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code DAY_OF_WEEK} -
 Returns a {@code LocalDate} with the specified day-of-week.
 The date is adjusted up to 6 days forward or backward within the boundary
 of a Monday to Sunday week.
<li>{@code ALIGNED_DAY_OF_WEEK_IN_MONTH} -
 Returns a {@code LocalDate} with the specified aligned-day-of-week.
 The date is adjusted to the specified month-based aligned-day-of-week.
 Aligned weeks are counted such that the first week of a given month starts
 on the first day of that month.
 This may cause the date to be moved up to 6 days into the following month.
<li>{@code ALIGNED_DAY_OF_WEEK_IN_YEAR} -
 Returns a {@code LocalDate} with the specified aligned-day-of-week.
 The date is adjusted to the specified year-based aligned-day-of-week.
 Aligned weeks are counted such that the first week of a given year starts
 on the first day of that year.
 This may cause the date to be moved up to 6 days into the following year.
<li>{@code DAY_OF_MONTH} -
 Returns a {@code LocalDate} with the specified day-of-month.
 The month and year will be unchanged. If the day-of-month is invalid for the
 year and month, then a {@code DateTimeException} is thrown.
<li>{@code DAY_OF_YEAR} -
 Returns a {@code LocalDate} with the specified day-of-year.
 The year will be unchanged. If the day-of-year is invalid for the
 year, then a {@code DateTimeException} is thrown.
<li>{@code EPOCH_DAY} -
 Returns a {@code LocalDate} with the specified epoch-day.
 This completely replaces the date and is equivalent to {@link #ofEpochDay(long)}.
<li>{@code ALIGNED_WEEK_OF_MONTH} -
 Returns a {@code LocalDate} with the specified aligned-week-of-month.
 Aligned weeks are counted such that the first week of a given month starts
 on the first day of that month.
 This adjustment moves the date in whole week chunks to match the specified week.
 The result will have the same day-of-week as this date.
 This may cause the date to be moved into the following month.
<li>{@code ALIGNED_WEEK_OF_YEAR} -
 Returns a {@code LocalDate} with the specified aligned-week-of-year.
 Aligned weeks are counted such that the first week of a given year starts
 on the first day of that year.
 This adjustment moves the date in whole week chunks to match the specified week.
 The result will have the same day-of-week as this date.
 This may cause the date to be moved into the following year.
<li>{@code MONTH_OF_YEAR} -
 Returns a {@code LocalDate} with the specified month-of-year.
 The year will be unchanged. The day-of-month will also be unchanged,
 unless it would be invalid for the new month and year. In that case, the
 day-of-month is adjusted to the maximum valid value for the new month and year.
<li>{@code PROLEPTIC_MONTH} -
 Returns a {@code LocalDate} with the specified proleptic-month.
 The day-of-month will be unchanged, unless it would be invalid for the new month
 and year. In that case, the day-of-month is adjusted to the maximum valid value
 for the new month and year.
<li>{@code YEAR_OF_ERA} -
 Returns a {@code LocalDate} with the specified year-of-era.
 The era and month will be unchanged. The day-of-month will also be unchanged,
 unless it would be invalid for the new month and year. In that case, the
 day-of-month is adjusted to the maximum valid value for the new month and year.
<li>{@code YEAR} -
 Returns a {@code LocalDate} with the specified year.
 The month will be unchanged. The day-of-month will also be unchanged,
 unless it would be invalid for the new month and year. In that case, the
 day-of-month is adjusted to the maximum valid value for the new month and year.
<li>{@code ERA} -
 Returns a {@code LocalDate} with the specified era.
 The year-of-era and month will be unchanged. The day-of-month will also be unchanged,
 unless it would be invalid for the new month and year. In that case, the
 day-of-month is adjusted to the maximum valid value for the new month and year.
</ul>
<p>
In all cases, if the new value is outside the valid range of values for the field
then a {@code DateTimeException} will be thrown.
<p>
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return a {@code LocalDate} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8348290 "withYear"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDate} with the year altered.
<p>
If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
<p>
This instance is immutable and unaffected by this method call.

@param year  the year to set in the result, from MIN_YEAR to MAX_YEAR
@return a {@code LocalDate} based on this date with the requested year, not null
@throws DateTimeException if the year value is invalid
"
      end

      operation 8348418 "withMonth"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the month-of-year altered.
<p>
If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
<p>
This instance is immutable and unaffected by this method call.

@param month  the month-of-year to set in the result, from 1 (January) to 12 (December)
@return a {@code LocalDate} based on this date with the requested month, not null
@throws DateTimeException if the month-of-year value is invalid
"
      end

      operation 8348546 "withDayOfMonth"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the day-of-month altered.
<p>
If the resulting date is invalid, an exception is thrown.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfMonth  the day-of-month to set in the result, from 1 to 28-31
@return a {@code LocalDate} based on this date with the requested day, not null
@throws DateTimeException if the day-of-month value is invalid,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8348674 "withDayOfYear"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the day-of-year altered.
<p>
If the resulting date is invalid, an exception is thrown.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfYear  the day-of-year to set in the result, from 1 to 365-366
@return a {@code LocalDate} based on this date with the requested day, not null
@throws DateTimeException if the day-of-year value is invalid,
 or if the day-of-year is invalid for the year
"
      end

      operation 8348802 "plus"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date with the specified amount added.
<p>
This returns a {@code LocalDate}, based on this one, with the specified amount added.
The amount is typically {@link Period} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return a {@code LocalDate} based on this date with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8348930 "plus"
	public return_type class_ref 1040770 // LocalDate
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date with the specified amount added.
<p>
This returns a {@code LocalDate}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
In some cases, adding the amount can cause the resulting date to become invalid.
For example, adding one month to 31st January would result in 31st February.
In cases like this, the unit is responsible for resolving the date.
Typically it will choose the previous valid date, which would be the last valid
day of February in this example.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code DAYS} -
 Returns a {@code LocalDate} with the specified number of days added.
 This is equivalent to {@link #plusDays(long)}.
<li>{@code WEEKS} -
 Returns a {@code LocalDate} with the specified number of weeks added.
 This is equivalent to {@link #plusWeeks(long)} and uses a 7 day week.
<li>{@code MONTHS} -
 Returns a {@code LocalDate} with the specified number of months added.
 This is equivalent to {@link #plusMonths(long)}.
 The day-of-month will be unchanged unless it would be invalid for the new
 month and year. In that case, the day-of-month is adjusted to the maximum
 valid value for the new month and year.
<li>{@code YEARS} -
 Returns a {@code LocalDate} with the specified number of years added.
 This is equivalent to {@link #plusYears(long)}.
 The day-of-month will be unchanged unless it would be invalid for the new
 month and year. In that case, the day-of-month is adjusted to the maximum
 valid value for the new month and year.
<li>{@code DECADES} -
 Returns a {@code LocalDate} with the specified number of decades added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 10.
 The day-of-month will be unchanged unless it would be invalid for the new
 month and year. In that case, the day-of-month is adjusted to the maximum
 valid value for the new month and year.
<li>{@code CENTURIES} -
 Returns a {@code LocalDate} with the specified number of centuries added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 100.
 The day-of-month will be unchanged unless it would be invalid for the new
 month and year. In that case, the day-of-month is adjusted to the maximum
 valid value for the new month and year.
<li>{@code MILLENNIA} -
 Returns a {@code LocalDate} with the specified number of millennia added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 1,000.
 The day-of-month will be unchanged unless it would be invalid for the new
 month and year. In that case, the day-of-month is adjusted to the maximum
 valid value for the new month and year.
<li>{@code ERAS} -
 Returns a {@code LocalDate} with the specified number of eras added.
 Only two eras are supported so the amount must be one, zero or minus one.
 If the amount is non-zero then the year is changed such that the year-of-era
 is unchanged.
 The day-of-month will be unchanged unless it would be invalid for the new
 month and year. In that case, the day-of-month is adjusted to the maximum
 valid value for the new month and year.
</ul>
<p>
All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return a {@code LocalDate} based on this date with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8349058 "plusYears"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "yearsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDate} with the specified number of years added.
<p>
This method adds the specified amount to the years field in three steps:
<ol>
<li>Add the input years to the year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2008-02-29 (leap year) plus one year would result in the
invalid date 2009-02-29 (standard year). Instead of returning an invalid
result, the last valid day of the month, 2009-02-28, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param yearsToAdd  the years to add, may be negative
@return a {@code LocalDate} based on this date with the years added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8349186 "plusMonths"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "monthsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the specified number of months added.
<p>
This method adds the specified amount to the months field in three steps:
<ol>
<li>Add the input months to the month-of-year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2007-03-31 plus one month would result in the invalid date
2007-04-31. Instead of returning an invalid result, the last valid day
of the month, 2007-04-30, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param monthsToAdd  the months to add, may be negative
@return a {@code LocalDate} based on this date with the months added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8349314 "plusWeeks"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "weeksToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the specified number of weeks added.
<p>
This method adds the specified amount in weeks to the days field incrementing
the month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2008-12-31 plus one week would result in 2009-01-07.
<p>
This instance is immutable and unaffected by this method call.

@param weeksToAdd  the weeks to add, may be negative
@return a {@code LocalDate} based on this date with the weeks added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8349442 "plusDays"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "daysToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the specified number of days added.
<p>
This method adds the specified amount to the days field incrementing the
month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2008-12-31 plus one day would result in 2009-01-01.
<p>
This instance is immutable and unaffected by this method call.

@param daysToAdd  the days to add, may be negative
@return a {@code LocalDate} based on this date with the days added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8349570 "minus"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date with the specified amount subtracted.
<p>
This returns a {@code LocalDate}, based on this one, with the specified amount subtracted.
The amount is typically {@link Period} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return a {@code LocalDate} based on this date with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8349698 "minus"
	public return_type class_ref 1040770 // LocalDate
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date with the specified amount subtracted.
<p>
This returns a {@code LocalDate}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return a {@code LocalDate} based on this date with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8349826 "minusYears"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDate} with the specified number of years subtracted.
<p>
This method subtracts the specified amount from the years field in three steps:
<ol>
<li>Subtract the input years from the year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2008-02-29 (leap year) minus one year would result in the
invalid date 2007-02-29 (standard year). Instead of returning an invalid
result, the last valid day of the month, 2007-02-28, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param yearsToSubtract  the years to subtract, may be negative
@return a {@code LocalDate} based on this date with the years subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8349954 "minusMonths"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "monthsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the specified number of months subtracted.
<p>
This method subtracts the specified amount from the months field in three steps:
<ol>
<li>Subtract the input months from the month-of-year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2007-03-31 minus one month would result in the invalid date
2007-02-31. Instead of returning an invalid result, the last valid day
of the month, 2007-02-28, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param monthsToSubtract  the months to subtract, may be negative
@return a {@code LocalDate} based on this date with the months subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8350082 "minusWeeks"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "weeksToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the specified number of weeks subtracted.
<p>
This method subtracts the specified amount in weeks from the days field decrementing
the month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2009-01-07 minus one week would result in 2008-12-31.
<p>
This instance is immutable and unaffected by this method call.

@param weeksToSubtract  the weeks to subtract, may be negative
@return a {@code LocalDate} based on this date with the weeks subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8350210 "minusDays"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "daysToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDate} with the specified number of days subtracted.
<p>
This method subtracts the specified amount from the days field decrementing the
month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2009-01-01 minus one day would result in 2008-12-31.
<p>
This instance is immutable and unaffected by this method call.

@param daysToSubtract  the days to subtract, may be negative
@return a {@code LocalDate} based on this date with the days subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8350338 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this date using the specified query.
<p>
This queries this date using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8350466 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same date as this object.
<p>
This returns a temporal object of the same observable type as the input
with the date changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#EPOCH_DAY} as the field.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisLocalDate.adjustInto(temporal);
  temporal = temporal.with(thisLocalDate);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc"
      end

      operation 8350594 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another date in terms of the specified unit.
<p>
This calculates the amount of time between two {@code LocalDate}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified date.
The result will be negative if the end is before the start.
The {@code Temporal} passed to this method is converted to a
{@code LocalDate} using {@link #from(TemporalAccessor)}.
For example, the amount in days between two dates can be calculated
using {@code startDate.until(endDate, DAYS)}.
<p>
The calculation returns a whole number, representing the number of
complete units between the two dates.
For example, the amount in months between 2012-06-15 and 2012-08-14
will only be one month as it is one day short of two months.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, MONTHS);
  amount = MONTHS.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code DAYS}, {@code WEEKS}, {@code MONTHS}, {@code YEARS},
{@code DECADES}, {@code CENTURIES}, {@code MILLENNIA} and {@code ERAS}
are supported. Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end date, exclusive, which is converted to a {@code LocalDate}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this date and the end date
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to a {@code LocalDate}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8350722 "daysUntil"
	package explicit_return_type "long"
	nparams 1
	  param inout name "end" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8350850 "monthsUntil"
	private explicit_return_type "long"
	nparams 1
	  param inout name "end" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8350978 "until"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param inout name "endDateExclusive" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the period between this date and another date as a {@code Period}.
<p>
This calculates the period between two dates in terms of years, months and days.
The start and end points are {@code this} and the specified date.
The result will be negative if the end is before the start.
The negative sign will be the same in each of year, month and day.
<p>
The calculation is performed using the ISO calendar system.
If necessary, the input date will be converted to ISO.
<p>
The start date is included, but the end date is not.
The period is calculated by removing complete months, then calculating
the remaining number of days, adjusting to ensure that both have the same sign.
The number of months is then normalized into years and months based on a 12 month year.
A month is considered to be complete if the end day-of-month is greater
than or equal to the start day-of-month.
For example, from {@code 2010-01-15} to {@code 2011-03-18} is \"1 year, 2 months and 3 days\".
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link Period#between(LocalDate, LocalDate)}:
<pre>
  // these two lines are equivalent
  period = start.until(end);
  period = Period.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.

@param endDateExclusive  the end date, exclusive, which may be in any chronology, not null
@return the period between this date and the end date, not null
"
      end

      operation 8351106 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats this date using the specified formatter.
<p>
This date will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted date string, not null
@throws DateTimeException if an error occurs during printing

 override for Javadoc and performance"
      end

      operation 8351234 "atTime"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "time" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this date with a time to create a {@code LocalDateTime}.
<p>
This returns a {@code LocalDateTime} formed from this date at the specified time.
All possible combinations of date and time are valid.

@param time  the time to combine with, not null
@return the local date-time formed from this date and the specified time, not null
"
      end

      operation 8351362 "atTime"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 2
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this date with a time to create a {@code LocalDateTime}.
<p>
This returns a {@code LocalDateTime} formed from this date at the
specified hour and minute.
The seconds and nanosecond fields will be set to zero.
The individual time fields must be within their valid range.
All possible combinations of date and time are valid.

@param hour  the hour-of-day to use, from 0 to 23
@param minute  the minute-of-hour to use, from 0 to 59
@return the local date-time formed from this date and the specified time, not null
@throws DateTimeException if the value of any field is out of range
"
      end

      operation 8351490 "atTime"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 3
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this date with a time to create a {@code LocalDateTime}.
<p>
This returns a {@code LocalDateTime} formed from this date at the
specified hour, minute and second.
The nanosecond field will be set to zero.
The individual time fields must be within their valid range.
All possible combinations of date and time are valid.

@param hour  the hour-of-day to use, from 0 to 23
@param minute  the minute-of-hour to use, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@return the local date-time formed from this date and the specified time, not null
@throws DateTimeException if the value of any field is out of range
"
      end

      operation 8351618 "atTime"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 4
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this date with a time to create a {@code LocalDateTime}.
<p>
This returns a {@code LocalDateTime} formed from this date at the
specified hour, minute, second and nanosecond.
The individual time fields must be within their valid range.
All possible combinations of date and time are valid.

@param hour  the hour-of-day to use, from 0 to 23
@param minute  the minute-of-hour to use, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999
@return the local date-time formed from this date and the specified time, not null
@throws DateTimeException if the value of any field is out of range
"
      end

      operation 8351746 "atTime"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "time" type class_ref 1053570 // OffsetTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this date with an offset time to create an {@code OffsetDateTime}.
<p>
This returns an {@code OffsetDateTime} formed from this date at the specified time.
All possible combinations of date and time are valid.

@param time  the time to combine with, not null
@return the offset date-time formed from this date and the specified time, not null
"
      end

      operation 8351874 "atStartOfDay"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this date with the time of midnight to create a {@code LocalDateTime}
at the start of this date.
<p>
This returns a {@code LocalDateTime} formed from this date at the time of
midnight, 00:00, at the start of this date.

@return the local date-time of midnight at the start of this date, not null
"
      end

      operation 8352002 "atStartOfDay"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a zoned date-time from this date at the earliest valid time according
to the rules in the time-zone.
<p>
Time-zone rules, such as daylight savings, mean that not every local date-time
is valid for the specified zone, thus the local date-time may not be midnight.
<p>
In most cases, there is only one valid offset for a local date-time.
In the case of an overlap, there are two valid offsets, and the earlier one is used,
corresponding to the first occurrence of midnight on the date.
In the case of a gap, the zoned date-time will represent the instant just after the gap.
<p>
If the zone ID is a {@link ZoneOffset}, then the result always has a time of midnight.
<p>
To convert to a specific time in a given time-zone call {@link #atTime(LocalTime)}
followed by {@link LocalDateTime#atZone(ZoneId)}.

@param zone  the zone ID to use, not null
@return the zoned date-time formed from this date and the earliest valid time for the zone, not null
"
      end

      operation 8352130 "toEpochDay"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8352258 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this date to another date.
<p>
The comparison is primarily based on the date, from earliest to latest.
It is \"consistent with equals\", as defined by {@link Comparable}.
<p>
If all the dates being compared are instances of {@code LocalDate},
then the comparison will be entirely based on the date.
If some dates being compared are in different chronologies, then the
chronology is also considered, see {@link java.time.chrono.ChronoLocalDate#compareTo}.

@param other  the other date to compare to, not null
@return the comparator value, negative if less, positive if greater

 override for Javadoc and performance"
      end

      operation 8352386 "compareTo0"
	package explicit_return_type "int"
	nparams 1
	  param inout name "otherDate" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8352514 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this date is after the specified date.
<p>
This checks to see if this date represents a point on the
local time-line after the other date.
<pre>
  LocalDate a = LocalDate.of(2012, 6, 30);
  LocalDate b = LocalDate.of(2012, 7, 1);
  a.isAfter(b) == false
  a.isAfter(a) == false
  b.isAfter(a) == true
</pre>
<p>
This method only considers the position of the two dates on the local time-line.
It does not take into account the chronology, or calendar system.
This is different from the comparison in {@link #compareTo(ChronoLocalDate)},
but is the same approach as {@link ChronoLocalDate#timeLineOrder()}.

@param other  the other date to compare to, not null
@return true if this date is after the specified date

 override for Javadoc and performance"
      end

      operation 8352642 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this date is before the specified date.
<p>
This checks to see if this date represents a point on the
local time-line before the other date.
<pre>
  LocalDate a = LocalDate.of(2012, 6, 30);
  LocalDate b = LocalDate.of(2012, 7, 1);
  a.isBefore(b) == true
  a.isBefore(a) == false
  b.isBefore(a) == false
</pre>
<p>
This method only considers the position of the two dates on the local time-line.
It does not take into account the chronology, or calendar system.
This is different from the comparison in {@link #compareTo(ChronoLocalDate)},
but is the same approach as {@link ChronoLocalDate#timeLineOrder()}.

@param other  the other date to compare to, not null
@return true if this date is before the specified date

 override for Javadoc and performance"
      end

      operation 8352770 "isEqual"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052418 // ChronoLocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this date is equal to the specified date.
<p>
This checks to see if this date represents the same point on the
local time-line as the other date.
<pre>
  LocalDate a = LocalDate.of(2012, 6, 30);
  LocalDate b = LocalDate.of(2012, 7, 1);
  a.isEqual(b) == false
  a.isEqual(a) == true
  b.isEqual(a) == false
</pre>
<p>
This method only considers the position of the two dates on the local time-line.
It does not take into account the chronology, or calendar system.
This is different from the comparison in {@link #compareTo(ChronoLocalDate)}
but is the same approach as {@link ChronoLocalDate#timeLineOrder()}.

@param other  the other date to compare to, not null
@return true if this date is equal to the specified date

 override for Javadoc and performance"
      end

      operation 8352898 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this date is equal to another date.
<p>
Compares this {@code LocalDate} with another ensuring that the date is the same.
<p>
Only objects of type {@code LocalDate} are compared, other types return false.
To compare the dates of two {@code TemporalAccessor} instances, including dates
in two different chronologies, use {@link ChronoField#EPOCH_DAY} as a comparator.

@param obj  the object to check, null returns false
@return true if this is equal to the other date
"
      end

      operation 8353026 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date.

@return a suitable hash code
"
      end

      operation 8353154 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this date as a {@code String}, such as {@code 2007-12-03}.
<p>
The output will be in the ISO-8601 format {@code uuuu-MM-dd}.

@return a string representation of this date, not null
"
      end

      operation 8353282 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(3);  // identifies a LocalDate
 out.writeInt(year);
 out.writeByte(month);
 out.writeByte(day);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8353410 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8353538 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8353666 "readExternal"
	class_operation package return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1043842 "LocalTime"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A time without a time-zone in the ISO-8601 calendar system,
such as {@code 10:15:30}.
<p>
{@code LocalTime} is an immutable date-time object that represents a time,
often viewed as hour-minute-second.
Time is represented to nanosecond precision.
For example, the value \"13:45.30.123456789\" can be stored in a {@code LocalTime}.
<p>
This class does not store or represent a date or time-zone.
Instead, it is a description of the local time as seen on a wall clock.
It cannot represent an instant on the time-line without additional information
such as an offset or time-zone.
<p>
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. This API assumes that all calendar systems use the same
representation, this class, for time-of-day.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code LocalTime} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3428098 // <realization>
	relation 3428098 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3428098 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3428226 // <realization>
	relation 3428226 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3428226 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3428354 // <realization>
	relation 3428354 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3428354 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3428482 // <realization>
	relation 3428482 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3428482 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3428610 // MIN (<unidirectional association>)
	relation 3428610 --->
	  a role_name "MIN" class_relation const_relation public
	    comment "
The minimum supported {@code LocalTime}, '00:00'.
This is the time of midnight at the start of the day.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3428610 // MIN (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      classrelation 3428738 // MAX (<unidirectional association>)
	relation 3428738 --->
	  a role_name "MAX" class_relation const_relation public
	    comment "
The maximum supported {@code LocalTime}, '23:59:59.999999999'.
This is the time just before midnight at the end of the day.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3428738 // MAX (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      classrelation 3428866 // MIDNIGHT (<unidirectional association>)
	relation 3428866 --->
	  a role_name "MIDNIGHT" class_relation const_relation public
	    comment "
The time of midnight at the start of the day, '00:00'.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3428866 // MIDNIGHT (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      classrelation 3428994 // NOON (<unidirectional association>)
	relation 3428994 --->
	  a role_name "NOON" class_relation const_relation public
	    comment "
The time of noon in the middle of the day, '12:00'.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3428994 // NOON (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      classrelation 3429122 // HOURS (<unidirectional association>)
	relation 3429122 --->
	  a role_name "HOURS" multiplicity "[]" init_value " new LocalTime[24]" class_relation const_relation private
	    comment "
Constants for the local time of each hour.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3429122 // HOURS (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      extra_member 168578 "initialization"
	
	cpp "" ""
	java "  static {
        for (int i = 0; i < HOURS.length; i++) {
            HOURS[i] = new LocalTime(i, 0, 0, 0);
        }
        MIDNIGHT = HOURS[0];
        NOON = HOURS[12];
        MIN = HOURS[0];
        MAX = new LocalTime(23, 59, 59, 999_999_999);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1943170 "HOURS_PER_DAY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 24"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Hours per day.

"
      end

      attribute 1943298 "MINUTES_PER_HOUR"
	class_attribute const_attribute package explicit_type "int"
	init_value " 60"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Minutes per hour.

"
      end

      attribute 1943426 "MINUTES_PER_DAY"
	class_attribute const_attribute package explicit_type "int"
	init_value " MINUTES_PER_HOUR * HOURS_PER_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Minutes per day.

"
      end

      attribute 1943554 "SECONDS_PER_MINUTE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 60"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Seconds per minute.

"
      end

      attribute 1943682 "SECONDS_PER_HOUR"
	class_attribute const_attribute package explicit_type "int"
	init_value " SECONDS_PER_MINUTE * MINUTES_PER_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Seconds per hour.

"
      end

      attribute 1943810 "SECONDS_PER_DAY"
	class_attribute const_attribute package explicit_type "int"
	init_value " SECONDS_PER_HOUR * HOURS_PER_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Seconds per day.

"
      end

      attribute 1943938 "MILLIS_PER_DAY"
	class_attribute const_attribute package explicit_type "long"
	init_value " SECONDS_PER_DAY * 1000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Milliseconds per day.

"
      end

      attribute 1944066 "MICROS_PER_DAY"
	class_attribute const_attribute package explicit_type "long"
	init_value " SECONDS_PER_DAY * 1000_000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Microseconds per day.

"
      end

      attribute 1944194 "NANOS_PER_SECOND"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1000_000_000L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nanos per second.

"
      end

      attribute 1944322 "NANOS_PER_MINUTE"
	class_attribute const_attribute package explicit_type "long"
	init_value " NANOS_PER_SECOND * SECONDS_PER_MINUTE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nanos per minute.

"
      end

      attribute 1944450 "NANOS_PER_HOUR"
	class_attribute const_attribute package explicit_type "long"
	init_value " NANOS_PER_MINUTE * MINUTES_PER_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nanos per hour.

"
      end

      attribute 1944578 "NANOS_PER_DAY"
	class_attribute const_attribute package explicit_type "long"
	init_value " NANOS_PER_HOUR * HOURS_PER_DAY"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Nanos per day.

"
      end

      attribute 1944706 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6414437269572265201L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1944834 "hour"
	const_attribute private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The hour.

"
      end

      attribute 1944962 "minute"
	const_attribute private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minute.

"
      end

      attribute 1945090 "second"
	const_attribute private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The second.

"
      end

      attribute 1945218 "nano"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The nanosecond.

"
      end

      operation 8367874 "now"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current time from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current time.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current time using the system clock and default time-zone, not null
"
      end

      operation 8368002 "now"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current time from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current time.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current time using the system clock, not null
"
      end

      operation 8368130 "now"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current time from the specified clock.
<p>
This will query the specified clock to obtain the current time.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current time, not null
"
      end

      operation 8368258 "of"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 2
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalTime} from an hour and minute.
<p>
This returns a {@code LocalTime} with the specified hour and minute.
The second and nanosecond fields will be set to zero.

@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@return the local time, not null
@throws DateTimeException if the value of any field is out of range
"
      end

      operation 8368386 "of"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 3
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalTime} from an hour, minute and second.
<p>
This returns a {@code LocalTime} with the specified hour, minute and second.
The nanosecond field will be set to zero.

@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@return the local time, not null
@throws DateTimeException if the value of any field is out of range
"
      end

      operation 8368514 "of"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 4
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalTime} from an hour, minute, second and nanosecond.
<p>
This returns a {@code LocalTime} with the specified hour, minute, second and nanosecond.

@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999
@return the local time, not null
@throws DateTimeException if the value of any field is out of range
"
      end

      operation 8368642 "ofSecondOfDay"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "secondOfDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalTime} from a second-of-day value.
<p>
This returns a {@code LocalTime} with the specified second-of-day.
The nanosecond field will be set to zero.

@param secondOfDay  the second-of-day, from {@code 0} to {@code 24 * 60 * 60 - 1}
@return the local time, not null
@throws DateTimeException if the second-of-day value is invalid
"
      end

      operation 8368770 "ofNanoOfDay"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "nanoOfDay" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalTime} from a nanos-of-day value.
<p>
This returns a {@code LocalTime} with the specified nanosecond-of-day.

@param nanoOfDay  the nano of day, from {@code 0} to {@code 24 * 60 * 60 * 1,000,000,000 - 1}
@return the local time, not null
@throws DateTimeException if the nanos of day value is invalid
"
      end

      operation 8368898 "from"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalTime} from a temporal object.
<p>
This obtains a local time based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code LocalTime}.
<p>
The conversion uses the {@link TemporalQueries#localTime()} query, which relies
on extracting the {@link ChronoField#NANO_OF_DAY NANO_OF_DAY} field.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code LocalTime::from}.

@param temporal  the temporal object to convert, not null
@return the local time, not null
@throws DateTimeException if unable to convert to a {@code LocalTime}
"
      end

      operation 8369026 "parse"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalTime} from a text string such as {@code 10:15}.
<p>
The string must represent a valid time and is parsed using
{@link java.time.format.DateTimeFormatter#ISO_LOCAL_TIME}.

@param text  the text to parse such as \"10:15:30\", not null
@return the parsed local time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8369154 "parse"
	class_operation public return_type class_ref 1043842 // LocalTime
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalTime} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a time.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed local time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8369282 "create"
	class_operation private return_type class_ref 1043842 // LocalTime
	nparams 4
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates a local time from the hour, minute, second and nanosecond fields.
<p>
This factory may return a cached value, but applications must not rely on this.

@param hour  the hour-of-day to represent, validated from 0 to 23
@param minute  the minute-of-hour to represent, validated from 0 to 59
@param second  the second-of-minute to represent, validated from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, validated from 0 to 999,999,999
@return the local time, not null
"
      end

      operation 8369410 "LocalTime"
	private explicit_return_type ""
	nparams 4
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor, previously validated.

@param hour  the hour-of-day to represent, validated from 0 to 23
@param minute  the minute-of-hour to represent, validated from 0 to 59
@param second  the second-of-minute to represent, validated from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, validated from 0 to 999,999,999
"
      end

      operation 8369538 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this time can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code NANO_OF_SECOND}
<li>{@code NANO_OF_DAY}
<li>{@code MICRO_OF_SECOND}
<li>{@code MICRO_OF_DAY}
<li>{@code MILLI_OF_SECOND}
<li>{@code MILLI_OF_DAY}
<li>{@code SECOND_OF_MINUTE}
<li>{@code SECOND_OF_DAY}
<li>{@code MINUTE_OF_HOUR}
<li>{@code MINUTE_OF_DAY}
<li>{@code HOUR_OF_AMPM}
<li>{@code CLOCK_HOUR_OF_AMPM}
<li>{@code HOUR_OF_DAY}
<li>{@code CLOCK_HOUR_OF_DAY}
<li>{@code AMPM_OF_DAY}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this time, false if not
"
      end

      operation 8369666 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code NANOS}
<li>{@code MICROS}
<li>{@code MILLIS}
<li>{@code SECONDS}
<li>{@code MINUTES}
<li>{@code HOURS}
<li>{@code HALF_DAYS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not

 override for Javadoc"
      end

      operation 8369794 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This time is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported

 override for Javadoc"
      end

      operation 8369922 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this time as an {@code int}.
<p>
This queries this time for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this time, except {@code NANO_OF_DAY} and {@code MICRO_OF_DAY}
which are too large to fit in an {@code int} and throw a {@code DateTimeException}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc and performance"
      end

      operation 8370050 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this time as a {@code long}.
<p>
This queries this time for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this time.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8370178 "get0"
	private explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8370306 "getHour"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the hour-of-day field.

@return the hour-of-day, from 0 to 23
"
      end

      operation 8370434 "getMinute"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minute-of-hour field.

@return the minute-of-hour, from 0 to 59
"
      end

      operation 8370562 "getSecond"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the second-of-minute field.

@return the second-of-minute, from 0 to 59
"
      end

      operation 8370690 "getNano"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the nano-of-second field.

@return the nano-of-second, from 0 to 999,999,999
"
      end

      operation 8370818 "with"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an adjusted copy of this time.
<p>
This returns a {@code LocalTime}, based on this one, with the time adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
A simple adjuster might simply set the one of the fields, such as the hour field.
A more complex adjuster might set the time to the last hour of the day.
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return a {@code LocalTime} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8370946 "with"
	public return_type class_ref 1043842 // LocalTime
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this time with the specified field set to a new value.
<p>
This returns a {@code LocalTime}, based on this one, with the value
for the specified field changed.
This can be used to change any supported field, such as the hour, minute or second.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code NANO_OF_SECOND} -
 Returns a {@code LocalTime} with the specified nano-of-second.
 The hour, minute and second will be unchanged.
<li>{@code NANO_OF_DAY} -
 Returns a {@code LocalTime} with the specified nano-of-day.
 This completely replaces the time and is equivalent to {@link #ofNanoOfDay(long)}.
<li>{@code MICRO_OF_SECOND} -
 Returns a {@code LocalTime} with the nano-of-second replaced by the specified
 micro-of-second multiplied by 1,000.
 The hour, minute and second will be unchanged.
<li>{@code MICRO_OF_DAY} -
 Returns a {@code LocalTime} with the specified micro-of-day.
 This completely replaces the time and is equivalent to using {@link #ofNanoOfDay(long)}
 with the micro-of-day multiplied by 1,000.
<li>{@code MILLI_OF_SECOND} -
 Returns a {@code LocalTime} with the nano-of-second replaced by the specified
 milli-of-second multiplied by 1,000,000.
 The hour, minute and second will be unchanged.
<li>{@code MILLI_OF_DAY} -
 Returns a {@code LocalTime} with the specified milli-of-day.
 This completely replaces the time and is equivalent to using {@link #ofNanoOfDay(long)}
 with the milli-of-day multiplied by 1,000,000.
<li>{@code SECOND_OF_MINUTE} -
 Returns a {@code LocalTime} with the specified second-of-minute.
 The hour, minute and nano-of-second will be unchanged.
<li>{@code SECOND_OF_DAY} -
 Returns a {@code LocalTime} with the specified second-of-day.
 The nano-of-second will be unchanged.
<li>{@code MINUTE_OF_HOUR} -
 Returns a {@code LocalTime} with the specified minute-of-hour.
 The hour, second-of-minute and nano-of-second will be unchanged.
<li>{@code MINUTE_OF_DAY} -
 Returns a {@code LocalTime} with the specified minute-of-day.
 The second-of-minute and nano-of-second will be unchanged.
<li>{@code HOUR_OF_AMPM} -
 Returns a {@code LocalTime} with the specified hour-of-am-pm.
 The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged.
<li>{@code CLOCK_HOUR_OF_AMPM} -
 Returns a {@code LocalTime} with the specified clock-hour-of-am-pm.
 The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged.
<li>{@code HOUR_OF_DAY} -
 Returns a {@code LocalTime} with the specified hour-of-day.
 The minute-of-hour, second-of-minute and nano-of-second will be unchanged.
<li>{@code CLOCK_HOUR_OF_DAY} -
 Returns a {@code LocalTime} with the specified clock-hour-of-day.
 The minute-of-hour, second-of-minute and nano-of-second will be unchanged.
<li>{@code AMPM_OF_DAY} -
 Returns a {@code LocalTime} with the specified AM/PM.
 The hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be unchanged.
</ul>
<p>
In all cases, if the new value is outside the valid range of values for the field
then a {@code DateTimeException} will be thrown.
<p>
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return a {@code LocalTime} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8371074 "withHour"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "hour" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalTime} with the hour-of-day altered.
<p>
This instance is immutable and unaffected by this method call.

@param hour  the hour-of-day to set in the result, from 0 to 23
@return a {@code LocalTime} based on this time with the requested hour, not null
@throws DateTimeException if the hour value is invalid
"
      end

      operation 8371202 "withMinute"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the minute-of-hour altered.
<p>
This instance is immutable and unaffected by this method call.

@param minute  the minute-of-hour to set in the result, from 0 to 59
@return a {@code LocalTime} based on this time with the requested minute, not null
@throws DateTimeException if the minute value is invalid
"
      end

      operation 8371330 "withSecond"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the second-of-minute altered.
<p>
This instance is immutable and unaffected by this method call.

@param second  the second-of-minute to set in the result, from 0 to 59
@return a {@code LocalTime} based on this time with the requested second, not null
@throws DateTimeException if the second value is invalid
"
      end

      operation 8371458 "withNano"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the nano-of-second altered.
<p>
This instance is immutable and unaffected by this method call.

@param nanoOfSecond  the nano-of-second to set in the result, from 0 to 999,999,999
@return a {@code LocalTime} based on this time with the requested nanosecond, not null
@throws DateTimeException if the nanos value is invalid
"
      end

      operation 8371586 "truncatedTo"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalTime} with the time truncated.
<p>
Truncation returns a copy of the original time with fields
smaller than the specified unit set to zero.
For example, truncating with the {@link ChronoUnit#MINUTES minutes} unit
will set the second-of-minute and nano-of-second field to zero.
<p>
The unit must have a {@linkplain TemporalUnit#getDuration() duration}
that divides into the length of a standard day without remainder.
This includes all supplied time units on {@link ChronoUnit} and
{@link ChronoUnit#DAYS DAYS}. Other units throw an exception.
<p>
This instance is immutable and unaffected by this method call.

@param unit  the unit to truncate to, not null
@return a {@code LocalTime} based on this time with the time truncated, not null
@throws DateTimeException if unable to truncate
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8371714 "plus"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this time with the specified amount added.
<p>
This returns a {@code LocalTime}, based on this one, with the specified amount added.
The amount is typically {@link Duration} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return a {@code LocalTime} based on this time with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8371842 "plus"
	public return_type class_ref 1043842 // LocalTime
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this time with the specified amount added.
<p>
This returns a {@code LocalTime}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code NANOS} -
 Returns a {@code LocalTime} with the specified number of nanoseconds added.
 This is equivalent to {@link #plusNanos(long)}.
<li>{@code MICROS} -
 Returns a {@code LocalTime} with the specified number of microseconds added.
 This is equivalent to {@link #plusNanos(long)} with the amount
 multiplied by 1,000.
<li>{@code MILLIS} -
 Returns a {@code LocalTime} with the specified number of milliseconds added.
 This is equivalent to {@link #plusNanos(long)} with the amount
 multiplied by 1,000,000.
<li>{@code SECONDS} -
 Returns a {@code LocalTime} with the specified number of seconds added.
 This is equivalent to {@link #plusSeconds(long)}.
<li>{@code MINUTES} -
 Returns a {@code LocalTime} with the specified number of minutes added.
 This is equivalent to {@link #plusMinutes(long)}.
<li>{@code HOURS} -
 Returns a {@code LocalTime} with the specified number of hours added.
 This is equivalent to {@link #plusHours(long)}.
<li>{@code HALF_DAYS} -
 Returns a {@code LocalTime} with the specified number of half-days added.
 This is equivalent to {@link #plusHours(long)} with the amount
 multiplied by 12.
</ul>
<p>
All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return a {@code LocalTime} based on this time with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8371970 "plusHours"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "hoursToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalTime} with the specified number of hours added.
<p>
This adds the specified number of hours to this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param hoursToAdd  the hours to add, may be negative
@return a {@code LocalTime} based on this time with the hours added, not null
"
      end

      operation 8372098 "plusMinutes"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "minutesToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the specified number of minutes added.
<p>
This adds the specified number of minutes to this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param minutesToAdd  the minutes to add, may be negative
@return a {@code LocalTime} based on this time with the minutes added, not null
"
      end

      operation 8372226 "plusSeconds"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "secondstoAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the specified number of seconds added.
<p>
This adds the specified number of seconds to this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param secondstoAdd  the seconds to add, may be negative
@return a {@code LocalTime} based on this time with the seconds added, not null
"
      end

      operation 8372354 "plusNanos"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "nanosToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the specified number of nanoseconds added.
<p>
This adds the specified number of nanoseconds to this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param nanosToAdd  the nanos to add, may be negative
@return a {@code LocalTime} based on this time with the nanoseconds added, not null
"
      end

      operation 8372482 "minus"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this time with the specified amount subtracted.
<p>
This returns a {@code LocalTime}, based on this one, with the specified amount subtracted.
The amount is typically {@link Duration} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return a {@code LocalTime} based on this time with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8372610 "minus"
	public return_type class_ref 1043842 // LocalTime
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this time with the specified amount subtracted.
<p>
This returns a {@code LocalTime}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return a {@code LocalTime} based on this time with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8372738 "minusHours"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "hoursToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalTime} with the specified number of hours subtracted.
<p>
This subtracts the specified number of hours from this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param hoursToSubtract  the hours to subtract, may be negative
@return a {@code LocalTime} based on this time with the hours subtracted, not null
"
      end

      operation 8372866 "minusMinutes"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "minutesToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the specified number of minutes subtracted.
<p>
This subtracts the specified number of minutes from this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param minutesToSubtract  the minutes to subtract, may be negative
@return a {@code LocalTime} based on this time with the minutes subtracted, not null
"
      end

      operation 8372994 "minusSeconds"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "secondsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the specified number of seconds subtracted.
<p>
This subtracts the specified number of seconds from this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param secondsToSubtract  the seconds to subtract, may be negative
@return a {@code LocalTime} based on this time with the seconds subtracted, not null
"
      end

      operation 8373122 "minusNanos"
	public return_type class_ref 1043842 // LocalTime
	nparams 1
	  param in name "nanosToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalTime} with the specified number of nanoseconds subtracted.
<p>
This subtracts the specified number of nanoseconds from this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param nanosToSubtract  the nanos to subtract, may be negative
@return a {@code LocalTime} based on this time with the nanoseconds subtracted, not null
"
      end

      operation 8373250 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this time using the specified query.
<p>
This queries this time using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8373378 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same time as this object.
<p>
This returns a temporal object of the same observable type as the input
with the time changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#NANO_OF_DAY} as the field.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisLocalTime.adjustInto(temporal);
  temporal = temporal.with(thisLocalTime);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8373506 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another time in terms of the specified unit.
<p>
This calculates the amount of time between two {@code LocalTime}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified time.
The result will be negative if the end is before the start.
The {@code Temporal} passed to this method is converted to a
{@code LocalTime} using {@link #from(TemporalAccessor)}.
For example, the amount in hours between two times can be calculated
using {@code startTime.until(endTime, HOURS)}.
<p>
The calculation returns a whole number, representing the number of
complete units between the two times.
For example, the amount in hours between 11:30 and 13:29 will only
be one hour as it is one minute short of two hours.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, MINUTES);
  amount = MINUTES.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},
{@code MINUTES}, {@code HOURS} and {@code HALF_DAYS} are supported.
Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end time, exclusive, which is converted to a {@code LocalTime}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this time and the end time
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to a {@code LocalTime}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8373634 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this time using the specified formatter.
<p>
This time will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted time string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8373762 "atDate"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "date" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this time with a date to create a {@code LocalDateTime}.
<p>
This returns a {@code LocalDateTime} formed from this time at the specified date.
All possible combinations of date and time are valid.

@param date  the date to combine with, not null
@return the local date-time formed from this time and the specified date, not null
"
      end

      operation 8373890 "atOffset"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this time with an offset to create an {@code OffsetTime}.
<p>
This returns an {@code OffsetTime} formed from this time at the specified offset.
All possible combinations of time and offset are valid.

@param offset  the offset to combine with, not null
@return the offset time formed from this time and the specified offset, not null
"
      end

      operation 8374018 "toSecondOfDay"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Extracts the time as seconds of day,
from {@code 0} to {@code 24 * 60 * 60 - 1}.

@return the second-of-day equivalent to this time
"
      end

      operation 8374146 "toNanoOfDay"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extracts the time as nanos of day,
from {@code 0} to {@code 24 * 60 * 60 * 1,000,000,000 - 1}.

@return the nano of day equivalent to this time
"
      end

      operation 8374274 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this time to another time.
<p>
The comparison is based on the time-line position of the local times within a day.
It is \"consistent with equals\", as defined by {@link Comparable}.

@param other  the other time to compare to, not null
@return the comparator value, negative if less, positive if greater
@throws NullPointerException if {@code other} is null
"
      end

      operation 8374402 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this time is after the specified time.
<p>
The comparison is based on the time-line position of the time within a day.

@param other  the other time to compare to, not null
@return true if this is after the specified time
@throws NullPointerException if {@code other} is null
"
      end

      operation 8374530 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this time is before the specified time.
<p>
The comparison is based on the time-line position of the time within a day.

@param other  the other time to compare to, not null
@return true if this point is before the specified time
@throws NullPointerException if {@code other} is null
"
      end

      operation 8374658 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this time is equal to another time.
<p>
The comparison is based on the time-line position of the time within a day.
<p>
Only objects of type {@code LocalTime} are compared, other types return false.
To compare the date of two {@code TemporalAccessor} instances, use
{@link ChronoField#NANO_OF_DAY} as a comparator.

@param obj  the object to check, null returns false
@return true if this is equal to the other time
"
      end

      operation 8374786 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this time.

@return a suitable hash code
"
      end

      operation 8374914 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this time as a {@code String}, such as {@code 10:15}.
<p>
The output will be one of the following ISO-8601 formats:
<ul>
<li>{@code HH:mm}</li>
<li>{@code HH:mm:ss}</li>
<li>{@code HH:mm:ss.SSS}</li>
<li>{@code HH:mm:ss.SSSSSS}</li>
<li>{@code HH:mm:ss.SSSSSSSSS}</li>
</ul>
The format used will be the shortest that outputs the full value of
the time where the omitted parts are implied to be zero.

@return a string representation of this time, not null
"
      end

      operation 8375042 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
A twos-complement value indicates the remaining values are not in the stream
and should be set to zero.
<pre>
 out.writeByte(4);  // identifies a LocalTime
 if (nano == 0) {
   if (second == 0) {
     if (minute == 0) {
       out.writeByte(~hour);
     } else {
       out.writeByte(hour);
       out.writeByte(~minute);
     }
   } else {
     out.writeByte(hour);
     out.writeByte(minute);
     out.writeByte(~second);
   }
 } else {
   out.writeByte(hour);
   out.writeByte(minute);
   out.writeByte(second);
   out.writeInt(nano);
 }
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8375170 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8375298 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8375426 "readExternal"
	class_operation package return_type class_ref 1043842 // LocalTime
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1043970 "LocalDateTime"
      visibility public 
      nactuals 1
      actual class class_ref 1053058 // ChronoLocalDateTime
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-time without a time-zone in the ISO-8601 calendar system,
such as {@code 2007-12-03T10:15:30}.
<p>
{@code LocalDateTime} is an immutable date-time object that represents a date-time,
often viewed as year-month-day-hour-minute-second. Other date and time fields,
such as day-of-year, day-of-week and week-of-year, can also be accessed.
Time is represented to nanosecond precision.
For example, the value \"2nd October 2007 at 13:45.30.123456789\" can be
stored in a {@code LocalDateTime}.
<p>
This class does not store or represent a time-zone.
Instead, it is a description of the date, as used for birthdays, combined with
the local time as seen on a wall clock.
It cannot represent an instant on the time-line without additional information
such as an offset or time-zone.
<p>
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. It is equivalent to the proleptic Gregorian calendar
system, in which today's rules for leap years are applied for all time.
For most applications written today, the ISO-8601 rules are entirely suitable.
However, any application that makes use of historical dates, and requires them
to be accurate will find the ISO-8601 approach unsuitable.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code LocalDateTime} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3426690 // <realization>
	relation 3426690 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3426690 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3426818 // <realization>
	relation 3426818 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3426818 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3427330 // <realization>
	relation 3427330 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3427330 // <realization>
	  b parent class_ref 1053058 // ChronoLocalDateTime
      end

      classrelation 3427458 // <realization>
	relation 3427458 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3427458 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3427586 // MIN (<unidirectional association>)
	relation 3427586 --->
	  a role_name "MIN" init_value " LocalDateTime.of(LocalDate.MIN, LocalTime.MIN)" class_relation const_relation public
	    comment "
The minimum supported {@code LocalDateTime}, '-999999999-01-01T00:00:00'.
This is the local date-time of midnight at the start of the minimum date.
This combines {@link LocalDate#MIN} and {@link LocalTime#MIN}.
This could be used by an application as a \"far past\" date-time.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3427586 // MIN (<unidirectional association>)
	  b parent class_ref 1043970 // LocalDateTime
      end

      classrelation 3427714 // MAX (<unidirectional association>)
	relation 3427714 --->
	  a role_name "MAX" init_value " LocalDateTime.of(LocalDate.MAX, LocalTime.MAX)" class_relation const_relation public
	    comment "
The maximum supported {@code LocalDateTime}, '+999999999-12-31T23:59:59.999999999'.
This is the local date-time just before midnight at the end of the maximum date.
This combines {@link LocalDate#MAX} and {@link LocalTime#MAX}.
This could be used by an application as a \"far future\" date-time.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3427714 // MAX (<unidirectional association>)
	  b parent class_ref 1043970 // LocalDateTime
      end

      attribute 1943042 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6207766400415563566L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3427842 // date (<unidirectional association>)
	relation 3427842 --->
	  a role_name "date" const_relation private
	    comment "
The date part.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3427842 // date (<unidirectional association>)
	  b parent class_ref 1040770 // LocalDate
      end

      classrelation 3427970 // time (<unidirectional association>)
	relation 3427970 --->
	  a role_name "time" const_relation private
	    comment "
The time part.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3427970 // time (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      operation 8357122 "now"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current date-time from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date-time.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current date-time using the system clock and default time-zone, not null
"
      end

      operation 8357250 "now"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current date-time from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date-time.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current date-time using the system clock, not null
"
      end

      operation 8357378 "now"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current date-time from the specified clock.
<p>
This will query the specified clock to obtain the current date-time.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current date-time, not null
"
      end

      operation 8357506 "of"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 5
	  param in name "year" explicit_type "int"
	  param inout name "month" type class_ref 1053186 // Month
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDateTime} from year, month,
day, hour and minute, setting the second and nanosecond to zero.
<p>
This returns a {@code LocalDateTime} with the specified year, month,
day-of-month, hour and minute.
The day must be valid for the year and month, otherwise an exception will be thrown.
The second and nanosecond fields will be set to zero.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, not null
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@return the local date-time, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8357634 "of"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 6
	  param in name "year" explicit_type "int"
	  param inout name "month" type class_ref 1053186 // Month
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDateTime} from year, month,
day, hour, minute and second, setting the nanosecond to zero.
<p>
This returns a {@code LocalDateTime} with the specified year, month,
day-of-month, hour, minute and second.
The day must be valid for the year and month, otherwise an exception will be thrown.
The nanosecond field will be set to zero.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, not null
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@return the local date-time, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8357762 "of"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 7
	  param in name "year" explicit_type "int"
	  param inout name "month" type class_ref 1053186 // Month
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDateTime} from year, month,
day, hour, minute, second and nanosecond.
<p>
This returns a {@code LocalDateTime} with the specified year, month,
day-of-month, hour, minute, second and nanosecond.
The day must be valid for the year and month, otherwise an exception will be thrown.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, not null
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999
@return the local date-time, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8357890 "of"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 5
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDateTime} from year, month,
day, hour and minute, setting the second and nanosecond to zero.
<p>
This returns a {@code LocalDateTime} with the specified year, month,
day-of-month, hour and minute.
The day must be valid for the year and month, otherwise an exception will be thrown.
The second and nanosecond fields will be set to zero.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@return the local date-time, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8358018 "of"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 6
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDateTime} from year, month,
day, hour, minute and second, setting the nanosecond to zero.
<p>
This returns a {@code LocalDateTime} with the specified year, month,
day-of-month, hour, minute and second.
The day must be valid for the year and month, otherwise an exception will be thrown.
The nanosecond field will be set to zero.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@return the local date-time, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8358146 "of"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 7
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDateTime} from year, month,
day, hour, minute, second and nanosecond.
<p>
This returns a {@code LocalDateTime} with the specified year, month,
day-of-month, hour, minute, second and nanosecond.
The day must be valid for the year and month, otherwise an exception will be thrown.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999
@return the local date-time, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8358274 "of"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 2
	  param inout name "date" type class_ref 1040770 // LocalDate
	  param inout name "time" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDateTime} from a date and time.

@param date  the local date, not null
@param time  the local time, not null
@return the local date-time, not null
"
      end

      operation 8358402 "ofInstant"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Obtains an instance of {@code LocalDateTime} from an {@code Instant} and zone ID.
<p>
This creates a local date-time based on the specified instant.
First, the offset from UTC/Greenwich is obtained using the zone ID and instant,
which is simple as there is only one valid offset for each instant.
Then, the instant and offset are used to calculate the local date-time.

@param instant  the instant to create the date-time from, not null
@param zone  the time-zone, which may be an offset, not null
@return the local date-time, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8358530 "ofEpochSecond"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 3
	  param in name "epochSecond" explicit_type "long"
	  param in name "nanoOfSecond" explicit_type "int"
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDateTime} using seconds from the
epoch of 1970-01-01T00:00:00Z.
<p>
This allows the {@link ChronoField#INSTANT_SECONDS epoch-second} field
to be converted to a local date-time. This is primarily intended for
low-level conversions rather than general application usage.

@param epochSecond  the number of seconds from the epoch of 1970-01-01T00:00:00Z
@param nanoOfSecond  the nanosecond within the second, from 0 to 999,999,999
@param offset  the zone offset, not null
@return the local date-time, not null
@throws DateTimeException if the result exceeds the supported range,
 or if the nano-of-second is invalid
"
      end

      operation 8358658 "from"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDateTime} from a temporal object.
<p>
This obtains a local date-time based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code LocalDateTime}.
<p>
The conversion extracts and combines the {@code LocalDate} and the
{@code LocalTime} from the temporal object.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code LocalDateTime::from}.

@param temporal  the temporal object to convert, not null
@return the local date-time, not null
@throws DateTimeException if unable to convert to a {@code LocalDateTime}
"
      end

      operation 8358786 "parse"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code LocalDateTime} from a text string such as {@code 2007-12-03T10:15:30}.
<p>
The string must represent a valid date-time and is parsed using
{@link java.time.format.DateTimeFormatter#ISO_LOCAL_DATE_TIME}.

@param text  the text to parse such as \"2007-12-03T10:15:30\", not null
@return the parsed local date-time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8358914 "parse"
	class_operation public return_type class_ref 1043970 // LocalDateTime
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code LocalDateTime} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a date-time.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed local date-time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8359042 "LocalDateTime"
	private explicit_return_type ""
	nparams 2
	  param inout name "date" type class_ref 1040770 // LocalDate
	  param inout name "time" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param date  the date part of the date-time, validated not null
@param time  the time part of the date-time, validated not null
"
      end

      operation 8359170 "with"
	private return_type class_ref 1043970 // LocalDateTime
	nparams 2
	  param inout name "newDate" type class_ref 1040770 // LocalDate
	  param inout name "newTime" type class_ref 1043842 // LocalTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date-time with the new date and time, checking
to see if a new object is in fact required.

@param newDate  the date of the new date-time, not null
@param newTime  the time of the new date-time, not null
@return the date-time, not null
"
      end

      operation 8359298 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this date-time can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code NANO_OF_SECOND}
<li>{@code NANO_OF_DAY}
<li>{@code MICRO_OF_SECOND}
<li>{@code MICRO_OF_DAY}
<li>{@code MILLI_OF_SECOND}
<li>{@code MILLI_OF_DAY}
<li>{@code SECOND_OF_MINUTE}
<li>{@code SECOND_OF_DAY}
<li>{@code MINUTE_OF_HOUR}
<li>{@code MINUTE_OF_DAY}
<li>{@code HOUR_OF_AMPM}
<li>{@code CLOCK_HOUR_OF_AMPM}
<li>{@code HOUR_OF_DAY}
<li>{@code CLOCK_HOUR_OF_DAY}
<li>{@code AMPM_OF_DAY}
<li>{@code DAY_OF_WEEK}
<li>{@code ALIGNED_DAY_OF_WEEK_IN_MONTH}
<li>{@code ALIGNED_DAY_OF_WEEK_IN_YEAR}
<li>{@code DAY_OF_MONTH}
<li>{@code DAY_OF_YEAR}
<li>{@code EPOCH_DAY}
<li>{@code ALIGNED_WEEK_OF_MONTH}
<li>{@code ALIGNED_WEEK_OF_YEAR}
<li>{@code MONTH_OF_YEAR}
<li>{@code PROLEPTIC_MONTH}
<li>{@code YEAR_OF_ERA}
<li>{@code YEAR}
<li>{@code ERA}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this date-time, false if not
"
      end

      operation 8359426 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this date-time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code NANOS}
<li>{@code MICROS}
<li>{@code MILLIS}
<li>{@code SECONDS}
<li>{@code MINUTES}
<li>{@code HOURS}
<li>{@code HALF_DAYS}
<li>{@code DAYS}
<li>{@code WEEKS}
<li>{@code MONTHS}
<li>{@code YEARS}
<li>{@code DECADES}
<li>{@code CENTURIES}
<li>{@code MILLENNIA}
<li>{@code ERAS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not

 override for Javadoc"
      end

      operation 8359554 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This date-time is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8359682 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this date-time as an {@code int}.
<p>
This queries this date-time for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date-time, except {@code NANO_OF_DAY}, {@code MICRO_OF_DAY},
{@code EPOCH_DAY} and {@code PROLEPTIC_MONTH} which are too large to fit in
an {@code int} and throw a {@code DateTimeException}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8359810 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this date-time as a {@code long}.
<p>
This queries this date-time for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date-time.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8359938 "toLocalDate"
	public return_type class_ref 1040770 // LocalDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalDate} part of this date-time.
<p>
This returns a {@code LocalDate} with the same year, month and day
as this date-time.

@return the date part of this date-time, not null
"
      end

      operation 8360066 "getYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the year field.
<p>
This method returns the primitive {@code int} value for the year.
<p>
The year returned by this method is proleptic as per {@code get(YEAR)}.
To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.

@return the year, from MIN_YEAR to MAX_YEAR
"
      end

      operation 8360194 "getMonthValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field from 1 to 12.
<p>
This method returns the month as an {@code int} from 1 to 12.
Application code is frequently clearer if the enum {@link Month}
is used by calling {@link #getMonth()}.

@return the month-of-year, from 1 to 12
@see #getMonth()
"
      end

      operation 8360322 "getMonth"
	public return_type class_ref 1053186 // Month
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field using the {@code Month} enum.
<p>
This method returns the enum {@link Month} for the month.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link Month#getValue() int value}.

@return the month-of-year, not null
@see #getMonthValue()
"
      end

      operation 8360450 "getDayOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-month field.
<p>
This method returns the primitive {@code int} value for the day-of-month.

@return the day-of-month, from 1 to 31
"
      end

      operation 8360578 "getDayOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-year field.
<p>
This method returns the primitive {@code int} value for the day-of-year.

@return the day-of-year, from 1 to 365, or 366 in a leap year
"
      end

      operation 8360706 "getDayOfWeek"
	public return_type class_ref 1050626 // DayOfWeek
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-week field, which is an enum {@code DayOfWeek}.
<p>
This method returns the enum {@link DayOfWeek} for the day-of-week.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link DayOfWeek#getValue() int value}.
<p>
Additional information can be obtained from the {@code DayOfWeek}.
This includes textual names of the values.

@return the day-of-week, not null
"
      end

      operation 8360834 "toLocalTime"
	public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalTime} part of this date-time.
<p>
This returns a {@code LocalTime} with the same hour, minute, second and
nanosecond as this date-time.

@return the time part of this date-time, not null
"
      end

      operation 8360962 "getHour"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the hour-of-day field.

@return the hour-of-day, from 0 to 23
"
      end

      operation 8361090 "getMinute"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minute-of-hour field.

@return the minute-of-hour, from 0 to 59
"
      end

      operation 8361218 "getSecond"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the second-of-minute field.

@return the second-of-minute, from 0 to 59
"
      end

      operation 8361346 "getNano"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the nano-of-second field.

@return the nano-of-second, from 0 to 999,999,999
"
      end

      operation 8361474 "with"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an adjusted copy of this date-time.
<p>
This returns a {@code LocalDateTime}, based on this one, with the date-time adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
A simple adjuster might simply set the one of the fields, such as the year field.
A more complex adjuster might set the date to the last day of the month.
<p>
A selection of common adjustments is provided in
{@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.
These include finding the \"last day of the month\" and \"next Wednesday\".
Key date-time classes also implement the {@code TemporalAdjuster} interface,
such as {@link Month} and {@link java.time.MonthDay MonthDay}.
The adjuster is responsible for handling special cases, such as the varying
lengths of month and leap years.
<p>
For example this code returns a date on the last day of July:
<pre>
 import static java.time.Month.*;
 import static java.time.temporal.TemporalAdjusters.*;

 result = localDateTime.with(JULY).with(lastDayOfMonth());
</pre>
<p>
The classes {@link LocalDate} and {@link LocalTime} implement {@code TemporalAdjuster},
thus this method can be used to change the date, time or offset:
<pre>
 result = localDateTime.with(date);
 result = localDateTime.with(time);
</pre>
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return a {@code LocalDateTime} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8361602 "with"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified field set to a new value.
<p>
This returns a {@code LocalDateTime}, based on this one, with the value
for the specified field changed.
This can be used to change any supported field, such as the year, month or day-of-month.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
In some cases, changing the specified field can cause the resulting date-time to become invalid,
such as changing the month from 31st January to February would make the day-of-month invalid.
In cases like this, the field is responsible for resolving the date. Typically it will choose
the previous valid date, which would be the last valid day of February in this example.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
The {@link #isSupported(TemporalField) supported fields} will behave as per
the matching method on {@link LocalDate#with(TemporalField, long) LocalDate}
or {@link LocalTime#with(TemporalField, long) LocalTime}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return a {@code LocalDateTime} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8361730 "withYear"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDateTime} with the year altered.
<p>
The time does not affect the calculation and will be the same in the result.
If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
<p>
This instance is immutable and unaffected by this method call.

@param year  the year to set in the result, from MIN_YEAR to MAX_YEAR
@return a {@code LocalDateTime} based on this date-time with the requested year, not null
@throws DateTimeException if the year value is invalid
"
      end

      operation 8361858 "withMonth"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the month-of-year altered.
<p>
The time does not affect the calculation and will be the same in the result.
If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
<p>
This instance is immutable and unaffected by this method call.

@param month  the month-of-year to set in the result, from 1 (January) to 12 (December)
@return a {@code LocalDateTime} based on this date-time with the requested month, not null
@throws DateTimeException if the month-of-year value is invalid
"
      end

      operation 8361986 "withDayOfMonth"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the day-of-month altered.
<p>
If the resulting date-time is invalid, an exception is thrown.
The time does not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfMonth  the day-of-month to set in the result, from 1 to 28-31
@return a {@code LocalDateTime} based on this date-time with the requested day, not null
@throws DateTimeException if the day-of-month value is invalid,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8362114 "withDayOfYear"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the day-of-year altered.
<p>
If the resulting date-time is invalid, an exception is thrown.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfYear  the day-of-year to set in the result, from 1 to 365-366
@return a {@code LocalDateTime} based on this date with the requested day, not null
@throws DateTimeException if the day-of-year value is invalid,
 or if the day-of-year is invalid for the year
"
      end

      operation 8362242 "withHour"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "hour" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDateTime} with the hour-of-day altered.
<p>
This instance is immutable and unaffected by this method call.

@param hour  the hour-of-day to set in the result, from 0 to 23
@return a {@code LocalDateTime} based on this date-time with the requested hour, not null
@throws DateTimeException if the hour value is invalid
"
      end

      operation 8362370 "withMinute"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the minute-of-hour altered.
<p>
This instance is immutable and unaffected by this method call.

@param minute  the minute-of-hour to set in the result, from 0 to 59
@return a {@code LocalDateTime} based on this date-time with the requested minute, not null
@throws DateTimeException if the minute value is invalid
"
      end

      operation 8362498 "withSecond"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the second-of-minute altered.
<p>
This instance is immutable and unaffected by this method call.

@param second  the second-of-minute to set in the result, from 0 to 59
@return a {@code LocalDateTime} based on this date-time with the requested second, not null
@throws DateTimeException if the second value is invalid
"
      end

      operation 8362626 "withNano"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the nano-of-second altered.
<p>
This instance is immutable and unaffected by this method call.

@param nanoOfSecond  the nano-of-second to set in the result, from 0 to 999,999,999
@return a {@code LocalDateTime} based on this date-time with the requested nanosecond, not null
@throws DateTimeException if the nano value is invalid
"
      end

      operation 8362754 "truncatedTo"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDateTime} with the time truncated.
<p>
Truncation returns a copy of the original date-time with fields
smaller than the specified unit set to zero.
For example, truncating with the {@link ChronoUnit#MINUTES minutes} unit
will set the second-of-minute and nano-of-second field to zero.
<p>
The unit must have a {@linkplain TemporalUnit#getDuration() duration}
that divides into the length of a standard day without remainder.
This includes all supplied time units on {@link ChronoUnit} and
{@link ChronoUnit#DAYS DAYS}. Other units throw an exception.
<p>
This instance is immutable and unaffected by this method call.

@param unit  the unit to truncate to, not null
@return a {@code LocalDateTime} based on this date-time with the time truncated, not null
@throws DateTimeException if unable to truncate
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8362882 "plus"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date-time with the specified amount added.
<p>
This returns a {@code LocalDateTime}, based on this one, with the specified amount added.
The amount is typically {@link Period} or {@link Duration} but may be
any other type implementing the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return a {@code LocalDateTime} based on this date-time with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8363010 "plus"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified amount added.
<p>
This returns a {@code LocalDateTime}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented here.
Date units are added as per {@link LocalDate#plus(long, TemporalUnit)}.
Time units are added as per {@link LocalTime#plus(long, TemporalUnit)} with
any overflow in days added equivalent to using {@link #plusDays(long)}.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return a {@code LocalDateTime} based on this date-time with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8363138 "plusYears"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDateTime} with the specified number of years added.
<p>
This method adds the specified amount to the years field in three steps:
<ol>
<li>Add the input years to the year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2008-02-29 (leap year) plus one year would result in the
invalid date 2009-02-29 (standard year). Instead of returning an invalid
result, the last valid day of the month, 2009-02-28, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param years  the years to add, may be negative
@return a {@code LocalDateTime} based on this date-time with the years added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8363266 "plusMonths"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of months added.
<p>
This method adds the specified amount to the months field in three steps:
<ol>
<li>Add the input months to the month-of-year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2007-03-31 plus one month would result in the invalid date
2007-04-31. Instead of returning an invalid result, the last valid day
of the month, 2007-04-30, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to add, may be negative
@return a {@code LocalDateTime} based on this date-time with the months added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8363394 "plusWeeks"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "weeks" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of weeks added.
<p>
This method adds the specified amount in weeks to the days field incrementing
the month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2008-12-31 plus one week would result in 2009-01-07.
<p>
This instance is immutable and unaffected by this method call.

@param weeks  the weeks to add, may be negative
@return a {@code LocalDateTime} based on this date-time with the weeks added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8363522 "plusDays"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of days added.
<p>
This method adds the specified amount to the days field incrementing the
month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2008-12-31 plus one day would result in 2009-01-01.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to add, may be negative
@return a {@code LocalDateTime} based on this date-time with the days added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8363650 "plusHours"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDateTime} with the specified number of hours added.
<p>
This instance is immutable and unaffected by this method call.

@param hours  the hours to add, may be negative
@return a {@code LocalDateTime} based on this date-time with the hours added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8363778 "plusMinutes"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of minutes added.
<p>
This instance is immutable and unaffected by this method call.

@param minutes  the minutes to add, may be negative
@return a {@code LocalDateTime} based on this date-time with the minutes added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8363906 "plusSeconds"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of seconds added.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to add, may be negative
@return a {@code LocalDateTime} based on this date-time with the seconds added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8364034 "plusNanos"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of nanoseconds added.
<p>
This instance is immutable and unaffected by this method call.

@param nanos  the nanos to add, may be negative
@return a {@code LocalDateTime} based on this date-time with the nanoseconds added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8364162 "minus"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date-time with the specified amount subtracted.
<p>
This returns a {@code LocalDateTime}, based on this one, with the specified amount subtracted.
The amount is typically {@link Period} or {@link Duration} but may be
any other type implementing the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return a {@code LocalDateTime} based on this date-time with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8364290 "minus"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified amount subtracted.
<p>
This returns a {@code LocalDateTime}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return a {@code LocalDateTime} based on this date-time with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8364418 "minusYears"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDateTime} with the specified number of years subtracted.
<p>
This method subtracts the specified amount from the years field in three steps:
<ol>
<li>Subtract the input years from the year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2008-02-29 (leap year) minus one year would result in the
invalid date 2009-02-29 (standard year). Instead of returning an invalid
result, the last valid day of the month, 2009-02-28, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param years  the years to subtract, may be negative
@return a {@code LocalDateTime} based on this date-time with the years subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8364546 "minusMonths"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of months subtracted.
<p>
This method subtracts the specified amount from the months field in three steps:
<ol>
<li>Subtract the input months from the month-of-year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2007-03-31 minus one month would result in the invalid date
2007-04-31. Instead of returning an invalid result, the last valid day
of the month, 2007-04-30, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to subtract, may be negative
@return a {@code LocalDateTime} based on this date-time with the months subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8364674 "minusWeeks"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "weeks" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of weeks subtracted.
<p>
This method subtracts the specified amount in weeks from the days field decrementing
the month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2009-01-07 minus one week would result in 2008-12-31.
<p>
This instance is immutable and unaffected by this method call.

@param weeks  the weeks to subtract, may be negative
@return a {@code LocalDateTime} based on this date-time with the weeks subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8364802 "minusDays"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of days subtracted.
<p>
This method subtracts the specified amount from the days field decrementing the
month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2009-01-01 minus one day would result in 2008-12-31.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to subtract, may be negative
@return a {@code LocalDateTime} based on this date-time with the days subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8364930 "minusHours"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDateTime} with the specified number of hours subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param hours  the hours to subtract, may be negative
@return a {@code LocalDateTime} based on this date-time with the hours subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8365058 "minusMinutes"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of minutes subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param minutes  the minutes to subtract, may be negative
@return a {@code LocalDateTime} based on this date-time with the minutes subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8365186 "minusSeconds"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of seconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to subtract, may be negative
@return a {@code LocalDateTime} based on this date-time with the seconds subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8365314 "minusNanos"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code LocalDateTime} with the specified number of nanoseconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param nanos  the nanos to subtract, may be negative
@return a {@code LocalDateTime} based on this date-time with the nanoseconds subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8365442 "plusWithOverflow"
	private return_type class_ref 1043970 // LocalDateTime
	nparams 6
	  param inout name "newDate" type class_ref 1040770 // LocalDate
	  param in name "hours" explicit_type "long"
	  param in name "minutes" explicit_type "long"
	  param in name "seconds" explicit_type "long"
	  param in name "nanos" explicit_type "long"
	  param in name "sign" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code LocalDateTime} with the specified period added.
<p>
This instance is immutable and unaffected by this method call.

@param newDate  the new date to base the calculation on, not null
@param hours  the hours to add, may be negative
@param minutes the minutes to add, may be negative
@param seconds the seconds to add, may be negative
@param nanos the nanos to add, may be negative
@param sign  the sign to determine add or subtract
@return the combined result, not null
"
      end

      operation 8365570 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this date-time using the specified query.
<p>
This queries this date-time using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8365698 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same date and time as this object.
<p>
This returns a temporal object of the same observable type as the input
with the date and time changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
twice, passing {@link ChronoField#EPOCH_DAY} and
{@link ChronoField#NANO_OF_DAY} as the fields.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisLocalDateTime.adjustInto(temporal);
  temporal = temporal.with(thisLocalDateTime);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc"
      end

      operation 8365826 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another date-time in terms of the specified unit.
<p>
This calculates the amount of time between two {@code LocalDateTime}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified date-time.
The result will be negative if the end is before the start.
The {@code Temporal} passed to this method is converted to a
{@code LocalDateTime} using {@link #from(TemporalAccessor)}.
For example, the amount in days between two date-times can be calculated
using {@code startDateTime.until(endDateTime, DAYS)}.
<p>
The calculation returns a whole number, representing the number of
complete units between the two date-times.
For example, the amount in months between 2012-06-15T00:00 and 2012-08-14T23:59
will only be one month as it is one minute short of two months.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, MONTHS);
  amount = MONTHS.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},
{@code MINUTES}, {@code HOURS} and {@code HALF_DAYS}, {@code DAYS},
{@code WEEKS}, {@code MONTHS}, {@code YEARS}, {@code DECADES},
{@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.
Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end date, exclusive, which is converted to a {@code LocalDateTime}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this date-time and the end date-time
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to a {@code LocalDateTime}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8365954 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats this date-time using the specified formatter.
<p>
This date-time will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted date-time string, not null
@throws DateTimeException if an error occurs during printing

 override for Javadoc and performance"
      end

      operation 8366082 "atOffset"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this date-time with an offset to create an {@code OffsetDateTime}.
<p>
This returns an {@code OffsetDateTime} formed from this date-time at the specified offset.
All possible combinations of date-time and offset are valid.

@param offset  the offset to combine with, not null
@return the offset date-time formed from this date-time and the specified offset, not null
"
      end

      operation 8366210 "atZone"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Combines this date-time with a time-zone to create a {@code ZonedDateTime}.
<p>
This returns a {@code ZonedDateTime} formed from this date-time at the
specified time-zone. The result will match this date-time as closely as possible.
Time-zone rules, such as daylight savings, mean that not every local date-time
is valid for the specified zone, thus the local date-time may be adjusted.
<p>
The local date-time is resolved to a single instant on the time-line.
This is achieved by finding a valid offset from UTC/Greenwich for the local
date-time as defined by the {@link ZoneRules rules} of the zone ID.
<p>
In most cases, there is only one valid offset for a local date-time.
In the case of an overlap, where clocks are set back, there are two valid offsets.
This method uses the earlier offset typically corresponding to \"summer\".
<p>
In the case of a gap, where clocks jump forward, there is no valid offset.
Instead, the local date-time is adjusted to be later by the length of the gap.
For a typical one hour daylight savings change, the local date-time will be
moved one hour later into the offset typically corresponding to \"summer\".
<p>
To obtain the later offset during an overlap, call
{@link ZonedDateTime#withLaterOffsetAtOverlap()} on the result of this method.
To throw an exception when there is a gap or overlap, use
{@link ZonedDateTime#ofStrict(LocalDateTime, ZoneOffset, ZoneId)}.

@param zone  the time-zone to use, not null
@return the zoned date-time formed from this date-time, not null
"
      end

      operation 8366338 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1053058 // ChronoLocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this date-time to another date-time.
<p>
The comparison is primarily based on the date-time, from earliest to latest.
It is \"consistent with equals\", as defined by {@link Comparable}.
<p>
If all the date-times being compared are instances of {@code LocalDateTime},
then the comparison will be entirely based on the date-time.
If some dates being compared are in different chronologies, then the
chronology is also considered, see {@link ChronoLocalDateTime#compareTo}.

@param other  the other date-time to compare to, not null
@return the comparator value, negative if less, positive if greater

 override for Javadoc and performance"
      end

      operation 8366466 "compareTo0"
	private explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1043970 // LocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8366594 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053058 // ChronoLocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this date-time is after the specified date-time.
<p>
This checks to see if this date-time represents a point on the
local time-line after the other date-time.
<pre>
  LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);
  LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);
  a.isAfter(b) == false
  a.isAfter(a) == false
  b.isAfter(a) == true
</pre>
<p>
This method only considers the position of the two date-times on the local time-line.
It does not take into account the chronology, or calendar system.
This is different from the comparison in {@link #compareTo(ChronoLocalDateTime)},
but is the same approach as {@link ChronoLocalDateTime#timeLineOrder()}.

@param other  the other date-time to compare to, not null
@return true if this date-time is after the specified date-time

 override for Javadoc and performance"
      end

      operation 8366722 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053058 // ChronoLocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this date-time is before the specified date-time.
<p>
This checks to see if this date-time represents a point on the
local time-line before the other date-time.
<pre>
  LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);
  LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);
  a.isBefore(b) == true
  a.isBefore(a) == false
  b.isBefore(a) == false
</pre>
<p>
This method only considers the position of the two date-times on the local time-line.
It does not take into account the chronology, or calendar system.
This is different from the comparison in {@link #compareTo(ChronoLocalDateTime)},
but is the same approach as {@link ChronoLocalDateTime#timeLineOrder()}.

@param other  the other date-time to compare to, not null
@return true if this date-time is before the specified date-time

 override for Javadoc and performance"
      end

      operation 8366850 "isEqual"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053058 // ChronoLocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if this date-time is equal to the specified date-time.
<p>
This checks to see if this date-time represents the same point on the
local time-line as the other date-time.
<pre>
  LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);
  LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);
  a.isEqual(b) == false
  a.isEqual(a) == true
  b.isEqual(a) == false
</pre>
<p>
This method only considers the position of the two date-times on the local time-line.
It does not take into account the chronology, or calendar system.
This is different from the comparison in {@link #compareTo(ChronoLocalDateTime)},
but is the same approach as {@link ChronoLocalDateTime#timeLineOrder()}.

@param other  the other date-time to compare to, not null
@return true if this date-time is equal to the specified date-time

 override for Javadoc and performance"
      end

      operation 8366978 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this date-time is equal to another date-time.
<p>
Compares this {@code LocalDateTime} with another ensuring that the date-time is the same.
Only objects of type {@code LocalDateTime} are compared, other types return false.

@param obj  the object to check, null returns false
@return true if this is equal to the other date-time
"
      end

      operation 8367106 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date-time.

@return a suitable hash code
"
      end

      operation 8367234 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30}.
<p>
The output will be one of the following ISO-8601 formats:
<ul>
<li>{@code uuuu-MM-dd'T'HH:mm}</li>
<li>{@code uuuu-MM-dd'T'HH:mm:ss}</li>
<li>{@code uuuu-MM-dd'T'HH:mm:ss.SSS}</li>
<li>{@code uuuu-MM-dd'T'HH:mm:ss.SSSSSS}</li>
<li>{@code uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS}</li>
</ul>
The format used will be the shortest that outputs the full value of
the time where the omitted parts are implied to be zero.

@return a string representation of this date-time, not null
"
      end

      operation 8367362 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(5);  // identifies a LocalDateTime
 // the <a href=\"../../serialized-form.html#java.time.LocalDate\">date</a> excluding the one byte header
 // the <a href=\"../../serialized-form.html#java.time.LocalTime\">time</a> excluding the one byte header
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8367490 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8367618 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8367746 "readExternal"
	class_operation package return_type class_ref 1043970 // LocalDateTime
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1049602 "Clock"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A clock providing access to the current instant, date and time using a time-zone.
<p>
Instances of this class are used to find the current instant, which can be
interpreted using the stored time-zone to find the current date and time.
As such, a clock can be used instead of {@link System#currentTimeMillis()}
and {@link TimeZone#getDefault()}.
<p>
Use of a {@code Clock} is optional. All key date-time classes also have a
{@code now()} factory method that uses the system clock in the default time zone.
The primary purpose of this abstraction is to allow alternate clocks to be
plugged in as and when required. Applications use an object to obtain the
current time rather than a static method. This can simplify testing.
<p>
Best practice for applications is to pass a {@code Clock} into any method
that requires the current instant. A dependency injection framework is one
way to achieve this:
<pre>
 public class MyBean {
   private Clock clock;  // dependency inject
   ...
   public void process(LocalDate eventDate) {
     if (eventDate.isBefore(LocalDate.now(clock)) {
       ...
     }
   }
 }
</pre>
This approach allows an alternate clock, such as {@link #fixed(Instant, ZoneId) fixed}
or {@link #offset(Clock, Duration) offset} to be used during testing.
<p>
The {@code system} factory methods provide clocks based on the best available
system clock This may use {@link System#currentTimeMillis()}, or a higher
resolution clock if one is available.

@implSpec
This abstract class must be implemented with care to ensure other classes operate correctly.
All implementations that can be instantiated must be final, immutable and thread-safe.
<p>
The principal methods are defined to allow the throwing of an exception.
In normal use, no exceptions will be thrown, however one possible implementation would be to
obtain the time from a central time server across the network. Obviously, in this case the
lookup could fail, and so the method is permitted to throw an exception.
<p>
The returned instants from {@code Clock} work on a time-scale that ignores leap seconds,
as described in {@link Instant}. If the implementation wraps a source that provides leap
second information, then a mechanism should be used to \"smooth\" the leap second.
The Java Time-Scale mandates the use of UTC-SLS, however clock implementations may choose
how accurate they are with the time-scale so long as they document how they work.
Implementations are therefore not required to actually perform the UTC-SLS slew or to
otherwise be aware of leap seconds.
<p>
Implementations should implement {@code Serializable} wherever possible and must
document whether or not they do support serialization.

@implNote
The clock implementation provided here is based on {@link System#currentTimeMillis()}.
That method provides little to no guarantee about the accuracy of the clock.
Applications requiring a more accurate clock must implement this abstract class
themselves using a different external clock, such as an NTP server.

@since 1.8
"
      operation 8316162 "systemUTC"
	class_operation public return_type class_ref 1049602 // Clock
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a clock that returns the current instant using the best available
system clock, converting to date and time using the UTC time-zone.
<p>
This clock, rather than {@link #systemDefaultZone()}, should be used when
you need the current instant without the date or time.
<p>
This clock is based on the best available system clock.
This may use {@link System#currentTimeMillis()}, or a higher resolution
clock if one is available.
<p>
Conversion from instant to date or time uses the {@linkplain ZoneOffset#UTC UTC time-zone}.
<p>
The returned implementation is immutable, thread-safe and {@code Serializable}.
It is equivalent to {@code system(ZoneOffset.UTC)}.

@return a clock that uses the best available system clock in the UTC zone, not null
"
      end

      operation 8316290 "systemDefaultZone"
	class_operation public return_type class_ref 1049602 // Clock
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a clock that returns the current instant using the best available
system clock, converting to date and time using the default time-zone.
<p>
This clock is based on the best available system clock.
This may use {@link System#currentTimeMillis()}, or a higher resolution
clock if one is available.
<p>
Using this method hard codes a dependency to the default time-zone into your application.
It is recommended to avoid this and use a specific time-zone whenever possible.
The {@link #systemUTC() UTC clock} should be used when you need the current instant
without the date or time.
<p>
The returned implementation is immutable, thread-safe and {@code Serializable}.
It is equivalent to {@code system(ZoneId.systemDefault())}.

@return a clock that uses the best available system clock in the default zone, not null
@see ZoneId#systemDefault()
"
      end

      operation 8316418 "system"
	class_operation public return_type class_ref 1049602 // Clock
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a clock that returns the current instant using best available
system clock.
<p>
This clock is based on the best available system clock.
This may use {@link System#currentTimeMillis()}, or a higher resolution
clock if one is available.
<p>
Conversion from instant to date or time uses the specified time-zone.
<p>
The returned implementation is immutable, thread-safe and {@code Serializable}.

@param zone  the time-zone to use to convert the instant to date-time, not null
@return a clock that uses the best available system clock in the specified zone, not null
"
      end

      operation 8316546 "tickSeconds"
	class_operation public return_type class_ref 1049602 // Clock
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Obtains a clock that returns the current instant ticking in whole seconds
using best available system clock.
<p>
This clock will always have the nano-of-second field set to zero.
This ensures that the visible time ticks in whole seconds.
The underlying clock is the best available system clock, equivalent to
using {@link #system(ZoneId)}.
<p>
Implementations may use a caching strategy for performance reasons.
As such, it is possible that the start of the second observed via this
clock will be later than that observed directly via the underlying clock.
<p>
The returned implementation is immutable, thread-safe and {@code Serializable}.
It is equivalent to {@code tick(system(zone), Duration.ofSeconds(1))}.

@param zone  the time-zone to use to convert the instant to date-time, not null
@return a clock that ticks in whole seconds using the specified zone, not null
"
      end

      operation 8316674 "tickMinutes"
	class_operation public return_type class_ref 1049602 // Clock
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a clock that returns the current instant ticking in whole minutes
using best available system clock.
<p>
This clock will always have the nano-of-second and second-of-minute fields set to zero.
This ensures that the visible time ticks in whole minutes.
The underlying clock is the best available system clock, equivalent to
using {@link #system(ZoneId)}.
<p>
Implementations may use a caching strategy for performance reasons.
As such, it is possible that the start of the minute observed via this
clock will be later than that observed directly via the underlying clock.
<p>
The returned implementation is immutable, thread-safe and {@code Serializable}.
It is equivalent to {@code tick(system(zone), Duration.ofMinutes(1))}.

@param zone  the time-zone to use to convert the instant to date-time, not null
@return a clock that ticks in whole minutes using the specified zone, not null
"
      end

      operation 8316802 "tick"
	class_operation public return_type class_ref 1049602 // Clock
	nparams 2
	  param inout name "baseClock" type class_ref 1049602 // Clock
	  param inout name "tickDuration" type class_ref 1049858 // Duration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a clock that returns instants from the specified clock truncated
to the nearest occurrence of the specified duration.
<p>
This clock will only tick as per the specified duration. Thus, if the duration
is half a second, the clock will return instants truncated to the half second.
<p>
The tick duration must be positive. If it has a part smaller than a whole
millisecond, then the whole duration must divide into one second without
leaving a remainder. All normal tick durations will match these criteria,
including any multiple of hours, minutes, seconds and milliseconds, and
sensible nanosecond durations, such as 20ns, 250,000ns and 500,000ns.
<p>
A duration of zero or one nanosecond would have no truncation effect.
Passing one of these will return the underlying clock.
<p>
Implementations may use a caching strategy for performance reasons.
As such, it is possible that the start of the requested duration observed
via this clock will be later than that observed directly via the underlying clock.
<p>
The returned implementation is immutable, thread-safe and {@code Serializable}
providing that the base clock is.

@param baseClock  the base clock to base the ticking clock on, not null
@param tickDuration  the duration of each visible tick, not negative, not null
@return a clock that ticks in whole units of the duration, not null
@throws IllegalArgumentException if the duration is negative, or has a
 part smaller than a whole millisecond such that the whole duration is not
 divisible into one second
@throws ArithmeticException if the duration is too large to be represented as nanos
"
      end

      operation 8316930 "fixed"
	class_operation public return_type class_ref 1049602 // Clock
	nparams 2
	  param inout name "fixedInstant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a clock that always returns the same instant.
<p>
This clock simply returns the specified instant.
As such, it is not a clock in the conventional sense.
The main use case for this is in testing, where the fixed clock ensures
tests are not dependent on the current clock.
<p>
The returned implementation is immutable, thread-safe and {@code Serializable}.

@param fixedInstant  the instant to use as the clock, not null
@param zone  the time-zone to use to convert the instant to date-time, not null
@return a clock that always returns the same instant, not null
"
      end

      operation 8317058 "offset"
	class_operation public return_type class_ref 1049602 // Clock
	nparams 2
	  param inout name "baseClock" type class_ref 1049602 // Clock
	  param inout name "offsetDuration" type class_ref 1049858 // Duration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Obtains a clock that returns instants from the specified clock with the
specified duration added
<p>
This clock wraps another clock, returning instants that are later by the
specified duration. If the duration is negative, the instants will be
earlier than the current date and time.
The main use case for this is to simulate running in the future or in the past.
<p>
A duration of zero would have no offsetting effect.
Passing zero will return the underlying clock.
<p>
The returned implementation is immutable, thread-safe and {@code Serializable}
providing that the base clock is.

@param baseClock  the base clock to add the duration to, not null
@param offsetDuration  the duration to add, not null
@return a clock based on the base clock with the duration added, not null
"
      end

      operation 8317186 "Clock"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor accessible by subclasses.
"
      end

      operation 8317314 "getZone"
	abstract public return_type class_ref 1049730 // ZoneId
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the time-zone being used to create dates and times.
<p>
A clock will typically obtain the current instant and then convert that
to a date or time using a time-zone. This method returns the time-zone used.

@return the time-zone being used to interpret instants, not null
"
      end

      operation 8317442 "withZone"
	abstract public return_type class_ref 1049602 // Clock
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this clock with a different time-zone.
<p>
A clock will typically obtain the current instant and then convert that
to a date or time using a time-zone. This method returns a clock with
similar properties but using a different time-zone.

@param zone  the time-zone to change to, not null
@return a clock based on this clock with the specified time-zone, not null
"
      end

      operation 8317570 "millis"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Gets the current millisecond instant of the clock.
<p>
This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC).
This is equivalent to the definition of {@link System#currentTimeMillis()}.
<p>
Most applications should avoid this method and use {@link Instant} to represent
an instant on the time-line rather than a raw millisecond value.
This method is provided to allow the use of the clock in high performance use cases
where the creation of an object would be unacceptable.
<p>
The default implementation currently calls {@link #instant}.

@return the current millisecond instant from this clock, measured from
 the Java epoch of 1970-01-01T00:00Z (UTC), not null
@throws DateTimeException if the instant cannot be obtained, not thrown by most implementations
"
      end

      operation 8317698 "instant"
	abstract public return_type class_ref 1003778 // Instant
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the current instant of the clock.
<p>
This returns an instant representing the current instant as defined by the clock.

@return the current instant from this clock, not null
@throws DateTimeException if the instant cannot be obtained, not thrown by most implementations
"
      end

      operation 8317826 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this clock is equal to another clock.
<p>
Clocks should override this method to compare equals based on
their state and to meet the contract of {@link Object#equals}.
If not overridden, the behavior is defined by {@link Object#equals}

@param obj  the object to check, null returns false
@return true if this is equal to the other clock
"
      end

      operation 8317954 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this clock.
<p>
Clocks should override this method based on
their state and to meet the contract of {@link Object#hashCode}.
If not overridden, the behavior is defined by {@link Object#hashCode}

@return a suitable hash code
"
      end

      class 1049986 "SystemClock"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3421314 // <generalisation>
	  relation 3421314 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3421314 // <generalisation>
	    b parent class_ref 1049602 // Clock
	end

	classrelation 3421442 // <realization>
	  relation 3421442 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3421442 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1939586 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6740630888130243051L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3421570 // zone (<unidirectional association>)
	  relation 3421570 --->
	    a role_name "zone" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3421570 // zone (<unidirectional association>)
	    b parent class_ref 1049730 // ZoneId
	end

	operation 8318082 "SystemClock"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "zone" type class_ref 1049730 // ZoneId
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8318210 "getZone"
	  public return_type class_ref 1049730 // ZoneId
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8318338 "withZone"
	  public return_type class_ref 1049602 // Clock
	  nparams 1
	    param inout name "zone" type class_ref 1049730 // ZoneId
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8318466 "millis"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8318594 "instant"
	  public return_type class_ref 1003778 // Instant
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8318722 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8318850 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8318978 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1050114 "FixedClock"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3421698 // <generalisation>
	  relation 3421698 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3421698 // <generalisation>
	    b parent class_ref 1049602 // Clock
	end

	classrelation 3421826 // <realization>
	  relation 3421826 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3421826 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1939714 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 7430389292664866958L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3421954 // instant (<unidirectional association>)
	  relation 3421954 --->
	    a role_name "instant" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3421954 // instant (<unidirectional association>)
	    b parent class_ref 1003778 // Instant
	end

	classrelation 3422082 // zone (<unidirectional association>)
	  relation 3422082 --->
	    a role_name "zone" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422082 // zone (<unidirectional association>)
	    b parent class_ref 1049730 // ZoneId
	end

	operation 8319106 "FixedClock"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "fixedInstant" type class_ref 1003778 // Instant
	    param inout name "zone" type class_ref 1049730 // ZoneId
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8319234 "getZone"
	  public return_type class_ref 1049730 // ZoneId
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8319362 "withZone"
	  public return_type class_ref 1049602 // Clock
	  nparams 1
	    param inout name "zone" type class_ref 1049730 // ZoneId
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8319490 "millis"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8319618 "instant"
	  public return_type class_ref 1003778 // Instant
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8319746 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8319874 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8320002 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1050242 "OffsetClock"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3422210 // <generalisation>
	  relation 3422210 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3422210 // <generalisation>
	    b parent class_ref 1049602 // Clock
	end

	classrelation 3422338 // <realization>
	  relation 3422338 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3422338 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1939842 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2007484719125426256L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3422466 // baseClock (<unidirectional association>)
	  relation 3422466 --->
	    a role_name "baseClock" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422466 // baseClock (<unidirectional association>)
	    b parent class_ref 1049602 // Clock
	end

	classrelation 3422594 // offset (<unidirectional association>)
	  relation 3422594 --->
	    a role_name "offset" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422594 // offset (<unidirectional association>)
	    b parent class_ref 1049858 // Duration
	end

	operation 8320130 "OffsetClock"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "baseClock" type class_ref 1049602 // Clock
	    param inout name "offset" type class_ref 1049858 // Duration
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8320258 "getZone"
	  public return_type class_ref 1049730 // ZoneId
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8320386 "withZone"
	  public return_type class_ref 1049602 // Clock
	  nparams 1
	    param inout name "zone" type class_ref 1049730 // ZoneId
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8320514 "millis"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8320642 "instant"
	  public return_type class_ref 1003778 // Instant
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8320770 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8320898 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8321026 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 1050370 "TickClock"
	visibility package 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3422722 // <generalisation>
	  relation 3422722 ---|>
	    a public
	      java "${type}"
	      classrelation_ref 3422722 // <generalisation>
	    b parent class_ref 1049602 // Clock
	end

	classrelation 3422850 // <realization>
	  relation 3422850 -_-|>
	    a public
	      java "${type}"
	      classrelation_ref 3422850 // <realization>
	    b parent class_ref 136578 // Serializable
	end

	attribute 1939970 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6504659149906368850L"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3422978 // baseClock (<unidirectional association>)
	  relation 3422978 --->
	    a role_name "baseClock" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3422978 // baseClock (<unidirectional association>)
	    b parent class_ref 1049602 // Clock
	end

	attribute 1940098 "tickNanos"
	  const_attribute private explicit_type "long"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 8321154 "TickClock"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "baseClock" type class_ref 1049602 // Clock
	    param in name "tickNanos" explicit_type "long"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 8321282 "getZone"
	  public return_type class_ref 1049730 // ZoneId
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8321410 "withZone"
	  public return_type class_ref 1049602 // Clock
	  nparams 1
	    param inout name "zone" type class_ref 1049730 // ZoneId
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8321538 "millis"
	  public explicit_return_type "long"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8321666 "instant"
	  public return_type class_ref 1003778 // Instant
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8321794 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8321922 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 8322050 "toString"
	  public return_type class_ref 128130 // String
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 1049730 "ZoneId"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A time-zone ID, such as {@code Europe/Paris}.
<p>
A {@code ZoneId} is used to identify the rules used to convert between
an {@link Instant} and a {@link LocalDateTime}.
There are two distinct types of ID:
<ul>
<li>Fixed offsets - a fully resolved offset from UTC/Greenwich, that uses
 the same offset for all local date-times
<li>Geographical regions - an area where a specific set of rules for finding
 the offset from UTC/Greenwich apply
</ul>
Most fixed offsets are represented by {@link ZoneOffset}.
Calling {@link #normalized()} on any {@code ZoneId} will ensure that a
fixed offset ID will be represented as a {@code ZoneOffset}.
<p>
The actual rules, describing when and how the offset changes, are defined by {@link ZoneRules}.
This class is simply an ID used to obtain the underlying rules.
This approach is taken because rules are defined by governments and change
frequently, whereas the ID is stable.
<p>
The distinction has other effects. Serializing the {@code ZoneId} will only send
the ID, whereas serializing the rules sends the entire data set.
Similarly, a comparison of two IDs only examines the ID, whereas
a comparison of two rules examines the entire data set.

<h3>Time-zone IDs</h3>
The ID is unique within the system.
There are three types of ID.
<p>
The simplest type of ID is that from {@code ZoneOffset}.
This consists of 'Z' and IDs starting with '+' or '-'.
<p>
The next type of ID are offset-style IDs with some form of prefix,
such as 'GMT+2' or 'UTC+01:00'.
The recognised prefixes are 'UTC', 'GMT' and 'UT'.
The offset is the suffix and will be normalized during creation.
These IDs can be normalized to a {@code ZoneOffset} using {@code normalized()}.
<p>
The third type of ID are region-based IDs. A region-based ID must be of
two or more characters, and not start with 'UTC', 'GMT', 'UT' '+' or '-'.
Region-based IDs are defined by configuration, see {@link ZoneRulesProvider}.
The configuration focuses on providing the lookup from the ID to the
underlying {@code ZoneRules}.
<p>
Time-zone rules are defined by governments and change frequently.
There are a number of organizations, known here as groups, that monitor
time-zone changes and collate them.
The default group is the IANA Time Zone Database (TZDB).
Other organizations include IATA (the airline industry body) and Microsoft.
<p>
Each group defines its own format for the region ID it provides.
The TZDB group defines IDs such as 'Europe/London' or 'America/New_York'.
TZDB IDs take precedence over other groups.
<p>
It is strongly recommended that the group name is included in all IDs supplied by
groups other than TZDB to avoid conflicts. For example, IATA airline time-zone
region IDs are typically the same as the three letter airport code.
However, the airport of Utrecht has the code 'UTC', which is obviously a conflict.
The recommended format for region IDs from groups other than TZDB is 'group~region'.
Thus if IATA data were defined, Utrecht airport would be 'IATA~UTC'.

<h3>Serialization</h3>
This class can be serialized and stores the string zone ID in the external form.
The {@code ZoneOffset} subclass uses a dedicated format that only stores the
offset from UTC/Greenwich.
<p>
A {@code ZoneId} can be deserialized in a Java Runtime where the ID is unknown.
For example, if a server-side Java Runtime has been updated with a new zone ID, but
the client-side Java Runtime has not been updated. In this case, the {@code ZoneId}
object will exist, and can be queried using {@code getId}, {@code equals},
{@code hashCode}, {@code toString}, {@code getDisplayName} and {@code normalized}.
However, any call to {@code getRules} will fail with {@code ZoneRulesException}.
This approach is designed to allow a {@link ZonedDateTime} to be loaded and
queried, but not modified, on a Java Runtime with incomplete time-zone information.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code ZoneId} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This abstract class has two implementations, both of which are immutable and thread-safe.
One implementation models region-based IDs, the other is {@code ZoneOffset} modelling
offset-based IDs. This difference is visible in serialization.

@since 1.8
"
      classrelation 3435650 // <realization>
	relation 3435650 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3435650 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3435778 // SHORT_IDS (<unidirectional association>)
	relation 3435778 --->
	  a role_name "SHORT_IDS" class_relation const_relation public
	    comment "
A map of zone overrides to enable the short time-zone names to be used.
<p>
Use of short zone IDs has been deprecated in {@code java.util.TimeZone}.
This map allows the IDs to continue to be used via the
{@link #of(String, Map)} factory method.
<p>
This map contains a mapping of the IDs that is in line with TZDB 2005r and
later, where 'EST', 'MST' and 'HST' map to IDs which do not include daylight
savings.
<p>
This maps as follows:
<ul>
<li>EST - -05:00</li>
<li>HST - -10:00</li>
<li>MST - -07:00</li>
<li>ACT - Australia/Darwin</li>
<li>AET - Australia/Sydney</li>
<li>AGT - America/Argentina/Buenos_Aires</li>
<li>ART - Africa/Cairo</li>
<li>AST - America/Anchorage</li>
<li>BET - America/Sao_Paulo</li>
<li>BST - Asia/Dhaka</li>
<li>CAT - Africa/Harare</li>
<li>CNT - America/St_Johns</li>
<li>CST - America/Chicago</li>
<li>CTT - Asia/Shanghai</li>
<li>EAT - Africa/Addis_Ababa</li>
<li>ECT - Europe/Paris</li>
<li>IET - America/Indiana/Indianapolis</li>
<li>IST - Asia/Kolkata</li>
<li>JST - Asia/Tokyo</li>
<li>MIT - Pacific/Apia</li>
<li>NET - Asia/Yerevan</li>
<li>NST - Pacific/Auckland</li>
<li>PLT - Asia/Karachi</li>
<li>PNT - America/Phoenix</li>
<li>PRT - America/Puerto_Rico</li>
<li>PST - America/Los_Angeles</li>
<li>SST - Pacific/Guadalcanal</li>
<li>VST - Asia/Ho_Chi_Minh</li>
</ul>
The map is unmodifiable.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, String> ${name}${value};
"
	    classrelation_ref 3435778 // SHORT_IDS (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      extra_member 168706 "initialization"
	
	cpp "" ""
	java "  static {
        Map<String, String> map = new HashMap<>(64);
        map.put(\"ACT\", \"Australia/Darwin\");
        map.put(\"AET\", \"Australia/Sydney\");
        map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");
        map.put(\"ART\", \"Africa/Cairo\");
        map.put(\"AST\", \"America/Anchorage\");
        map.put(\"BET\", \"America/Sao_Paulo\");
        map.put(\"BST\", \"Asia/Dhaka\");
        map.put(\"CAT\", \"Africa/Harare\");
        map.put(\"CNT\", \"America/St_Johns\");
        map.put(\"CST\", \"America/Chicago\");
        map.put(\"CTT\", \"Asia/Shanghai\");
        map.put(\"EAT\", \"Africa/Addis_Ababa\");
        map.put(\"ECT\", \"Europe/Paris\");
        map.put(\"IET\", \"America/Indiana/Indianapolis\");
        map.put(\"IST\", \"Asia/Kolkata\");
        map.put(\"JST\", \"Asia/Tokyo\");
        map.put(\"MIT\", \"Pacific/Apia\");
        map.put(\"NET\", \"Asia/Yerevan\");
        map.put(\"NST\", \"Pacific/Auckland\");
        map.put(\"PLT\", \"Asia/Karachi\");
        map.put(\"PNT\", \"America/Phoenix\");
        map.put(\"PRT\", \"America/Puerto_Rico\");
        map.put(\"PST\", \"America/Los_Angeles\");
        map.put(\"SST\", \"Pacific/Guadalcanal\");
        map.put(\"VST\", \"Asia/Ho_Chi_Minh\");
        map.put(\"EST\", \"-05:00\");
        map.put(\"MST\", \"-07:00\");
        map.put(\"HST\", \"-10:00\");
        SHORT_IDS = Collections.unmodifiableMap(map);
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      attribute 1951106 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8352817235686L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      operation 8437122 "systemDefault"
	class_operation public return_type class_ref 1049730 // ZoneId
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the system default time-zone.
<p>
This queries {@link TimeZone#getDefault()} to find the default time-zone
and converts it to a {@code ZoneId}. If the system default time-zone is changed,
then the result of this method will also change.

@return the zone ID, not null
@throws DateTimeException if the converted zone ID has an invalid format
@throws ZoneRulesException if the converted zone region ID cannot be found
"
      end

      operation 8437250 "getAvailableZoneIds"
	class_operation public return_type class_ref 192258 // Set
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the set of available zone IDs.
<p>
This set includes the string form of all available region-based IDs.
Offset-based zone IDs are not included in the returned set.
The ID can be passed to {@link #of(String)} to create a {@code ZoneId}.
<p>
The set of zone IDs can increase over time, although in a typical application
the set of IDs is fixed. Each call to this method is thread-safe.

@return a modifiable copy of the set of zone IDs, not null
"
      end

      operation 8437378 "of"
	class_operation public return_type class_ref 1049730 // ZoneId
	nparams 2
	  param inout name "zoneId" type class_ref 128130 // String
	  param inout name "aliasMap" type class_ref 130178 // Map
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<String, String> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZoneId} using its ID using a map
of aliases to supplement the standard zone IDs.
<p>
Many users of time-zones use short abbreviations, such as PST for
'Pacific Standard Time' and PDT for 'Pacific Daylight Time'.
These abbreviations are not unique, and so cannot be used as IDs.
This method allows a map of string to time-zone to be setup and reused
within an application.

@param zoneId  the time-zone ID, not null
@param aliasMap  a map of alias zone IDs (typically abbreviations) to real zone IDs, not null
@return the zone ID, not null
@throws DateTimeException if the zone ID has an invalid format
@throws ZoneRulesException if the zone ID is a region ID that cannot be found
"
      end

      operation 8437506 "of"
	class_operation public return_type class_ref 1049730 // ZoneId
	nparams 1
	  param inout name "zoneId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZoneId} from an ID ensuring that the
ID is valid and available for use.
<p>
This method parses the ID producing a {@code ZoneId} or {@code ZoneOffset}.
A {@code ZoneOffset} is returned if the ID is 'Z', or starts with '+' or '-'.
The result will always be a valid ID for which {@link ZoneRules} can be obtained.
<p>
Parsing matches the zone ID step by step as follows.
<ul>
<li>If the zone ID equals 'Z', the result is {@code ZoneOffset.UTC}.
<li>If the zone ID consists of a single letter, the zone ID is invalid
 and {@code DateTimeException} is thrown.
<li>If the zone ID starts with '+' or '-', the ID is parsed as a
 {@code ZoneOffset} using {@link ZoneOffset#of(String)}.
<li>If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a {@code ZoneId}
 with the same ID and rules equivalent to {@code ZoneOffset.UTC}.
<li>If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-'
 then the ID is a prefixed offset-based ID. The ID is split in two, with
 a two or three letter prefix and a suffix starting with the sign.
 The suffix is parsed as a {@link ZoneOffset#of(String) ZoneOffset}.
 The result will be a {@code ZoneId} with the specified UTC/GMT/UT prefix
 and the normalized offset ID as per {@link ZoneOffset#getId()}.
 The rules of the returned {@code ZoneId} will be equivalent to the
 parsed {@code ZoneOffset}.
<li>All other IDs are parsed as region-based zone IDs. Region IDs must
 match the regular expression <code>[A-Za-z][A-Za-z0-9~/._+-]+</code>
 otherwise a {@code DateTimeException} is thrown. If the zone ID is not
 in the configured set of IDs, {@code ZoneRulesException} is thrown.
 The detailed format of the region ID depends on the group supplying the data.
 The default set of data is supplied by the IANA Time Zone Database (TZDB).
 This has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'.
 This is compatible with most IDs from {@link java.util.TimeZone}.
</ul>

@param zoneId  the time-zone ID, not null
@return the zone ID, not null
@throws DateTimeException if the zone ID has an invalid format
@throws ZoneRulesException if the zone ID is a region ID that cannot be found
"
      end

      operation 8437634 "ofOffset"
	class_operation public return_type class_ref 1049730 // ZoneId
	nparams 2
	  param inout name "prefix" type class_ref 128130 // String
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZoneId} wrapping an offset.
<p>
If the prefix is \"GMT\", \"UTC\", or \"UT\" a {@code ZoneId}
with the prefix and the non-zero offset is returned.
If the prefix is empty {@code \"\"} the {@code ZoneOffset} is returned.

@param prefix  the time-zone ID, not null
@param offset  the offset, not null
@return the zone ID, not null
@throws IllegalArgumentException if the prefix is not one of
    \"GMT\", \"UTC\", or \"UT\", or \"\"
"
      end

      operation 8437762 "of"
	class_operation package return_type class_ref 1049730 // ZoneId
	nparams 2
	  param inout name "zoneId" type class_ref 128130 // String
	  param inout name "checkAvailable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parses the ID, taking a flag to indicate whether {@code ZoneRulesException}
should be thrown or not, used in deserialization.

@param zoneId  the time-zone ID, not null
@param checkAvailable  whether to check if the zone ID is available
@return the zone ID, not null
@throws DateTimeException if the ID format is invalid
@throws ZoneRulesException if checking availability and the ID cannot be found
"
      end

      operation 8437890 "ofWithPrefix"
	class_operation private return_type class_ref 1049730 // ZoneId
	nparams 3
	  param inout name "zoneId" type class_ref 128130 // String
	  param in name "prefixLength" explicit_type "int"
	  param inout name "checkAvailable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse once a prefix is established.

@param zoneId  the time-zone ID, not null
@param prefixLength  the length of the prefix, 2 or 3
@return the zone ID, not null
@throws DateTimeException if the zone ID has an invalid format
"
      end

      operation 8438018 "from"
	class_operation public return_type class_ref 1049730 // ZoneId
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZoneId} from a temporal object.
<p>
This obtains a zone based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ZoneId}.
<p>
A {@code TemporalAccessor} represents some form of date and time information.
This factory converts the arbitrary temporal object to an instance of {@code ZoneId}.
<p>
The conversion will try to obtain the zone in a way that favours region-based
zones over offset-based zones using {@link TemporalQueries#zone()}.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code ZoneId::from}.

@param temporal  the temporal object to convert, not null
@return the zone ID, not null
@throws DateTimeException if unable to convert to a {@code ZoneId}
"
      end

      operation 8438146 "ZoneId"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor only accessible within the package.
"
      end

      operation 8438274 "getId"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the unique time-zone ID.
<p>
This ID uniquely defines this object.
The format of an offset based ID is defined by {@link ZoneOffset#getId()}.

@return the time-zone unique ID, not null
"
      end

      operation 8438402 "getDisplayName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the textual representation of the zone, such as 'British Time' or
'+02:00'.
<p>
This returns the textual name used to identify the time-zone ID,
suitable for presentation to the user.
The parameters control the style of the returned text and the locale.
<p>
If no textual mapping is found then the {@link #getId() full ID} is returned.

@param style  the length of the text required, not null
@param locale  the locale to use, not null
@return the text value of the zone, not null
"
      end

      operation 8438530 "toTemporal"
	private return_type class_ref 1050754 // TemporalAccessor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this zone to a {@code TemporalAccessor}.
<p>
A {@code ZoneId} can be fully represented as a {@code TemporalAccessor}.
However, the interface is not implemented by this class as most of the
methods on the interface have no meaning to {@code ZoneId}.
<p>
The returned temporal has no supported fields, with the query method
supporting the return of the zone using {@link TemporalQueries#zoneId()}.

@return a temporal equivalent to this zone, not null
"
      end

      operation 8438658 "getRules"
	abstract public return_type class_ref 1054338 // ZoneRules
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the time-zone rules for this ID allowing calculations to be performed.
<p>
The rules provide the functionality associated with a time-zone,
such as finding the offset for a given instant or local date-time.
<p>
A time-zone can be invalid if it is deserialized in a Java Runtime which
does not have the same rules loaded as the Java Runtime that stored it.
In this case, calling this method will throw a {@code ZoneRulesException}.
<p>
The rules are supplied by {@link ZoneRulesProvider}. An advanced provider may
support dynamic updates to the rules without restarting the Java Runtime.
If so, then the result of this method may change over time.
Each individual call will be still remain thread-safe.
<p>
{@link ZoneOffset} will always return a set of rules where the offset never changes.

@return the rules, not null
@throws ZoneRulesException if no rules are available for this ID
"
      end

      operation 8438786 "normalized"
	public return_type class_ref 1049730 // ZoneId
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Normalizes the time-zone ID, returning a {@code ZoneOffset} where possible.
<p>
The returns a normalized {@code ZoneId} that can be used in place of this ID.
The result will have {@code ZoneRules} equivalent to those returned by this object,
however the ID returned by {@code getId()} may be different.
<p>
The normalization checks if the rules of this {@code ZoneId} have a fixed offset.
If they do, then the {@code ZoneOffset} equal to that offset is returned.
Otherwise {@code this} is returned.

@return the time-zone unique ID, not null
"
      end

      operation 8438914 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this time-zone ID is equal to another time-zone ID.
<p>
The comparison is based on the ID.

@param obj  the object to check, null returns false
@return true if this is equal to the other time-zone ID
"
      end

      operation 8439042 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this time-zone ID.

@return a suitable hash code
"
      end

      operation 8439170 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8439298 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Outputs this zone as a {@code String}, using the ID.

@return a string representation of this time-zone ID, not null
"
      end

      operation 8439426 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(7);  // identifies a ZoneId (not ZoneOffset)
 out.writeUTF(getId());
</pre>
<p>
When read back in, the {@code ZoneId} will be created as though using
{@link #of(String)}, but without any exception in the case where the
ID has a valid format, but is not in the known set of region-based IDs.

@return the instance of {@code Ser}, not null

 this is here for serialization Javadoc"
      end

      operation 8439554 "write"
	abstract package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1049858 "Duration"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A time-based amount of time, such as '34.5 seconds'.
<p>
This class models a quantity or amount of time in terms of seconds and nanoseconds.
It can be accessed using other duration-based units, such as minutes and hours.
In addition, the {@link ChronoUnit#DAYS DAYS} unit can be used and is treated as
exactly equal to 24 hours, thus ignoring daylight savings effects.
See {@link Period} for the date-based equivalent to this class.
<p>
A physical duration could be of infinite length.
For practicality, the duration is stored with constraints similar to {@link Instant}.
The duration uses nanosecond resolution with a maximum value of the seconds that can
be held in a {@code long}. This is greater than the current estimated age of the universe.
<p>
The range of a duration requires the storage of a number larger than a {@code long}.
To achieve this, the class stores a {@code long} representing seconds and an {@code int}
representing nanosecond-of-second, which will always be between 0 and 999,999,999.
The model is of a directed duration, meaning that the duration may be negative.
<p>
The duration is measured in \"seconds\", but these are not necessarily identical to
the scientific \"SI second\" definition based on atomic clocks.
This difference only impacts durations measured near a leap-second and should not affect
most applications.
See {@link Instant} for a discussion as to the meaning of the second and time-scales.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code Duration} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3423618 // <realization>
	relation 3423618 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3423618 // <realization>
	  b parent class_ref 1051650 // TemporalAmount
      end

      classrelation 3423746 // <realization>
	relation 3423746 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3423746 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3423874 // <realization>
	relation 3423874 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3423874 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3424002 // ZERO (<unidirectional association>)
	relation 3424002 --->
	  a role_name "ZERO" init_value " new Duration(0, 0)" class_relation const_relation public
	    comment "
Constant for a duration of zero.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3424002 // ZERO (<unidirectional association>)
	  b parent class_ref 1049858 // Duration
      end

      attribute 1941250 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 3078945930695997490L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3424130 // BI_NANOS_PER_SECOND (<unidirectional association>)
	relation 3424130 --->
	  a role_name "BI_NANOS_PER_SECOND" init_value " BigInteger.valueOf(NANOS_PER_SECOND)" class_relation const_relation private
	    comment "
Constant for nanos per second.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3424130 // BI_NANOS_PER_SECOND (<unidirectional association>)
	  b parent class_ref 686338 // BigInteger
      end

      classrelation 3424258 // PATTERN (<unidirectional association>)
	relation 3424258 --->
	  a role_name "PATTERN" init_value "
            Pattern.compile(\"([-+]?)P(?:([-+]?[0-9]+)D)?\" +
                    \"(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?\",
                    Pattern.CASE_INSENSITIVE)" class_relation const_relation private
	    comment "
The pattern for parsing.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3424258 // PATTERN (<unidirectional association>)
	  b parent class_ref 417154 // Pattern
      end

      attribute 1941378 "seconds"
	const_attribute private explicit_type "long"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of seconds in the duration.

"
      end

      attribute 1941506 "nanos"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of nanoseconds in the duration, expressed as a fraction of the
number of seconds. This is always positive, and never exceeds 999,999,999.

"
      end

      operation 8325250 "ofDays"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Duration} representing a number of standard 24 hour days.
<p>
The seconds are calculated based on the standard definition of a day,
where each day is 86400 seconds which implies a 24 hour day.
The nanosecond in second field is set to zero.

@param days  the number of days, positive or negative
@return a {@code Duration}, not null
@throws ArithmeticException if the input days exceeds the capacity of {@code Duration}
"
      end

      operation 8325378 "ofHours"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code Duration} representing a number of standard hours.
<p>
The seconds are calculated based on the standard definition of an hour,
where each hour is 3600 seconds.
The nanosecond in second field is set to zero.

@param hours  the number of hours, positive or negative
@return a {@code Duration}, not null
@throws ArithmeticException if the input hours exceeds the capacity of {@code Duration}
"
      end

      operation 8325506 "ofMinutes"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code Duration} representing a number of standard minutes.
<p>
The seconds are calculated based on the standard definition of a minute,
where each minute is 60 seconds.
The nanosecond in second field is set to zero.

@param minutes  the number of minutes, positive or negative
@return a {@code Duration}, not null
@throws ArithmeticException if the input minutes exceeds the capacity of {@code Duration}
"
      end

      operation 8325634 "ofSeconds"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Duration} representing a number of seconds.
<p>
The nanosecond in second field is set to zero.

@param seconds  the number of seconds, positive or negative
@return a {@code Duration}, not null
"
      end

      operation 8325762 "ofSeconds"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 2
	  param in name "seconds" explicit_type "long"
	  param in name "nanoAdjustment" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code Duration} representing a number of seconds and an
adjustment in nanoseconds.
<p>
This method allows an arbitrary number of nanoseconds to be passed in.
The factory will alter the values of the second and nanosecond in order
to ensure that the stored nanosecond is in the range 0 to 999,999,999.
For example, the following will result in the exactly the same duration:
<pre>
 Duration.ofSeconds(3, 1);
 Duration.ofSeconds(4, -999_999_999);
 Duration.ofSeconds(2, 1000_000_001);
</pre>

@param seconds  the number of seconds, positive or negative
@param nanoAdjustment  the nanosecond adjustment to the number of seconds, positive or negative
@return a {@code Duration}, not null
@throws ArithmeticException if the adjustment causes the seconds to exceed the capacity of {@code Duration}
"
      end

      operation 8325890 "ofMillis"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "millis" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Duration} representing a number of milliseconds.
<p>
The seconds and nanoseconds are extracted from the specified milliseconds.

@param millis  the number of milliseconds, positive or negative
@return a {@code Duration}, not null
"
      end

      operation 8326018 "ofNanos"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Duration} representing a number of nanoseconds.
<p>
The seconds and nanoseconds are extracted from the specified nanoseconds.

@param nanos  the number of nanoseconds, positive or negative
@return a {@code Duration}, not null
"
      end

      operation 8326146 "of"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 2
	  param in name "amount" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Duration} representing an amount in the specified unit.
<p>
The parameters represent the two parts of a phrase like '6 Hours'. For example:
<pre>
 Duration.of(3, SECONDS);
 Duration.of(465, HOURS);
</pre>
Only a subset of units are accepted by this method.
The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or
be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.

@param amount  the amount of the duration, measured in terms of the unit, positive or negative
@param unit  the unit that the duration is measured in, must have an exact duration, not null
@return a {@code Duration}, not null
@throws DateTimeException if the period unit has an estimated duration
@throws ArithmeticException if a numeric overflow occurs
"
      end

      operation 8326274 "from"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Duration} from a temporal amount.
<p>
This obtains a duration based on the specified amount.
A {@code TemporalAmount} represents an  amount of time, which may be
date-based or time-based, which this factory extracts to a duration.
<p>
The conversion loops around the set of units from the amount and uses
the {@linkplain TemporalUnit#getDuration() duration} of the unit to
calculate the total {@code Duration}.
Only a subset of units are accepted by this method. The unit must either
have an {@linkplain TemporalUnit#isDurationEstimated() exact duration}
or be {@link ChronoUnit#DAYS} which is treated as 24 hours.
If any other units are found then an exception is thrown.

@param amount  the temporal amount to convert, not null
@return the equivalent duration, not null
@throws DateTimeException if unable to convert to a {@code Duration}
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8326402 "parse"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Duration} from a text string such as {@code PnDTnHnMn.nS}.
<p>
This will parse a textual representation of a duration, including the
string produced by {@code toString()}. The formats accepted are based
on the ISO-8601 duration format {@code PnDTnHnMn.nS} with days
considered to be exactly 24 hours.
<p>
The string starts with an optional sign, denoted by the ASCII negative
or positive symbol. If negative, the whole period is negated.
The ASCII letter \"P\" is next in upper or lower case.
There are then four sections, each consisting of a number and a suffix.
The sections have suffixes in ASCII of \"D\", \"H\", \"M\" and \"S\" for
days, hours, minutes and seconds, accepted in upper or lower case.
The suffixes must occur in order. The ASCII letter \"T\" must occur before
the first occurrence, if any, of an hour, minute or second section.
At least one of the four sections must be present, and if \"T\" is present
there must be at least one section after the \"T\".
The number part of each section must consist of one or more ASCII digits.
The number may be prefixed by the ASCII negative or positive symbol.
The number of days, hours and minutes must parse to an {@code long}.
The number of seconds must parse to an {@code long} with optional fraction.
The decimal point may be either a dot or a comma.
The fractional part may have from zero to 9 digits.
<p>
The leading plus/minus sign, and negative values for other units are
not part of the ISO-8601 standard.
<p>
Examples:
<pre>
   \"PT20.345S\" -- parses as \"20.345 seconds\"
   \"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)
   \"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)
   \"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)
   \"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"
   \"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"
   \"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"
   \"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\"
</pre>

@param text  the text to parse, not null
@return the parsed duration, not null
@throws DateTimeParseException if the text cannot be parsed to a duration
"
      end

      operation 8326530 "parseNumber"
	class_operation private explicit_return_type "long"
	nparams 4
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "parsed" type class_ref 128130 // String
	  param in name "multiplier" explicit_type "int"
	  param inout name "errorText" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8326658 "parseFraction"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "parsed" type class_ref 128130 // String
	  param in name "negate" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8326786 "create"
	class_operation private return_type class_ref 1049858 // Duration
	nparams 6
	  param inout name "negate" explicit_type "boolean"
	  param in name "daysAsSecs" explicit_type "long"
	  param in name "hoursAsSecs" explicit_type "long"
	  param in name "minsAsSecs" explicit_type "long"
	  param in name "secs" explicit_type "long"
	  param in name "nanos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8326914 "between"
	class_operation public return_type class_ref 1049858 // Duration
	nparams 2
	  param inout name "startInclusive" type class_ref 1051394 // Temporal
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Duration} representing the duration between two temporal objects.
<p>
This calculates the duration between two temporal objects. If the objects
are of different types, then the duration is calculated based on the type
of the first object. For example, if the first argument is a {@code LocalTime}
then the second argument is converted to a {@code LocalTime}.
<p>
The specified temporal objects must support the {@link ChronoUnit#SECONDS SECONDS} unit.
For full accuracy, either the {@link ChronoUnit#NANOS NANOS} unit or the
{@link ChronoField#NANO_OF_SECOND NANO_OF_SECOND} field should be supported.
<p>
The result of this method can be a negative period if the end is before the start.
To guarantee to obtain a positive duration call {@link #abs()} on the result.

@param startInclusive  the start instant, inclusive, not null
@param endExclusive  the end instant, exclusive, not null
@return a {@code Duration}, not null
@throws DateTimeException if the seconds between the temporals cannot be obtained
@throws ArithmeticException if the calculation exceeds the capacity of {@code Duration}
"
      end

      operation 8327042 "create"
	class_operation private return_type class_ref 1049858 // Duration
	nparams 2
	  param in name "seconds" explicit_type "long"
	  param in name "nanoAdjustment" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Duration} using seconds and nanoseconds.

@param seconds  the length of the duration in seconds, positive or negative
@param nanoAdjustment  the nanosecond adjustment within the second, from 0 to 999,999,999
"
      end

      operation 8327170 "Duration"
	private explicit_return_type ""
	nparams 2
	  param in name "seconds" explicit_type "long"
	  param in name "nanos" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance of {@code Duration} using seconds and nanoseconds.

@param seconds  the length of the duration in seconds, positive or negative
@param nanos  the nanoseconds within the second, from 0 to 999,999,999
"
      end

      operation 8327298 "get"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the value of the requested unit.
<p>
This returns a value for each of the two supported units,
{@link ChronoUnit#SECONDS SECONDS} and {@link ChronoUnit#NANOS NANOS}.
All other units throw an exception.

@param unit the {@code TemporalUnit} for which to return the value
@return the long value of the unit
@throws DateTimeException if the unit is not supported
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8327426 "getUnits"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TemporalUnit> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the set of units supported by this duration.
<p>
The supported units are {@link ChronoUnit#SECONDS SECONDS},
and {@link ChronoUnit#NANOS NANOS}.
They are returned in the order seconds, nanos.
<p>
This set can be used in conjunction with {@link #get(TemporalUnit)}
to access the entire state of the duration.

@return a list containing the seconds and nanos units, not null
"
      end

      class 1051906 "DurationUnits"
	visibility private 
	cpp_decl ""
	static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3424386 // UNITS (<unidirectional association>)
	  relation 3424386 --->
	    a role_name "UNITS" init_value "
                Collections.unmodifiableList(Arrays.<TemporalUnit>asList(SECONDS, NANOS))" class_relation const_relation package
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TemporalUnit> ${name}${value};
"
	      classrelation_ref 3424386 // UNITS (<unidirectional association>)
	    b parent class_ref 175362 // List
	end
      end

      operation 8327554 "isZero"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this duration is zero length.
<p>
A {@code Duration} represents a directed distance between two points on
the time-line and can therefore be positive, zero or negative.
This method checks whether the length is zero.

@return true if this duration has a total length equal to zero
"
      end

      operation 8327682 "isNegative"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this duration is negative, excluding zero.
<p>
A {@code Duration} represents a directed distance between two points on
the time-line and can therefore be positive, zero or negative.
This method checks whether the length is less than zero.

@return true if this duration has a total length less than zero
"
      end

      operation 8327810 "getSeconds"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the number of seconds in this duration.
<p>
The length of the duration is stored using two fields - seconds and nanoseconds.
The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to
the length in seconds.
The total duration is defined by calling this method and {@link #getNano()}.
<p>
A {@code Duration} represents a directed distance between two points on the time-line.
A negative duration is expressed by the negative sign of the seconds part.
A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.

@return the whole seconds part of the length of the duration, positive or negative
"
      end

      operation 8327938 "getNano"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of nanoseconds within the second in this duration.
<p>
The length of the duration is stored using two fields - seconds and nanoseconds.
The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to
the length in seconds.
The total duration is defined by calling this method and {@link #getSeconds()}.
<p>
A {@code Duration} represents a directed distance between two points on the time-line.
A negative duration is expressed by the negative sign of the seconds part.
A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.

@return the nanoseconds within the second part of the length of the duration, from 0 to 999,999,999
"
      end

      operation 8328066 "withSeconds"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this duration with the specified amount of seconds.
<p>
This returns a duration with the specified seconds, retaining the
nano-of-second part of this duration.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to represent, may be negative
@return a {@code Duration} based on this period with the requested seconds, not null
"
      end

      operation 8328194 "withNanos"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified nano-of-second.
<p>
This returns a duration with the specified nano-of-second, retaining the
seconds part of this duration.
<p>
This instance is immutable and unaffected by this method call.

@param nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999
@return a {@code Duration} based on this period with the requested nano-of-second, not null
@throws DateTimeException if the nano-of-second is invalid
"
      end

      operation 8328322 "plus"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param inout name "duration" type class_ref 1049858 // Duration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this duration with the specified duration added.
<p>
This instance is immutable and unaffected by this method call.

@param duration  the duration to add, positive or negative, not null
@return a {@code Duration} based on this duration with the specified duration added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8328450 "plus"
	public return_type class_ref 1049858 // Duration
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration added.
<p>
The duration amount is measured in terms of the specified unit.
Only a subset of units are accepted by this method.
The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or
be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, measured in terms of the unit, positive or negative
@param unit  the unit that the amount is measured in, must have an exact duration, not null
@return a {@code Duration} based on this duration with the specified duration added, not null
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8328578 "plusDays"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "daysToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this duration with the specified duration in standard 24 hour days added.
<p>
The number of days is multiplied by 86400 to obtain the number of seconds to add.
This is based on the standard definition of a day as 24 hours.
<p>
This instance is immutable and unaffected by this method call.

@param daysToAdd  the days to add, positive or negative
@return a {@code Duration} based on this duration with the specified days added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8328706 "plusHours"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "hoursToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in hours added.
<p>
This instance is immutable and unaffected by this method call.

@param hoursToAdd  the hours to add, positive or negative
@return a {@code Duration} based on this duration with the specified hours added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8328834 "plusMinutes"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "minutesToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in minutes added.
<p>
This instance is immutable and unaffected by this method call.

@param minutesToAdd  the minutes to add, positive or negative
@return a {@code Duration} based on this duration with the specified minutes added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8328962 "plusSeconds"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "secondsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in seconds added.
<p>
This instance is immutable and unaffected by this method call.

@param secondsToAdd  the seconds to add, positive or negative
@return a {@code Duration} based on this duration with the specified seconds added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8329090 "plusMillis"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "millisToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in milliseconds added.
<p>
This instance is immutable and unaffected by this method call.

@param millisToAdd  the milliseconds to add, positive or negative
@return a {@code Duration} based on this duration with the specified milliseconds added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8329218 "plusNanos"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "nanosToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in nanoseconds added.
<p>
This instance is immutable and unaffected by this method call.

@param nanosToAdd  the nanoseconds to add, positive or negative
@return a {@code Duration} based on this duration with the specified nanoseconds added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8329346 "plus"
	private return_type class_ref 1049858 // Duration
	nparams 2
	  param in name "secondsToAdd" explicit_type "long"
	  param in name "nanosToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration added.
<p>
This instance is immutable and unaffected by this method call.

@param secondsToAdd  the seconds to add, positive or negative
@param nanosToAdd  the nanos to add, positive or negative
@return a {@code Duration} based on this duration with the specified seconds added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8329474 "minus"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param inout name "duration" type class_ref 1049858 // Duration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this duration with the specified duration subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param duration  the duration to subtract, positive or negative, not null
@return a {@code Duration} based on this duration with the specified duration subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8329602 "minus"
	public return_type class_ref 1049858 // Duration
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration subtracted.
<p>
The duration amount is measured in terms of the specified unit.
Only a subset of units are accepted by this method.
The unit must either have an {@linkplain TemporalUnit#isDurationEstimated() exact duration} or
be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, measured in terms of the unit, positive or negative
@param unit  the unit that the amount is measured in, must have an exact duration, not null
@return a {@code Duration} based on this duration with the specified duration subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8329730 "minusDays"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "daysToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this duration with the specified duration in standard 24 hour days subtracted.
<p>
The number of days is multiplied by 86400 to obtain the number of seconds to subtract.
This is based on the standard definition of a day as 24 hours.
<p>
This instance is immutable and unaffected by this method call.

@param daysToSubtract  the days to subtract, positive or negative
@return a {@code Duration} based on this duration with the specified days subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8329858 "minusHours"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "hoursToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in hours subtracted.
<p>
The number of hours is multiplied by 3600 to obtain the number of seconds to subtract.
<p>
This instance is immutable and unaffected by this method call.

@param hoursToSubtract  the hours to subtract, positive or negative
@return a {@code Duration} based on this duration with the specified hours subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8329986 "minusMinutes"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "minutesToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in minutes subtracted.
<p>
The number of hours is multiplied by 60 to obtain the number of seconds to subtract.
<p>
This instance is immutable and unaffected by this method call.

@param minutesToSubtract  the minutes to subtract, positive or negative
@return a {@code Duration} based on this duration with the specified minutes subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8330114 "minusSeconds"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "secondsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in seconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param secondsToSubtract  the seconds to subtract, positive or negative
@return a {@code Duration} based on this duration with the specified seconds subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8330242 "minusMillis"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "millisToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in milliseconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param millisToSubtract  the milliseconds to subtract, positive or negative
@return a {@code Duration} based on this duration with the specified milliseconds subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8330370 "minusNanos"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "nanosToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with the specified duration in nanoseconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param nanosToSubtract  the nanoseconds to subtract, positive or negative
@return a {@code Duration} based on this duration with the specified nanoseconds subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8330498 "multipliedBy"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "multiplicand" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this duration multiplied by the scalar.
<p>
This instance is immutable and unaffected by this method call.

@param multiplicand  the value to multiply the duration by, positive or negative
@return a {@code Duration} based on this duration multiplied by the specified scalar, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8330626 "dividedBy"
	public return_type class_ref 1049858 // Duration
	nparams 1
	  param in name "divisor" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration divided by the specified value.
<p>
This instance is immutable and unaffected by this method call.

@param divisor  the value to divide the duration by, positive or negative, not zero
@return a {@code Duration} based on this duration divided by the specified divisor, not null
@throws ArithmeticException if the divisor is zero or if numeric overflow occurs
"
      end

      operation 8330754 "toSeconds"
	private return_type class_ref 145794 // BigDecimal
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this duration to the total length in seconds and
fractional nanoseconds expressed as a {@code BigDecimal}.

@return the total length of the duration in seconds, with a scale of 9, not null
"
      end

      operation 8330882 "create"
	class_operation private return_type class_ref 1049858 // Duration
	nparams 1
	  param inout name "seconds" type class_ref 145794 // BigDecimal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance of {@code Duration} from a number of seconds.

@param seconds  the number of seconds, up to scale 9, positive or negative
@return a {@code Duration}, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8331010 "negated"
	public return_type class_ref 1049858 // Duration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this duration with the length negated.
<p>
This method swaps the sign of the total length of this duration.
For example, {@code PT1.3S} will be returned as {@code PT-1.3S}.
<p>
This instance is immutable and unaffected by this method call.

@return a {@code Duration} based on this duration with the amount negated, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8331138 "abs"
	public return_type class_ref 1049858 // Duration
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this duration with a positive length.
<p>
This method returns a positive duration by effectively removing the sign from any negative total length.
For example, {@code PT-1.3S} will be returned as {@code PT1.3S}.
<p>
This instance is immutable and unaffected by this method call.

@return a {@code Duration} based on this duration with an absolute length, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8331266 "addTo"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Adds this duration to the specified temporal object.
<p>
This returns a temporal object of the same observable type as the input
with this duration added.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#plus(TemporalAmount)}.
<pre>
  // these two lines are equivalent, but the second approach is recommended
  dateTime = thisDuration.addTo(dateTime);
  dateTime = dateTime.plus(thisDuration);
</pre>
<p>
The calculation will add the seconds, then nanos.
Only non-zero amounts will be added.
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the temporal object to adjust, not null
@return an object of the same type with the adjustment made, not null
@throws DateTimeException if unable to add
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8331394 "subtractFrom"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Subtracts this duration from the specified temporal object.
<p>
This returns a temporal object of the same observable type as the input
with this duration subtracted.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#minus(TemporalAmount)}.
<pre>
  // these two lines are equivalent, but the second approach is recommended
  dateTime = thisDuration.subtractFrom(dateTime);
  dateTime = dateTime.minus(thisDuration);
</pre>
<p>
The calculation will subtract the seconds, then nanos.
Only non-zero amounts will be added.
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the temporal object to adjust, not null
@return an object of the same type with the adjustment made, not null
@throws DateTimeException if unable to subtract
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8331522 "toDays"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the number of days in this duration.
<p>
This returns the total number of days in the duration by dividing the
number of seconds by 86400.
This is based on the standard definition of a day as 24 hours.
<p>
This instance is immutable and unaffected by this method call.

@return the number of days in the duration, may be negative
"
      end

      operation 8331650 "toHours"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of hours in this duration.
<p>
This returns the total number of hours in the duration by dividing the
number of seconds by 3600.
<p>
This instance is immutable and unaffected by this method call.

@return the number of hours in the duration, may be negative
"
      end

      operation 8331778 "toMinutes"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the number of minutes in this duration.
<p>
This returns the total number of minutes in the duration by dividing the
number of seconds by 60.
<p>
This instance is immutable and unaffected by this method call.

@return the number of minutes in the duration, may be negative
"
      end

      operation 8331906 "toMillis"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this duration to the total length in milliseconds.
<p>
If this duration is too large to fit in a {@code long} milliseconds, then an
exception is thrown.
<p>
If this duration has greater than millisecond precision, then the conversion
will drop any excess precision information as though the amount in nanoseconds
was subject to integer division by one million.

@return the total length of the duration in milliseconds
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8332034 "toNanos"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this duration to the total length in nanoseconds expressed as a {@code long}.
<p>
If this duration is too large to fit in a {@code long} nanoseconds, then an
exception is thrown.

@return the total length of the duration in nanoseconds
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8332162 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "otherDuration" type class_ref 1049858 // Duration
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this duration to the specified {@code Duration}.
<p>
The comparison is based on the total length of the durations.
It is \"consistent with equals\", as defined by {@link Comparable}.

@param otherDuration  the other duration to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8332290 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "otherDuration" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this duration is equal to the specified {@code Duration}.
<p>
The comparison is based on the total length of the durations.

@param otherDuration  the other duration, null returns false
@return true if the other duration is equal to this one
"
      end

      operation 8332418 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this duration.

@return a suitable hash code
"
      end

      operation 8332546 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

A string representation of this duration using ISO-8601 seconds
based representation, such as {@code PT8H6M12.345S}.
<p>
The format of the returned string will be {@code PTnHnMnS}, where n is
the relevant hours, minutes or seconds part of the duration.
Any fractional seconds are placed after a decimal point i the seconds section.
If a section has a zero value, it is omitted.
The hours, minutes and seconds will all have the same sign.
<p>
Examples:
<pre>
   \"20.345 seconds\"                 -- \"PT20.345S
   \"15 minutes\" (15 * 60 seconds)   -- \"PT15M\"
   \"10 hours\" (10 * 3600 seconds)   -- \"PT10H\"
   \"2 days\" (2 * 86400 seconds)     -- \"PT48H\"
</pre>
Note that multiples of 24 hours are not output as days to avoid confusion
with {@code Period}.

@return an ISO-8601 representation of this duration, not null
"
      end

      operation 8332674 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(1);  // identifies a Duration
 out.writeLong(seconds);
 out.writeInt(nanos);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8332802 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8332930 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8333058 "readExternal"
	class_operation package return_type class_ref 1049858 // Duration
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1050498 "DateTimeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Exception used to indicate a problem while calculating a date-time.
<p>
This exception is used to indicate problems with creating, querying
and manipulating date-time objects.

@implSpec
This class is intended for use in a single thread.

@since 1.8
"
      classrelation 3423106 // <generalisation>
	relation 3423106 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3423106 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1940226 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1632418723876261839L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      operation 8322178 "DateTimeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new date-time exception with the specified message.

@param message  the message to use for this exception, may be null
"
      end

      operation 8322306 "DateTimeException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 128130 // String
	  param inout name "cause" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new date-time exception with the specified message and cause.

@param message  the message to use for this exception, may be null
@param cause  the cause of the exception, may be null
"
      end
    end

    class 1050626 "DayOfWeek"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A day-of-week, such as 'Tuesday'.
<p>
{@code DayOfWeek} is an enum representing the 7 days of the week -
Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday.
<p>
In addition to the textual enum name, each day-of-week has an {@code int} value.
The {@code int} value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).
It is recommended that applications use the enum rather than the {@code int} value
to ensure code clarity.
<p>
This enum provides access to the localized textual form of the day-of-week.
Some locales also assign different numeric values to the days, declaring
Sunday to have the value 1, however this class provides no support for this.
See {@link WeekFields} for localized week-numbering.
<p>
<b>Do not use {@code ordinal()} to obtain the numeric representation of {@code DayOfWeek}.
Use {@code getValue()} instead.</b>
<p>
This enum represents a common concept that is found in many calendar systems.
As such, this enum may be used by any calendar system that has the day-of-week
concept defined exactly equivalent to the ISO calendar system.

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      classrelation 3423234 // <realization>
	relation 3423234 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3423234 // <realization>
	  b parent class_ref 1050754 // TemporalAccessor
      end

      classrelation 3423362 // <realization>
	relation 3423362 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3423362 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      attribute 1940354 "MONDAY"
	public type class_ref 1050626 // DayOfWeek
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the day-of-week of Monday.
This has the numeric value of {@code 1}.

"
      end

      attribute 1940482 "TUESDAY"
	public type class_ref 1050626 // DayOfWeek
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the day-of-week of Tuesday.
This has the numeric value of {@code 2}.

"
      end

      attribute 1940610 "WEDNESDAY"
	public type class_ref 1050626 // DayOfWeek
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the day-of-week of Wednesday.
This has the numeric value of {@code 3}.

"
      end

      attribute 1940738 "THURSDAY"
	public type class_ref 1050626 // DayOfWeek
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the day-of-week of Thursday.
This has the numeric value of {@code 4}.

"
      end

      attribute 1940866 "FRIDAY"
	public type class_ref 1050626 // DayOfWeek
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the day-of-week of Friday.
This has the numeric value of {@code 5}.

"
      end

      attribute 1940994 "SATURDAY"
	public type class_ref 1050626 // DayOfWeek
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the day-of-week of Saturday.
This has the numeric value of {@code 6}.

"
      end

      attribute 1941122 "SUNDAY"
	public type class_ref 1050626 // DayOfWeek
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the day-of-week of Sunday.
This has the numeric value of {@code 7}.
"
      end

      classrelation 3423490 // ENUMS (<unidirectional association>)
	relation 3423490 --->
	  a role_name "ENUMS" multiplicity "[]" init_value " DayOfWeek.values()" class_relation const_relation private
	    comment "
Private cache of all the constants.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3423490 // ENUMS (<unidirectional association>)
	  b parent class_ref 1050626 // DayOfWeek
      end

      operation 8323202 "of"
	class_operation public return_type class_ref 1050626 // DayOfWeek
	nparams 1
	  param in name "dayOfWeek" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code DayOfWeek} from an {@code int} value.
<p>
{@code DayOfWeek} is an enum representing the 7 days of the week.
This factory allows the enum to be obtained from the {@code int} value.
The {@code int} value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).

@param dayOfWeek  the day-of-week to represent, from 1 (Monday) to 7 (Sunday)
@return the day-of-week singleton, not null
@throws DateTimeException if the day-of-week is invalid
"
      end

      operation 8323330 "from"
	class_operation public return_type class_ref 1050626 // DayOfWeek
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code DayOfWeek} from a temporal object.
<p>
This obtains a day-of-week based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code DayOfWeek}.
<p>
The conversion extracts the {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} field.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code DayOfWeek::from}.

@param temporal  the temporal object to convert, not null
@return the day-of-week, not null
@throws DateTimeException if unable to convert to a {@code DayOfWeek}
"
      end

      operation 8323458 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the day-of-week {@code int} value.
<p>
The values are numbered following the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).
See {@link java.time.temporal.WeekFields#dayOfWeek()} for localized week-numbering.

@return the day-of-week, from 1 (Monday) to 7 (Sunday)
"
      end

      operation 8323586 "getDisplayName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the textual representation, such as 'Mon' or 'Friday'.
<p>
This returns the textual name used to identify the day-of-week,
suitable for presentation to the user.
The parameters control the style of the returned text and the locale.
<p>
If no textual mapping is found then the {@link #getValue() numeric value} is returned.

@param style  the length of the text required, not null
@param locale  the locale to use, not null
@return the text value of the day-of-week, not null
"
      end

      operation 8323714 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this day-of-week can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range} and
{@link #get(TemporalField) get} methods will throw an exception.
<p>
If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then
this method returns true.
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this day-of-week, false if not
"
      end

      operation 8323842 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This day-of-week is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then the
range of the day-of-week, from 1 to 7, will be returned.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8323970 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this day-of-week as an {@code int}.
<p>
This queries this day-of-week for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then the
value of the day-of-week, from 1 to 7, will be returned.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field, within the valid range of values
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8324098 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this day-of-week as a {@code long}.
<p>
This queries this day-of-week for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is {@link ChronoField#DAY_OF_WEEK DAY_OF_WEEK} then the
value of the day-of-week, from 1 to 7, will be returned.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8324226 "plus"
	public return_type class_ref 1050626 // DayOfWeek
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the day-of-week that is the specified number of days after this one.
<p>
The calculation rolls around the end of the week from Sunday to Monday.
The specified period may be negative.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to add, positive or negative
@return the resulting day-of-week, not null
"
      end

      operation 8324354 "minus"
	public return_type class_ref 1050626 // DayOfWeek
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the day-of-week that is the specified number of days before this one.
<p>
The calculation rolls around the start of the year from Monday to Sunday.
The specified period may be negative.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to subtract, positive or negative
@return the resulting day-of-week, not null
"
      end

      operation 8324482 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this day-of-week using the specified query.
<p>
This queries this day-of-week using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8324610 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have this day-of-week.
<p>
This returns a temporal object of the same observable type as the input
with the day-of-week changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#DAY_OF_WEEK} as the field.
Note that this adjusts forwards or backwards within a Monday to Sunday week.
See {@link java.time.temporal.WeekFields#dayOfWeek()} for localized week start days.
See {@code TemporalAdjuster} for other adjusters with more control,
such as {@code next(MONDAY)}.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisDayOfWeek.adjustInto(temporal);
  temporal = temporal.with(thisDayOfWeek);
</pre>
<p>
For example, given a date that is a Wednesday, the following are output:
<pre>
  dateOnWed.with(MONDAY);     // two days earlier
  dateOnWed.with(TUESDAY);    // one day earlier
  dateOnWed.with(WEDNESDAY);  // same date
  dateOnWed.with(THURSDAY);   // one day later
  dateOnWed.with(FRIDAY);     // two days later
  dateOnWed.with(SATURDAY);   // three days later
  dateOnWed.with(SUNDAY);     // four days later
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end
    end

    class 1052034 "OffsetDateTime"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system,
such as {@code 2007-12-03T10:15:30+01:00}.
<p>
{@code OffsetDateTime} is an immutable representation of a date-time with an offset.
This class stores all date and time fields, to a precision of nanoseconds,
as well as the offset from UTC/Greenwich. For example, the value
\"2nd October 2007 at 13:45.30.123456789 +02:00\" can be stored in an {@code OffsetDateTime}.
<p>
{@code OffsetDateTime}, {@link java.time.ZonedDateTime} and {@link java.time.Instant} all store an instant
on the time-line to nanosecond precision.
{@code Instant} is the simplest, simply representing the instant.
{@code OffsetDateTime} adds to the instant the offset from UTC/Greenwich, which allows
the local date-time to be obtained.
{@code ZonedDateTime} adds full time-zone rules.
<p>
It is intended that {@code ZonedDateTime} or {@code Instant} is used to model data
in simpler applications. This class may be used when modeling date-time concepts in
more detail, or when communicating to a database or in a network protocol.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code OffsetDateTime} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3430274 // <realization>
	relation 3430274 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3430274 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3430402 // <realization>
	relation 3430402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3430402 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3430530 // <realization>
	relation 3430530 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3430530 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3430658 // <realization>
	relation 3430658 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3430658 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3430786 // MIN (<unidirectional association>)
	relation 3430786 --->
	  a role_name "MIN" init_value " LocalDateTime.MIN.atOffset(ZoneOffset.MAX)" class_relation const_relation public
	    comment "
The minimum supported {@code OffsetDateTime}, '-999999999-01-01T00:00:00+18:00'.
This is the local date-time of midnight at the start of the minimum date
in the maximum offset (larger offsets are earlier on the time-line).
This combines {@link LocalDateTime#MIN} and {@link ZoneOffset#MAX}.
This could be used by an application as a \"far past\" date-time.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3430786 // MIN (<unidirectional association>)
	  b parent class_ref 1052034 // OffsetDateTime
      end

      classrelation 3430914 // MAX (<unidirectional association>)
	relation 3430914 --->
	  a role_name "MAX" init_value " LocalDateTime.MAX.atOffset(ZoneOffset.MIN)" class_relation const_relation public
	    comment "
The maximum supported {@code OffsetDateTime}, '+999999999-12-31T23:59:59.999999999-18:00'.
This is the local date-time just before midnight at the end of the maximum date
in the minimum offset (larger negative offsets are later on the time-line).
This combines {@link LocalDateTime#MAX} and {@link ZoneOffset#MIN}.
This could be used by an application as a \"far future\" date-time.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3430914 // MAX (<unidirectional association>)
	  b parent class_ref 1052034 // OffsetDateTime
      end

      operation 8382082 "timeLineOrder"
	class_operation public return_type class_ref 184962 // Comparator
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<OffsetDateTime> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a comparator that compares two {@code OffsetDateTime} instances
based solely on the instant.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the underlying instant.

@return a comparator that compares in time-line order

@see #isAfter
@see #isBefore
@see #isEqual
"
      end

      operation 8382210 "compareInstant"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "datetime1" type class_ref 1052034 // OffsetDateTime
	  param inout name "datetime2" type class_ref 1052034 // OffsetDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code OffsetDateTime} to another date-time.
The comparison is based on the instant.

@param datetime1  the first date-time to compare, not null
@param datetime2  the other date-time to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      attribute 1947266 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2287754244819255394L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3431042 // dateTime (<unidirectional association>)
	relation 3431042 --->
	  a role_name "dateTime" const_relation private
	    comment "
The local date-time.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3431042 // dateTime (<unidirectional association>)
	  b parent class_ref 1043970 // LocalDateTime
      end

      classrelation 3431170 // offset (<unidirectional association>)
	relation 3431170 --->
	  a role_name "offset" const_relation private
	    comment "
The offset from UTC/Greenwich.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3431170 // offset (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      operation 8382338 "now"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current date-time from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date-time.
The offset will be calculated from the time-zone in the clock.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current date-time using the system clock, not null
"
      end

      operation 8382466 "now"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current date-time from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date-time.
Specifying the time-zone avoids dependence on the default time-zone.
The offset will be calculated from the specified time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current date-time using the system clock, not null
"
      end

      operation 8382594 "now"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current date-time from the specified clock.
<p>
This will query the specified clock to obtain the current date-time.
The offset will be calculated from the time-zone in the clock.
<p>
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current date-time, not null
"
      end

      operation 8382722 "of"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 3
	  param inout name "date" type class_ref 1040770 // LocalDate
	  param inout name "time" type class_ref 1043842 // LocalTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code OffsetDateTime} from a date, time and offset.
<p>
This creates an offset date-time with the specified local date, time and offset.

@param date  the local date, not null
@param time  the local time, not null
@param offset  the zone offset, not null
@return the offset date-time, not null
"
      end

      operation 8382850 "of"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 2
	  param inout name "dateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code OffsetDateTime} from a date-time and offset.
<p>
This creates an offset date-time with the specified local date-time and offset.

@param dateTime  the local date-time, not null
@param offset  the zone offset, not null
@return the offset date-time, not null
"
      end

      operation 8382978 "of"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 8
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code OffsetDateTime} from a year, month, day,
hour, minute, second, nanosecond and offset.
<p>
This creates an offset date-time with the seven specified fields.
<p>
This method exists primarily for writing test cases.
Non test-code will typically use other methods to create an offset time.
{@code LocalDateTime} has five additional convenience variants of the
equivalent factory method taking fewer arguments.
They are not provided here to reduce the footprint of the API.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999
@param offset  the zone offset, not null
@return the offset date-time, not null
@throws DateTimeException if the value of any field is out of range, or
 if the day-of-month is invalid for the month-year
"
      end

      operation 8383106 "ofInstant"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code OffsetDateTime} from an {@code Instant} and zone ID.
<p>
This creates an offset date-time with the same instant as that specified.
Finding the offset from UTC/Greenwich is simple as there is only one valid
offset for each instant.

@param instant  the instant to create the date-time from, not null
@param zone  the time-zone, which may be an offset, not null
@return the offset date-time, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8383234 "from"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code OffsetDateTime} from a temporal object.
<p>
This obtains an offset date-time based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code OffsetDateTime}.
<p>
The conversion will first obtain a {@code ZoneOffset} from the temporal object.
It will then try to obtain a {@code LocalDateTime}, falling back to an {@code Instant} if necessary.
The result will be the combination of {@code ZoneOffset} with either
with {@code LocalDateTime} or {@code Instant}.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code OffsetDateTime::from}.

@param temporal  the temporal object to convert, not null
@return the offset date-time, not null
@throws DateTimeException if unable to convert to an {@code OffsetDateTime}
"
      end

      operation 8383362 "parse"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code OffsetDateTime} from a text string
such as {@code 2007-12-03T10:15:30+01:00}.
<p>
The string must represent a valid date-time and is parsed using
{@link java.time.format.DateTimeFormatter#ISO_OFFSET_DATE_TIME}.

@param text  the text to parse such as \"2007-12-03T10:15:30+01:00\", not null
@return the parsed offset date-time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8383490 "parse"
	class_operation public return_type class_ref 1052034 // OffsetDateTime
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code OffsetDateTime} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a date-time.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed offset date-time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8383618 "OffsetDateTime"
	private explicit_return_type ""
	nparams 2
	  param inout name "dateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param dateTime  the local date-time, not null
@param offset  the zone offset, not null
"
      end

      operation 8383746 "with"
	private return_type class_ref 1052034 // OffsetDateTime
	nparams 2
	  param inout name "dateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new date-time based on this one, returning {@code this} where possible.

@param dateTime  the date-time to create with, not null
@param offset  the zone offset to create with, not null
"
      end

      operation 8383874 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this date-time can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code NANO_OF_SECOND}
<li>{@code NANO_OF_DAY}
<li>{@code MICRO_OF_SECOND}
<li>{@code MICRO_OF_DAY}
<li>{@code MILLI_OF_SECOND}
<li>{@code MILLI_OF_DAY}
<li>{@code SECOND_OF_MINUTE}
<li>{@code SECOND_OF_DAY}
<li>{@code MINUTE_OF_HOUR}
<li>{@code MINUTE_OF_DAY}
<li>{@code HOUR_OF_AMPM}
<li>{@code CLOCK_HOUR_OF_AMPM}
<li>{@code HOUR_OF_DAY}
<li>{@code CLOCK_HOUR_OF_DAY}
<li>{@code AMPM_OF_DAY}
<li>{@code DAY_OF_WEEK}
<li>{@code ALIGNED_DAY_OF_WEEK_IN_MONTH}
<li>{@code ALIGNED_DAY_OF_WEEK_IN_YEAR}
<li>{@code DAY_OF_MONTH}
<li>{@code DAY_OF_YEAR}
<li>{@code EPOCH_DAY}
<li>{@code ALIGNED_WEEK_OF_MONTH}
<li>{@code ALIGNED_WEEK_OF_YEAR}
<li>{@code MONTH_OF_YEAR}
<li>{@code PROLEPTIC_MONTH}
<li>{@code YEAR_OF_ERA}
<li>{@code YEAR}
<li>{@code ERA}
<li>{@code INSTANT_SECONDS}
<li>{@code OFFSET_SECONDS}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this date-time, false if not
"
      end

      operation 8384002 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this date-time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code NANOS}
<li>{@code MICROS}
<li>{@code MILLIS}
<li>{@code SECONDS}
<li>{@code MINUTES}
<li>{@code HOURS}
<li>{@code HALF_DAYS}
<li>{@code DAYS}
<li>{@code WEEKS}
<li>{@code MONTHS}
<li>{@code YEARS}
<li>{@code DECADES}
<li>{@code CENTURIES}
<li>{@code MILLENNIA}
<li>{@code ERAS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not

 override for Javadoc"
      end

      operation 8384130 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This date-time is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8384258 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this date-time as an {@code int}.
<p>
This queries this date-time for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date-time, except {@code NANO_OF_DAY}, {@code MICRO_OF_DAY},
{@code EPOCH_DAY}, {@code PROLEPTIC_MONTH} and {@code INSTANT_SECONDS} which are too
large to fit in an {@code int} and throw a {@code DateTimeException}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8384386 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this date-time as a {@code long}.
<p>
This queries this date-time for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date-time.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8384514 "getOffset"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the zone offset, such as '+01:00'.
<p>
This is the offset of the local date-time from UTC/Greenwich.

@return the zone offset, not null
"
      end

      operation 8384642 "withOffsetSameLocal"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified offset ensuring
that the result has the same local date-time.
<p>
This method returns an object with the same {@code LocalDateTime} and the specified {@code ZoneOffset}.
No calculation is needed or performed.
For example, if this time represents {@code 2007-12-03T10:30+02:00} and the offset specified is
{@code +03:00}, then this method will return {@code 2007-12-03T10:30+03:00}.
<p>
To take into account the difference between the offsets, and adjust the time fields,
use {@link #withOffsetSameInstant}.
<p>
This instance is immutable and unaffected by this method call.

@param offset  the zone offset to change to, not null
@return an {@code OffsetDateTime} based on this date-time with the requested offset, not null
"
      end

      operation 8384770 "withOffsetSameInstant"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified offset ensuring
that the result is at the same instant.
<p>
This method returns an object with the specified {@code ZoneOffset} and a {@code LocalDateTime}
adjusted by the difference between the two offsets.
This will result in the old and new objects representing the same instant.
This is useful for finding the local time in a different offset.
For example, if this time represents {@code 2007-12-03T10:30+02:00} and the offset specified is
{@code +03:00}, then this method will return {@code 2007-12-03T11:30+03:00}.
<p>
To change the offset without adjusting the local time use {@link #withOffsetSameLocal}.
<p>
This instance is immutable and unaffected by this method call.

@param offset  the zone offset to change to, not null
@return an {@code OffsetDateTime} based on this date-time with the requested offset, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8384898 "toLocalDateTime"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalDateTime} part of this date-time.
<p>
This returns a {@code LocalDateTime} with the same year, month, day and time
as this date-time.

@return the local date-time part of this date-time, not null
"
      end

      operation 8385026 "toLocalDate"
	public return_type class_ref 1040770 // LocalDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalDate} part of this date-time.
<p>
This returns a {@code LocalDate} with the same year, month and day
as this date-time.

@return the date part of this date-time, not null
"
      end

      operation 8385154 "getYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the year field.
<p>
This method returns the primitive {@code int} value for the year.
<p>
The year returned by this method is proleptic as per {@code get(YEAR)}.
To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.

@return the year, from MIN_YEAR to MAX_YEAR
"
      end

      operation 8385282 "getMonthValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field from 1 to 12.
<p>
This method returns the month as an {@code int} from 1 to 12.
Application code is frequently clearer if the enum {@link Month}
is used by calling {@link #getMonth()}.

@return the month-of-year, from 1 to 12
@see #getMonth()
"
      end

      operation 8385410 "getMonth"
	public return_type class_ref 1053186 // Month
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field using the {@code Month} enum.
<p>
This method returns the enum {@link Month} for the month.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link Month#getValue() int value}.

@return the month-of-year, not null
@see #getMonthValue()
"
      end

      operation 8385538 "getDayOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-month field.
<p>
This method returns the primitive {@code int} value for the day-of-month.

@return the day-of-month, from 1 to 31
"
      end

      operation 8385666 "getDayOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-year field.
<p>
This method returns the primitive {@code int} value for the day-of-year.

@return the day-of-year, from 1 to 365, or 366 in a leap year
"
      end

      operation 8385794 "getDayOfWeek"
	public return_type class_ref 1050626 // DayOfWeek
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-week field, which is an enum {@code DayOfWeek}.
<p>
This method returns the enum {@link DayOfWeek} for the day-of-week.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link DayOfWeek#getValue() int value}.
<p>
Additional information can be obtained from the {@code DayOfWeek}.
This includes textual names of the values.

@return the day-of-week, not null
"
      end

      operation 8385922 "toLocalTime"
	public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalTime} part of this date-time.
<p>
This returns a {@code LocalTime} with the same hour, minute, second and
nanosecond as this date-time.

@return the time part of this date-time, not null
"
      end

      operation 8386050 "getHour"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the hour-of-day field.

@return the hour-of-day, from 0 to 23
"
      end

      operation 8386178 "getMinute"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minute-of-hour field.

@return the minute-of-hour, from 0 to 59
"
      end

      operation 8386306 "getSecond"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the second-of-minute field.

@return the second-of-minute, from 0 to 59
"
      end

      operation 8386434 "getNano"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the nano-of-second field.

@return the nano-of-second, from 0 to 999,999,999
"
      end

      operation 8386562 "with"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an adjusted copy of this date-time.
<p>
This returns an {@code OffsetDateTime}, based on this one, with the date-time adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
A simple adjuster might simply set the one of the fields, such as the year field.
A more complex adjuster might set the date to the last day of the month.
A selection of common adjustments is provided in
{@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.
These include finding the \"last day of the month\" and \"next Wednesday\".
Key date-time classes also implement the {@code TemporalAdjuster} interface,
such as {@link Month} and {@link java.time.MonthDay MonthDay}.
The adjuster is responsible for handling special cases, such as the varying
lengths of month and leap years.
<p>
For example this code returns a date on the last day of July:
<pre>
 import static java.time.Month.*;
 import static java.time.temporal.TemporalAdjusters.*;

 result = offsetDateTime.with(JULY).with(lastDayOfMonth());
</pre>
<p>
The classes {@link LocalDate}, {@link LocalTime} and {@link ZoneOffset} implement
{@code TemporalAdjuster}, thus this method can be used to change the date, time or offset:
<pre>
 result = offsetDateTime.with(date);
 result = offsetDateTime.with(time);
 result = offsetDateTime.with(offset);
</pre>
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return an {@code OffsetDateTime} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8386690 "with"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified field set to a new value.
<p>
This returns an {@code OffsetDateTime}, based on this one, with the value
for the specified field changed.
This can be used to change any supported field, such as the year, month or day-of-month.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
In some cases, changing the specified field can cause the resulting date-time to become invalid,
such as changing the month from 31st January to February would make the day-of-month invalid.
In cases like this, the field is responsible for resolving the date. Typically it will choose
the previous valid date, which would be the last valid day of February in this example.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
<p>
The {@code INSTANT_SECONDS} field will return a date-time with the specified instant.
The offset and nano-of-second are unchanged.
If the new instant value is outside the valid range then a {@code DateTimeException} will be thrown.
<p>
The {@code OFFSET_SECONDS} field will return a date-time with the specified offset.
The local date-time is unaltered. If the new offset value is outside the valid range
then a {@code DateTimeException} will be thrown.
<p>
The other {@link #isSupported(TemporalField) supported fields} will behave as per
the matching method on {@link LocalDateTime#with(TemporalField, long) LocalDateTime}.
In this case, the offset is not part of the calculation and will be unchanged.
<p>
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return an {@code OffsetDateTime} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8386818 "withYear"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetDateTime} with the year altered.
<p>
The time and offset do not affect the calculation and will be the same in the result.
If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
<p>
This instance is immutable and unaffected by this method call.

@param year  the year to set in the result, from MIN_YEAR to MAX_YEAR
@return an {@code OffsetDateTime} based on this date-time with the requested year, not null
@throws DateTimeException if the year value is invalid
"
      end

      operation 8386946 "withMonth"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the month-of-year altered.
<p>
The time and offset do not affect the calculation and will be the same in the result.
If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.
<p>
This instance is immutable and unaffected by this method call.

@param month  the month-of-year to set in the result, from 1 (January) to 12 (December)
@return an {@code OffsetDateTime} based on this date-time with the requested month, not null
@throws DateTimeException if the month-of-year value is invalid
"
      end

      operation 8387074 "withDayOfMonth"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the day-of-month altered.
<p>
If the resulting {@code OffsetDateTime} is invalid, an exception is thrown.
The time and offset do not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfMonth  the day-of-month to set in the result, from 1 to 28-31
@return an {@code OffsetDateTime} based on this date-time with the requested day, not null
@throws DateTimeException if the day-of-month value is invalid,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8387202 "withDayOfYear"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the day-of-year altered.
<p>
The time and offset do not affect the calculation and will be the same in the result.
If the resulting {@code OffsetDateTime} is invalid, an exception is thrown.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfYear  the day-of-year to set in the result, from 1 to 365-366
@return an {@code OffsetDateTime} based on this date with the requested day, not null
@throws DateTimeException if the day-of-year value is invalid,
 or if the day-of-year is invalid for the year
"
      end

      operation 8387330 "withHour"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "hour" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetDateTime} with the hour-of-day altered.
<p>
The date and offset do not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param hour  the hour-of-day to set in the result, from 0 to 23
@return an {@code OffsetDateTime} based on this date-time with the requested hour, not null
@throws DateTimeException if the hour value is invalid
"
      end

      operation 8387458 "withMinute"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the minute-of-hour altered.
<p>
The date and offset do not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param minute  the minute-of-hour to set in the result, from 0 to 59
@return an {@code OffsetDateTime} based on this date-time with the requested minute, not null
@throws DateTimeException if the minute value is invalid
"
      end

      operation 8387586 "withSecond"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the second-of-minute altered.
<p>
The date and offset do not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param second  the second-of-minute to set in the result, from 0 to 59
@return an {@code OffsetDateTime} based on this date-time with the requested second, not null
@throws DateTimeException if the second value is invalid
"
      end

      operation 8387714 "withNano"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the nano-of-second altered.
<p>
The date and offset do not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param nanoOfSecond  the nano-of-second to set in the result, from 0 to 999,999,999
@return an {@code OffsetDateTime} based on this date-time with the requested nanosecond, not null
@throws DateTimeException if the nano value is invalid
"
      end

      operation 8387842 "truncatedTo"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetDateTime} with the time truncated.
<p>
Truncation returns a copy of the original date-time with fields
smaller than the specified unit set to zero.
For example, truncating with the {@link ChronoUnit#MINUTES minutes} unit
will set the second-of-minute and nano-of-second field to zero.
<p>
The unit must have a {@linkplain TemporalUnit#getDuration() duration}
that divides into the length of a standard day without remainder.
This includes all supplied time units on {@link ChronoUnit} and
{@link ChronoUnit#DAYS DAYS}. Other units throw an exception.
<p>
The offset does not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param unit  the unit to truncate to, not null
@return an {@code OffsetDateTime} based on this date-time with the time truncated, not null
@throws DateTimeException if unable to truncate
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8387970 "plus"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date-time with the specified amount added.
<p>
This returns an {@code OffsetDateTime}, based on this one, with the specified amount added.
The amount is typically {@link Period} or {@link Duration} but may be
any other type implementing the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return an {@code OffsetDateTime} based on this date-time with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8388098 "plus"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified amount added.
<p>
This returns an {@code OffsetDateTime}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented by
{@link LocalDateTime#plus(long, TemporalUnit)}.
The offset is not part of the calculation and will be unchanged in the result.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return an {@code OffsetDateTime} based on this date-time with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8388226 "plusYears"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetDateTime} with the specified number of years added.
<p>
This method adds the specified amount to the years field in three steps:
<ol>
<li>Add the input years to the year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2008-02-29 (leap year) plus one year would result in the
invalid date 2009-02-29 (standard year). Instead of returning an invalid
result, the last valid day of the month, 2009-02-28, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param years  the years to add, may be negative
@return an {@code OffsetDateTime} based on this date-time with the years added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8388354 "plusMonths"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of months added.
<p>
This method adds the specified amount to the months field in three steps:
<ol>
<li>Add the input months to the month-of-year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2007-03-31 plus one month would result in the invalid date
2007-04-31. Instead of returning an invalid result, the last valid day
of the month, 2007-04-30, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to add, may be negative
@return an {@code OffsetDateTime} based on this date-time with the months added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8388482 "plusWeeks"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "weeks" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this OffsetDateTime with the specified number of weeks added.
<p>
This method adds the specified amount in weeks to the days field incrementing
the month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2008-12-31 plus one week would result in 2009-01-07.
<p>
This instance is immutable and unaffected by this method call.

@param weeks  the weeks to add, may be negative
@return an {@code OffsetDateTime} based on this date-time with the weeks added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8388610 "plusDays"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this OffsetDateTime with the specified number of days added.
<p>
This method adds the specified amount to the days field incrementing the
month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2008-12-31 plus one day would result in 2009-01-01.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to add, may be negative
@return an {@code OffsetDateTime} based on this date-time with the days added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8388738 "plusHours"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of hours added.
<p>
This instance is immutable and unaffected by this method call.

@param hours  the hours to add, may be negative
@return an {@code OffsetDateTime} based on this date-time with the hours added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8388866 "plusMinutes"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of minutes added.
<p>
This instance is immutable and unaffected by this method call.

@param minutes  the minutes to add, may be negative
@return an {@code OffsetDateTime} based on this date-time with the minutes added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8388994 "plusSeconds"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of seconds added.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to add, may be negative
@return an {@code OffsetDateTime} based on this date-time with the seconds added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8389122 "plusNanos"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of nanoseconds added.
<p>
This instance is immutable and unaffected by this method call.

@param nanos  the nanos to add, may be negative
@return an {@code OffsetDateTime} based on this date-time with the nanoseconds added, not null
@throws DateTimeException if the unit cannot be added to this type
"
      end

      operation 8389250 "minus"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date-time with the specified amount subtracted.
<p>
This returns an {@code OffsetDateTime}, based on this one, with the specified amount subtracted.
The amount is typically {@link Period} or {@link Duration} but may be
any other type implementing the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return an {@code OffsetDateTime} based on this date-time with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8389378 "minus"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified amount subtracted.
<p>
This returns an {@code OffsetDateTime}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return an {@code OffsetDateTime} based on this date-time with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8389506 "minusYears"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetDateTime} with the specified number of years subtracted.
<p>
This method subtracts the specified amount from the years field in three steps:
<ol>
<li>Subtract the input years from the year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2008-02-29 (leap year) minus one year would result in the
invalid date 2009-02-29 (standard year). Instead of returning an invalid
result, the last valid day of the month, 2009-02-28, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param years  the years to subtract, may be negative
@return an {@code OffsetDateTime} based on this date-time with the years subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8389634 "minusMonths"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of months subtracted.
<p>
This method subtracts the specified amount from the months field in three steps:
<ol>
<li>Subtract the input months from the month-of-year field</li>
<li>Check if the resulting date would be invalid</li>
<li>Adjust the day-of-month to the last valid day if necessary</li>
</ol>
<p>
For example, 2007-03-31 minus one month would result in the invalid date
2007-04-31. Instead of returning an invalid result, the last valid day
of the month, 2007-04-30, is selected instead.
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to subtract, may be negative
@return an {@code OffsetDateTime} based on this date-time with the months subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8389762 "minusWeeks"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "weeks" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of weeks subtracted.
<p>
This method subtracts the specified amount in weeks from the days field decrementing
the month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2008-12-31 minus one week would result in 2009-01-07.
<p>
This instance is immutable and unaffected by this method call.

@param weeks  the weeks to subtract, may be negative
@return an {@code OffsetDateTime} based on this date-time with the weeks subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8389890 "minusDays"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of days subtracted.
<p>
This method subtracts the specified amount from the days field decrementing the
month and year fields as necessary to ensure the result remains valid.
The result is only invalid if the maximum/minimum year is exceeded.
<p>
For example, 2008-12-31 minus one day would result in 2009-01-01.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to subtract, may be negative
@return an {@code OffsetDateTime} based on this date-time with the days subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8390018 "minusHours"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of hours subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param hours  the hours to subtract, may be negative
@return an {@code OffsetDateTime} based on this date-time with the hours subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8390146 "minusMinutes"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of minutes subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param minutes  the minutes to subtract, may be negative
@return an {@code OffsetDateTime} based on this date-time with the minutes subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8390274 "minusSeconds"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of seconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to subtract, may be negative
@return an {@code OffsetDateTime} based on this date-time with the seconds subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8390402 "minusNanos"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetDateTime} with the specified number of nanoseconds subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param nanos  the nanos to subtract, may be negative
@return an {@code OffsetDateTime} based on this date-time with the nanoseconds subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8390530 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this date-time using the specified query.
<p>
This queries this date-time using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8390658 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same offset, date
and time as this object.
<p>
This returns a temporal object of the same observable type as the input
with the offset, date and time changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
three times, passing {@link ChronoField#EPOCH_DAY},
{@link ChronoField#NANO_OF_DAY} and {@link ChronoField#OFFSET_SECONDS} as the fields.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisOffsetDateTime.adjustInto(temporal);
  temporal = temporal.with(thisOffsetDateTime);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8390786 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another date-time in terms of the specified unit.
<p>
This calculates the amount of time between two {@code OffsetDateTime}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified date-time.
The result will be negative if the end is before the start.
For example, the amount in days between two date-times can be calculated
using {@code startDateTime.until(endDateTime, DAYS)}.
<p>
The {@code Temporal} passed to this method is converted to a
{@code OffsetDateTime} using {@link #from(TemporalAccessor)}.
If the offset differs between the two date-times, the specified
end date-time is normalized to have the same offset as this date-time.
<p>
The calculation returns a whole number, representing the number of
complete units between the two date-times.
For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z
will only be one month as it is one minute short of two months.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, MONTHS);
  amount = MONTHS.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},
{@code MINUTES}, {@code HOURS} and {@code HALF_DAYS}, {@code DAYS},
{@code WEEKS}, {@code MONTHS}, {@code YEARS}, {@code DECADES},
{@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.
Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end date, exclusive, which is converted to an {@code OffsetDateTime}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this date-time and the end date-time
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to an {@code OffsetDateTime}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8390914 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this date-time using the specified formatter.
<p>
This date-time will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted date-time string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8391042 "atZoneSameInstant"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this date-time with a time-zone to create a {@code ZonedDateTime}
ensuring that the result has the same instant.
<p>
This returns a {@code ZonedDateTime} formed from this date-time and the specified time-zone.
This conversion will ignore the visible local date-time and use the underlying instant instead.
This avoids any problems with local time-line gaps or overlaps.
The result might have different values for fields such as hour, minute an even day.
<p>
To attempt to retain the values of the fields, use {@link #atZoneSimilarLocal(ZoneId)}.
To use the offset as the zone ID, use {@link #toZonedDateTime()}.

@param zone  the time-zone to use, not null
@return the zoned date-time formed from this date-time, not null
"
      end

      operation 8391170 "atZoneSimilarLocal"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this date-time with a time-zone to create a {@code ZonedDateTime}
trying to keep the same local date and time.
<p>
This returns a {@code ZonedDateTime} formed from this date-time and the specified time-zone.
Where possible, the result will have the same local date-time as this object.
<p>
Time-zone rules, such as daylight savings, mean that not every time on the
local time-line exists. If the local date-time is in a gap or overlap according to
the rules then a resolver is used to determine the resultant local time and offset.
This method uses {@link ZonedDateTime#ofLocal(LocalDateTime, ZoneId, ZoneOffset)}
to retain the offset from this instance if possible.
<p>
Finer control over gaps and overlaps is available in two ways.
If you simply want to use the later offset at overlaps then call
{@link ZonedDateTime#withLaterOffsetAtOverlap()} immediately after this method.
<p>
To create a zoned date-time at the same instant irrespective of the local time-line,
use {@link #atZoneSameInstant(ZoneId)}.
To use the offset as the zone ID, use {@link #toZonedDateTime()}.

@param zone  the time-zone to use, not null
@return the zoned date-time formed from this date and the earliest valid time for the zone, not null
"
      end

      operation 8391298 "toOffsetTime"
	public return_type class_ref 1053570 // OffsetTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Converts this date-time to an {@code OffsetTime}.
<p>
This returns an offset time with the same local time and offset.

@return an OffsetTime representing the time and offset, not null
"
      end

      operation 8391426 "toZonedDateTime"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this date-time to a {@code ZonedDateTime} using the offset as the zone ID.
<p>
This creates the simplest possible {@code ZonedDateTime} using the offset
as the zone ID.
<p>
To control the time-zone used, see {@link #atZoneSameInstant(ZoneId)} and
{@link #atZoneSimilarLocal(ZoneId)}.

@return a zoned date-time representing the same local date-time and offset, not null
"
      end

      operation 8391554 "toInstant"
	public return_type class_ref 1003778 // Instant
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this date-time to an {@code Instant}.
<p>
This returns an {@code Instant} representing the same point on the
time-line as this date-time.

@return an {@code Instant} representing the same instant, not null
"
      end

      operation 8391682 "toEpochSecond"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts this date-time to the number of seconds from the epoch of 1970-01-01T00:00:00Z.
<p>
This allows this date-time to be converted to a value of the
{@link ChronoField#INSTANT_SECONDS epoch-seconds} field. This is primarily
intended for low-level conversions rather than general application usage.

@return the number of seconds from the epoch of 1970-01-01T00:00:00Z
"
      end

      operation 8391810 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1052034 // OffsetDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this date-time to another date-time.
<p>
The comparison is based on the instant then on the local date-time.
It is \"consistent with equals\", as defined by {@link Comparable}.
<p>
For example, the following is the comparator order:
<ol>
<li>{@code 2008-12-03T10:30+01:00}</li>
<li>{@code 2008-12-03T11:00+01:00}</li>
<li>{@code 2008-12-03T12:00+02:00}</li>
<li>{@code 2008-12-03T11:30+01:00}</li>
<li>{@code 2008-12-03T12:00+01:00}</li>
<li>{@code 2008-12-03T12:30+01:00}</li>
</ol>
Values #2 and #3 represent the same instant on the time-line.
When two values represent the same instant, the local date-time is compared
to distinguish them. This step is needed to make the ordering
consistent with {@code equals()}.

@param other  the other date-time to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8391938 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052034 // OffsetDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the instant of this date-time is after that of the specified date-time.
<p>
This method differs from the comparison in {@link #compareTo} and {@link #equals} in that it
only compares the instant of the date-time. This is equivalent to using
{@code dateTime1.toInstant().isAfter(dateTime2.toInstant());}.

@param other  the other date-time to compare to, not null
@return true if this is after the instant of the specified date-time
"
      end

      operation 8392066 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052034 // OffsetDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the instant of this date-time is before that of the specified date-time.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the instant of the date-time. This is equivalent to using
{@code dateTime1.toInstant().isBefore(dateTime2.toInstant());}.

@param other  the other date-time to compare to, not null
@return true if this is before the instant of the specified date-time
"
      end

      operation 8392194 "isEqual"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1052034 // OffsetDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the instant of this date-time is equal to that of the specified date-time.
<p>
This method differs from the comparison in {@link #compareTo} and {@link #equals}
in that it only compares the instant of the date-time. This is equivalent to using
{@code dateTime1.toInstant().equals(dateTime2.toInstant());}.

@param other  the other date-time to compare to, not null
@return true if the instant equals the instant of the specified date-time
"
      end

      operation 8392322 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this date-time is equal to another date-time.
<p>
The comparison is based on the local date-time and the offset.
To compare for the same instant on the time-line, use {@link #isEqual}.
Only objects of type {@code OffsetDateTime} are compared, other types return false.

@param obj  the object to check, null returns false
@return true if this is equal to the other date-time
"
      end

      operation 8392450 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date-time.

@return a suitable hash code
"
      end

      operation 8392578 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this date-time as a {@code String}, such as {@code 2007-12-03T10:15:30+01:00}.
<p>
The output will be one of the following ISO-8601 formats:
<ul>
<li>{@code uuuu-MM-dd'T'HH:mmXXXXX}</li>
<li>{@code uuuu-MM-dd'T'HH:mm:ssXXXXX}</li>
<li>{@code uuuu-MM-dd'T'HH:mm:ss.SSSXXXXX}</li>
<li>{@code uuuu-MM-dd'T'HH:mm:ss.SSSSSSXXXXX}</li>
<li>{@code uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSXXXXX}</li>
</ul>
The format used will be the shortest that outputs the full value of
the time where the omitted parts are implied to be zero.

@return a string representation of this date-time, not null
"
      end

      operation 8392706 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(10);  // identifies an OffsetDateTime
 // the <a href=\"../../serialized-form.html#java.time.LocalDateTime\">datetime</a> excluding the one byte header
 // the <a href=\"../../serialized-form.html#java.time.ZoneOffset\">offset</a> excluding the one byte header
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8392834 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8392962 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8393090 "readExternal"
	class_operation package return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1052162 "ZoneOffset"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A time-zone offset from Greenwich/UTC, such as {@code +02:00}.
<p>
A time-zone offset is the amount of time that a time-zone differs from Greenwich/UTC.
This is usually a fixed number of hours and minutes.
<p>
Different parts of the world have different time-zone offsets.
The rules for how offsets vary by place and time of year are captured in the
{@link ZoneId} class.
<p>
For example, Paris is one hour ahead of Greenwich/UTC in winter and two hours
ahead in summer. The {@code ZoneId} instance for Paris will reference two
{@code ZoneOffset} instances - a {@code +01:00} instance for winter,
and a {@code +02:00} instance for summer.
<p>
In 2008, time-zone offsets around the world extended from -12:00 to +14:00.
To prevent any problems with that range being extended, yet still provide
validation, the range of offsets is restricted to -18:00 to 18:00 inclusive.
<p>
This class is designed for use with the ISO calendar system.
The fields of hours, minutes and seconds make assumptions that are valid for the
standard ISO definitions of those fields. This class may be used with other
calendar systems providing the definition of the time fields matches those
of the ISO calendar system.
<p>
Instances of {@code ZoneOffset} must be compared using {@link #equals}.
Implementations may choose to cache certain common offsets, however
applications must not rely on such caching.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code ZoneOffset} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3435906 // <generalisation>
	relation 3435906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3435906 // <generalisation>
	  b parent class_ref 1049730 // ZoneId
      end

      classrelation 3436034 // <realization>
	relation 3436034 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3436034 // <realization>
	  b parent class_ref 1050754 // TemporalAccessor
      end

      classrelation 3436162 // <realization>
	relation 3436162 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3436162 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3436290 // <realization>
	relation 3436290 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3436290 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3436418 // <realization>
	relation 3436418 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3436418 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3436546 // SECONDS_CACHE (<unidirectional association>)
	relation 3436546 --->
	  a role_name "SECONDS_CACHE" init_value " new ConcurrentHashMap<>(16, 0.75f, 4)" class_relation const_relation private
	    comment " Cache of time-zone offset by offset in seconds. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, ZoneOffset> ${name}${value};
"
	    classrelation_ref 3436546 // SECONDS_CACHE (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      classrelation 3436674 // ID_CACHE (<unidirectional association>)
	relation 3436674 --->
	  a role_name "ID_CACHE" init_value " new ConcurrentHashMap<>(16, 0.75f, 4)" class_relation const_relation private
	    comment " Cache of time-zone offset by ID. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, ZoneOffset> ${name}${value};
"
	    classrelation_ref 3436674 // ID_CACHE (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      attribute 1951234 "MAX_SECONDS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 18 * SECONDS_PER_HOUR"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The abs maximum seconds.

"
      end

      attribute 1951362 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2357656521762053153L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3436802 // UTC (<unidirectional association>)
	relation 3436802 --->
	  a role_name "UTC" init_value " ZoneOffset.ofTotalSeconds(0)" class_relation const_relation public
	    comment "
The time-zone offset for UTC, with an ID of 'Z'.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3436802 // UTC (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      classrelation 3436930 // MIN (<unidirectional association>)
	relation 3436930 --->
	  a role_name "MIN" init_value " ZoneOffset.ofTotalSeconds(-MAX_SECONDS)" class_relation const_relation public
	    comment "
Constant for the maximum supported offset.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3436930 // MIN (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      classrelation 3437058 // MAX (<unidirectional association>)
	relation 3437058 --->
	  a role_name "MAX" init_value " ZoneOffset.ofTotalSeconds(MAX_SECONDS)" class_relation const_relation public
	    comment "
Constant for the maximum supported offset.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3437058 // MAX (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      attribute 1951490 "totalSeconds"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The total offset in seconds.

"
      end

      classrelation 3437186 // id (<unidirectional association>)
	relation 3437186 --->
	  a role_name "id" const_relation private
	    comment "
The string form of the time-zone offset.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3437186 // id (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      operation 8439682 "of"
	class_operation public return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param inout name "offsetId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"fallthrough\")
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZoneOffset} using the ID.
<p>
This method parses the string ID of a {@code ZoneOffset} to
return an instance. The parsing accepts all the formats generated by
{@link #getId()}, plus some additional formats:
<ul>
<li>{@code Z} - for UTC
<li>{@code +h}
<li>{@code +hh}
<li>{@code +hh:mm}
<li>{@code -hh:mm}
<li>{@code +hhmm}
<li>{@code -hhmm}
<li>{@code +hh:mm:ss}
<li>{@code -hh:mm:ss}
<li>{@code +hhmmss}
<li>{@code -hhmmss}
</ul>
Note that &plusmn; means either the plus or minus symbol.
<p>
The ID of the returned offset will be normalized to one of the formats
described by {@link #getId()}.
<p>
The maximum supported range is from +18:00 to -18:00 inclusive.

@param offsetId  the offset ID, not null
@return the zone-offset, not null
@throws DateTimeException if the offset ID is invalid
"
      end

      operation 8439810 "parseNumber"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "offsetId" type class_ref 429442 // CharSequence
	  param in name "pos" explicit_type "int"
	  param inout name "precededByColon" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse a two digit zero-prefixed number.

@param offsetId  the offset ID, not null
@param pos  the position to parse, valid
@param precededByColon  should this number be prefixed by a precededByColon
@return the parsed number, from 0 to 99
"
      end

      operation 8439938 "ofHours"
	class_operation public return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param in name "hours" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZoneOffset} using an offset in hours.

@param hours  the time-zone offset in hours, from -18 to +18
@return the zone-offset, not null
@throws DateTimeException if the offset is not in the required range
"
      end

      operation 8440066 "ofHoursMinutes"
	class_operation public return_type class_ref 1052162 // ZoneOffset
	nparams 2
	  param in name "hours" explicit_type "int"
	  param in name "minutes" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZoneOffset} using an offset in
hours and minutes.
<p>
The sign of the hours and minutes components must match.
Thus, if the hours is negative, the minutes must be negative or zero.
If the hours is zero, the minutes may be positive, negative or zero.

@param hours  the time-zone offset in hours, from -18 to +18
@param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours
@return the zone-offset, not null
@throws DateTimeException if the offset is not in the required range
"
      end

      operation 8440194 "ofHoursMinutesSeconds"
	class_operation public return_type class_ref 1052162 // ZoneOffset
	nparams 3
	  param in name "hours" explicit_type "int"
	  param in name "minutes" explicit_type "int"
	  param in name "seconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZoneOffset} using an offset in
hours, minutes and seconds.
<p>
The sign of the hours, minutes and seconds components must match.
Thus, if the hours is negative, the minutes and seconds must be negative or zero.

@param hours  the time-zone offset in hours, from -18 to +18
@param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours and seconds
@param seconds  the time-zone offset in seconds, from 0 to &plusmn;59, sign matches hours and minutes
@return the zone-offset, not null
@throws DateTimeException if the offset is not in the required range
"
      end

      operation 8440322 "from"
	class_operation public return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZoneOffset} from a temporal object.
<p>
This obtains an offset based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ZoneOffset}.
<p>
A {@code TemporalAccessor} represents some form of date and time information.
This factory converts the arbitrary temporal object to an instance of {@code ZoneOffset}.
<p>
The conversion uses the {@link TemporalQueries#offset()} query, which relies
on extracting the {@link ChronoField#OFFSET_SECONDS OFFSET_SECONDS} field.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code ZoneOffset::from}.

@param temporal  the temporal object to convert, not null
@return the zone-offset, not null
@throws DateTimeException if unable to convert to an {@code ZoneOffset}
"
      end

      operation 8440450 "validate"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "hours" explicit_type "int"
	  param in name "minutes" explicit_type "int"
	  param in name "seconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Validates the offset fields.

@param hours  the time-zone offset in hours, from -18 to +18
@param minutes  the time-zone offset in minutes, from 0 to &plusmn;59
@param seconds  the time-zone offset in seconds, from 0 to &plusmn;59
@throws DateTimeException if the offset is not in the required range
"
      end

      operation 8440578 "totalSeconds"
	class_operation private explicit_return_type "int"
	nparams 3
	  param in name "hours" explicit_type "int"
	  param in name "minutes" explicit_type "int"
	  param in name "seconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Calculates the total offset in seconds.

@param hours  the time-zone offset in hours, from -18 to +18
@param minutes  the time-zone offset in minutes, from 0 to &plusmn;59, sign matches hours and seconds
@param seconds  the time-zone offset in seconds, from 0 to &plusmn;59, sign matches hours and minutes
@return the total in seconds
"
      end

      operation 8440706 "ofTotalSeconds"
	class_operation public return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param in name "totalSeconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZoneOffset} specifying the total offset in seconds
<p>
The offset must be in the range {@code -18:00} to {@code +18:00}, which corresponds to -64800 to +64800.

@param totalSeconds  the total time-zone offset in seconds, from -64800 to +64800
@return the ZoneOffset, not null
@throws DateTimeException if the offset is not in the required range
"
      end

      operation 8440834 "ZoneOffset"
	private explicit_return_type ""
	nparams 1
	  param in name "totalSeconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param totalSeconds  the total time-zone offset in seconds, from -64800 to +64800
"
      end

      operation 8440962 "buildId"
	class_operation private return_type class_ref 128130 // String
	nparams 1
	  param in name "totalSeconds" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8441090 "getTotalSeconds"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the total zone offset in seconds.
<p>
This is the primary way to access the offset amount.
It returns the total of the hours, minutes and seconds fields as a
single offset that can be added to a time.

@return the total zone offset amount in seconds
"
      end

      operation 8441218 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the normalized zone offset ID.
<p>
The ID is minor variation to the standard ISO-8601 formatted string
for the offset. There are three formats:
<ul>
<li>{@code Z} - for UTC (ISO-8601)
<li>{@code +hh:mm} or {@code -hh:mm} - if the seconds are zero (ISO-8601)
<li>{@code +hh:mm:ss} or {@code -hh:mm:ss} - if the seconds are non-zero (not ISO-8601)
</ul>

@return the zone offset ID, not null
"
      end

      operation 8441346 "getRules"
	public return_type class_ref 1054338 // ZoneRules
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the associated time-zone rules.
<p>
The rules will always return this offset when queried.
The implementation class is immutable, thread-safe and serializable.

@return the rules, not null
"
      end

      operation 8441474 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this offset can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range} and
{@link #get(TemporalField) get} methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code OFFSET_SECONDS} field returns true.
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this offset, false if not
"
      end

      operation 8441602 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This offset is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported

 override for Javadoc"
      end

      operation 8441730 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this offset as an {@code int}.
<p>
This queries this offset for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code OFFSET_SECONDS} field returns the value of the offset.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc and performance"
      end

      operation 8441858 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this offset as a {@code long}.
<p>
This queries this offset for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@code OFFSET_SECONDS} field returns the value of the offset.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8441986 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this offset using the specified query.
<p>
This queries this offset using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8442114 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same offset as this object.
<p>
This returns a temporal object of the same observable type as the input
with the offset changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#OFFSET_SECONDS} as the field.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisOffset.adjustInto(temporal);
  temporal = temporal.with(thisOffset);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8442242 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this offset to another offset in descending order.
<p>
The offsets are compared in the order that they occur for the same time
of day around the world. Thus, an offset of {@code +10:00} comes before an
offset of {@code +09:00} and so on down to {@code -18:00}.
<p>
The comparison is \"consistent with equals\", as defined by {@link Comparable}.

@param other  the other date to compare to, not null
@return the comparator value, negative if less, postive if greater
@throws NullPointerException if {@code other} is null
"
      end

      operation 8442370 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this offset is equal to another offset.
<p>
The comparison is based on the amount of the offset in seconds.
This is equivalent to a comparison by ID.

@param obj  the object to check, null returns false
@return true if this is equal to the other offset
"
      end

      operation 8442498 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this offset.

@return a suitable hash code
"
      end

      operation 8442626 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this offset as a {@code String}, using the normalized ID.

@return a string representation of this offset, not null
"
      end

      operation 8442754 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(8);                  // identifies a ZoneOffset
 int offsetByte = totalSeconds % 900 == 0 ? totalSeconds / 900 : 127;
 out.writeByte(offsetByte);
 if (offsetByte == 127) {
     out.writeInt(totalSeconds);
 }
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8442882 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8443010 "write"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8443138 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8443266 "readExternal"
	class_operation package return_type class_ref 1052162 // ZoneOffset
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1052290 "ZonedDateTime"
      visibility public 
      nactuals 1
      actual class class_ref 1053698 // ChronoZonedDateTime
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-time with a time-zone in the ISO-8601 calendar system,
such as {@code 2007-12-03T10:15:30+01:00 Europe/Paris}.
<p>
{@code ZonedDateTime} is an immutable representation of a date-time with a time-zone.
This class stores all date and time fields, to a precision of nanoseconds,
and a time-zone, with a zone offset used to handle ambiguous local date-times.
For example, the value
\"2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris time-zone\"
can be stored in a {@code ZonedDateTime}.
<p>
This class handles conversion from the local time-line of {@code LocalDateTime}
to the instant time-line of {@code Instant}.
The difference between the two time-lines is the offset from UTC/Greenwich,
represented by a {@code ZoneOffset}.
<p>
Converting between the two time-lines involves calculating the offset using the
{@link ZoneRules rules} accessed from the {@code ZoneId}.
Obtaining the offset for an instant is simple, as there is exactly one valid
offset for each instant. By contrast, obtaining the offset for a local date-time
is not straightforward. There are three cases:
<ul>
<li>Normal, with one valid offset. For the vast majority of the year, the normal
 case applies, where there is a single valid offset for the local date-time.</li>
<li>Gap, with zero valid offsets. This is when clocks jump forward typically
 due to the spring daylight savings change from \"winter\" to \"summer\".
 In a gap there are local date-time values with no valid offset.</li>
<li>Overlap, with two valid offsets. This is when clocks are set back typically
 due to the autumn daylight savings change from \"summer\" to \"winter\".
 In an overlap there are local date-time values with two valid offsets.</li>
</ul>
<p>
Any method that converts directly or implicitly from a local date-time to an
instant by obtaining the offset has the potential to be complicated.
<p>
For Gaps, the general strategy is that if the local date-time falls in the
middle of a Gap, then the resulting zoned date-time will have a local date-time
shifted forwards by the length of the Gap, resulting in a date-time in the later
offset, typically \"summer\" time.
<p>
For Overlaps, the general strategy is that if the local date-time falls in the
middle of an Overlap, then the previous offset will be retained. If there is no
previous offset, or the previous offset is invalid, then the earlier offset is
used, typically \"summer\" time.. Two additional methods,
{@link #withEarlierOffsetAtOverlap()} and {@link #withLaterOffsetAtOverlap()},
help manage the case of an overlap.
<p>
In terms of design, this class should be viewed primarily as the combination
of a {@code LocalDateTime} and a {@code ZoneId}. The {@code ZoneOffset} is
a vital, but secondary, piece of information, used to ensure that the class
represents an instant, especially during a daylight savings overlap.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code ZonedDateTime} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
A {@code ZonedDateTime} holds state equivalent to three separate objects,
a {@code LocalDateTime}, a {@code ZoneId} and the resolved {@code ZoneOffset}.
The offset and local date-time are used to define an instant when necessary.
The zone ID is used to obtain the rules for how and when the offset changes.
The offset cannot be freely set, as the zone controls which offsets are valid.
<p>
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3434626 // <realization>
	relation 3434626 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3434626 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3435010 // <realization>
	relation 3435010 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3435010 // <realization>
	  b parent class_ref 1053698 // ChronoZonedDateTime
      end

      classrelation 3435138 // <realization>
	relation 3435138 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3435138 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1950978 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6260982410461394882L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3435266 // dateTime (<unidirectional association>)
	relation 3435266 --->
	  a role_name "dateTime" const_relation private
	    comment "
The local date-time.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3435266 // dateTime (<unidirectional association>)
	  b parent class_ref 1043970 // LocalDateTime
      end

      classrelation 3435394 // offset (<unidirectional association>)
	relation 3435394 --->
	  a role_name "offset" const_relation private
	    comment "
The offset from UTC/Greenwich.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3435394 // offset (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      classrelation 3435522 // zone (<unidirectional association>)
	relation 3435522 --->
	  a role_name "zone" const_relation private
	    comment "
The time-zone.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3435522 // zone (<unidirectional association>)
	  b parent class_ref 1049730 // ZoneId
      end

      operation 8426114 "now"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current date-time from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current date-time.
The zone and offset will be set based on the time-zone in the clock.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current date-time using the system clock, not null
"
      end

      operation 8426242 "now"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current date-time from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current date-time.
Specifying the time-zone avoids dependence on the default time-zone.
The offset will be calculated from the specified time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current date-time using the system clock, not null
"
      end

      operation 8426370 "now"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current date-time from the specified clock.
<p>
This will query the specified clock to obtain the current date-time.
The zone and offset will be set based on the time-zone in the clock.
<p>
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current date-time, not null
"
      end

      operation 8426498 "of"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 3
	  param inout name "date" type class_ref 1040770 // LocalDate
	  param inout name "time" type class_ref 1043842 // LocalTime
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZonedDateTime} from a local date and time.
<p>
This creates a zoned date-time matching the input local date and time as closely as possible.
Time-zone rules, such as daylight savings, mean that not every local date-time
is valid for the specified zone, thus the local date-time may be adjusted.
<p>
The local date time and first combined to form a local date-time.
The local date-time is then resolved to a single instant on the time-line.
This is achieved by finding a valid offset from UTC/Greenwich for the local
date-time as defined by the {@link ZoneRules rules} of the zone ID.
<p>
In most cases, there is only one valid offset for a local date-time.
In the case of an overlap, when clocks are set back, there are two valid offsets.
This method uses the earlier offset typically corresponding to \"summer\".
<p>
In the case of a gap, when clocks jump forward, there is no valid offset.
Instead, the local date-time is adjusted to be later by the length of the gap.
For a typical one hour daylight savings change, the local date-time will be
moved one hour later into the offset typically corresponding to \"summer\".

@param date  the local date, not null
@param time  the local time, not null
@param zone  the time-zone, not null
@return the offset date-time, not null
"
      end

      operation 8426626 "of"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 2
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZonedDateTime} from a local date-time.
<p>
This creates a zoned date-time matching the input local date-time as closely as possible.
Time-zone rules, such as daylight savings, mean that not every local date-time
is valid for the specified zone, thus the local date-time may be adjusted.
<p>
The local date-time is resolved to a single instant on the time-line.
This is achieved by finding a valid offset from UTC/Greenwich for the local
date-time as defined by the {@link ZoneRules rules} of the zone ID.
<p>
In most cases, there is only one valid offset for a local date-time.
In the case of an overlap, when clocks are set back, there are two valid offsets.
This method uses the earlier offset typically corresponding to \"summer\".
<p>
In the case of a gap, when clocks jump forward, there is no valid offset.
Instead, the local date-time is adjusted to be later by the length of the gap.
For a typical one hour daylight savings change, the local date-time will be
moved one hour later into the offset typically corresponding to \"summer\".

@param localDateTime  the local date-time, not null
@param zone  the time-zone, not null
@return the zoned date-time, not null
"
      end

      operation 8426754 "of"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 8
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZonedDateTime} from a year, month, day,
hour, minute, second, nanosecond and time-zone.
<p>
This creates a zoned date-time matching the local date-time of the seven
specified fields as closely as possible.
Time-zone rules, such as daylight savings, mean that not every local date-time
is valid for the specified zone, thus the local date-time may be adjusted.
<p>
The local date-time is resolved to a single instant on the time-line.
This is achieved by finding a valid offset from UTC/Greenwich for the local
date-time as defined by the {@link ZoneRules rules} of the zone ID.
<p>
In most cases, there is only one valid offset for a local date-time.
In the case of an overlap, when clocks are set back, there are two valid offsets.
This method uses the earlier offset typically corresponding to \"summer\".
<p>
In the case of a gap, when clocks jump forward, there is no valid offset.
Instead, the local date-time is adjusted to be later by the length of the gap.
For a typical one hour daylight savings change, the local date-time will be
moved one hour later into the offset typically corresponding to \"summer\".
<p>
This method exists primarily for writing test cases.
Non test-code will typically use other methods to create an offset time.
{@code LocalDateTime} has five additional convenience variants of the
equivalent factory method taking fewer arguments.
They are not provided here to reduce the footprint of the API.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999
@param zone  the time-zone, not null
@return the offset date-time, not null
@throws DateTimeException if the value of any field is out of range, or
 if the day-of-month is invalid for the month-year
"
      end

      operation 8426882 "ofLocal"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 3
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "zone" type class_ref 1049730 // ZoneId
	  param inout name "preferredOffset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZonedDateTime} from a local date-time
using the preferred offset if possible.
<p>
The local date-time is resolved to a single instant on the time-line.
This is achieved by finding a valid offset from UTC/Greenwich for the local
date-time as defined by the {@link ZoneRules rules} of the zone ID.
<p>
In most cases, there is only one valid offset for a local date-time.
In the case of an overlap, where clocks are set back, there are two valid offsets.
If the preferred offset is one of the valid offsets then it is used.
Otherwise the earlier valid offset is used, typically corresponding to \"summer\".
<p>
In the case of a gap, where clocks jump forward, there is no valid offset.
Instead, the local date-time is adjusted to be later by the length of the gap.
For a typical one hour daylight savings change, the local date-time will be
moved one hour later into the offset typically corresponding to \"summer\".

@param localDateTime  the local date-time, not null
@param zone  the time-zone, not null
@param preferredOffset  the zone offset, null if no preference
@return the zoned date-time, not null
"
      end

      operation 8427010 "ofInstant"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZonedDateTime} from an {@code Instant}.
<p>
This creates a zoned date-time with the same instant as that specified.
Calling {@link #toInstant()} will return an instant equal to the one used here.
<p>
Converting an instant to a zoned date-time is simple as there is only one valid
offset for each instant.

@param instant  the instant to create the date-time from, not null
@param zone  the time-zone, not null
@return the zoned date-time, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8427138 "ofInstant"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 3
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZonedDateTime} from the instant formed by combining
the local date-time and offset.
<p>
This creates a zoned date-time by {@link LocalDateTime#toInstant(ZoneOffset) combining}
the {@code LocalDateTime} and {@code ZoneOffset}.
This combination uniquely specifies an instant without ambiguity.
<p>
Converting an instant to a zoned date-time is simple as there is only one valid
offset for each instant. If the valid offset is different to the offset specified,
then the date-time and offset of the zoned date-time will differ from those specified.
<p>
If the {@code ZoneId} to be used is a {@code ZoneOffset}, this method is equivalent
to {@link #of(LocalDateTime, ZoneId)}.

@param localDateTime  the local date-time, not null
@param offset  the zone offset, not null
@param zone  the time-zone, not null
@return the zoned date-time, not null
"
      end

      operation 8427266 "create"
	class_operation private return_type class_ref 1052290 // ZonedDateTime
	nparams 3
	  param in name "epochSecond" explicit_type "long"
	  param in name "nanoOfSecond" explicit_type "int"
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZonedDateTime} using seconds from the
epoch of 1970-01-01T00:00:00Z.

@param epochSecond  the number of seconds from the epoch of 1970-01-01T00:00:00Z
@param nanoOfSecond  the nanosecond within the second, from 0 to 999,999,999
@param zone  the time-zone, not null
@return the zoned date-time, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8427394 "ofStrict"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 3
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZonedDateTime} strictly validating the
combination of local date-time, offset and zone ID.
<p>
This creates a zoned date-time ensuring that the offset is valid for the
local date-time according to the rules of the specified zone.
If the offset is invalid, an exception is thrown.

@param localDateTime  the local date-time, not null
@param offset  the zone offset, not null
@param zone  the time-zone, not null
@return the zoned date-time, not null
"
      end

      operation 8427522 "ofLenient"
	class_operation private return_type class_ref 1052290 // ZonedDateTime
	nparams 3
	  param inout name "localDateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZonedDateTime} leniently, for advanced use cases,
allowing any combination of local date-time, offset and zone ID.
<p>
This creates a zoned date-time with no checks other than no nulls.
This means that the resulting zoned date-time may have an offset that is in conflict
with the zone ID.
<p>
This method is intended for advanced use cases.
For example, consider the case where a zoned date-time with valid fields is created
and then stored in a database or serialization-based store. At some later point,
the object is then re-loaded. However, between those points in time, the government
that defined the time-zone has changed the rules, such that the originally stored
local date-time now does not occur. This method can be used to create the object
in an \"invalid\" state, despite the change in rules.

@param localDateTime  the local date-time, not null
@param offset  the zone offset, not null
@param zone  the time-zone, not null
@return the zoned date-time, not null
"
      end

      operation 8427650 "from"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZonedDateTime} from a temporal object.
<p>
This obtains a zoned date-time based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code ZonedDateTime}.
<p>
The conversion will first obtain a {@code ZoneId} from the temporal object,
falling back to a {@code ZoneOffset} if necessary. It will then try to obtain
an {@code Instant}, falling back to a {@code LocalDateTime} if necessary.
The result will be either the combination of {@code ZoneId} or {@code ZoneOffset}
with {@code Instant} or {@code LocalDateTime}.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code ZonedDateTime::from}.

@param temporal  the temporal object to convert, not null
@return the zoned date-time, not null
@throws DateTimeException if unable to convert to an {@code ZonedDateTime}
"
      end

      operation 8427778 "parse"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code ZonedDateTime} from a text string such as
{@code 2007-12-03T10:15:30+01:00[Europe/Paris]}.
<p>
The string must represent a valid date-time and is parsed using
{@link java.time.format.DateTimeFormatter#ISO_ZONED_DATE_TIME}.

@param text  the text to parse such as \"2007-12-03T10:15:30+01:00[Europe/Paris]\", not null
@return the parsed zoned date-time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8427906 "parse"
	class_operation public return_type class_ref 1052290 // ZonedDateTime
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZonedDateTime} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a date-time.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed zoned date-time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8428034 "ZonedDateTime"
	private explicit_return_type ""
	nparams 3
	  param inout name "dateTime" type class_ref 1043970 // LocalDateTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param dateTime  the date-time, validated as not null
@param offset  the zone offset, validated as not null
@param zone  the time-zone, validated as not null
"
      end

      operation 8428162 "resolveLocal"
	private return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "newDateTime" type class_ref 1043970 // LocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves the new local date-time using this zone ID, retaining the offset if possible.

@param newDateTime  the new local date-time, not null
@return the zoned date-time, not null
"
      end

      operation 8428290 "resolveInstant"
	private return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "newDateTime" type class_ref 1043970 // LocalDateTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves the new local date-time using the offset to identify the instant.

@param newDateTime  the new local date-time, not null
@return the zoned date-time, not null
"
      end

      operation 8428418 "resolveOffset"
	private return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves the offset into this zoned date-time for the with methods.
<p>
This typically ignores the offset, unless it can be used to switch offset in a DST overlap.

@param offset  the offset, not null
@return the zoned date-time, not null
"
      end

      operation 8428546 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this date-time can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code NANO_OF_SECOND}
<li>{@code NANO_OF_DAY}
<li>{@code MICRO_OF_SECOND}
<li>{@code MICRO_OF_DAY}
<li>{@code MILLI_OF_SECOND}
<li>{@code MILLI_OF_DAY}
<li>{@code SECOND_OF_MINUTE}
<li>{@code SECOND_OF_DAY}
<li>{@code MINUTE_OF_HOUR}
<li>{@code MINUTE_OF_DAY}
<li>{@code HOUR_OF_AMPM}
<li>{@code CLOCK_HOUR_OF_AMPM}
<li>{@code HOUR_OF_DAY}
<li>{@code CLOCK_HOUR_OF_DAY}
<li>{@code AMPM_OF_DAY}
<li>{@code DAY_OF_WEEK}
<li>{@code ALIGNED_DAY_OF_WEEK_IN_MONTH}
<li>{@code ALIGNED_DAY_OF_WEEK_IN_YEAR}
<li>{@code DAY_OF_MONTH}
<li>{@code DAY_OF_YEAR}
<li>{@code EPOCH_DAY}
<li>{@code ALIGNED_WEEK_OF_MONTH}
<li>{@code ALIGNED_WEEK_OF_YEAR}
<li>{@code MONTH_OF_YEAR}
<li>{@code PROLEPTIC_MONTH}
<li>{@code YEAR_OF_ERA}
<li>{@code YEAR}
<li>{@code ERA}
<li>{@code INSTANT_SECONDS}
<li>{@code OFFSET_SECONDS}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this date-time, false if not
"
      end

      operation 8428674 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this date-time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code NANOS}
<li>{@code MICROS}
<li>{@code MILLIS}
<li>{@code SECONDS}
<li>{@code MINUTES}
<li>{@code HOURS}
<li>{@code HALF_DAYS}
<li>{@code DAYS}
<li>{@code WEEKS}
<li>{@code MONTHS}
<li>{@code YEARS}
<li>{@code DECADES}
<li>{@code CENTURIES}
<li>{@code MILLENNIA}
<li>{@code ERAS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not

 override for Javadoc"
      end

      operation 8428802 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This date-time is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8428930 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this date-time as an {@code int}.
<p>
This queries this date-time for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date-time, except {@code NANO_OF_DAY}, {@code MICRO_OF_DAY},
{@code EPOCH_DAY}, {@code PROLEPTIC_MONTH} and {@code INSTANT_SECONDS} which are too
large to fit in an {@code int} and throw a {@code DateTimeException}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc and performance"
      end

      operation 8429058 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this date-time as a {@code long}.
<p>
This queries this date-time for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this date-time.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8429186 "getOffset"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the zone offset, such as '+01:00'.
<p>
This is the offset of the local date-time from UTC/Greenwich.

@return the zone offset, not null
"
      end

      operation 8429314 "withEarlierOffsetAtOverlap"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time changing the zone offset to the
earlier of the two valid offsets at a local time-line overlap.
<p>
This method only has any effect when the local time-line overlaps, such as
at an autumn daylight savings cutover. In this scenario, there are two
valid offsets for the local date-time. Calling this method will return
a zoned date-time with the earlier of the two selected.
<p>
If this method is called when it is not an overlap, {@code this}
is returned.
<p>
This instance is immutable and unaffected by this method call.

@return a {@code ZonedDateTime} based on this date-time with the earlier offset, not null
"
      end

      operation 8429442 "withLaterOffsetAtOverlap"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time changing the zone offset to the
later of the two valid offsets at a local time-line overlap.
<p>
This method only has any effect when the local time-line overlaps, such as
at an autumn daylight savings cutover. In this scenario, there are two
valid offsets for the local date-time. Calling this method will return
a zoned date-time with the later of the two selected.
<p>
If this method is called when it is not an overlap, {@code this}
is returned.
<p>
This instance is immutable and unaffected by this method call.

@return a {@code ZonedDateTime} based on this date-time with the later offset, not null
"
      end

      operation 8429570 "getZone"
	public return_type class_ref 1049730 // ZoneId
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the time-zone, such as 'Europe/Paris'.
<p>
This returns the zone ID. This identifies the time-zone {@link ZoneRules rules}
that determine when and how the offset from UTC/Greenwich changes.
<p>
The zone ID may be same as the {@linkplain #getOffset() offset}.
If this is true, then any future calculations, such as addition or subtraction,
have no complex edge cases due to time-zone rules.
See also {@link #withFixedOffsetZone()}.

@return the time-zone, not null
"
      end

      operation 8429698 "withZoneSameLocal"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with a different time-zone,
retaining the local date-time if possible.
<p>
This method changes the time-zone and retains the local date-time.
The local date-time is only changed if it is invalid for the new zone,
determined using the same approach as
{@link #ofLocal(LocalDateTime, ZoneId, ZoneOffset)}.
<p>
To change the zone and adjust the local date-time,
use {@link #withZoneSameInstant(ZoneId)}.
<p>
This instance is immutable and unaffected by this method call.

@param zone  the time-zone to change to, not null
@return a {@code ZonedDateTime} based on this date-time with the requested zone, not null
"
      end

      operation 8429826 "withZoneSameInstant"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with a different time-zone,
retaining the instant.
<p>
This method changes the time-zone and retains the instant.
This normally results in a change to the local date-time.
<p>
This method is based on retaining the same instant, thus gaps and overlaps
in the local time-line have no effect on the result.
<p>
To change the offset while keeping the local time,
use {@link #withZoneSameLocal(ZoneId)}.

@param zone  the time-zone to change to, not null
@return a {@code ZonedDateTime} based on this date-time with the requested zone, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8429954 "withFixedOffsetZone"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this date-time with the zone ID set to the offset.
<p>
This returns a zoned date-time where the zone ID is the same as {@link #getOffset()}.
The local date-time, offset and instant of the result will be the same as in this date-time.
<p>
Setting the date-time to a fixed single offset means that any future
calculations, such as addition or subtraction, have no complex edge cases
due to time-zone rules.
This might also be useful when sending a zoned date-time across a network,
as most protocols, such as ISO-8601, only handle offsets,
and not region-based zone IDs.
<p>
This is equivalent to {@code ZonedDateTime.of(zdt.toLocalDateTime(), zdt.getOffset())}.

@return a {@code ZonedDateTime} with the zone ID set to the offset, not null
"
      end

      operation 8430082 "toLocalDateTime"
	public return_type class_ref 1043970 // LocalDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalDateTime} part of this date-time.
<p>
This returns a {@code LocalDateTime} with the same year, month, day and time
as this date-time.

@return the local date-time part of this date-time, not null

 override for return type"
      end

      operation 8430210 "toLocalDate"
	public return_type class_ref 1040770 // LocalDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalDate} part of this date-time.
<p>
This returns a {@code LocalDate} with the same year, month and day
as this date-time.

@return the date part of this date-time, not null

 override for return type"
      end

      operation 8430338 "getYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the year field.
<p>
This method returns the primitive {@code int} value for the year.
<p>
The year returned by this method is proleptic as per {@code get(YEAR)}.
To obtain the year-of-era, use {@code get(YEAR_OF_ERA)}.

@return the year, from MIN_YEAR to MAX_YEAR
"
      end

      operation 8430466 "getMonthValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field from 1 to 12.
<p>
This method returns the month as an {@code int} from 1 to 12.
Application code is frequently clearer if the enum {@link Month}
is used by calling {@link #getMonth()}.

@return the month-of-year, from 1 to 12
@see #getMonth()
"
      end

      operation 8430594 "getMonth"
	public return_type class_ref 1053186 // Month
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field using the {@code Month} enum.
<p>
This method returns the enum {@link Month} for the month.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link Month#getValue() int value}.

@return the month-of-year, not null
@see #getMonthValue()
"
      end

      operation 8430722 "getDayOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-month field.
<p>
This method returns the primitive {@code int} value for the day-of-month.

@return the day-of-month, from 1 to 31
"
      end

      operation 8430850 "getDayOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-year field.
<p>
This method returns the primitive {@code int} value for the day-of-year.

@return the day-of-year, from 1 to 365, or 366 in a leap year
"
      end

      operation 8430978 "getDayOfWeek"
	public return_type class_ref 1050626 // DayOfWeek
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-week field, which is an enum {@code DayOfWeek}.
<p>
This method returns the enum {@link DayOfWeek} for the day-of-week.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link DayOfWeek#getValue() int value}.
<p>
Additional information can be obtained from the {@code DayOfWeek}.
This includes textual names of the values.

@return the day-of-week, not null
"
      end

      operation 8431106 "toLocalTime"
	public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalTime} part of this date-time.
<p>
This returns a {@code LocalTime} with the same hour, minute, second and
nanosecond as this date-time.

@return the time part of this date-time, not null

 override for Javadoc and performance"
      end

      operation 8431234 "getHour"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the hour-of-day field.

@return the hour-of-day, from 0 to 23
"
      end

      operation 8431362 "getMinute"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minute-of-hour field.

@return the minute-of-hour, from 0 to 59
"
      end

      operation 8431490 "getSecond"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the second-of-minute field.

@return the second-of-minute, from 0 to 59
"
      end

      operation 8431618 "getNano"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the nano-of-second field.

@return the nano-of-second, from 0 to 999,999,999
"
      end

      operation 8431746 "with"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an adjusted copy of this date-time.
<p>
This returns a {@code ZonedDateTime}, based on this one, with the date-time adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
A simple adjuster might simply set the one of the fields, such as the year field.
A more complex adjuster might set the date to the last day of the month.
A selection of common adjustments is provided in
{@link java.time.temporal.TemporalAdjusters TemporalAdjusters}.
These include finding the \"last day of the month\" and \"next Wednesday\".
Key date-time classes also implement the {@code TemporalAdjuster} interface,
such as {@link Month} and {@link java.time.MonthDay MonthDay}.
The adjuster is responsible for handling special cases, such as the varying
lengths of month and leap years.
<p>
For example this code returns a date on the last day of July:
<pre>
 import static java.time.Month.*;
 import static java.time.temporal.TemporalAdjusters.*;

 result = zonedDateTime.with(JULY).with(lastDayOfMonth());
</pre>
<p>
The classes {@link LocalDate} and {@link LocalTime} implement {@code TemporalAdjuster},
thus this method can be used to change the date, time or offset:
<pre>
 result = zonedDateTime.with(date);
 result = zonedDateTime.with(time);
</pre>
<p>
{@link ZoneOffset} also implements {@code TemporalAdjuster} however using it
as an argument typically has no effect. The offset of a {@code ZonedDateTime} is
controlled primarily by the time-zone. As such, changing the offset does not generally
make sense, because there is only one valid offset for the local date-time and zone.
If the zoned date-time is in a daylight savings overlap, then the offset is used
to switch between the two valid offsets. In all other cases, the offset is ignored.
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return a {@code ZonedDateTime} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8431874 "with"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified field set to a new value.
<p>
This returns a {@code ZonedDateTime}, based on this one, with the value
for the specified field changed.
This can be used to change any supported field, such as the year, month or day-of-month.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
In some cases, changing the specified field can cause the resulting date-time to become invalid,
such as changing the month from 31st January to February would make the day-of-month invalid.
In cases like this, the field is responsible for resolving the date. Typically it will choose
the previous valid date, which would be the last valid day of February in this example.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
<p>
The {@code INSTANT_SECONDS} field will return a date-time with the specified instant.
The zone and nano-of-second are unchanged.
The result will have an offset derived from the new instant and original zone.
If the new instant value is outside the valid range then a {@code DateTimeException} will be thrown.
<p>
The {@code OFFSET_SECONDS} field will typically be ignored.
The offset of a {@code ZonedDateTime} is controlled primarily by the time-zone.
As such, changing the offset does not generally make sense, because there is only
one valid offset for the local date-time and zone.
If the zoned date-time is in a daylight savings overlap, then the offset is used
to switch between the two valid offsets. In all other cases, the offset is ignored.
If the new offset value is outside the valid range then a {@code DateTimeException} will be thrown.
<p>
The other {@link #isSupported(TemporalField) supported fields} will behave as per
the matching method on {@link LocalDateTime#with(TemporalField, long) LocalDateTime}.
The zone is not part of the calculation and will be unchanged.
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return a {@code ZonedDateTime} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8432002 "withYear"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code ZonedDateTime} with the year altered.
<p>
This operates on the local time-line,
{@link LocalDateTime#withYear(int) changing the year} of the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param year  the year to set in the result, from MIN_YEAR to MAX_YEAR
@return a {@code ZonedDateTime} based on this date-time with the requested year, not null
@throws DateTimeException if the year value is invalid
"
      end

      operation 8432130 "withMonth"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the month-of-year altered.
<p>
This operates on the local time-line,
{@link LocalDateTime#withMonth(int) changing the month} of the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param month  the month-of-year to set in the result, from 1 (January) to 12 (December)
@return a {@code ZonedDateTime} based on this date-time with the requested month, not null
@throws DateTimeException if the month-of-year value is invalid
"
      end

      operation 8432258 "withDayOfMonth"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the day-of-month altered.
<p>
This operates on the local time-line,
{@link LocalDateTime#withDayOfMonth(int) changing the day-of-month} of the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfMonth  the day-of-month to set in the result, from 1 to 28-31
@return a {@code ZonedDateTime} based on this date-time with the requested day, not null
@throws DateTimeException if the day-of-month value is invalid,
 or if the day-of-month is invalid for the month-year
"
      end

      operation 8432386 "withDayOfYear"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the day-of-year altered.
<p>
This operates on the local time-line,
{@link LocalDateTime#withDayOfYear(int) changing the day-of-year} of the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfYear  the day-of-year to set in the result, from 1 to 365-366
@return a {@code ZonedDateTime} based on this date with the requested day, not null
@throws DateTimeException if the day-of-year value is invalid,
 or if the day-of-year is invalid for the year
"
      end

      operation 8432514 "withHour"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "hour" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code ZonedDateTime} with the hour-of-day altered.
<p>
This operates on the local time-line,
{@linkplain LocalDateTime#withHour(int) changing the time} of the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param hour  the hour-of-day to set in the result, from 0 to 23
@return a {@code ZonedDateTime} based on this date-time with the requested hour, not null
@throws DateTimeException if the hour value is invalid
"
      end

      operation 8432642 "withMinute"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the minute-of-hour altered.
<p>
This operates on the local time-line,
{@linkplain LocalDateTime#withMinute(int) changing the time} of the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param minute  the minute-of-hour to set in the result, from 0 to 59
@return a {@code ZonedDateTime} based on this date-time with the requested minute, not null
@throws DateTimeException if the minute value is invalid
"
      end

      operation 8432770 "withSecond"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the second-of-minute altered.
<p>
This operates on the local time-line,
{@linkplain LocalDateTime#withSecond(int) changing the time} of the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param second  the second-of-minute to set in the result, from 0 to 59
@return a {@code ZonedDateTime} based on this date-time with the requested second, not null
@throws DateTimeException if the second value is invalid
"
      end

      operation 8432898 "withNano"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the nano-of-second altered.
<p>
This operates on the local time-line,
{@linkplain LocalDateTime#withNano(int) changing the time} of the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param nanoOfSecond  the nano-of-second to set in the result, from 0 to 999,999,999
@return a {@code ZonedDateTime} based on this date-time with the requested nanosecond, not null
@throws DateTimeException if the nano value is invalid
"
      end

      operation 8433026 "truncatedTo"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code ZonedDateTime} with the time truncated.
<p>
Truncation returns a copy of the original date-time with fields
smaller than the specified unit set to zero.
For example, truncating with the {@link ChronoUnit#MINUTES minutes} unit
will set the second-of-minute and nano-of-second field to zero.
<p>
The unit must have a {@linkplain TemporalUnit#getDuration() duration}
that divides into the length of a standard day without remainder.
This includes all supplied time units on {@link ChronoUnit} and
{@link ChronoUnit#DAYS DAYS}. Other units throw an exception.
<p>
This operates on the local time-line,
{@link LocalDateTime#truncatedTo(TemporalUnit) truncating}
the underlying local date-time. This is then converted back to a
{@code ZonedDateTime}, using the zone ID to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param unit  the unit to truncate to, not null
@return a {@code ZonedDateTime} based on this date-time with the time truncated, not null
@throws DateTimeException if unable to truncate
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8433154 "plus"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date-time with the specified amount added.
<p>
This returns a {@code ZonedDateTime}, based on this one, with the specified amount added.
The amount is typically {@link Period} or {@link Duration} but may be
any other type implementing the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return a {@code ZonedDateTime} based on this date-time with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8433282 "plus"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified amount added.
<p>
This returns a {@code ZonedDateTime}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented here.
The zone is not part of the calculation and will be unchanged in the result.
The calculation for date and time units differ.
<p>
Date units operate on the local time-line.
The period is first added to the local date-time, then converted back
to a zoned date-time using the zone ID.
The conversion uses {@link #ofLocal(LocalDateTime, ZoneId, ZoneOffset)}
with the offset before the addition.
<p>
Time units operate on the instant time-line.
The period is first added to the local date-time, then converted back to
a zoned date-time using the zone ID.
The conversion uses {@link #ofInstant(LocalDateTime, ZoneOffset, ZoneId)}
with the offset before the addition.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return a {@code ZonedDateTime} based on this date-time with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8433410 "plusYears"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code ZonedDateTime} with the specified number of years added.
<p>
This operates on the local time-line,
{@link LocalDateTime#plusYears(long) adding years} to the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param years  the years to add, may be negative
@return a {@code ZonedDateTime} based on this date-time with the years added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8433538 "plusMonths"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of months added.
<p>
This operates on the local time-line,
{@link LocalDateTime#plusMonths(long) adding months} to the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to add, may be negative
@return a {@code ZonedDateTime} based on this date-time with the months added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8433666 "plusWeeks"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "weeks" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of weeks added.
<p>
This operates on the local time-line,
{@link LocalDateTime#plusWeeks(long) adding weeks} to the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param weeks  the weeks to add, may be negative
@return a {@code ZonedDateTime} based on this date-time with the weeks added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8433794 "plusDays"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of days added.
<p>
This operates on the local time-line,
{@link LocalDateTime#plusDays(long) adding days} to the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to add, may be negative
@return a {@code ZonedDateTime} based on this date-time with the days added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8433922 "plusHours"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code ZonedDateTime} with the specified number of hours added.
<p>
This operates on the instant time-line, such that adding one hour will
always be a duration of one hour later.
This may cause the local date-time to change by an amount other than one hour.
Note that this is a different approach to that used by days, months and years,
thus adding one day is not the same as adding 24 hours.
<p>
For example, consider a time-zone where the spring DST cutover means that the
local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.
<ul>
<li>Adding one hour to 00:30+02:00 will result in 01:30+02:00
<li>Adding one hour to 01:30+02:00 will result in 01:30+01:00
<li>Adding one hour to 01:30+01:00 will result in 02:30+01:00
<li>Adding three hours to 00:30+02:00 will result in 02:30+01:00
</ul>
<p>
This instance is immutable and unaffected by this method call.

@param hours  the hours to add, may be negative
@return a {@code ZonedDateTime} based on this date-time with the hours added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8434050 "plusMinutes"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of minutes added.
<p>
This operates on the instant time-line, such that adding one minute will
always be a duration of one minute later.
This may cause the local date-time to change by an amount other than one minute.
Note that this is a different approach to that used by days, months and years.
<p>
This instance is immutable and unaffected by this method call.

@param minutes  the minutes to add, may be negative
@return a {@code ZonedDateTime} based on this date-time with the minutes added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8434178 "plusSeconds"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of seconds added.
<p>
This operates on the instant time-line, such that adding one second will
always be a duration of one second later.
This may cause the local date-time to change by an amount other than one second.
Note that this is a different approach to that used by days, months and years.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to add, may be negative
@return a {@code ZonedDateTime} based on this date-time with the seconds added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8434306 "plusNanos"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds added.
<p>
This operates on the instant time-line, such that adding one nano will
always be a duration of one nano later.
This may cause the local date-time to change by an amount other than one nano.
Note that this is a different approach to that used by days, months and years.
<p>
This instance is immutable and unaffected by this method call.

@param nanos  the nanos to add, may be negative
@return a {@code ZonedDateTime} based on this date-time with the nanoseconds added, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8434434 "minus"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this date-time with the specified amount subtracted.
<p>
This returns a {@code ZonedDateTime}, based on this one, with the specified amount subtracted.
The amount is typically {@link Period} or {@link Duration} but may be
any other type implementing the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return a {@code ZonedDateTime} based on this date-time with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8434562 "minus"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this date-time with the specified amount subtracted.
<p>
This returns a {@code ZonedDateTime}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
The calculation for date and time units differ.
<p>
Date units operate on the local time-line.
The period is first subtracted from the local date-time, then converted back
to a zoned date-time using the zone ID.
The conversion uses {@link #ofLocal(LocalDateTime, ZoneId, ZoneOffset)}
with the offset before the subtraction.
<p>
Time units operate on the instant time-line.
The period is first subtracted from the local date-time, then converted back to
a zoned date-time using the zone ID.
The conversion uses {@link #ofInstant(LocalDateTime, ZoneOffset, ZoneId)}
with the offset before the subtraction.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return a {@code ZonedDateTime} based on this date-time with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8434690 "minusYears"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "years" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code ZonedDateTime} with the specified number of years subtracted.
<p>
This operates on the local time-line,
{@link LocalDateTime#minusYears(long) subtracting years} to the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param years  the years to subtract, may be negative
@return a {@code ZonedDateTime} based on this date-time with the years subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8434818 "minusMonths"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of months subtracted.
<p>
This operates on the local time-line,
{@link LocalDateTime#minusMonths(long) subtracting months} to the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to subtract, may be negative
@return a {@code ZonedDateTime} based on this date-time with the months subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8434946 "minusWeeks"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "weeks" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of weeks subtracted.
<p>
This operates on the local time-line,
{@link LocalDateTime#minusWeeks(long) subtracting weeks} to the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param weeks  the weeks to subtract, may be negative
@return a {@code ZonedDateTime} based on this date-time with the weeks subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8435074 "minusDays"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "days" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of days subtracted.
<p>
This operates on the local time-line,
{@link LocalDateTime#minusDays(long) subtracting days} to the local date-time.
This is then converted back to a {@code ZonedDateTime}, using the zone ID
to obtain the offset.
<p>
When converting back to {@code ZonedDateTime}, if the local date-time is in an overlap,
then the offset will be retained if possible, otherwise the earlier offset will be used.
If in a gap, the local date-time will be adjusted forward by the length of the gap.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to subtract, may be negative
@return a {@code ZonedDateTime} based on this date-time with the days subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8435202 "minusHours"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code ZonedDateTime} with the specified number of hours subtracted.
<p>
This operates on the instant time-line, such that subtracting one hour will
always be a duration of one hour earlier.
This may cause the local date-time to change by an amount other than one hour.
Note that this is a different approach to that used by days, months and years,
thus subtracting one day is not the same as adding 24 hours.
<p>
For example, consider a time-zone where the spring DST cutover means that the
local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.
<ul>
<li>Subtracting one hour from 02:30+01:00 will result in 01:30+02:00
<li>Subtracting one hour from 01:30+01:00 will result in 01:30+02:00
<li>Subtracting one hour from 01:30+02:00 will result in 00:30+01:00
<li>Subtracting three hours from 02:30+01:00 will result in 00:30+02:00
</ul>
<p>
This instance is immutable and unaffected by this method call.

@param hours  the hours to subtract, may be negative
@return a {@code ZonedDateTime} based on this date-time with the hours subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8435330 "minusMinutes"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of minutes subtracted.
<p>
This operates on the instant time-line, such that subtracting one minute will
always be a duration of one minute earlier.
This may cause the local date-time to change by an amount other than one minute.
Note that this is a different approach to that used by days, months and years.
<p>
This instance is immutable and unaffected by this method call.

@param minutes  the minutes to subtract, may be negative
@return a {@code ZonedDateTime} based on this date-time with the minutes subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8435458 "minusSeconds"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of seconds subtracted.
<p>
This operates on the instant time-line, such that subtracting one second will
always be a duration of one second earlier.
This may cause the local date-time to change by an amount other than one second.
Note that this is a different approach to that used by days, months and years.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to subtract, may be negative
@return a {@code ZonedDateTime} based on this date-time with the seconds subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8435586 "minusNanos"
	public return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code ZonedDateTime} with the specified number of nanoseconds subtracted.
<p>
This operates on the instant time-line, such that subtracting one nano will
always be a duration of one nano earlier.
This may cause the local date-time to change by an amount other than one nano.
Note that this is a different approach to that used by days, months and years.
<p>
This instance is immutable and unaffected by this method call.

@param nanos  the nanos to subtract, may be negative
@return a {@code ZonedDateTime} based on this date-time with the nanoseconds subtracted, not null
@throws DateTimeException if the result exceeds the supported date range
"
      end

      operation 8435714 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this date-time using the specified query.
<p>
This queries this date-time using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8435842 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another date-time in terms of the specified unit.
<p>
This calculates the amount of time between two {@code ZonedDateTime}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified date-time.
The result will be negative if the end is before the start.
For example, the amount in days between two date-times can be calculated
using {@code startDateTime.until(endDateTime, DAYS)}.
<p>
The {@code Temporal} passed to this method is converted to a
{@code ZonedDateTime} using {@link #from(TemporalAccessor)}.
If the time-zone differs between the two zoned date-times, the specified
end date-time is normalized to have the same zone as this date-time.
<p>
The calculation returns a whole number, representing the number of
complete units between the two date-times.
For example, the amount in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z
will only be one month as it is one minute short of two months.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, MONTHS);
  amount = MONTHS.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},
{@code MINUTES}, {@code HOURS} and {@code HALF_DAYS}, {@code DAYS},
{@code WEEKS}, {@code MONTHS}, {@code YEARS}, {@code DECADES},
{@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.
Other {@code ChronoUnit} values will throw an exception.
<p>
The calculation for date and time units differ.
<p>
Date units operate on the local time-line, using the local date-time.
For example, the period from noon on day 1 to noon the following day
in days will always be counted as exactly one day, irrespective of whether
there was a daylight savings change or not.
<p>
Time units operate on the instant time-line.
The calculation effectively converts both zoned date-times to instants
and then calculates the period between the instants.
For example, the period from noon on day 1 to noon the following day
in hours may be 23, 24 or 25 hours (or some other amount) depending on
whether there was a daylight savings change or not.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end date, exclusive, which is converted to a {@code ZonedDateTime}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this date-time and the end date-time
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to a {@code ZonedDateTime}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8435970 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Formats this date-time using the specified formatter.
<p>
This date-time will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted date-time string, not null
@throws DateTimeException if an error occurs during printing

 override for Javadoc and performance"
      end

      operation 8436098 "toOffsetDateTime"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Converts this date-time to an {@code OffsetDateTime}.
<p>
This creates an offset date-time using the local date-time and offset.
The zone ID is ignored.

@return an offset date-time representing the same local date-time and offset, not null
"
      end

      operation 8436226 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this date-time is equal to another date-time.
<p>
The comparison is based on the offset date-time and the zone.
Only objects of type {@code ZonedDateTime} are compared, other types return false.

@param obj  the object to check, null returns false
@return true if this is equal to the other date-time
"
      end

      operation 8436354 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this date-time.

@return a suitable hash code
"
      end

      operation 8436482 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this date-time as a {@code String}, such as
{@code 2007-12-03T10:15:30+01:00[Europe/Paris]}.
<p>
The format consists of the {@code LocalDateTime} followed by the {@code ZoneOffset}.
If the {@code ZoneId} is not the same as the offset, then the ID is output.
The output is compatible with ISO-8601 if the offset and ID are the same.

@return a string representation of this date-time, not null

 override for Javadoc"
      end

      operation 8436610 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(6);  // identifies a ZonedDateTime
 // the <a href=\"../../serialized-form.html#java.time.LocalDateTime\">dateTime</a> excluding the one byte header
 // the <a href=\"../../serialized-form.html#java.time.ZoneOffset\">offset</a> excluding the one byte header
 // the <a href=\"../../serialized-form.html#java.time.ZoneId\">zone ID</a> excluding the one byte header
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8436738 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8436866 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8436994 "readExternal"
	class_operation package return_type class_ref 1052290 // ZonedDateTime
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1053186 "Month"
      visibility public stereotype "enum"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A month-of-year, such as 'July'.
<p>
{@code Month} is an enum representing the 12 months of the year -
January, February, March, April, May, June, July, August, September, October,
November and December.
<p>
In addition to the textual enum name, each month-of-year has an {@code int} value.
The {@code int} value follows normal usage and the ISO-8601 standard,
from 1 (January) to 12 (December). It is recommended that applications use the enum
rather than the {@code int} value to ensure code clarity.
<p>
<b>Do not use {@code ordinal()} to obtain the numeric representation of {@code Month}.
Use {@code getValue()} instead.</b>
<p>
This enum represents a common concept that is found in many calendar systems.
As such, this enum may be used by any calendar system that has the month-of-year
concept defined exactly equivalent to the ISO-8601 calendar system.

@implSpec
This is an immutable and thread-safe enum.

@since 1.8
"
      classrelation 3429250 // <realization>
	relation 3429250 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3429250 // <realization>
	  b parent class_ref 1050754 // TemporalAccessor
      end

      classrelation 3429378 // <realization>
	relation 3429378 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3429378 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      attribute 1945346 "JANUARY"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of January with 31 days.
This has the numeric value of {@code 1}.

"
      end

      attribute 1945474 "FEBRUARY"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of February with 28 days, or 29 in a leap year.
This has the numeric value of {@code 2}.

"
      end

      attribute 1945602 "MARCH"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of March with 31 days.
This has the numeric value of {@code 3}.

"
      end

      attribute 1945730 "APRIL"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of April with 30 days.
This has the numeric value of {@code 4}.

"
      end

      attribute 1945858 "MAY"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of May with 31 days.
This has the numeric value of {@code 5}.

"
      end

      attribute 1945986 "JUNE"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of June with 30 days.
This has the numeric value of {@code 6}.

"
      end

      attribute 1946114 "JULY"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of July with 31 days.
This has the numeric value of {@code 7}.

"
      end

      attribute 1946242 "AUGUST"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of August with 31 days.
This has the numeric value of {@code 8}.

"
      end

      attribute 1946370 "SEPTEMBER"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of September with 30 days.
This has the numeric value of {@code 9}.

"
      end

      attribute 1946498 "OCTOBER"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of October with 31 days.
This has the numeric value of {@code 10}.

"
      end

      attribute 1946626 "NOVEMBER"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of November with 30 days.
This has the numeric value of {@code 11}.

"
      end

      attribute 1946754 "DECEMBER"
	public type class_ref 1053186 // Month
	cpp_decl ""
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The singleton instance for the month of December with 31 days.
This has the numeric value of {@code 12}.
"
      end

      classrelation 3429506 // ENUMS (<unidirectional association>)
	relation 3429506 --->
	  a role_name "ENUMS" multiplicity "[]" init_value " Month.values()" class_relation const_relation private
	    comment "
Private cache of all the constants.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3429506 // ENUMS (<unidirectional association>)
	  b parent class_ref 1053186 // Month
      end

      operation 8375554 "of"
	class_operation public return_type class_ref 1053186 // Month
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Month} from an {@code int} value.
<p>
{@code Month} is an enum representing the 12 months of the year.
This factory allows the enum to be obtained from the {@code int} value.
The {@code int} value follows the ISO-8601 standard, from 1 (January) to 12 (December).

@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@return the month-of-year, not null
@throws DateTimeException if the month-of-year is invalid
"
      end

      operation 8375682 "from"
	class_operation public return_type class_ref 1053186 // Month
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Month} from a temporal object.
<p>
This obtains a month based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code Month}.
<p>
The conversion extracts the {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} field.
The extraction is only permitted if the temporal object has an ISO
chronology, or can be converted to a {@code LocalDate}.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code Month::from}.

@param temporal  the temporal object to convert, not null
@return the month-of-year, not null
@throws DateTimeException if unable to convert to a {@code Month}
"
      end

      operation 8375810 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the month-of-year {@code int} value.
<p>
The values are numbered following the ISO-8601 standard,
from 1 (January) to 12 (December).

@return the month-of-year, from 1 (January) to 12 (December)
"
      end

      operation 8375938 "getDisplayName"
	public return_type class_ref 128130 // String
	nparams 2
	  param inout name "style" type class_ref 1051522 // TextStyle
	  param inout name "locale" type class_ref 312962 // Locale
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the textual representation, such as 'Jan' or 'December'.
<p>
This returns the textual name used to identify the month-of-year,
suitable for presentation to the user.
The parameters control the style of the returned text and the locale.
<p>
If no textual mapping is found then the {@link #getValue() numeric value} is returned.

@param style  the length of the text required, not null
@param locale  the locale to use, not null
@return the text value of the month-of-year, not null
"
      end

      operation 8376066 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this month-of-year can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range} and
{@link #get(TemporalField) get} methods will throw an exception.
<p>
If the field is {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} then
this method returns true.
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this month-of-year, false if not
"
      end

      operation 8376194 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This month is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} then the
range of the month-of-year, from 1 to 12, will be returned.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8376322 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this month-of-year as an {@code int}.
<p>
This queries this month for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} then the
value of the month-of-year, from 1 to 12, will be returned.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field, within the valid range of values
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8376450 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this month-of-year as a {@code long}.
<p>
This queries this month for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} then the
value of the month-of-year, from 1 to 12, will be returned.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8376578 "plus"
	public return_type class_ref 1053186 // Month
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns the month-of-year that is the specified number of quarters after this one.
<p>
The calculation rolls around the end of the year from December to January.
The specified period may be negative.
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to add, positive or negative
@return the resulting month, not null
"
      end

      operation 8376706 "minus"
	public return_type class_ref 1053186 // Month
	nparams 1
	  param in name "months" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the month-of-year that is the specified number of months before this one.
<p>
The calculation rolls around the start of the year from January to December.
The specified period may be negative.
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to subtract, positive or negative
@return the resulting month, not null
"
      end

      operation 8376834 "length"
	public explicit_return_type "int"
	nparams 1
	  param inout name "leapYear" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the length of this month in days.
<p>
This takes a flag to determine whether to return the length for a leap year or not.
<p>
February has 28 days in a standard year and 29 days in a leap year.
April, June, September and November have 30 days.
All other months have 31 days.

@param leapYear  true if the length is required for a leap year
@return the length of this month in days, from 28 to 31
"
      end

      operation 8376962 "minLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minimum length of this month in days.
<p>
February has a minimum length of 28 days.
April, June, September and November have 30 days.
All other months have 31 days.

@return the minimum length of this month in days, from 28 to 31
"
      end

      operation 8377090 "maxLength"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the maximum length of this month in days.
<p>
February has a maximum length of 29 days.
April, June, September and November have 30 days.
All other months have 31 days.

@return the maximum length of this month in days, from 29 to 31
"
      end

      operation 8377218 "firstDayOfYear"
	public explicit_return_type "int"
	nparams 1
	  param inout name "leapYear" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the day-of-year corresponding to the first day of this month.
<p>
This returns the day-of-year that this month begins on, using the leap
year flag to determine the length of February.

@param leapYear  true if the length is required for a leap year
@return the day of year corresponding to the first day of this month, from 1 to 336
"
      end

      operation 8377346 "firstMonthOfQuarter"
	public return_type class_ref 1053186 // Month
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month corresponding to the first month of this quarter.
<p>
The year can be divided into four quarters.
This method returns the first month of the quarter for the base month.
January, February and March return January.
April, May and June return April.
July, August and September return July.
October, November and December return October.

@return the first month of the quarter corresponding to this month, not null
"
      end

      operation 8377474 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this month-of-year using the specified query.
<p>
This queries this month-of-year using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8377602 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have this month-of-year.
<p>
This returns a temporal object of the same observable type as the input
with the month-of-year changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#MONTH_OF_YEAR} as the field.
If the specified temporal object does not use the ISO calendar system then
a {@code DateTimeException} is thrown.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisMonth.adjustInto(temporal);
  temporal = temporal.with(thisMonth);
</pre>
<p>
For example, given a date in May, the following are output:
<pre>
  dateInMay.with(JANUARY);    // four months earlier
  dateInMay.with(APRIL);      // one months earlier
  dateInMay.with(MAY);        // same date
  dateInMay.with(JUNE);       // one month later
  dateInMay.with(DECEMBER);   // seven months later
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end
    end

    class 1053442 "Period"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A date-based amount of time in the ISO-8601 calendar system,
such as '2 years, 3 months and 4 days'.
<p>
This class models a quantity or amount of time in terms of years, months and days.
See {@link Duration} for the time-based equivalent to this class.
<p>
Durations and periods differ in their treatment of daylight savings time
when added to {@link ZonedDateTime}. A {@code Duration} will add an exact
number of seconds, thus a duration of one day is always exactly 24 hours.
By contrast, a {@code Period} will add a conceptual day, trying to maintain
the local time.
<p>
For example, consider adding a period of one day and a duration of one day to
18:00 on the evening before a daylight savings gap. The {@code Period} will add
the conceptual day and result in a {@code ZonedDateTime} at 18:00 the following day.
By contrast, the {@code Duration} will add exactly 24 hours, resulting in a
{@code ZonedDateTime} at 19:00 the following day (assuming a one hour DST gap).
<p>
The supported units of a period are {@link ChronoUnit#YEARS YEARS},
{@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.
All three fields are always present, but may be set to zero.
<p>
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. It is equivalent to the proleptic Gregorian calendar
system, in which today's rules for leap years are applied for all time.
<p>
The period is modeled as a directed amount of time, meaning that individual parts of the
period may be negative.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code Period} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3432450 // <realization>
	relation 3432450 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3432450 // <realization>
	  b parent class_ref 1052802 // ChronoPeriod
      end

      classrelation 3432578 // <realization>
	relation 3432578 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3432578 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3432706 // ZERO (<unidirectional association>)
	relation 3432706 --->
	  a role_name "ZERO" init_value " new Period(0, 0, 0)" class_relation const_relation public
	    comment "
A constant for a period of zero.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3432706 // ZERO (<unidirectional association>)
	  b parent class_ref 1053442 // Period
      end

      attribute 1947522 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3587258372562876L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3432834 // PATTERN (<unidirectional association>)
	relation 3432834 --->
	  a role_name "PATTERN" init_value "
            Pattern.compile(\"([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?\", Pattern.CASE_INSENSITIVE)" class_relation const_relation private
	    comment "
The pattern for parsing.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3432834 // PATTERN (<unidirectional association>)
	  b parent class_ref 417154 // Pattern
      end

      classrelation 3432962 // SUPPORTED_UNITS (<unidirectional association>)
	relation 3432962 --->
	  a role_name "SUPPORTED_UNITS" init_value "
            Collections.unmodifiableList(Arrays.<TemporalUnit>asList(YEARS, MONTHS, DAYS))" class_relation const_relation private
	    comment "
The set of supported units.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<TemporalUnit> ${name}${value};
"
	    classrelation_ref 3432962 // SUPPORTED_UNITS (<unidirectional association>)
	  b parent class_ref 175362 // List
      end

      attribute 1947650 "years"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of years.

"
      end

      attribute 1947778 "months"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of months.

"
      end

      attribute 1947906 "days"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The number of days.

"
      end

      operation 8402946 "ofYears"
	class_operation public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "years" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Period} representing a number of years.
<p>
The resulting period will have the specified years.
The months and days units will be zero.

@param years  the number of years, positive or negative
@return the period of years, not null
"
      end

      operation 8403074 "ofMonths"
	class_operation public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "months" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code Period} representing a number of months.
<p>
The resulting period will have the specified months.
The years and days units will be zero.

@param months  the number of months, positive or negative
@return the period of months, not null
"
      end

      operation 8403202 "ofWeeks"
	class_operation public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "weeks" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code Period} representing a number of weeks.
<p>
The resulting period will be day-based, with the amount of days
equal to the number of weeks multiplied by 7.
The years and months units will be zero.

@param weeks  the number of weeks, positive or negative
@return the period, with the input weeks converted to days, not null
"
      end

      operation 8403330 "ofDays"
	class_operation public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "days" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a {@code Period} representing a number of days.
<p>
The resulting period will have the specified days.
The years and months units will be zero.

@param days  the number of days, positive or negative
@return the period of days, not null
"
      end

      operation 8403458 "of"
	class_operation public return_type class_ref 1053442 // Period
	nparams 3
	  param in name "years" explicit_type "int"
	  param in name "months" explicit_type "int"
	  param in name "days" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Period} representing a number of years, months and days.
<p>
This creates an instance based on years, months and days.

@param years  the amount of years, may be negative
@param months  the amount of months, may be negative
@param days  the amount of days, may be negative
@return the period of years, months and days, not null
"
      end

      operation 8403586 "from"
	class_operation public return_type class_ref 1053442 // Period
	nparams 1
	  param inout name "amount" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Period} from a temporal amount.
<p>
This obtains a period based on the specified amount.
A {@code TemporalAmount} represents an  amount of time, which may be
date-based or time-based, which this factory extracts to a {@code Period}.
<p>
The conversion loops around the set of units from the amount and uses
the {@link ChronoUnit#YEARS YEARS}, {@link ChronoUnit#MONTHS MONTHS}
and {@link ChronoUnit#DAYS DAYS} units to create a period.
If any other units are found then an exception is thrown.
<p>
If the amount is a {@code ChronoPeriod} then it must use the ISO chronology.

@param amount  the temporal amount to convert, not null
@return the equivalent period, not null
@throws DateTimeException if unable to convert to a {@code Period}
@throws ArithmeticException if the amount of years, months or days exceeds an int
"
      end

      operation 8403714 "parse"
	class_operation public return_type class_ref 1053442 // Period
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Period} from a text string such as {@code PnYnMnD}.
<p>
This will parse the string produced by {@code toString()} which is
based on the ISO-8601 period formats {@code PnYnMnD} and {@code PnW}.
<p>
The string starts with an optional sign, denoted by the ASCII negative
or positive symbol. If negative, the whole period is negated.
The ASCII letter \"P\" is next in upper or lower case.
There are then four sections, each consisting of a number and a suffix.
At least one of the four sections must be present.
The sections have suffixes in ASCII of \"Y\", \"M\", \"W\" and \"D\" for
years, months, weeks and days, accepted in upper or lower case.
The suffixes must occur in order.
The number part of each section must consist of ASCII digits.
The number may be prefixed by the ASCII negative or positive symbol.
The number must parse to an {@code int}.
<p>
The leading plus/minus sign, and negative values for other units are
not part of the ISO-8601 standard. In addition, ISO-8601 does not
permit mixing between the {@code PnYnMnD} and {@code PnW} formats.
Any week-based input is multiplied by 7 and treated as a number of days.
<p>
For example, the following are valid inputs:
<pre>
  \"P2Y\"             -- Period.ofYears(2)
  \"P3M\"             -- Period.ofMonths(3)
  \"P4W\"             -- Period.ofWeeks(4)
  \"P5D\"             -- Period.ofDays(5)
  \"P1Y2M3D\"         -- Period.of(1, 2, 3)
  \"P1Y2M3W4D\"       -- Period.of(1, 2, 25)
  \"P-1Y2M\"          -- Period.of(-1, 2, 0)
  \"-P1Y2M\"          -- Period.of(-1, -2, 0)
</pre>

@param text  the text to parse, not null
@return the parsed period, not null
@throws DateTimeParseException if the text cannot be parsed to a period
"
      end

      operation 8403842 "parseNumber"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "str" type class_ref 128130 // String
	  param in name "negate" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8403970 "between"
	class_operation public return_type class_ref 1053442 // Period
	nparams 2
	  param inout name "startDateInclusive" type class_ref 1040770 // LocalDate
	  param inout name "endDateExclusive" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains a {@code Period} consisting of the number of years, months,
and days between two dates.
<p>
The start date is included, but the end date is not.
The period is calculated by removing complete months, then calculating
the remaining number of days, adjusting to ensure that both have the same sign.
The number of months is then split into years and months based on a 12 month year.
A month is considered if the end day-of-month is greater than or equal to the start day-of-month.
For example, from {@code 2010-01-15} to {@code 2011-03-18} is one year, two months and three days.
<p>
The result of this method can be a negative period if the end is before the start.
The negative sign will be the same in each of year, month and day.

@param startDateInclusive  the start date, inclusive, not null
@param endDateExclusive  the end date, exclusive, not null
@return the period between this date and the end date, not null
@see ChronoLocalDate#until(ChronoLocalDate)
"
      end

      operation 8404098 "create"
	class_operation private return_type class_ref 1053442 // Period
	nparams 3
	  param in name "years" explicit_type "int"
	  param in name "months" explicit_type "int"
	  param in name "days" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Creates an instance.

@param years  the amount
@param months  the amount
@param days  the amount
"
      end

      operation 8404226 "Period"
	private explicit_return_type ""
	nparams 3
	  param in name "years" explicit_type "int"
	  param in name "months" explicit_type "int"
	  param in name "days" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param years  the amount
@param months  the amount
@param days  the amount
"
      end

      operation 8404354 "get"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the value of the requested unit.
<p>
This returns a value for each of the three supported units,
{@link ChronoUnit#YEARS YEARS}, {@link ChronoUnit#MONTHS MONTHS} and
{@link ChronoUnit#DAYS DAYS}.
All other units throw an exception.

@param unit the {@code TemporalUnit} for which to return the value
@return the long value of the unit
@throws DateTimeException if the unit is not supported
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8404482 "getUnits"
	public return_type class_ref 175362 // List
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<TemporalUnit> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the set of units supported by this period.
<p>
The supported units are {@link ChronoUnit#YEARS YEARS},
{@link ChronoUnit#MONTHS MONTHS} and {@link ChronoUnit#DAYS DAYS}.
They are returned in the order years, months, days.
<p>
This set can be used in conjunction with {@link #get(TemporalUnit)}
to access the entire state of the period.

@return a list containing the years, months and days units, not null
"
      end

      operation 8404610 "getChronology"
	public return_type class_ref 1053314 // IsoChronology
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the chronology of this period, which is the ISO calendar system.
<p>
The {@code Chronology} represents the calendar system in use.
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. It is equivalent to the proleptic Gregorian calendar
system, in which today's rules for leap years are applied for all time.

@return the ISO chronology, not null
"
      end

      operation 8404738 "isZero"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if all three units of this period are zero.
<p>
A zero period has the value zero for the years, months and days units.

@return true if this period is zero-length
"
      end

      operation 8404866 "isNegative"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if any of the three units of this period are negative.
<p>
This checks whether the years, months or days units are less than zero.

@return true if any unit of this period is negative
"
      end

      operation 8404994 "getYears"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the amount of years of this period.
<p>
This returns the years unit.
<p>
The months unit is not automatically normalized with the years unit.
This means that a period of \"15 months\" is different to a period
of \"1 year and 3 months\".

@return the amount of years of this period, may be negative
"
      end

      operation 8405122 "getMonths"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the amount of months of this period.
<p>
This returns the months unit.
<p>
The months unit is not automatically normalized with the years unit.
This means that a period of \"15 months\" is different to a period
of \"1 year and 3 months\".

@return the amount of months of this period, may be negative
"
      end

      operation 8405250 "getDays"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the amount of days of this period.
<p>
This returns the days unit.

@return the amount of days of this period, may be negative
"
      end

      operation 8405378 "withYears"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "years" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this period with the specified amount of years.
<p>
This sets the amount of the years unit in a copy of this period.
The months and days units are unaffected.
<p>
The months unit is not automatically normalized with the years unit.
This means that a period of \"15 months\" is different to a period
of \"1 year and 3 months\".
<p>
This instance is immutable and unaffected by this method call.

@param years  the years to represent, may be negative
@return a {@code Period} based on this period with the requested years, not null
"
      end

      operation 8405506 "withMonths"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "months" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified amount of months.
<p>
This sets the amount of the months unit in a copy of this period.
The years and days units are unaffected.
<p>
The months unit is not automatically normalized with the years unit.
This means that a period of \"15 months\" is different to a period
of \"1 year and 3 months\".
<p>
This instance is immutable and unaffected by this method call.

@param months  the months to represent, may be negative
@return a {@code Period} based on this period with the requested months, not null
"
      end

      operation 8405634 "withDays"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "days" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified amount of days.
<p>
This sets the amount of the days unit in a copy of this period.
The years and months units are unaffected.
<p>
This instance is immutable and unaffected by this method call.

@param days  the days to represent, may be negative
@return a {@code Period} based on this period with the requested days, not null
"
      end

      operation 8405762 "plus"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this period with the specified period added.
<p>
This operates separately on the years, months and days.
No normalization is performed.
<p>
For example, \"1 year, 6 months and 3 days\" plus \"2 years, 2 months and 2 days\"
returns \"3 years, 8 months and 5 days\".
<p>
The specified amount is typically an instance of {@code Period}.
Other types are interpreted using {@link Period#from(TemporalAmount)}.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return a {@code Period} based on this period with the requested period added, not null
@throws DateTimeException if the specified amount has a non-ISO chronology or
 contains an invalid unit
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8405890 "plusYears"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "yearsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified years added.
<p>
This adds the amount to the years unit in a copy of this period.
The months and days units are unaffected.
For example, \"1 year, 6 months and 3 days\" plus 2 years returns \"3 years, 6 months and 3 days\".
<p>
This instance is immutable and unaffected by this method call.

@param yearsToAdd  the years to add, positive or negative
@return a {@code Period} based on this period with the specified years added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8406018 "plusMonths"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "monthsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified months added.
<p>
This adds the amount to the months unit in a copy of this period.
The years and days units are unaffected.
For example, \"1 year, 6 months and 3 days\" plus 2 months returns \"1 year, 8 months and 3 days\".
<p>
This instance is immutable and unaffected by this method call.

@param monthsToAdd  the months to add, positive or negative
@return a {@code Period} based on this period with the specified months added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8406146 "plusDays"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "daysToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified days added.
<p>
This adds the amount to the days unit in a copy of this period.
The years and months units are unaffected.
For example, \"1 year, 6 months and 3 days\" plus 2 days returns \"1 year, 6 months and 5 days\".
<p>
This instance is immutable and unaffected by this method call.

@param daysToAdd  the days to add, positive or negative
@return a {@code Period} based on this period with the specified days added, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8406274 "minus"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this period with the specified period subtracted.
<p>
This operates separately on the years, months and days.
No normalization is performed.
<p>
For example, \"1 year, 6 months and 3 days\" minus \"2 years, 2 months and 2 days\"
returns \"-1 years, 4 months and 1 day\".
<p>
The specified amount is typically an instance of {@code Period}.
Other types are interpreted using {@link Period#from(TemporalAmount)}.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return a {@code Period} based on this period with the requested period subtracted, not null
@throws DateTimeException if the specified amount has a non-ISO chronology or
 contains an invalid unit
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8406402 "minusYears"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified years subtracted.
<p>
This subtracts the amount from the years unit in a copy of this period.
The months and days units are unaffected.
For example, \"1 year, 6 months and 3 days\" minus 2 years returns \"-1 years, 6 months and 3 days\".
<p>
This instance is immutable and unaffected by this method call.

@param yearsToSubtract  the years to subtract, positive or negative
@return a {@code Period} based on this period with the specified years subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8406530 "minusMonths"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "monthsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified months subtracted.
<p>
This subtracts the amount from the months unit in a copy of this period.
The years and days units are unaffected.
For example, \"1 year, 6 months and 3 days\" minus 2 months returns \"1 year, 4 months and 3 days\".
<p>
This instance is immutable and unaffected by this method call.

@param monthsToSubtract  the years to subtract, positive or negative
@return a {@code Period} based on this period with the specified months subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8406658 "minusDays"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "daysToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this period with the specified days subtracted.
<p>
This subtracts the amount from the days unit in a copy of this period.
The years and months units are unaffected.
For example, \"1 year, 6 months and 3 days\" minus 2 days returns \"1 year, 6 months and 1 day\".
<p>
This instance is immutable and unaffected by this method call.

@param daysToSubtract  the months to subtract, positive or negative
@return a {@code Period} based on this period with the specified days subtracted, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8406786 "multipliedBy"
	public return_type class_ref 1053442 // Period
	nparams 1
	  param in name "scalar" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a new instance with each element in this period multiplied
by the specified scalar.
<p>
This returns a period with each of the years, months and days units
individually multiplied.
For example, a period of \"2 years, -3 months and 4 days\" multiplied by
3 will return \"6 years, -9 months and 12 days\".
No normalization is performed.

@param scalar  the scalar to multiply by, not null
@return a {@code Period} based on this period with the amounts multiplied by the scalar, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8406914 "negated"
	public return_type class_ref 1053442 // Period
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new instance with each amount in this period negated.
<p>
This returns a period with each of the years, months and days units
individually negated.
For example, a period of \"2 years, -3 months and 4 days\" will be
negated to \"-2 years, 3 months and -4 days\".
No normalization is performed.

@return a {@code Period} based on this period with the amounts negated, not null
@throws ArithmeticException if numeric overflow occurs, which only happens if
 one of the units has the value {@code Long.MIN_VALUE}
"
      end

      operation 8407042 "normalized"
	public return_type class_ref 1053442 // Period
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this period with the years and months normalized.
<p>
This normalizes the years and months units, leaving the days unit unchanged.
The months unit is adjusted to have an absolute value less than 11,
with the years unit being adjusted to compensate. For example, a period of
\"1 Year and 15 months\" will be normalized to \"2 years and 3 months\".
<p>
The sign of the years and months units will be the same after normalization.
For example, a period of \"1 year and -25 months\" will be normalized to
\"-1 year and -1 month\".
<p>
This instance is immutable and unaffected by this method call.

@return a {@code Period} based on this period with excess months normalized to years, not null
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8407170 "toTotalMonths"
	public explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the total number of months in this period.
<p>
This returns the total number of months in the period by multiplying the
number of years by 12 and adding the number of months.
<p>
This instance is immutable and unaffected by this method call.

@return the total number of months in the period, may be negative
"
      end

      operation 8407298 "addTo"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------------

Adds this period to the specified temporal object.
<p>
This returns a temporal object of the same observable type as the input
with this period added.
If the temporal has a chronology, it must be the ISO chronology.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#plus(TemporalAmount)}.
<pre>
  // these two lines are equivalent, but the second approach is recommended
  dateTime = thisPeriod.addTo(dateTime);
  dateTime = dateTime.plus(thisPeriod);
</pre>
<p>
The calculation operates as follows.
First, the chronology of the temporal is checked to ensure it is ISO chronology or null.
Second, if the months are zero, the years are added if non-zero, otherwise
the combination of years and months is added if non-zero.
Finally, any days are added.
<p>
This approach ensures that a partial period can be added to a partial date.
For example, a period of years and/or months can be added to a {@code YearMonth},
but a period including days cannot.
The approach also adds years and months together when necessary, which ensures
correct behaviour at the end of the month.
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the temporal object to adjust, not null
@return an object of the same type with the adjustment made, not null
@throws DateTimeException if unable to add
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8407426 "subtractFrom"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Subtracts this period from the specified temporal object.
<p>
This returns a temporal object of the same observable type as the input
with this period subtracted.
If the temporal has a chronology, it must be the ISO chronology.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#minus(TemporalAmount)}.
<pre>
  // these two lines are equivalent, but the second approach is recommended
  dateTime = thisPeriod.subtractFrom(dateTime);
  dateTime = dateTime.minus(thisPeriod);
</pre>
<p>
The calculation operates as follows.
First, the chronology of the temporal is checked to ensure it is ISO chronology or null.
Second, if the months are zero, the years are subtracted if non-zero, otherwise
the combination of years and months is subtracted if non-zero.
Finally, any days are subtracted.
<p>
This approach ensures that a partial period can be subtracted from a partial date.
For example, a period of years and/or months can be subtracted from a {@code YearMonth},
but a period including days cannot.
The approach also subtracts years and months together when necessary, which ensures
correct behaviour at the end of the month.
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the temporal object to adjust, not null
@return an object of the same type with the adjustment made, not null
@throws DateTimeException if unable to subtract
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8407554 "validateChrono"
	private explicit_return_type "void"
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates that the temporal has the correct chronology.
"
      end

      operation 8407682 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this period is equal to another period.
<p>
The comparison is based on the type {@code Period} and each of the three amounts.
To be equal, the years, months and days units must be individually equal.
Note that this means that a period of \"15 Months\" is not equal to a period
of \"1 Year and 3 Months\".

@param obj  the object to check, null returns false
@return true if this is equal to the other period
"
      end

      operation 8407810 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this period.

@return a suitable hash code
"
      end

      operation 8407938 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this period as a {@code String}, such as {@code P6Y3M1D}.
<p>
The output will be in the ISO-8601 period format.
A zero period will be represented as zero days, 'P0D'.

@return a string representation of this period, not null
"
      end

      operation 8408066 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(14);  // identifies a Period
 out.writeInt(years);
 out.writeInt(months);
 out.writeInt(days);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8408194 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws java.io.InvalidObjectException always
"
      end

      operation 8408322 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8408450 "readExternal"
	class_operation package return_type class_ref 1053442 // Period
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1053570 "OffsetTime"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A time with an offset from UTC/Greenwich in the ISO-8601 calendar system,
such as {@code 10:15:30+01:00}.
<p>
{@code OffsetTime} is an immutable date-time object that represents a time, often
viewed as hour-minute-second-offset.
This class stores all time fields, to a precision of nanoseconds,
as well as a zone offset.
For example, the value \"13:45.30.123456789+02:00\" can be stored
in an {@code OffsetTime}.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code OffsetTime} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3431298 // <realization>
	relation 3431298 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3431298 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3431426 // <realization>
	relation 3431426 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3431426 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3431554 // <realization>
	relation 3431554 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3431554 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3431682 // <realization>
	relation 3431682 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3431682 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      classrelation 3431810 // MIN (<unidirectional association>)
	relation 3431810 --->
	  a role_name "MIN" init_value " LocalTime.MIN.atOffset(ZoneOffset.MAX)" class_relation const_relation public
	    comment "
The minimum supported {@code OffsetTime}, '00:00:00+18:00'.
This is the time of midnight at the start of the day in the maximum offset
(larger offsets are earlier on the time-line).
This combines {@link LocalTime#MIN} and {@link ZoneOffset#MAX}.
This could be used by an application as a \"far past\" date.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3431810 // MIN (<unidirectional association>)
	  b parent class_ref 1053570 // OffsetTime
      end

      classrelation 3431938 // MAX (<unidirectional association>)
	relation 3431938 --->
	  a role_name "MAX" init_value " LocalTime.MAX.atOffset(ZoneOffset.MIN)" class_relation const_relation public
	    comment "
The maximum supported {@code OffsetTime}, '23:59:59.999999999-18:00'.
This is the time just before midnight at the end of the day in the minimum offset
(larger negative offsets are later on the time-line).
This combines {@link LocalTime#MAX} and {@link ZoneOffset#MIN}.
This could be used by an application as a \"far future\" date.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3431938 // MAX (<unidirectional association>)
	  b parent class_ref 1053570 // OffsetTime
      end

      attribute 1947394 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7264499704384272492L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3432066 // time (<unidirectional association>)
	relation 3432066 --->
	  a role_name "time" const_relation private
	    comment "
The local date-time.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3432066 // time (<unidirectional association>)
	  b parent class_ref 1043842 // LocalTime
      end

      classrelation 3432194 // offset (<unidirectional association>)
	relation 3432194 --->
	  a role_name "offset" const_relation private
	    comment "
The offset from UTC/Greenwich.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3432194 // offset (<unidirectional association>)
	  b parent class_ref 1052162 // ZoneOffset
      end

      operation 8393218 "now"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current time from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current time.
The offset will be calculated from the time-zone in the clock.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current time using the system clock and default time-zone, not null
"
      end

      operation 8393346 "now"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current time from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current time.
Specifying the time-zone avoids dependence on the default time-zone.
The offset will be calculated from the specified time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current time using the system clock, not null
"
      end

      operation 8393474 "now"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current time from the specified clock.
<p>
This will query the specified clock to obtain the current time.
The offset will be calculated from the time-zone in the clock.
<p>
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current time, not null
"
      end

      operation 8393602 "of"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 2
	  param inout name "time" type class_ref 1043842 // LocalTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code OffsetTime} from a local time and an offset.

@param time  the local time, not null
@param offset  the zone offset, not null
@return the offset time, not null
"
      end

      operation 8393730 "of"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 5
	  param in name "hour" explicit_type "int"
	  param in name "minute" explicit_type "int"
	  param in name "second" explicit_type "int"
	  param in name "nanoOfSecond" explicit_type "int"
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code OffsetTime} from an hour, minute, second and nanosecond.
<p>
This creates an offset time with the four specified fields.
<p>
This method exists primarily for writing test cases.
Non test-code will typically use other methods to create an offset time.
{@code LocalTime} has two additional convenience variants of the
equivalent factory method taking fewer arguments.
They are not provided here to reduce the footprint of the API.

@param hour  the hour-of-day to represent, from 0 to 23
@param minute  the minute-of-hour to represent, from 0 to 59
@param second  the second-of-minute to represent, from 0 to 59
@param nanoOfSecond  the nano-of-second to represent, from 0 to 999,999,999
@param offset  the zone offset, not null
@return the offset time, not null
@throws DateTimeException if the value of any field is out of range
"
      end

      operation 8393858 "ofInstant"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 2
	  param inout name "instant" type class_ref 1003778 // Instant
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code OffsetTime} from an {@code Instant} and zone ID.
<p>
This creates an offset time with the same instant as that specified.
Finding the offset from UTC/Greenwich is simple as there is only one valid
offset for each instant.
<p>
The date component of the instant is dropped during the conversion.
This means that the conversion can never fail due to the instant being
out of the valid range of dates.

@param instant  the instant to create the time from, not null
@param zone  the time-zone, which may be an offset, not null
@return the offset time, not null
"
      end

      operation 8393986 "from"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code OffsetTime} from a temporal object.
<p>
This obtains an offset time based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code OffsetTime}.
<p>
The conversion extracts and combines the {@code ZoneOffset} and the
{@code LocalTime} from the temporal object.
Implementations are permitted to perform optimizations such as accessing
those fields that are equivalent to the relevant objects.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code OffsetTime::from}.

@param temporal  the temporal object to convert, not null
@return the offset time, not null
@throws DateTimeException if unable to convert to an {@code OffsetTime}
"
      end

      operation 8394114 "parse"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code OffsetTime} from a text string such as {@code 10:15:30+01:00}.
<p>
The string must represent a valid time and is parsed using
{@link java.time.format.DateTimeFormatter#ISO_OFFSET_TIME}.

@param text  the text to parse such as \"10:15:30+01:00\", not null
@return the parsed local time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8394242 "parse"
	class_operation public return_type class_ref 1053570 // OffsetTime
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code OffsetTime} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a time.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed offset time, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8394370 "OffsetTime"
	private explicit_return_type ""
	nparams 2
	  param inout name "time" type class_ref 1043842 // LocalTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param time  the local time, not null
@param offset  the zone offset, not null
"
      end

      operation 8394498 "with"
	private return_type class_ref 1053570 // OffsetTime
	nparams 2
	  param inout name "time" type class_ref 1043842 // LocalTime
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new time based on this one, returning {@code this} where possible.

@param time  the time to create with, not null
@param offset  the zone offset to create with, not null
"
      end

      operation 8394626 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this time can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code NANO_OF_SECOND}
<li>{@code NANO_OF_DAY}
<li>{@code MICRO_OF_SECOND}
<li>{@code MICRO_OF_DAY}
<li>{@code MILLI_OF_SECOND}
<li>{@code MILLI_OF_DAY}
<li>{@code SECOND_OF_MINUTE}
<li>{@code SECOND_OF_DAY}
<li>{@code MINUTE_OF_HOUR}
<li>{@code MINUTE_OF_DAY}
<li>{@code HOUR_OF_AMPM}
<li>{@code CLOCK_HOUR_OF_AMPM}
<li>{@code HOUR_OF_DAY}
<li>{@code CLOCK_HOUR_OF_DAY}
<li>{@code AMPM_OF_DAY}
<li>{@code OFFSET_SECONDS}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this time, false if not
"
      end

      operation 8394754 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this offset-time.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code NANOS}
<li>{@code MICROS}
<li>{@code MILLIS}
<li>{@code SECONDS}
<li>{@code MINUTES}
<li>{@code HOURS}
<li>{@code HALF_DAYS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not

 override for Javadoc"
      end

      operation 8394882 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This time is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8395010 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this time as an {@code int}.
<p>
This queries this time for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this time, except {@code NANO_OF_DAY} and {@code MICRO_OF_DAY}
which are too large to fit in an {@code int} and throw a {@code DateTimeException}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc"
      end

      operation 8395138 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this time as a {@code long}.
<p>
This queries this time for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this time.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8395266 "getOffset"
	public return_type class_ref 1052162 // ZoneOffset
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the zone offset, such as '+01:00'.
<p>
This is the offset of the local time from UTC/Greenwich.

@return the zone offset, not null
"
      end

      operation 8395394 "withOffsetSameLocal"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the specified offset ensuring
that the result has the same local time.
<p>
This method returns an object with the same {@code LocalTime} and the specified {@code ZoneOffset}.
No calculation is needed or performed.
For example, if this time represents {@code 10:30+02:00} and the offset specified is
{@code +03:00}, then this method will return {@code 10:30+03:00}.
<p>
To take into account the difference between the offsets, and adjust the time fields,
use {@link #withOffsetSameInstant}.
<p>
This instance is immutable and unaffected by this method call.

@param offset  the zone offset to change to, not null
@return an {@code OffsetTime} based on this time with the requested offset, not null
"
      end

      operation 8395522 "withOffsetSameInstant"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "offset" type class_ref 1052162 // ZoneOffset
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the specified offset ensuring
that the result is at the same instant on an implied day.
<p>
This method returns an object with the specified {@code ZoneOffset} and a {@code LocalTime}
adjusted by the difference between the two offsets.
This will result in the old and new objects representing the same instant on an implied day.
This is useful for finding the local time in a different offset.
For example, if this time represents {@code 10:30+02:00} and the offset specified is
{@code +03:00}, then this method will return {@code 11:30+03:00}.
<p>
To change the offset without adjusting the local time use {@link #withOffsetSameLocal}.
<p>
This instance is immutable and unaffected by this method call.

@param offset  the zone offset to change to, not null
@return an {@code OffsetTime} based on this time with the requested offset, not null
"
      end

      operation 8395650 "toLocalTime"
	public return_type class_ref 1043842 // LocalTime
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the {@code LocalTime} part of this date-time.
<p>
This returns a {@code LocalTime} with the same hour, minute, second and
nanosecond as this date-time.

@return the time part of this date-time, not null
"
      end

      operation 8395778 "getHour"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the hour-of-day field.

@return the hour-of-day, from 0 to 23
"
      end

      operation 8395906 "getMinute"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the minute-of-hour field.

@return the minute-of-hour, from 0 to 59
"
      end

      operation 8396034 "getSecond"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the second-of-minute field.

@return the second-of-minute, from 0 to 59
"
      end

      operation 8396162 "getNano"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the nano-of-second field.

@return the nano-of-second, from 0 to 999,999,999
"
      end

      operation 8396290 "with"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an adjusted copy of this time.
<p>
This returns an {@code OffsetTime}, based on this one, with the time adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
A simple adjuster might simply set the one of the fields, such as the hour field.
A more complex adjuster might set the time to the last hour of the day.
<p>
The classes {@link LocalTime} and {@link ZoneOffset} implement {@code TemporalAdjuster},
thus this method can be used to change the time or offset:
<pre>
 result = offsetTime.with(time);
 result = offsetTime.with(offset);
</pre>
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return an {@code OffsetTime} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8396418 "with"
	public return_type class_ref 1053570 // OffsetTime
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this time with the specified field set to a new value.
<p>
This returns an {@code OffsetTime}, based on this one, with the value
for the specified field changed.
This can be used to change any supported field, such as the hour, minute or second.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
<p>
The {@code OFFSET_SECONDS} field will return a time with the specified offset.
The local time is unaltered. If the new offset value is outside the valid range
then a {@code DateTimeException} will be thrown.
<p>
The other {@link #isSupported(TemporalField) supported fields} will behave as per
the matching method on {@link LocalTime#with(TemporalField, long)} LocalTime}.
In this case, the offset is not part of the calculation and will be unchanged.
<p>
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return an {@code OffsetTime} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8396546 "withHour"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "hour" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetTime} with the hour-of-day altered.
<p>
The offset does not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param hour  the hour-of-day to set in the result, from 0 to 23
@return an {@code OffsetTime} based on this time with the requested hour, not null
@throws DateTimeException if the hour value is invalid
"
      end

      operation 8396674 "withMinute"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "minute" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the minute-of-hour altered.
<p>
The offset does not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param minute  the minute-of-hour to set in the result, from 0 to 59
@return an {@code OffsetTime} based on this time with the requested minute, not null
@throws DateTimeException if the minute value is invalid
"
      end

      operation 8396802 "withSecond"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "second" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the second-of-minute altered.
<p>
The offset does not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param second  the second-of-minute to set in the result, from 0 to 59
@return an {@code OffsetTime} based on this time with the requested second, not null
@throws DateTimeException if the second value is invalid
"
      end

      operation 8396930 "withNano"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "nanoOfSecond" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the nano-of-second altered.
<p>
The offset does not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param nanoOfSecond  the nano-of-second to set in the result, from 0 to 999,999,999
@return an {@code OffsetTime} based on this time with the requested nanosecond, not null
@throws DateTimeException if the nanos value is invalid
"
      end

      operation 8397058 "truncatedTo"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetTime} with the time truncated.
<p>
Truncation returns a copy of the original time with fields
smaller than the specified unit set to zero.
For example, truncating with the {@link ChronoUnit#MINUTES minutes} unit
will set the second-of-minute and nano-of-second field to zero.
<p>
The unit must have a {@linkplain TemporalUnit#getDuration() duration}
that divides into the length of a standard day without remainder.
This includes all supplied time units on {@link ChronoUnit} and
{@link ChronoUnit#DAYS DAYS}. Other units throw an exception.
<p>
The offset does not affect the calculation and will be the same in the result.
<p>
This instance is immutable and unaffected by this method call.

@param unit  the unit to truncate to, not null
@return an {@code OffsetTime} based on this time with the time truncated, not null
@throws DateTimeException if unable to truncate
@throws UnsupportedTemporalTypeException if the unit is not supported
"
      end

      operation 8397186 "plus"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this time with the specified amount added.
<p>
This returns an {@code OffsetTime}, based on this one, with the specified amount added.
The amount is typically {@link Duration} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return an {@code OffsetTime} based on this time with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8397314 "plus"
	public return_type class_ref 1053570 // OffsetTime
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this time with the specified amount added.
<p>
This returns an {@code OffsetTime}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented by
{@link LocalTime#plus(long, TemporalUnit)}.
The offset is not part of the calculation and will be unchanged in the result.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return an {@code OffsetTime} based on this time with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8397442 "plusHours"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetTime} with the specified number of hours added.
<p>
This adds the specified number of hours to this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param hours  the hours to add, may be negative
@return an {@code OffsetTime} based on this time with the hours added, not null
"
      end

      operation 8397570 "plusMinutes"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the specified number of minutes added.
<p>
This adds the specified number of minutes to this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param minutes  the minutes to add, may be negative
@return an {@code OffsetTime} based on this time with the minutes added, not null
"
      end

      operation 8397698 "plusSeconds"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the specified number of seconds added.
<p>
This adds the specified number of seconds to this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to add, may be negative
@return an {@code OffsetTime} based on this time with the seconds added, not null
"
      end

      operation 8397826 "plusNanos"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds added.
<p>
This adds the specified number of nanoseconds to this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param nanos  the nanos to add, may be negative
@return an {@code OffsetTime} based on this time with the nanoseconds added, not null
"
      end

      operation 8397954 "minus"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this time with the specified amount subtracted.
<p>
This returns an {@code OffsetTime}, based on this one, with the specified amount subtracted.
The amount is typically {@link Duration} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return an {@code OffsetTime} based on this time with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8398082 "minus"
	public return_type class_ref 1053570 // OffsetTime
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this time with the specified amount subtracted.
<p>
This returns an {@code OffsetTime}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return an {@code OffsetTime} based on this time with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8398210 "minusHours"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "hours" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code OffsetTime} with the specified number of hours subtracted.
<p>
This subtracts the specified number of hours from this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param hours  the hours to subtract, may be negative
@return an {@code OffsetTime} based on this time with the hours subtracted, not null
"
      end

      operation 8398338 "minusMinutes"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "minutes" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the specified number of minutes subtracted.
<p>
This subtracts the specified number of minutes from this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param minutes  the minutes to subtract, may be negative
@return an {@code OffsetTime} based on this time with the minutes subtracted, not null
"
      end

      operation 8398466 "minusSeconds"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "seconds" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the specified number of seconds subtracted.
<p>
This subtracts the specified number of seconds from this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param seconds  the seconds to subtract, may be negative
@return an {@code OffsetTime} based on this time with the seconds subtracted, not null
"
      end

      operation 8398594 "minusNanos"
	public return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param in name "nanos" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code OffsetTime} with the specified number of nanoseconds subtracted.
<p>
This subtracts the specified number of nanoseconds from this time, returning a new time.
The calculation wraps around midnight.
<p>
This instance is immutable and unaffected by this method call.

@param nanos  the nanos to subtract, may be negative
@return an {@code OffsetTime} based on this time with the nanoseconds subtracted, not null
"
      end

      operation 8398722 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this time using the specified query.
<p>
This queries this time using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8398850 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have the same offset and time
as this object.
<p>
This returns a temporal object of the same observable type as the input
with the offset and time changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
twice, passing {@link ChronoField#NANO_OF_DAY} and
{@link ChronoField#OFFSET_SECONDS} as the fields.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisOffsetTime.adjustInto(temporal);
  temporal = temporal.with(thisOffsetTime);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8398978 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another time in terms of the specified unit.
<p>
This calculates the amount of time between two {@code OffsetTime}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified time.
The result will be negative if the end is before the start.
For example, the amount in hours between two times can be calculated
using {@code startTime.until(endTime, HOURS)}.
<p>
The {@code Temporal} passed to this method is converted to a
{@code OffsetTime} using {@link #from(TemporalAccessor)}.
If the offset differs between the two times, then the specified
end time is normalized to have the same offset as this time.
<p>
The calculation returns a whole number, representing the number of
complete units between the two times.
For example, the amount in hours between 11:30Z and 13:29Z will only
be one hour as it is one minute short of two hours.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, MINUTES);
  amount = MINUTES.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code NANOS}, {@code MICROS}, {@code MILLIS}, {@code SECONDS},
{@code MINUTES}, {@code HOURS} and {@code HALF_DAYS} are supported.
Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end time, exclusive, which is converted to an {@code OffsetTime}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this time and the end time
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to an {@code OffsetTime}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8399106 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this time using the specified formatter.
<p>
This time will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted time string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8399234 "atDate"
	public return_type class_ref 1052034 // OffsetDateTime
	nparams 1
	  param inout name "date" type class_ref 1040770 // LocalDate
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this time with a date to create an {@code OffsetDateTime}.
<p>
This returns an {@code OffsetDateTime} formed from this time and the specified date.
All possible combinations of date and time are valid.

@param date  the date to combine with, not null
@return the offset date-time formed from this time and the specified date, not null
"
      end

      operation 8399362 "toEpochNano"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Converts this time to epoch nanos based on 1970-01-01Z.

@return the epoch nanos value
"
      end

      operation 8399490 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1053570 // OffsetTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this {@code OffsetTime} to another time.
<p>
The comparison is based first on the UTC equivalent instant, then on the local time.
It is \"consistent with equals\", as defined by {@link Comparable}.
<p>
For example, the following is the comparator order:
<ol>
<li>{@code 10:30+01:00}</li>
<li>{@code 11:00+01:00}</li>
<li>{@code 12:00+02:00}</li>
<li>{@code 11:30+01:00}</li>
<li>{@code 12:00+01:00}</li>
<li>{@code 12:30+01:00}</li>
</ol>
Values #2 and #3 represent the same instant on the time-line.
When two values represent the same instant, the local time is compared
to distinguish them. This step is needed to make the ordering
consistent with {@code equals()}.
<p>
To compare the underlying local time of two {@code TemporalAccessor} instances,
use {@link ChronoField#NANO_OF_DAY} as a comparator.

@param other  the other time to compare to, not null
@return the comparator value, negative if less, positive if greater
@throws NullPointerException if {@code other} is null
"
      end

      operation 8399618 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053570 // OffsetTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the instant of this {@code OffsetTime} is after that of the
specified time applying both times to a common date.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the instant of the time. This is equivalent to converting both
times to an instant using the same date and comparing the instants.

@param other  the other time to compare to, not null
@return true if this is after the instant of the specified time
"
      end

      operation 8399746 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053570 // OffsetTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the instant of this {@code OffsetTime} is before that of the
specified time applying both times to a common date.
<p>
This method differs from the comparison in {@link #compareTo} in that it
only compares the instant of the time. This is equivalent to converting both
times to an instant using the same date and comparing the instants.

@param other  the other time to compare to, not null
@return true if this is before the instant of the specified time
"
      end

      operation 8399874 "isEqual"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053570 // OffsetTime
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the instant of this {@code OffsetTime} is equal to that of the
specified time applying both times to a common date.
<p>
This method differs from the comparison in {@link #compareTo} and {@link #equals}
in that it only compares the instant of the time. This is equivalent to converting both
times to an instant using the same date and comparing the instants.

@param other  the other time to compare to, not null
@return true if this is equal to the instant of the specified time
"
      end

      operation 8400002 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this time is equal to another time.
<p>
The comparison is based on the local-time and the offset.
To compare for the same instant on the time-line, use {@link #isEqual(OffsetTime)}.
<p>
Only objects of type {@code OffsetTime} are compared, other types return false.
To compare the underlying local time of two {@code TemporalAccessor} instances,
use {@link ChronoField#NANO_OF_DAY} as a comparator.

@param obj  the object to check, null returns false
@return true if this is equal to the other time
"
      end

      operation 8400130 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this time.

@return a suitable hash code
"
      end

      operation 8400258 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this time as a {@code String}, such as {@code 10:15:30+01:00}.
<p>
The output will be one of the following ISO-8601 formats:
<ul>
<li>{@code HH:mmXXXXX}</li>
<li>{@code HH:mm:ssXXXXX}</li>
<li>{@code HH:mm:ss.SSSXXXXX}</li>
<li>{@code HH:mm:ss.SSSSSSXXXXX}</li>
<li>{@code HH:mm:ss.SSSSSSSSSXXXXX}</li>
</ul>
The format used will be the shortest that outputs the full value of
the time where the omitted parts are implied to be zero.

@return a string representation of this time, not null
"
      end

      operation 8400386 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(9);  // identifies an OffsetTime
 // the <a href=\"../../serialized-form.html#java.time.LocalTime\">time</a> excluding the one byte header
 // the <a href=\"../../serialized-form.html#java.time.ZoneOffset\">offset</a> excluding the one byte header
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8400514 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8400642 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8400770 "readExternal"
	class_operation package return_type class_ref 1053570 // OffsetTime
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1053826 "MonthDay"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A month-day in the ISO-8601 calendar system, such as {@code --12-03}.
<p>
{@code MonthDay} is an immutable date-time object that represents the combination
of a month and day-of-month. Any field that can be derived from a month and day,
such as quarter-of-year, can be obtained.
<p>
This class does not store or represent a year, time or time-zone.
For example, the value \"December 3rd\" can be stored in a {@code MonthDay}.
<p>
Since a {@code MonthDay} does not possess a year, the leap day of
February 29th is considered valid.
<p>
This class implements {@link TemporalAccessor} rather than {@link Temporal}.
This is because it is not possible to define whether February 29th is valid or not
without external information, preventing the implementation of plus/minus.
Related to this, {@code MonthDay} only provides access to query and set the fields
{@code MONTH_OF_YEAR} and {@code DAY_OF_MONTH}.
<p>
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. It is equivalent to the proleptic Gregorian calendar
system, in which today's rules for leap years are applied for all time.
For most applications written today, the ISO-8601 rules are entirely suitable.
However, any application that makes use of historical dates, and requires them
to be accurate will find the ISO-8601 approach unsuitable.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code MonthDay} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3429634 // <realization>
	relation 3429634 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3429634 // <realization>
	  b parent class_ref 1050754 // TemporalAccessor
      end

      classrelation 3429762 // <realization>
	relation 3429762 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3429762 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3429890 // <realization>
	relation 3429890 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3429890 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3430018 // <realization>
	relation 3430018 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3430018 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1946882 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -939150713474957432L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3430146 // PARSER (<unidirectional association>)
	relation 3430146 --->
	  a role_name "PARSER" init_value " new DateTimeFormatterBuilder()
        .appendLiteral(\"--\")
        .appendValue(MONTH_OF_YEAR, 2)
        .appendLiteral('-')
        .appendValue(DAY_OF_MONTH, 2)
        .toFormatter()" class_relation const_relation private
	    comment "
Parser.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3430146 // PARSER (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      attribute 1947010 "month"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The month-of-year, not null.

"
      end

      attribute 1947138 "day"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The day-of-month.

"
      end

      operation 8377730 "now"
	class_operation public return_type class_ref 1053826 // MonthDay
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current month-day from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current month-day.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current month-day using the system clock and default time-zone, not null
"
      end

      operation 8377858 "now"
	class_operation public return_type class_ref 1053826 // MonthDay
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current month-day from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current month-day.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current month-day using the system clock, not null
"
      end

      operation 8377986 "now"
	class_operation public return_type class_ref 1053826 // MonthDay
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current month-day from the specified clock.
<p>
This will query the specified clock to obtain the current month-day.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current month-day, not null
"
      end

      operation 8378114 "of"
	class_operation public return_type class_ref 1053826 // MonthDay
	nparams 2
	  param inout name "month" type class_ref 1053186 // Month
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code MonthDay}.
<p>
The day-of-month must be valid for the month within a leap year.
Hence, for February, day 29 is valid.
<p>
For example, passing in April and day 31 will throw an exception, as
there can never be April 31st in any year. By contrast, passing in
February 29th is permitted, as that month-day can sometimes be valid.

@param month  the month-of-year to represent, not null
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@return the month-day, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month
"
      end

      operation 8378242 "of"
	class_operation public return_type class_ref 1053826 // MonthDay
	nparams 2
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code MonthDay}.
<p>
The day-of-month must be valid for the month within a leap year.
Hence, for month 2 (February), day 29 is valid.
<p>
For example, passing in month 4 (April) and day 31 will throw an exception, as
there can never be April 31st in any year. By contrast, passing in
February 29th is permitted, as that month-day can sometimes be valid.

@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@param dayOfMonth  the day-of-month to represent, from 1 to 31
@return the month-day, not null
@throws DateTimeException if the value of any field is out of range,
 or if the day-of-month is invalid for the month
"
      end

      operation 8378370 "from"
	class_operation public return_type class_ref 1053826 // MonthDay
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code MonthDay} from a temporal object.
<p>
This obtains a month-day based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code MonthDay}.
<p>
The conversion extracts the {@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} and
{@link ChronoField#DAY_OF_MONTH DAY_OF_MONTH} fields.
The extraction is only permitted if the temporal object has an ISO
chronology, or can be converted to a {@code LocalDate}.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code MonthDay::from}.

@param temporal  the temporal object to convert, not null
@return the month-day, not null
@throws DateTimeException if unable to convert to a {@code MonthDay}
"
      end

      operation 8378498 "parse"
	class_operation public return_type class_ref 1053826 // MonthDay
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code MonthDay} from a text string such as {@code --12-03}.
<p>
The string must represent a valid month-day.
The format is {@code --MM-dd}.

@param text  the text to parse such as \"--12-03\", not null
@return the parsed month-day, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8378626 "parse"
	class_operation public return_type class_ref 1053826 // MonthDay
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code MonthDay} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a month-day.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed month-day, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8378754 "MonthDay"
	private explicit_return_type ""
	nparams 2
	  param in name "month" explicit_type "int"
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor, previously validated.

@param month  the month-of-year to represent, validated from 1 to 12
@param dayOfMonth  the day-of-month to represent, validated from 1 to 29-31
"
      end

      operation 8378882 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this month-day can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range} and
{@link #get(TemporalField) get} methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code MONTH_OF_YEAR}
<li>{@code YEAR}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this month-day, false if not
"
      end

      operation 8379010 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This month-day is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8379138 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this month-day as an {@code int}.
<p>
This queries this month-day for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this month-day.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc"
      end

      operation 8379266 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this month-day as a {@code long}.
<p>
This queries this month-day for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this month-day.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8379394 "getMonthValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the month-of-year field from 1 to 12.
<p>
This method returns the month as an {@code int} from 1 to 12.
Application code is frequently clearer if the enum {@link Month}
is used by calling {@link #getMonth()}.

@return the month-of-year, from 1 to 12
@see #getMonth()
"
      end

      operation 8379522 "getMonth"
	public return_type class_ref 1053186 // Month
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field using the {@code Month} enum.
<p>
This method returns the enum {@link Month} for the month.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link Month#getValue() int value}.

@return the month-of-year, not null
@see #getMonthValue()
"
      end

      operation 8379650 "getDayOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the day-of-month field.
<p>
This method returns the primitive {@code int} value for the day-of-month.

@return the day-of-month, from 1 to 31
"
      end

      operation 8379778 "isValidYear"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the year is valid for this month-day.
<p>
This method checks whether this month and day and the input year form
a valid date. This can only return false for February 29th.

@param year  the year to validate
@return true if the year is valid for this month-day
@see Year#isValidMonthDay(MonthDay)
"
      end

      operation 8379906 "withMonth"
	public return_type class_ref 1053826 // MonthDay
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code MonthDay} with the month-of-year altered.
<p>
This returns a month-day with the specified month.
If the day-of-month is invalid for the specified month, the day will
be adjusted to the last valid day-of-month.
<p>
This instance is immutable and unaffected by this method call.

@param month  the month-of-year to set in the returned month-day, from 1 (January) to 12 (December)
@return a {@code MonthDay} based on this month-day with the requested month, not null
@throws DateTimeException if the month-of-year value is invalid
"
      end

      operation 8380034 "with"
	public return_type class_ref 1053826 // MonthDay
	nparams 1
	  param inout name "month" type class_ref 1053186 // Month
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code MonthDay} with the month-of-year altered.
<p>
This returns a month-day with the specified month.
If the day-of-month is invalid for the specified month, the day will
be adjusted to the last valid day-of-month.
<p>
This instance is immutable and unaffected by this method call.

@param month  the month-of-year to set in the returned month-day, not null
@return a {@code MonthDay} based on this month-day with the requested month, not null
"
      end

      operation 8380162 "withDayOfMonth"
	public return_type class_ref 1053826 // MonthDay
	nparams 1
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code MonthDay} with the day-of-month altered.
<p>
This returns a month-day with the specified day-of-month.
If the day-of-month is invalid for the month, an exception is thrown.
<p>
This instance is immutable and unaffected by this method call.

@param dayOfMonth  the day-of-month to set in the return month-day, from 1 to 31
@return a {@code MonthDay} based on this month-day with the requested day, not null
@throws DateTimeException if the day-of-month value is invalid,
 or if the day-of-month is invalid for the month
"
      end

      operation 8380290 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this month-day using the specified query.
<p>
This queries this month-day using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8380418 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have this month-day.
<p>
This returns a temporal object of the same observable type as the input
with the month and day-of-month changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
twice, passing {@link ChronoField#MONTH_OF_YEAR} and
{@link ChronoField#DAY_OF_MONTH} as the fields.
If the specified temporal object does not use the ISO calendar system then
a {@code DateTimeException} is thrown.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisMonthDay.adjustInto(temporal);
  temporal = temporal.with(thisMonthDay);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8380546 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this month-day using the specified formatter.
<p>
This month-day will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted month-day string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8380674 "atYear"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this month-day with a year to create a {@code LocalDate}.
<p>
This returns a {@code LocalDate} formed from this month-day and the specified year.
<p>
A month-day of February 29th will be adjusted to February 28th in the resulting
date if the year is not a leap year.
<p>
This instance is immutable and unaffected by this method call.

@param year  the year to use, from MIN_YEAR to MAX_YEAR
@return the local date formed from this month-day and the specified year, not null
@throws DateTimeException if the year is outside the valid range of years
"
      end

      operation 8380802 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1053826 // MonthDay
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this month-day to another month-day.
<p>
The comparison is based first on value of the month, then on the value of the day.
It is \"consistent with equals\", as defined by {@link Comparable}.

@param other  the other month-day to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8380930 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053826 // MonthDay
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this month-day is after the specified month-day.

@param other  the other month-day to compare to, not null
@return true if this is after the specified month-day
"
      end

      operation 8381058 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1053826 // MonthDay
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this month-day is before the specified month-day.

@param other  the other month-day to compare to, not null
@return true if this point is before the specified month-day
"
      end

      operation 8381186 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this month-day is equal to another month-day.
<p>
The comparison is based on the time-line position of the month-day within a year.

@param obj  the object to check, null returns false
@return true if this is equal to the other month-day
"
      end

      operation 8381314 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this month-day.

@return a suitable hash code
"
      end

      operation 8381442 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this month-day as a {@code String}, such as {@code --12-03}.
<p>
The output will be in the format {@code --MM-dd}:

@return a string representation of this month-day, not null
"
      end

      operation 8381570 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(13);  // identifies a MonthDay
 out.writeByte(month);
 out.writeByte(day);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8381698 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8381826 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8381954 "readExternal"
	class_operation package return_type class_ref 1053826 // MonthDay
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1053954 "Ser"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The shared serialization delegate for this package.

@implNote
This class wraps the object being serialized, and takes a byte representing the type of the class to
be serialized.  This byte can also be used for versioning the serialization format.  In this case another
byte flag would be used in order to specify an alternative version of the type format.
For example {@code LOCAL_DATE_TYPE_VERSION_2 = 21}.
<p>
In order to serialize the object it writes its byte and then calls back to the appropriate class where
the serialization is performed.  In order to deserialize the object it read in the type byte, switching
in order to select which class to call back into.
<p>
The serialization format is determined on a per class basis.  In the case of field based classes each
of the fields is written out with an appropriate size format in descending order of the field's size.  For
example in the case of {@link LocalDate} year is written before month.  Composite classes, such as
{@link LocalDateTime} are serialized as one object.
<p>
This class is mutable and should be created once per serialization.

@serial include
@since 1.8
"
      classrelation 3433090 // <realization>
	relation 3433090 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3433090 // <realization>
	  b parent class_ref 172162 // Externalizable
      end

      attribute 1948034 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7683839454370182990L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      attribute 1948162 "DURATION_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1948290 "INSTANT_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 2"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1948418 "LOCAL_DATE_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 3"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1948546 "LOCAL_TIME_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 4"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1948674 "LOCAL_DATE_TIME_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 5"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1948802 "ZONE_DATE_TIME_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 6"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1948930 "ZONE_REGION_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 7"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1949058 "ZONE_OFFSET_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 8"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1949186 "OFFSET_TIME_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 9"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1949314 "OFFSET_DATE_TIME_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 10"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1949442 "YEAR_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 11"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1949570 "YEAR_MONTH_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 12"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1949698 "MONTH_DAY_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 13"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1949826 "PERIOD_TYPE"
	class_attribute const_attribute package explicit_type "byte"
	init_value " 14"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1949954 "type"
	private explicit_type "byte"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " The type being serialized. 
"
      end

      classrelation 3433218 // object (<unidirectional association>)
	relation 3433218 --->
	  a role_name "object" private
	    comment " The object being serialized. 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3433218 // object (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 8408578 "Ser"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor for deserialization.
"
      end

      operation 8408706 "Ser"
	package explicit_return_type ""
	nparams 2
	  param in name "type" explicit_type "byte"
	  param inout name "object" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance for serialization.

@param type  the type
@param object  the object
"
      end

      operation 8408834 "writeExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Implements the {@code Externalizable} interface to write the object.
@serialData

Each serializable class is mapped to a type that is the first byte
in the stream.  Refer to each class {@code writeReplace}
serialized form for the value of the type and sequence of values for the type.
<ul>
<li><a href=\"../../serialized-form.html#java.time.Duration\">Duration.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.Instant\">Instant.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.LocalDate\">LocalDate.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.LocalDateTime\">LocalDateTime.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.LocalTime\">LocalTime.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.MonthDay\">MonthDay.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.OffsetTime\">OffsetTime.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.OffsetDateTime\">OffsetDateTime.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.Period\">Period.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.Year\">Year.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.YearMonth\">YearMonth.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.ZoneId\">ZoneId.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.ZoneOffset\">ZoneOffset.writeReplace</a>
<li><a href=\"../../serialized-form.html#java.time.ZonedDateTime\">ZonedDateTime.writeReplace</a>
</ul>

@param out  the data stream to write to, not null
"
      end

      operation 8408962 "writeInternal"
	class_operation package explicit_return_type "void"
	nparams 3
	  param in name "type" explicit_type "byte"
	  param inout name "object" type class_ref 129538 // Object
	  param inout name "out" type class_ref 174082 // ObjectOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8409090 "readExternal"
	public explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Implements the {@code Externalizable} interface to read the object.
@serialData

The streamed type and parameters defined by the type's {@code writeReplace}
method are read and passed to the corresponding static factory for the type
to create a new instance.  That instance is returned as the de-serialized
{@code Ser} object.

<ul>
<li><a href=\"../../serialized-form.html#java.time.Duration\">Duration</a> - {@code Duration.ofSeconds(seconds, nanos);}
<li><a href=\"../../serialized-form.html#java.time.Instant\">Instant</a> - {@code Instant.ofEpochSecond(seconds, nanos);}
<li><a href=\"../../serialized-form.html#java.time.LocalDate\">LocalDate</a> - {@code LocalDate.of(year, month, day);}
<li><a href=\"../../serialized-form.html#java.time.LocalDateTime\">LocalDateTime</a> - {@code LocalDateTime.of(date, time);}
<li><a href=\"../../serialized-form.html#java.time.LocalTime\">LocalTime</a> - {@code LocalTime.of(hour, minute, second, nano);}
<li><a href=\"../../serialized-form.html#java.time.MonthDay\">MonthDay</a> - {@code MonthDay.of(month, day);}
<li><a href=\"../../serialized-form.html#java.time.OffsetTime\">OffsetTime</a> - {@code OffsetTime.of(time, offset);}
<li><a href=\"../../serialized-form.html#java.time.OffsetDateTime\">OffsetDateTime</a> - {@code OffsetDateTime.of(dateTime, offset);}
<li><a href=\"../../serialized-form.html#java.time.Period\">Period</a> - {@code Period.of(years, months, days);}
<li><a href=\"../../serialized-form.html#java.time.Year\">Year</a> - {@code Year.of(year);}
<li><a href=\"../../serialized-form.html#java.time.YearMonth\">YearMonth</a> - {@code YearMonth.of(year, month);}
<li><a href=\"../../serialized-form.html#java.time.ZonedDateTime\">ZonedDateTime</a> - {@code ZonedDateTime.ofLenient(dateTime, offset, zone);}
<li><a href=\"../../serialized-form.html#java.time.ZoneId\">ZoneId</a> - {@code ZoneId.of(id);}
<li><a href=\"../../serialized-form.html#java.time.ZoneOffset\">ZoneOffset</a> - {@code (offsetByte == 127 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(offsetByte * 900));}
</ul>

@param in  the data to read, not null
"
      end

      operation 8409218 "read"
	class_operation package return_type class_ref 129538 // Object
	nparams 1
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8409346 "readInternal"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param in name "type" explicit_type "byte"
	  param inout name "in" type class_ref 169474 // ObjectInput
	nexceptions 2
	  exception class_ref 146818 // IOException
	  exception class_ref 169730 // ClassNotFoundException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8409474 "readResolve"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the object that will replace this one.

@return the read object, should never be null
"
      end
    end

    class 1054082 "Year"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A year in the ISO-8601 calendar system, such as {@code 2007}.
<p>
{@code Year} is an immutable date-time object that represents a year.
Any field that can be derived from a year can be obtained.
<p>
<b>Note that years in the ISO chronology only align with years in the
Gregorian-Julian system for modern years. Parts of Russia did not switch to the
modern Gregorian/ISO rules until 1920.
As such, historical years must be treated with caution.</b>
<p>
This class does not store or represent a month, day, time or time-zone.
For example, the value \"2007\" can be stored in a {@code Year}.
<p>
Years represented by this class follow the ISO-8601 standard and use
the proleptic numbering system. Year 1 is preceded by year 0, then by year -1.
<p>
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. It is equivalent to the proleptic Gregorian calendar
system, in which today's rules for leap years are applied for all time.
For most applications written today, the ISO-8601 rules are entirely suitable.
However, any application that makes use of historical dates, and requires them
to be accurate will find the ISO-8601 approach unsuitable.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code Year} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3433346 // <realization>
	relation 3433346 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3433346 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3433474 // <realization>
	relation 3433474 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3433474 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3433602 // <realization>
	relation 3433602 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3433602 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3433730 // <realization>
	relation 3433730 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3433730 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1950082 "MIN_VALUE"
	class_attribute const_attribute public explicit_type "int"
	init_value " -999_999_999"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The minimum supported year, '-999,999,999'.

"
      end

      attribute 1950210 "MAX_VALUE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 999_999_999"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The maximum supported year, '+999,999,999'.

"
      end

      attribute 1950338 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -23038383694477807L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3433858 // PARSER (<unidirectional association>)
	relation 3433858 --->
	  a role_name "PARSER" init_value " new DateTimeFormatterBuilder()
        .appendValue(YEAR, 4, 10, SignStyle.EXCEEDS_PAD)
        .toFormatter()" class_relation const_relation private
	    comment "
Parser.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3433858 // PARSER (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      attribute 1950466 "year"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The year being represented.

"
      end

      operation 8409602 "now"
	class_operation public return_type class_ref 1054082 // Year
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current year from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current year.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current year using the system clock and default time-zone, not null
"
      end

      operation 8409730 "now"
	class_operation public return_type class_ref 1054082 // Year
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current year from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current year.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current year using the system clock, not null
"
      end

      operation 8409858 "now"
	class_operation public return_type class_ref 1054082 // Year
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current year from the specified clock.
<p>
This will query the specified clock to obtain the current year.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current year, not null
"
      end

      operation 8409986 "of"
	class_operation public return_type class_ref 1054082 // Year
	nparams 1
	  param in name "isoYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Year}.
<p>
This method accepts a year value from the proleptic ISO calendar system.
<p>
The year 2AD/CE is represented by 2.<br>
The year 1AD/CE is represented by 1.<br>
The year 1BC/BCE is represented by 0.<br>
The year 2BC/BCE is represented by -1.<br>

@param isoYear  the ISO proleptic year to represent, from {@code MIN_VALUE} to {@code MAX_VALUE}
@return the year, not null
@throws DateTimeException if the field is invalid
"
      end

      operation 8410114 "from"
	class_operation public return_type class_ref 1054082 // Year
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Year} from a temporal object.
<p>
This obtains a year based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code Year}.
<p>
The conversion extracts the {@link ChronoField#YEAR year} field.
The extraction is only permitted if the temporal object has an ISO
chronology, or can be converted to a {@code LocalDate}.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code Year::from}.

@param temporal  the temporal object to convert, not null
@return the year, not null
@throws DateTimeException if unable to convert to a {@code Year}
"
      end

      operation 8410242 "parse"
	class_operation public return_type class_ref 1054082 // Year
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code Year} from a text string such as {@code 2007}.
<p>
The string must represent a valid year.
Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol.

@param text  the text to parse such as \"2007\", not null
@return the parsed year, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8410370 "parse"
	class_operation public return_type class_ref 1054082 // Year
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code Year} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a year.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed year, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8410498 "isLeap"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "year" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Checks if the year is a leap year, according to the ISO proleptic
calendar system rules.
<p>
This method applies the current rules for leap years across the whole time-line.
In general, a year is a leap year if it is divisible by four without
remainder. However, years divisible by 100, are not leap years, with
the exception of years divisible by 400 which are.
<p>
For example, 1904 is a leap year it is divisible by 4.
1900 was not a leap year as it is divisible by 100, however 2000 was a
leap year as it is divisible by 400.
<p>
The calculation is proleptic - applying the same rules into the far future and far past.
This is historically inaccurate, but is correct for the ISO-8601 standard.

@param year  the year to check
@return true if the year is leap, false otherwise
"
      end

      operation 8410626 "Year"
	private explicit_return_type ""
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param year  the year to represent
"
      end

      operation 8410754 "getValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the year value.
<p>
The year returned by this method is proleptic as per {@code get(YEAR)}.

@return the year, {@code MIN_VALUE} to {@code MAX_VALUE}
"
      end

      operation 8410882 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this year can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code YEAR_OF_ERA}
<li>{@code YEAR}
<li>{@code ERA}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this year, false if not
"
      end

      operation 8411010 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this year.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code YEARS}
<li>{@code DECADES}
<li>{@code CENTURIES}
<li>{@code MILLENNIA}
<li>{@code ERAS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not
"
      end

      operation 8411138 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This year is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8411266 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this year as an {@code int}.
<p>
This queries this year for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this year.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc"
      end

      operation 8411394 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this year as a {@code long}.
<p>
This queries this year for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this year.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8411522 "isLeap"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the year is a leap year, according to the ISO proleptic
calendar system rules.
<p>
This method applies the current rules for leap years across the whole time-line.
In general, a year is a leap year if it is divisible by four without
remainder. However, years divisible by 100, are not leap years, with
the exception of years divisible by 400 which are.
<p>
For example, 1904 is a leap year it is divisible by 4.
1900 was not a leap year as it is divisible by 100, however 2000 was a
leap year as it is divisible by 400.
<p>
The calculation is proleptic - applying the same rules into the far future and far past.
This is historically inaccurate, but is correct for the ISO-8601 standard.

@return true if the year is leap, false otherwise
"
      end

      operation 8411650 "isValidMonthDay"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "monthDay" type class_ref 1053826 // MonthDay
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the month-day is valid for this year.
<p>
This method checks whether this year and the input month and day form
a valid date.

@param monthDay  the month-day to validate, null returns false
@return true if the month and day are valid for this year
"
      end

      operation 8411778 "length"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the length of this year in days.

@return the length of this year in days, 365 or 366
"
      end

      operation 8411906 "with"
	public return_type class_ref 1054082 // Year
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an adjusted copy of this year.
<p>
This returns a {@code Year}, based on this one, with the year adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return a {@code Year} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8412034 "with"
	public return_type class_ref 1054082 // Year
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this year with the specified field set to a new value.
<p>
This returns a {@code Year}, based on this one, with the value
for the specified field changed.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code YEAR_OF_ERA} -
 Returns a {@code Year} with the specified year-of-era
 The era will be unchanged.
<li>{@code YEAR} -
 Returns a {@code Year} with the specified year.
 This completely replaces the date and is equivalent to {@link #of(int)}.
<li>{@code ERA} -
 Returns a {@code Year} with the specified era.
 The year-of-era will be unchanged.
</ul>
<p>
In all cases, if the new value is outside the valid range of values for the field
then a {@code DateTimeException} will be thrown.
<p>
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return a {@code Year} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8412162 "plus"
	public return_type class_ref 1054082 // Year
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this year with the specified amount added.
<p>
This returns a {@code Year}, based on this one, with the specified amount added.
The amount is typically {@link Period} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return a {@code Year} based on this year with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8412290 "plus"
	public return_type class_ref 1054082 // Year
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this year with the specified amount added.
<p>
This returns a {@code Year}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code YEARS} -
 Returns a {@code Year} with the specified number of years added.
 This is equivalent to {@link #plusYears(long)}.
<li>{@code DECADES} -
 Returns a {@code Year} with the specified number of decades added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 10.
<li>{@code CENTURIES} -
 Returns a {@code Year} with the specified number of centuries added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 100.
<li>{@code MILLENNIA} -
 Returns a {@code Year} with the specified number of millennia added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 1,000.
<li>{@code ERAS} -
 Returns a {@code Year} with the specified number of eras added.
 Only two eras are supported so the amount must be one, zero or minus one.
 If the amount is non-zero then the year is changed such that the year-of-era
 is unchanged.
</ul>
<p>
All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return a {@code Year} based on this year with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8412418 "plusYears"
	public return_type class_ref 1054082 // Year
	nparams 1
	  param in name "yearsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code Year} with the specified number of years added.
<p>
This instance is immutable and unaffected by this method call.

@param yearsToAdd  the years to add, may be negative
@return a {@code Year} based on this year with the years added, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8412546 "minus"
	public return_type class_ref 1054082 // Year
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this year with the specified amount subtracted.
<p>
This returns a {@code Year}, based on this one, with the specified amount subtracted.
The amount is typically {@link Period} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return a {@code Year} based on this year with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8412674 "minus"
	public return_type class_ref 1054082 // Year
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this year with the specified amount subtracted.
<p>
This returns a {@code Year}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return a {@code Year} based on this year with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8412802 "minusYears"
	public return_type class_ref 1054082 // Year
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code Year} with the specified number of years subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param yearsToSubtract  the years to subtract, may be negative
@return a {@code Year} based on this year with the year subtracted, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8412930 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this year using the specified query.
<p>
This queries this year using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8413058 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have this year.
<p>
This returns a temporal object of the same observable type as the input
with the year changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#YEAR} as the field.
If the specified temporal object does not use the ISO calendar system then
a {@code DateTimeException} is thrown.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisYear.adjustInto(temporal);
  temporal = temporal.with(thisYear);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8413186 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another year in terms of the specified unit.
<p>
This calculates the amount of time between two {@code Year}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified year.
The result will be negative if the end is before the start.
The {@code Temporal} passed to this method is converted to a
{@code Year} using {@link #from(TemporalAccessor)}.
For example, the amount in decades between two year can be calculated
using {@code startYear.until(endYear, DECADES)}.
<p>
The calculation returns a whole number, representing the number of
complete units between the two years.
For example, the amount in decades between 2012 and 2031
will only be one decade as it is one year short of two decades.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, YEARS);
  amount = YEARS.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code YEARS}, {@code DECADES}, {@code CENTURIES},
{@code MILLENNIA} and {@code ERAS} are supported.
Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end date, exclusive, which is converted to a {@code Year}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this year and the end year
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to a {@code Year}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8413314 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this year using the specified formatter.
<p>
This year will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted year string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8413442 "atDay"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "dayOfYear" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this year with a day-of-year to create a {@code LocalDate}.
<p>
This returns a {@code LocalDate} formed from this year and the specified day-of-year.
<p>
The day-of-year value 366 is only valid in a leap year.

@param dayOfYear  the day-of-year to use, from 1 to 365-366
@return the local date formed from this year and the specified date of year, not null
@throws DateTimeException if the day of year is zero or less, 366 or greater or equal
 to 366 and this is not a leap year
"
      end

      operation 8413570 "atMonth"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "month" type class_ref 1053186 // Month
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this year with a month to create a {@code YearMonth}.
<p>
This returns a {@code YearMonth} formed from this year and the specified month.
All possible combinations of year and month are valid.
<p>
This method can be used as part of a chain to produce a date:
<pre>
 LocalDate date = year.atMonth(month).atDay(day);
</pre>

@param month  the month-of-year to use, not null
@return the year-month formed from this year and the specified month, not null
"
      end

      operation 8413698 "atMonth"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this year with a month to create a {@code YearMonth}.
<p>
This returns a {@code YearMonth} formed from this year and the specified month.
All possible combinations of year and month are valid.
<p>
This method can be used as part of a chain to produce a date:
<pre>
 LocalDate date = year.atMonth(month).atDay(day);
</pre>

@param month  the month-of-year to use, from 1 (January) to 12 (December)
@return the year-month formed from this year and the specified month, not null
@throws DateTimeException if the month is invalid
"
      end

      operation 8413826 "atMonthDay"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param inout name "monthDay" type class_ref 1053826 // MonthDay
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines this year with a month-day to create a {@code LocalDate}.
<p>
This returns a {@code LocalDate} formed from this year and the specified month-day.
<p>
A month-day of February 29th will be adjusted to February 28th in the resulting
date if the year is not a leap year.

@param monthDay  the month-day to use, not null
@return the local date formed from this year and the specified month-day, not null
"
      end

      operation 8413954 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1054082 // Year
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this year to another year.
<p>
The comparison is based on the value of the year.
It is \"consistent with equals\", as defined by {@link Comparable}.

@param other  the other year to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8414082 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1054082 // Year
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this year is after the specified year.

@param other  the other year to compare to, not null
@return true if this is after the specified year
"
      end

      operation 8414210 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1054082 // Year
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this year is before the specified year.

@param other  the other year to compare to, not null
@return true if this point is before the specified year
"
      end

      operation 8414338 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this year is equal to another year.
<p>
The comparison is based on the time-line position of the years.

@param obj  the object to check, null returns false
@return true if this is equal to the other year
"
      end

      operation 8414466 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this year.

@return a suitable hash code
"
      end

      operation 8414594 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this year as a {@code String}.

@return a string representation of this year, not null
"
      end

      operation 8414722 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(11);  // identifies a Year
 out.writeInt(year);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8414850 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8414978 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8415106 "readExternal"
	class_operation package return_type class_ref 1054082 // Year
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1054210 "YearMonth"
      visibility public 
      nactuals 1
      actual class class_ref 194946 // Comparable
        rank 0 explicit_value ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A year-month in the ISO-8601 calendar system, such as {@code 2007-12}.
<p>
{@code YearMonth} is an immutable date-time object that represents the combination
of a year and month. Any field that can be derived from a year and month, such as
quarter-of-year, can be obtained.
<p>
This class does not store or represent a day, time or time-zone.
For example, the value \"October 2007\" can be stored in a {@code YearMonth}.
<p>
The ISO-8601 calendar system is the modern civil calendar system used today
in most of the world. It is equivalent to the proleptic Gregorian calendar
system, in which today's rules for leap years are applied for all time.
For most applications written today, the ISO-8601 rules are entirely suitable.
However, any application that makes use of historical dates, and requires them
to be accurate will find the ISO-8601 approach unsuitable.

<p>
This is a <a href=\"{@docRoot}/java/lang/doc-files/ValueBased.html\">value-based</a>
class; use of identity-sensitive operations (including reference equality
({@code ==}), identity hash code, or synchronization) on instances of
{@code YearMonth} may have unpredictable results and should be avoided.
The {@code equals} method should be used for comparisons.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3433986 // <realization>
	relation 3433986 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3433986 // <realization>
	  b parent class_ref 1051394 // Temporal
      end

      classrelation 3434114 // <realization>
	relation 3434114 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3434114 // <realization>
	  b parent class_ref 1051266 // TemporalAdjuster
      end

      classrelation 3434242 // <realization>
	relation 3434242 -_-|>
	  stereotype "bind"
	  a public
	    java "${type}"
	    classrelation_ref 3434242 // <realization>
	  b parent class_ref 194946 // Comparable
      end

      classrelation 3434370 // <realization>
	relation 3434370 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3434370 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1950594 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4183400860270640070L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3434498 // PARSER (<unidirectional association>)
	relation 3434498 --->
	  a role_name "PARSER" init_value " new DateTimeFormatterBuilder()
        .appendValue(YEAR, 4, 10, SignStyle.EXCEEDS_PAD)
        .appendLiteral('-')
        .appendValue(MONTH_OF_YEAR, 2)
        .toFormatter()" class_relation const_relation private
	    comment "
Parser.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3434498 // PARSER (<unidirectional association>)
	  b parent class_ref 1052930 // DateTimeFormatter
      end

      attribute 1950722 "year"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The year.

"
      end

      attribute 1950850 "month"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The month-of-year, not null.

"
      end

      operation 8415234 "now"
	class_operation public return_type class_ref 1054210 // YearMonth
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains the current year-month from the system clock in the default time-zone.
<p>
This will query the {@link Clock#systemDefaultZone() system clock} in the default
time-zone to obtain the current year-month.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@return the current year-month using the system clock and default time-zone, not null
"
      end

      operation 8415362 "now"
	class_operation public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "zone" type class_ref 1049730 // ZoneId
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current year-month from the system clock in the specified time-zone.
<p>
This will query the {@link Clock#system(ZoneId) system clock} to obtain the current year-month.
Specifying the time-zone avoids dependence on the default time-zone.
<p>
Using this method will prevent the ability to use an alternate clock for testing
because the clock is hard-coded.

@param zone  the zone ID to use, not null
@return the current year-month using the system clock, not null
"
      end

      operation 8415490 "now"
	class_operation public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "clock" type class_ref 1049602 // Clock
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains the current year-month from the specified clock.
<p>
This will query the specified clock to obtain the current year-month.
Using this method allows the use of an alternate clock for testing.
The alternate clock may be introduced using {@link Clock dependency injection}.

@param clock  the clock to use, not null
@return the current year-month, not null
"
      end

      operation 8415618 "of"
	class_operation public return_type class_ref 1054210 // YearMonth
	nparams 2
	  param in name "year" explicit_type "int"
	  param inout name "month" type class_ref 1053186 // Month
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code YearMonth} from a year and month.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, not null
@return the year-month, not null
@throws DateTimeException if the year value is invalid
"
      end

      operation 8415746 "of"
	class_operation public return_type class_ref 1054210 // YearMonth
	nparams 2
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code YearMonth} from a year and month.

@param year  the year to represent, from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, from 1 (January) to 12 (December)
@return the year-month, not null
@throws DateTimeException if either field value is invalid
"
      end

      operation 8415874 "from"
	class_operation public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "temporal" type class_ref 1050754 // TemporalAccessor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code YearMonth} from a temporal object.
<p>
This obtains a year-month based on the specified temporal.
A {@code TemporalAccessor} represents an arbitrary set of date and time information,
which this factory converts to an instance of {@code YearMonth}.
<p>
The conversion extracts the {@link ChronoField#YEAR YEAR} and
{@link ChronoField#MONTH_OF_YEAR MONTH_OF_YEAR} fields.
The extraction is only permitted if the temporal object has an ISO
chronology, or can be converted to a {@code LocalDate}.
<p>
This method matches the signature of the functional interface {@link TemporalQuery}
allowing it to be used as a query via method reference, {@code YearMonth::from}.

@param temporal  the temporal object to convert, not null
@return the year-month, not null
@throws DateTimeException if unable to convert to a {@code YearMonth}
"
      end

      operation 8416002 "parse"
	class_operation public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "text" type class_ref 429442 // CharSequence
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Obtains an instance of {@code YearMonth} from a text string such as {@code 2007-12}.
<p>
The string must represent a valid year-month.
The format must be {@code uuuu-MM}.
Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol.

@param text  the text to parse such as \"2007-12\", not null
@return the parsed year-month, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8416130 "parse"
	class_operation public return_type class_ref 1054210 // YearMonth
	nparams 2
	  param inout name "text" type class_ref 429442 // CharSequence
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code YearMonth} from a text string using a specific formatter.
<p>
The text is parsed using the formatter, returning a year-month.

@param text  the text to parse, not null
@param formatter  the formatter to use, not null
@return the parsed year-month, not null
@throws DateTimeParseException if the text cannot be parsed
"
      end

      operation 8416258 "YearMonth"
	private explicit_return_type ""
	nparams 2
	  param in name "year" explicit_type "int"
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Constructor.

@param year  the year to represent, validated from MIN_YEAR to MAX_YEAR
@param month  the month-of-year to represent, validated from 1 (January) to 12 (December)
"
      end

      operation 8416386 "with"
	private return_type class_ref 1054210 // YearMonth
	nparams 2
	  param in name "newYear" explicit_type "int"
	  param in name "newMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this year-month with the new year and month, checking
to see if a new object is in fact required.

@param newYear  the year to represent, validated from MIN_YEAR to MAX_YEAR
@param newMonth  the month-of-year to represent, validated not null
@return the year-month, not null
"
      end

      operation 8416514 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the specified field is supported.
<p>
This checks if this year-month can be queried for the specified field.
If false, then calling the {@link #range(TemporalField) range},
{@link #get(TemporalField) get} and {@link #with(TemporalField, long)}
methods will throw an exception.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The supported fields are:
<ul>
<li>{@code MONTH_OF_YEAR}
<li>{@code PROLEPTIC_MONTH}
<li>{@code YEAR_OF_ERA}
<li>{@code YEAR}
<li>{@code ERA}
</ul>
All other {@code ChronoField} instances will return false.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.isSupportedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the field is supported is determined by the field.

@param field  the field to check, null returns false
@return true if the field is supported on this year-month, false if not
"
      end

      operation 8416642 "isSupported"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Checks if the specified unit is supported.
<p>
This checks if the specified unit can be added to, or subtracted from, this year-month.
If false, then calling the {@link #plus(long, TemporalUnit)} and
{@link #minus(long, TemporalUnit) minus} methods will throw an exception.
<p>
If the unit is a {@link ChronoUnit} then the query is implemented here.
The supported units are:
<ul>
<li>{@code MONTHS}
<li>{@code YEARS}
<li>{@code DECADES}
<li>{@code CENTURIES}
<li>{@code MILLENNIA}
<li>{@code ERAS}
</ul>
All other {@code ChronoUnit} instances will return false.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.isSupportedBy(Temporal)}
passing {@code this} as the argument.
Whether the unit is supported is determined by the unit.

@param unit  the unit to check, null returns false
@return true if the unit can be added/subtracted, false if not
"
      end

      operation 8416770 "range"
	public return_type class_ref 1051010 // ValueRange
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the range of valid values for the specified field.
<p>
The range object expresses the minimum and maximum valid values for a field.
This year-month is used to enhance the accuracy of the returned range.
If it is not possible to return the range, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return
appropriate range instances.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.rangeRefinedBy(TemporalAccessor)}
passing {@code this} as the argument.
Whether the range can be obtained is determined by the field.

@param field  the field to query the range for, not null
@return the range of valid values for the field, not null
@throws DateTimeException if the range for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
"
      end

      operation 8416898 "get"
	public explicit_return_type "int"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this year-month as an {@code int}.
<p>
This queries this year-month for the value of the specified field.
The returned value will always be within the valid range of values for the field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this year-month, except {@code PROLEPTIC_MONTH} which is too
large to fit in an {@code int} and throw a {@code DateTimeException}.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained or
        the value is outside the range of valid values for the field
@throws UnsupportedTemporalTypeException if the field is not supported or
        the range of values exceeds an {@code int}
@throws ArithmeticException if numeric overflow occurs

 override for Javadoc"
      end

      operation 8417026 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 1050882 // TemporalField
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the value of the specified field from this year-month as a {@code long}.
<p>
This queries this year-month for the value of the specified field.
If it is not possible to return the value, because the field is not supported
or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the query is implemented here.
The {@link #isSupported(TemporalField) supported fields} will return valid
values based on this year-month.
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.getFrom(TemporalAccessor)}
passing {@code this} as the argument. Whether the value can be obtained,
and what the value represents, is determined by the field.

@param field  the field to get, not null
@return the value for the field
@throws DateTimeException if a value for the field cannot be obtained
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8417154 "getProlepticMonth"
	private explicit_return_type "long"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8417282 "getYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Gets the year field.
<p>
This method returns the primitive {@code int} value for the year.
<p>
The year returned by this method is proleptic as per {@code get(YEAR)}.

@return the year, from MIN_YEAR to MAX_YEAR
"
      end

      operation 8417410 "getMonthValue"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field from 1 to 12.
<p>
This method returns the month as an {@code int} from 1 to 12.
Application code is frequently clearer if the enum {@link Month}
is used by calling {@link #getMonth()}.

@return the month-of-year, from 1 to 12
@see #getMonth()
"
      end

      operation 8417538 "getMonth"
	public return_type class_ref 1053186 // Month
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the month-of-year field using the {@code Month} enum.
<p>
This method returns the enum {@link Month} for the month.
This avoids confusion as to what {@code int} values mean.
If you need access to the primitive {@code int} value then the enum
provides the {@link Month#getValue() int value}.

@return the month-of-year, not null
@see #getMonthValue()
"
      end

      operation 8417666 "isLeapYear"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if the year is a leap year, according to the ISO proleptic
calendar system rules.
<p>
This method applies the current rules for leap years across the whole time-line.
In general, a year is a leap year if it is divisible by four without
remainder. However, years divisible by 100, are not leap years, with
the exception of years divisible by 400 which are.
<p>
For example, 1904 is a leap year it is divisible by 4.
1900 was not a leap year as it is divisible by 100, however 2000 was a
leap year as it is divisible by 400.
<p>
The calculation is proleptic - applying the same rules into the far future and far past.
This is historically inaccurate, but is correct for the ISO-8601 standard.

@return true if the year is leap, false otherwise
"
      end

      operation 8417794 "isValidDay"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the day-of-month is valid for this year-month.
<p>
This method checks whether this year and month and the input day form
a valid date.

@param dayOfMonth  the day-of-month to validate, from 1 to 31, invalid value returns false
@return true if the day is valid for this year-month
"
      end

      operation 8417922 "lengthOfMonth"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the month, taking account of the year.
<p>
This returns the length of the month in days.
For example, a date in January would return 31.

@return the length of the month in days, from 28 to 31
"
      end

      operation 8418050 "lengthOfYear"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the year.
<p>
This returns the length of the year in days, either 365 or 366.

@return 366 if the year is leap, 365 otherwise
"
      end

      operation 8418178 "with"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "adjuster" type class_ref 1051266 // TemporalAdjuster
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns an adjusted copy of this year-month.
<p>
This returns a {@code YearMonth}, based on this one, with the year-month adjusted.
The adjustment takes place using the specified adjuster strategy object.
Read the documentation of the adjuster to understand what adjustment will be made.
<p>
A simple adjuster might simply set the one of the fields, such as the year field.
A more complex adjuster might set the year-month to the next month that
Halley's comet will pass the Earth.
<p>
The result of this method is obtained by invoking the
{@link TemporalAdjuster#adjustInto(Temporal)} method on the
specified adjuster passing {@code this} as the argument.
<p>
This instance is immutable and unaffected by this method call.

@param adjuster the adjuster to use, not null
@return a {@code YearMonth} based on {@code this} with the adjustment made, not null
@throws DateTimeException if the adjustment cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8418306 "with"
	public return_type class_ref 1054210 // YearMonth
	nparams 2
	  param inout name "field" type class_ref 1050882 // TemporalField
	  param in name "newValue" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this year-month with the specified field set to a new value.
<p>
This returns a {@code YearMonth}, based on this one, with the value
for the specified field changed.
This can be used to change any supported field, such as the year or month.
If it is not possible to set the value, because the field is not supported or for
some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoField} then the adjustment is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code MONTH_OF_YEAR} -
 Returns a {@code YearMonth} with the specified month-of-year.
 The year will be unchanged.
<li>{@code PROLEPTIC_MONTH} -
 Returns a {@code YearMonth} with the specified proleptic-month.
 This completely replaces the year and month of this object.
<li>{@code YEAR_OF_ERA} -
 Returns a {@code YearMonth} with the specified year-of-era
 The month and era will be unchanged.
<li>{@code YEAR} -
 Returns a {@code YearMonth} with the specified year.
 The month will be unchanged.
<li>{@code ERA} -
 Returns a {@code YearMonth} with the specified era.
 The month and year-of-era will be unchanged.
</ul>
<p>
In all cases, if the new value is outside the valid range of values for the field
then a {@code DateTimeException} will be thrown.
<p>
All other {@code ChronoField} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoField}, then the result of this method
is obtained by invoking {@code TemporalField.adjustInto(Temporal, long)}
passing {@code this} as the argument. In this case, the field determines
whether and how to adjust the instant.
<p>
This instance is immutable and unaffected by this method call.

@param field  the field to set in the result, not null
@param newValue  the new value of the field in the result
@return a {@code YearMonth} based on {@code this} with the specified field set, not null
@throws DateTimeException if the field cannot be set
@throws UnsupportedTemporalTypeException if the field is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8418434 "withYear"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param in name "year" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this {@code YearMonth} with the year altered.
<p>
This instance is immutable and unaffected by this method call.

@param year  the year to set in the returned year-month, from MIN_YEAR to MAX_YEAR
@return a {@code YearMonth} based on this year-month with the requested year, not null
@throws DateTimeException if the year value is invalid
"
      end

      operation 8418562 "withMonth"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param in name "month" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code YearMonth} with the month-of-year altered.
<p>
This instance is immutable and unaffected by this method call.

@param month  the month-of-year to set in the returned year-month, from 1 (January) to 12 (December)
@return a {@code YearMonth} based on this year-month with the requested month, not null
@throws DateTimeException if the month-of-year value is invalid
"
      end

      operation 8418690 "plus"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "amountToAdd" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this year-month with the specified amount added.
<p>
This returns a {@code YearMonth}, based on this one, with the specified amount added.
The amount is typically {@link Period} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#addTo(Temporal)}. The amount implementation is free
to implement the addition in any way it wishes, however it typically
calls back to {@link #plus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully added.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount to add, not null
@return a {@code YearMonth} based on this year-month with the addition made, not null
@throws DateTimeException if the addition cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8418818 "plus"
	public return_type class_ref 1054210 // YearMonth
	nparams 2
	  param in name "amountToAdd" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this year-month with the specified amount added.
<p>
This returns a {@code YearMonth}, based on this one, with the amount
in terms of the unit added. If it is not possible to add the amount, because the
unit is not supported or for some other reason, an exception is thrown.
<p>
If the field is a {@link ChronoUnit} then the addition is implemented here.
The supported fields behave as follows:
<ul>
<li>{@code MONTHS} -
 Returns a {@code YearMonth} with the specified number of months added.
 This is equivalent to {@link #plusMonths(long)}.
<li>{@code YEARS} -
 Returns a {@code YearMonth} with the specified number of years added.
 This is equivalent to {@link #plusYears(long)}.
<li>{@code DECADES} -
 Returns a {@code YearMonth} with the specified number of decades added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 10.
<li>{@code CENTURIES} -
 Returns a {@code YearMonth} with the specified number of centuries added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 100.
<li>{@code MILLENNIA} -
 Returns a {@code YearMonth} with the specified number of millennia added.
 This is equivalent to calling {@link #plusYears(long)} with the amount
 multiplied by 1,000.
<li>{@code ERAS} -
 Returns a {@code YearMonth} with the specified number of eras added.
 Only two eras are supported so the amount must be one, zero or minus one.
 If the amount is non-zero then the year is changed such that the year-of-era
 is unchanged.
</ul>
<p>
All other {@code ChronoUnit} instances will throw an {@code UnsupportedTemporalTypeException}.
<p>
If the field is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.addTo(Temporal, long)}
passing {@code this} as the argument. In this case, the unit determines
whether and how to perform the addition.
<p>
This instance is immutable and unaffected by this method call.

@param amountToAdd  the amount of the unit to add to the result, may be negative
@param unit  the unit of the amount to add, not null
@return a {@code YearMonth} based on this year-month with the specified amount added, not null
@throws DateTimeException if the addition cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8418946 "plusYears"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param in name "yearsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code YearMonth} with the specified number of years added.
<p>
This instance is immutable and unaffected by this method call.

@param yearsToAdd  the years to add, may be negative
@return a {@code YearMonth} based on this year-month with the years added, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8419074 "plusMonths"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param in name "monthsToAdd" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code YearMonth} with the specified number of months added.
<p>
This instance is immutable and unaffected by this method call.

@param monthsToAdd  the months to add, may be negative
@return a {@code YearMonth} based on this year-month with the months added, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8419202 "minus"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "amountToSubtract" type class_ref 1051650 // TemporalAmount
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Returns a copy of this year-month with the specified amount subtracted.
<p>
This returns a {@code YearMonth}, based on this one, with the specified amount subtracted.
The amount is typically {@link Period} but may be any other type implementing
the {@link TemporalAmount} interface.
<p>
The calculation is delegated to the amount object by calling
{@link TemporalAmount#subtractFrom(Temporal)}. The amount implementation is free
to implement the subtraction in any way it wishes, however it typically
calls back to {@link #minus(long, TemporalUnit)}. Consult the documentation
of the amount implementation to determine if it can be successfully subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount to subtract, not null
@return a {@code YearMonth} based on this year-month with the subtraction made, not null
@throws DateTimeException if the subtraction cannot be made
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8419330 "minus"
	public return_type class_ref 1054210 // YearMonth
	nparams 2
	  param in name "amountToSubtract" explicit_type "long"
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a copy of this year-month with the specified amount subtracted.
<p>
This returns a {@code YearMonth}, based on this one, with the amount
in terms of the unit subtracted. If it is not possible to subtract the amount,
because the unit is not supported or for some other reason, an exception is thrown.
<p>
This method is equivalent to {@link #plus(long, TemporalUnit)} with the amount negated.
See that method for a full description of how addition, and thus subtraction, works.
<p>
This instance is immutable and unaffected by this method call.

@param amountToSubtract  the amount of the unit to subtract from the result, may be negative
@param unit  the unit of the amount to subtract, not null
@return a {@code YearMonth} based on this year-month with the specified amount subtracted, not null
@throws DateTimeException if the subtraction cannot be made
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8419458 "minusYears"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param in name "yearsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code YearMonth} with the specified number of years subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param yearsToSubtract  the years to subtract, may be negative
@return a {@code YearMonth} based on this year-month with the years subtracted, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8419586 "minusMonths"
	public return_type class_ref 1054210 // YearMonth
	nparams 1
	  param in name "monthsToSubtract" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a copy of this {@code YearMonth} with the specified number of months subtracted.
<p>
This instance is immutable and unaffected by this method call.

@param monthsToSubtract  the months to subtract, may be negative
@return a {@code YearMonth} based on this year-month with the months subtracted, not null
@throws DateTimeException if the result exceeds the supported range
"
      end

      operation 8419714 "query"
	public explicit_return_type "R"
	nparams 1
	  param inout name "query" type class_ref 1051138 // TemporalQuery
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<R> ${type} ${name}${(}${t0}<R> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Queries this year-month using the specified query.
<p>
This queries this year-month using the specified query strategy object.
The {@code TemporalQuery} object defines the logic to be used to
obtain the result. Read the documentation of the query to understand
what the result of this method will be.
<p>
The result of this method is obtained by invoking the
{@link TemporalQuery#queryFrom(TemporalAccessor)} method on the
specified query passing {@code this} as the argument.

@param <R> the type of the result
@param query  the query to invoke, not null
@return the query result, null may be returned (defined by the query)
@throws DateTimeException if unable to query (defined by the query)
@throws ArithmeticException if numeric overflow occurs (defined by the query)
"
      end

      operation 8419842 "adjustInto"
	public return_type class_ref 1051394 // Temporal
	nparams 1
	  param inout name "temporal" type class_ref 1051394 // Temporal
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Adjusts the specified temporal object to have this year-month.
<p>
This returns a temporal object of the same observable type as the input
with the year and month changed to be the same as this.
<p>
The adjustment is equivalent to using {@link Temporal#with(TemporalField, long)}
passing {@link ChronoField#PROLEPTIC_MONTH} as the field.
If the specified temporal object does not use the ISO calendar system then
a {@code DateTimeException} is thrown.
<p>
In most cases, it is clearer to reverse the calling pattern by using
{@link Temporal#with(TemporalAdjuster)}:
<pre>
  // these two lines are equivalent, but the second approach is recommended
  temporal = thisYearMonth.adjustInto(temporal);
  temporal = temporal.with(thisYearMonth);
</pre>
<p>
This instance is immutable and unaffected by this method call.

@param temporal  the target object to be adjusted, not null
@return the adjusted object, not null
@throws DateTimeException if unable to make the adjustment
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8419970 "until"
	public explicit_return_type "long"
	nparams 2
	  param inout name "endExclusive" type class_ref 1051394 // Temporal
	  param inout name "unit" type class_ref 1051778 // TemporalUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Calculates the amount of time until another year-month in terms of the specified unit.
<p>
This calculates the amount of time between two {@code YearMonth}
objects in terms of a single {@code TemporalUnit}.
The start and end points are {@code this} and the specified year-month.
The result will be negative if the end is before the start.
The {@code Temporal} passed to this method is converted to a
{@code YearMonth} using {@link #from(TemporalAccessor)}.
For example, the amount in years between two year-months can be calculated
using {@code startYearMonth.until(endYearMonth, YEARS)}.
<p>
The calculation returns a whole number, representing the number of
complete units between the two year-months.
For example, the amount in decades between 2012-06 and 2032-05
will only be one decade as it is one month short of two decades.
<p>
There are two equivalent ways of using this method.
The first is to invoke this method.
The second is to use {@link TemporalUnit#between(Temporal, Temporal)}:
<pre>
  // these two lines are equivalent
  amount = start.until(end, MONTHS);
  amount = MONTHS.between(start, end);
</pre>
The choice should be made based on which makes the code more readable.
<p>
The calculation is implemented in this method for {@link ChronoUnit}.
The units {@code MONTHS}, {@code YEARS}, {@code DECADES},
{@code CENTURIES}, {@code MILLENNIA} and {@code ERAS} are supported.
Other {@code ChronoUnit} values will throw an exception.
<p>
If the unit is not a {@code ChronoUnit}, then the result of this method
is obtained by invoking {@code TemporalUnit.between(Temporal, Temporal)}
passing {@code this} as the first argument and the converted input temporal
as the second argument.
<p>
This instance is immutable and unaffected by this method call.

@param endExclusive  the end date, exclusive, which is converted to a {@code YearMonth}, not null
@param unit  the unit to measure the amount in, not null
@return the amount of time between this year-month and the end year-month
@throws DateTimeException if the amount cannot be calculated, or the end
 temporal cannot be converted to a {@code YearMonth}
@throws UnsupportedTemporalTypeException if the unit is not supported
@throws ArithmeticException if numeric overflow occurs
"
      end

      operation 8420098 "format"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "formatter" type class_ref 1052930 // DateTimeFormatter
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Formats this year-month using the specified formatter.
<p>
This year-month will be passed to the formatter to produce a string.

@param formatter  the formatter to use, not null
@return the formatted year-month string, not null
@throws DateTimeException if an error occurs during printing
"
      end

      operation 8420226 "atDay"
	public return_type class_ref 1040770 // LocalDate
	nparams 1
	  param in name "dayOfMonth" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Combines this year-month with a day-of-month to create a {@code LocalDate}.
<p>
This returns a {@code LocalDate} formed from this year-month and the specified day-of-month.
<p>
The day-of-month value must be valid for the year-month.
<p>
This method can be used as part of a chain to produce a date:
<pre>
 LocalDate date = year.atMonth(month).atDay(day);
</pre>

@param dayOfMonth  the day-of-month to use, from 1 to 31
@return the date formed from this year-month and the specified day, not null
@throws DateTimeException if the day is invalid for the year-month
@see #isValidDay(int)
"
      end

      operation 8420354 "atEndOfMonth"
	public return_type class_ref 1040770 // LocalDate
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code LocalDate} at the end of the month.
<p>
This returns a {@code LocalDate} based on this year-month.
The day-of-month is set to the last valid day of the month, taking
into account leap years.
<p>
This method can be used as part of a chain to produce a date:
<pre>
 LocalDate date = year.atMonth(month).atEndOfMonth();
</pre>

@return the last valid date of this year-month, not null
"
      end

      operation 8420482 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "other" type class_ref 1054210 // YearMonth
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Compares this year-month to another year-month.
<p>
The comparison is based first on the value of the year, then on the value of the month.
It is \"consistent with equals\", as defined by {@link Comparable}.

@param other  the other year-month to compare to, not null
@return the comparator value, negative if less, positive if greater
"
      end

      operation 8420610 "isAfter"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1054210 // YearMonth
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this year-month is after the specified year-month.

@param other  the other year-month to compare to, not null
@return true if this is after the specified year-month
"
      end

      operation 8420738 "isBefore"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 1054210 // YearMonth
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if this year-month is before the specified year-month.

@param other  the other year-month to compare to, not null
@return true if this point is before the specified year-month
"
      end

      operation 8420866 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Checks if this year-month is equal to another year-month.
<p>
The comparison is based on the time-line position of the year-months.

@param obj  the object to check, null returns false
@return true if this is equal to the other year-month
"
      end

      operation 8420994 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "A hash code for this year-month.

@return a suitable hash code
"
      end

      operation 8421122 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------

Outputs this year-month as a {@code String}, such as {@code 2007-12}.
<p>
The output will be in the format {@code uuuu-MM}:

@return a string representation of this year-month, not null
"
      end

      operation 8421250 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(12);  // identifies a YearMonth
 out.writeInt(year);
 out.writeByte(month);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8421378 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8421506 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8421634 "readExternal"
	class_operation package return_type class_ref 1054210 // YearMonth
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1054466 "ZoneRegion"
      visibility package 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A geographical region where the same time-zone rules apply.
<p>
Time-zone information is categorized as a set of rules defining when and
how the offset from UTC/Greenwich changes. These rules are accessed using
identifiers based on geographical regions, such as countries or states.
The most common region classification is the Time Zone Database (TZDB),
which defines regions such as 'Europe/Paris' and 'Asia/Tokyo'.
<p>
The region identifier, modeled by this class, is distinct from the
underlying rules, modeled by {@link ZoneRules}.
The rules are defined by governments and change frequently.
By contrast, the region identifier is well-defined and long-lived.
This separation also allows rules to be shared between regions if appropriate.

@implSpec
This class is immutable and thread-safe.

@since 1.8
"
      classrelation 3437314 // <generalisation>
	relation 3437314 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3437314 // <generalisation>
	  b parent class_ref 1049730 // ZoneId
      end

      classrelation 3437442 // <realization>
	relation 3437442 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3437442 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1951618 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8386373296231747096L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Serialization version.

"
      end

      classrelation 3437570 // id (<unidirectional association>)
	relation 3437570 --->
	  a role_name "id" const_relation private
	    comment "
The time-zone ID, not null.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3437570 // id (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3437698 // rules (<unidirectional association>)
	relation 3437698 --->
	  a role_name "rules" const_relation private
	    comment "
The time-zone rules, null if zone ID was loaded leniently.

"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3437698 // rules (<unidirectional association>)
	  b parent class_ref 1054338 // ZoneRules
      end

      operation 8443394 "ofId"
	class_operation package return_type class_ref 1054466 // ZoneRegion
	nparams 2
	  param inout name "zoneId" type class_ref 128130 // String
	  param inout name "checkAvailable" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an instance of {@code ZoneId} from an identifier.

@param zoneId  the time-zone ID, not null
@param checkAvailable  whether to check if the zone ID is available
@return the zone ID, not null
@throws DateTimeException if the ID format is invalid
@throws ZoneRulesException if checking availability and the ID cannot be found
"
      end

      operation 8443522 "checkName"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "zoneId" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks that the given string is a legal ZondId name.

@param zoneId  the time-zone ID, not null
@throws DateTimeException if the ID format is invalid
"
      end

      operation 8443650 "ZoneRegion"
	package explicit_return_type ""
	nparams 2
	  param inout name "id" type class_ref 128130 // String
	  param inout name "rules" type class_ref 1054338 // ZoneRules
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------------

Constructor.

@param id  the time-zone ID, not null
@param rules  the rules, null for lazy lookup
"
      end

      operation 8443778 "getId"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-----------------------------------------------------------------------"
      end

      operation 8443906 "getRules"
	public return_type class_ref 1054338 // ZoneRules
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8444034 "writeReplace"
	private return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-----------------------------------------------------------------------

Writes the object using a
<a href=\"../../serialized-form.html#java.time.Ser\">dedicated serialized form</a>.
@serialData
<pre>
 out.writeByte(7);  // identifies a ZoneId (not ZoneOffset)
 out.writeUTF(zoneId);
</pre>

@return the instance of {@code Ser}, not null
"
      end

      operation 8444162 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 168962 // ObjectInputStream
	nexceptions 1
	  exception class_ref 171650 // InvalidObjectException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Defend against malicious streams.

@param s the stream to read
@throws InvalidObjectException always
"
      end

      operation 8444290 "write"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 8444418 "writeExternal"
	package explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 174210 // DataOutput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 8444546 "readExternal"
	class_operation package return_type class_ref 1049730 // ZoneId
	nparams 1
	  param inout name "in" type class_ref 169602 // DataInput
	nexceptions 1
	  exception class_ref 146818 // IOException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 170114 "time"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 781826 "Clock"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Objects;
import java.util.TimeZone;
import static java.time.LocalTime.NANOS_PER_MINUTE;
import static java.time.LocalTime.NANOS_PER_SECOND;
${definition}"
      associated_elems
	class_ref 1049602 // Clock
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 781954 "DateTimeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 1050498 // DateTimeException
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 782338 "DayOfWeek"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.time.temporal.WeekFields;
import java.util.Locale;
${definition}"
      associated_elems
	class_ref 1050626 // DayOfWeek
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 782594 "Duration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
${definition}"
      associated_elems
	class_ref 1049858 // Duration
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 782850 "Instant"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1003778 // Instant
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 783106 "LocalDate"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.Era;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.time.zone.ZoneOffsetTransition;
import java.time.zone.ZoneRules;
import java.util.Objects;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoField.YEAR;
import static java.time.temporal.ChronoUnit.DAYS;
${definition}"
      associated_elems
	class_ref 1040770 // LocalDate
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 783362 "LocalDateTime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.chrono.ChronoLocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.time.zone.ZoneRules;
import java.util.Objects;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoField.NANO_OF_DAY;
import static java.time.temporal.ChronoUnit.FOREVER;
import static java.time.temporal.ChronoUnit.NANOS;
${definition}"
      associated_elems
	class_ref 1043970 // LocalDateTime
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 783490 "LocalTime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Objects;
import static java.time.temporal.ChronoField.HOUR_OF_DAY;
import static java.time.temporal.ChronoField.MICRO_OF_DAY;
import static java.time.temporal.ChronoField.MINUTE_OF_HOUR;
import static java.time.temporal.ChronoField.NANO_OF_DAY;
import static java.time.temporal.ChronoField.NANO_OF_SECOND;
import static java.time.temporal.ChronoField.SECOND_OF_DAY;
import static java.time.temporal.ChronoField.SECOND_OF_MINUTE;
import static java.time.temporal.ChronoUnit.NANOS;
${definition}"
      associated_elems
	class_ref 1043842 // LocalTime
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 783618 "Month"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.TextStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Locale;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoUnit.MONTHS;
${definition}"
      associated_elems
	class_ref 1053186 // Month
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 783746 "MonthDay"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Objects;
import static java.time.temporal.ChronoField.DAY_OF_MONTH;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
${definition}"
      associated_elems
	class_ref 1053826 // MonthDay
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 783874 "OffsetDateTime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.time.zone.ZoneRules;
import java.util.Comparator;
import java.util.Objects;
import static java.time.temporal.ChronoField.EPOCH_DAY;
import static java.time.temporal.ChronoField.INSTANT_SECONDS;
import static java.time.temporal.ChronoField.NANO_OF_DAY;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
import static java.time.temporal.ChronoUnit.FOREVER;
import static java.time.temporal.ChronoUnit.NANOS;
${definition}"
      associated_elems
	class_ref 1052034 // OffsetDateTime
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 784002 "OffsetTime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.time.zone.ZoneRules;
import java.util.Objects;
import static java.time.LocalTime.NANOS_PER_HOUR;
import static java.time.LocalTime.NANOS_PER_MINUTE;
import static java.time.LocalTime.NANOS_PER_SECOND;
import static java.time.LocalTime.SECONDS_PER_DAY;
import static java.time.temporal.ChronoField.NANO_OF_DAY;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
import static java.time.temporal.ChronoUnit.NANOS;
${definition}"
      associated_elems
	class_ref 1053570 // OffsetTime
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 784258 "Period"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ChronoPeriod;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
${definition}"
      associated_elems
	class_ref 1053442 // Period
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2008-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 784386 "Ser"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.Externalizable;
import java.io.IOException;
import java.io.InvalidClassException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.StreamCorruptedException;
${definition}"
      associated_elems
	class_ref 1053954 // Ser
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2011-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 784514 "Year"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.DateTimeParseException;
import java.time.format.SignStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Objects;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoField.YEAR;
import static java.time.temporal.ChronoField.YEAR_OF_ERA;
import static java.time.temporal.ChronoUnit.CENTURIES;
import static java.time.temporal.ChronoUnit.DECADES;
import static java.time.temporal.ChronoUnit.ERAS;
import static java.time.temporal.ChronoUnit.MILLENNIA;
import static java.time.temporal.ChronoUnit.YEARS;
${definition}"
      associated_elems
	class_ref 1054082 // Year
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 784642 "YearMonth"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.DateTimeParseException;
import java.time.format.SignStyle;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.util.Objects;
import static java.time.temporal.ChronoField.ERA;
import static java.time.temporal.ChronoField.MONTH_OF_YEAR;
import static java.time.temporal.ChronoField.PROLEPTIC_MONTH;
import static java.time.temporal.ChronoField.YEAR;
import static java.time.temporal.ChronoField.YEAR_OF_ERA;
import static java.time.temporal.ChronoUnit.CENTURIES;
import static java.time.temporal.ChronoUnit.DECADES;
import static java.time.temporal.ChronoUnit.ERAS;
import static java.time.temporal.ChronoUnit.MILLENNIA;
import static java.time.temporal.ChronoUnit.MONTHS;
import static java.time.temporal.ChronoUnit.YEARS;
${definition}"
      associated_elems
	class_ref 1054210 // YearMonth
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 784898 "ZonedDateTime"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataOutput;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.chrono.ChronoZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.temporal.ChronoField;
import java.time.temporal.ChronoUnit;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAmount;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.TemporalUnit;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.time.zone.ZoneOffsetTransition;
import java.time.zone.ZoneRules;
import java.util.List;
import java.util.Objects;
import static java.time.temporal.ChronoField.INSTANT_SECONDS;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
import static java.time.temporal.ChronoUnit.FOREVER;
import static java.time.temporal.ChronoUnit.NANOS;
${definition}"
      associated_elems
	class_ref 1052290 // ZonedDateTime
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 785026 "ZoneId"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.TextStyle;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.zone.ZoneRules;
import java.time.zone.ZoneRulesException;
import java.time.zone.ZoneRulesProvider;
import java.util.Collections;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TimeZone;
${definition}"
      associated_elems
	class_ref 1049730 // ZoneId
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 785154 "ZoneOffset"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.temporal.ChronoField;
import java.time.temporal.Temporal;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalField;
import java.time.temporal.TemporalQueries;
import java.time.temporal.TemporalQuery;
import java.time.temporal.UnsupportedTemporalTypeException;
import java.time.temporal.ValueRange;
import java.time.zone.ZoneRules;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import static java.time.LocalTime.MINUTES_PER_HOUR;
import static java.time.LocalTime.SECONDS_PER_HOUR;
import static java.time.LocalTime.SECONDS_PER_MINUTE;
import static java.time.temporal.ChronoField.OFFSET_SECONDS;
${definition}"
      associated_elems
	class_ref 1052162 // ZoneOffset
      end
      comment "Copyright (c) 2012, 2015, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.



























Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end

    artifact 785282 "ZoneRegion"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.time.zone.ZoneRules;
import java.time.zone.ZoneRulesException;
import java.time.zone.ZoneRulesProvider;
import java.util.Objects;
${definition}"
      associated_elems
	class_ref 1054466 // ZoneRegion
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.






















Copyright (c) 2007-2012, Stephen Colebourne & Michael Nascimento Santos

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

 * Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.

 * Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

 * Neither the name of JSR-310 nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"
    end
  end

  package_ref 183426 // temporal

  package_ref 183554 // format

  package_ref 183682 // chrono

  package_ref 183810 // zone
end
