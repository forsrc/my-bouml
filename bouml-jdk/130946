format 222
"reflect" // jdk1.8::java::lang::reflect
  revision 3
  modified_by 2 "forsrc"
  // class settings
  
  classdiagramsettings member_max_width 0 end
  
  classcompositediagramsettings end
  
  usecasediagramsettings end
  
  sequencediagramsettings end
  
  collaborationdiagramsettings end
  
  objectdiagramsettings end
  
  objectcompositediagramsettings end
  
  componentdiagramsettings
   end
  
  deploymentdiagramsettings
   end
  
  statediagramsettings
   end
  
  activitydiagramsettings
   end
  
  java_dir "/Volumes/My/My/git/MyGit/my-bouml/jdk1.8/java/lang/reflect/"
  java_package "java.lang.reflect"
  classview 129666 "reflect"
    
    classdiagramsettings member_max_width 0 end
    
    classcompositediagramsettings end
    
    collaborationdiagramsettings end
    
    objectdiagramsettings end
    
    objectcompositediagramsettings end
    
    sequencediagramsettings end
    
    statediagramsettings
     end
    
    
    activitydiagramsettings
     end
    class 137858 "Method"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code Method} provides information about, and access to, a single method
on a class or interface.  The reflected method may be a class method
or an instance method (including an abstract method).

<p>A {@code Method} permits widening conversions to occur when matching the
actual parameters to invoke with the underlying method's formal
parameters, but it throws an {@code IllegalArgumentException} if a
narrowing conversion would occur.

@see Member
@see java.lang.Class
@see java.lang.Class#getMethods()
@see java.lang.Class#getMethod(String, Class[])
@see java.lang.Class#getDeclaredMethods()
@see java.lang.Class#getDeclaredMethod(String, Class[])

@author Kenneth Russell
@author Nakul Saraiya
"
      classrelation 3224066 // <generalisation>
	relation 3224066 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3224066 // <generalisation>
	  b parent class_ref 931586 // Executable
      end

      classrelation 3224194 // clazz (<unidirectional association>)
	relation 3224194 --->
	  a role_name "clazz" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3224194 // clazz (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 1737858 "slot"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3224322 // name (<unidirectional association>)
	relation 3224322 --->
	  a role_name "name" private
	    comment " This is guaranteed to be interned by the VM in the 1.4
 reflection implementation
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3224322 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3224450 // returnType (<unidirectional association>)
	relation 3224450 --->
	  a role_name "returnType" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3224450 // returnType (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3224578 // parameterTypes (<unidirectional association>)
	relation 3224578 --->
	  a role_name "parameterTypes" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3224578 // parameterTypes (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3224706 // exceptionTypes (<unidirectional association>)
	relation 3224706 --->
	  a role_name "exceptionTypes" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3224706 // exceptionTypes (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 1737986 "modifiers"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3224834 // signature (<unidirectional association>)
	relation 3224834 --->
	  a role_name "signature" private
	    comment " Generics and annotations support
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3224834 // signature (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1738114 "genericInfo"
	private explicit_type "MethodRepository"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " generic info repository; lazily initialized
"
      end

      attribute 1738242 "annotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1738370 "parameterAnnotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1738498 "annotationDefault"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1738626 "methodAccessor"
	volatile private explicit_type "MethodAccessor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3224962 // root (<unidirectional association>)
	relation 3224962 --->
	  a role_name "root" private
	    comment " For sharing of MethodAccessors. This branching structure is
 currently only two levels deep (i.e., one root Method and
 potentially many Method objects pointing to it.)

 If this branching structure would ever contain cycles, deadlocks can
 occur in annotation code.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3224962 // root (<unidirectional association>)
	  b parent class_ref 137858 // Method
      end

      operation 7349762 "getGenericSignature"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generics infrastructure"
      end

      operation 7349890 "getFactory"
	private explicit_return_type "GenericsFactory"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessor for factory"
      end

      operation 7350018 "getGenericInfo"
	package explicit_return_type "MethodRepository"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Accessor for generic info repository"
      end

      operation 7350146 "Method"
	package explicit_return_type ""
	nparams 11
	  param inout name "declaringClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "parameterTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "returnType" type class_ref 130818 // Class
	  param inout name "checkedExceptions" type class_ref 130818 // Class
	multiplicity "[]"
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param inout name "signature" type class_ref 128130 // String
	  param inout name "annotations" explicit_type "byte"
	multiplicity "[]"
	  param inout name "parameterAnnotations" explicit_type "byte"
	multiplicity "[]"
	  param inout name "annotationDefault" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?>[] ${p2}, ${t3}<?> ${p3}, ${t4}<?>[] ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10}[] ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor used by ReflectAccess to enable
instantiation of these objects in Java code from the java.lang
package via sun.reflect.LangReflectAccess.
"
      end

      operation 7350274 "copy"
	package return_type class_ref 137858 // Method
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private routine (exposed to java.lang.Class via
ReflectAccess) which returns a copy of this Method. The copy's
\"root\" field points to this Method.
"
      end

      operation 7350402 "getRoot"
	package return_type class_ref 931586 // Executable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Used by Excecutable for annotation sharing.
"
      end

      operation 7350530 "hasGenericInformation"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7350658 "getAnnotationBytes"
	package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7350786 "getDeclaringClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7350914 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the name of the method represented by this {@code Method}
object, as a {@code String}.
"
      end

      operation 7351042 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7351170 "getTypeParameters"
	public return_type class_ref 930946 // TypeVariable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Method>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings({\"rawtypes\", \"unchecked\"})
"
	
	
	
	comment "{@inheritDoc}
@throws GenericSignatureFormatError {@inheritDoc}
@since 1.5
"
      end

      operation 7351298 "getReturnType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Class} object that represents the formal return type
of the method represented by this {@code Method} object.

@return the return type for the method this object represents
"
      end

      operation 7351426 "getGenericReturnType"
	public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Type} object that represents the formal return
type of the method represented by this {@code Method} object.

<p>If the return type is a parameterized type,
the {@code Type} object returned must accurately reflect
the actual type parameters used in the source code.

<p>If the return type is a type variable or a parameterized type, it
is created. Otherwise, it is resolved.

@return  a {@code Type} object that represents the formal return
    type of the underlying  method
@throws GenericSignatureFormatError
    if the generic method signature does not conform to the format
    specified in
    <cite>The Java&trade; Virtual Machine Specification</cite>
@throws TypeNotPresentException if the underlying method's
    return type refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if the
    underlying method's return typed refers to a parameterized
    type that cannot be instantiated for any reason
@since 1.5
"
      end

      operation 7351554 "getParameterTypes"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7351682 "getParameterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.8
"
      end

      operation 7351810 "getGenericParameterTypes"
	public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws GenericSignatureFormatError {@inheritDoc}
@throws TypeNotPresentException {@inheritDoc}
@throws MalformedParameterizedTypeException {@inheritDoc}
@since 1.5
"
      end

      operation 7351938 "getExceptionTypes"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7352066 "getGenericExceptionTypes"
	public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws GenericSignatureFormatError {@inheritDoc}
@throws TypeNotPresentException {@inheritDoc}
@throws MalformedParameterizedTypeException {@inheritDoc}
@since 1.5
"
      end

      operation 7352194 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code Method} against the specified object.  Returns
true if the objects are the same.  Two {@code Methods} are the same if
they were declared by the same class and have the same name
and formal parameter types and return type.
"
      end

      operation 7352322 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this {@code Method}.  The hashcode is computed
as the exclusive-or of the hashcodes for the underlying
method's declaring class name and the method's name.
"
      end

      operation 7352450 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this {@code Method}.  The string is
formatted as the method access modifiers, if any, followed by
the method return type, followed by a space, followed by the
class declaring the method, followed by a period, followed by
the method name, followed by a parenthesized, comma-separated
list of the method's formal parameter types. If the method
throws checked exceptions, the parameter list is followed by a
space, followed by the word throws followed by a
comma-separated list of the thrown exception types.
For example:
<pre>
   public boolean java.lang.Object.equals(java.lang.Object)
</pre>

<p>The access modifiers are placed in canonical order as
specified by \"The Java Language Specification\".  This is
{@code public}, {@code protected} or {@code private} first,
and then other modifiers in the following order:
{@code abstract}, {@code default}, {@code static}, {@code final},
{@code synchronized}, {@code native}, {@code strictfp}.

@return a string describing this {@code Method}

@jls 8.4.3 Method Modifiers
"
      end

      operation 7352578 "specificToStringHeader"
	package explicit_return_type "void"
	nparams 1
	  param inout name "sb" type class_ref 173058 // StringBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7352706 "toGenericString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string describing this {@code Method}, including
type parameters.  The string is formatted as the method access
modifiers, if any, followed by an angle-bracketed
comma-separated list of the method's type parameters, if any,
followed by the method's generic return type, followed by a
space, followed by the class declaring the method, followed by
a period, followed by the method name, followed by a
parenthesized, comma-separated list of the method's generic
formal parameter types.

If this method was declared to take a variable number of
arguments, instead of denoting the last parameter as
\"<tt><i>Type</i>[]</tt>\", it is denoted as
\"<tt><i>Type</i>...</tt>\".

A space is used to separate access modifiers from one another
and from the type parameters or return type.  If there are no
type parameters, the type parameter list is elided; if the type
parameter list is present, a space separates the list from the
class name.  If the method is declared to throw exceptions, the
parameter list is followed by a space, followed by the word
throws followed by a comma-separated list of the generic thrown
exception types.

<p>The access modifiers are placed in canonical order as
specified by \"The Java Language Specification\".  This is
{@code public}, {@code protected} or {@code private} first,
and then other modifiers in the following order:
{@code abstract}, {@code default}, {@code static}, {@code final},
{@code synchronized}, {@code native}, {@code strictfp}.

@return a string describing this {@code Method},
include type parameters

@since 1.5

@jls 8.4.3 Method Modifiers
"
      end

      operation 7352834 "specificToGenericStringHeader"
	package explicit_return_type "void"
	nparams 1
	  param inout name "sb" type class_ref 173058 // StringBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7352962 "invoke"
	public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "" explicit_type "Object...args"
	nexceptions 3
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 193410 // InvocationTargetException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Invokes the underlying method represented by this {@code Method}
object, on the specified object with the specified parameters.
Individual parameters are automatically unwrapped to match
primitive formal parameters, and both primitive and reference
parameters are subject to method invocation conversions as
necessary.

<p>If the underlying method is static, then the specified {@code obj}
argument is ignored. It may be null.

<p>If the number of formal parameters required by the underlying method is
0, the supplied {@code args} array may be of length 0 or null.

<p>If the underlying method is an instance method, it is invoked
using dynamic method lookup as documented in The Java Language
Specification, Second Edition, section 15.12.4.4; in particular,
overriding based on the runtime type of the target object will occur.

<p>If the underlying method is static, the class that declared
the method is initialized if it has not already been initialized.

<p>If the method completes normally, the value it returns is
returned to the caller of invoke; if the value has a primitive
type, it is first appropriately wrapped in an object. However,
if the value has the type of an array of a primitive type, the
elements of the array are <i>not</i> wrapped in objects; in
other words, an array of primitive type is returned.  If the
underlying method return type is void, the invocation returns
null.

@param obj  the object the underlying method is invoked from
@param args the arguments used for the method call
@return the result of dispatching the method represented by
this object on {@code obj} with parameters
{@code args}

@exception IllegalAccessException    if this {@code Method} object
             is enforcing Java language access control and the underlying
             method is inaccessible.
@exception IllegalArgumentException  if the method is an
             instance method and the specified object argument
             is not an instance of the class or interface
             declaring the underlying method (or of a subclass
             or implementor thereof); if the number of actual
             and formal parameters differ; if an unwrapping
             conversion for primitive arguments fails; or if,
             after possible unwrapping, a parameter value
             cannot be converted to the corresponding formal
             parameter type by a method invocation conversion.
@exception InvocationTargetException if the underlying method
             throws an exception.
@exception NullPointerException      if the specified object is null
             and the method is an instance method.
@exception ExceptionInInitializerError if the initialization
provoked by this method fails.
"
      end

      operation 7353090 "isBridge"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this method is a bridge
method; returns {@code false} otherwise.

@return true if and only if this method is a bridge
method as defined by the Java Language Specification.
@since 1.5
"
      end

      operation 7353218 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@since 1.5
"
      end

      operation 7353346 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@jls 13.1 The Form of a Binary
@since 1.5
"
      end

      operation 7353474 "isDefault"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this method is a default
method; returns {@code false} otherwise.

A default method is a public non-abstract instance method, that
is, a non-static method with a body, declared in an interface
type.

@return true if and only if this method is a default
method as defined by the Java Language Specification.
@since 1.8
"
      end

      operation 7353602 "acquireMethodAccessor"
	private explicit_return_type "MethodAccessor"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NOTE that there is no synchronization used here. It is correct
 (though not efficient) to generate more than one MethodAccessor
 for a given Method. However, avoiding synchronization will
 probably make the implementation more scalable."
      end

      operation 7353730 "getMethodAccessor"
	package explicit_return_type "MethodAccessor"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns MethodAccessor for this Method object, not looking up
 the chain to the root"
      end

      operation 7353858 "setMethodAccessor"
	package explicit_return_type "void"
	nparams 1
	  param inout name "accessor" explicit_type "MethodAccessor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the MethodAccessor for this Method object and
 (recursively) its root"
      end

      operation 7353986 "getDefaultValue"
	public return_type class_ref 129538 // Object
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the default value for the annotation member represented by
this {@code Method} instance.  If the member is of a primitive type,
an instance of the corresponding wrapper type is returned. Returns
null if no default is associated with the member, or if the method
instance does not represent a declared member of an annotation type.

@return the default value for the annotation member represented
    by this {@code Method} instance.
@throws TypeNotPresentException if the annotation is of type
    {@link Class} and no definition can be found for the
    default class value.
@since  1.5
"
      end

      operation 7354114 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@throws NullPointerException  {@inheritDoc}
@since 1.5
"
      end

      operation 7354242 "getDeclaredAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.5
"
      end

      operation 7354370 "getParameterAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@since 1.5
"
      end

      operation 7354498 "getAnnotatedReturnType"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@since 1.8
"
      end

      operation 7354626 "handleParameterNumberMismatch"
	package explicit_return_type "void"
	nparams 2
	  param in name "resultLength" explicit_type "int"
	  param in name "numParameters" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 189186 "Constructor"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code Constructor} provides information about, and access to, a single
constructor for a class.

<p>{@code Constructor} permits widening conversions to occur when matching the
actual parameters to newInstance() with the underlying
constructor's formal parameters, but throws an
{@code IllegalArgumentException} if a narrowing conversion would occur.

@param <T> the class in which the constructor is declared

@see Member
@see java.lang.Class
@see java.lang.Class#getConstructors()
@see java.lang.Class#getConstructor(Class[])
@see java.lang.Class#getDeclaredConstructors()

@author      Kenneth Russell
@author      Nakul Saraiya
"
      classrelation 3221506 // <generalisation>
	relation 3221506 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3221506 // <generalisation>
	  b parent class_ref 931586 // Executable
      end

      classrelation 3221634 // clazz (<unidirectional association>)
	relation 3221634 --->
	  a role_name "clazz" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 3221634 // clazz (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 1735810 "slot"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3221762 // parameterTypes (<unidirectional association>)
	relation 3221762 --->
	  a role_name "parameterTypes" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3221762 // parameterTypes (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3221890 // exceptionTypes (<unidirectional association>)
	relation 3221890 --->
	  a role_name "exceptionTypes" multiplicity "[]" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3221890 // exceptionTypes (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 1735938 "modifiers"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3222018 // signature (<unidirectional association>)
	relation 3222018 --->
	  a role_name "signature" private
	    comment " Generics and annotations support
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3222018 // signature (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1736066 "genericInfo"
	private explicit_type "ConstructorRepository"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " generic info repository; lazily initialized
"
      end

      attribute 1736194 "annotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1736322 "parameterAnnotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7337986 "getFactory"
	cpp_inline private explicit_return_type "GenericsFactory"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generics infrastructure
 Accessor for factory"
      end

      operation 7338114 "getGenericInfo"
	cpp_inline package explicit_return_type "ConstructorRepository"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " Accessor for generic info repository"
      end

      attribute 1736450 "constructorAccessor"
	volatile private explicit_type "ConstructorAccessor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3222146 // root (<unidirectional association>)
	relation 3222146 --->
	  a role_name "root" private
	    comment " For sharing of ConstructorAccessors. This branching structure
 is currently only two levels deep (i.e., one root Constructor
 and potentially many Constructor objects pointing to it.)

 If this branching structure would ever contain cycles, deadlocks can
 occur in annotation code.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	    classrelation_ref 3222146 // root (<unidirectional association>)
	  b parent class_ref 189186 // Constructor
      end

      operation 7338242 "getRoot"
	cpp_inline package return_type class_ref 931586 // Executable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Used by Excecutable for annotation sharing.
"
      end

      operation 7338370 "Constructor"
	cpp_inline package explicit_return_type ""
	nparams 8
	  param inout name "declaringClass" type class_ref 130818 // Class
	  param inout name "parameterTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "checkedExceptions" type class_ref 130818 // Class
	multiplicity "[]"
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param inout name "signature" type class_ref 128130 // String
	  param inout name "annotations" explicit_type "byte"
	multiplicity "[]"
	  param inout name "parameterAnnotations" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<?>[] ${p1}, ${t2}<?>[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor used by ReflectAccess to enable
instantiation of these objects in Java code from the java.lang
package via sun.reflect.LangReflectAccess.
"
      end

      operation 7338498 "copy"
	cpp_inline package return_type class_ref 189186 // Constructor
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private routine (exposed to java.lang.Class via
ReflectAccess) which returns a copy of this Constructor. The copy's
\"root\" field points to this Constructor.
"
      end

      operation 7338626 "hasGenericInformation"
	cpp_inline package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7338754 "getAnnotationBytes"
	cpp_inline package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7338882 "getDeclaringClass"
	cpp_inline public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7339010 "getName"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns the name of this constructor, as a string.  This is
the binary name of the constructor's declaring class.
"
      end

      operation 7339138 "getModifiers"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7339266 "getTypeParameters"
	cpp_inline public return_type class_ref 930946 // TypeVariable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Constructor<T>>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
@SuppressWarnings({\"rawtypes\", \"unchecked\"})
"
	
	
	
	comment "{@inheritDoc}
@throws GenericSignatureFormatError {@inheritDoc}
@since 1.5
"
      end

      operation 7339394 "getParameterTypes"
	cpp_inline public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7339522 "getParameterCount"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.8
"
      end

      operation 7339650 "getGenericParameterTypes"
	cpp_inline public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws GenericSignatureFormatError {@inheritDoc}
@throws TypeNotPresentException {@inheritDoc}
@throws MalformedParameterizedTypeException {@inheritDoc}
@since 1.5
"
      end

      operation 7339778 "getExceptionTypes"
	cpp_inline public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7339906 "getGenericExceptionTypes"
	cpp_inline public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws GenericSignatureFormatError {@inheritDoc}
@throws TypeNotPresentException {@inheritDoc}
@throws MalformedParameterizedTypeException {@inheritDoc}
@since 1.5
"
      end

      operation 7340034 "equals"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code Constructor} against the specified object.
Returns true if the objects are the same.  Two {@code Constructor} objects are
the same if they were declared by the same class and have the
same formal parameter types.
"
      end

      operation 7340162 "hashCode"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this {@code Constructor}. The hashcode is
the same as the hashcode for the underlying constructor's
declaring class name.
"
      end

      operation 7340290 "toString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this {@code Constructor}.  The string is
formatted as the constructor access modifiers, if any,
followed by the fully-qualified name of the declaring class,
followed by a parenthesized, comma-separated list of the
constructor's formal parameter types.  For example:
<pre>
   public java.util.Hashtable(int,float)
</pre>

<p>The only possible modifiers for constructors are the access
modifiers {@code public}, {@code protected} or
{@code private}.  Only one of these may appear, or none if the
constructor has default (package) access.

@return a string describing this {@code Constructor}
@jls 8.8.3. Constructor Modifiers
"
      end

      operation 7340418 "specificToStringHeader"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "sb" type class_ref 173058 // StringBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7340546 "toGenericString"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string describing this {@code Constructor},
including type parameters.  The string is formatted as the
constructor access modifiers, if any, followed by an
angle-bracketed comma separated list of the constructor's type
parameters, if any, followed by the fully-qualified name of the
declaring class, followed by a parenthesized, comma-separated
list of the constructor's generic formal parameter types.

If this constructor was declared to take a variable number of
arguments, instead of denoting the last parameter as
\"<tt><i>Type</i>[]</tt>\", it is denoted as
\"<tt><i>Type</i>...</tt>\".

A space is used to separate access modifiers from one another
and from the type parameters or return type.  If there are no
type parameters, the type parameter list is elided; if the type
parameter list is present, a space separates the list from the
class name.  If the constructor is declared to throw
exceptions, the parameter list is followed by a space, followed
by the word \"{@code throws}\" followed by a
comma-separated list of the thrown exception types.

<p>The only possible modifiers for constructors are the access
modifiers {@code public}, {@code protected} or
{@code private}.  Only one of these may appear, or none if the
constructor has default (package) access.

@return a string describing this {@code Constructor},
include type parameters

@since 1.5
@jls 8.8.3. Constructor Modifiers
"
      end

      operation 7340674 "specificToGenericStringHeader"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "sb" type class_ref 173058 // StringBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7340802 "newInstance"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "initargs" type class_ref 129538 // Object
	nexceptions 4
	  exception class_ref 193282 // InstantiationException
	  exception class_ref 321538 // IllegalAccessException
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 193410 // InvocationTargetException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ... ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Uses the constructor represented by this {@code Constructor} object to
create and initialize a new instance of the constructor's
declaring class, with the specified initialization parameters.
Individual parameters are automatically unwrapped to match
primitive formal parameters, and both primitive and reference
parameters are subject to method invocation conversions as necessary.

<p>If the number of formal parameters required by the underlying constructor
is 0, the supplied {@code initargs} array may be of length 0 or null.

<p>If the constructor's declaring class is an inner class in a
non-static context, the first argument to the constructor needs
to be the enclosing instance; see section 15.9.3 of
<cite>The Java&trade; Language Specification</cite>.

<p>If the required access and argument checks succeed and the
instantiation will proceed, the constructor's declaring class
is initialized if it has not already been initialized.

<p>If the constructor completes normally, returns the newly
created and initialized instance.

@param initargs array of objects to be passed as arguments to
the constructor call; values of primitive types are wrapped in
a wrapper object of the appropriate type (e.g. a {@code float}
in a {@link java.lang.Float Float})

@return a new object created by calling the constructor
this object represents

@exception IllegalAccessException    if this {@code Constructor} object
             is enforcing Java language access control and the underlying
             constructor is inaccessible.
@exception IllegalArgumentException  if the number of actual
             and formal parameters differ; if an unwrapping
             conversion for primitive arguments fails; or if,
             after possible unwrapping, a parameter value
             cannot be converted to the corresponding formal
             parameter type by a method invocation conversion; if
             this constructor pertains to an enum type.
@exception InstantiationException    if the class that declares the
             underlying constructor represents an abstract class.
@exception InvocationTargetException if the underlying constructor
             throws an exception.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
"
      end

      operation 7340930 "isVarArgs"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@since 1.5
"
      end

      operation 7341058 "isSynthetic"
	cpp_inline public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@jls 13.1 The Form of a Binary
@since 1.5
"
      end

      operation 7341186 "acquireConstructorAccessor"
	cpp_inline private explicit_return_type "ConstructorAccessor"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NOTE that there is no synchronization used here. It is correct
 (though not efficient) to generate more than one
 ConstructorAccessor for a given Constructor. However, avoiding
 synchronization will probably make the implementation more
 scalable."
      end

      operation 7341314 "getConstructorAccessor"
	cpp_inline package explicit_return_type "ConstructorAccessor"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns ConstructorAccessor for this Constructor object, not
 looking up the chain to the root"
      end

      operation 7341442 "setConstructorAccessor"
	cpp_inline package explicit_return_type "void"
	nparams 1
	  param inout name "accessor" explicit_type "ConstructorAccessor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the ConstructorAccessor for this Constructor object and
 (recursively) its root"
      end

      operation 7341570 "getSlot"
	cpp_inline package explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7341698 "getSignature"
	cpp_inline package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7341826 "getRawAnnotations"
	cpp_inline package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7341954 "getRawParameterAnnotations"
	cpp_inline package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7342082 "getAnnotation"
	cpp_inline public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@throws NullPointerException  {@inheritDoc}
@since 1.5
"
      end

      operation 7342210 "getDeclaredAnnotations"
	cpp_inline public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@since 1.5
"
      end

      operation 7342338 "getParameterAnnotations"
	cpp_inline public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@since 1.5
"
      end

      operation 7342466 "handleParameterNumberMismatch"
	cpp_inline package explicit_return_type "void"
	nparams 2
	  param in name "resultLength" explicit_type "int"
	  param in name "numParameters" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 7342594 "getAnnotatedReturnType"
	cpp_inline public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@since 1.8
"
      end

      operation 7342722 "getAnnotatedReceiverType"
	cpp_inline public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@since 1.8
"
      end
    end

    class 189698 "Field"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A {@code Field} provides information about, and dynamic access to, a
single field of a class or an interface.  The reflected field may
be a class (static) field or an instance field.

<p>A {@code Field} permits widening conversions to occur during a get or
set access operation, but throws an {@code IllegalArgumentException} if a
narrowing conversion would occur.

@see Member
@see java.lang.Class
@see java.lang.Class#getFields()
@see java.lang.Class#getField(String)
@see java.lang.Class#getDeclaredFields()
@see java.lang.Class#getDeclaredField(String)

@author Kenneth Russell
@author Nakul Saraiya
"
      classrelation 3222274 // <generalisation>
	relation 3222274 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3222274 // <generalisation>
	  b parent class_ref 957058 // AccessibleObject
      end

      classrelation 3222402 // <realization>
	relation 3222402 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3222402 // <realization>
	  b parent class_ref 194690 // Member
      end

      classrelation 3222530 // clazz (<unidirectional association>)
	relation 3222530 --->
	  a role_name "clazz" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3222530 // clazz (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 1736578 "slot"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3222658 // name (<unidirectional association>)
	relation 3222658 --->
	  a role_name "name" private
	    comment " This is guaranteed to be interned by the VM in the 1.4
 reflection implementation
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3222658 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      classrelation 3222786 // type (<unidirectional association>)
	relation 3222786 --->
	  a role_name "type" private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3222786 // type (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      attribute 1736706 "modifiers"
	private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3222914 // signature (<unidirectional association>)
	relation 3222914 --->
	  a role_name "signature" private
	    comment " Generics and annotations support
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3222914 // signature (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1736834 "genericInfo"
	private explicit_type "FieldRepository"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " generic info repository; lazily initialized
"
      end

      attribute 1736962 "annotations"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1737090 "fieldAccessor"
	private explicit_type "FieldAccessor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cached field accessor created without override
"
      end

      attribute 1737218 "overrideFieldAccessor"
	private explicit_type "FieldAccessor"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Cached field accessor created with override
"
      end

      classrelation 3223042 // root (<unidirectional association>)
	relation 3223042 --->
	  a role_name "root" private
	    comment " For sharing of FieldAccessors. This branching structure is
 currently only two levels deep (i.e., one root Field and
 potentially many Field objects pointing to it.)

 If this branching structure would ever contain cycles, deadlocks can
 occur in annotation code.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3223042 // root (<unidirectional association>)
	  b parent class_ref 189698 // Field
      end

      operation 7342850 "getGenericSignature"
	private return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Generics infrastructure"
      end

      operation 7342978 "getFactory"
	private explicit_return_type "GenericsFactory"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessor for factory"
      end

      operation 7343106 "getGenericInfo"
	private explicit_return_type "FieldRepository"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Accessor for generic info repository"
      end

      operation 7343234 "Field"
	package explicit_return_type ""
	nparams 7
	  param inout name "declaringClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param inout name "signature" type class_ref 128130 // String
	  param inout name "annotations" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor used by ReflectAccess to enable
instantiation of these objects in Java code from the java.lang
package via sun.reflect.LangReflectAccess.
"
      end

      operation 7343362 "copy"
	package return_type class_ref 189698 // Field
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private routine (exposed to java.lang.Class via
ReflectAccess) which returns a copy of this Field. The copy's
\"root\" field points to this Field.
"
      end

      operation 7343490 "getDeclaringClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Class} object representing the class or interface
that declares the field represented by this {@code Field} object.
"
      end

      operation 7343618 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the field represented by this {@code Field} object.
"
      end

      operation 7343746 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java language modifiers for the field represented
by this {@code Field} object, as an integer. The {@code Modifier} class should
be used to decode the modifiers.

@see Modifier
"
      end

      operation 7343874 "isEnumConstant"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this field represents an element of
an enumerated type; returns {@code false} otherwise.

@return {@code true} if and only if this field represents an element of
an enumerated type.
@since 1.5
"
      end

      operation 7344002 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this field is a synthetic
field; returns {@code false} otherwise.

@return true if and only if this field is a synthetic
field as defined by the Java Language Specification.
@since 1.5
"
      end

      operation 7344130 "getType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Class} object that identifies the
declared type for the field represented by this
{@code Field} object.

@return a {@code Class} object identifying the declared
type of the field represented by this object
"
      end

      operation 7344258 "getGenericType"
	public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Type} object that represents the declared type for
the field represented by this {@code Field} object.

<p>If the {@code Type} is a parameterized type, the
{@code Type} object returned must accurately reflect the
actual type parameters used in the source code.

<p>If the type of the underlying field is a type variable or a
parameterized type, it is created. Otherwise, it is resolved.

@return a {@code Type} object that represents the declared type for
    the field represented by this {@code Field} object
@throws GenericSignatureFormatError if the generic field
    signature does not conform to the format specified in
    <cite>The Java&trade; Virtual Machine Specification</cite>
@throws TypeNotPresentException if the generic type
    signature of the underlying field refers to a non-existent
    type declaration
@throws MalformedParameterizedTypeException if the generic
    signature of the underlying field refers to a parameterized type
    that cannot be instantiated for any reason
@since 1.5
"
      end

      operation 7344386 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares this {@code Field} against the specified object.  Returns
true if the objects are the same.  Two {@code Field} objects are the same if
they were declared by the same class and have the same name
and type.
"
      end

      operation 7344514 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hashcode for this {@code Field}.  This is computed as the
exclusive-or of the hashcodes for the underlying field's
declaring class name and its name.
"
      end

      operation 7344642 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this {@code Field}.  The format is
the access modifiers for the field, if any, followed
by the field type, followed by a space, followed by
the fully-qualified name of the class declaring the field,
followed by a period, followed by the name of the field.
For example:
<pre>
   public static final int java.lang.Thread.MIN_PRIORITY
   private int java.io.FileDescriptor.fd
</pre>

<p>The modifiers are placed in canonical order as specified by
\"The Java Language Specification\".  This is {@code public},
{@code protected} or {@code private} first, and then other
modifiers in the following order: {@code static}, {@code final},
{@code transient}, {@code volatile}.

@return a string describing this {@code Field}
@jls 8.3.1 Field Modifiers
"
      end

      operation 7344770 "toGenericString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this {@code Field}, including
its generic type.  The format is the access modifiers for the
field, if any, followed by the generic field type, followed by
a space, followed by the fully-qualified name of the class
declaring the field, followed by a period, followed by the name
of the field.

<p>The modifiers are placed in canonical order as specified by
\"The Java Language Specification\".  This is {@code public},
{@code protected} or {@code private} first, and then other
modifiers in the following order: {@code static}, {@code final},
{@code transient}, {@code volatile}.

@return a string describing this {@code Field}, including
its generic type

@since 1.5
@jls 8.3.1 Field Modifiers
"
      end

      operation 7344898 "get"
	public return_type class_ref 129538 // Object
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Returns the value of the field represented by this {@code Field}, on
the specified object. The value is automatically wrapped in an
object if it has a primitive type.

<p>The underlying field's value is obtained as follows:

<p>If the underlying field is a static field, the {@code obj} argument
is ignored; it may be null.

<p>Otherwise, the underlying field is an instance field.  If the
specified {@code obj} argument is null, the method throws a
{@code NullPointerException}. If the specified object is not an
instance of the class or interface declaring the underlying
field, the method throws an {@code IllegalArgumentException}.

<p>If this {@code Field} object is enforcing Java language access control, and
the underlying field is inaccessible, the method throws an
{@code IllegalAccessException}.
If the underlying field is static, the class that declared the
field is initialized if it has not already been initialized.

<p>Otherwise, the value is retrieved from the underlying instance
or static field.  If the field has a primitive type, the value
is wrapped in an object before being returned, otherwise it is
returned as is.

<p>If the field is hidden in the type of {@code obj},
the field's value is obtained according to the preceding rules.

@param obj object from which the represented field's value is
to be extracted
@return the value of the represented field in object
{@code obj}; primitive values are wrapped in an appropriate
object before being returned

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof).
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
"
      end

      operation 7345026 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Gets the value of a static or instance {@code boolean} field.

@param obj the object to extract the {@code boolean} value
from
@return the value of the {@code boolean} field

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor
             thereof), or if the field value cannot be
             converted to the type {@code boolean} by a
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get
"
      end

      operation 7345154 "getByte"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Gets the value of a static or instance {@code byte} field.

@param obj the object to extract the {@code byte} value
from
@return the value of the {@code byte} field

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor
             thereof), or if the field value cannot be
             converted to the type {@code byte} by a
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get
"
      end

      operation 7345282 "getChar"
	public explicit_return_type "char"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Gets the value of a static or instance field of type
{@code char} or of another primitive type convertible to
type {@code char} via a widening conversion.

@param obj the object to extract the {@code char} value
from
@return the value of the field converted to type {@code char}

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor
             thereof), or if the field value cannot be
             converted to the type {@code char} by a
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see Field#get
"
      end

      operation 7345410 "getShort"
	public explicit_return_type "short"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Gets the value of a static or instance field of type
{@code short} or of another primitive type convertible to
type {@code short} via a widening conversion.

@param obj the object to extract the {@code short} value
from
@return the value of the field converted to type {@code short}

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor
             thereof), or if the field value cannot be
             converted to the type {@code short} by a
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get
"
      end

      operation 7345538 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Gets the value of a static or instance field of type
{@code int} or of another primitive type convertible to
type {@code int} via a widening conversion.

@param obj the object to extract the {@code int} value
from
@return the value of the field converted to type {@code int}

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor
             thereof), or if the field value cannot be
             converted to the type {@code int} by a
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get
"
      end

      operation 7345666 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Gets the value of a static or instance field of type
{@code long} or of another primitive type convertible to
type {@code long} via a widening conversion.

@param obj the object to extract the {@code long} value
from
@return the value of the field converted to type {@code long}

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor
             thereof), or if the field value cannot be
             converted to the type {@code long} by a
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get
"
      end

      operation 7345794 "getFloat"
	public explicit_return_type "float"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Gets the value of a static or instance field of type
{@code float} or of another primitive type convertible to
type {@code float} via a widening conversion.

@param obj the object to extract the {@code float} value
from
@return the value of the field converted to type {@code float}

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor
             thereof), or if the field value cannot be
             converted to the type {@code float} by a
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see Field#get
"
      end

      operation 7345922 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Gets the value of a static or instance field of type
{@code double} or of another primitive type convertible to
type {@code double} via a widening conversion.

@param obj the object to extract the {@code double} value
from
@return the value of the field converted to type {@code double}

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is inaccessible.
@exception IllegalArgumentException  if the specified object is not
             an instance of the class or interface declaring the
             underlying field (or a subclass or implementor
             thereof), or if the field value cannot be
             converted to the type {@code double} by a
             widening conversion.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#get
"
      end

      operation 7346050 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the field represented by this {@code Field} object on the
specified object argument to the specified new value. The new
value is automatically unwrapped if the underlying field has a
primitive type.

<p>The operation proceeds as follows:

<p>If the underlying field is static, the {@code obj} argument is
ignored; it may be null.

<p>Otherwise the underlying field is an instance field.  If the
specified object argument is null, the method throws a
{@code NullPointerException}.  If the specified object argument is not
an instance of the class or interface declaring the underlying
field, the method throws an {@code IllegalArgumentException}.

<p>If this {@code Field} object is enforcing Java language access control, and
the underlying field is inaccessible, the method throws an
{@code IllegalAccessException}.

<p>If the underlying field is final, the method throws an
{@code IllegalAccessException} unless {@code setAccessible(true)}
has succeeded for this {@code Field} object
and the field is non-static. Setting a final field in this way
is meaningful only during deserialization or reconstruction of
instances of classes with blank final fields, before they are
made available for access by other parts of a program. Use in
any other context may have unpredictable effects, including cases
in which other parts of a program continue to use the original
value of this field.

<p>If the underlying field is of a primitive type, an unwrapping
conversion is attempted to convert the new value to a value of
a primitive type.  If this attempt fails, the method throws an
{@code IllegalArgumentException}.

<p>If, after possible unwrapping, the new value cannot be
converted to the type of the underlying field by an identity or
widening conversion, the method throws an
{@code IllegalArgumentException}.

<p>If the underlying field is static, the class that declared the
field is initialized if it has not already been initialized.

<p>The field is set to the possibly unwrapped and widened new value.

<p>If the field is hidden in the type of {@code obj},
the field's value is set according to the preceding rules.

@param obj the object whose field should be modified
@param value the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
"
      end

      operation 7346178 "setBoolean"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param inout name "z" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the value of a field as a {@code boolean} on the specified object.
This method is equivalent to
{@code set(obj, zObj)},
where {@code zObj} is a {@code Boolean} object and
{@code zObj.booleanValue() == z}.

@param obj the object whose field should be modified
@param z   the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set
"
      end

      operation 7346306 "setByte"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "b" explicit_type "byte"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the value of a field as a {@code byte} on the specified object.
This method is equivalent to
{@code set(obj, bObj)},
where {@code bObj} is a {@code Byte} object and
{@code bObj.byteValue() == b}.

@param obj the object whose field should be modified
@param b   the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set
"
      end

      operation 7346434 "setChar"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "c" explicit_type "char"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the value of a field as a {@code char} on the specified object.
This method is equivalent to
{@code set(obj, cObj)},
where {@code cObj} is a {@code Character} object and
{@code cObj.charValue() == c}.

@param obj the object whose field should be modified
@param c   the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set
"
      end

      operation 7346562 "setShort"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "s" explicit_type "short"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the value of a field as a {@code short} on the specified object.
This method is equivalent to
{@code set(obj, sObj)},
where {@code sObj} is a {@code Short} object and
{@code sObj.shortValue() == s}.

@param obj the object whose field should be modified
@param s   the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set
"
      end

      operation 7346690 "setInt"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "i" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the value of a field as an {@code int} on the specified object.
This method is equivalent to
{@code set(obj, iObj)},
where {@code iObj} is a {@code Integer} object and
{@code iObj.intValue() == i}.

@param obj the object whose field should be modified
@param i   the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set
"
      end

      operation 7346818 "setLong"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "l" explicit_type "long"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the value of a field as a {@code long} on the specified object.
This method is equivalent to
{@code set(obj, lObj)},
where {@code lObj} is a {@code Long} object and
{@code lObj.longValue() == l}.

@param obj the object whose field should be modified
@param l   the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set
"
      end

      operation 7346946 "setFloat"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "f" explicit_type "float"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the value of a field as a {@code float} on the specified object.
This method is equivalent to
{@code set(obj, fObj)},
where {@code fObj} is a {@code Float} object and
{@code fObj.floatValue() == f}.

@param obj the object whose field should be modified
@param f   the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set
"
      end

      operation 7347074 "setDouble"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "d" explicit_type "double"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Sets the value of a field as a {@code double} on the specified object.
This method is equivalent to
{@code set(obj, dObj)},
where {@code dObj} is a {@code Double} object and
{@code dObj.doubleValue() == d}.

@param obj the object whose field should be modified
@param d   the new value for the field of {@code obj}
being modified

@exception IllegalAccessException    if this {@code Field} object
             is enforcing Java language access control and the underlying
             field is either inaccessible or final.
@exception IllegalArgumentException  if the specified object is not an
             instance of the class or interface declaring the underlying
             field (or a subclass or implementor thereof),
             or if an unwrapping conversion fails.
@exception NullPointerException      if the specified object is null
             and the field is an instance field.
@exception ExceptionInInitializerError if the initialization provoked
             by this method fails.
@see       Field#set
"
      end

      operation 7347202 "getFieldAccessor"
	private explicit_return_type "FieldAccessor"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " security check is done before calling this method"
      end

      operation 7347330 "acquireFieldAccessor"
	private explicit_return_type "FieldAccessor"
	nparams 1
	  param inout name "overrideFinalCheck" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " NOTE that there is no synchronization used here. It is correct
 (though not efficient) to generate more than one FieldAccessor
 for a given Field. However, avoiding synchronization will
 probably make the implementation more scalable."
      end

      operation 7347458 "getFieldAccessor"
	private explicit_return_type "FieldAccessor"
	nparams 1
	  param inout name "overrideFinalCheck" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns FieldAccessor for this Field object, not looking up
 the chain to the root"
      end

      operation 7347586 "setFieldAccessor"
	private explicit_return_type "void"
	nparams 2
	  param inout name "accessor" explicit_type "FieldAccessor"
	  param inout name "overrideFinalCheck" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Sets the FieldAccessor for this Field object and
 (recursively) its root"
      end

      operation 7347714 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since 1.5
"
      end

      operation 7347842 "getAnnotationsByType"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 7347970 "getDeclaredAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      classrelation 3223170 // declaredAnnotations (<unidirectional association>)
	relation 3223170 --->
	  a role_name "declaredAnnotations" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<? extends Annotation>, Annotation> ${name}${value};
"
	    classrelation_ref 3223170 // declaredAnnotations (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 7348098 "declaredAnnotations"
	private return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<? extends Annotation>, Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7348226 "getTypeAnnotationBytes0"
	private explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7348354 "getAnnotatedType"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an AnnotatedType object that represents the use of a type to specify
the declared type of the field represented by this Field.
@return an object representing the declared type of the field
represented by this Field

@since 1.8
"
      end
    end

    class 193410 "InvocationTargetException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "InvocationTargetException is a checked exception that wraps
an exception thrown by an invoked method or constructor.

<p>As of release 1.4, this exception has been retrofitted to conform to
the general purpose exception-chaining mechanism.  The \"target exception\"
that is provided at construction time and accessed via the
{@link #getTargetException()} method is now known as the <i>cause</i>,
and may be accessed via the {@link Throwable#getCause()} method,
as well as the aforementioned \"legacy method.\"

@see Method
@see Constructor
"
      classrelation 3223554 // <generalisation>
	relation 3223554 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3223554 // <generalisation>
	  b parent class_ref 932226 // ReflectiveOperationException
      end

      attribute 1737474 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4085088731926701167L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Use serialVersionUID from JDK 1.1.X for interoperability

"
      end

      classrelation 3223682 // target (<unidirectional association>)
	relation 3223682 --->
	  a role_name "target" private
	    comment "
This field holds the target if the
InvocationTargetException(Throwable target) constructor was
used to instantiate the object

@serial


"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3223682 // target (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      operation 7348866 "InvocationTargetException"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code InvocationTargetException} with
{@code null} as the target exception.
"
      end

      operation 7348994 "InvocationTargetException"
	public explicit_return_type ""
	nparams 1
	  param inout name "target" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a InvocationTargetException with a target exception.

@param target the target exception
"
      end

      operation 7349122 "InvocationTargetException"
	public explicit_return_type ""
	nparams 2
	  param inout name "target" type class_ref 129922 // Throwable
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a InvocationTargetException with a target exception
and a detail message.

@param target the target exception
@param s      the detail message
"
      end

      operation 7349250 "getTargetException"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the thrown target exception.

<p>This method predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@return the thrown target exception (cause of this exception).
"
      end

      operation 7349378 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception (the thrown target exception,
which may be {@code null}).

@return  the cause of this exception.
@since   1.4
"
      end
    end

    class 194690 "Member"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Member is an interface that reflects identifying information about
a single member (a field or a method) or a constructor.

@see java.lang.Class
@see Field
@see Method
@see Constructor

@author Nakul Saraiya
"
      attribute 1707906 "PUBLIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the set of all public members of a class or interface,
including inherited members.

"
      end

      attribute 1708034 "DECLARED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Identifies the set of declared members of a class or interface.
Inherited members are not included.

"
      end

      operation 7231234 "getDeclaringClass"
	public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Class object representing the class or interface
that declares the member or constructor represented by this Member.

@return an object representing the declaring class of the
underlying member
"
      end

      operation 7231362 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the simple name of the underlying member or constructor
represented by this Member.

@return the simple name of the underlying member
"
      end

      operation 7231490 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java language modifiers for the member or
constructor represented by this Member, as an integer.  The
Modifier class should be used to decode the modifiers in
the integer.

@return the Java language modifiers for the underlying member
@see Modifier
"
      end

      operation 7231618 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this member was introduced by
the compiler; returns {@code false} otherwise.

@return true if and only if this member was introduced by
the compiler.
@jls 13.1 The Form of a Binary
@since 1.5
"
      end
    end

    class 260610 "InvocationHandler"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code InvocationHandler} is the interface implemented by
the <i>invocation handler</i> of a proxy instance.

<p>Each proxy instance has an associated invocation handler.
When a method is invoked on a proxy instance, the method
invocation is encoded and dispatched to the {@code invoke}
method of its invocation handler.

@author      Peter Jones
@see         Proxy
@since       1.3
"
      operation 1324802 "invoke"
	public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "proxy" type class_ref 129538 // Object
	  param inout name "method" type class_ref 137858 // Method
	  param inout name "args" type class_ref 129538 // Object
	multiplicity "[]"
	nexceptions 1
	  exception class_ref 129922 // Throwable
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Processes a method invocation on a proxy instance and returns
the result.  This method will be invoked on an invocation handler
when a method is invoked on a proxy instance that it is
associated with.

@param   proxy the proxy instance that the method was invoked on

@param   method the {@code Method} instance corresponding to
the interface method invoked on the proxy instance.  The declaring
class of the {@code Method} object will be the interface that
the method was declared in, which may be a superinterface of the
proxy interface that the proxy class inherits the method through.

@param   args an array of objects containing the values of the
arguments passed in the method invocation on the proxy instance,
or {@code null} if interface method takes no arguments.
Arguments of primitive types are wrapped in instances of the
appropriate primitive wrapper class, such as
{@code java.lang.Integer} or {@code java.lang.Boolean}.

@return  the value to return from the method invocation on the
proxy instance.  If the declared return type of the interface
method is a primitive type, then the value returned by
this method must be an instance of the corresponding primitive
wrapper class; otherwise, it must be a type assignable to the
declared return type.  If the value returned by this method is
{@code null} and the interface method's return type is
primitive, then a {@code NullPointerException} will be
thrown by the method invocation on the proxy instance.  If the
value returned by this method is otherwise not compatible with
the interface method's declared return type as described above,
a {@code ClassCastException} will be thrown by the method
invocation on the proxy instance.

@throws  Throwable the exception to throw from the method
invocation on the proxy instance.  The exception's type must be
assignable either to any of the exception types declared in the
{@code throws} clause of the interface method or to the
unchecked exception types {@code java.lang.RuntimeException}
or {@code java.lang.Error}.  If a checked exception is
thrown by this method that is not assignable to any of the
exception types declared in the {@code throws} clause of
the interface method, then an
{@link UndeclaredThrowableException} containing the
exception that was thrown by this method will be thrown by the
method invocation on the proxy instance.

@see     UndeclaredThrowableException
"
      end
    end

    class 261378 "Proxy"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code Proxy} provides static methods for creating dynamic proxy
classes and instances, and it is also the superclass of all
dynamic proxy classes created by those methods.

<p>To create a proxy for some interface {@code Foo}:
<pre>
    InvocationHandler handler = new MyInvocationHandler(...);
    Class&lt;?&gt; proxyClass = Proxy.getProxyClass(Foo.class.getClassLoader(), Foo.class);
    Foo f = (Foo) proxyClass.getConstructor(InvocationHandler.class).
                    newInstance(handler);
</pre>
or more simply:
<pre>
    Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),
                                         new Class&lt;?&gt;[] { Foo.class },
                                         handler);
</pre>

<p>A <i>dynamic proxy class</i> (simply referred to as a <i>proxy
class</i> below) is a class that implements a list of interfaces
specified at runtime when the class is created, with behavior as
described below.

A <i>proxy interface</i> is such an interface that is implemented
by a proxy class.

A <i>proxy instance</i> is an instance of a proxy class.

Each proxy instance has an associated <i>invocation handler</i>
object, which implements the interface {@link InvocationHandler}.
A method invocation on a proxy instance through one of its proxy
interfaces will be dispatched to the {@link InvocationHandler#invoke
invoke} method of the instance's invocation handler, passing the proxy
instance, a {@code java.lang.reflect.Method} object identifying
the method that was invoked, and an array of type {@code Object}
containing the arguments.  The invocation handler processes the
encoded method invocation as appropriate and the result that it
returns will be returned as the result of the method invocation on
the proxy instance.

<p>A proxy class has the following properties:

<ul>
<li>Proxy classes are <em>public, final, and not abstract</em> if
all proxy interfaces are public.</li>

<li>Proxy classes are <em>non-public, final, and not abstract</em> if
any of the proxy interfaces is non-public.</li>

<li>The unqualified name of a proxy class is unspecified.  The space
of class names that begin with the string {@code \"$Proxy\"}
should be, however, reserved for proxy classes.

<li>A proxy class extends {@code java.lang.reflect.Proxy}.

<li>A proxy class implements exactly the interfaces specified at its
creation, in the same order.

<li>If a proxy class implements a non-public interface, then it will
be defined in the same package as that interface.  Otherwise, the
package of a proxy class is also unspecified.  Note that package
sealing will not prevent a proxy class from being successfully defined
in a particular package at runtime, and neither will classes already
defined by the same class loader and the same package with particular
signers.

<li>Since a proxy class implements all of the interfaces specified at
its creation, invoking {@code getInterfaces} on its
{@code Class} object will return an array containing the same
list of interfaces (in the order specified at its creation), invoking
{@code getMethods} on its {@code Class} object will return
an array of {@code Method} objects that include all of the
methods in those interfaces, and invoking {@code getMethod} will
find methods in the proxy interfaces as would be expected.

<li>The {@link Proxy#isProxyClass Proxy.isProxyClass} method will
return true if it is passed a proxy class-- a class returned by
{@code Proxy.getProxyClass} or the class of an object returned by
{@code Proxy.newProxyInstance}-- and false otherwise.

<li>The {@code java.security.ProtectionDomain} of a proxy class
is the same as that of system classes loaded by the bootstrap class
loader, such as {@code java.lang.Object}, because the code for a
proxy class is generated by trusted system code.  This protection
domain will typically be granted
{@code java.security.AllPermission}.

<li>Each proxy class has one public constructor that takes one argument,
an implementation of the interface {@link InvocationHandler}, to set
the invocation handler for a proxy instance.  Rather than having to use
the reflection API to access the public constructor, a proxy instance
can be also be created by calling the {@link Proxy#newProxyInstance
Proxy.newProxyInstance} method, which combines the actions of calling
{@link Proxy#getProxyClass Proxy.getProxyClass} with invoking the
constructor with an invocation handler.
</ul>

<p>A proxy instance has the following properties:

<ul>
<li>Given a proxy instance {@code proxy} and one of the
interfaces implemented by its proxy class {@code Foo}, the
following expression will return true:
<pre>
    {@code proxy instanceof Foo}
</pre>
and the following cast operation will succeed (rather than throwing
a {@code ClassCastException}):
<pre>
    {@code (Foo) proxy}
</pre>

<li>Each proxy instance has an associated invocation handler, the one
that was passed to its constructor.  The static
{@link Proxy#getInvocationHandler Proxy.getInvocationHandler} method
will return the invocation handler associated with the proxy instance
passed as its argument.

<li>An interface method invocation on a proxy instance will be
encoded and dispatched to the invocation handler's {@link
InvocationHandler#invoke invoke} method as described in the
documentation for that method.

<li>An invocation of the {@code hashCode},
{@code equals}, or {@code toString} methods declared in
{@code java.lang.Object} on a proxy instance will be encoded and
dispatched to the invocation handler's {@code invoke} method in
the same manner as interface method invocations are encoded and
dispatched, as described above.  The declaring class of the
{@code Method} object passed to {@code invoke} will be
{@code java.lang.Object}.  Other public methods of a proxy
instance inherited from {@code java.lang.Object} are not
overridden by a proxy class, so invocations of those methods behave
like they do for instances of {@code java.lang.Object}.
</ul>

<h3>Methods Duplicated in Multiple Proxy Interfaces</h3>

<p>When two or more interfaces of a proxy class contain a method with
the same name and parameter signature, the order of the proxy class's
interfaces becomes significant.  When such a <i>duplicate method</i>
is invoked on a proxy instance, the {@code Method} object passed
to the invocation handler will not necessarily be the one whose
declaring class is assignable from the reference type of the interface
that the proxy's method was invoked through.  This limitation exists
because the corresponding method implementation in the generated proxy
class cannot determine which interface it was invoked through.
Therefore, when a duplicate method is invoked on a proxy instance,
the {@code Method} object for the method in the foremost interface
that contains the method (either directly or inherited through a
superinterface) in the proxy class's list of interfaces is passed to
the invocation handler's {@code invoke} method, regardless of the
reference type through which the method invocation occurred.

<p>If a proxy interface contains a method with the same name and
parameter signature as the {@code hashCode}, {@code equals},
or {@code toString} methods of {@code java.lang.Object},
when such a method is invoked on a proxy instance, the
{@code Method} object passed to the invocation handler will have
{@code java.lang.Object} as its declaring class.  In other words,
the public, non-final methods of {@code java.lang.Object}
logically precede all of the proxy interfaces for the determination of
which {@code Method} object to pass to the invocation handler.

<p>Note also that when a duplicate method is dispatched to an
invocation handler, the {@code invoke} method may only throw
checked exception types that are assignable to one of the exception
types in the {@code throws} clause of the method in <i>all</i> of
the proxy interfaces that it can be invoked through.  If the
{@code invoke} method throws a checked exception that is not
assignable to any of the exception types declared by the method in one
of the proxy interfaces that it can be invoked through, then an
unchecked {@code UndeclaredThrowableException} will be thrown by
the invocation on the proxy instance.  This restriction means that not
all of the exception types returned by invoking
{@code getExceptionTypes} on the {@code Method} object
passed to the {@code invoke} method can necessarily be thrown
successfully by the {@code invoke} method.

@author      Peter Jones
@see         InvocationHandler
@since       1.3
"
      classrelation 3225986 // <realization>
	relation 3225986 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3225986 // <realization>
	  b parent class_ref 136578 // Serializable
      end

      attribute 1742210 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2222568056686623797L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3226114 // constructorParams (<unidirectional association>)
	relation 3226114 --->
	  a role_name "constructorParams" multiplicity "[]" init_value "
        { InvocationHandler.class }" class_relation const_relation private
	    comment " parameter types of a proxy class constructor 
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 3226114 // constructorParams (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      classrelation 3226242 // proxyClassCache (<unidirectional association>)
	relation 3226242 --->
	  a role_name "proxyClassCache" init_value " new WeakCache<>(new KeyFactory(), new ProxyClassFactory())" class_relation const_relation private
	    comment "
a cache of proxy classes

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ClassLoader, Class<?>[], Class<?>> ${name}${value};
"
	    classrelation_ref 3226242 // proxyClassCache (<unidirectional association>)
	  b parent class_ref 958594 // WeakCache
      end

      classrelation 3226370 // h (<unidirectional association>)
	relation 3226370 --->
	  a role_name "h" protected
	    comment "
the invocation handler for this proxy instance.
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3226370 // h (<unidirectional association>)
	  b parent class_ref 260610 // InvocationHandler
      end

      operation 7360642 "Proxy"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Prohibits instantiation.
"
      end

      operation 7360770 "Proxy"
	protected explicit_return_type ""
	nparams 1
	  param inout name "h" type class_ref 260610 // InvocationHandler
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Proxy} instance from a subclass
(typically, a dynamic proxy class) with the specified value
for its invocation handler.

@param  h the invocation handler for this proxy instance

@throws NullPointerException if the given invocation handler, {@code h},
        is {@code null}.
"
      end

      operation 7360898 "getProxyClass"
	class_operation public return_type class_ref 130818 // Class
	nparams 2
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "interfaces" explicit_type "Class<?>..."
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Returns the {@code java.lang.Class} object for a proxy class
given a class loader and an array of interfaces.  The proxy class
will be defined by the specified class loader and will implement
all of the supplied interfaces.  If any of the given interfaces
is non-public, the proxy class will be non-public. If a proxy class
for the same permutation of interfaces has already been defined by the
class loader, then the existing proxy class will be returned; otherwise,
a proxy class for those interfaces will be generated dynamically
and defined by the class loader.

<p>There are several restrictions on the parameters that may be
passed to {@code Proxy.getProxyClass}:

<ul>
<li>All of the {@code Class} objects in the
{@code interfaces} array must represent interfaces, not
classes or primitive types.

<li>No two elements in the {@code interfaces} array may
refer to identical {@code Class} objects.

<li>All of the interface types must be visible by name through the
specified class loader.  In other words, for class loader
{@code cl} and every interface {@code i}, the following
expression must be true:
<pre>
    Class.forName(i.getName(), false, cl) == i
</pre>

<li>All non-public interfaces must be in the same package;
otherwise, it would not be possible for the proxy class to
implement all of the interfaces, regardless of what package it is
defined in.

<li>For any set of member methods of the specified interfaces
that have the same signature:
<ul>
<li>If the return type of any of the methods is a primitive
type or void, then all of the methods must have that same
return type.
<li>Otherwise, one of the methods must have a return type that
is assignable to all of the return types of the rest of the
methods.
</ul>

<li>The resulting proxy class must not exceed any limits imposed
on classes by the virtual machine.  For example, the VM may limit
the number of interfaces that a class may implement to 65535; in
that case, the size of the {@code interfaces} array must not
exceed 65535.
</ul>

<p>If any of these restrictions are violated,
{@code Proxy.getProxyClass} will throw an
{@code IllegalArgumentException}.  If the {@code interfaces}
array argument or any of its elements are {@code null}, a
{@code NullPointerException} will be thrown.

<p>Note that the order of the specified proxy interfaces is
significant: two requests for a proxy class with the same combination
of interfaces but in a different order will result in two distinct
proxy classes.

@param   loader the class loader to define the proxy class
@param   interfaces the list of interfaces for the proxy class
         to implement
@return  a proxy class that is defined in the specified class loader
         and that implements the specified interfaces
@throws  IllegalArgumentException if any of the restrictions on the
         parameters that may be passed to {@code getProxyClass}
         are violated
@throws  SecurityException if a security manager, <em>s</em>, is present
         and any of the following conditions is met:
         <ul>
            <li> the given {@code loader} is {@code null} and
            the caller's class loader is not {@code null} and the
            invocation of {@link SecurityManager#checkPermission
            s.checkPermission} with
            {@code RuntimePermission(\"getClassLoader\")} permission
            denies access.</li>
            <li> for each proxy interface, {@code intf},
            the caller's class loader is not the same as or an
            ancestor of the class loader for {@code intf} and
            invocation of {@link SecurityManager#checkPackageAccess
            s.checkPackageAccess()} denies access to {@code intf}.</li>
         </ul>

@throws  NullPointerException if the {@code interfaces} array
         argument or any of its elements are {@code null}
"
      end

      operation 7361026 "checkProxyAccess"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "caller" type class_ref 130818 // Class
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "interfaces" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Check permissions required to create a Proxy class.

To define a proxy class, it performs the access checks as in
Class.forName (VM will invoke ClassLoader.checkPackageAccess):
1. \"getClassLoader\" permission check if loader == null
2. checkPackageAccess on the interfaces it implements

To get a constructor and new instance of a proxy class, it performs
the package access check on the interfaces it implements
as in Class.getConstructor.

If an interface is non-public, the proxy class must be defined by
the defining loader of the interface.  If the caller's class loader
is not the same as the defining loader of the interface, the VM
will throw IllegalAccessError when the generated proxy class is
being defined via the defineClass0 method.
"
      end

      operation 7361154 "getProxyClass0"
	class_operation private return_type class_ref 130818 // Class
	nparams 2
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "interfaces" explicit_type "Class<?>..."
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a proxy class.  Must call the checkProxyAccess method
to perform permission checks before calling this.
"
      end

      classrelation 3226498 // key0 (<unidirectional association>)
	relation 3226498 --->
	  a role_name "key0" init_value " new Object()" class_relation const_relation private
	    comment "
a key used for proxy class with 0 implemented interfaces

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3226498 // key0 (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      class 958722 "Key1"
	visibility private 
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3226626 // <realization>
	  relation 3226626 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3226626 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	attribute 1742338 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7361282 "Key1"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "intf" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7361410 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7361538 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 958850 "Key2"
	visibility private 
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3226754 // <realization>
	  relation 3226754 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3226754 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	attribute 1742466 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3226882 // ref2 (<unidirectional association>)
	  relation 3226882 --->
	    a role_name "ref2" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>> ${name}${value};
"
	      classrelation_ref 3226882 // ref2 (<unidirectional association>)
	    b parent class_ref 131330 // WeakReference
	end

	operation 7361666 "Key2"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "intf1" type class_ref 130818 // Class
	    param inout name "intf2" type class_ref 130818 // Class
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7361794 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7361922 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 958978 "KeyX"
	visibility private 
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	attribute 1742594 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3227010 // refs (<unidirectional association>)
	  relation 3227010 --->
	    a role_name "refs" multiplicity "[]" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<?>>${multiplicity} ${name}${value};
"
	      classrelation_ref 3227010 // refs (<unidirectional association>)
	    b parent class_ref 131330 // WeakReference
	end

	operation 7362050 "KeyX"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "interfaces" type class_ref 130818 // Class
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?>[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 7362178 "hashCode"
	  public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7362306 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7362434 "equals"
	  class_operation private explicit_return_type "boolean"
	  nparams 2
	    param inout name "refs1" type class_ref 131330 // WeakReference
	  multiplicity "[]"
	    param inout name "refs2" type class_ref 131330 // WeakReference
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<Class<?>>[] ${p0}, ${t1}<Class<?>>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 959106 "KeyFactory"
	visibility private 
	nactuals 3
	actual class class_ref 192642 // BiFunction
	  rank 0 explicit_value ""
	actual class class_ref 192642 // BiFunction
	  rank 1 explicit_value ""
	actual class class_ref 192642 // BiFunction
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3227138 // <realization>
	  relation 3227138 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3227138 // <realization>
	    b parent class_ref 192642 // BiFunction
	end

	operation 7362818 "apply"
	  public return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "classLoader" type class_ref 129026 // ClassLoader
	    param inout name "interfaces" type class_ref 130818 // Class
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 959234 "ProxyClassFactory"
	visibility private 
	nactuals 3
	actual class class_ref 192642 // BiFunction
	  rank 0 explicit_value ""
	actual class class_ref 192642 // BiFunction
	  rank 1 explicit_value ""
	actual class class_ref 192642 // BiFunction
	  rank 2 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3227266 // <realization>
	  relation 3227266 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3227266 // <realization>
	    b parent class_ref 192642 // BiFunction
	end

	classrelation 3227394 // proxyClassNamePrefix (<unidirectional association>)
	  relation 3227394 --->
	    a role_name "proxyClassNamePrefix" init_value " \"$Proxy\"" class_relation const_relation private
	      comment " prefix for all proxy class names
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3227394 // proxyClassNamePrefix (<unidirectional association>)
	    b parent class_ref 128130 // String
	end

	classrelation 3227522 // nextUniqueNumber (<unidirectional association>)
	  relation 3227522 --->
	    a role_name "nextUniqueNumber" init_value " new AtomicLong()" class_relation const_relation private
	      comment " next number to use for generation of unique proxy class names
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3227522 // nextUniqueNumber (<unidirectional association>)
	    b parent class_ref 256386 // AtomicLong
	end

	operation 7362946 "apply"
	  public return_type class_ref 130818 // Class
	  nparams 2
	    param inout name "loader" type class_ref 129026 // ClassLoader
	    param inout name "interfaces" type class_ref 130818 // Class
	  multiplicity "[]"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1}<?>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 7363074 "newProxyInstance"
	class_operation public return_type class_ref 129538 // Object
	nparams 3
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "interfaces" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "h" type class_ref 260610 // InvocationHandler
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?>[] ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Returns an instance of a proxy class for the specified interfaces
that dispatches method invocations to the specified invocation
handler.

<p>{@code Proxy.newProxyInstance} throws
{@code IllegalArgumentException} for the same reasons that
{@code Proxy.getProxyClass} does.

@param   loader the class loader to define the proxy class
@param   interfaces the list of interfaces for the proxy class
         to implement
@param   h the invocation handler to dispatch method invocations to
@return  a proxy instance with the specified invocation handler of a
         proxy class that is defined by the specified class loader
         and that implements the specified interfaces
@throws  IllegalArgumentException if any of the restrictions on the
         parameters that may be passed to {@code getProxyClass}
         are violated
@throws  SecurityException if a security manager, <em>s</em>, is present
         and any of the following conditions is met:
         <ul>
         <li> the given {@code loader} is {@code null} and
              the caller's class loader is not {@code null} and the
              invocation of {@link SecurityManager#checkPermission
              s.checkPermission} with
              {@code RuntimePermission(\"getClassLoader\")} permission
              denies access;</li>
         <li> for each proxy interface, {@code intf},
              the caller's class loader is not the same as or an
              ancestor of the class loader for {@code intf} and
              invocation of {@link SecurityManager#checkPackageAccess
              s.checkPackageAccess()} denies access to {@code intf};</li>
         <li> any of the given proxy interfaces is non-public and the
              caller class is not in the same {@linkplain Package runtime package}
              as the non-public interface and the invocation of
              {@link SecurityManager#checkPermission s.checkPermission} with
              {@code ReflectPermission(\"newProxyInPackage.{package name}\")}
              permission denies access.</li>
         </ul>
@throws  NullPointerException if the {@code interfaces} array
         argument or any of its elements are {@code null}, or
         if the invocation handler, {@code h}, is
         {@code null}
"
      end

      operation 7363202 "checkNewProxyPermission"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "caller" type class_ref 130818 // Class
	  param inout name "proxyClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7363330 "isProxyClass"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "cl" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if the specified class was dynamically
generated to be a proxy class using the {@code getProxyClass}
method or the {@code newProxyInstance} method.

<p>The reliability of this method is important for the ability
to use it to make security decisions, so its implementation should
not just test if the class in question extends {@code Proxy}.

@param   cl the class to test
@return  {@code true} if the class is a proxy class and
         {@code false} otherwise
@throws  NullPointerException if {@code cl} is {@code null}
"
      end

      operation 7363458 "getInvocationHandler"
	class_operation public return_type class_ref 260610 // InvocationHandler
	nparams 1
	  param inout name "proxy" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@CallerSensitive
"
	
	
	
	comment "Returns the invocation handler for the specified proxy instance.

@param   proxy the proxy instance to return the invocation handler for
@return  the invocation handler for the proxy instance
@throws  IllegalArgumentException if the argument is not a
         proxy instance
@throws  SecurityException if a security manager, <em>s</em>, is present
         and the caller's class loader is not the same as or an
         ancestor of the class loader for the invocation handler
         and invocation of {@link SecurityManager#checkPackageAccess
         s.checkPackageAccess()} denies access to the invocation
         handler's class.
"
      end

      operation 7363586 "defineClass0"
	class_operation private return_type class_ref 130818 // Class
	nparams 5
	  param inout name "loader" type class_ref 129026 // ClassLoader
	  param inout name "name" type class_ref 128130 // String
	  param inout name "b" explicit_type "byte"
	multiplicity "[]"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws};
s"
	
	
	
      end
    end

    class 490114 "Type"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Type is the common superinterface for all types in the Java
programming language. These include raw types, parameterized types,
array types, type variables and primitive types.

@since 1.5
"
      operation 6985858 "getTypeName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this type, including information
about any type parameters.

@implSpec The default implementation calls {@code toString}.

@return a string describing this type
@since 1.8
"
      end
    end

    class 491266 "ParameterizedType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "ParameterizedType represents a parameterized type such as
Collection&lt;String&gt;.

<p>A parameterized type is created the first time it is needed by a
reflective method, as specified in this package. When a
parameterized type p is created, the generic type declaration that
p instantiates is resolved, and all type arguments of p are created
recursively. See {@link java.lang.reflect.TypeVariable
TypeVariable} for details on the creation process for type
variables. Repeated creation of a parameterized type has no effect.

<p>Instances of classes that implement this interface must implement
an equals() method that equates any two instances that share the
same generic type declaration and have equal type parameters.

@since 1.5
"
      classrelation 3225858 // <generalisation>
	relation 3225858 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3225858 // <generalisation>
	  b parent class_ref 490114 // Type
      end

      operation 7360258 "getActualTypeArguments"
	public return_type class_ref 490114 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Type} objects representing the actual type
arguments to this type.

<p>Note that in some cases, the returned array be empty. This can occur
if this type represents a non-parameterized type nested within
a parameterized type.

@return an array of {@code Type} objects representing the actual type
    arguments to this type
@throws TypeNotPresentException if any of the
    actual type arguments refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the
    actual type parameters refer to a parameterized type that cannot
    be instantiated for any reason
@since 1.5
"
      end

      operation 7360386 "getRawType"
	public return_type class_ref 490114 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Type} object representing the class or interface
that declared this type.

@return the {@code Type} object representing the class or interface
    that declared this type
@since 1.5
"
      end

      operation 7360514 "getOwnerType"
	public return_type class_ref 490114 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Type} object representing the type that this type
is a member of.  For example, if this type is {@code O<T>.I<S>},
return a representation of {@code O<T>}.

<p>If this type is a top-level type, {@code null} is returned.

@return a {@code Type} object representing the type that
    this type is a member of. If this type is a top-level type,
    {@code null} is returned
@throws TypeNotPresentException if the owner type
    refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if the owner type
    refers to a parameterized type that cannot be instantiated
    for any reason
@since 1.5
"
      end
    end

    class 494722 "AnnotatedElement"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Represents an annotated element of the program currently running in this
VM.  This interface allows annotations to be read reflectively.  All
annotations returned by methods in this interface are immutable and
serializable. The arrays returned by methods of this interface may be modified
by callers without affecting the arrays returned to other callers.

<p>The {@link #getAnnotationsByType(Class)} and {@link
#getDeclaredAnnotationsByType(Class)} methods support multiple
annotations of the same type on an element. If the argument to
either method is a repeatable annotation type (JLS 9.6), then the
method will \"look through\" a container annotation (JLS 9.7), if
present, and return any annotations inside the container. Container
annotations may be generated at compile-time to wrap multiple
annotations of the argument type.

<p>The terms <em>directly present</em>, <em>indirectly present</em>,
<em>present</em>, and <em>associated</em> are used throughout this
interface to describe precisely which annotations are returned by
methods:

<ul>

<li> An annotation <i>A</i> is <em>directly present</em> on an
element <i>E</i> if <i>E</i> has a {@code
RuntimeVisibleAnnotations} or {@code
RuntimeVisibleParameterAnnotations} or {@code
RuntimeVisibleTypeAnnotations} attribute, and the attribute
contains <i>A</i>.

<li>An annotation <i>A</i> is <em>indirectly present</em> on an
element <i>E</i> if <i>E</i> has a {@code RuntimeVisibleAnnotations} or
{@code RuntimeVisibleParameterAnnotations} or {@code RuntimeVisibleTypeAnnotations}
attribute, and <i>A</i> 's type is repeatable, and the attribute contains
exactly one annotation whose value element contains <i>A</i> and whose
type is the containing annotation type of <i>A</i> 's type.

<li>An annotation <i>A</i> is present on an element <i>E</i> if either:

<ul>

<li><i>A</i> is directly present on <i>E</i>; or

<li>No annotation of <i>A</i> 's type is directly present on
<i>E</i>, and <i>E</i> is a class, and <i>A</i> 's type is
inheritable, and <i>A</i> is present on the superclass of <i>E</i>.

</ul>

<li>An annotation <i>A</i> is <em>associated</em> with an element <i>E</i>
if either:

<ul>

<li><i>A</i> is directly or indirectly present on <i>E</i>; or

<li>No annotation of <i>A</i> 's type is directly or indirectly
present on <i>E</i>, and <i>E</i> is a class, and <i>A</i>'s type
is inheritable, and <i>A</i> is associated with the superclass of
<i>E</i>.

</ul>

</ul>

<p>The table below summarizes which kind of annotation presence
different methods in this interface examine.

<table border>
<caption>Overview of kind of presence detected by different AnnotatedElement methods</caption>
<tr><th colspan=2></th><th colspan=4>Kind of Presence</th>
<tr><th colspan=2>Method</th><th>Directly Present</th><th>Indirectly Present</th><th>Present</th><th>Associated</th>
<tr><td align=right>{@code T}</td><td>{@link #getAnnotation(Class) getAnnotation(Class&lt;T&gt;)}
<td></td><td></td><td>X</td><td></td>
</tr>
<tr><td align=right>{@code Annotation[]}</td><td>{@link #getAnnotations getAnnotations()}
<td></td><td></td><td>X</td><td></td>
</tr>
<tr><td align=right>{@code T[]}</td><td>{@link #getAnnotationsByType(Class) getAnnotationsByType(Class&lt;T&gt;)}
<td></td><td></td><td></td><td>X</td>
</tr>
<tr><td align=right>{@code T}</td><td>{@link #getDeclaredAnnotation(Class) getDeclaredAnnotation(Class&lt;T&gt;)}
<td>X</td><td></td><td></td><td></td>
</tr>
<tr><td align=right>{@code Annotation[]}</td><td>{@link #getDeclaredAnnotations getDeclaredAnnotations()}
<td>X</td><td></td><td></td><td></td>
</tr>
<tr><td align=right>{@code T[]}</td><td>{@link #getDeclaredAnnotationsByType(Class) getDeclaredAnnotationsByType(Class&lt;T&gt;)}
<td>X</td><td>X</td><td></td><td></td>
</tr>
</table>

<p>For an invocation of {@code get[Declared]AnnotationsByType( Class <
T >)}, the order of annotations which are directly or indirectly
present on an element <i>E</i> is computed as if indirectly present
annotations on <i>E</i> are directly present on <i>E</i> in place
of their container annotation, in the order in which they appear in
the value element of the container annotation.

<p>There are several compatibility concerns to keep in mind if an
annotation type <i>T</i> is originally <em>not</em> repeatable and
later modified to be repeatable.

The containing annotation type for <i>T</i> is <i>TC</i>.

<ul>

<li>Modifying <i>T</i> to be repeatable is source and binary
compatible with existing uses of <i>T</i> and with existing uses
of <i>TC</i>.

That is, for source compatibility, source code with annotations of
type <i>T</i> or of type <i>TC</i> will still compile. For binary
compatibility, class files with annotations of type <i>T</i> or of
type <i>TC</i> (or with other kinds of uses of type <i>T</i> or of
type <i>TC</i>) will link against the modified version of <i>T</i>
if they linked against the earlier version.

(An annotation type <i>TC</i> may informally serve as an acting
containing annotation type before <i>T</i> is modified to be
formally repeatable. Alternatively, when <i>T</i> is made
repeatable, <i>TC</i> can be introduced as a new type.)

<li>If an annotation type <i>TC</i> is present on an element, and
<i>T</i> is modified to be repeatable with <i>TC</i> as its
containing annotation type then:

<ul>

<li>The change to <i>T</i> is behaviorally compatible with respect
to the {@code get[Declared]Annotation(Class<T>)} (called with an
argument of <i>T</i> or <i>TC</i>) and {@code
get[Declared]Annotations()} methods because the results of the
methods will not change due to <i>TC</i> becoming the containing
annotation type for <i>T</i>.

<li>The change to <i>T</i> changes the results of the {@code
get[Declared]AnnotationsByType(Class<T>)} methods called with an
argument of <i>T</i>, because those methods will now recognize an
annotation of type <i>TC</i> as a container annotation for <i>T</i>
and will \"look through\" it to expose annotations of type <i>T</i>.

</ul>

<li>If an annotation of type <i>T</i> is present on an
element and <i>T</i> is made repeatable and more annotations of
type <i>T</i> are added to the element:

<ul>

<li> The addition of the annotations of type <i>T</i> is both
source compatible and binary compatible.

<li>The addition of the annotations of type <i>T</i> changes the results
of the {@code get[Declared]Annotation(Class<T>)} methods and {@code
get[Declared]Annotations()} methods, because those methods will now
only see a container annotation on the element and not see an
annotation of type <i>T</i>.

<li>The addition of the annotations of type <i>T</i> changes the
results of the {@code get[Declared]AnnotationsByType(Class<T>)}
methods, because their results will expose the additional
annotations of type <i>T</i> whereas previously they exposed only a
single annotation of type <i>T</i>.

</ul>

</ul>

<p>If an annotation returned by a method in this interface contains
(directly or indirectly) a {@link Class}-valued member referring to
a class that is not accessible in this VM, attempting to read the class
by calling the relevant Class-returning method on the returned annotation
will result in a {@link TypeNotPresentException}.

<p>Similarly, attempting to read an enum-valued member will result in
a {@link EnumConstantNotPresentException} if the enum constant in the
annotation is no longer present in the enum type.

<p>If an annotation type <i>T</i> is (meta-)annotated with an
{@code @Repeatable} annotation whose value element indicates a type
<i>TC</i>, but <i>TC</i> does not declare a {@code value()} method
with a return type of <i>T</i>{@code []}, then an exception of type
{@link java.lang.annotation.AnnotationFormatError} is thrown.

<p>Finally, attempting to read a member whose definition has evolved
incompatibly will result in a {@link
java.lang.annotation.AnnotationTypeMismatchException} or an
{@link java.lang.annotation.IncompleteAnnotationException}.

@see java.lang.EnumConstantNotPresentException
@see java.lang.TypeNotPresentException
@see AnnotationFormatError
@see java.lang.annotation.AnnotationTypeMismatchException
@see java.lang.annotation.IncompleteAnnotationException
@since 1.5
@author Josh Bloch
"
      operation 6984834 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if an annotation for the specified type
is <em>present</em> on this element, else false.  This method
is designed primarily for convenient access to marker annotations.

<p>The truth value returned by this method is equivalent to:
{@code getAnnotation(annotationClass) != null}

<p>The body of the default method is specified to be the code
above.

@param annotationClass the Class object corresponding to the
       annotation type
@return true if an annotation for the specified annotation
    type is present on this element, else false
@throws NullPointerException if the given annotation class is null
@since 1.5
"
      end

      operation 6984962 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this element's annotation for the specified type if
such an annotation is <em>present</em>, else null.

@param <T> the type of the annotation to query for and return if present
@param annotationClass the Class object corresponding to the
       annotation type
@return this element's annotation for the specified annotation type if
    present on this element, else null
@throws NullPointerException if the given annotation class is null
@since 1.5
"
      end

      operation 6985090 "getAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns annotations that are <em>present</em> on this element.

If there are no annotations <em>present</em> on this element, the return
value is an array of length 0.

The caller of this method is free to modify the returned array; it will
have no effect on the arrays returned to other callers.

@return annotations present on this element
@since 1.5
"
      end

      operation 6985218 "getAnnotationsByType"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns annotations that are <em>associated</em> with this element.

If there are no annotations <em>associated</em> with this element, the return
value is an array of length 0.

The difference between this method and {@link #getAnnotation(Class)}
is that this method detects if its argument is a <em>repeatable
annotation type</em> (JLS 9.6), and if so, attempts to find one or
more annotations of that type by \"looking through\" a container
annotation.

The caller of this method is free to modify the returned array; it will
have no effect on the arrays returned to other callers.

@implSpec The default implementation first calls {@link
#getDeclaredAnnotationsByType(Class)} passing {@code
annotationClass} as the argument. If the returned array has
length greater than zero, the array is returned. If the returned
array is zero-length and this {@code AnnotatedElement} is a
class and the argument type is an inheritable annotation type,
and the superclass of this {@code AnnotatedElement} is non-null,
then the returned result is the result of calling {@link
#getAnnotationsByType(Class)} on the superclass with {@code
annotationClass} as the argument. Otherwise, a zero-length
array is returned.

@param <T> the type of the annotation to query for and return if present
@param annotationClass the Class object corresponding to the
       annotation type
@return all this element's annotations for the specified annotation type if
    associated with this element, else an array of length zero
@throws NullPointerException if the given annotation class is null
@since 1.8
"
      end

      operation 6985346 "getDeclaredAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this element's annotation for the specified type if
such an annotation is <em>directly present</em>, else null.

This method ignores inherited annotations. (Returns null if no
annotations are directly present on this element.)

@implSpec The default implementation first performs a null check
and then loops over the results of {@link
#getDeclaredAnnotations} returning the first annotation whose
annotation type matches the argument type.

@param <T> the type of the annotation to query for and return if directly present
@param annotationClass the Class object corresponding to the
       annotation type
@return this element's annotation for the specified annotation type if
    directly present on this element, else null
@throws NullPointerException if the given annotation class is null
@since 1.8
"
      end

      operation 6985474 "getDeclaredAnnotationsByType"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent default java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this element's annotation(s) for the specified type if
such annotations are either <em>directly present</em> or
<em>indirectly present</em>. This method ignores inherited
annotations.

If there are no specified annotations directly or indirectly
present on this element, the return value is an array of length
0.

The difference between this method and {@link
#getDeclaredAnnotation(Class)} is that this method detects if its
argument is a <em>repeatable annotation type</em> (JLS 9.6), and if so,
attempts to find one or more annotations of that type by \"looking
through\" a container annotation if one is present.

The caller of this method is free to modify the returned array; it will
have no effect on the arrays returned to other callers.

@implSpec The default implementation may call {@link
#getDeclaredAnnotation(Class)} one or more times to find a
directly present annotation and, if the annotation type is
repeatable, to find a container annotation. If annotations of
the annotation type {@code annotationClass} are found to be both
directly and indirectly present, then {@link
#getDeclaredAnnotations()} will get called to determine the
order of the elements in the returned array.

<p>Alternatively, the default implementation may call {@link
#getDeclaredAnnotations()} a single time and the returned array
examined for both directly and indirectly present
annotations. The results of calling {@link
#getDeclaredAnnotations()} are assumed to be consistent with the
results of calling {@link #getDeclaredAnnotation(Class)}.

@param <T> the type of the annotation to query for and return
if directly or indirectly present
@param annotationClass the Class object corresponding to the
       annotation type
@return all this element's annotations for the specified annotation type if
    directly or indirectly present on this element, else an array of length zero
@throws NullPointerException if the given annotation class is null
@since 1.8
"
      end

      operation 6985602 "getDeclaredAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns annotations that are <em>directly present</em> on this element.
This method ignores inherited annotations.

If there are no annotations <em>directly present</em> on this element,
the return value is an array of length 0.

The caller of this method is free to modify the returned array; it will
have no effect on the arrays returned to other callers.

@return annotations directly present on this element
@since 1.5
"
      end
    end

    class 930818 "GenericDeclaration"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A common interface for all entities that declare type variables.

@since 1.5
"
      classrelation 3150594 // <generalisation>
	relation 3150594 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3150594 // <generalisation>
	  b parent class_ref 494722 // AnnotatedElement
      end

      operation 6985730 "getTypeParameters"
	public return_type class_ref 930946 // TypeVariable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code TypeVariable} objects that
represent the type variables declared by the generic
declaration represented by this {@code GenericDeclaration}
object, in declaration order.  Returns an array of length 0 if
the underlying generic declaration declares no type variables.

@return an array of {@code TypeVariable} objects that represent
    the type variables declared by this generic declaration
@throws GenericSignatureFormatError if the generic
    signature of this generic declaration does not conform to
    the format specified in
    <cite>The Java&trade; Virtual Machine Specification</cite>
"
      end
    end

    class 930946 "TypeVariable"
      visibility public stereotype "interface"
      nformals 1
      formal name "D" type "" explicit_default_value ""
        extends class_ref 930818 // GenericDeclaration
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "TypeVariable is the common superinterface for type variables of kinds.
A type variable is created the first time it is needed by a reflective
method, as specified in this package.  If a type variable t is referenced
by a type (i.e, class, interface or annotation type) T, and T is declared
by the nth enclosing class of T (see JLS 8.1.2), then the creation of t
requires the resolution (see JVMS 5) of the ith enclosing class of T,
for i = 0 to n, inclusive. Creating a type variable must not cause the
creation of its bounds. Repeated creation of a type variable has no effect.

<p>Multiple objects may be instantiated at run-time to
represent a given type variable. Even though a type variable is
created only once, this does not imply any requirement to cache
instances representing the type variable. However, all instances
representing a type variable must be equal() to each other.
As a consequence, users of type variables must not rely on the identity
of instances of classes implementing this interface.

@param <D> the type of generic declaration that declared the
underlying type variable.

@since 1.5
"
      classrelation 3227906 // <generalisation>
	relation 3227906 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3227906 // <generalisation>
	  b parent class_ref 490114 // Type
      end

      classrelation 3228034 // <generalisation>
	relation 3228034 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3228034 // <generalisation>
	  b parent class_ref 494722 // AnnotatedElement
      end

      operation 7365890 "getBounds"
	cpp_inline public return_type class_ref 490114 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Type} objects representing the
upper bound(s) of this type variable.  Note that if no upper bound is
explicitly declared, the upper bound is {@code Object}.

<p>For each upper bound B: <ul> <li>if B is a parameterized
type or a type variable, it is created, (see {@link
java.lang.reflect.ParameterizedType ParameterizedType} for the
details of the creation process for parameterized types).
<li>Otherwise, B is resolved.  </ul>

@throws TypeNotPresentException  if any of the
    bounds refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the
    bounds refer to a parameterized type that cannot be instantiated
    for any reason
@return an array of {@code Type}s representing the upper
    bound(s) of this type variable
"
      end

      operation 7366018 "getGenericDeclaration"
	cpp_inline public explicit_return_type "D"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code GenericDeclaration} object representing the
generic declaration declared this type variable.

@return the generic declaration declared for this type variable.

@since 1.5
"
      end

      operation 7366146 "getName"
	cpp_inline public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this type variable, as it occurs in the source code.

@return the name of this type variable, as it appears in the source code
"
      end

      operation 7366274 "getAnnotatedBounds"
	cpp_inline public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of AnnotatedType objects that represent the use of
types to denote the upper bounds of the type parameter represented by
this TypeVariable. The order of the objects in the array corresponds to
the order of the bounds in the declaration of the type parameter.

Returns an array of length 0 if the type parameter declares no bounds.

@return an array of objects representing the upper bounds of the type variable
@since 1.8
"
      end
    end

    class 931586 "Executable"
      abstract visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "A shared superclass for the common functionality of {@link Method}
and {@link Constructor}.

@since 1.8
"
      classrelation 3220866 // <generalisation>
	relation 3220866 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3220866 // <generalisation>
	  b parent class_ref 957058 // AccessibleObject
      end

      classrelation 3220994 // <realization>
	relation 3220994 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3220994 // <realization>
	  b parent class_ref 194690 // Member
      end

      classrelation 3221122 // <realization>
	relation 3221122 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3221122 // <realization>
	  b parent class_ref 930818 // GenericDeclaration
      end

      operation 7332098 "Executable"
	package explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Only grant package-visibility to the constructor.
"
      end

      operation 7332226 "getAnnotationBytes"
	abstract package explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accessor method to allow code sharing
"
      end

      operation 7332354 "getRoot"
	abstract package return_type class_ref 931586 // Executable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accessor method to allow code sharing
"
      end

      operation 7332482 "hasGenericInformation"
	abstract package explicit_return_type "boolean"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the Executable have generic information.
"
      end

      operation 7332610 "getGenericInfo"
	abstract package explicit_return_type "ConstructorRepository"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7332738 "equalParamTypes"
	package explicit_return_type "boolean"
	nparams 2
	  param inout name "params1" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "params2" type class_ref 130818 // Class
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?>[] ${p0}, ${t1}<?>[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7332866 "parseParameterAnnotations"
	package return_type class_ref 494850 // Annotation
	nparams 1
	  param inout name "parameterAnnotations" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7332994 "separateWithCommas"
	package explicit_return_type "void"
	nparams 2
	  param inout name "types" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "sb" type class_ref 173058 // StringBuilder
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?>[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7333122 "printModifiersIfNonzero"
	package explicit_return_type "void"
	nparams 3
	  param inout name "sb" type class_ref 173058 // StringBuilder
	  param in name "mask" explicit_type "int"
	  param inout name "isDefault" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7333250 "sharedToString"
	package return_type class_ref 128130 // String
	nparams 4
	  param in name "modifierMask" explicit_type "int"
	  param inout name "isDefault" explicit_type "boolean"
	  param inout name "parameterTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "exceptionTypes" type class_ref 130818 // Class
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?>[] ${p2}, ${t3}<?>[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7333378 "specificToStringHeader"
	abstract package explicit_return_type "void"
	nparams 1
	  param inout name "sb" type class_ref 173058 // StringBuilder
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate toString header information specific to a method or
constructor.
"
      end

      operation 7333506 "sharedToGenericString"
	package return_type class_ref 128130 // String
	nparams 2
	  param in name "modifierMask" explicit_type "int"
	  param inout name "isDefault" explicit_type "boolean"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7333634 "specificToGenericStringHeader"
	abstract package explicit_return_type "void"
	nparams 1
	  param inout name "sb" type class_ref 173058 // StringBuilder
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate toGenericString header information specific to a
method or constructor.
"
      end

      operation 7333762 "getDeclaringClass"
	abstract public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Class} object representing the class or interface
that declares the executable represented by this object.
"
      end

      operation 7333890 "getName"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the executable represented by this object.
"
      end

      operation 7334018 "getModifiers"
	abstract public explicit_return_type "int"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Java language {@linkplain Modifier modifiers} for
the executable represented by this object.
"
      end

      operation 7334146 "getTypeParameters"
	abstract public return_type class_ref 930946 // TypeVariable
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code TypeVariable} objects that represent the
type variables declared by the generic declaration represented by this
{@code GenericDeclaration} object, in declaration order.  Returns an
array of length 0 if the underlying generic declaration declares no type
variables.

@return an array of {@code TypeVariable} objects that represent
    the type variables declared by this generic declaration
@throws GenericSignatureFormatError if the generic
    signature of this generic declaration does not conform to
    the format specified in
    <cite>The Java&trade; Virtual Machine Specification</cite>
"
      end

      operation 7334274 "getParameterTypes"
	abstract public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Class} objects that represent the formal
parameter types, in declaration order, of the executable
represented by this object.  Returns an array of length
0 if the underlying executable takes no parameters.

@return the parameter types for the executable this object
represents
"
      end

      operation 7334402 "getParameterCount"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of formal parameters (whether explicitly
declared or implicitly declared or neither) for the executable
represented by this object.

@return The number of formal parameters for the executable this
object represents
"
      end

      operation 7334530 "getGenericParameterTypes"
	public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Type} objects that represent the formal
parameter types, in declaration order, of the executable represented by
this object. Returns an array of length 0 if the
underlying executable takes no parameters.

<p>If a formal parameter type is a parameterized type,
the {@code Type} object returned for it must accurately reflect
the actual type parameters used in the source code.

<p>If a formal parameter type is a type variable or a parameterized
type, it is created. Otherwise, it is resolved.

@return an array of {@code Type}s that represent the formal
    parameter types of the underlying executable, in declaration order
@throws GenericSignatureFormatError
    if the generic method signature does not conform to the format
    specified in
    <cite>The Java&trade; Virtual Machine Specification</cite>
@throws TypeNotPresentException if any of the parameter
    types of the underlying executable refers to a non-existent type
    declaration
@throws MalformedParameterizedTypeException if any of
    the underlying executable's parameter types refer to a parameterized
    type that cannot be instantiated for any reason
"
      end

      operation 7334658 "getAllGenericParameterTypes"
	package return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Behaves like {@code getGenericParameterTypes}, but returns type
information for all parameters, including synthetic parameters.
"
      end

      operation 7334786 "getParameters"
	public return_type class_ref 957826 // Parameter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Parameter} objects that represent
all the parameters to the underlying executable represented by
this object.  Returns an array of length 0 if the executable
has no parameters.

<p>The parameters of the underlying executable do not necessarily
have unique names, or names that are legal identifiers in the
Java programming language (JLS 3.8).

@throws MalformedParametersException if the class file contains
a MethodParameters attribute that is improperly formatted.
@return an array of {@code Parameter} objects representing all
the parameters to the executable this object represents.
"
      end

      operation 7334914 "synthesizeAllParams"
	private return_type class_ref 957826 // Parameter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7335042 "verifyParameters"
	private explicit_return_type "void"
	nparams 1
	  param in name "parameters" type class_ref 957826 // Parameter
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7335170 "privateGetParameters"
	private return_type class_ref 957826 // Parameter
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7335298 "hasRealParameterData"
	package explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1735682 "hasRealParameterData"
	volatile private explicit_type "boolean"
	cpp_decl ""
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3221250 // parameters (<unidirectional association>)
	relation 3221250 --->
	  a role_name "parameters" multiplicity "[]" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 3221250 // parameters (<unidirectional association>)
	  b parent class_ref 957826 // Parameter
      end

      operation 7335426 "getParameters0"
	private return_type class_ref 957826 // Parameter
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7335554 "getTypeAnnotationBytes0"
	package explicit_return_type "byte"
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${)}${throws};
s"
	
	
	
      end

      operation 7335682 "getTypeAnnotationBytes"
	package explicit_return_type "byte"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Needed by reflectaccess"
      end

      operation 7335810 "getExceptionTypes"
	abstract public return_type class_ref 130818 // Class
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?>[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Class} objects that represent the
types of exceptions declared to be thrown by the underlying
executable represented by this object.  Returns an array of
length 0 if the executable declares no exceptions in its {@code
throws} clause.

@return the exception types declared as being thrown by the
executable this object represents
"
      end

      operation 7335938 "getGenericExceptionTypes"
	public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Type} objects that represent the
exceptions declared to be thrown by this executable object.
Returns an array of length 0 if the underlying executable declares
no exceptions in its {@code throws} clause.

<p>If an exception type is a type variable or a parameterized
type, it is created. Otherwise, it is resolved.

@return an array of Types that represent the exception types
    thrown by the underlying executable
@throws GenericSignatureFormatError
    if the generic method signature does not conform to the format
    specified in
    <cite>The Java&trade; Virtual Machine Specification</cite>
@throws TypeNotPresentException if the underlying executable's
    {@code throws} clause refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if
    the underlying executable's {@code throws} clause refers to a
    parameterized type that cannot be instantiated for any reason
"
      end

      operation 7336066 "toGenericString"
	abstract public return_type class_ref 128130 // String
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this {@code Executable}, including
any type parameters.
@return a string describing this {@code Executable}, including
any type parameters
"
      end

      operation 7336194 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this executable was declared to take a
variable number of arguments; returns {@code false} otherwise.

@return {@code true} if an only if this executable was declared
to take a variable number of arguments.
"
      end

      operation 7336322 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this executable is a synthetic
construct; returns {@code false} otherwise.

@return true if and only if this executable is a synthetic
construct as defined by
<cite>The Java&trade; Language Specification</cite>.
@jls 13.1 The Form of a Binary
"
      end

      operation 7336450 "getParameterAnnotations"
	abstract public return_type class_ref 494850 // Annotation
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of arrays of {@code Annotation}s that
represent the annotations on the formal parameters, in
declaration order, of the {@code Executable} represented by
this object.  Synthetic and mandated parameters (see
explanation below), such as the outer \"this\" parameter to an
inner class constructor will be represented in the returned
array.  If the executable has no parameters (meaning no formal,
no synthetic, and no mandated parameters), a zero-length array
will be returned.  If the {@code Executable} has one or more
parameters, a nested array of length zero is returned for each
parameter with no annotations. The annotation objects contained
in the returned arrays are serializable.  The caller of this
method is free to modify the returned arrays; it will have no
effect on the arrays returned to other callers.

A compiler may add extra parameters that are implicitly
declared in source (\"mandated\"), as well as parameters that
are neither implicitly nor explicitly declared in source
(\"synthetic\") to the parameter list for a method.  See {@link
java.lang.reflect.Parameter} for more information.

@see java.lang.reflect.Parameter
@see java.lang.reflect.Parameter#getAnnotations
@return an array of arrays that represent the annotations on
   the formal and implicit parameters, in declaration order, of
   the executable represented by this object
"
      end

      operation 7336578 "sharedGetParameterAnnotations"
	package return_type class_ref 494850 // Annotation
	nparams 2
	  param inout name "parameterTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "parameterAnnotations" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[][] ${name}${(}${t0}<?>[] ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7336706 "handleParameterNumberMismatch"
	abstract package explicit_return_type "void"
	nparams 2
	  param in name "resultLength" explicit_type "int"
	  param in name "numParameters" explicit_type "int"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7336834 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@throws NullPointerException  {@inheritDoc}
"
      end

      operation 7336962 "getAnnotationsByType"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 7337090 "getDeclaredAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      classrelation 3221378 // declaredAnnotations (<unidirectional association>)
	relation 3221378 --->
	  a role_name "declaredAnnotations" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<? extends Annotation>, Annotation> ${name}${value};
"
	    classrelation_ref 3221378 // declaredAnnotations (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 7337218 "declaredAnnotations"
	private return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<? extends Annotation>, Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7337346 "getAnnotatedReturnType"
	abstract public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code AnnotatedType} object that represents the use of a type to
specify the return type of the method/constructor represented by this
Executable.

If this {@code Executable} object represents a constructor, the {@code
AnnotatedType} object represents the type of the constructed object.

If this {@code Executable} object represents a method, the {@code
AnnotatedType} object represents the use of a type to specify the return
type of the method.

@return an object representing the return type of the method
or constructor represented by this {@code Executable}
"
      end

      operation 7337474 "getAnnotatedReturnType0"
	package return_type class_ref 931842 // AnnotatedType
	nparams 1
	  param inout name "returnType" type class_ref 490114 // Type
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Helper for subclasses of Executable.

Returns an AnnotatedType object that represents the use of a type to
specify the return type of the method/constructor represented by this
Executable.
"
      end

      operation 7337602 "getAnnotatedReceiverType"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@code AnnotatedType} object that represents the use of a
type to specify the receiver type of the method/constructor represented
by this Executable object. The receiver type of a method/constructor is
available only if the method/constructor has a <em>receiver
parameter</em> (JLS 8.4.1).

If this {@code Executable} object represents a constructor or instance
method that does not have a receiver parameter, or has a receiver
parameter with no annotations on its type, then the return value is an
{@code AnnotatedType} object representing an element with no
annotations.

If this {@code Executable} object represents a static method, then the
return value is null.

@return an object representing the receiver type of the method or
constructor represented by this {@code Executable}
"
      end

      operation 7337730 "getAnnotatedParameterTypes"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code AnnotatedType} objects that represent the use
of types to specify formal parameter types of the method/constructor
represented by this Executable. The order of the objects in the array
corresponds to the order of the formal parameter types in the
declaration of the method/constructor.

Returns an array of length 0 if the method/constructor declares no
parameters.

@return an array of objects representing the types of the
formal parameters of the method or constructor represented by this
{@code Executable}
"
      end

      operation 7337858 "getAnnotatedExceptionTypes"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code AnnotatedType} objects that represent the use
of types to specify the declared exceptions of the method/constructor
represented by this Executable. The order of the objects in the array
corresponds to the order of the exception types in the declaration of
the method/constructor.

Returns an array of length 0 if the method/constructor declares no
exceptions.

@return an array of objects representing the declared
exceptions of the method or constructor represented by this {@code
Executable}
"
      end
    end

    class 931842 "AnnotatedType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code AnnotatedType} represents the potentially annotated use of a type in
the program currently running in this VM. The use may be of any type in the
Java programming language, including an array type, a parameterized type, a
type variable, or a wildcard type.

@since 1.8
"
      classrelation 3220226 // <generalisation>
	relation 3220226 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3220226 // <generalisation>
	  b parent class_ref 494722 // AnnotatedElement
      end

      operation 7328258 "getType"
	public return_type class_ref 490114 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the underlying type that this annotated type represents.

@return the type this annotated type represents
"
      end
    end

    class 957058 "AccessibleObject"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The AccessibleObject class is the base class for Field, Method and
Constructor objects.  It provides the ability to flag a reflected
object as suppressing default Java language access control checks
when it is used.  The access checks--for public, default (package)
access, protected, and private members--are performed when Fields,
Methods or Constructors are used to set or get fields, to invoke
methods, or to create and initialize new instances of classes,
respectively.

<p>Setting the {@code accessible} flag in a reflected object
permits sophisticated applications with sufficient privilege, such
as Java Object Serialization or other persistence mechanisms, to
manipulate objects in a manner that would normally be prohibited.

<p>By default, a reflected object is <em>not</em> accessible.

@see Field
@see Method
@see Constructor
@see ReflectPermission

@since 1.2
"
      classrelation 3219842 // <realization>
	relation 3219842 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3219842 // <realization>
	  b parent class_ref 494722 // AnnotatedElement
      end

      classrelation 3219970 // ACCESS_PERMISSION (<unidirectional association>)
	relation 3219970 --->
	  a role_name "ACCESS_PERMISSION" init_value "
        new ReflectPermission(\"suppressAccessChecks\")" class_relation const_relation private
	    comment "
The Permission object that is used to check whether a client
has sufficient privilege to defeat Java language access
control checks.

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3219970 // ACCESS_PERMISSION (<unidirectional association>)
	  b parent class_ref 257538 // Permission
      end

      operation 7326466 "setAccessible"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "array" type class_ref 957058 // AccessibleObject
	multiplicity "[]"
	  param inout name "flag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convenience method to set the {@code accessible} flag for an
array of objects with a single security check (for efficiency).

<p>First, if there is a security manager, its
{@code checkPermission} method is called with a
{@code ReflectPermission(\"suppressAccessChecks\")} permission.

<p>A {@code SecurityException} is raised if {@code flag} is
{@code true} but accessibility of any of the elements of the input
{@code array} may not be changed (for example, if the element
object is a {@link Constructor} object for the class {@link
java.lang.Class}).  In the event of such a SecurityException, the
accessibility of objects is set to {@code flag} for array elements
upto (and excluding) the element for which the exception occurred; the
accessibility of elements beyond (and including) the element for which
the exception occurred is unchanged.

@param array the array of AccessibleObjects
@param flag  the new value for the {@code accessible} flag
             in each object
@throws SecurityException if the request is denied.
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission
"
      end

      operation 7326594 "setAccessible"
	public explicit_return_type "void"
	nparams 1
	  param inout name "flag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the {@code accessible} flag for this object to
the indicated boolean value.  A value of {@code true} indicates that
the reflected object should suppress Java language access
checking when it is used.  A value of {@code false} indicates
that the reflected object should enforce Java language access checks.

<p>First, if there is a security manager, its
{@code checkPermission} method is called with a
{@code ReflectPermission(\"suppressAccessChecks\")} permission.

<p>A {@code SecurityException} is raised if {@code flag} is
{@code true} but accessibility of this object may not be changed
(for example, if this element object is a {@link Constructor} object for
the class {@link java.lang.Class}).

<p>A {@code SecurityException} is raised if this object is a {@link
java.lang.reflect.Constructor} object for the class
{@code java.lang.Class}, and {@code flag} is true.

@param flag the new value for the {@code accessible} flag
@throws SecurityException if the request is denied.
@see SecurityManager#checkPermission
@see java.lang.RuntimePermission
"
      end

      operation 7326722 "setAccessible0"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 957058 // AccessibleObject
	  param inout name "flag" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 171138 // SecurityException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Check that you aren't exposing java.lang.Class.<init> or sensitive
fields in java.lang.Class. "
      end

      operation 7326850 "isAccessible"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value of the {@code accessible} flag for this object.

@return the value of the object's {@code accessible} flag
"
      end

      operation 7326978 "AccessibleObject"
	protected explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor: only used by the Java Virtual Machine.
"
      end

      attribute 1735426 "override"
	package explicit_type "boolean"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Indicates whether language-level access checks are overridden
 by this object. Initializes to \"false\". This field is used by
 Field, Method, and Constructor.

 NOTE: for security purposes, this field must not be visible
 outside this package.
"
      end

      attribute 1735554 "reflectionFactory"
	class_attribute const_attribute package explicit_type "ReflectionFactory"
	init_value "
        AccessController.doPrivileged(
            new sun.reflect.ReflectionFactory.GetReflectionFactoryAction())"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Reflection factory used by subclasses for creating field,
 method, and constructor accessors. Note that this is called
 very early in the bootstrapping process.
"
      end

      operation 7327106 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since 1.5
"
      end

      operation 7327234 "isAnnotationPresent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends Annotation> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws NullPointerException {@inheritDoc}
@since 1.5
"
      end

      operation 7327362 "getAnnotationsByType"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 7327490 "getAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 1.5
"
      end

      operation 7327618 "getDeclaredAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 7327746 "getDeclaredAnnotationsByType"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@since 1.8
"
      end

      operation 7327874 "getDeclaredAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@since 1.5
"
      end

      classrelation 3220098 // securityCheckCache (<unidirectional association>)
	relation 3220098 --->
	  a role_name "securityCheckCache" volatile package
	    comment " Shared access checking logic.
 For non-public members or members in package-private classes,
 it is necessary to perform somewhat expensive security checks.
 If the security check succeeds for a given class, it will
 always succeed (it is not affected by the granting or revoking
 of permissions); we speed up the check in the common case by
 remembering the last Class for which the check succeeded.

 The simple security check for Constructor is to see if
 the caller has already been seen, verified, and cached.
 (See also Class.newInstance(), which uses a similar method.)

 A more complicated security check cache is needed for Method and Field
 The cache can be either null (empty cache), a 2-array of {caller,target},
 or a caller (with target implicitly equal to this.clazz).
 In the 2-array case, the target is always different from the clazz.
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3220098 // securityCheckCache (<unidirectional association>)
	  b parent class_ref 129538 // Object
      end

      operation 7328002 "checkAccess"
	package explicit_return_type "void"
	nparams 4
	  param inout name "caller" type class_ref 130818 // Class
	  param inout name "clazz" type class_ref 130818 // Class
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "modifiers" explicit_type "int"
	nexceptions 1
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7328130 "slowCheckMemberAccess"
	package explicit_return_type "void"
	nparams 5
	  param inout name "caller" type class_ref 130818 // Class
	  param inout name "clazz" type class_ref 130818 // Class
	  param inout name "obj" type class_ref 129538 // Object
	  param in name "modifiers" explicit_type "int"
	  param inout name "targetClass" type class_ref 130818 // Class
	nexceptions 1
	  exception class_ref 321538 // IllegalAccessException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<?> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Keep all this slow stuff out of line:"
      end
    end

    class 957186 "AnnotatedArrayType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code AnnotatedArrayType} represents the potentially annotated use of an
array type, whose component type may itself represent the annotated use of a
type.

@since 1.8
"
      classrelation 3220354 // <generalisation>
	relation 3220354 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3220354 // <generalisation>
	  b parent class_ref 931842 // AnnotatedType
      end

      operation 7328386 "getAnnotatedGenericComponentType"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the potentially annotated generic component type of this array type.

@return the potentially annotated generic component type of this array type
"
      end
    end

    class 957314 "AnnotatedParameterizedType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code AnnotatedParameterizedType} represents the potentially annotated use
of a parameterized type, whose type arguments may themselves represent
annotated uses of types.

@since 1.8
"
      classrelation 3220482 // <generalisation>
	relation 3220482 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3220482 // <generalisation>
	  b parent class_ref 931842 // AnnotatedType
      end

      operation 7328514 "getAnnotatedActualTypeArguments"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the potentially annotated actual type arguments of this parameterized type.

@return the potentially annotated actual type arguments of this parameterized type
"
      end
    end

    class 957442 "AnnotatedTypeVariable"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code AnnotatedTypeVariable} represents the potentially annotated use of a
type variable, whose declaration may have bounds which themselves represent
annotated uses of types.

@since 1.8
"
      classrelation 3220610 // <generalisation>
	relation 3220610 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3220610 // <generalisation>
	  b parent class_ref 931842 // AnnotatedType
      end

      operation 7328642 "getAnnotatedBounds"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the potentially annotated bounds of this type variable.

@return the potentially annotated bounds of this type variable
"
      end
    end

    class 957570 "AnnotatedWildcardType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code AnnotatedWildcardType} represents the potentially annotated use of a
wildcard type argument, whose upper or lower bounds may themselves represent
annotated uses of types.

@since 1.8
"
      classrelation 3220738 // <generalisation>
	relation 3220738 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3220738 // <generalisation>
	  b parent class_ref 931842 // AnnotatedType
      end

      operation 7328770 "getAnnotatedLowerBounds"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the potentially annotated lower bounds of this wildcard type.

@return the potentially annotated lower bounds of this wildcard type
"
      end

      operation 7328898 "getAnnotatedUpperBounds"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the potentially annotated upper bounds of this wildcard type.

@return the potentially annotated upper bounds of this wildcard type
"
      end
    end

    class 957698 "Array"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The {@code Array} class provides static methods to dynamically create and
access Java arrays.

<p>{@code Array} permits widening conversions to occur during a get or set
operation, but throws an {@code IllegalArgumentException} if a narrowing
conversion would occur.

@author Nakul Saraiya
"
      operation 7329026 "Array"
	private explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.  Class Array is not instantiable.
"
      end

      operation 7329154 "newInstance"
	class_operation public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "componentType" type class_ref 130818 // Class
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 935042 // NegativeArraySizeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new array with the specified component type and
length.
Invoking this method is equivalent to creating an array
as follows:
<blockquote>
<pre>
int[] x = {length};
Array.newInstance(componentType, x);
</pre>
</blockquote>

<p>The number of dimensions of the new array must not
exceed 255.

@param componentType the {@code Class} object representing the
component type of the new array
@param length the length of the new array
@return the new array
@exception NullPointerException if the specified
{@code componentType} parameter is null
@exception IllegalArgumentException if componentType is {@link
Void#TYPE} or if the number of dimensions of the requested array
instance exceed 255.
@exception NegativeArraySizeException if the specified {@code length}
is negative
"
      end

      operation 7329282 "newInstance"
	class_operation public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "componentType" type class_ref 130818 // Class
	  param inout name "" explicit_type "int...dimensions"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 935042 // NegativeArraySizeException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new array
with the specified component type and dimensions.
If {@code componentType}
represents a non-array class or interface, the new array
has {@code dimensions.length} dimensions and
{@code componentType} as its component type. If
{@code componentType} represents an array class, the
number of dimensions of the new array is equal to the sum
of {@code dimensions.length} and the number of
dimensions of {@code componentType}. In this case, the
component type of the new array is the component type of
{@code componentType}.

<p>The number of dimensions of the new array must not
exceed 255.

@param componentType the {@code Class} object representing the component
type of the new array
@param dimensions an array of {@code int} representing the dimensions of
the new array
@return the new array
@exception NullPointerException if the specified
{@code componentType} argument is null
@exception IllegalArgumentException if the specified {@code dimensions}
argument is a zero-dimensional array, if componentType is {@link
Void#TYPE}, or if the number of dimensions of the requested array
instance exceed 255.
@exception NegativeArraySizeException if any of the components in
the specified {@code dimensions} argument is negative.
"
      end

      operation 7329410 "getLength"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "array" type class_ref 129538 // Object
	nexceptions 1
	  exception class_ref 187778 // IllegalArgumentException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
s"
	
	
	
	comment "Returns the length of the specified array object, as an {@code int}.

@param array the array
@return the length of the array
@exception IllegalArgumentException if the object argument is not
an array
"
      end

      operation 7329538 "get"
	class_operation public return_type class_ref 129538 // Object
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object.  The value is automatically wrapped in an object
if it has a primitive type.

@param array the array
@param index the index
@return the (possibly wrapped) value of the indexed component in
the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
"
      end

      operation 7329666 "getBoolean"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a {@code boolean}.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get
"
      end

      operation 7329794 "getByte"
	class_operation public explicit_return_type "byte"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a {@code byte}.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get
"
      end

      operation 7329922 "getChar"
	class_operation public explicit_return_type "char"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a {@code char}.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get
"
      end

      operation 7330050 "getShort"
	class_operation public explicit_return_type "short"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a {@code short}.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get
"
      end

      operation 7330178 "getInt"
	class_operation public explicit_return_type "int"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as an {@code int}.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get
"
      end

      operation 7330306 "getLong"
	class_operation public explicit_return_type "long"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a {@code long}.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get
"
      end

      operation 7330434 "getFloat"
	class_operation public explicit_return_type "float"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a {@code float}.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get
"
      end

      operation 7330562 "getDouble"
	class_operation public explicit_return_type "double"
	nparams 2
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Returns the value of the indexed component in the specified
array object, as a {@code double}.

@param array the array
@param index the index
@return the value of the indexed component in the specified array
@exception NullPointerException If the specified object is null
@exception IllegalArgumentException If the specified object is not
an array, or if the indexed element cannot be converted to the
return type by an identity or widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to the
length of the specified array
@see Array#get
"
      end

      operation 7330690 "set"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param inout name "value" type class_ref 129538 // Object
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified new value.  The new value is first
automatically unwrapped if the array has a primitive component
type.
@param array the array
@param index the index into the array
@param value the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the array component type is primitive and
an unwrapping conversion fails
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
"
      end

      operation 7330818 "setBoolean"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param inout name "z" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified {@code boolean} value.
@param array the array
@param index the index into the array
@param z the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set
"
      end

      operation 7330946 "setByte"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param in name "b" explicit_type "byte"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified {@code byte} value.
@param array the array
@param index the index into the array
@param b the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set
"
      end

      operation 7331074 "setChar"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param in name "c" explicit_type "char"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified {@code char} value.
@param array the array
@param index the index into the array
@param c the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set
"
      end

      operation 7331202 "setShort"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param in name "s" explicit_type "short"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified {@code short} value.
@param array the array
@param index the index into the array
@param s the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set
"
      end

      operation 7331330 "setInt"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param in name "i" explicit_type "int"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified {@code int} value.
@param array the array
@param index the index into the array
@param i the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set
"
      end

      operation 7331458 "setLong"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param in name "l" explicit_type "long"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified {@code long} value.
@param array the array
@param index the index into the array
@param l the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set
"
      end

      operation 7331586 "setFloat"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param in name "f" explicit_type "float"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified {@code float} value.
@param array the array
@param index the index into the array
@param f the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set
"
      end

      operation 7331714 "setDouble"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "array" type class_ref 129538 // Object
	  param in name "index" explicit_type "int"
	  param in name "d" explicit_type "double"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 742274 // ArrayIndexOutOfBoundsException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
s"
	
	
	
	comment "Sets the value of the indexed component of the specified array
object to the specified {@code double} value.
@param array the array
@param index the index into the array
@param d the new value of the indexed component
@exception NullPointerException If the specified object argument
is null
@exception IllegalArgumentException If the specified object argument
is not an array, or if the specified value cannot be converted
to the underlying array's component type by an identity or a
primitive widening conversion
@exception ArrayIndexOutOfBoundsException If the specified {@code index}
argument is negative, or if it is greater than or equal to
the length of the specified array
@see Array#set
"
      end

      operation 7331842 "newArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "componentType" type class_ref 130818 // Class
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 935042 // NegativeArraySizeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws};
s"
	
	
	
	comment "Private
"
      end

      operation 7331970 "multiNewArray"
	class_operation private return_type class_ref 129538 // Object
	nparams 2
	  param inout name "componentType" type class_ref 130818 // Class
	  param inout name "dimensions" explicit_type "int"
	multiplicity "[]"
	nexceptions 2
	  exception class_ref 187778 // IllegalArgumentException
	  exception class_ref 935042 // NegativeArraySizeException
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}${)}${throws};
s"
	
	
	
      end
    end

    class 957826 "Parameter"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Information about method parameters.

A {@code Parameter} provides information about method parameters,
including its name and modifiers.  It also provides an alternate
means of obtaining attributes for the parameter.

@since 1.8
"
      classrelation 3225090 // <realization>
	relation 3225090 -_-|>
	  a public
	    java "${type}"
	    classrelation_ref 3225090 // <realization>
	  b parent class_ref 494722 // AnnotatedElement
      end

      classrelation 3225218 // name (<unidirectional association>)
	relation 3225218 --->
	  a role_name "name" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3225218 // name (<unidirectional association>)
	  b parent class_ref 128130 // String
      end

      attribute 1741954 "modifiers"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3225346 // executable (<unidirectional association>)
	relation 3225346 --->
	  a role_name "executable" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3225346 // executable (<unidirectional association>)
	  b parent class_ref 931586 // Executable
      end

      attribute 1742082 "index"
	const_attribute private explicit_type "int"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7357442 "Parameter"
	package explicit_return_type ""
	nparams 4
	  param inout name "name" type class_ref 128130 // String
	  param in name "modifiers" explicit_type "int"
	  param inout name "executable" type class_ref 931586 // Executable
	  param in name "index" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Package-private constructor for {@code Parameter}.

If method parameter data is present in the classfile, then the
JVM creates {@code Parameter} objects directly.  If it is
absent, however, then {@code Executable} uses this constructor
to synthesize them.

@param name The name of the parameter.
@param modifiers The modifier flags for the parameter.
@param executable The executable which defines this parameter.
@param index The index of the parameter.
"
      end

      operation 7357570 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 129538 // Object
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares based on the executable and the index.

@param obj The object to compare.
@return Whether or not this is equal to the argument.
"
      end

      operation 7357698 "hashCode"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash code based on the executable's hash code and the
index.

@return A hash code based on the executable's hash code.
"
      end

      operation 7357826 "isNamePresent"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the parameter has a name according to the class
file; returns false otherwise. Whether a parameter has a name
is determined by the {@literal MethodParameters} attribute of
the method which declares the parameter.

@return true if and only if the parameter has a name according
to the class file.
"
      end

      operation 7357954 "toString"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string describing this parameter.  The format is the
modifiers for the parameter, if any, in canonical order as
recommended by <cite>The Java&trade; Language
Specification</cite>, followed by the fully- qualified type of
the parameter (excluding the last [] if the parameter is
variable arity), followed by \"...\" if the parameter is variable
arity, followed by a space, followed by the name of the
parameter.

@return A string representation of the parameter and associated
information.
"
      end

      operation 7358082 "getDeclaringExecutable"
	public return_type class_ref 931586 // Executable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the {@code Executable} which declares this parameter.

@return The {@code Executable} declaring this parameter.
"
      end

      operation 7358210 "getModifiers"
	public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the modifier flags for this the parameter represented by
this {@code Parameter} object.

@return The modifier flags for this parameter.
"
      end

      operation 7358338 "getName"
	public return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the parameter.  If the parameter's name is
{@linkplain #isNamePresent() present}, then this method returns
the name provided by the class file. Otherwise, this method
synthesizes a name of the form argN, where N is the index of
the parameter in the descriptor of the method which declares
the parameter.

@return The name of the parameter, either provided by the class
        file or synthesized if the class file does not provide
        a name.
"
      end

      operation 7358466 "getRealName"
	package return_type class_ref 128130 // String
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Package-private accessor to the real name field."
      end

      operation 7358594 "getParameterizedType"
	public return_type class_ref 490114 // Type
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Type} object that identifies the parameterized
type for the parameter represented by this {@code Parameter}
object.

@return a {@code Type} object identifying the parameterized
type of the parameter represented by this object
"
      end

      classrelation 3225474 // parameterTypeCache (<unidirectional association>)
	relation 3225474 --->
	  a role_name "parameterTypeCache" init_value " null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3225474 // parameterTypeCache (<unidirectional association>)
	  b parent class_ref 490114 // Type
      end

      operation 7358722 "getType"
	public return_type class_ref 130818 // Class
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Class} object that identifies the
declared type for the parameter represented by this
{@code Parameter} object.

@return a {@code Class} object identifying the declared
type of the parameter represented by this object
"
      end

      operation 7358850 "getAnnotatedType"
	public return_type class_ref 931842 // AnnotatedType
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an AnnotatedType object that represents the use of a type to
specify the type of the formal parameter represented by this Parameter.

@return an {@code AnnotatedType} object representing the use of a type
        to specify the type of the formal parameter represented by this
        Parameter
"
      end

      classrelation 3225602 // parameterClassCache (<unidirectional association>)
	relation 3225602 --->
	  a role_name "parameterClassCache" init_value " null" volatile private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 3225602 // parameterClassCache (<unidirectional association>)
	  b parent class_ref 130818 // Class
      end

      operation 7358978 "isImplicit"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this parameter is implicitly declared
in source code; returns {@code false} otherwise.

@return true if and only if this parameter is implicitly
declared as defined by <cite>The Java&trade; Language
Specification</cite>.
"
      end

      operation 7359106 "isSynthetic"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this parameter is neither implicitly
nor explicitly declared in source code; returns {@code false}
otherwise.

@jls 13.1 The Form of a Binary
@return true if and only if this parameter is a synthetic
construct as defined by
<cite>The Java&trade; Language Specification</cite>.
"
      end

      operation 7359234 "isVarArgs"
	public explicit_return_type "boolean"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this parameter represents a variable
argument list; returns {@code false} otherwise.

@return {@code true} if an only if this parameter represents a
variable argument list.
"
      end

      operation 7359362 "getAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 7359490 "getAnnotationsByType"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "{@inheritDoc}
@throws NullPointerException {@inheritDoc}
"
      end

      operation 7359618 "getDeclaredAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      operation 7359746 "getDeclaredAnnotation"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
"
      end

      operation 7359874 "getDeclaredAnnotationsByType"
	public explicit_return_type "T"
	nparams 1
	  param inout name "annotationClass" type class_ref 130818 // Class
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends Annotation> ${type}[] ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
"
      end

      operation 7360002 "getAnnotations"
	public return_type class_ref 494850 // Annotation
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}
"
      end

      classrelation 3225730 // declaredAnnotations (<unidirectional association>)
	relation 3225730 --->
	  a role_name "declaredAnnotations" private
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Class<? extends Annotation>, Annotation> ${name}${value};
"
	    classrelation_ref 3225730 // declaredAnnotations (<unidirectional association>)
	  b parent class_ref 130178 // Map
      end

      operation 7360130 "declaredAnnotations"
	private return_type class_ref 130178 // Map
	nparams 0
	
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Class<? extends Annotation>, Annotation> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 957954 "GenericArrayType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "{@code GenericArrayType} represents an array type whose component
type is either a parameterized type or a type variable.
@since 1.5
"
      classrelation 3223298 // <generalisation>
	relation 3223298 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3223298 // <generalisation>
	  b parent class_ref 490114 // Type
      end

      operation 7348482 "getGenericComponentType"
	public return_type class_ref 490114 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Type} object representing the component type
of this array. This method creates the component type of the
array.  See the declaration of {@link
java.lang.reflect.ParameterizedType ParameterizedType} for the
semantics of the creation process for parameterized types and
see {@link java.lang.reflect.TypeVariable TypeVariable} for the
creation process for type variables.

@return  a {@code Type} object representing the component type
    of this array
@throws TypeNotPresentException if the underlying array type's
    component type refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if  the
    underlying array type's component type refers to a
    parameterized type that cannot be instantiated for any reason
"
      end
    end

    class 958082 "GenericSignatureFormatError"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when a syntactically malformed signature attribute is
encountered by a reflective method that needs to interpret the
generic signature information for a type, method or constructor.

@since 1.5
"
      classrelation 3223426 // <generalisation>
	relation 3223426 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3223426 // <generalisation>
	  b parent class_ref 319746 // ClassFormatError
      end

      attribute 1737346 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6709919147137911034L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7348610 "GenericSignatureFormatError"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code GenericSignatureFormatError}.

"
      end

      operation 7348738 "GenericSignatureFormatError"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code GenericSignatureFormatError} with the
specified message.

@param message the detail message, may be {@code null}
"
      end
    end

    class 958210 "MalformedParameterizedTypeException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when a semantically malformed parameterized type is
encountered by a reflective method that needs to instantiate it.
For example, if the number of type arguments to a parameterized type
is wrong.

@since 1.5
"
      classrelation 3223810 // <generalisation>
	relation 3223810 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3223810 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1737602 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5696557788586220964L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end
    end

    class 958338 "MalformedParametersException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown when {@link java.lang.reflect.Executable#getParameters the
java.lang.reflect package} attempts to read method parameters from
a class file and determines that one or more parameters are
malformed.

<p>The following is a list of conditions under which this exception
can be thrown:
<ul>
<li> The number of parameters (parameter_count) is wrong for the method
<li> A constant pool index is out of bounds.
<li> A constant pool index does not refer to a UTF-8 entry
<li> A parameter's name is \"\", or contains an illegal character
<li> The flags field contains an illegal flag (something other than
    FINAL, SYNTHETIC, or MANDATED)
</ul>

See {@link java.lang.reflect.Executable#getParameters} for more
information.

@see java.lang.reflect.Executable#getParameters
@since 1.8
"
      classrelation 3223938 // <generalisation>
	relation 3223938 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3223938 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1737730 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 20130919L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Version for serialization.

"
      end

      operation 7349506 "MalformedParametersException"
	public explicit_return_type ""
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a {@code MalformedParametersException} with an empty
reason.
"
      end

      operation 7349634 "MalformedParametersException"
	public explicit_return_type ""
	nparams 1
	  param inout name "reason" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a {@code MalformedParametersException}.

@param reason The reason for the exception.
"
      end
    end

    class 958466 "Modifier"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Modifier class provides {@code static} methods and
constants to decode class and member access modifiers.  The sets of
modifiers are represented as integers with distinct bit positions
representing different modifiers.  The values for the constants
representing the modifiers are taken from the tables in sections 4.1, 4.4, 4.5, and 4.7 of
<cite>The Java&trade; Virtual Machine Specification</cite>.

@see Class#getModifiers()
@see Member#getModifiers()

@author Nakul Saraiya
@author Kenneth Russell
"
      extra_member 162562 "initialization"
	
	cpp "" ""
	java "  static {
        sun.reflect.ReflectionFactory factory =
            AccessController.doPrivileged(
                new ReflectionFactory.GetReflectionFactoryAction());
        factory.setLangReflectAccess(new java.lang.reflect.ReflectAccess());
    }"
	php ""
	python ""
	idl ""
	mysql ""
      end

      operation 7354754 "isPublic"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code public} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code public} modifier; {@code false} otherwise.
"
      end

      operation 7354882 "isPrivate"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code private} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code private} modifier; {@code false} otherwise.
"
      end

      operation 7355010 "isProtected"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code protected} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code protected} modifier; {@code false} otherwise.
"
      end

      operation 7355138 "isStatic"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code static} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code static} modifier; {@code false} otherwise.
"
      end

      operation 7355266 "isFinal"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code final} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code final} modifier; {@code false} otherwise.
"
      end

      operation 7355394 "isSynchronized"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code synchronized} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code synchronized} modifier; {@code false} otherwise.
"
      end

      operation 7355522 "isVolatile"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code volatile} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code volatile} modifier; {@code false} otherwise.
"
      end

      operation 7355650 "isTransient"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code transient} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code transient} modifier; {@code false} otherwise.
"
      end

      operation 7355778 "isNative"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code native} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code native} modifier; {@code false} otherwise.
"
      end

      operation 7355906 "isInterface"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code interface} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code interface} modifier; {@code false} otherwise.
"
      end

      operation 7356034 "isAbstract"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code abstract} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code abstract} modifier; {@code false} otherwise.
"
      end

      operation 7356162 "isStrict"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return {@code true} if the integer argument includes the
{@code strictfp} modifier, {@code false} otherwise.

@param   mod a set of modifiers
@return {@code true} if {@code mod} includes the
{@code strictfp} modifier; {@code false} otherwise.
"
      end

      operation 7356290 "toString"
	class_operation public return_type class_ref 128130 // String
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a string describing the access modifier flags in
the specified modifier. For example:
<blockquote><pre>
   public final synchronized strictfp
</pre></blockquote>
The modifier names are returned in an order consistent with the
suggested modifier orderings given in sections 8.1.1, 8.3.1, 8.4.3, 8.8.3, and 9.1.1 of
<cite>The Java&trade; Language Specification</cite>.
The full modifier ordering used by this method is:
<blockquote> {@code
public protected private abstract static final transient
volatile synchronized native strictfp
interface } </blockquote>
The {@code interface} modifier discussed in this class is
not a true modifier in the Java language and it appears after
all other modifiers listed by this method.  This method may
return a string of modifiers that are not valid modifiers of a
Java entity; in other words, no checking is done on the
possible validity of the combination of modifiers represented
by the input.

Note that to perform such checking for a known kind of entity,
such as a constructor or method, first AND the argument of
{@code toString} with the appropriate mask from a method like
{@link #constructorModifiers} or {@link #methodModifiers}.

@param   mod a set of modifiers
@return  a string representation of the set of modifiers
represented by {@code mod}
"
      end

      attribute 1738754 "PUBLIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000001"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "Access modifier flag constants from tables 4.1, 4.4, 4.5, and 4.7 of
<cite>The Java&trade; Virtual Machine Specification</cite>


The {@code int} value representing the {@code public}
modifier.

"
      end

      attribute 1738882 "PRIVATE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000002"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code private}
modifier.

"
      end

      attribute 1739010 "PROTECTED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000004"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code protected}
modifier.

"
      end

      attribute 1739138 "STATIC"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000008"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code static}
modifier.

"
      end

      attribute 1739266 "FINAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000010"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code final}
modifier.

"
      end

      attribute 1739394 "SYNCHRONIZED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000020"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code synchronized}
modifier.

"
      end

      attribute 1739522 "VOLATILE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000040"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code volatile}
modifier.

"
      end

      attribute 1739650 "TRANSIENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code transient}
modifier.

"
      end

      attribute 1739778 "NATIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000100"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code native}
modifier.

"
      end

      attribute 1739906 "INTERFACE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000200"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code interface}
modifier.

"
      end

      attribute 1740034 "ABSTRACT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000400"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code abstract}
modifier.

"
      end

      attribute 1740162 "STRICT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000800"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The {@code int} value representing the {@code strictfp}
modifier.

"
      end

      attribute 1740290 "BRIDGE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00000040"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Bits not (yet) exposed in the public API either because they
 have different meanings for fields and methods and there is no
 way to distinguish between the two in this class, or because
 they are not Java programming language keywords
"
      end

      attribute 1740418 "VARARGS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00000080"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1740546 "SYNTHETIC"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00001000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1740674 "ANNOTATION"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00002000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1740802 "ENUM"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00004000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      attribute 1740930 "MANDATED"
	class_attribute const_attribute package explicit_type "int"
	init_value " 0x00008000"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7356418 "isSynthetic"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7356546 "isMandated"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param in name "mod" explicit_type "int"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 1741058 "CLASS_MODIFIERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        Modifier.PUBLIC         | Modifier.PROTECTED    | Modifier.PRIVATE |
        Modifier.ABSTRACT       | Modifier.STATIC       | Modifier.FINAL   |
        Modifier.STRICT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment " Note on the FOO_MODIFIERS fields and fooModifiers() methods:
 the sets of modifiers are not guaranteed to be constants
 across time and Java SE releases. Therefore, it would not be
 appropriate to expose an external interface to this information
 that would allow the values to be treated as Java-level
 constants since the values could be constant folded and updates
 to the sets of modifiers missed. Thus, the fooModifiers()
 methods return an unchanging values for a given release, but a
 value that can potentially change over time.

The Java source modifiers that can be applied to a class.
@jls 8.1.1 Class Modifiers

"
      end

      attribute 1741186 "INTERFACE_MODIFIERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        Modifier.PUBLIC         | Modifier.PROTECTED    | Modifier.PRIVATE |
        Modifier.ABSTRACT       | Modifier.STATIC       | Modifier.STRICT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Java source modifiers that can be applied to an interface.
@jls 9.1.1 Interface Modifiers

"
      end

      attribute 1741314 "CONSTRUCTOR_MODIFIERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        Modifier.PUBLIC         | Modifier.PROTECTED    | Modifier.PRIVATE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Java source modifiers that can be applied to a constructor.
@jls 8.8.3 Constructor Modifiers

"
      end

      attribute 1741442 "METHOD_MODIFIERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        Modifier.PUBLIC         | Modifier.PROTECTED    | Modifier.PRIVATE |
        Modifier.ABSTRACT       | Modifier.STATIC       | Modifier.FINAL   |
        Modifier.SYNCHRONIZED   | Modifier.NATIVE       | Modifier.STRICT"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Java source modifiers that can be applied to a method.
@jls8.4.3  Method Modifiers

"
      end

      attribute 1741570 "FIELD_MODIFIERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        Modifier.PUBLIC         | Modifier.PROTECTED    | Modifier.PRIVATE |
        Modifier.STATIC         | Modifier.FINAL        | Modifier.TRANSIENT |
        Modifier.VOLATILE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Java source modifiers that can be applied to a field.
@jls 8.3.1  Field Modifiers

"
      end

      attribute 1741698 "PARAMETER_MODIFIERS"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        Modifier.FINAL"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "The Java source modifiers that can be applied to a method or constructor parameter.
@jls 8.4.1 Formal Parameters

"
      end

      attribute 1741826 "ACCESS_MODIFIERS"
	class_attribute const_attribute package explicit_type "int"
	init_value "
        Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
	comment "

"
      end

      operation 7356674 "classModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an {@code int} value OR-ing together the source language
modifiers that can be applied to a class.
@return an {@code int} value OR-ing together the source language
modifiers that can be applied to a class.

@jls 8.1.1 Class Modifiers
@since 1.7
"
      end

      operation 7356802 "interfaceModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an {@code int} value OR-ing together the source language
modifiers that can be applied to an interface.
@return an {@code int} value OR-ing together the source language
modifiers that can be applied to an interface.

@jls 9.1.1 Interface Modifiers
@since 1.7
"
      end

      operation 7356930 "constructorModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an {@code int} value OR-ing together the source language
modifiers that can be applied to a constructor.
@return an {@code int} value OR-ing together the source language
modifiers that can be applied to a constructor.

@jls 8.8.3 Constructor Modifiers
@since 1.7
"
      end

      operation 7357058 "methodModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an {@code int} value OR-ing together the source language
modifiers that can be applied to a method.
@return an {@code int} value OR-ing together the source language
modifiers that can be applied to a method.

@jls 8.4.3 Method Modifiers
@since 1.7
"
      end

      operation 7357186 "fieldModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an {@code int} value OR-ing together the source language
modifiers that can be applied to a field.
@return an {@code int} value OR-ing together the source language
modifiers that can be applied to a field.

@jls 8.3.1 Field Modifiers
@since 1.7
"
      end

      operation 7357314 "parameterModifiers"
	class_operation public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return an {@code int} value OR-ing together the source language
modifiers that can be applied to a parameter.
@return an {@code int} value OR-ing together the source language
modifiers that can be applied to a parameter.

@jls 8.4.1 Formal Parameters
@since 1.8
"
      end
    end

    class 958594 "WeakCache"
      visibility package 
      nformals 3
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "P" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Cache mapping pairs of {@code (key, sub-key) -> value}. Keys and values are
weakly but sub-keys are strongly referenced.  Keys are passed directly to
{@link #get} method which also takes a {@code parameter}. Sub-keys are
calculated from keys and parameters using the {@code subKeyFactory} function
passed to the constructor. Values are calculated from keys and parameters
using the {@code valueFactory} function passed to the constructor.
Keys can be {@code null} and are compared by identity while sub-keys returned by
{@code subKeyFactory} or values returned by {@code valueFactory}
can not be null. Sub-keys are compared using their {@link #equals} method.
Entries are expunged from cache lazily on each invocation to {@link #get},
{@link #containsValue} or {@link #size} methods when the WeakReferences to
keys are cleared. Cleared WeakReferences to individual values don't cause
expunging, but such entries are logically treated as non-existent and
trigger re-evaluation of {@code valueFactory} on request for their
key/subKey.

@author Peter Levart
@param <K> type of keys
@param <P> type of parameters
@param <V> type of values
"
      classrelation 3228418 // refQueue (<unidirectional association>)
	relation 3228418 --->
	  a role_name "refQueue" init_value " new ReferenceQueue<>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	    classrelation_ref 3228418 // refQueue (<unidirectional association>)
	  b parent class_ref 130946 // ReferenceQueue
      end

      classrelation 3228546 // map (<unidirectional association>)
	relation 3228546 --->
	  a role_name "map" init_value " new ConcurrentHashMap<>()" const_relation private
	    comment " the key type is Object for supporting null key
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object, ConcurrentMap<Object, Supplier<V>>> ${name}${value};
"
	    classrelation_ref 3228546 // map (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      classrelation 3228674 // reverseMap (<unidirectional association>)
	relation 3228674 --->
	  a role_name "reverseMap" init_value " new ConcurrentHashMap<>()" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Supplier<V>, Boolean> ${name}${value};
"
	    classrelation_ref 3228674 // reverseMap (<unidirectional association>)
	  b parent class_ref 130690 // ConcurrentMap
      end

      classrelation 3228802 // subKeyFactory (<unidirectional association>)
	relation 3228802 --->
	  a role_name "subKeyFactory" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, P, ?> ${name}${value};
"
	    classrelation_ref 3228802 // subKeyFactory (<unidirectional association>)
	  b parent class_ref 192642 // BiFunction
      end

      classrelation 3228930 // valueFactory (<unidirectional association>)
	relation 3228930 --->
	  a role_name "valueFactory" const_relation private
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, P, V> ${name}${value};
"
	    classrelation_ref 3228930 // valueFactory (<unidirectional association>)
	  b parent class_ref 192642 // BiFunction
      end

      operation 7366914 "WeakCache"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param inout name "subKeyFactory" type class_ref 192642 // BiFunction
	  param inout name "valueFactory" type class_ref 192642 // BiFunction
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, P, ?> ${p0}, ${t1}<K, P, V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an instance of {@code WeakCache}

@param subKeyFactory a function mapping a pair of
                     {@code (key, parameter) -> sub-key}
@param valueFactory  a function mapping a pair of
                     {@code (key, parameter) -> value}
@throws NullPointerException if {@code subKeyFactory} or
                             {@code valueFactory} is null.
"
      end

      operation 7367042 "get"
	cpp_inline public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "parameter" explicit_type "P"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Look-up the value through the cache. This always evaluates the
{@code subKeyFactory} function and optionally evaluates
{@code valueFactory} function if there is no entry in the cache for given
pair of (key, subKey) or the entry has already been cleared.

@param key       possibly null key
@param parameter parameter used together with key to create sub-key and
                 value (should not be null)
@return the cached value (never null)
@throws NullPointerException if {@code parameter} passed in or
                             {@code sub-key} calculated by
                             {@code subKeyFactory} or {@code value}
                             calculated by {@code valueFactory} is null.
"
      end

      operation 7367170 "containsValue"
	cpp_inline public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" explicit_type "V"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the specified non-null value is already present in this
{@code WeakCache}. The check is made using identity comparison regardless
of whether value's class overrides {@link Object#equals} or not.

@param value the non-null value to check
@return true if given {@code value} is already cached
@throws NullPointerException if value is null
"
      end

      operation 7367298 "size"
	cpp_inline public explicit_return_type "int"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current number of cached entries that
can decrease over time when keys/values are GC-ed.
"
      end

      operation 7367426 "expungeStaleEntries"
	cpp_inline private explicit_return_type "void"
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 959874 "Factory"
	visibility private 
	nactuals 1
	actual class class_ref 933634 // Supplier
	  rank 0 explicit_value ""
	cpp_decl ""
	final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3229058 // <realization>
	  relation 3229058 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3229058 // <realization>
	    b parent class_ref 933634 // Supplier
	end

	attribute 1742978 "key"
	  const_attribute private explicit_type "K"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	attribute 1743106 "parameter"
	  const_attribute private explicit_type "P"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	classrelation 3229186 // subKey (<unidirectional association>)
	  relation 3229186 --->
	    a role_name "subKey" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3229186 // subKey (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	classrelation 3229314 // valuesMap (<unidirectional association>)
	  relation 3229314 --->
	    a role_name "valuesMap" const_relation private
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object, Supplier<V>> ${name}${value};
"
	      classrelation_ref 3229314 // valuesMap (<unidirectional association>)
	    b parent class_ref 130690 // ConcurrentMap
	end

	operation 7367682 "Factory"
	  cpp_inline package explicit_return_type ""
	  nparams 4
	    param inout name "key" explicit_type "K"
	    param inout name "parameter" explicit_type "P"
	    param inout name "subKey" type class_ref 129538 // Object
	    param inout name "valuesMap" type class_ref 130690 // ConcurrentMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<Object, Supplier<V>> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7367810 "get"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 960002 "Value"
	visibility private stereotype "interface"
	nformals 1
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 933634 // Supplier
	  rank 0 explicit_value ""
	cpp_decl ""
	java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3229442 // <realization>
	  relation 3229442 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3229442 // <realization>
	    b parent class_ref 933634 // Supplier
	end
      end

      class 960130 "LookupValue"
	visibility private 
	nformals 1
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 958594 // WeakCache
	  rank 0 explicit_value ""
	actual class class_ref 958594 // WeakCache
	  rank 1 explicit_value ""
	actual class class_ref 958594 // WeakCache
	  rank 2 explicit_value ""
	actual class class_ref 960002 // Value
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3229570 // <realization>
	  relation 3229570 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3229570 // <realization>
	    b parent class_ref 960002 // Value
	end

	attribute 1743234 "value"
	  const_attribute private explicit_type "V"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7367938 "LookupValue"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7368066 "get"
	  cpp_inline public explicit_return_type "V"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7368194 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7368322 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 960258 "CacheValue"
	visibility private 
	nformals 1
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 5
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	actual class class_ref 958594 // WeakCache
	  rank 0 explicit_value ""
	actual class class_ref 958594 // WeakCache
	  rank 1 explicit_value ""
	actual class class_ref 958594 // WeakCache
	  rank 2 explicit_value ""
	actual class class_ref 960002 // Value
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3229698 // <realization>
	  relation 3229698 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3229698 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	classrelation 3229826 // <realization>
	  relation 3229826 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3229826 // <realization>
	    b parent class_ref 960002 // Value
	end

	attribute 1743362 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7368450 "CacheValue"
	  cpp_inline package explicit_return_type ""
	  nparams 1
	    param inout name "value" explicit_type "V"
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7368578 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7368706 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 960386 "CacheKey"
	visibility private 
	nformals 1
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 131330 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl ""
	final static java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	mysql_decl ""
	
	classrelation 3229954 // <realization>
	  relation 3229954 -_-|>
	    stereotype "bind"
	    a public
	      java "${type}"
	      classrelation_ref 3229954 // <realization>
	    b parent class_ref 131330 // WeakReference
	end

	classrelation 3230082 // NULL_KEY (<unidirectional association>)
	  relation 3230082 --->
	    a role_name "NULL_KEY" init_value " new Object()" class_relation const_relation private
	      comment " a replacement for null keys
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 3230082 // NULL_KEY (<unidirectional association>)
	    b parent class_ref 129538 // Object
	end

	operation 7368834 "valueOf"
	  class_operation cpp_inline package return_type class_ref 129538 // Object
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "refQueue" type class_ref 130946 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K> ${type} ${name}${(}${t0} ${p0}, ${t1}<K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 1743490 "hash"
	  const_attribute private explicit_type "int"
	  cpp_decl ""
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  mysql_decl ""
	  MysqlColumn
	end

	operation 7368962 "CacheKey"
	  cpp_inline private explicit_return_type ""
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "refQueue" type class_ref 130946 // ReferenceQueue
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 7369090 "hashCode"
	  cpp_inline public explicit_return_type "int"
	  nparams 0
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7369218 "equals"
	  cpp_inline public explicit_return_type "boolean"
	  nparams 1
	    param inout name "obj" type class_ref 129538 // Object
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 7369346 "expungeFrom"
	  cpp_inline package explicit_return_type "void"
	  nparams 2
	    param inout name "map" type class_ref 130690 // ConcurrentMap
	    param inout name "reverseMap" type class_ref 130690 // ConcurrentMap
	  
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?, ? extends ConcurrentMap<?, ?>> ${p0}, ${t1}<?, Boolean> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 959362 "ReflectAccess"
      visibility package 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment " Package-private class implementing the
sun.reflect.LangReflectAccess interface, allowing the java.lang
package to instantiate objects in this package. "
      operation 7363714 "newField"
	public return_type class_ref 189698 // Field
	nparams 7
	  param inout name "declaringClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "type" type class_ref 130818 // Class
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param inout name "signature" type class_ref 128130 // String
	  param inout name "annotations" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7363842 "newMethod"
	public return_type class_ref 137858 // Method
	nparams 11
	  param inout name "declaringClass" type class_ref 130818 // Class
	  param inout name "name" type class_ref 128130 // String
	  param inout name "parameterTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "returnType" type class_ref 130818 // Class
	  param inout name "checkedExceptions" type class_ref 130818 // Class
	multiplicity "[]"
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param inout name "signature" type class_ref 128130 // String
	  param inout name "annotations" explicit_type "byte"
	multiplicity "[]"
	  param inout name "parameterAnnotations" explicit_type "byte"
	multiplicity "[]"
	  param inout name "annotationDefault" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2}<?>[] ${p2}, ${t3}<?> ${p3}, ${t4}<?>[] ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}, ${t8}[] ${p8}, ${t9}[] ${p9}, ${t10}[] ${p10}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7363970 "newConstructor"
	public return_type class_ref 189186 // Constructor
	nparams 8
	  param inout name "declaringClass" type class_ref 130818 // Class
	  param inout name "parameterTypes" type class_ref 130818 // Class
	multiplicity "[]"
	  param inout name "checkedExceptions" type class_ref 130818 // Class
	multiplicity "[]"
	  param in name "modifiers" explicit_type "int"
	  param in name "slot" explicit_type "int"
	  param inout name "signature" type class_ref 128130 // String
	  param inout name "annotations" explicit_type "byte"
	multiplicity "[]"
	  param inout name "parameterAnnotations" explicit_type "byte"
	multiplicity "[]"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}, ${t1}<?>[] ${p1}, ${t2}<?>[] ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6}[] ${p6}, ${t7}[] ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7364098 "getMethodAccessor"
	public explicit_return_type "MethodAccessor"
	nparams 1
	  param inout name "m" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7364226 "setMethodAccessor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "m" type class_ref 137858 // Method
	  param inout name "accessor" explicit_type "MethodAccessor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7364354 "getConstructorAccessor"
	public explicit_return_type "ConstructorAccessor"
	nparams 1
	  param inout name "c" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7364482 "setConstructorAccessor"
	public explicit_return_type "void"
	nparams 2
	  param inout name "c" type class_ref 189186 // Constructor
	  param inout name "accessor" explicit_type "ConstructorAccessor"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7364610 "getConstructorSlot"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7364738 "getConstructorSignature"
	public return_type class_ref 128130 // String
	nparams 1
	  param inout name "c" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7364866 "getConstructorAnnotations"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "c" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7364994 "getConstructorParameterAnnotations"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "c" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7365122 "getExecutableTypeAnnotationBytes"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "ex" type class_ref 931586 // Executable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7365250 "copyMethod"
	public return_type class_ref 137858 // Method
	nparams 1
	  param inout name "arg" type class_ref 137858 // Method
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Copying routines, needed to quickly fabricate new Field,
 Method, and Constructor objects from templates
"
      end

      operation 7365378 "copyField"
	public return_type class_ref 189698 // Field
	nparams 1
	  param inout name "arg" type class_ref 189698 // Field
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 7365506 "copyConstructor"
	public return_type class_ref 189186 // Constructor
	nparams 1
	  param inout name "arg" type class_ref 189186 // Constructor
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 959618 "ReflectPermission"
      visibility public 
      cpp_decl ""
      final java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "The Permission class for reflective operations.
<P>
The following table
provides a summary description of what the permission allows,
and discusses the risks of granting code the permission.

<table border=1 cellpadding=5 summary=\"Table shows permission target name, what the permission allows, and associated risks\">
<tr>
<th>Permission Target Name</th>
<th>What the Permission Allows</th>
<th>Risks of Allowing this Permission</th>
</tr>

<tr>
  <td>suppressAccessChecks</td>
  <td>ability to suppress the standard Java language access checks
      on fields and methods in a class; allow access not only public members
      but also allow access to default (package) access, protected,
      and private members.</td>
  <td>This is dangerous in that information (possibly confidential) and
      methods normally unavailable would be accessible to malicious code.</td>
</tr>
<tr>
  <td>newProxyInPackage.{package name}</td>
  <td>ability to create a proxy instance in the specified package of which
      the non-public interface that the proxy class implements.</td>
  <td>This gives code access to classes in packages to which it normally
      does not have access and the dynamic proxy class is in the system
      protection domain. Malicious code may use these classes to
      help in its attempt to compromise security in the system.</td>
</tr>

</table>

@see java.security.Permission
@see java.security.BasicPermission
@see AccessibleObject
@see Field#get
@see Field#set
@see Method#invoke
@see Constructor#newInstance
@see Proxy#newProxyInstance

@since 1.2
"
      classrelation 3227778 // <generalisation>
	relation 3227778 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3227778 // <generalisation>
	  b parent class_ref 257410 // BasicPermission
      end

      attribute 1742722 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7412737110241507485L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      operation 7365634 "ReflectPermission"
	public explicit_return_type ""
	nparams 1
	  param inout name "name" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ReflectPermission with the specified name.

@param name the name of the ReflectPermission

@throws NullPointerException if {@code name} is {@code null}.
@throws IllegalArgumentException if {@code name} is empty.
"
      end

      operation 7365762 "ReflectPermission"
	public explicit_return_type ""
	nparams 2
	  param inout name "name" type class_ref 128130 // String
	  param inout name "actions" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a ReflectPermission with the specified name and actions.
The actions should be null; they are ignored.

@param name the name of the ReflectPermission

@param actions should be null

@throws NullPointerException if {@code name} is {@code null}.
@throws IllegalArgumentException if {@code name} is empty.
"
      end
    end

    class 959746 "UndeclaredThrowableException"
      visibility public 
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "Thrown by a method invocation on a proxy instance if its invocation
handler's {@link InvocationHandler#invoke invoke} method throws a
checked exception (a {@code Throwable} that is not assignable
to {@code RuntimeException} or {@code Error}) that
is not assignable to any of the exception types declared in the
{@code throws} clause of the method that was invoked on the
proxy instance and dispatched to the invocation handler.

<p>An {@code UndeclaredThrowableException} instance contains
the undeclared checked exception that was thrown by the invocation
handler, and it can be retrieved with the
{@code getUndeclaredThrowable()} method.
{@code UndeclaredThrowableException} extends
{@code RuntimeException}, so it is an unchecked exception
that wraps a checked exception.

<p>As of release 1.4, this exception has been retrofitted to
conform to the general purpose exception-chaining mechanism.  The
\"undeclared checked exception that was thrown by the invocation
handler\" that may be provided at construction time and accessed via
the {@link #getUndeclaredThrowable()} method is now known as the
<i>cause</i>, and may be accessed via the {@link
Throwable#getCause()} method, as well as the aforementioned \"legacy
method.\"

@author      Peter Jones
@see         InvocationHandler
@since       1.3
"
      classrelation 3228162 // <generalisation>
	relation 3228162 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3228162 // <generalisation>
	  b parent class_ref 214786 // RuntimeException
      end

      attribute 1742850 "serialVersionUID"
	class_attribute const_attribute package explicit_type "long"
	init_value " 330127114055056639L"
	cpp_decl ""
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	mysql_decl ""
	MysqlColumn
      end

      classrelation 3228290 // undeclaredThrowable (<unidirectional association>)
	relation 3228290 --->
	  a role_name "undeclaredThrowable" private
	    comment "
the undeclared checked exception that was thrown
@serial

"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3228290 // undeclaredThrowable (<unidirectional association>)
	  b parent class_ref 129922 // Throwable
      end

      operation 7366402 "UndeclaredThrowableException"
	public explicit_return_type ""
	nparams 1
	  param inout name "undeclaredThrowable" type class_ref 129922 // Throwable
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code UndeclaredThrowableException} with the
specified {@code Throwable}.

@param   undeclaredThrowable the undeclared checked exception
         that was thrown
"
      end

      operation 7366530 "UndeclaredThrowableException"
	public explicit_return_type ""
	nparams 2
	  param inout name "undeclaredThrowable" type class_ref 129922 // Throwable
	  param inout name "s" type class_ref 128130 // String
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code UndeclaredThrowableException} with the
specified {@code Throwable} and a detail message.

@param   undeclaredThrowable the undeclared checked exception
         that was thrown
@param   s the detail message
"
      end

      operation 7366658 "getUndeclaredThrowable"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code Throwable} instance wrapped in this
{@code UndeclaredThrowableException}, which may be {@code null}.

<p>This method predates the general-purpose exception chaining facility.
The {@link Throwable#getCause()} method is now the preferred means of
obtaining this information.

@return the undeclared checked exception that was thrown
"
      end

      operation 7366786 "getCause"
	public return_type class_ref 129922 // Throwable
	nparams 0
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the cause of this exception (the {@code Throwable}
instance wrapped in this {@code UndeclaredThrowableException},
which may be {@code null}).

@return  the cause of this exception.
@since   1.4
"
      end
    end

    class 960514 "WildcardType"
      visibility public stereotype "interface"
      cpp_decl ""
      java_decl "${comment}${@}${visibility}${static}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      mysql_decl ""
      
      comment "WildcardType represents a wildcard type expression, such as
{@code ?}, {@code ? extends Number}, or {@code ? super Integer}.

@since 1.5
"
      classrelation 3230210 // <generalisation>
	relation 3230210 ---|>
	  a public
	    java "${type}"
	    classrelation_ref 3230210 // <generalisation>
	  b parent class_ref 490114 // Type
      end

      operation 7369474 "getUpperBounds"
	public return_type class_ref 490114 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Type} objects representing the  upper
bound(s) of this type variable.  Note that if no upper bound is
explicitly declared, the upper bound is {@code Object}.

<p>For each upper bound B :
<ul>
 <li>if B is a parameterized type or a type variable, it is created,
 (see {@link java.lang.reflect.ParameterizedType ParameterizedType}
 for the details of the creation process for parameterized types).
 <li>Otherwise, B is resolved.
</ul>

@return an array of Types representing the upper bound(s) of this
    type variable
@throws TypeNotPresentException if any of the
    bounds refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the
    bounds refer to a parameterized type that cannot be instantiated
    for any reason
"
      end

      operation 7369602 "getLowerBounds"
	public return_type class_ref 490114 // Type
	nparams 0
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array of {@code Type} objects representing the
lower bound(s) of this type variable.  Note that if no lower bound is
explicitly declared, the lower bound is the type of {@code null}.
In this case, a zero length array is returned.

<p>For each lower bound B :
<ul>
  <li>if B is a parameterized type or a type variable, it is created,
 (see {@link java.lang.reflect.ParameterizedType ParameterizedType}
 for the details of the creation process for parameterized types).
  <li>Otherwise, B is resolved.
</ul>

@return an array of Types representing the lower bound(s) of this
    type variable
@throws TypeNotPresentException if any of the
    bounds refers to a non-existent type declaration
@throws MalformedParameterizedTypeException if any of the
    bounds refer to a parameterized type that cannot be instantiated
    for any reason
"
      end
    end
  end

  deploymentview 136578 "reflect"
    //deployment diagram settings
    deploymentdiagramsettings
     end
    artifact 201986 "InvocationHandler"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 260610 // InvocationHandler
      end
      comment "Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 676738 "AnnotatedElement"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.Annotation;
import java.lang.annotation.AnnotationFormatError;
import java.lang.annotation.Repeatable;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;
import sun.reflect.annotation.AnnotationSupport;
import sun.reflect.annotation.AnnotationType;
${definition}"
      associated_elems
	class_ref 494722 // AnnotatedElement
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 676866 "GenericDeclaration"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 930818 // GenericDeclaration
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 676994 "Type"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 490114 // Type
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 691586 "Member"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 194690 // Member
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 696962 "AccessibleObject"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import sun.reflect.Reflection;
import sun.reflect.ReflectionFactory;
import java.lang.annotation.Annotation;
${definition}"
      associated_elems
	class_ref 957058 // AccessibleObject
      end
      comment "Copyright (c) 1997, 2014, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 697090 "AnnotatedType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 931842 // AnnotatedType
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 697218 "AnnotatedArrayType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 957186 // AnnotatedArrayType
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 697346 "AnnotatedParameterizedType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 957314 // AnnotatedParameterizedType
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 697474 "AnnotatedTypeVariable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 957442 // AnnotatedTypeVariable
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 697602 "AnnotatedWildcardType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 957570 // AnnotatedWildcardType
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 697730 "Array"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 957698 // Array
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 697858 "Executable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import java.util.Map;
import java.util.Objects;
import sun.reflect.annotation.AnnotationParser;
import sun.reflect.annotation.AnnotationSupport;
import sun.reflect.annotation.TypeAnnotationParser;
import sun.reflect.annotation.TypeAnnotation;
import sun.reflect.generics.repository.ConstructorRepository;
${definition}"
      associated_elems
	class_ref 931586 // Executable
      end
      comment "Copyright (c) 2012, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 697986 "Constructor"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.reflect.CallerSensitive;
import sun.reflect.ConstructorAccessor;
import sun.reflect.Reflection;
import sun.reflect.annotation.TypeAnnotation;
import sun.reflect.annotation.TypeAnnotationParser;
import sun.reflect.generics.repository.ConstructorRepository;
import sun.reflect.generics.factory.CoreReflectionFactory;
import sun.reflect.generics.factory.GenericsFactory;
import sun.reflect.generics.scope.ConstructorScope;
import java.lang.annotation.Annotation;
import java.lang.annotation.AnnotationFormatError;
${definition}"
      associated_elems
	class_ref 189186 // Constructor
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 698114 "Field"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.reflect.CallerSensitive;
import sun.reflect.FieldAccessor;
import sun.reflect.Reflection;
import sun.reflect.generics.repository.FieldRepository;
import sun.reflect.generics.factory.CoreReflectionFactory;
import sun.reflect.generics.factory.GenericsFactory;
import sun.reflect.generics.scope.ClassScope;
import java.lang.annotation.Annotation;
import java.util.Map;
import java.util.Objects;
import sun.reflect.annotation.AnnotationParser;
import sun.reflect.annotation.AnnotationSupport;
import sun.reflect.annotation.TypeAnnotation;
import sun.reflect.annotation.TypeAnnotationParser;
${definition}"
      associated_elems
	class_ref 189698 // Field
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 698242 "GenericArrayType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 957954 // GenericArrayType
      end
      comment "Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 698370 "GenericSignatureFormatError"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 958082 // GenericSignatureFormatError
      end
      comment "Copyright (c) 2003, 2011, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 698498 "InvocationTargetException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 193410 // InvocationTargetException
      end
      comment "Copyright (c) 1996, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 698626 "MalformedParameterizedTypeException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 958210 // MalformedParameterizedTypeException
      end
      comment "Copyright (c) 2003, 2008, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 698754 "MalformedParametersException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 958338 // MalformedParametersException
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 698882 "Method"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.reflect.CallerSensitive;
import sun.reflect.MethodAccessor;
import sun.reflect.Reflection;
import sun.reflect.generics.repository.MethodRepository;
import sun.reflect.generics.factory.CoreReflectionFactory;
import sun.reflect.generics.factory.GenericsFactory;
import sun.reflect.generics.scope.MethodScope;
import sun.reflect.annotation.AnnotationType;
import sun.reflect.annotation.AnnotationParser;
import java.lang.annotation.Annotation;
import java.lang.annotation.AnnotationFormatError;
import java.nio.ByteBuffer;
${definition}"
      associated_elems
	class_ref 137858 // Method
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 699010 "Modifier"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.security.AccessController;
import sun.reflect.LangReflectAccess;
import sun.reflect.ReflectionFactory;
${definition}"
      associated_elems
	class_ref 958466 // Modifier
      end
      comment "Copyright (c) 1996, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 699138 "Parameter"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.annotation.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import sun.reflect.annotation.AnnotationSupport;
${definition}"
      associated_elems
	class_ref 957826 // Parameter
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 699266 "ParameterizedType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 491266 // ParameterizedType
      end
      comment "Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 699522 "Proxy"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.WeakReference;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Arrays;
import java.util.IdentityHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import sun.misc.ProxyGenerator;
import sun.misc.VM;
import sun.reflect.CallerSensitive;
import sun.reflect.Reflection;
import sun.reflect.misc.ReflectUtil;
import sun.security.util.SecurityConstants;
${definition}"
      associated_elems
	class_ref 261378 // Proxy
      end
      comment "Copyright (c) 1999, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 699650 "ReflectAccess"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import sun.reflect.MethodAccessor;
import sun.reflect.ConstructorAccessor;
${definition}"
      associated_elems
	class_ref 959362 // ReflectAccess
      end
      comment "Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 699778 "ReflectPermission"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 959618 // ReflectPermission
      end
      comment "Copyright (c) 1997, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 699906 "TypeVariable"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 930946 // TypeVariable
      end
      comment "Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 700034 "UndeclaredThrowableException"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 959746 // UndeclaredThrowableException
      end
      comment "Copyright (c) 1999, 2006, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 700290 "WeakCache"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
import java.lang.ref.ReferenceQueue;
import java.lang.ref.WeakReference;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.function.BiFunction;
import java.util.function.Supplier;
${definition}"
      associated_elems
	class_ref 958594 // WeakCache
      end
      comment "Copyright (c) 2013, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end

    artifact 700418 "WildcardType"
      stereotype "source"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_elems
	class_ref 960514 // WildcardType
      end
      comment "Copyright (c) 2003, 2004, Oracle and/or its affiliates. All rights reserved.
ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.




















"
    end
  end
end
